
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bc f9 00 00       	call   c000f9dc <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 73 02 00       	call   c0027378 <_init>
c0000025:	c3                   	ret    
c0000026:	bb d4 7e 02 c0       	mov    ebx,0xc0027ed4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb e0 7e 02 c0    	cmp    ebx,0xc0027ee0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 c3 02 c0       	mov    eax,0xc002c318
c0000049:	3d 18 c3 02 c0       	cmp    eax,0xc002c318
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 c3 02 c0       	push   0xc002c318
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 c3 02 c0       	mov    eax,0xc002c318
c0000075:	2d 18 c3 02 c0       	sub    eax,0xc002c318
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 c3 02 c0       	push   0xc002c318
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c948,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e8 7e 02 c0       	mov    ebx,0xc0027ee8
c00000bb:	81 eb e4 7e 02 c0    	sub    ebx,0xc0027ee4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e4 7e 02 c0       	mov    esi,0xc0027ee4
c00000ca:	a1 4c c9 02 c0       	mov    eax,ds:0xc002c94c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c c9 02 c0       	mov    ds:0xc002c94c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c c9 02 c0       	mov    eax,ds:0xc002c94c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 c3 02 c0       	push   0xc002c318
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c948,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 c9 02 c0       	push   0xc002c950
c000012c:	68 18 c3 02 c0       	push   0xc002c318
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 9d c8 01 00       	call   c001cc38 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 00 23 01 00       	call   c00126b3 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 7b c8 01 00       	call   c001cc38 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 c9 cc 01 00       	call   c001d0a5 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 77 d2 01 00       	call   c001d65c <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 cd 02 c0 	lgdtd  ds:0xc002cd90
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 ca 3f 01 00       	call   c00145a3 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00006aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006ae:	89 f1                	mov    ecx,esi
c00006b0:	01 d3                	add    ebx,edx
c00006b2:	39 da                	cmp    edx,ebx
c00006b4:	74 09                	je     c00006bf <memcpy+0x1f>
c00006b6:	8a 02                	mov    al,BYTE PTR [edx]
c00006b8:	41                   	inc    ecx
c00006b9:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00006bc:	42                   	inc    edx
c00006bd:	eb f3                	jmp    c00006b2 <memcpy+0x12>
c00006bf:	89 f0                	mov    eax,esi
c00006c1:	5b                   	pop    ebx
c00006c2:	5e                   	pop    esi
c00006c3:	c3                   	ret    

c00006c4 <memset>:
c00006c4:	53                   	push   ebx
c00006c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006cd:	89 c2                	mov    edx,eax
c00006cf:	01 c1                	add    ecx,eax
c00006d1:	39 ca                	cmp    edx,ecx
c00006d3:	74 0a                	je     c00006df <memset+0x1b>
c00006d5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d9:	42                   	inc    edx
c00006da:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006dd:	eb f2                	jmp    c00006d1 <memset+0xd>
c00006df:	5b                   	pop    ebx
c00006e0:	c3                   	ret    

c00006e1 <strlen>:
c00006e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e5:	31 c0                	xor    eax,eax
c00006e7:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006eb:	74 03                	je     c00006f0 <strlen+0xf>
c00006ed:	40                   	inc    eax
c00006ee:	eb f7                	jmp    c00006e7 <strlen+0x6>
c00006f0:	c3                   	ret    

c00006f1 <strpbrk>:
c00006f1:	53                   	push   ebx
c00006f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f6:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f8:	84 c9                	test   cl,cl
c00006fa:	74 14                	je     c0000710 <strpbrk+0x1f>
c00006fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000700:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000702:	84 db                	test   bl,bl
c0000704:	74 07                	je     c000070d <strpbrk+0x1c>
c0000706:	38 cb                	cmp    bl,cl
c0000708:	74 08                	je     c0000712 <strpbrk+0x21>
c000070a:	42                   	inc    edx
c000070b:	eb f3                	jmp    c0000700 <strpbrk+0xf>
c000070d:	40                   	inc    eax
c000070e:	eb e6                	jmp    c00006f6 <strpbrk+0x5>
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	c3                   	ret    

c0000714 <strtok>:
c0000714:	56                   	push   esi
c0000715:	53                   	push   ebx
c0000716:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 0e                	jne    c0000730 <strtok+0x1c>
c0000722:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c0000728:	85 db                	test   ebx,ebx
c000072a:	75 04                	jne    c0000730 <strtok+0x1c>
c000072c:	31 db                	xor    ebx,ebx
c000072e:	eb 2e                	jmp    c000075e <strtok+0x4a>
c0000730:	56                   	push   esi
c0000731:	53                   	push   ebx
c0000732:	e8 ba ff ff ff       	call   c00006f1 <strpbrk>
c0000737:	5a                   	pop    edx
c0000738:	a3 68 c9 02 c0       	mov    ds:0xc002c968,eax
c000073d:	59                   	pop    ecx
c000073e:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0000743:	39 d8                	cmp    eax,ebx
c0000745:	75 07                	jne    c000074e <strtok+0x3a>
c0000747:	43                   	inc    ebx
c0000748:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074c:	eb e2                	jmp    c0000730 <strtok+0x1c>
c000074e:	85 c0                	test   eax,eax
c0000750:	74 da                	je     c000072c <strtok+0x18>
c0000752:	8d 50 01             	lea    edx,[eax+0x1]
c0000755:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000758:	89 15 68 c9 02 c0    	mov    DWORD PTR ds:0xc002c968,edx
c000075e:	89 d8                	mov    eax,ebx
c0000760:	5b                   	pop    ebx
c0000761:	5e                   	pop    esi
c0000762:	c3                   	ret    

c0000763 <strcpy>:
c0000763:	53                   	push   ebx
c0000764:	31 d2                	xor    edx,edx
c0000766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076e:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000771:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000774:	84 c9                	test   cl,cl
c0000776:	74 06                	je     c000077e <strcpy+0x1b>
c0000778:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077b:	42                   	inc    edx
c000077c:	eb ec                	jmp    c000076a <strcpy+0x7>
c000077e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000781:	5b                   	pop    ebx
c0000782:	c3                   	ret    

c0000783 <strncpy>:
c0000783:	56                   	push   esi
c0000784:	53                   	push   ebx
c0000785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000789:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000791:	89 c3                	mov    ebx,eax
c0000793:	85 c9                	test   ecx,ecx
c0000795:	74 1a                	je     c00007b1 <strncpy+0x2e>
c0000797:	46                   	inc    esi
c0000798:	43                   	inc    ebx
c0000799:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079c:	49                   	dec    ecx
c000079d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a0:	84 d2                	test   dl,dl
c00007a2:	75 ef                	jne    c0000793 <strncpy+0x10>
c00007a4:	31 d2                	xor    edx,edx
c00007a6:	39 d1                	cmp    ecx,edx
c00007a8:	74 07                	je     c00007b1 <strncpy+0x2e>
c00007aa:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ae:	42                   	inc    edx
c00007af:	eb f5                	jmp    c00007a6 <strncpy+0x23>
c00007b1:	5b                   	pop    ebx
c00007b2:	5e                   	pop    esi
c00007b3:	c3                   	ret    

c00007b4 <strcmp>:
c00007b4:	31 c9                	xor    ecx,ecx
c00007b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007be:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c2:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c6:	38 d0                	cmp    al,dl
c00007c8:	75 08                	jne    c00007d2 <strcmp+0x1e>
c00007ca:	41                   	inc    ecx
c00007cb:	84 c0                	test   al,al
c00007cd:	75 e7                	jne    c00007b6 <strcmp+0x2>
c00007cf:	31 c0                	xor    eax,eax
c00007d1:	c3                   	ret    
c00007d2:	29 d0                	sub    eax,edx
c00007d4:	c3                   	ret    

c00007d5 <strchr>:
c00007d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d9:	8a 10                	mov    dl,BYTE PTR [eax]
c00007db:	84 d2                	test   dl,dl
c00007dd:	74 09                	je     c00007e8 <strchr+0x13>
c00007df:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e3:	74 05                	je     c00007ea <strchr+0x15>
c00007e5:	40                   	inc    eax
c00007e6:	eb f1                	jmp    c00007d9 <strchr+0x4>
c00007e8:	31 c0                	xor    eax,eax
c00007ea:	c3                   	ret    

c00007eb <strncmp>:
c00007eb:	56                   	push   esi
c00007ec:	53                   	push   ebx
c00007ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f9:	01 d6                	add    esi,edx
c00007fb:	39 f2                	cmp    edx,esi
c00007fd:	74 12                	je     c0000811 <strncmp+0x26>
c00007ff:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000802:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000805:	38 c8                	cmp    al,cl
c0000807:	75 0c                	jne    c0000815 <strncmp+0x2a>
c0000809:	42                   	inc    edx
c000080a:	84 c0                	test   al,al
c000080c:	74 03                	je     c0000811 <strncmp+0x26>
c000080e:	43                   	inc    ebx
c000080f:	eb ea                	jmp    c00007fb <strncmp+0x10>
c0000811:	31 c0                	xor    eax,eax
c0000813:	eb 02                	jmp    c0000817 <strncmp+0x2c>
c0000815:	29 c8                	sub    eax,ecx
c0000817:	5b                   	pop    ebx
c0000818:	5e                   	pop    esi
c0000819:	c3                   	ret    

c000081a <strcat>:
c000081a:	53                   	push   ebx
c000081b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081f:	89 c1                	mov    ecx,eax
c0000821:	8d 51 01             	lea    edx,[ecx+0x1]
c0000824:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000828:	74 04                	je     c000082e <strcat+0x14>
c000082a:	89 d1                	mov    ecx,edx
c000082c:	eb f3                	jmp    c0000821 <strcat+0x7>
c000082e:	31 d2                	xor    edx,edx
c0000830:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000834:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000837:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083a:	42                   	inc    edx
c000083b:	84 db                	test   bl,bl
c000083d:	75 f1                	jne    c0000830 <strcat+0x16>
c000083f:	5b                   	pop    ebx
c0000840:	c3                   	ret    

c0000841 <strncat>:
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000847:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084f:	89 c2                	mov    edx,eax
c0000851:	85 db                	test   ebx,ebx
c0000853:	74 23                	je     c0000878 <strncat+0x37>
c0000855:	8d 72 01             	lea    esi,[edx+0x1]
c0000858:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085c:	74 04                	je     c0000862 <strncat+0x21>
c000085e:	89 f2                	mov    edx,esi
c0000860:	eb f3                	jmp    c0000855 <strncat+0x14>
c0000862:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000865:	41                   	inc    ecx
c0000866:	42                   	inc    edx
c0000867:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086d:	84 db                	test   bl,bl
c000086f:	74 07                	je     c0000878 <strncat+0x37>
c0000871:	39 f1                	cmp    ecx,esi
c0000873:	75 f0                	jne    c0000865 <strncat+0x24>
c0000875:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000878:	5b                   	pop    ebx
c0000879:	5e                   	pop    esi
c000087a:	c3                   	ret    

c000087b <strstr>:
c000087b:	57                   	push   edi
c000087c:	56                   	push   esi
c000087d:	53                   	push   ebx
c000087e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000882:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000886:	57                   	push   edi
c0000887:	e8 55 fe ff ff       	call   c00006e1 <strlen>
c000088c:	59                   	pop    ecx
c000088d:	89 c6                	mov    esi,eax
c000088f:	85 c0                	test   eax,eax
c0000891:	74 1f                	je     c00008b2 <strstr+0x37>
c0000893:	53                   	push   ebx
c0000894:	e8 48 fe ff ff       	call   c00006e1 <strlen>
c0000899:	5a                   	pop    edx
c000089a:	39 f0                	cmp    eax,esi
c000089c:	72 12                	jb     c00008b0 <strstr+0x35>
c000089e:	56                   	push   esi
c000089f:	57                   	push   edi
c00008a0:	53                   	push   ebx
c00008a1:	e8 97 fd ff ff       	call   c000063d <memcmp>
c00008a6:	83 c4 0c             	add    esp,0xc
c00008a9:	85 c0                	test   eax,eax
c00008ab:	74 05                	je     c00008b2 <strstr+0x37>
c00008ad:	43                   	inc    ebx
c00008ae:	eb e3                	jmp    c0000893 <strstr+0x18>
c00008b0:	31 db                	xor    ebx,ebx
c00008b2:	89 d8                	mov    eax,ebx
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	5f                   	pop    edi
c00008b7:	c3                   	ret    

c00008b8 <toupper>:
c00008b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bc:	0f b6 d0             	movzx  edx,al
c00008bf:	f6 82 00 7f 02 c0 02 	test   BYTE PTR [edx-0x3ffd8100],0x2
c00008c6:	74 03                	je     c00008cb <toupper+0x13>
c00008c8:	83 e8 20             	sub    eax,0x20
c00008cb:	c3                   	ret    

c00008cc <tolower>:
c00008cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d0:	0f b6 d0             	movzx  edx,al
c00008d3:	f6 82 00 7f 02 c0 01 	test   BYTE PTR [edx-0x3ffd8100],0x1
c00008da:	74 03                	je     c00008df <tolower+0x13>
c00008dc:	83 c0 20             	add    eax,0x20
c00008df:	c3                   	ret    

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f2:	f6 82 00 7f 02 c0 08 	test   BYTE PTR [edx-0x3ffd8100],0x8
c00008f9:	74 03                	je     c00008fe <simple_strtoul+0x1e>
c00008fb:	41                   	inc    ecx
c00008fc:	eb f1                	jmp    c00008ef <simple_strtoul+0xf>
c00008fe:	80 fa 09             	cmp    dl,0x9
c0000901:	74 f8                	je     c00008fb <simple_strtoul+0x1b>
c0000903:	80 fa 2d             	cmp    dl,0x2d
c0000906:	75 0b                	jne    c0000913 <simple_strtoul+0x33>
c0000908:	41                   	inc    ecx
c0000909:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000911:	eb 0e                	jmp    c0000921 <simple_strtoul+0x41>
c0000913:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091b:	80 fa 2b             	cmp    dl,0x2b
c000091e:	75 01                	jne    c0000921 <simple_strtoul+0x41>
c0000920:	41                   	inc    ecx
c0000921:	85 f6                	test   esi,esi
c0000923:	75 22                	jne    c0000947 <simple_strtoul+0x67>
c0000925:	be 0a 00 00 00       	mov    esi,0xa
c000092a:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092d:	75 5a                	jne    c0000989 <simple_strtoul+0xa9>
c000092f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000933:	50                   	push   eax
c0000934:	e8 93 ff ff ff       	call   c00008cc <tolower>
c0000939:	5a                   	pop    edx
c000093a:	83 f8 78             	cmp    eax,0x78
c000093d:	74 03                	je     c0000942 <simple_strtoul+0x62>
c000093f:	41                   	inc    ecx
c0000940:	eb 16                	jmp    c0000958 <simple_strtoul+0x78>
c0000942:	83 c1 02             	add    ecx,0x2
c0000945:	eb 22                	jmp    c0000969 <simple_strtoul+0x89>
c0000947:	8d 46 fe             	lea    eax,[esi-0x2]
c000094a:	83 f8 22             	cmp    eax,0x22
c000094d:	0f 87 b7 00 00 00    	ja     c0000a0a <simple_strtoul+0x12a>
c0000953:	83 fe 08             	cmp    esi,0x8
c0000956:	75 0c                	jne    c0000964 <simple_strtoul+0x84>
c0000958:	be 08 00 00 00       	mov    esi,0x8
c000095d:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000960:	75 27                	jne    c0000989 <simple_strtoul+0xa9>
c0000962:	eb 1f                	jmp    c0000983 <simple_strtoul+0xa3>
c0000964:	83 fe 10             	cmp    esi,0x10
c0000967:	75 20                	jne    c0000989 <simple_strtoul+0xa9>
c0000969:	be 10 00 00 00       	mov    esi,0x10
c000096e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000971:	75 16                	jne    c0000989 <simple_strtoul+0xa9>
c0000973:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000977:	50                   	push   eax
c0000978:	e8 4f ff ff ff       	call   c00008cc <tolower>
c000097d:	5d                   	pop    ebp
c000097e:	83 f8 78             	cmp    eax,0x78
c0000981:	74 03                	je     c0000986 <simple_strtoul+0xa6>
c0000983:	41                   	inc    ecx
c0000984:	eb 03                	jmp    c0000989 <simple_strtoul+0xa9>
c0000986:	83 c1 02             	add    ecx,0x2
c0000989:	31 ed                	xor    ebp,ebp
c000098b:	31 db                	xor    ebx,ebx
c000098d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000994:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000996:	84 d2                	test   dl,dl
c0000998:	74 27                	je     c00009c1 <simple_strtoul+0xe1>
c000099a:	0f b6 fa             	movzx  edi,dl
c000099d:	f6 87 00 7f 02 c0 04 	test   BYTE PTR [edi-0x3ffd8100],0x4
c00009a4:	74 05                	je     c00009ab <simple_strtoul+0xcb>
c00009a6:	83 ef 30             	sub    edi,0x30
c00009a9:	eb 22                	jmp    c00009cd <simple_strtoul+0xed>
c00009ab:	0f be d2             	movsx  edx,dl
c00009ae:	52                   	push   edx
c00009af:	e8 04 ff ff ff       	call   c00008b8 <toupper>
c00009b4:	5f                   	pop    edi
c00009b5:	0f b6 d0             	movzx  edx,al
c00009b8:	f6 82 00 7f 02 c0 01 	test   BYTE PTR [edx-0x3ffd8100],0x1
c00009bf:	75 09                	jne    c00009ca <simple_strtoul+0xea>
c00009c1:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c6:	75 2d                	jne    c00009f5 <simple_strtoul+0x115>
c00009c8:	eb 57                	jmp    c0000a21 <simple_strtoul+0x141>
c00009ca:	8d 78 c9             	lea    edi,[eax-0x37]
c00009cd:	39 f7                	cmp    edi,esi
c00009cf:	73 f0                	jae    c00009c1 <simple_strtoul+0xe1>
c00009d1:	31 d2                	xor    edx,edx
c00009d3:	89 f8                	mov    eax,edi
c00009d5:	f7 d0                	not    eax
c00009d7:	f7 f6                	div    esi
c00009d9:	39 d8                	cmp    eax,ebx
c00009db:	72 0e                	jb     c00009eb <simple_strtoul+0x10b>
c00009dd:	0f af de             	imul   ebx,esi
c00009e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e7:	01 fb                	add    ebx,edi
c00009e9:	eb 07                	jmp    c00009f2 <simple_strtoul+0x112>
c00009eb:	bd 01 00 00 00       	mov    ebp,0x1
c00009f0:	31 db                	xor    ebx,ebx
c00009f2:	41                   	inc    ecx
c00009f3:	eb 9f                	jmp    c0000994 <simple_strtoul+0xb4>
c00009f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f8:	09 d8                	or     eax,ebx
c00009fa:	75 1f                	jne    c0000a1b <simple_strtoul+0x13b>
c00009fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a00:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a04:	31 db                	xor    ebx,ebx
c0000a06:	89 38                	mov    DWORD PTR [eax],edi
c0000a08:	eb 17                	jmp    c0000a21 <simple_strtoul+0x141>
c0000a0a:	31 db                	xor    ebx,ebx
c0000a0c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a11:	74 14                	je     c0000a27 <simple_strtoul+0x147>
c0000a13:	31 ed                	xor    ebp,ebp
c0000a15:	85 c9                	test   ecx,ecx
c0000a17:	75 e3                	jne    c00009fc <simple_strtoul+0x11c>
c0000a19:	31 db                	xor    ebx,ebx
c0000a1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a1f:	89 08                	mov    DWORD PTR [eax],ecx
c0000a21:	4d                   	dec    ebp
c0000a22:	75 03                	jne    c0000a27 <simple_strtoul+0x147>
c0000a24:	83 cb ff             	or     ebx,0xffffffff
c0000a27:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2c:	75 02                	jne    c0000a30 <simple_strtoul+0x150>
c0000a2e:	f7 db                	neg    ebx
c0000a30:	83 c4 08             	add    esp,0x8
c0000a33:	89 d8                	mov    eax,ebx
c0000a35:	5b                   	pop    ebx
c0000a36:	5e                   	pop    esi
c0000a37:	5f                   	pop    edi
c0000a38:	5d                   	pop    ebp
c0000a39:	c3                   	ret    

c0000a3a <largebin_index>:
c0000a3a:	89 c2                	mov    edx,eax
c0000a3c:	c1 ea 08             	shr    edx,0x8
c0000a3f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a45:	77 10                	ja     c0000a57 <largebin_index+0x1d>
c0000a47:	0f bd d2             	bsr    edx,edx
c0000a4a:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4d:	d3 e8                	shr    eax,cl
c0000a4f:	83 e0 03             	and    eax,0x3
c0000a52:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a56:	c3                   	ret    
c0000a57:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5c:	c3                   	ret    

c0000a5d <malloc_init_state>:
c0000a5d:	53                   	push   ebx
c0000a5e:	8d 50 34             	lea    edx,[eax+0x34]
c0000a61:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a67:	89 d1                	mov    ecx,edx
c0000a69:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6c:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a6f:	83 c2 08             	add    edx,0x8
c0000a72:	39 da                	cmp    edx,ebx
c0000a74:	75 f3                	jne    c0000a69 <malloc_init_state+0xc>
c0000a76:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a78:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a82:	83 e2 03             	and    edx,0x3
c0000a85:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a8f:	83 ca 48             	or     edx,0x48
c0000a92:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9c:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa6:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aad:	89 10                	mov    DWORD PTR [eax],edx
c0000aaf:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab2:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abc:	5b                   	pop    ebx
c0000abd:	c3                   	ret    

c0000abe <malloc_consolidate>:
c0000abe:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac0:	85 d2                	test   edx,edx
c0000ac2:	0f 84 d8 00 00 00    	je     c0000ba0 <malloc_consolidate+0xe2>
c0000ac8:	55                   	push   ebp
c0000ac9:	83 e2 fd             	and    edx,0xfffffffd
c0000acc:	57                   	push   edi
c0000acd:	89 c5                	mov    ebp,eax
c0000acf:	56                   	push   esi
c0000ad0:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad3:	53                   	push   ebx
c0000ad4:	83 ec 10             	sub    esp,0x10
c0000ad7:	89 10                	mov    DWORD PTR [eax],edx
c0000ad9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000add:	c1 ea 03             	shr    edx,0x3
c0000ae0:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aeb:	85 d2                	test   edx,edx
c0000aed:	0f 84 98 00 00 00    	je     c0000b8b <malloc_consolidate+0xcd>
c0000af3:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afd:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b04:	89 f9                	mov    ecx,edi
c0000b06:	83 e1 fe             	and    ecx,0xfffffffe
c0000b09:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b0f:	83 e3 fc             	and    ebx,0xfffffffc
c0000b12:	83 e7 01             	and    edi,0x1
c0000b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b18:	75 14                	jne    c0000b2e <malloc_consolidate+0x70>
c0000b1a:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1c:	29 fa                	sub    edx,edi
c0000b1e:	01 f9                	add    ecx,edi
c0000b20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b23:	89 fb                	mov    ebx,edi
c0000b25:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b28:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2b:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2e:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b31:	74 40                	je     c0000b73 <malloc_consolidate+0xb5>
c0000b33:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b36:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b39:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3d:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b40:	83 e7 01             	and    edi,0x1
c0000b43:	75 0e                	jne    c0000b53 <malloc_consolidate+0x95>
c0000b45:	01 d9                	add    ecx,ebx
c0000b47:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4a:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b50:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b53:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b56:	89 ce                	mov    esi,ecx
c0000b58:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5b:	83 ce 01             	or     esi,0x1
c0000b5e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b61:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b64:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b67:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b6b:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6e:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b71:	eb 0c                	jmp    c0000b7f <malloc_consolidate+0xc1>
c0000b73:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b76:	83 c9 01             	or     ecx,0x1
c0000b79:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b83:	85 d2                	test   edx,edx
c0000b85:	0f 85 6f ff ff ff    	jne    c0000afa <malloc_consolidate+0x3c>
c0000b8b:	83 c5 04             	add    ebp,0x4
c0000b8e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b92:	0f 85 50 ff ff ff    	jne    c0000ae8 <malloc_consolidate+0x2a>
c0000b98:	83 c4 10             	add    esp,0x10
c0000b9b:	5b                   	pop    ebx
c0000b9c:	5e                   	pop    esi
c0000b9d:	5f                   	pop    edi
c0000b9e:	5d                   	pop    ebp
c0000b9f:	c3                   	ret    
c0000ba0:	e9 b8 fe ff ff       	jmp    c0000a5d <malloc_init_state>

c0000ba5 <dlfree>:
c0000ba5:	57                   	push   edi
c0000ba6:	56                   	push   esi
c0000ba7:	53                   	push   ebx
c0000ba8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bac:	85 db                	test   ebx,ebx
c0000bae:	0f 84 e2 00 00 00    	je     c0000c96 <dlfree+0xf1>
c0000bb4:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb7:	8b 0d 80 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c980
c0000bbd:	89 f0                	mov    eax,esi
c0000bbf:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc2:	83 e0 fc             	and    eax,0xfffffffc
c0000bc5:	39 c1                	cmp    ecx,eax
c0000bc7:	72 24                	jb     c0000bed <dlfree+0x48>
c0000bc9:	83 c9 03             	or     ecx,0x3
c0000bcc:	c1 e8 03             	shr    eax,0x3
c0000bcf:	89 0d 80 c9 02 c0    	mov    DWORD PTR ds:0xc002c980,ecx
c0000bd5:	83 e8 02             	sub    eax,0x2
c0000bd8:	8b 0c 85 84 c9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd367c]
c0000bdf:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be1:	89 14 85 84 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd367c],edx
c0000be8:	e9 a9 00 00 00       	jmp    c0000c96 <dlfree+0xf1>
c0000bed:	83 e6 02             	and    esi,0x2
c0000bf0:	0f 85 a0 00 00 00    	jne    c0000c96 <dlfree+0xf1>
c0000bf6:	83 c9 01             	or     ecx,0x1
c0000bf9:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfc:	89 0d 80 c9 02 c0    	mov    DWORD PTR ds:0xc002c980,ecx
c0000c02:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c05:	83 e1 fc             	and    ecx,0xfffffffc
c0000c08:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0c:	75 13                	jne    c0000c21 <dlfree+0x7c>
c0000c0e:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c11:	29 da                	sub    edx,ebx
c0000c13:	01 d8                	add    eax,ebx
c0000c15:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c18:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1b:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1e:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c21:	39 35 ac c9 02 c0    	cmp    DWORD PTR ds:0xc002c9ac,esi
c0000c27:	74 40                	je     c0000c69 <dlfree+0xc4>
c0000c29:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2d:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c30:	80 e3 01             	and    bl,0x1
c0000c33:	75 0e                	jne    c0000c43 <dlfree+0x9e>
c0000c35:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c38:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3b:	01 c8                	add    eax,ecx
c0000c3d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c40:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c43:	8b 0d bc c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c9bc
c0000c49:	c7 42 0c b4 c9 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c9b4
c0000c50:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c53:	89 15 bc c9 02 c0    	mov    DWORD PTR ds:0xc002c9bc,edx
c0000c59:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5c:	89 c1                	mov    ecx,eax
c0000c5e:	83 c9 01             	or     ecx,0x1
c0000c61:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c64:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c67:	eb 10                	jmp    c0000c79 <dlfree+0xd4>
c0000c69:	01 c8                	add    eax,ecx
c0000c6b:	89 c1                	mov    ecx,eax
c0000c6d:	83 c9 01             	or     ecx,0x1
c0000c70:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c73:	89 15 ac c9 02 c0    	mov    DWORD PTR ds:0xc002c9ac,edx
c0000c79:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7e:	76 16                	jbe    c0000c96 <dlfree+0xf1>
c0000c80:	f6 05 80 c9 02 c0 02 	test   BYTE PTR ds:0xc002c980,0x2
c0000c87:	74 0d                	je     c0000c96 <dlfree+0xf1>
c0000c89:	5b                   	pop    ebx
c0000c8a:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	e9 28 fe ff ff       	jmp    c0000abe <malloc_consolidate>
c0000c96:	5b                   	pop    ebx
c0000c97:	5e                   	pop    esi
c0000c98:	5f                   	pop    edi
c0000c99:	c3                   	ret    

c0000c9a <sYSMALLOc>:
c0000c9a:	55                   	push   ebp
c0000c9b:	57                   	push   edi
c0000c9c:	56                   	push   esi
c0000c9d:	53                   	push   ebx
c0000c9e:	89 d3                	mov    ebx,edx
c0000ca0:	83 ec 2c             	sub    esp,0x2c
c0000ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ca7:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cad:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cb0:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb7:	74 1f                	je     c0000cd8 <sYSMALLOc+0x3e>
c0000cb9:	89 d8                	mov    eax,ebx
c0000cbb:	e8 fe fd ff ff       	call   c0000abe <malloc_consolidate>
c0000cc0:	83 ec 0c             	sub    esp,0xc
c0000cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cc7:	83 e8 07             	sub    eax,0x7
c0000cca:	50                   	push   eax
c0000ccb:	e8 30 02 00 00       	call   c0000f00 <dlmalloc>
c0000cd0:	83 c4 10             	add    esp,0x10
c0000cd3:	e9 20 02 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000cd8:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cdb:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ce1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ce4:	83 e0 fc             	and    eax,0xfffffffc
c0000ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cef:	83 c0 10             	add    eax,0x10
c0000cf2:	01 c1                	add    ecx,eax
c0000cf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf8:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cff:	74 04                	je     c0000d05 <sYSMALLOc+0x6b>
c0000d01:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d05:	f7 da                	neg    edx
c0000d07:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d0f:	21 d1                	and    ecx,edx
c0000d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d15:	7f 07                	jg     c0000d1e <sYSMALLOc+0x84>
c0000d17:	31 c0                	xor    eax,eax
c0000d19:	e9 da 01 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000d1e:	83 ec 0c             	sub    esp,0xc
c0000d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d25:	e8 51 e7 00 00       	call   c000f47b <sbrk>
c0000d2a:	83 c4 10             	add    esp,0x10
c0000d2d:	89 c6                	mov    esi,eax
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	74 e3                	je     c0000d17 <sYSMALLOc+0x7d>
c0000d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d38:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d3c:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d3f:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d45:	39 f1                	cmp    ecx,esi
c0000d47:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d4d:	75 13                	jne    c0000d62 <sYSMALLOc+0xc8>
c0000d4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d53:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d57:	83 c8 01             	or     eax,0x1
c0000d5a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5d:	e9 3e 01 00 00       	jmp    c0000ea0 <sYSMALLOc+0x206>
c0000d62:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d68:	88 d0                	mov    al,dl
c0000d6a:	83 e0 01             	and    eax,0x1
c0000d6d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d76:	0f 95 c0             	setne  al
c0000d79:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d7d:	39 f1                	cmp    ecx,esi
c0000d7f:	76 12                	jbe    c0000d93 <sYSMALLOc+0xf9>
c0000d81:	84 c0                	test   al,al
c0000d83:	74 0e                	je     c0000d93 <sYSMALLOc+0xf9>
c0000d85:	83 e2 fe             	and    edx,0xfffffffe
c0000d88:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d8e:	e9 83 00 00 00       	jmp    c0000e16 <sYSMALLOc+0x17c>
c0000d93:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d98:	74 7c                	je     c0000e16 <sYSMALLOc+0x17c>
c0000d9a:	84 c0                	test   al,al
c0000d9c:	74 0c                	je     c0000daa <sYSMALLOc+0x110>
c0000d9e:	89 f0                	mov    eax,esi
c0000da0:	29 c8                	sub    eax,ecx
c0000da2:	01 e8                	add    eax,ebp
c0000da4:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000daa:	89 f2                	mov    edx,esi
c0000dac:	83 e2 07             	and    edx,0x7
c0000daf:	74 0c                	je     c0000dbd <sYSMALLOc+0x123>
c0000db1:	b8 08 00 00 00       	mov    eax,0x8
c0000db6:	29 d0                	sub    eax,edx
c0000db8:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dbb:	eb 04                	jmp    c0000dc1 <sYSMALLOc+0x127>
c0000dbd:	89 f5                	mov    ebp,esi
c0000dbf:	31 c0                	xor    eax,eax
c0000dc1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dcd:	01 c1                	add    ecx,eax
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	01 f1                	add    ecx,esi
c0000dd4:	01 ca                	add    edx,ecx
c0000dd6:	29 c8                	sub    eax,ecx
c0000dd8:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ddc:	01 c2                	add    edx,eax
c0000dde:	52                   	push   edx
c0000ddf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000de3:	e8 93 e6 00 00       	call   c000f47b <sbrk>
c0000de8:	83 c4 10             	add    esp,0x10
c0000deb:	83 f8 ff             	cmp    eax,0xffffffff
c0000dee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df2:	75 0f                	jne    c0000e03 <sYSMALLOc+0x169>
c0000df4:	83 ec 0c             	sub    esp,0xc
c0000df7:	6a 00                	push   0x0
c0000df9:	e8 7d e6 00 00       	call   c000f47b <sbrk>
c0000dfe:	83 c4 10             	add    esp,0x10
c0000e01:	eb 30                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e03:	39 c6                	cmp    esi,eax
c0000e05:	76 33                	jbe    c0000e3a <sYSMALLOc+0x1a0>
c0000e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e0b:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e12:	01 f0                	add    eax,esi
c0000e14:	eb 1d                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e16:	83 ec 0c             	sub    esp,0xc
c0000e19:	89 f5                	mov    ebp,esi
c0000e1b:	6a 00                	push   0x0
c0000e1d:	e8 59 e6 00 00       	call   c000f47b <sbrk>
c0000e22:	89 c2                	mov    edx,eax
c0000e24:	29 f2                	sub    edx,esi
c0000e26:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2a:	83 c4 10             	add    esp,0x10
c0000e2d:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e33:	31 d2                	xor    edx,edx
c0000e35:	83 f8 ff             	cmp    eax,0xffffffff
c0000e38:	74 66                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e3a:	29 e8                	sub    eax,ebp
c0000e3c:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e3f:	01 d0                	add    eax,edx
c0000e41:	83 c8 01             	or     eax,0x1
c0000e44:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e47:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e4d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e52:	74 4c                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e58:	83 e8 0c             	sub    eax,0xc
c0000e5b:	83 e0 f8             	and    eax,0xfffffff8
c0000e5e:	89 c2                	mov    edx,eax
c0000e60:	83 ca 01             	or     edx,0x1
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e69:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e71:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e79:	76 25                	jbe    c0000ea0 <sYSMALLOc+0x206>
c0000e7b:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e81:	83 ec 0c             	sub    esp,0xc
c0000e84:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e8e:	83 c7 08             	add    edi,0x8
c0000e91:	57                   	push   edi
c0000e92:	e8 0e fd ff ff       	call   c0000ba5 <dlfree>
c0000e97:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ea6:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000eac:	73 06                	jae    c0000eb4 <sYSMALLOc+0x21a>
c0000eae:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eb4:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eba:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ec0:	73 06                	jae    c0000ec8 <sYSMALLOc+0x22e>
c0000ec2:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ecb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ece:	83 e2 fc             	and    edx,0xfffffffc
c0000ed1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ed5:	0f 82 3c fe ff ff    	jb     c0000d17 <sYSMALLOc+0x7d>
c0000edb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000edf:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ee2:	29 fa                	sub    edx,edi
c0000ee4:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ee7:	83 ca 01             	or     edx,0x1
c0000eea:	89 fb                	mov    ebx,edi
c0000eec:	83 c0 08             	add    eax,0x8
c0000eef:	83 cb 01             	or     ebx,0x1
c0000ef2:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ef5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef8:	83 c4 2c             	add    esp,0x2c
c0000efb:	5b                   	pop    ebx
c0000efc:	5e                   	pop    esi
c0000efd:	5f                   	pop    edi
c0000efe:	5d                   	pop    ebp
c0000eff:	c3                   	ret    

c0000f00 <dlmalloc>:
c0000f00:	55                   	push   ebp
c0000f01:	57                   	push   edi
c0000f02:	56                   	push   esi
c0000f03:	53                   	push   ebx
c0000f04:	83 ec 1c             	sub    esp,0x1c
c0000f07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0b:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0e:	0f 87 70 03 00 00    	ja     c0001284 <dlmalloc+0x384>
c0000f14:	83 c0 0b             	add    eax,0xb
c0000f17:	be 10 00 00 00       	mov    esi,0x10
c0000f1c:	83 f8 0f             	cmp    eax,0xf
c0000f1f:	76 05                	jbe    c0000f26 <dlmalloc+0x26>
c0000f21:	83 e0 f8             	and    eax,0xfffffff8
c0000f24:	89 c6                	mov    esi,eax
c0000f26:	8b 3d 80 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c980
c0000f2c:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f32:	75 17                	jne    c0000f4b <dlmalloc+0x4b>
c0000f34:	85 ff                	test   edi,edi
c0000f36:	0f 85 05 03 00 00    	jne    c0001241 <dlmalloc+0x341>
c0000f3c:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0000f41:	e8 78 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000f46:	e9 f6 02 00 00       	jmp    c0001241 <dlmalloc+0x341>
c0000f4b:	39 f7                	cmp    edi,esi
c0000f4d:	72 1f                	jb     c0000f6e <dlmalloc+0x6e>
c0000f4f:	89 f2                	mov    edx,esi
c0000f51:	c1 ea 03             	shr    edx,0x3
c0000f54:	83 ea 02             	sub    edx,0x2
c0000f57:	8b 04 95 84 c9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd367c]
c0000f5e:	85 c0                	test   eax,eax
c0000f60:	74 0c                	je     c0000f6e <dlmalloc+0x6e>
c0000f62:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f65:	89 0c 95 84 c9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd367c],ecx
c0000f6c:	eb 30                	jmp    c0000f9e <dlmalloc+0x9e>
c0000f6e:	89 f0                	mov    eax,esi
c0000f70:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f76:	77 2e                	ja     c0000fa6 <dlmalloc+0xa6>
c0000f78:	c1 e8 03             	shr    eax,0x3
c0000f7b:	8d 14 c5 b4 c9 02 c0 	lea    edx,[eax*8-0x3ffd364c]
c0000f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f86:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f89:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8c:	39 c3                	cmp    ebx,eax
c0000f8e:	74 2e                	je     c0000fbe <dlmalloc+0xbe>
c0000f90:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f93:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9e:	83 c0 08             	add    eax,0x8
c0000fa1:	e9 e0 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0000fa6:	e8 8f fa ff ff       	call   c0000a3a <largebin_index>
c0000fab:	83 e7 02             	and    edi,0x2
c0000fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb2:	74 0a                	je     c0000fbe <dlmalloc+0xbe>
c0000fb4:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0000fb9:	e8 00 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000fbe:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc5:	8b 1d c0 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9c0
c0000fcb:	81 fb b4 c9 02 c0    	cmp    ebx,0xc002c9b4
c0000fd1:	0f 84 13 01 00 00    	je     c00010ea <dlmalloc+0x1ea>
c0000fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fda:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fdd:	83 e7 fc             	and    edi,0xfffffffc
c0000fe0:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe6:	77 4c                	ja     c0001034 <dlmalloc+0x134>
c0000fe8:	3d b4 c9 02 c0       	cmp    eax,0xc002c9b4
c0000fed:	75 45                	jne    c0001034 <dlmalloc+0x134>
c0000fef:	39 1d b0 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9b0,ebx
c0000ff5:	75 3d                	jne    c0001034 <dlmalloc+0x134>
c0000ff7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffb:	73 37                	jae    c0001034 <dlmalloc+0x134>
c0000ffd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001000:	89 fa                	mov    edx,edi
c0001002:	a3 bc c9 02 c0       	mov    ds:0xc002c9bc,eax
c0001007:	a3 c0 c9 02 c0       	mov    ds:0xc002c9c0,eax
c000100c:	a3 b0 c9 02 c0       	mov    ds:0xc002c9b0,eax
c0001011:	29 f2                	sub    edx,esi
c0001013:	c7 40 08 b4 c9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c9b4
c000101a:	c7 40 0c b4 c9 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c9b4
c0001021:	83 ce 01             	or     esi,0x1
c0001024:	89 d1                	mov    ecx,edx
c0001026:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001029:	83 c9 01             	or     ecx,0x1
c000102c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102f:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001032:	eb 15                	jmp    c0001049 <dlmalloc+0x149>
c0001034:	a3 c0 c9 02 c0       	mov    ds:0xc002c9c0,eax
c0001039:	39 fe                	cmp    esi,edi
c000103b:	c7 40 08 b4 c9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c9b4
c0001042:	75 0d                	jne    c0001051 <dlmalloc+0x151>
c0001044:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001049:	8d 43 08             	lea    eax,[ebx+0x8]
c000104c:	e9 35 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001051:	89 f8                	mov    eax,edi
c0001053:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001059:	77 19                	ja     c0001074 <dlmalloc+0x174>
c000105b:	c1 e8 03             	shr    eax,0x3
c000105e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001061:	83 c2 0d             	add    edx,0xd
c0001064:	8d 2c 95 78 c9 02 c0 	lea    ebp,[edx*4-0x3ffd3688]
c000106b:	8b 14 95 80 c9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3680]
c0001072:	eb 46                	jmp    c00010ba <dlmalloc+0x1ba>
c0001074:	e8 c1 f9 ff ff       	call   c0000a3a <largebin_index>
c0001079:	8d 14 00             	lea    edx,[eax+eax*1]
c000107c:	83 c2 0d             	add    edx,0xd
c000107f:	8d 0c 95 80 c9 02 c0 	lea    ecx,[edx*4-0x3ffd3680]
c0001086:	8b 14 95 80 c9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3680]
c000108d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001090:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001094:	89 d5                	mov    ebp,edx
c0001096:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109a:	74 1e                	je     c00010ba <dlmalloc+0x1ba>
c000109c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a2:	77 12                	ja     c00010b6 <dlmalloc+0x1b6>
c00010a4:	83 cf 01             	or     edi,0x1
c00010a7:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010aa:	76 05                	jbe    c00010b1 <dlmalloc+0x1b1>
c00010ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010af:	eb f6                	jmp    c00010a7 <dlmalloc+0x1a7>
c00010b1:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b4:	eb 04                	jmp    c00010ba <dlmalloc+0x1ba>
c00010b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010ba:	89 c7                	mov    edi,eax
c00010bc:	88 c1                	mov    cl,al
c00010be:	c1 ff 05             	sar    edi,0x5
c00010c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c5:	bf 01 00 00 00       	mov    edi,0x1
c00010ca:	d3 e7                	shl    edi,cl
c00010cc:	89 f8                	mov    eax,edi
c00010ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d2:	09 04 bd b4 cc 02 c0 	or     DWORD PTR [edi*4-0x3ffd334c],eax
c00010d9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010df:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e5:	e9 db fe ff ff       	jmp    c0000fc5 <dlmalloc+0xc5>
c00010ea:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f0:	76 78                	jbe    c000116a <dlmalloc+0x26a>
c00010f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f6:	8d 04 c5 b4 c9 02 c0 	lea    eax,[eax*8-0x3ffd364c]
c00010fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001100:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001103:	39 ca                	cmp    edx,ecx
c0001105:	74 63                	je     c000116a <dlmalloc+0x26a>
c0001107:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110d:	83 e3 fc             	and    ebx,0xfffffffc
c0001110:	39 de                	cmp    esi,ebx
c0001112:	77 52                	ja     c0001166 <dlmalloc+0x266>
c0001114:	89 df                	mov    edi,ebx
c0001116:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001119:	29 f7                	sub    edi,esi
c000111b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111e:	01 d3                	add    ebx,edx
c0001120:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001123:	83 ff 0f             	cmp    edi,0xf
c0001126:	8d 42 08             	lea    eax,[edx+0x8]
c0001129:	77 09                	ja     c0001134 <dlmalloc+0x234>
c000112b:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112f:	e9 52 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001134:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001137:	83 ce 01             	or     esi,0x1
c000113a:	89 0d bc c9 02 c0    	mov    DWORD PTR ds:0xc002c9bc,ecx
c0001140:	89 0d c0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9c0,ecx
c0001146:	c7 41 08 b4 c9 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c9b4
c000114d:	c7 41 0c b4 c9 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c9b4
c0001154:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001157:	89 fa                	mov    edx,edi
c0001159:	83 ca 01             	or     edx,0x1
c000115c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001161:	e9 20 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001166:	89 c2                	mov    edx,eax
c0001168:	eb 99                	jmp    c0001103 <dlmalloc+0x203>
c000116a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116e:	b8 01 00 00 00       	mov    eax,0x1
c0001173:	41                   	inc    ecx
c0001174:	89 cb                	mov    ebx,ecx
c0001176:	8d 14 cd ac c9 02 c0 	lea    edx,[ecx*8-0x3ffd3654]
c000117d:	c1 eb 05             	shr    ebx,0x5
c0001180:	d3 e0                	shl    eax,cl
c0001182:	8b 3c 9d b4 cc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd334c]
c0001189:	39 f8                	cmp    eax,edi
c000118b:	77 04                	ja     c0001191 <dlmalloc+0x291>
c000118d:	85 c0                	test   eax,eax
c000118f:	75 26                	jne    c00011b7 <dlmalloc+0x2b7>
c0001191:	43                   	inc    ebx
c0001192:	83 fb 02             	cmp    ebx,0x2
c0001195:	0f 87 a6 00 00 00    	ja     c0001241 <dlmalloc+0x341>
c000119b:	8b 3c 9d b4 cc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd334c]
c00011a2:	85 ff                	test   edi,edi
c00011a4:	74 eb                	je     c0001191 <dlmalloc+0x291>
c00011a6:	89 d8                	mov    eax,ebx
c00011a8:	c1 e0 06             	shl    eax,0x6
c00011ab:	8d 14 85 ac c9 02 c0 	lea    edx,[eax*4-0x3ffd3654]
c00011b2:	b8 01 00 00 00       	mov    eax,0x1
c00011b7:	85 f8                	test   eax,edi
c00011b9:	75 07                	jne    c00011c2 <dlmalloc+0x2c2>
c00011bb:	83 c2 08             	add    edx,0x8
c00011be:	01 c0                	add    eax,eax
c00011c0:	eb f5                	jmp    c00011b7 <dlmalloc+0x2b7>
c00011c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c5:	39 ca                	cmp    edx,ecx
c00011c7:	75 14                	jne    c00011dd <dlmalloc+0x2dd>
c00011c9:	89 c1                	mov    ecx,eax
c00011cb:	83 c2 08             	add    edx,0x8
c00011ce:	f7 d1                	not    ecx
c00011d0:	01 c0                	add    eax,eax
c00011d2:	21 cf                	and    edi,ecx
c00011d4:	89 3c 9d b4 cc 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd334c],edi
c00011db:	eb ac                	jmp    c0001189 <dlmalloc+0x289>
c00011dd:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e3:	83 e0 fc             	and    eax,0xfffffffc
c00011e6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e9:	89 c3                	mov    ebx,eax
c00011eb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ee:	29 f3                	sub    ebx,esi
c00011f0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f3:	83 fb 0f             	cmp    ebx,0xf
c00011f6:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f9:	77 09                	ja     c0001204 <dlmalloc+0x304>
c00011fb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011ff:	e9 82 00 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001204:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001207:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120d:	89 3d bc c9 02 c0    	mov    DWORD PTR ds:0xc002c9bc,edi
c0001213:	89 3d c0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9c0,edi
c0001219:	c7 47 08 b4 c9 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c9b4
c0001220:	c7 47 0c b4 c9 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c9b4
c0001227:	77 06                	ja     c000122f <dlmalloc+0x32f>
c0001229:	89 3d b0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9b0,edi
c000122f:	83 ce 01             	or     esi,0x1
c0001232:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001235:	89 d9                	mov    ecx,ebx
c0001237:	83 c9 01             	or     ecx,0x1
c000123a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123d:	89 1a                	mov    DWORD PTR [edx],ebx
c000123f:	eb 45                	jmp    c0001286 <dlmalloc+0x386>
c0001241:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c0001246:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001249:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124c:	83 e2 fc             	and    edx,0xfffffffc
c000124f:	39 d1                	cmp    ecx,edx
c0001251:	77 1e                	ja     c0001271 <dlmalloc+0x371>
c0001253:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001256:	89 f3                	mov    ebx,esi
c0001258:	89 0d ac c9 02 c0    	mov    DWORD PTR ds:0xc002c9ac,ecx
c000125e:	83 cb 01             	or     ebx,0x1
c0001261:	29 f2                	sub    edx,esi
c0001263:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001266:	83 ca 01             	or     edx,0x1
c0001269:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126c:	e9 2d fd ff ff       	jmp    c0000f9e <dlmalloc+0x9e>
c0001271:	83 c4 1c             	add    esp,0x1c
c0001274:	89 f0                	mov    eax,esi
c0001276:	5b                   	pop    ebx
c0001277:	ba 80 c9 02 c0       	mov    edx,0xc002c980
c000127c:	5e                   	pop    esi
c000127d:	5f                   	pop    edi
c000127e:	5d                   	pop    ebp
c000127f:	e9 16 fa ff ff       	jmp    c0000c9a <sYSMALLOc>
c0001284:	31 c0                	xor    eax,eax
c0001286:	83 c4 1c             	add    esp,0x1c
c0001289:	5b                   	pop    ebx
c000128a:	5e                   	pop    esi
c000128b:	5f                   	pop    edi
c000128c:	5d                   	pop    ebp
c000128d:	c3                   	ret    

c000128e <iALLOc>:
c000128e:	55                   	push   ebp
c000128f:	89 c5                	mov    ebp,eax
c0001291:	57                   	push   edi
c0001292:	56                   	push   esi
c0001293:	53                   	push   ebx
c0001294:	83 ec 2c             	sub    esp,0x2c
c0001297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000129f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a3:	83 3d 80 c9 02 c0 00 	cmp    DWORD PTR ds:0xc002c980,0x0
c00012aa:	75 12                	jne    c00012be <iALLOc+0x30>
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c00012b5:	e8 04 f8 ff ff       	call   c0000abe <malloc_consolidate>
c00012ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c3:	74 12                	je     c00012d7 <iALLOc+0x49>
c00012c5:	85 ed                	test   ebp,ebp
c00012c7:	0f 84 64 01 00 00    	je     c0001431 <iALLOc+0x1a3>
c00012cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d5:	eb 33                	jmp    c000130a <iALLOc+0x7c>
c00012d7:	85 ed                	test   ebp,ebp
c00012d9:	75 14                	jne    c00012ef <iALLOc+0x61>
c00012db:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e3:	83 c4 2c             	add    esp,0x2c
c00012e6:	5b                   	pop    ebx
c00012e7:	5e                   	pop    esi
c00012e8:	5f                   	pop    edi
c00012e9:	5d                   	pop    ebp
c00012ea:	e9 11 fc ff ff       	jmp    c0000f00 <dlmalloc>
c00012ef:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012fe:	83 f8 0f             	cmp    eax,0xf
c0001301:	76 07                	jbe    c000130a <iALLOc+0x7c>
c0001303:	83 e0 f8             	and    eax,0xfffffff8
c0001306:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130a:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130f:	75 09                	jne    c000131a <iALLOc+0x8c>
c0001311:	89 d0                	mov    eax,edx
c0001313:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001316:	31 f6                	xor    esi,esi
c0001318:	eb 3b                	jmp    c0001355 <iALLOc+0xc7>
c000131a:	8b 02                	mov    eax,DWORD PTR [edx]
c000131c:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001324:	83 c0 0b             	add    eax,0xb
c0001327:	83 f8 0f             	cmp    eax,0xf
c000132a:	76 07                	jbe    c0001333 <iALLOc+0xa5>
c000132c:	83 e0 f8             	and    eax,0xfffffff8
c000132f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001333:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001337:	0f af f5             	imul   esi,ebp
c000133a:	eb 25                	jmp    c0001361 <iALLOc+0xd3>
c000133c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001341:	bb 10 00 00 00       	mov    ebx,0x10
c0001346:	83 f9 0f             	cmp    ecx,0xf
c0001349:	76 05                	jbe    c0001350 <iALLOc+0xc2>
c000134b:	83 e1 f8             	and    ecx,0xfffffff8
c000134e:	89 cb                	mov    ebx,ecx
c0001350:	01 de                	add    esi,ebx
c0001352:	83 c0 04             	add    eax,0x4
c0001355:	39 c7                	cmp    edi,eax
c0001357:	75 e3                	jne    c000133c <iALLOc+0xae>
c0001359:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001361:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001365:	8b 1d d4 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccd4
c000136b:	83 ec 0c             	sub    esp,0xc
c000136e:	c7 05 d4 cc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ccd4,0x0
c0001378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001380:	50                   	push   eax
c0001381:	e8 7a fb ff ff       	call   c0000f00 <dlmalloc>
c0001386:	83 c4 10             	add    esp,0x10
c0001389:	89 1d d4 cc 02 c0    	mov    DWORD PTR ds:0xc002ccd4,ebx
c000138f:	85 c0                	test   eax,eax
c0001391:	0f 84 92 00 00 00    	je     c0001429 <iALLOc+0x19b>
c0001397:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139a:	8d 78 f8             	lea    edi,[eax-0x8]
c000139d:	83 e3 fc             	and    ebx,0xfffffffc
c00013a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a4:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a9:	74 1e                	je     c00013c9 <iALLOc+0x13b>
c00013ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013af:	89 d9                	mov    ecx,ebx
c00013b1:	52                   	push   edx
c00013b2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b6:	83 e9 04             	sub    ecx,0x4
c00013b9:	51                   	push   ecx
c00013ba:	6a 00                	push   0x0
c00013bc:	50                   	push   eax
c00013bd:	e8 02 f3 ff ff       	call   c00006c4 <memset>
c00013c2:	83 c4 10             	add    esp,0x10
c00013c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013ce:	75 14                	jne    c00013e4 <iALLOc+0x156>
c00013d0:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d3:	29 f3                	sub    ebx,esi
c00013d5:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d8:	83 cb 01             	or     ebx,0x1
c00013db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013df:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e2:	89 f3                	mov    ebx,esi
c00013e4:	31 c0                	xor    eax,eax
c00013e6:	4d                   	dec    ebp
c00013e7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013ea:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ee:	39 c5                	cmp    ebp,eax
c00013f0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f3:	74 2c                	je     c0001421 <iALLOc+0x193>
c00013f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f9:	85 c9                	test   ecx,ecx
c00013fb:	75 15                	jne    c0001412 <iALLOc+0x184>
c00013fd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001400:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001403:	b9 10 00 00 00       	mov    ecx,0x10
c0001408:	83 fe 0f             	cmp    esi,0xf
c000140b:	76 05                	jbe    c0001412 <iALLOc+0x184>
c000140d:	83 e6 f8             	and    esi,0xfffffff8
c0001410:	89 f1                	mov    ecx,esi
c0001412:	89 ce                	mov    esi,ecx
c0001414:	29 cb                	sub    ebx,ecx
c0001416:	83 ce 01             	or     esi,0x1
c0001419:	40                   	inc    eax
c000141a:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141d:	01 cf                	add    edi,ecx
c000141f:	eb c6                	jmp    c00013e7 <iALLOc+0x159>
c0001421:	83 cb 01             	or     ebx,0x1
c0001424:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001427:	eb 08                	jmp    c0001431 <iALLOc+0x1a3>
c0001429:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001435:	83 c4 2c             	add    esp,0x2c
c0001438:	5b                   	pop    ebx
c0001439:	5e                   	pop    esi
c000143a:	5f                   	pop    edi
c000143b:	5d                   	pop    ebp
c000143c:	c3                   	ret    

c000143d <dlrealloc>:
c000143d:	55                   	push   ebp
c000143e:	57                   	push   edi
c000143f:	56                   	push   esi
c0001440:	53                   	push   ebx
c0001441:	83 ec 1c             	sub    esp,0x1c
c0001444:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001448:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144c:	85 db                	test   ebx,ebx
c000144e:	75 10                	jne    c0001460 <dlrealloc+0x23>
c0001450:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001454:	83 c4 1c             	add    esp,0x1c
c0001457:	5b                   	pop    ebx
c0001458:	5e                   	pop    esi
c0001459:	5f                   	pop    edi
c000145a:	5d                   	pop    ebp
c000145b:	e9 a0 fa ff ff       	jmp    c0000f00 <dlmalloc>
c0001460:	83 f8 df             	cmp    eax,0xffffffdf
c0001463:	76 07                	jbe    c000146c <dlrealloc+0x2f>
c0001465:	31 db                	xor    ebx,ebx
c0001467:	e9 7c 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c000146c:	83 c0 0b             	add    eax,0xb
c000146f:	bf 10 00 00 00       	mov    edi,0x10
c0001474:	83 f8 0f             	cmp    eax,0xf
c0001477:	76 05                	jbe    c000147e <dlrealloc+0x41>
c0001479:	83 e0 f8             	and    eax,0xfffffff8
c000147c:	89 c7                	mov    edi,eax
c000147e:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001481:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001484:	89 c6                	mov    esi,eax
c0001486:	83 e6 fc             	and    esi,0xfffffffc
c0001489:	a8 02                	test   al,0x2
c000148b:	75 d8                	jne    c0001465 <dlrealloc+0x28>
c000148d:	39 f7                	cmp    edi,esi
c000148f:	0f 86 15 01 00 00    	jbe    c00015aa <dlrealloc+0x16d>
c0001495:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001499:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149c:	39 15 ac c9 02 c0    	cmp    DWORD PTR ds:0xc002c9ac,edx
c00014a2:	75 33                	jne    c00014d7 <dlrealloc+0x9a>
c00014a4:	83 e1 fc             	and    ecx,0xfffffffc
c00014a7:	01 f1                	add    ecx,esi
c00014a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ad:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b0:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b4:	77 49                	ja     c00014ff <dlrealloc+0xc2>
c00014b6:	01 fd                	add    ebp,edi
c00014b8:	83 e0 01             	and    eax,0x1
c00014bb:	09 f8                	or     eax,edi
c00014bd:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c0:	89 2d ac c9 02 c0    	mov    DWORD PTR ds:0xc002c9ac,ebp
c00014c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014ca:	29 f8                	sub    eax,edi
c00014cc:	83 c8 01             	or     eax,0x1
c00014cf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d2:	e9 11 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c00014d7:	89 c8                	mov    eax,ecx
c00014d9:	83 e0 fe             	and    eax,0xfffffffe
c00014dc:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e1:	75 1c                	jne    c00014ff <dlrealloc+0xc2>
c00014e3:	83 e1 fc             	and    ecx,0xfffffffc
c00014e6:	01 f1                	add    ecx,esi
c00014e8:	39 cf                	cmp    edi,ecx
c00014ea:	77 13                	ja     c00014ff <dlrealloc+0xc2>
c00014ec:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ef:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f8:	89 ce                	mov    esi,ecx
c00014fa:	e9 ab 00 00 00       	jmp    c00015aa <dlrealloc+0x16d>
c00014ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001503:	8d 47 f9             	lea    eax,[edi-0x7]
c0001506:	83 ec 0c             	sub    esp,0xc
c0001509:	50                   	push   eax
c000150a:	e8 f1 f9 ff ff       	call   c0000f00 <dlmalloc>
c000150f:	83 c4 10             	add    esp,0x10
c0001512:	89 c1                	mov    ecx,eax
c0001514:	85 c0                	test   eax,eax
c0001516:	0f 84 49 ff ff ff    	je     c0001465 <dlrealloc+0x28>
c000151c:	8d 40 f8             	lea    eax,[eax-0x8]
c000151f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001523:	39 c2                	cmp    edx,eax
c0001525:	75 0a                	jne    c0001531 <dlrealloc+0xf4>
c0001527:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152a:	83 e0 fc             	and    eax,0xfffffffc
c000152d:	01 c6                	add    esi,eax
c000152f:	eb 79                	jmp    c00015aa <dlrealloc+0x16d>
c0001531:	83 ee 04             	sub    esi,0x4
c0001534:	83 fe 27             	cmp    esi,0x27
c0001537:	76 16                	jbe    c000154f <dlrealloc+0x112>
c0001539:	50                   	push   eax
c000153a:	56                   	push   esi
c000153b:	53                   	push   ebx
c000153c:	51                   	push   ecx
c000153d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001541:	e8 5a f1 ff ff       	call   c00006a0 <memcpy>
c0001546:	83 c4 10             	add    esp,0x10
c0001549:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154d:	eb 43                	jmp    c0001592 <dlrealloc+0x155>
c000154f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001551:	83 fe 13             	cmp    esi,0x13
c0001554:	89 01                	mov    DWORD PTR [ecx],eax
c0001556:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001559:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001562:	76 2e                	jbe    c0001592 <dlrealloc+0x155>
c0001564:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001567:	83 fe 1b             	cmp    esi,0x1b
c000156a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001570:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001573:	76 1d                	jbe    c0001592 <dlrealloc+0x155>
c0001575:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001578:	83 fe 23             	cmp    esi,0x23
c000157b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001581:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001584:	76 0c                	jbe    c0001592 <dlrealloc+0x155>
c0001586:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001589:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158f:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001592:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001596:	83 ec 0c             	sub    esp,0xc
c0001599:	53                   	push   ebx
c000159a:	e8 06 f6 ff ff       	call   c0000ba5 <dlfree>
c000159f:	83 c4 10             	add    esp,0x10
c00015a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a6:	89 cb                	mov    ebx,ecx
c00015a8:	eb 3e                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015aa:	89 f2                	mov    edx,esi
c00015ac:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015af:	29 fa                	sub    edx,edi
c00015b1:	83 e1 01             	and    ecx,0x1
c00015b4:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b8:	83 fa 0f             	cmp    edx,0xf
c00015bb:	77 0b                	ja     c00015c8 <dlrealloc+0x18b>
c00015bd:	09 ce                	or     esi,ecx
c00015bf:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c6:	eb 20                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015c8:	01 fd                	add    ebp,edi
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	09 cf                	or     edi,ecx
c00015cf:	83 ca 01             	or     edx,0x1
c00015d2:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d5:	83 c5 08             	add    ebp,0x8
c00015d8:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015db:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015df:	55                   	push   ebp
c00015e0:	e8 c0 f5 ff ff       	call   c0000ba5 <dlfree>
c00015e5:	83 c4 10             	add    esp,0x10
c00015e8:	83 c4 1c             	add    esp,0x1c
c00015eb:	89 d8                	mov    eax,ebx
c00015ed:	5b                   	pop    ebx
c00015ee:	5e                   	pop    esi
c00015ef:	5f                   	pop    edi
c00015f0:	5d                   	pop    ebp
c00015f1:	c3                   	ret    

c00015f2 <dlmemalign>:
c00015f2:	55                   	push   ebp
c00015f3:	57                   	push   edi
c00015f4:	56                   	push   esi
c00015f5:	53                   	push   ebx
c00015f6:	83 ec 0c             	sub    esp,0xc
c00015f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001601:	83 fa 08             	cmp    edx,0x8
c0001604:	77 10                	ja     c0001616 <dlmemalign+0x24>
c0001606:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160a:	83 c4 0c             	add    esp,0xc
c000160d:	5b                   	pop    ebx
c000160e:	5e                   	pop    esi
c000160f:	5f                   	pop    edi
c0001610:	5d                   	pop    ebp
c0001611:	e9 ea f8 ff ff       	jmp    c0000f00 <dlmalloc>
c0001616:	bf 10 00 00 00       	mov    edi,0x10
c000161b:	83 fa 0f             	cmp    edx,0xf
c000161e:	76 13                	jbe    c0001633 <dlmemalign+0x41>
c0001620:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001623:	85 d1                	test   ecx,edx
c0001625:	75 04                	jne    c000162b <dlmemalign+0x39>
c0001627:	89 d7                	mov    edi,edx
c0001629:	eb 08                	jmp    c0001633 <dlmemalign+0x41>
c000162b:	39 d7                	cmp    edi,edx
c000162d:	73 04                	jae    c0001633 <dlmemalign+0x41>
c000162f:	01 ff                	add    edi,edi
c0001631:	eb f8                	jmp    c000162b <dlmemalign+0x39>
c0001633:	83 f8 df             	cmp    eax,0xffffffdf
c0001636:	76 07                	jbe    c000163f <dlmemalign+0x4d>
c0001638:	31 c0                	xor    eax,eax
c000163a:	e9 ce 00 00 00       	jmp    c000170d <dlmemalign+0x11b>
c000163f:	83 c0 0b             	add    eax,0xb
c0001642:	bd 10 00 00 00       	mov    ebp,0x10
c0001647:	83 f8 0f             	cmp    eax,0xf
c000164a:	76 05                	jbe    c0001651 <dlmemalign+0x5f>
c000164c:	83 e0 f8             	and    eax,0xfffffff8
c000164f:	89 c5                	mov    ebp,eax
c0001651:	83 ec 0c             	sub    esp,0xc
c0001654:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001658:	50                   	push   eax
c0001659:	e8 a2 f8 ff ff       	call   c0000f00 <dlmalloc>
c000165e:	83 c4 10             	add    esp,0x10
c0001661:	89 c1                	mov    ecx,eax
c0001663:	85 c0                	test   eax,eax
c0001665:	74 d1                	je     c0001638 <dlmemalign+0x46>
c0001667:	31 d2                	xor    edx,edx
c0001669:	8d 70 f8             	lea    esi,[eax-0x8]
c000166c:	f7 f7                	div    edi
c000166e:	85 d2                	test   edx,edx
c0001670:	74 62                	je     c00016d4 <dlmemalign+0xe2>
c0001672:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001676:	89 f8                	mov    eax,edi
c0001678:	f7 d8                	neg    eax
c000167a:	21 c3                	and    ebx,eax
c000167c:	83 eb 08             	sub    ebx,0x8
c000167f:	89 d8                	mov    eax,ebx
c0001681:	29 f0                	sub    eax,esi
c0001683:	83 f8 0f             	cmp    eax,0xf
c0001686:	77 02                	ja     c000168a <dlmemalign+0x98>
c0001688:	01 fb                	add    ebx,edi
c000168a:	89 d8                	mov    eax,ebx
c000168c:	29 f0                	sub    eax,esi
c000168e:	89 c6                	mov    esi,eax
c0001690:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001693:	89 c2                	mov    edx,eax
c0001695:	83 e2 fc             	and    edx,0xfffffffc
c0001698:	29 f2                	sub    edx,esi
c000169a:	a8 02                	test   al,0x2
c000169c:	74 10                	je     c00016ae <dlmemalign+0xbc>
c000169e:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a1:	83 ca 02             	or     edx,0x2
c00016a4:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a7:	89 33                	mov    DWORD PTR [ebx],esi
c00016a9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ac:	eb 5f                	jmp    c000170d <dlmemalign+0x11b>
c00016ae:	83 ec 0c             	sub    esp,0xc
c00016b1:	89 d0                	mov    eax,edx
c00016b3:	83 c8 01             	or     eax,0x1
c00016b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b9:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016be:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c1:	83 e0 01             	and    eax,0x1
c00016c4:	09 f0                	or     eax,esi
c00016c6:	89 de                	mov    esi,ebx
c00016c8:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cb:	51                   	push   ecx
c00016cc:	e8 d4 f4 ff ff       	call   c0000ba5 <dlfree>
c00016d1:	83 c4 10             	add    esp,0x10
c00016d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d7:	a8 02                	test   al,0x2
c00016d9:	75 2f                	jne    c000170a <dlmemalign+0x118>
c00016db:	83 e0 fc             	and    eax,0xfffffffc
c00016de:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e1:	39 c2                	cmp    edx,eax
c00016e3:	73 25                	jae    c000170a <dlmemalign+0x118>
c00016e5:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	29 e8                	sub    eax,ebp
c00016ed:	83 c2 08             	add    edx,0x8
c00016f0:	83 c8 01             	or     eax,0x1
c00016f3:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f9:	83 e0 01             	and    eax,0x1
c00016fc:	09 c5                	or     ebp,eax
c00016fe:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001701:	52                   	push   edx
c0001702:	e8 9e f4 ff ff       	call   c0000ba5 <dlfree>
c0001707:	83 c4 10             	add    esp,0x10
c000170a:	8d 46 08             	lea    eax,[esi+0x8]
c000170d:	83 c4 0c             	add    esp,0xc
c0001710:	5b                   	pop    ebx
c0001711:	5e                   	pop    esi
c0001712:	5f                   	pop    edi
c0001713:	5d                   	pop    ebp
c0001714:	c3                   	ret    

c0001715 <dlcalloc>:
c0001715:	53                   	push   ebx
c0001716:	83 ec 14             	sub    esp,0x14
c0001719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001722:	50                   	push   eax
c0001723:	e8 d8 f7 ff ff       	call   c0000f00 <dlmalloc>
c0001728:	83 c4 10             	add    esp,0x10
c000172b:	89 c3                	mov    ebx,eax
c000172d:	85 c0                	test   eax,eax
c000172f:	74 77                	je     c00017a8 <dlcalloc+0x93>
c0001731:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001734:	89 d0                	mov    eax,edx
c0001736:	83 e0 fc             	and    eax,0xfffffffc
c0001739:	80 e2 02             	and    dl,0x2
c000173c:	75 5a                	jne    c0001798 <dlcalloc+0x83>
c000173e:	83 e8 04             	sub    eax,0x4
c0001741:	83 f8 27             	cmp    eax,0x27
c0001744:	76 03                	jbe    c0001749 <dlcalloc+0x34>
c0001746:	51                   	push   ecx
c0001747:	eb 53                	jmp    c000179c <dlcalloc+0x87>
c0001749:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001756:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175d:	83 f8 13             	cmp    eax,0x13
c0001760:	76 46                	jbe    c00017a8 <dlcalloc+0x93>
c0001762:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001769:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001770:	83 f8 1b             	cmp    eax,0x1b
c0001773:	76 33                	jbe    c00017a8 <dlcalloc+0x93>
c0001775:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001783:	83 f8 23             	cmp    eax,0x23
c0001786:	76 20                	jbe    c00017a8 <dlcalloc+0x93>
c0001788:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001796:	eb 10                	jmp    c00017a8 <dlcalloc+0x93>
c0001798:	83 e8 08             	sub    eax,0x8
c000179b:	52                   	push   edx
c000179c:	50                   	push   eax
c000179d:	6a 00                	push   0x0
c000179f:	53                   	push   ebx
c00017a0:	e8 1f ef ff ff       	call   c00006c4 <memset>
c00017a5:	83 c4 10             	add    esp,0x10
c00017a8:	89 d8                	mov    eax,ebx
c00017aa:	83 c4 08             	add    esp,0x8
c00017ad:	5b                   	pop    ebx
c00017ae:	c3                   	ret    

c00017af <dlcfree>:
c00017af:	e9 f1 f3 ff ff       	jmp    c0000ba5 <dlfree>

c00017b4 <dlindependent_calloc>:
c00017b4:	83 ec 28             	sub    esp,0x28
c00017b7:	b9 03 00 00 00       	mov    ecx,0x3
c00017bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d0:	e8 b9 fa ff ff       	call   c000128e <iALLOc>
c00017d5:	83 c4 2c             	add    esp,0x2c
c00017d8:	c3                   	ret    

c00017d9 <dlindependent_comalloc>:
c00017d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e1:	31 c9                	xor    ecx,ecx
c00017e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017eb:	e9 9e fa ff ff       	jmp    c000128e <iALLOc>

c00017f0 <dlvalloc>:
c00017f0:	83 ec 0c             	sub    esp,0xc
c00017f3:	83 3d 80 c9 02 c0 00 	cmp    DWORD PTR ds:0xc002c980,0x0
c00017fa:	75 0a                	jne    c0001806 <dlvalloc+0x16>
c00017fc:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0001801:	e8 b8 f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001806:	50                   	push   eax
c0001807:	50                   	push   eax
c0001808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180c:	ff 35 dc cc 02 c0    	push   DWORD PTR ds:0xc002ccdc
c0001812:	e8 db fd ff ff       	call   c00015f2 <dlmemalign>
c0001817:	83 c4 1c             	add    esp,0x1c
c000181a:	c3                   	ret    

c000181b <dlpvalloc>:
c000181b:	83 ec 0c             	sub    esp,0xc
c000181e:	83 3d 80 c9 02 c0 00 	cmp    DWORD PTR ds:0xc002c980,0x0
c0001825:	75 0a                	jne    c0001831 <dlpvalloc+0x16>
c0001827:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c000182c:	e8 8d f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001831:	a1 dc cc 02 c0       	mov    eax,ds:0xc002ccdc
c0001836:	89 c1                	mov    ecx,eax
c0001838:	52                   	push   edx
c0001839:	f7 d9                	neg    ecx
c000183b:	52                   	push   edx
c000183c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001840:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001844:	21 ca                	and    edx,ecx
c0001846:	52                   	push   edx
c0001847:	50                   	push   eax
c0001848:	e8 a5 fd ff ff       	call   c00015f2 <dlmemalign>
c000184d:	83 c4 1c             	add    esp,0x1c
c0001850:	c3                   	ret    

c0001851 <dlmalloc_trim>:
c0001851:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0001856:	e8 63 f2 ff ff       	call   c0000abe <malloc_consolidate>
c000185b:	31 c0                	xor    eax,eax
c000185d:	c3                   	ret    

c000185e <dlmalloc_usable_size>:
c000185e:	53                   	push   ebx
c000185f:	31 c0                	xor    eax,eax
c0001861:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001865:	85 c9                	test   ecx,ecx
c0001867:	74 24                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001869:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186c:	f6 c2 02             	test   dl,0x2
c000186f:	74 08                	je     c0001879 <dlmalloc_usable_size+0x1b>
c0001871:	83 e2 fc             	and    edx,0xfffffffc
c0001874:	8d 42 f8             	lea    eax,[edx-0x8]
c0001877:	eb 14                	jmp    c000188d <dlmalloc_usable_size+0x2f>
c0001879:	89 d3                	mov    ebx,edx
c000187b:	31 c0                	xor    eax,eax
c000187d:	83 e3 fe             	and    ebx,0xfffffffe
c0001880:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001885:	74 06                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001887:	83 e2 fc             	and    edx,0xfffffffc
c000188a:	8d 42 fc             	lea    eax,[edx-0x4]
c000188d:	5b                   	pop    ebx
c000188e:	c3                   	ret    

c000188f <dlmallinfo>:
c000188f:	55                   	push   ebp
c0001890:	57                   	push   edi
c0001891:	56                   	push   esi
c0001892:	53                   	push   ebx
c0001893:	83 ec 08             	sub    esp,0x8
c0001896:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189a:	83 3d ac c9 02 c0 00 	cmp    DWORD PTR ds:0xc002c9ac,0x0
c00018a1:	75 0a                	jne    c00018ad <dlmallinfo+0x1e>
c00018a3:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c00018a8:	e8 11 f2 ff ff       	call   c0000abe <malloc_consolidate>
c00018ad:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c00018b2:	31 ed                	xor    ebp,ebp
c00018b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b7:	31 c9                	xor    ecx,ecx
c00018b9:	83 e0 fc             	and    eax,0xfffffffc
c00018bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c0:	31 c0                	xor    eax,eax
c00018c2:	8b 14 85 84 c9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd367c]
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 0e                	je     c00018db <dlmallinfo+0x4c>
c00018cd:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d0:	45                   	inc    ebp
c00018d1:	83 e6 fc             	and    esi,0xfffffffc
c00018d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d7:	01 f1                	add    ecx,esi
c00018d9:	eb ee                	jmp    c00018c9 <dlmallinfo+0x3a>
c00018db:	40                   	inc    eax
c00018dc:	83 f8 0a             	cmp    eax,0xa
c00018df:	75 e1                	jne    c00018c2 <dlmallinfo+0x33>
c00018e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ec:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ef:	b8 b4 c9 02 c0       	mov    eax,0xc002c9b4
c00018f4:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f7:	39 f0                	cmp    eax,esi
c00018f9:	74 10                	je     c000190b <dlmallinfo+0x7c>
c00018fb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018fe:	ff 04 24             	inc    DWORD PTR [esp]
c0001901:	83 e7 fc             	and    edi,0xfffffffc
c0001904:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001907:	01 fa                	add    edx,edi
c0001909:	eb ec                	jmp    c00018f7 <dlmallinfo+0x68>
c000190b:	83 c0 08             	add    eax,0x8
c000190e:	3d ac cc 02 c0       	cmp    eax,0xc002ccac
c0001913:	75 df                	jne    c00018f4 <dlmallinfo+0x65>
c0001915:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001918:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000191b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000191e:	a1 e8 cc 02 c0       	mov    eax,ds:0xc002cce8
c0001923:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001926:	89 03                	mov    DWORD PTR [ebx],eax
c0001928:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000192b:	8b 35 d0 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002ccd0
c0001931:	29 d0                	sub    eax,edx
c0001933:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001936:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001939:	8b 35 e4 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cce4
c000193f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001943:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001946:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001949:	8b 35 f4 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002ccf4
c000194f:	89 d8                	mov    eax,ebx
c0001951:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001954:	83 c4 08             	add    esp,0x8
c0001957:	5b                   	pop    ebx
c0001958:	5e                   	pop    esi
c0001959:	5f                   	pop    edi
c000195a:	5d                   	pop    ebp
c000195b:	c2 04 00             	ret    0x4

c000195e <dlmalloc_stats>:
c000195e:	83 ec 30             	sub    esp,0x30
c0001961:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001965:	50                   	push   eax
c0001966:	e8 24 ff ff ff       	call   c000188f <dlmallinfo>
c000196b:	83 c4 30             	add    esp,0x30
c000196e:	c3                   	ret    

c000196f <dlmallopt>:
c000196f:	56                   	push   esi
c0001970:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0001975:	53                   	push   ebx
c0001976:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197e:	e8 3b f1 ff ff       	call   c0000abe <malloc_consolidate>
c0001983:	8d 46 04             	lea    eax,[esi+0x4]
c0001986:	83 f8 05             	cmp    eax,0x5
c0001989:	77 67                	ja     c00019f2 <dlmallopt+0x83>
c000198b:	ff 24 85 04 80 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd7ffc]
c0001992:	83 fb 50             	cmp    ebx,0x50
c0001995:	77 5b                	ja     c00019f2 <dlmallopt+0x83>
c0001997:	ba 08 00 00 00       	mov    edx,0x8
c000199c:	85 db                	test   ebx,ebx
c000199e:	74 12                	je     c00019b2 <dlmallopt+0x43>
c00019a0:	83 c3 0b             	add    ebx,0xb
c00019a3:	ba 10 00 00 00       	mov    edx,0x10
c00019a8:	83 fb 0f             	cmp    ebx,0xf
c00019ab:	76 05                	jbe    c00019b2 <dlmallopt+0x43>
c00019ad:	89 da                	mov    edx,ebx
c00019af:	83 e2 f8             	and    edx,0xfffffff8
c00019b2:	a1 80 c9 02 c0       	mov    eax,ds:0xc002c980
c00019b7:	83 e0 03             	and    eax,0x3
c00019ba:	09 d0                	or     eax,edx
c00019bc:	a3 80 c9 02 c0       	mov    ds:0xc002c980,eax
c00019c1:	eb 31                	jmp    c00019f4 <dlmallopt+0x85>
c00019c3:	89 1d c4 cc 02 c0    	mov    DWORD PTR ds:0xc002ccc4,ebx
c00019c9:	eb 06                	jmp    c00019d1 <dlmallopt+0x62>
c00019cb:	89 1d c8 cc 02 c0    	mov    DWORD PTR ds:0xc002ccc8,ebx
c00019d1:	be 01 00 00 00       	mov    esi,0x1
c00019d6:	eb 1c                	jmp    c00019f4 <dlmallopt+0x85>
c00019d8:	89 1d cc cc 02 c0    	mov    DWORD PTR ds:0xc002cccc,ebx
c00019de:	eb f1                	jmp    c00019d1 <dlmallopt+0x62>
c00019e0:	31 f6                	xor    esi,esi
c00019e2:	85 db                	test   ebx,ebx
c00019e4:	75 0e                	jne    c00019f4 <dlmallopt+0x85>
c00019e6:	c7 05 d4 cc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ccd4,0x0
c00019f0:	eb df                	jmp    c00019d1 <dlmallopt+0x62>
c00019f2:	31 f6                	xor    esi,esi
c00019f4:	89 f0                	mov    eax,esi
c00019f6:	5b                   	pop    ebx
c00019f7:	5e                   	pop    esi
c00019f8:	c3                   	ret    

c00019f9 <disk_status>:
c00019f9:	31 c0                	xor    eax,eax
c00019fb:	c3                   	ret    

c00019fc <disk_initialize>:
c00019fc:	31 c0                	xor    eax,eax
c00019fe:	c3                   	ret    

c00019ff <disk_read>:
c00019ff:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a04:	0f b6 04 85 40 e4 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1bc0]
c0001a0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a10:	e9 3f e6 01 00       	jmp    c0020054 <fatWrapperReadDisk>

c0001a15 <disk_write>:
c0001a15:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1a:	0f b6 04 85 40 e4 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1bc0]
c0001a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a26:	e9 70 e6 01 00       	jmp    c002009b <fatWrapperWriteDisk>

c0001a2b <disk_ioctl>:
c0001a2b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a39:	0f b6 04 85 40 e4 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1bc0]
c0001a41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a45:	e9 98 e6 01 00       	jmp    c00200e2 <fatWrapperIoctl>

c0001a4a <ld_word>:
c0001a4a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a51:	c1 e2 08             	shl    edx,0x8
c0001a54:	09 d0                	or     eax,edx
c0001a56:	c3                   	ret    

c0001a57 <ld_dword>:
c0001a57:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5b:	89 d1                	mov    ecx,edx
c0001a5d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a61:	c1 e1 08             	shl    ecx,0x8
c0001a64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a67:	09 ca                	or     edx,ecx
c0001a69:	c1 e2 08             	shl    edx,0x8
c0001a6c:	09 d0                	or     eax,edx
c0001a6e:	c3                   	ret    

c0001a6f <ld_qword>:
c0001a6f:	57                   	push   edi
c0001a70:	56                   	push   esi
c0001a71:	53                   	push   ebx
c0001a72:	31 db                	xor    ebx,ebx
c0001a74:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a77:	89 df                	mov    edi,ebx
c0001a79:	89 ce                	mov    esi,ecx
c0001a7b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a83:	c1 e6 08             	shl    esi,0x8
c0001a86:	09 f2                	or     edx,esi
c0001a88:	89 d6                	mov    esi,edx
c0001a8a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a92:	c1 e6 08             	shl    esi,0x8
c0001a95:	09 f2                	or     edx,esi
c0001a97:	89 d6                	mov    esi,edx
c0001a99:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9d:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aa4:	c1 e6 08             	shl    esi,0x8
c0001aa7:	89 fb                	mov    ebx,edi
c0001aa9:	09 f2                	or     edx,esi
c0001aab:	89 d1                	mov    ecx,edx
c0001aad:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab1:	c1 e1 08             	shl    ecx,0x8
c0001ab4:	89 da                	mov    edx,ebx
c0001ab6:	09 c8                	or     eax,ecx
c0001ab8:	5b                   	pop    ebx
c0001ab9:	5e                   	pop    esi
c0001aba:	5f                   	pop    edi
c0001abb:	c3                   	ret    

c0001abc <st_word>:
c0001abc:	66 89 10             	mov    WORD PTR [eax],dx
c0001abf:	c3                   	ret    

c0001ac0 <st_dword>:
c0001ac0:	89 10                	mov    DWORD PTR [eax],edx
c0001ac2:	c3                   	ret    

c0001ac3 <st_qword>:
c0001ac3:	89 10                	mov    DWORD PTR [eax],edx
c0001ac5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac8:	c3                   	ret    

c0001ac9 <mem_cpy>:
c0001ac9:	85 c9                	test   ecx,ecx
c0001acb:	74 10                	je     c0001add <mem_cpy+0x14>
c0001acd:	57                   	push   edi
c0001ace:	01 c1                	add    ecx,eax
c0001ad0:	56                   	push   esi
c0001ad1:	89 c7                	mov    edi,eax
c0001ad3:	89 d6                	mov    esi,edx
c0001ad5:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad6:	39 f9                	cmp    ecx,edi
c0001ad8:	75 fb                	jne    c0001ad5 <mem_cpy+0xc>
c0001ada:	5e                   	pop    esi
c0001adb:	5f                   	pop    edi
c0001adc:	c3                   	ret    
c0001add:	c3                   	ret    

c0001ade <mem_set>:
c0001ade:	01 c1                	add    ecx,eax
c0001ae0:	40                   	inc    eax
c0001ae1:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae4:	39 c8                	cmp    eax,ecx
c0001ae6:	75 f8                	jne    c0001ae0 <mem_set+0x2>
c0001ae8:	c3                   	ret    

c0001ae9 <mem_cmp>:
c0001ae9:	57                   	push   edi
c0001aea:	56                   	push   esi
c0001aeb:	89 c6                	mov    esi,eax
c0001aed:	53                   	push   ebx
c0001aee:	46                   	inc    esi
c0001aef:	42                   	inc    edx
c0001af0:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af4:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af8:	29 fb                	sub    ebx,edi
c0001afa:	89 cf                	mov    edi,ecx
c0001afc:	29 f7                	sub    edi,esi
c0001afe:	01 c7                	add    edi,eax
c0001b00:	74 04                	je     c0001b06 <mem_cmp+0x1d>
c0001b02:	85 db                	test   ebx,ebx
c0001b04:	74 e8                	je     c0001aee <mem_cmp+0x5>
c0001b06:	89 d8                	mov    eax,ebx
c0001b08:	5b                   	pop    ebx
c0001b09:	5e                   	pop    esi
c0001b0a:	5f                   	pop    edi
c0001b0b:	c3                   	ret    

c0001b0c <chk_chr>:
c0001b0c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b12:	74 07                	je     c0001b1b <chk_chr+0xf>
c0001b14:	39 d1                	cmp    ecx,edx
c0001b16:	74 03                	je     c0001b1b <chk_chr+0xf>
c0001b18:	40                   	inc    eax
c0001b19:	eb f1                	jmp    c0001b0c <chk_chr>
c0001b1b:	89 c8                	mov    eax,ecx
c0001b1d:	c3                   	ret    

c0001b1e <dbc_1st>:
c0001b1e:	31 c0                	xor    eax,eax
c0001b20:	c3                   	ret    

c0001b21 <dbc_2nd>:
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	c3                   	ret    

c0001b24 <tchar2uni>:
c0001b24:	57                   	push   edi
c0001b25:	89 c7                	mov    edi,eax
c0001b27:	56                   	push   esi
c0001b28:	53                   	push   ebx
c0001b29:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2d:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b30:	84 c9                	test   cl,cl
c0001b32:	78 0a                	js     c0001b3e <tchar2uni+0x1a>
c0001b34:	0f b6 d1             	movzx  edx,cl
c0001b37:	89 f3                	mov    ebx,esi
c0001b39:	e9 9f 00 00 00       	jmp    c0001bdd <tchar2uni+0xb9>
c0001b3e:	88 ca                	mov    dl,cl
c0001b40:	83 e2 e0             	and    edx,0xffffffe0
c0001b43:	80 fa c0             	cmp    dl,0xc0
c0001b46:	75 0c                	jne    c0001b54 <tchar2uni+0x30>
c0001b48:	89 ca                	mov    edx,ecx
c0001b4a:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4f:	83 e2 1f             	and    edx,0x1f
c0001b52:	eb 2e                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b54:	88 ca                	mov    dl,cl
c0001b56:	83 e2 f0             	and    edx,0xfffffff0
c0001b59:	80 fa e0             	cmp    dl,0xe0
c0001b5c:	75 0c                	jne    c0001b6a <tchar2uni+0x46>
c0001b5e:	89 ca                	mov    edx,ecx
c0001b60:	b9 02 00 00 00       	mov    ecx,0x2
c0001b65:	83 e2 0f             	and    edx,0xf
c0001b68:	eb 18                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b6a:	88 ca                	mov    dl,cl
c0001b6c:	83 e2 f8             	and    edx,0xfffffff8
c0001b6f:	88 d0                	mov    al,dl
c0001b71:	83 ca ff             	or     edx,0xffffffff
c0001b74:	3c f0                	cmp    al,0xf0
c0001b76:	75 6c                	jne    c0001be4 <tchar2uni+0xc0>
c0001b78:	89 ca                	mov    edx,ecx
c0001b7a:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7f:	83 e2 07             	and    edx,0x7
c0001b82:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b86:	46                   	inc    esi
c0001b87:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8a:	88 c8                	mov    al,cl
c0001b8c:	83 e0 c0             	and    eax,0xffffffc0
c0001b8f:	3c 80                	cmp    al,0x80
c0001b91:	75 4e                	jne    c0001be1 <tchar2uni+0xbd>
c0001b93:	c1 e2 06             	shl    edx,0x6
c0001b96:	83 e1 3f             	and    ecx,0x3f
c0001b99:	09 ca                	or     edx,ecx
c0001b9b:	39 de                	cmp    esi,ebx
c0001b9d:	75 e7                	jne    c0001b86 <tchar2uni+0x62>
c0001b9f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba2:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba8:	77 37                	ja     c0001be1 <tchar2uni+0xbd>
c0001baa:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb6:	76 29                	jbe    c0001be1 <tchar2uni+0xbd>
c0001bb8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbe:	76 1d                	jbe    c0001bdd <tchar2uni+0xb9>
c0001bc0:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc6:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bcc:	c1 e1 06             	shl    ecx,0x6
c0001bcf:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd5:	09 ca                	or     edx,ecx
c0001bd7:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bdd:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bdf:	eb 03                	jmp    c0001be4 <tchar2uni+0xc0>
c0001be1:	83 ca ff             	or     edx,0xffffffff
c0001be4:	5b                   	pop    ebx
c0001be5:	89 d0                	mov    eax,edx
c0001be7:	5e                   	pop    esi
c0001be8:	5f                   	pop    edi
c0001be9:	c3                   	ret    

c0001bea <put_utf>:
c0001bea:	53                   	push   ebx
c0001beb:	83 f8 7f             	cmp    eax,0x7f
c0001bee:	89 c3                	mov    ebx,eax
c0001bf0:	b0 00                	mov    al,0x0
c0001bf2:	77 11                	ja     c0001c05 <put_utf+0x1b>
c0001bf4:	85 c9                	test   ecx,ecx
c0001bf6:	0f 84 e5 00 00 00    	je     c0001ce1 <put_utf+0xf7>
c0001bfc:	88 1a                	mov    BYTE PTR [edx],bl
c0001bfe:	b0 01                	mov    al,0x1
c0001c00:	e9 dc 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c05:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0b:	77 23                	ja     c0001c30 <put_utf+0x46>
c0001c0d:	83 f9 01             	cmp    ecx,0x1
c0001c10:	0f 86 cb 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 c8 c0             	or     eax,0xffffffc0
c0001c24:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c27:	88 02                	mov    BYTE PTR [edx],al
c0001c29:	b0 02                	mov    al,0x2
c0001c2b:	e9 b1 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c30:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c36:	77 40                	ja     c0001c78 <put_utf+0x8e>
c0001c38:	83 f9 02             	cmp    ecx,0x2
c0001c3b:	0f 86 a0 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c41:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c47:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4d:	0f 86 8e 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c53:	89 d8                	mov    eax,ebx
c0001c55:	c1 e8 0c             	shr    eax,0xc
c0001c58:	83 c8 e0             	or     eax,0xffffffe0
c0001c5b:	88 02                	mov    BYTE PTR [edx],al
c0001c5d:	89 d8                	mov    eax,ebx
c0001c5f:	83 e3 3f             	and    ebx,0x3f
c0001c62:	c1 e8 06             	shr    eax,0x6
c0001c65:	83 cb 80             	or     ebx,0xffffff80
c0001c68:	83 e0 3f             	and    eax,0x3f
c0001c6b:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6e:	83 c8 80             	or     eax,0xffffff80
c0001c71:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c74:	b0 03                	mov    al,0x3
c0001c76:	eb 69                	jmp    c0001ce1 <put_utf+0xf7>
c0001c78:	83 f9 03             	cmp    ecx,0x3
c0001c7b:	76 64                	jbe    c0001ce1 <put_utf+0xf7>
c0001c7d:	89 d9                	mov    ecx,ebx
c0001c7f:	0f b7 c3             	movzx  eax,bx
c0001c82:	66 31 c9             	xor    cx,cx
c0001c85:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8b:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c91:	c1 e9 06             	shr    ecx,0x6
c0001c94:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9a:	77 43                	ja     c0001cdf <put_utf+0xf5>
c0001c9c:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca2:	77 3b                	ja     c0001cdf <put_utf+0xf5>
c0001ca4:	09 cb                	or     ebx,ecx
c0001ca6:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cac:	89 d8                	mov    eax,ebx
c0001cae:	c1 e8 12             	shr    eax,0x12
c0001cb1:	83 c8 f0             	or     eax,0xfffffff0
c0001cb4:	88 02                	mov    BYTE PTR [edx],al
c0001cb6:	89 d8                	mov    eax,ebx
c0001cb8:	c1 e8 0c             	shr    eax,0xc
c0001cbb:	83 e0 3f             	and    eax,0x3f
c0001cbe:	83 c8 80             	or     eax,0xffffff80
c0001cc1:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc4:	89 d8                	mov    eax,ebx
c0001cc6:	83 e3 3f             	and    ebx,0x3f
c0001cc9:	c1 e8 06             	shr    eax,0x6
c0001ccc:	83 cb 80             	or     ebx,0xffffff80
c0001ccf:	83 e0 3f             	and    eax,0x3f
c0001cd2:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd5:	83 c8 80             	or     eax,0xffffff80
c0001cd8:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdb:	b0 04                	mov    al,0x4
c0001cdd:	eb 02                	jmp    c0001ce1 <put_utf+0xf7>
c0001cdf:	31 c0                	xor    eax,eax
c0001ce1:	5b                   	pop    ebx
c0001ce2:	c3                   	ret    

c0001ce3 <clst2sect>:
c0001ce3:	89 c1                	mov    ecx,eax
c0001ce5:	83 ea 02             	sub    edx,0x2
c0001ce8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ceb:	83 e8 02             	sub    eax,0x2
c0001cee:	39 d0                	cmp    eax,edx
c0001cf0:	76 0d                	jbe    c0001cff <clst2sect+0x1c>
c0001cf2:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf6:	f7 e2                	mul    edx
c0001cf8:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfb:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cfe:	c3                   	ret    
c0001cff:	31 c0                	xor    eax,eax
c0001d01:	31 d2                	xor    edx,edx
c0001d03:	c3                   	ret    

c0001d04 <clmt_clust>:
c0001d04:	57                   	push   edi
c0001d05:	89 cf                	mov    edi,ecx
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d16:	c1 ef 09             	shr    edi,0x9
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d20:	89 f9                	mov    ecx,edi
c0001d22:	31 ff                	xor    edi,edi
c0001d24:	57                   	push   edi
c0001d25:	56                   	push   esi
c0001d26:	51                   	push   ecx
c0001d27:	52                   	push   edx
c0001d28:	e8 af 39 02 00       	call   c00256dc <__udivdi3>
c0001d2d:	83 c4 10             	add    esp,0x10
c0001d30:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d32:	85 d2                	test   edx,edx
c0001d34:	74 10                	je     c0001d46 <clmt_clust+0x42>
c0001d36:	39 d0                	cmp    eax,edx
c0001d38:	72 07                	jb     c0001d41 <clmt_clust+0x3d>
c0001d3a:	29 d0                	sub    eax,edx
c0001d3c:	83 c3 08             	add    ebx,0x8
c0001d3f:	eb ef                	jmp    c0001d30 <clmt_clust+0x2c>
c0001d41:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d44:	89 c2                	mov    edx,eax
c0001d46:	5b                   	pop    ebx
c0001d47:	89 d0                	mov    eax,edx
c0001d49:	5e                   	pop    esi
c0001d4a:	5f                   	pop    edi
c0001d4b:	c3                   	ret    

c0001d4c <pick_lfn>:
c0001d4c:	55                   	push   ebp
c0001d4d:	57                   	push   edi
c0001d4e:	56                   	push   esi
c0001d4f:	89 d6                	mov    esi,edx
c0001d51:	53                   	push   ebx
c0001d52:	89 c3                	mov    ebx,eax
c0001d54:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d57:	e8 ee fc ff ff       	call   c0001a4a <ld_word>
c0001d5c:	66 85 c0             	test   ax,ax
c0001d5f:	74 04                	je     c0001d65 <pick_lfn+0x19>
c0001d61:	31 c0                	xor    eax,eax
c0001d63:	eb 5c                	jmp    c0001dc1 <pick_lfn+0x75>
c0001d65:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d68:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6d:	83 e1 bf             	and    ecx,0xffffffbf
c0001d70:	31 ff                	xor    edi,edi
c0001d72:	49                   	dec    ecx
c0001d73:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d76:	0f b6 87 20 81 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7ee0]
c0001d7d:	01 f0                	add    eax,esi
c0001d7f:	e8 c6 fc ff ff       	call   c0001a4a <ld_word>
c0001d84:	66 85 ed             	test   bp,bp
c0001d87:	74 11                	je     c0001d9a <pick_lfn+0x4e>
c0001d89:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8f:	77 d0                	ja     c0001d61 <pick_lfn+0x15>
c0001d91:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d95:	89 c5                	mov    ebp,eax
c0001d97:	41                   	inc    ecx
c0001d98:	eb 04                	jmp    c0001d9e <pick_lfn+0x52>
c0001d9a:	66 40                	inc    ax
c0001d9c:	75 c3                	jne    c0001d61 <pick_lfn+0x15>
c0001d9e:	47                   	inc    edi
c0001d9f:	83 ff 0d             	cmp    edi,0xd
c0001da2:	75 d2                	jne    c0001d76 <pick_lfn+0x2a>
c0001da4:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da7:	74 13                	je     c0001dbc <pick_lfn+0x70>
c0001da9:	66 85 ed             	test   bp,bp
c0001dac:	74 0e                	je     c0001dbc <pick_lfn+0x70>
c0001dae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db4:	77 ab                	ja     c0001d61 <pick_lfn+0x15>
c0001db6:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbc:	b8 01 00 00 00       	mov    eax,0x1
c0001dc1:	5b                   	pop    ebx
c0001dc2:	5e                   	pop    esi
c0001dc3:	5f                   	pop    edi
c0001dc4:	5d                   	pop    ebp
c0001dc5:	c3                   	ret    

c0001dc6 <put_lfn>:
c0001dc6:	55                   	push   ebp
c0001dc7:	31 ed                	xor    ebp,ebp
c0001dc9:	57                   	push   edi
c0001dca:	89 d7                	mov    edi,edx
c0001dcc:	56                   	push   esi
c0001dcd:	31 f6                	xor    esi,esi
c0001dcf:	53                   	push   ebx
c0001dd0:	83 ec 08             	sub    esp,0x8
c0001dd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd6:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dde:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de4:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dea:	31 d2                	xor    edx,edx
c0001dec:	e8 cb fc ff ff       	call   c0001abc <st_word>
c0001df1:	0f b6 d9             	movzx  ebx,cl
c0001df4:	4b                   	dec    ebx
c0001df5:	6b db 0d             	imul   ebx,ebx,0xd
c0001df8:	66 83 fe ff          	cmp    si,0xffff
c0001dfc:	74 08                	je     c0001e06 <put_lfn+0x40>
c0001dfe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e01:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e05:	43                   	inc    ebx
c0001e06:	0f b6 85 20 81 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7ee0]
c0001e0d:	0f b7 d6             	movzx  edx,si
c0001e10:	01 f8                	add    eax,edi
c0001e12:	e8 a5 fc ff ff       	call   c0001abc <st_word>
c0001e17:	66 85 f6             	test   si,si
c0001e1a:	75 03                	jne    c0001e1f <put_lfn+0x59>
c0001e1c:	83 ce ff             	or     esi,0xffffffff
c0001e1f:	45                   	inc    ebp
c0001e20:	83 fd 0d             	cmp    ebp,0xd
c0001e23:	75 d3                	jne    c0001df8 <put_lfn+0x32>
c0001e25:	66 46                	inc    si
c0001e27:	74 0a                	je     c0001e33 <put_lfn+0x6d>
c0001e29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2c:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e31:	75 09                	jne    c0001e3c <put_lfn+0x76>
c0001e33:	88 c8                	mov    al,cl
c0001e35:	83 c8 40             	or     eax,0x40
c0001e38:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e40:	88 07                	mov    BYTE PTR [edi],al
c0001e42:	83 c4 08             	add    esp,0x8
c0001e45:	5b                   	pop    ebx
c0001e46:	5e                   	pop    esi
c0001e47:	5f                   	pop    edi
c0001e48:	5d                   	pop    ebp
c0001e49:	c3                   	ret    

c0001e4a <gen_numname>:
c0001e4a:	57                   	push   edi
c0001e4b:	89 cf                	mov    edi,ecx
c0001e4d:	56                   	push   esi
c0001e4e:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e53:	53                   	push   ebx
c0001e54:	89 c6                	mov    esi,eax
c0001e56:	83 ec 10             	sub    esp,0x10
c0001e59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5d:	e8 67 fc ff ff       	call   c0001ac9 <mem_cpy>
c0001e62:	83 fb 05             	cmp    ebx,0x5
c0001e65:	76 2d                	jbe    c0001e94 <gen_numname+0x4a>
c0001e67:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6a:	66 85 c0             	test   ax,ax
c0001e6d:	74 25                	je     c0001e94 <gen_numname+0x4a>
c0001e6f:	83 c7 02             	add    edi,0x2
c0001e72:	ba 10 00 00 00       	mov    edx,0x10
c0001e77:	01 db                	add    ebx,ebx
c0001e79:	89 c1                	mov    ecx,eax
c0001e7b:	66 d1 e8             	shr    ax,1
c0001e7e:	83 e1 01             	and    ecx,0x1
c0001e81:	01 cb                	add    ebx,ecx
c0001e83:	0f ba e3 10          	bt     ebx,0x10
c0001e87:	73 06                	jae    c0001e8f <gen_numname+0x45>
c0001e89:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8f:	4a                   	dec    edx
c0001e90:	75 e5                	jne    c0001e77 <gen_numname+0x2d>
c0001e92:	eb d3                	jmp    c0001e67 <gen_numname+0x1d>
c0001e94:	b8 07 00 00 00       	mov    eax,0x7
c0001e99:	88 d9                	mov    cl,bl
c0001e9b:	83 e1 0f             	and    ecx,0xf
c0001e9e:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea1:	80 fa 39             	cmp    dl,0x39
c0001ea4:	76 03                	jbe    c0001ea9 <gen_numname+0x5f>
c0001ea6:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea9:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eac:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb0:	89 da                	mov    edx,ebx
c0001eb2:	c1 ea 04             	shr    edx,0x4
c0001eb5:	83 fb 0f             	cmp    ebx,0xf
c0001eb8:	76 06                	jbe    c0001ec0 <gen_numname+0x76>
c0001eba:	89 c8                	mov    eax,ecx
c0001ebc:	89 d3                	mov    ebx,edx
c0001ebe:	eb d9                	jmp    c0001e99 <gen_numname+0x4f>
c0001ec0:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec5:	31 d2                	xor    edx,edx
c0001ec7:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001eca:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ecd:	39 ca                	cmp    edx,ecx
c0001ecf:	73 18                	jae    c0001ee9 <gen_numname+0x9f>
c0001ed1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed4:	3c 20                	cmp    al,0x20
c0001ed6:	74 11                	je     c0001ee9 <gen_numname+0x9f>
c0001ed8:	e8 41 fc ff ff       	call   c0001b1e <dbc_1st>
c0001edd:	85 c0                	test   eax,eax
c0001edf:	74 05                	je     c0001ee6 <gen_numname+0x9c>
c0001ee1:	39 d3                	cmp    ebx,edx
c0001ee3:	74 04                	je     c0001ee9 <gen_numname+0x9f>
c0001ee5:	42                   	inc    edx
c0001ee6:	42                   	inc    edx
c0001ee7:	eb e1                	jmp    c0001eca <gen_numname+0x80>
c0001ee9:	b0 20                	mov    al,0x20
c0001eeb:	83 f9 07             	cmp    ecx,0x7
c0001eee:	77 05                	ja     c0001ef5 <gen_numname+0xab>
c0001ef0:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef4:	41                   	inc    ecx
c0001ef5:	42                   	inc    edx
c0001ef6:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001efa:	83 fa 07             	cmp    edx,0x7
c0001efd:	76 ea                	jbe    c0001ee9 <gen_numname+0x9f>
c0001eff:	83 c4 10             	add    esp,0x10
c0001f02:	5b                   	pop    ebx
c0001f03:	5e                   	pop    esi
c0001f04:	5f                   	pop    edi
c0001f05:	c3                   	ret    

c0001f06 <sum_sfn>:
c0001f06:	31 c9                	xor    ecx,ecx
c0001f08:	31 d2                	xor    edx,edx
c0001f0a:	d0 ca                	ror    dl,1
c0001f0c:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0f:	41                   	inc    ecx
c0001f10:	83 f9 0b             	cmp    ecx,0xb
c0001f13:	75 f5                	jne    c0001f0a <sum_sfn+0x4>
c0001f15:	88 d0                	mov    al,dl
c0001f17:	c3                   	ret    

c0001f18 <xdir_sum>:
c0001f18:	56                   	push   esi
c0001f19:	31 c9                	xor    ecx,ecx
c0001f1b:	53                   	push   ebx
c0001f1c:	31 d2                	xor    edx,edx
c0001f1e:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f22:	43                   	inc    ebx
c0001f23:	c1 e3 05             	shl    ebx,0x5
c0001f26:	83 fa 02             	cmp    edx,0x2
c0001f29:	74 0b                	je     c0001f36 <xdir_sum+0x1e>
c0001f2b:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2f:	66 d1 c9             	ror    cx,1
c0001f32:	01 f1                	add    ecx,esi
c0001f34:	eb 05                	jmp    c0001f3b <xdir_sum+0x23>
c0001f36:	ba 03 00 00 00       	mov    edx,0x3
c0001f3b:	42                   	inc    edx
c0001f3c:	39 d3                	cmp    ebx,edx
c0001f3e:	77 e6                	ja     c0001f26 <xdir_sum+0xe>
c0001f40:	89 c8                	mov    eax,ecx
c0001f42:	5b                   	pop    ebx
c0001f43:	5e                   	pop    esi
c0001f44:	c3                   	ret    

c0001f45 <xsum32>:
c0001f45:	d1 ca                	ror    edx,1
c0001f47:	0f b6 c0             	movzx  eax,al
c0001f4a:	01 d0                	add    eax,edx
c0001f4c:	c3                   	ret    

c0001f4d <get_xfileinfo>:
c0001f4d:	55                   	push   ebp
c0001f4e:	31 c9                	xor    ecx,ecx
c0001f50:	57                   	push   edi
c0001f51:	bd 40 00 00 00       	mov    ebp,0x40
c0001f56:	56                   	push   esi
c0001f57:	31 ff                	xor    edi,edi
c0001f59:	53                   	push   ebx
c0001f5a:	89 c6                	mov    esi,eax
c0001f5c:	83 ec 0c             	sub    esp,0xc
c0001f5f:	89 d3                	mov    ebx,edx
c0001f61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f68:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6f:	76 6d                	jbe    c0001fde <get_xfileinfo+0x91>
c0001f71:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f77:	76 0b                	jbe    c0001f84 <get_xfileinfo+0x37>
c0001f79:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7d:	bf 01 00 00 00       	mov    edi,0x1
c0001f82:	eb 63                	jmp    c0001fe7 <get_xfileinfo+0x9a>
c0001f84:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8a:	75 03                	jne    c0001f8f <get_xfileinfo+0x42>
c0001f8c:	83 c5 02             	add    ebp,0x2
c0001f8f:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f92:	83 c5 02             	add    ebp,0x2
c0001f95:	e8 b0 fa ff ff       	call   c0001a4a <ld_word>
c0001f9a:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9d:	66 85 c9             	test   cx,cx
c0001fa0:	75 0d                	jne    c0001faf <get_xfileinfo+0x62>
c0001fa2:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa8:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fad:	76 2b                	jbe    c0001fda <get_xfileinfo+0x8d>
c0001faf:	c1 e1 10             	shl    ecx,0x10
c0001fb2:	ba ff 00 00 00       	mov    edx,0xff
c0001fb7:	0f b7 c0             	movzx  eax,ax
c0001fba:	29 fa                	sub    edx,edi
c0001fbc:	09 c8                	or     eax,ecx
c0001fbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc2:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fca:	e8 1b fc ff ff       	call   c0001bea <put_utf>
c0001fcf:	84 c0                	test   al,al
c0001fd1:	74 a6                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fd3:	0f b6 c0             	movzx  eax,al
c0001fd6:	01 c7                	add    edi,eax
c0001fd8:	31 c0                	xor    eax,eax
c0001fda:	89 c1                	mov    ecx,eax
c0001fdc:	eb 8a                	jmp    c0001f68 <get_xfileinfo+0x1b>
c0001fde:	85 ff                	test   edi,edi
c0001fe0:	74 97                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fe2:	66 85 c9             	test   cx,cx
c0001fe5:	75 92                	jne    c0001f79 <get_xfileinfo+0x2c>
c0001fe7:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fec:	31 c0                	xor    eax,eax
c0001fee:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff2:	31 d2                	xor    edx,edx
c0001ff4:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff7:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffa:	80 e1 10             	and    cl,0x10
c0001ffd:	75 08                	jne    c0002007 <get_xfileinfo+0xba>
c0001fff:	8d 46 38             	lea    eax,[esi+0x38]
c0002002:	e8 68 fa ff ff       	call   c0001a6f <ld_qword>
c0002007:	89 03                	mov    DWORD PTR [ebx],eax
c0002009:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200c:	8d 46 0c             	lea    eax,[esi+0xc]
c000200f:	e8 36 fa ff ff       	call   c0001a4a <ld_word>
c0002014:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002018:	8d 46 0e             	lea    eax,[esi+0xe]
c000201b:	e8 2a fa ff ff       	call   c0001a4a <ld_word>
c0002020:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002024:	83 c4 0c             	add    esp,0xc
c0002027:	5b                   	pop    ebx
c0002028:	5e                   	pop    esi
c0002029:	5f                   	pop    edi
c000202a:	5d                   	pop    ebp
c000202b:	c3                   	ret    

c000202c <get_ldnumber>:
c000202c:	8b 10                	mov    edx,DWORD PTR [eax]
c000202e:	85 d2                	test   edx,edx
c0002030:	74 14                	je     c0002046 <get_ldnumber+0x1a>
c0002032:	56                   	push   esi
c0002033:	53                   	push   ebx
c0002034:	89 d3                	mov    ebx,edx
c0002036:	43                   	inc    ebx
c0002037:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000203a:	80 f9 1f             	cmp    cl,0x1f
c000203d:	76 0d                	jbe    c000204c <get_ldnumber+0x20>
c000203f:	80 f9 3a             	cmp    cl,0x3a
c0002042:	75 f2                	jne    c0002036 <get_ldnumber+0xa>
c0002044:	eb 0a                	jmp    c0002050 <get_ldnumber+0x24>
c0002046:	83 c9 ff             	or     ecx,0xffffffff
c0002049:	89 c8                	mov    eax,ecx
c000204b:	c3                   	ret    
c000204c:	31 c9                	xor    ecx,ecx
c000204e:	eb 24                	jmp    c0002074 <get_ldnumber+0x48>
c0002050:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002053:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002056:	80 f9 09             	cmp    cl,0x9
c0002059:	77 16                	ja     c0002071 <get_ldnumber+0x45>
c000205b:	83 c2 02             	add    edx,0x2
c000205e:	83 c9 ff             	or     ecx,0xffffffff
c0002061:	39 d3                	cmp    ebx,edx
c0002063:	75 0f                	jne    c0002074 <get_ldnumber+0x48>
c0002065:	89 f2                	mov    edx,esi
c0002067:	89 18                	mov    DWORD PTR [eax],ebx
c0002069:	0f be ca             	movsx  ecx,dl
c000206c:	83 e9 30             	sub    ecx,0x30
c000206f:	eb 03                	jmp    c0002074 <get_ldnumber+0x48>
c0002071:	83 c9 ff             	or     ecx,0xffffffff
c0002074:	89 c8                	mov    eax,ecx
c0002076:	5b                   	pop    ebx
c0002077:	5e                   	pop    esi
c0002078:	c3                   	ret    

c0002079 <crc32>:
c0002079:	56                   	push   esi
c000207a:	89 d6                	mov    esi,edx
c000207c:	53                   	push   ebx
c000207d:	b2 01                	mov    dl,0x1
c000207f:	bb 08 00 00 00       	mov    ebx,0x8
c0002084:	89 f1                	mov    ecx,esi
c0002086:	84 d1                	test   cl,dl
c0002088:	0f 95 c1             	setne  cl
c000208b:	0f b6 c9             	movzx  ecx,cl
c000208e:	31 c1                	xor    ecx,eax
c0002090:	89 c8                	mov    eax,ecx
c0002092:	d1 e8                	shr    eax,1
c0002094:	80 e1 01             	and    cl,0x1
c0002097:	74 05                	je     c000209e <crc32+0x25>
c0002099:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209e:	d1 e2                	shl    edx,1
c00020a0:	4b                   	dec    ebx
c00020a1:	75 e1                	jne    c0002084 <crc32+0xb>
c00020a3:	5b                   	pop    ebx
c00020a4:	5e                   	pop    esi
c00020a5:	c3                   	ret    

c00020a6 <test_gpt_header>:
c00020a6:	55                   	push   ebp
c00020a7:	b9 10 00 00 00       	mov    ecx,0x10
c00020ac:	57                   	push   edi
c00020ad:	ba 20 80 02 c0       	mov    edx,0xc0028020
c00020b2:	56                   	push   esi
c00020b3:	31 ff                	xor    edi,edi
c00020b5:	53                   	push   ebx
c00020b6:	89 c3                	mov    ebx,eax
c00020b8:	e8 2c fa ff ff       	call   c0001ae9 <mem_cmp>
c00020bd:	85 c0                	test   eax,eax
c00020bf:	75 55                	jne    c0002116 <test_gpt_header+0x70>
c00020c1:	89 c7                	mov    edi,eax
c00020c3:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c8:	83 ce ff             	or     esi,0xffffffff
c00020cb:	31 d2                	xor    edx,edx
c00020cd:	83 fd 03             	cmp    ebp,0x3
c00020d0:	76 05                	jbe    c00020d7 <test_gpt_header+0x31>
c00020d2:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d7:	89 f0                	mov    eax,esi
c00020d9:	45                   	inc    ebp
c00020da:	e8 9a ff ff ff       	call   c0002079 <crc32>
c00020df:	83 fd 4c             	cmp    ebp,0x4c
c00020e2:	89 c6                	mov    esi,eax
c00020e4:	75 e5                	jne    c00020cb <test_gpt_header+0x25>
c00020e6:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e9:	f7 d6                	not    esi
c00020eb:	e8 67 f9 ff ff       	call   c0001a57 <ld_dword>
c00020f0:	39 c6                	cmp    esi,eax
c00020f2:	75 22                	jne    c0002116 <test_gpt_header+0x70>
c00020f4:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f7:	e8 5b f9 ff ff       	call   c0001a57 <ld_dword>
c00020fc:	83 c0 80             	add    eax,0xffffff80
c00020ff:	75 15                	jne    c0002116 <test_gpt_header+0x70>
c0002101:	8d 43 50             	lea    eax,[ebx+0x50]
c0002104:	e8 4e f9 ff ff       	call   c0001a57 <ld_dword>
c0002109:	3d 80 00 00 00       	cmp    eax,0x80
c000210e:	0f 96 c0             	setbe  al
c0002111:	0f b6 c0             	movzx  eax,al
c0002114:	89 c7                	mov    edi,eax
c0002116:	5b                   	pop    ebx
c0002117:	89 f8                	mov    eax,edi
c0002119:	5e                   	pop    esi
c000211a:	5f                   	pop    edi
c000211b:	5d                   	pop    ebp
c000211c:	c3                   	ret    

c000211d <make_rand>:
c000211d:	56                   	push   esi
c000211e:	85 c0                	test   eax,eax
c0002120:	53                   	push   ebx
c0002121:	75 05                	jne    c0002128 <make_rand+0xb>
c0002123:	b8 01 00 00 00       	mov    eax,0x1
c0002128:	01 d1                	add    ecx,edx
c000212a:	bb 08 00 00 00       	mov    ebx,0x8
c000212f:	89 c6                	mov    esi,eax
c0002131:	d1 e8                	shr    eax,1
c0002133:	83 e6 01             	and    esi,0x1
c0002136:	85 f6                	test   esi,esi
c0002138:	74 05                	je     c000213f <make_rand+0x22>
c000213a:	35 00 00 00 a3       	xor    eax,0xa3000000
c000213f:	4b                   	dec    ebx
c0002140:	75 ed                	jne    c000212f <make_rand+0x12>
c0002142:	42                   	inc    edx
c0002143:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002146:	39 ca                	cmp    edx,ecx
c0002148:	75 e0                	jne    c000212a <make_rand+0xd>
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <validate>:
c000214d:	56                   	push   esi
c000214e:	53                   	push   ebx
c000214f:	89 d6                	mov    esi,edx
c0002151:	51                   	push   ecx
c0002152:	85 c0                	test   eax,eax
c0002154:	75 09                	jne    c000215f <validate+0x12>
c0002156:	b8 09 00 00 00       	mov    eax,0x9
c000215b:	31 c9                	xor    ecx,ecx
c000215d:	eb 2f                	jmp    c000218e <validate+0x41>
c000215f:	89 c3                	mov    ebx,eax
c0002161:	8b 00                	mov    eax,DWORD PTR [eax]
c0002163:	85 c0                	test   eax,eax
c0002165:	74 ef                	je     c0002156 <validate+0x9>
c0002167:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000216a:	74 ea                	je     c0002156 <validate+0x9>
c000216c:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002170:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002174:	75 e0                	jne    c0002156 <validate+0x9>
c0002176:	83 ec 0c             	sub    esp,0xc
c0002179:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217d:	50                   	push   eax
c000217e:	e8 76 f8 ff ff       	call   c00019f9 <disk_status>
c0002183:	83 c4 10             	add    esp,0x10
c0002186:	a8 01                	test   al,0x1
c0002188:	75 cc                	jne    c0002156 <validate+0x9>
c000218a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218c:	31 c0                	xor    eax,eax
c000218e:	89 0e                	mov    DWORD PTR [esi],ecx
c0002190:	5a                   	pop    edx
c0002191:	5b                   	pop    ebx
c0002192:	5e                   	pop    esi
c0002193:	c3                   	ret    

c0002194 <sync_window>:
c0002194:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002198:	0f 84 85 00 00 00    	je     c0002223 <sync_window+0x8f>
c000219e:	55                   	push   ebp
c000219f:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a2:	57                   	push   edi
c00021a3:	56                   	push   esi
c00021a4:	53                   	push   ebx
c00021a5:	89 c3                	mov    ebx,eax
c00021a7:	83 ec 28             	sub    esp,0x28
c00021aa:	6a 01                	push   0x1
c00021ac:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021af:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b2:	55                   	push   ebp
c00021b3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b7:	50                   	push   eax
c00021b8:	e8 58 f8 ff ff       	call   c0001a15 <disk_write>
c00021bd:	83 c4 20             	add    esp,0x20
c00021c0:	ba 01 00 00 00       	mov    edx,0x1
c00021c5:	85 c0                	test   eax,eax
c00021c7:	75 50                	jne    c0002219 <sync_window+0x85>
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021ce:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021d9:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021dc:	89 c6                	mov    esi,eax
c00021de:	89 d7                	mov    edi,edx
c00021e0:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e7:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ee:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f2:	73 23                	jae    c0002217 <sync_window+0x83>
c00021f4:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f8:	75 1d                	jne    c0002217 <sync_window+0x83>
c00021fa:	83 ec 0c             	sub    esp,0xc
c00021fd:	6a 01                	push   0x1
c00021ff:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002203:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002207:	52                   	push   edx
c0002208:	50                   	push   eax
c0002209:	55                   	push   ebp
c000220a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220e:	50                   	push   eax
c000220f:	e8 01 f8 ff ff       	call   c0001a15 <disk_write>
c0002214:	83 c4 20             	add    esp,0x20
c0002217:	31 d2                	xor    edx,edx
c0002219:	83 c4 1c             	add    esp,0x1c
c000221c:	89 d0                	mov    eax,edx
c000221e:	5b                   	pop    ebx
c000221f:	5e                   	pop    esi
c0002220:	5f                   	pop    edi
c0002221:	5d                   	pop    ebp
c0002222:	c3                   	ret    
c0002223:	31 d2                	xor    edx,edx
c0002225:	89 d0                	mov    eax,edx
c0002227:	c3                   	ret    

c0002228 <move_window>:
c0002228:	56                   	push   esi
c0002229:	53                   	push   ebx
c000222a:	89 c3                	mov    ebx,eax
c000222c:	83 ec 14             	sub    esp,0x14
c000222f:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002232:	75 07                	jne    c000223b <move_window+0x13>
c0002234:	31 f6                	xor    esi,esi
c0002236:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002239:	74 59                	je     c0002294 <move_window+0x6c>
c000223b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002243:	89 d8                	mov    eax,ebx
c0002245:	e8 4a ff ff ff       	call   c0002194 <sync_window>
c000224a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224e:	89 c6                	mov    esi,eax
c0002250:	85 c0                	test   eax,eax
c0002252:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002256:	75 3c                	jne    c0002294 <move_window+0x6c>
c0002258:	83 ec 0c             	sub    esp,0xc
c000225b:	8d 43 54             	lea    eax,[ebx+0x54]
c000225e:	6a 01                	push   0x1
c0002260:	51                   	push   ecx
c0002261:	52                   	push   edx
c0002262:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002266:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000226a:	50                   	push   eax
c000226b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226f:	50                   	push   eax
c0002270:	e8 8a f7 ff ff       	call   c00019ff <disk_read>
c0002275:	83 c4 20             	add    esp,0x20
c0002278:	85 c0                	test   eax,eax
c000227a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002282:	74 0a                	je     c000228e <move_window+0x66>
c0002284:	83 ca ff             	or     edx,0xffffffff
c0002287:	be 01 00 00 00       	mov    esi,0x1
c000228c:	89 d1                	mov    ecx,edx
c000228e:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002291:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002294:	89 f0                	mov    eax,esi
c0002296:	83 c4 14             	add    esp,0x14
c0002299:	5b                   	pop    ebx
c000229a:	5e                   	pop    esi
c000229b:	c3                   	ret    

c000229c <check_fs>:
c000229c:	53                   	push   ebx
c000229d:	89 c3                	mov    ebx,eax
c000229f:	83 ec 08             	sub    esp,0x8
c00022a2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a6:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ad:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b4:	e8 6f ff ff ff       	call   c0002228 <move_window>
c00022b9:	ba 04 00 00 00       	mov    edx,0x4
c00022be:	85 c0                	test   eax,eax
c00022c0:	0f 85 89 00 00 00    	jne    c000234f <check_fs+0xb3>
c00022c6:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022cc:	e8 79 f7 ff ff       	call   c0001a4a <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 73                	jne    c000234f <check_fs+0xb3>
c00022dc:	ba 40 81 02 c0       	mov    edx,0xc0028140
c00022e1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e9:	e8 fb f7 ff ff       	call   c0001ae9 <mem_cmp>
c00022ee:	ba 01 00 00 00       	mov    edx,0x1
c00022f3:	85 c0                	test   eax,eax
c00022f5:	74 58                	je     c000234f <check_fs+0xb3>
c00022f7:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022fa:	8d 50 18             	lea    edx,[eax+0x18]
c00022fd:	80 fa 01             	cmp    dl,0x1
c0002300:	76 09                	jbe    c000230b <check_fs+0x6f>
c0002302:	ba 02 00 00 00       	mov    edx,0x2
c0002307:	3c eb                	cmp    al,0xeb
c0002309:	75 44                	jne    c000234f <check_fs+0xb3>
c000230b:	ba e8 b1 02 c0       	mov    edx,0xc002b1e8
c0002310:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002316:	b9 03 00 00 00       	mov    ecx,0x3
c000231b:	e8 c9 f7 ff ff       	call   c0001ae9 <mem_cmp>
c0002320:	31 d2                	xor    edx,edx
c0002322:	85 c0                	test   eax,eax
c0002324:	74 29                	je     c000234f <check_fs+0xb3>
c0002326:	ba 4c 81 02 c0       	mov    edx,0xc002814c
c000232b:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002331:	b9 05 00 00 00       	mov    ecx,0x5
c0002336:	e8 ae f7 ff ff       	call   c0001ae9 <mem_cmp>
c000233b:	31 d2                	xor    edx,edx
c000233d:	85 c0                	test   eax,eax
c000233f:	74 0e                	je     c000234f <check_fs+0xb3>
c0002341:	31 d2                	xor    edx,edx
c0002343:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000234a:	0f 95 c2             	setne  dl
c000234d:	01 d2                	add    edx,edx
c000234f:	89 d0                	mov    eax,edx
c0002351:	83 c4 08             	add    esp,0x8
c0002354:	5b                   	pop    ebx
c0002355:	c3                   	ret    

c0002356 <find_volume>:
c0002356:	55                   	push   ebp
c0002357:	31 c9                	xor    ecx,ecx
c0002359:	57                   	push   edi
c000235a:	56                   	push   esi
c000235b:	89 d6                	mov    esi,edx
c000235d:	53                   	push   ebx
c000235e:	31 d2                	xor    edx,edx
c0002360:	83 ec 3c             	sub    esp,0x3c
c0002363:	89 c3                	mov    ebx,eax
c0002365:	e8 32 ff ff ff       	call   c000229c <check_fs>
c000236a:	83 f8 02             	cmp    eax,0x2
c000236d:	74 0e                	je     c000237d <find_volume+0x27>
c000236f:	0f 87 5d 01 00 00    	ja     c00024d2 <find_volume+0x17c>
c0002375:	85 f6                	test   esi,esi
c0002377:	0f 84 55 01 00 00    	je     c00024d2 <find_volume+0x17c>
c000237d:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002384:	0f 85 dd 00 00 00    	jne    c0002467 <find_volume+0x111>
c000238a:	31 c9                	xor    ecx,ecx
c000238c:	ba 01 00 00 00       	mov    edx,0x1
c0002391:	89 d8                	mov    eax,ebx
c0002393:	e8 90 fe ff ff       	call   c0002228 <move_window>
c0002398:	85 c0                	test   eax,eax
c000239a:	74 0a                	je     c00023a6 <find_volume+0x50>
c000239c:	b8 04 00 00 00       	mov    eax,0x4
c00023a1:	e9 2c 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023a6:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a9:	89 e8                	mov    eax,ebp
c00023ab:	e8 f6 fc ff ff       	call   c00020a6 <test_gpt_header>
c00023b0:	85 c0                	test   eax,eax
c00023b2:	75 0a                	jne    c00023be <find_volume+0x68>
c00023b4:	b8 03 00 00 00       	mov    eax,0x3
c00023b9:	e9 14 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023be:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c4:	e8 8e f6 ff ff       	call   c0001a57 <ld_dword>
c00023c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023cd:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d3:	e8 97 f6 ff ff       	call   c0001a6f <ld_qword>
c00023d8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f4:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f8:	74 ba                	je     c00023b4 <find_volume+0x5e>
c00023fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023fe:	31 c9                	xor    ecx,ecx
c0002400:	c1 e7 07             	shl    edi,0x7
c0002403:	89 d8                	mov    eax,ebx
c0002405:	89 fa                	mov    edx,edi
c0002407:	c1 ea 09             	shr    edx,0x9
c000240a:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240e:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002412:	e8 11 fe ff ff       	call   c0002228 <move_window>
c0002417:	85 c0                	test   eax,eax
c0002419:	75 81                	jne    c000239c <find_volume+0x46>
c000241b:	81 e7 80 01 00 00    	and    edi,0x180
c0002421:	b9 10 00 00 00       	mov    ecx,0x10
c0002426:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242a:	ba 30 81 02 c0       	mov    edx,0xc0028130
c000242f:	e8 b5 f6 ff ff       	call   c0001ae9 <mem_cmp>
c0002434:	85 c0                	test   eax,eax
c0002436:	75 29                	jne    c0002461 <find_volume+0x10b>
c0002438:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002440:	e8 2a f6 ff ff       	call   c0001a6f <ld_qword>
c0002445:	89 d1                	mov    ecx,edx
c0002447:	89 c2                	mov    edx,eax
c0002449:	89 d8                	mov    eax,ebx
c000244b:	e8 4c fe ff ff       	call   c000229c <check_fs>
c0002450:	85 f6                	test   esi,esi
c0002452:	75 07                	jne    c000245b <find_volume+0x105>
c0002454:	83 f8 01             	cmp    eax,0x1
c0002457:	77 08                	ja     c0002461 <find_volume+0x10b>
c0002459:	eb 77                	jmp    c00024d2 <find_volume+0x17c>
c000245b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245f:	74 71                	je     c00024d2 <find_volume+0x17c>
c0002461:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002465:	eb 89                	jmp    c00023f0 <find_volume+0x9a>
c0002467:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246b:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002471:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247b:	89 cd                	mov    ebp,ecx
c000247d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002481:	89 f8                	mov    eax,edi
c0002483:	83 c7 10             	add    edi,0x10
c0002486:	e8 cc f5 ff ff       	call   c0001a57 <ld_dword>
c000248b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000248f:	89 01                	mov    DWORD PTR [ecx],eax
c0002491:	83 c1 04             	add    ecx,0x4
c0002494:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002498:	75 e3                	jne    c000247d <find_volume+0x127>
c000249a:	31 ff                	xor    edi,edi
c000249c:	85 f6                	test   esi,esi
c000249e:	74 03                	je     c00024a3 <find_volume+0x14d>
c00024a0:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a3:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a7:	85 d2                	test   edx,edx
c00024a9:	74 14                	je     c00024bf <find_volume+0x169>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	89 d8                	mov    eax,ebx
c00024af:	e8 e8 fd ff ff       	call   c000229c <check_fs>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 19                	jbe    c00024d2 <find_volume+0x17c>
c00024b9:	85 f6                	test   esi,esi
c00024bb:	74 0f                	je     c00024cc <find_volume+0x176>
c00024bd:	eb 13                	jmp    c00024d2 <find_volume+0x17c>
c00024bf:	85 f6                	test   esi,esi
c00024c1:	0f 85 ed fe ff ff    	jne    c00023b4 <find_volume+0x5e>
c00024c7:	b8 03 00 00 00       	mov    eax,0x3
c00024cc:	47                   	inc    edi
c00024cd:	83 ff 03             	cmp    edi,0x3
c00024d0:	76 d1                	jbe    c00024a3 <find_volume+0x14d>
c00024d2:	83 c4 3c             	add    esp,0x3c
c00024d5:	5b                   	pop    ebx
c00024d6:	5e                   	pop    esi
c00024d7:	5f                   	pop    edi
c00024d8:	5d                   	pop    ebp
c00024d9:	c3                   	ret    

c00024da <mount_volume>:
c00024da:	55                   	push   ebp
c00024db:	57                   	push   edi
c00024dc:	89 cf                	mov    edi,ecx
c00024de:	56                   	push   esi
c00024df:	53                   	push   ebx
c00024e0:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e5:	83 ec 3c             	sub    esp,0x3c
c00024e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f2:	e8 35 fb ff ff       	call   c000202c <get_ldnumber>
c00024f7:	85 c0                	test   eax,eax
c00024f9:	0f 88 3a 05 00 00    	js     c0002a39 <mount_volume+0x55f>
c00024ff:	8b 2c 85 20 cd 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd32e0]
c0002506:	89 c6                	mov    esi,eax
c0002508:	bb 0c 00 00 00       	mov    ebx,0xc
c000250d:	85 ed                	test   ebp,ebp
c000250f:	0f 84 24 05 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002515:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002519:	83 e7 fe             	and    edi,0xfffffffe
c000251c:	89 2a                	mov    DWORD PTR [edx],ebp
c000251e:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002522:	74 32                	je     c0002556 <mount_volume+0x7c>
c0002524:	83 ec 0c             	sub    esp,0xc
c0002527:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000252b:	50                   	push   eax
c000252c:	e8 c8 f4 ff ff       	call   c00019f9 <disk_status>
c0002531:	83 c4 10             	add    esp,0x10
c0002534:	a8 01                	test   al,0x1
c0002536:	75 1e                	jne    c0002556 <mount_volume+0x7c>
c0002538:	31 db                	xor    ebx,ebx
c000253a:	89 f9                	mov    ecx,edi
c000253c:	84 c9                	test   cl,cl
c000253e:	0f 84 f5 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002544:	a8 04                	test   al,0x4
c0002546:	0f 84 ed 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c000254c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002551:	e9 e3 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c0002556:	83 ec 0c             	sub    esp,0xc
c0002559:	89 f0                	mov    eax,esi
c000255b:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000255f:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002562:	0f b6 f0             	movzx  esi,al
c0002565:	bb 03 00 00 00       	mov    ebx,0x3
c000256a:	56                   	push   esi
c000256b:	e8 8c f4 ff ff       	call   c00019fc <disk_initialize>
c0002570:	83 c4 10             	add    esp,0x10
c0002573:	a8 01                	test   al,0x1
c0002575:	0f 85 be 04 00 00    	jne    c0002a39 <mount_volume+0x55f>
c000257b:	89 f9                	mov    ecx,edi
c000257d:	84 c9                	test   cl,cl
c000257f:	74 04                	je     c0002585 <mount_volume+0xab>
c0002581:	a8 04                	test   al,0x4
c0002583:	75 c7                	jne    c000254c <mount_volume+0x72>
c0002585:	31 d2                	xor    edx,edx
c0002587:	89 e8                	mov    eax,ebp
c0002589:	e8 c8 fd ff ff       	call   c0002356 <find_volume>
c000258e:	83 f8 04             	cmp    eax,0x4
c0002591:	75 0a                	jne    c000259d <mount_volume+0xc3>
c0002593:	bb 01 00 00 00       	mov    ebx,0x1
c0002598:	e9 9c 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000259d:	83 f8 01             	cmp    eax,0x1
c00025a0:	76 0a                	jbe    c00025ac <mount_volume+0xd2>
c00025a2:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a7:	e9 8d 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c00025ac:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025af:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ba:	75 17                	jne    c00025d3 <mount_volume+0xf9>
c00025bc:	b8 0b 00 00 00       	mov    eax,0xb
c00025c1:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c6:	75 da                	jne    c00025a2 <mount_volume+0xc8>
c00025c8:	40                   	inc    eax
c00025c9:	83 f8 40             	cmp    eax,0x40
c00025cc:	75 f3                	jne    c00025c1 <mount_volume+0xe7>
c00025ce:	e9 5a 02 00 00       	jmp    c000282d <mount_volume+0x353>
c00025d3:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d6:	e8 6f f4 ff ff       	call   c0001a4a <ld_word>
c00025db:	66 3d 00 02          	cmp    ax,0x200
c00025df:	75 c1                	jne    c00025a2 <mount_volume+0xc8>
c00025e1:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e4:	e8 61 f4 ff ff       	call   c0001a4a <ld_word>
c00025e9:	0f b7 c0             	movzx  eax,ax
c00025ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f0:	85 c0                	test   eax,eax
c00025f2:	75 0c                	jne    c0002600 <mount_volume+0x126>
c00025f4:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f7:	e8 5b f4 ff ff       	call   c0001a57 <ld_dword>
c00025fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002604:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002607:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002611:	48                   	dec    eax
c0002612:	3c 01                	cmp    al,0x1
c0002614:	77 8c                	ja     c00025a2 <mount_volume+0xc8>
c0002616:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261a:	89 c3                	mov    ebx,eax
c000261c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002620:	66 85 c0             	test   ax,ax
c0002623:	0f 84 79 ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002629:	8d 40 ff             	lea    eax,[eax-0x1]
c000262c:	85 d8                	test   eax,ebx
c000262e:	0f 85 6e ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002634:	8d 45 65             	lea    eax,[ebp+0x65]
c0002637:	e8 0e f4 ff ff       	call   c0001a4a <ld_word>
c000263c:	89 c7                	mov    edi,eax
c000263e:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002642:	a8 0f                	test   al,0xf
c0002644:	0f 85 58 ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000264a:	8d 45 67             	lea    eax,[ebp+0x67]
c000264d:	e8 f8 f3 ff ff       	call   c0001a4a <ld_word>
c0002652:	0f b7 f0             	movzx  esi,ax
c0002655:	85 f6                	test   esi,esi
c0002657:	75 0a                	jne    c0002663 <mount_volume+0x189>
c0002659:	8d 45 74             	lea    eax,[ebp+0x74]
c000265c:	e8 f6 f3 ff ff       	call   c0001a57 <ld_dword>
c0002661:	89 c6                	mov    esi,eax
c0002663:	8d 45 62             	lea    eax,[ebp+0x62]
c0002666:	e8 df f3 ff ff       	call   c0001a4a <ld_word>
c000266b:	66 85 c0             	test   ax,ax
c000266e:	0f 84 2e ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002674:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002679:	0f b7 c8             	movzx  ecx,ax
c000267c:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002685:	89 fa                	mov    edx,edi
c0002687:	66 c1 ea 04          	shr    dx,0x4
c000268b:	0f b7 d2             	movzx  edx,dx
c000268e:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002692:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002699:	39 c6                	cmp    esi,eax
c000269b:	0f 82 01 ff ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026a1:	29 c6                	sub    esi,eax
c00026a3:	31 d2                	xor    edx,edx
c00026a5:	89 f0                	mov    eax,esi
c00026a7:	f7 f3                	div    ebx
c00026a9:	39 de                	cmp    esi,ebx
c00026ab:	0f 82 f1 fe ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026b1:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b6:	0f 87 e6 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00026bc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c1:	0f 86 63 03 00 00    	jbe    c0002a2a <mount_volume+0x550>
c00026c7:	bb 03 00 00 00       	mov    ebx,0x3
c00026cc:	8d 70 02             	lea    esi,[eax+0x2]
c00026cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d7:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026da:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026dd:	31 d2                	xor    edx,edx
c00026df:	89 c8                	mov    eax,ecx
c00026e1:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026e4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f4:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f7:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026fe:	31 d2                	xor    edx,edx
c0002700:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002704:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002708:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000270b:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270e:	83 fb 03             	cmp    ebx,0x3
c0002711:	75 2b                	jne    c000273e <mount_volume+0x264>
c0002713:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002716:	e8 2f f3 ff ff       	call   c0001a4a <ld_word>
c000271b:	66 09 c7             	or     di,ax
c000271e:	0f 85 7e fe ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002724:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000272a:	c1 e6 02             	shl    esi,0x2
c000272d:	e8 25 f3 ff ff       	call   c0001a57 <ld_dword>
c0002732:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002739:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273c:	eb 30                	jmp    c000276e <mount_volume+0x294>
c000273e:	66 85 ff             	test   di,di
c0002741:	0f 84 5b fe ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002747:	31 d2                	xor    edx,edx
c0002749:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002751:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002755:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002758:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000275b:	83 fb 02             	cmp    ebx,0x2
c000275e:	75 04                	jne    c0002764 <mount_volume+0x28a>
c0002760:	01 f6                	add    esi,esi
c0002762:	eb 0a                	jmp    c000276e <mount_volume+0x294>
c0002764:	8d 04 76             	lea    eax,[esi+esi*2]
c0002767:	83 e6 01             	and    esi,0x1
c000276a:	d1 e8                	shr    eax,1
c000276c:	01 c6                	add    esi,eax
c000276e:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002774:	c1 ee 09             	shr    esi,0x9
c0002777:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000277b:	0f 87 21 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c0002781:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002788:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000278f:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002793:	83 fb 03             	cmp    ebx,0x3
c0002796:	75 7a                	jne    c0002812 <mount_volume+0x338>
c0002798:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279e:	e8 a7 f2 ff ff       	call   c0001a4a <ld_word>
c00027a3:	66 48                	dec    ax
c00027a5:	75 6b                	jne    c0002812 <mount_volume+0x338>
c00027a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027af:	83 c2 01             	add    edx,0x1
c00027b2:	89 e8                	mov    eax,ebp
c00027b4:	83 d1 00             	adc    ecx,0x0
c00027b7:	e8 6c fa ff ff       	call   c0002228 <move_window>
c00027bc:	85 c0                	test   eax,eax
c00027be:	75 52                	jne    c0002812 <mount_volume+0x338>
c00027c0:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c4:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027ca:	e8 7b f2 ff ff       	call   c0001a4a <ld_word>
c00027cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d3:	75 3d                	jne    c0002812 <mount_volume+0x338>
c00027d5:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d8:	e8 7a f2 ff ff       	call   c0001a57 <ld_dword>
c00027dd:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e2:	75 2e                	jne    c0002812 <mount_volume+0x338>
c00027e4:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027ea:	e8 68 f2 ff ff       	call   c0001a57 <ld_dword>
c00027ef:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f4:	75 1c                	jne    c0002812 <mount_volume+0x338>
c00027f6:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fc:	e8 56 f2 ff ff       	call   c0001a57 <ld_dword>
c0002801:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002804:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280a:	e8 48 f2 ff ff       	call   c0001a57 <ld_dword>
c000280f:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002812:	66 a1 00 cd 02 c0    	mov    ax,ds:0xc002cd00
c0002818:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000281b:	40                   	inc    eax
c000281c:	31 db                	xor    ebx,ebx
c000281e:	66 a3 00 cd 02 c0    	mov    ds:0xc002cd00,ax
c0002824:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002828:	e9 0c 02 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000282d:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002833:	e8 12 f2 ff ff       	call   c0001a4a <ld_word>
c0002838:	66 3d 00 01          	cmp    ax,0x100
c000283c:	0f 85 60 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002842:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002849:	0f 85 53 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000284f:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002855:	e8 15 f2 ff ff       	call   c0001a6f <ld_qword>
c000285a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002862:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002868:	e8 ea f1 ff ff       	call   c0001a57 <ld_dword>
c000286d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002870:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002876:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002879:	fe c8                	dec    al
c000287b:	0f 85 21 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002881:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002888:	bb 01 00 00 00       	mov    ebx,0x1
c000288d:	d3 e3                	shl    ebx,cl
c000288f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002893:	66 85 db             	test   bx,bx
c0002896:	0f 84 06 fd ff ff    	je     c00025a2 <mount_volume+0xc8>
c000289c:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a2:	e8 b0 f1 ff ff       	call   c0001a57 <ld_dword>
c00028a7:	89 c6                	mov    esi,eax
c00028a9:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028ae:	0f 87 ee fc ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00028b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b8:	8d 40 02             	lea    eax,[eax+0x2]
c00028bb:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028be:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c5:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c8:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028ce:	e8 84 f1 ff ff       	call   c0001a57 <ld_dword>
c00028d3:	31 d2                	xor    edx,edx
c00028d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f1:	e8 61 f1 ff ff       	call   c0001a57 <ld_dword>
c00028f6:	31 d2                	xor    edx,edx
c00028f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028fc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002900:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002904:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002907:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000290a:	0f b7 c3             	movzx  eax,bx
c000290d:	31 d2                	xor    edx,edx
c000290f:	0f af f0             	imul   esi,eax
c0002912:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002916:	89 f0                	mov    eax,esi
c0002918:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002920:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002924:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002928:	39 c1                	cmp    ecx,eax
c000292a:	89 df                	mov    edi,ebx
c000292c:	19 d7                	sbb    edi,edx
c000292e:	0f 82 6e fc ff ff    	jb     c00025a2 <mount_volume+0xc8>
c0002934:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293a:	31 db                	xor    ebx,ebx
c000293c:	e8 16 f1 ff ff       	call   c0001a57 <ld_dword>
c0002941:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002948:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002953:	85 db                	test   ebx,ebx
c0002955:	75 39                	jne    c0002990 <mount_volume+0x4b6>
c0002957:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000295b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000295f:	0f 86 3d fc ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c0002965:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002968:	31 ff                	xor    edi,edi
c000296a:	89 e8                	mov    eax,ebp
c000296c:	e8 72 f3 ff ff       	call   c0001ce3 <clst2sect>
c0002971:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002975:	01 c6                	add    esi,eax
c0002977:	89 e8                	mov    eax,ebp
c0002979:	11 d7                	adc    edi,edx
c000297b:	89 f2                	mov    edx,esi
c000297d:	89 f9                	mov    ecx,edi
c000297f:	e8 a4 f8 ff ff       	call   c0002228 <move_window>
c0002984:	85 c0                	test   eax,eax
c0002986:	0f 85 07 fc ff ff    	jne    c0002593 <mount_volume+0xb9>
c000298c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002990:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002995:	74 0b                	je     c00029a2 <mount_volume+0x4c8>
c0002997:	83 c3 20             	add    ebx,0x20
c000299a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a0:	eb b1                	jmp    c0002953 <mount_volume+0x479>
c00029a2:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a5:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029a9:	e8 a9 f0 ff ff       	call   c0001a57 <ld_dword>
c00029ae:	89 c3                	mov    ebx,eax
c00029b0:	83 f8 01             	cmp    eax,0x1
c00029b3:	0f 86 e9 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029b9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029bc:	0f 86 e0 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029c2:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c5:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029c9:	0f af c2             	imul   eax,edx
c00029cc:	31 d2                	xor    edx,edx
c00029ce:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d1:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d4:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d7:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029da:	31 c9                	xor    ecx,ecx
c00029dc:	89 da                	mov    edx,ebx
c00029de:	89 e8                	mov    eax,ebp
c00029e0:	c1 ea 07             	shr    edx,0x7
c00029e3:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e6:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029e9:	e8 3a f8 ff ff       	call   c0002228 <move_window>
c00029ee:	85 c0                	test   eax,eax
c00029f0:	0f 85 9d fb ff ff    	jne    c0002593 <mount_volume+0xb9>
c00029f6:	89 d8                	mov    eax,ebx
c00029f8:	83 e0 7f             	and    eax,0x7f
c00029fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00029fe:	e8 54 f0 ff ff       	call   c0001a57 <ld_dword>
c0002a03:	83 f8 ff             	cmp    eax,0xffffffff
c0002a06:	74 0a                	je     c0002a12 <mount_volume+0x538>
c0002a08:	43                   	inc    ebx
c0002a09:	39 d8                	cmp    eax,ebx
c0002a0b:	74 cd                	je     c00029da <mount_volume+0x500>
c0002a0d:	e9 90 fb ff ff       	jmp    c00025a2 <mount_volume+0xc8>
c0002a12:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a19:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a20:	bb 04 00 00 00       	mov    ebx,0x4
c0002a25:	e9 e8 fd ff ff       	jmp    c0002812 <mount_volume+0x338>
c0002a2a:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a2f:	19 db                	sbb    ebx,ebx
c0002a31:	83 c3 02             	add    ebx,0x2
c0002a34:	e9 93 fc ff ff       	jmp    c00026cc <mount_volume+0x1f2>
c0002a39:	83 c4 3c             	add    esp,0x3c
c0002a3c:	89 d8                	mov    eax,ebx
c0002a3e:	5b                   	pop    ebx
c0002a3f:	5e                   	pop    esi
c0002a40:	5f                   	pop    edi
c0002a41:	5d                   	pop    ebp
c0002a42:	c3                   	ret    

c0002a43 <find_bitmap>:
c0002a43:	55                   	push   ebp
c0002a44:	57                   	push   edi
c0002a45:	89 c7                	mov    edi,eax
c0002a47:	56                   	push   esi
c0002a48:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a4b:	53                   	push   ebx
c0002a4c:	83 ec 1c             	sub    esp,0x1c
c0002a4f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a52:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a56:	83 e8 02             	sub    eax,0x2
c0002a59:	39 f0                	cmp    eax,esi
c0002a5b:	77 02                	ja     c0002a5f <find_bitmap+0x1c>
c0002a5d:	31 f6                	xor    esi,esi
c0002a5f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a63:	89 f3                	mov    ebx,esi
c0002a65:	31 ed                	xor    ebp,ebp
c0002a67:	31 c9                	xor    ecx,ecx
c0002a69:	89 da                	mov    edx,ebx
c0002a6b:	89 f8                	mov    eax,edi
c0002a6d:	c1 ea 0c             	shr    edx,0xc
c0002a70:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a73:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a76:	e8 ad f7 ff ff       	call   c0002228 <move_window>
c0002a7b:	85 c0                	test   eax,eax
c0002a7d:	75 68                	jne    c0002ae7 <find_bitmap+0xa4>
c0002a7f:	89 da                	mov    edx,ebx
c0002a81:	89 d9                	mov    ecx,ebx
c0002a83:	c1 ea 03             	shr    edx,0x3
c0002a86:	83 e1 07             	and    ecx,0x7
c0002a89:	b8 01 00 00 00       	mov    eax,0x1
c0002a8e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a94:	d3 e0                	shl    eax,cl
c0002a96:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a99:	83 e9 02             	sub    ecx,0x2
c0002a9c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa0:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa4:	43                   	inc    ebx
c0002aa5:	21 c1                	and    ecx,eax
c0002aa7:	d1 e0                	shl    eax,1
c0002aa9:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aad:	77 09                	ja     c0002ab8 <find_bitmap+0x75>
c0002aaf:	31 db                	xor    ebx,ebx
c0002ab1:	ba 00 02 00 00       	mov    edx,0x200
c0002ab6:	31 c0                	xor    eax,eax
c0002ab8:	84 c9                	test   cl,cl
c0002aba:	75 10                	jne    c0002acc <find_bitmap+0x89>
c0002abc:	45                   	inc    ebp
c0002abd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac1:	75 0f                	jne    c0002ad2 <find_bitmap+0x8f>
c0002ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac7:	83 c0 02             	add    eax,0x2
c0002aca:	eb 22                	jmp    c0002aee <find_bitmap+0xab>
c0002acc:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad0:	31 ed                	xor    ebp,ebp
c0002ad2:	39 de                	cmp    esi,ebx
c0002ad4:	74 16                	je     c0002aec <find_bitmap+0xa9>
c0002ad6:	84 c0                	test   al,al
c0002ad8:	75 c6                	jne    c0002aa0 <find_bitmap+0x5d>
c0002ada:	42                   	inc    edx
c0002adb:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae1:	77 84                	ja     c0002a67 <find_bitmap+0x24>
c0002ae3:	b0 01                	mov    al,0x1
c0002ae5:	eb b9                	jmp    c0002aa0 <find_bitmap+0x5d>
c0002ae7:	83 c8 ff             	or     eax,0xffffffff
c0002aea:	eb 02                	jmp    c0002aee <find_bitmap+0xab>
c0002aec:	31 c0                	xor    eax,eax
c0002aee:	83 c4 1c             	add    esp,0x1c
c0002af1:	5b                   	pop    ebx
c0002af2:	5e                   	pop    esi
c0002af3:	5f                   	pop    edi
c0002af4:	5d                   	pop    ebp
c0002af5:	c3                   	ret    

c0002af6 <change_bitmap>:
c0002af6:	55                   	push   ebp
c0002af7:	89 cd                	mov    ebp,ecx
c0002af9:	57                   	push   edi
c0002afa:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afd:	56                   	push   esi
c0002afe:	89 c7                	mov    edi,eax
c0002b00:	53                   	push   ebx
c0002b01:	89 c8                	mov    eax,ecx
c0002b03:	83 ec 1c             	sub    esp,0x1c
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	89 ce                	mov    esi,ecx
c0002b0a:	c1 e8 0c             	shr    eax,0xc
c0002b0d:	bb 01 00 00 00       	mov    ebx,0x1
c0002b12:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b15:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b18:	c1 ee 03             	shr    esi,0x3
c0002b1b:	83 e1 07             	and    ecx,0x7
c0002b1e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b24:	d3 e3                	shl    ebx,cl
c0002b26:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b2a:	89 c1                	mov    ecx,eax
c0002b2c:	89 d3                	mov    ebx,edx
c0002b2e:	83 c1 01             	add    ecx,0x1
c0002b31:	83 d3 00             	adc    ebx,0x0
c0002b34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b38:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3c:	89 d1                	mov    ecx,edx
c0002b3e:	89 c2                	mov    edx,eax
c0002b40:	89 f8                	mov    eax,edi
c0002b42:	e8 e1 f6 ff ff       	call   c0002228 <move_window>
c0002b47:	89 c1                	mov    ecx,eax
c0002b49:	85 c0                	test   eax,eax
c0002b4b:	75 48                	jne    c0002b95 <change_bitmap+0x9f>
c0002b4d:	31 d2                	xor    edx,edx
c0002b4f:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b53:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b57:	0f 95 c2             	setne  dl
c0002b5a:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5e:	74 3c                	je     c0002b9c <change_bitmap+0xa6>
c0002b60:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b64:	4d                   	dec    ebp
c0002b65:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b69:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6d:	74 32                	je     c0002ba1 <change_bitmap+0xab>
c0002b6f:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b73:	75 d8                	jne    c0002b4d <change_bitmap+0x57>
c0002b75:	8d 46 01             	lea    eax,[esi+0x1]
c0002b78:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7d:	89 c3                	mov    ebx,eax
c0002b7f:	31 f6                	xor    esi,esi
c0002b81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b89:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b8f:	74 99                	je     c0002b2a <change_bitmap+0x34>
c0002b91:	89 de                	mov    esi,ebx
c0002b93:	eb b8                	jmp    c0002b4d <change_bitmap+0x57>
c0002b95:	b9 01 00 00 00       	mov    ecx,0x1
c0002b9a:	eb 05                	jmp    c0002ba1 <change_bitmap+0xab>
c0002b9c:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba1:	83 c4 1c             	add    esp,0x1c
c0002ba4:	89 c8                	mov    eax,ecx
c0002ba6:	5b                   	pop    ebx
c0002ba7:	5e                   	pop    esi
c0002ba8:	5f                   	pop    edi
c0002ba9:	5d                   	pop    ebp
c0002baa:	c3                   	ret    

c0002bab <put_fat>:
c0002bab:	83 fa 01             	cmp    edx,0x1
c0002bae:	0f 86 7b 01 00 00    	jbe    c0002d2f <put_fat+0x184>
c0002bb4:	55                   	push   ebp
c0002bb5:	57                   	push   edi
c0002bb6:	89 cf                	mov    edi,ecx
c0002bb8:	56                   	push   esi
c0002bb9:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbe:	53                   	push   ebx
c0002bbf:	89 c6                	mov    esi,eax
c0002bc1:	83 ec 1c             	sub    esp,0x1c
c0002bc4:	89 d3                	mov    ebx,edx
c0002bc6:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bc9:	0f 86 68 01 00 00    	jbe    c0002d37 <put_fat+0x18c>
c0002bcf:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd1:	3c 02                	cmp    al,0x2
c0002bd3:	0f 84 c7 00 00 00    	je     c0002ca0 <put_fat+0xf5>
c0002bd9:	77 09                	ja     c0002be4 <put_fat+0x39>
c0002bdb:	fe c8                	dec    al
c0002bdd:	74 17                	je     c0002bf6 <put_fat+0x4b>
c0002bdf:	e9 53 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002be4:	b9 02 00 00 00       	mov    ecx,0x2
c0002be9:	3c 04                	cmp    al,0x4
c0002beb:	0f 86 e1 00 00 00    	jbe    c0002cd2 <put_fat+0x127>
c0002bf1:	e9 41 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002bf6:	89 d5                	mov    ebp,edx
c0002bf8:	31 c9                	xor    ecx,ecx
c0002bfa:	d1 ed                	shr    ebp,1
c0002bfc:	89 f0                	mov    eax,esi
c0002bfe:	01 d5                	add    ebp,edx
c0002c00:	89 ea                	mov    edx,ebp
c0002c02:	c1 ea 09             	shr    edx,0x9
c0002c05:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c08:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c0b:	e8 18 f6 ff ff       	call   c0002228 <move_window>
c0002c10:	89 c1                	mov    ecx,eax
c0002c12:	85 c0                	test   eax,eax
c0002c14:	0f 85 1d 01 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c1a:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c21:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c24:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c32:	89 f8                	mov    eax,edi
c0002c34:	83 e3 01             	and    ebx,0x1
c0002c37:	74 0d                	je     c0002c46 <put_fat+0x9b>
c0002c39:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3c:	89 fa                	mov    edx,edi
c0002c3e:	83 e0 0f             	and    eax,0xf
c0002c41:	c1 e2 04             	shl    edx,0x4
c0002c44:	09 d0                	or     eax,edx
c0002c46:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4d:	31 c9                	xor    ecx,ecx
c0002c4f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c53:	c1 ea 09             	shr    edx,0x9
c0002c56:	89 f0                	mov    eax,esi
c0002c58:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c5b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5e:	e8 c5 f5 ff ff       	call   c0002228 <move_window>
c0002c63:	89 c1                	mov    ecx,eax
c0002c65:	85 c0                	test   eax,eax
c0002c67:	0f 85 ca 00 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c6d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c71:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c77:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c7b:	85 db                	test   ebx,ebx
c0002c7d:	74 07                	je     c0002c86 <put_fat+0xdb>
c0002c7f:	c1 ef 04             	shr    edi,0x4
c0002c82:	89 fa                	mov    edx,edi
c0002c84:	eb 0e                	jmp    c0002c94 <put_fat+0xe9>
c0002c86:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c89:	c1 ef 08             	shr    edi,0x8
c0002c8c:	83 e2 f0             	and    edx,0xfffffff0
c0002c8f:	83 e7 0f             	and    edi,0xf
c0002c92:	09 fa                	or     edx,edi
c0002c94:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c97:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c9b:	e9 97 00 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002ca0:	31 c9                	xor    ecx,ecx
c0002ca2:	c1 ea 08             	shr    edx,0x8
c0002ca5:	89 f0                	mov    eax,esi
c0002ca7:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002caa:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cad:	e8 76 f5 ff ff       	call   c0002228 <move_window>
c0002cb2:	89 c1                	mov    ecx,eax
c0002cb4:	85 c0                	test   eax,eax
c0002cb6:	75 7f                	jne    c0002d37 <put_fat+0x18c>
c0002cb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbc:	01 db                	add    ebx,ebx
c0002cbe:	0f b7 d7             	movzx  edx,di
c0002cc1:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc7:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ccb:	e8 ec ed ff ff       	call   c0001abc <st_word>
c0002cd0:	eb 53                	jmp    c0002d25 <put_fat+0x17a>
c0002cd2:	31 c9                	xor    ecx,ecx
c0002cd4:	c1 ea 07             	shr    edx,0x7
c0002cd7:	89 f0                	mov    eax,esi
c0002cd9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cdc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cdf:	e8 44 f5 ff ff       	call   c0002228 <move_window>
c0002ce4:	89 c1                	mov    ecx,eax
c0002ce6:	85 c0                	test   eax,eax
c0002ce8:	75 4d                	jne    c0002d37 <put_fat+0x18c>
c0002cea:	c1 e3 02             	shl    ebx,0x2
c0002ced:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf3:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf6:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cfa:	74 1c                	je     c0002d18 <put_fat+0x16d>
c0002cfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d00:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d06:	89 d8                	mov    eax,ebx
c0002d08:	e8 4a ed ff ff       	call   c0001a57 <ld_dword>
c0002d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d11:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d16:	09 c7                	or     edi,eax
c0002d18:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d1c:	89 fa                	mov    edx,edi
c0002d1e:	89 d8                	mov    eax,ebx
c0002d20:	e8 9b ed ff ff       	call   c0001ac0 <st_dword>
c0002d25:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2d:	eb 08                	jmp    c0002d37 <put_fat+0x18c>
c0002d2f:	b9 02 00 00 00       	mov    ecx,0x2
c0002d34:	89 c8                	mov    eax,ecx
c0002d36:	c3                   	ret    
c0002d37:	83 c4 1c             	add    esp,0x1c
c0002d3a:	89 c8                	mov    eax,ecx
c0002d3c:	5b                   	pop    ebx
c0002d3d:	5e                   	pop    esi
c0002d3e:	5f                   	pop    edi
c0002d3f:	5d                   	pop    ebp
c0002d40:	c3                   	ret    

c0002d41 <fill_last_frag>:
c0002d41:	57                   	push   edi
c0002d42:	89 cf                	mov    edi,ecx
c0002d44:	56                   	push   esi
c0002d45:	89 d6                	mov    esi,edx
c0002d47:	53                   	push   ebx
c0002d48:	89 c3                	mov    ebx,eax
c0002d4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 21                	je     c0002d72 <fill_last_frag+0x31>
c0002d51:	89 f9                	mov    ecx,edi
c0002d53:	83 f8 01             	cmp    eax,0x1
c0002d56:	76 05                	jbe    c0002d5d <fill_last_frag+0x1c>
c0002d58:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d5b:	29 c1                	sub    ecx,eax
c0002d5d:	8d 56 01             	lea    edx,[esi+0x1]
c0002d60:	29 c2                	sub    edx,eax
c0002d62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d64:	e8 42 fe ff ff       	call   c0002bab <put_fat>
c0002d69:	85 c0                	test   eax,eax
c0002d6b:	75 05                	jne    c0002d72 <fill_last_frag+0x31>
c0002d6d:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d70:	eb d8                	jmp    c0002d4a <fill_last_frag+0x9>
c0002d72:	5b                   	pop    ebx
c0002d73:	5e                   	pop    esi
c0002d74:	5f                   	pop    edi
c0002d75:	c3                   	ret    

c0002d76 <fill_first_frag>:
c0002d76:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d7a:	75 2d                	jne    c0002da9 <fill_first_frag+0x33>
c0002d7c:	57                   	push   edi
c0002d7d:	56                   	push   esi
c0002d7e:	53                   	push   ebx
c0002d7f:	89 c3                	mov    ebx,eax
c0002d81:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d84:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d87:	01 d7                	add    edi,edx
c0002d89:	39 fa                	cmp    edx,edi
c0002d8b:	74 14                	je     c0002da1 <fill_first_frag+0x2b>
c0002d8d:	8d 72 01             	lea    esi,[edx+0x1]
c0002d90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d92:	89 f1                	mov    ecx,esi
c0002d94:	e8 12 fe ff ff       	call   c0002bab <put_fat>
c0002d99:	89 f2                	mov    edx,esi
c0002d9b:	85 c0                	test   eax,eax
c0002d9d:	74 ea                	je     c0002d89 <fill_first_frag+0x13>
c0002d9f:	eb 0b                	jmp    c0002dac <fill_first_frag+0x36>
c0002da1:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da5:	31 c0                	xor    eax,eax
c0002da7:	eb 03                	jmp    c0002dac <fill_first_frag+0x36>
c0002da9:	31 c0                	xor    eax,eax
c0002dab:	c3                   	ret    
c0002dac:	5b                   	pop    ebx
c0002dad:	5e                   	pop    esi
c0002dae:	5f                   	pop    edi
c0002daf:	c3                   	ret    

c0002db0 <get_fat>:
c0002db0:	83 fa 01             	cmp    edx,0x1
c0002db3:	0f 86 db 01 00 00    	jbe    c0002f94 <get_fat+0x1e4>
c0002db9:	55                   	push   ebp
c0002dba:	b9 01 00 00 00       	mov    ecx,0x1
c0002dbf:	57                   	push   edi
c0002dc0:	56                   	push   esi
c0002dc1:	53                   	push   ebx
c0002dc2:	83 ec 1c             	sub    esp,0x1c
c0002dc5:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc7:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dca:	0f 86 cc 01 00 00    	jbe    c0002f9c <get_fat+0x1ec>
c0002dd0:	89 c3                	mov    ebx,eax
c0002dd2:	89 d6                	mov    esi,edx
c0002dd4:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd6:	3c 02                	cmp    al,0x2
c0002dd8:	0f 84 99 00 00 00    	je     c0002e77 <get_fat+0xc7>
c0002dde:	77 09                	ja     c0002de9 <get_fat+0x39>
c0002de0:	fe c8                	dec    al
c0002de2:	74 1a                	je     c0002dfe <get_fat+0x4e>
c0002de4:	e9 b3 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002de9:	3c 03                	cmp    al,0x3
c0002deb:	0f 84 b5 00 00 00    	je     c0002ea6 <get_fat+0xf6>
c0002df1:	3c 04                	cmp    al,0x4
c0002df3:	0f 84 e3 00 00 00    	je     c0002edc <get_fat+0x12c>
c0002df9:	e9 9e 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002dfe:	89 d3                	mov    ebx,edx
c0002e00:	31 c9                	xor    ecx,ecx
c0002e02:	d1 eb                	shr    ebx,1
c0002e04:	89 f8                	mov    eax,edi
c0002e06:	01 d3                	add    ebx,edx
c0002e08:	89 da                	mov    edx,ebx
c0002e0a:	c1 ea 09             	shr    edx,0x9
c0002e0d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e10:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e13:	e8 10 f4 ff ff       	call   c0002228 <move_window>
c0002e18:	85 c0                	test   eax,eax
c0002e1a:	74 08                	je     c0002e24 <get_fat+0x74>
c0002e1c:	83 c9 ff             	or     ecx,0xffffffff
c0002e1f:	e9 78 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e27:	31 c9                	xor    ecx,ecx
c0002e29:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e2f:	89 ea                	mov    edx,ebp
c0002e31:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e35:	c1 ea 09             	shr    edx,0x9
c0002e38:	89 f8                	mov    eax,edi
c0002e3a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e40:	e8 e3 f3 ff ff       	call   c0002228 <move_window>
c0002e45:	85 c0                	test   eax,eax
c0002e47:	75 d3                	jne    c0002e1c <get_fat+0x6c>
c0002e49:	0f b6 c3             	movzx  eax,bl
c0002e4c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e52:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e57:	c1 e3 08             	shl    ebx,0x8
c0002e5a:	09 c3                	or     ebx,eax
c0002e5c:	89 d9                	mov    ecx,ebx
c0002e5e:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e64:	83 e6 01             	and    esi,0x1
c0002e67:	0f 84 2f 01 00 00    	je     c0002f9c <get_fat+0x1ec>
c0002e6d:	89 d9                	mov    ecx,ebx
c0002e6f:	c1 e9 04             	shr    ecx,0x4
c0002e72:	e9 25 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e77:	31 c9                	xor    ecx,ecx
c0002e79:	c1 ea 08             	shr    edx,0x8
c0002e7c:	89 f8                	mov    eax,edi
c0002e7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e84:	e8 9f f3 ff ff       	call   c0002228 <move_window>
c0002e89:	85 c0                	test   eax,eax
c0002e8b:	75 8f                	jne    c0002e1c <get_fat+0x6c>
c0002e8d:	01 f6                	add    esi,esi
c0002e8f:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e95:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e99:	e8 ac eb ff ff       	call   c0001a4a <ld_word>
c0002e9e:	0f b7 c8             	movzx  ecx,ax
c0002ea1:	e9 f6 00 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002ea6:	31 c9                	xor    ecx,ecx
c0002ea8:	c1 ea 07             	shr    edx,0x7
c0002eab:	89 f8                	mov    eax,edi
c0002ead:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb3:	e8 70 f3 ff ff       	call   c0002228 <move_window>
c0002eb8:	85 c0                	test   eax,eax
c0002eba:	0f 85 5c ff ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002ec0:	c1 e6 02             	shl    esi,0x2
c0002ec3:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ecd:	e8 85 eb ff ff       	call   c0001a57 <ld_dword>
c0002ed2:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed7:	e9 b4 00 00 00       	jmp    c0002f90 <get_fat+0x1e0>
c0002edc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002edf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee2:	89 d1                	mov    ecx,edx
c0002ee4:	09 c1                	or     ecx,eax
c0002ee6:	74 06                	je     c0002eee <get_fat+0x13e>
c0002ee8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eec:	75 0f                	jne    c0002efd <get_fat+0x14d>
c0002eee:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef3:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef7:	0f 85 9f 00 00 00    	jne    c0002f9c <get_fat+0x1ec>
c0002efd:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f01:	89 f5                	mov    ebp,esi
c0002f03:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f08:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f0b:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0e:	80 f9 02             	cmp    cl,0x2
c0002f11:	75 35                	jne    c0002f48 <get_fat+0x198>
c0002f13:	83 c0 ff             	add    eax,0xffffffff
c0002f16:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f1b:	83 d2 ff             	adc    edx,0xffffffff
c0002f1e:	31 db                	xor    ebx,ebx
c0002f20:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f24:	53                   	push   ebx
c0002f25:	c1 ea 09             	shr    edx,0x9
c0002f28:	51                   	push   ecx
c0002f29:	52                   	push   edx
c0002f2a:	50                   	push   eax
c0002f2b:	e8 ac 27 02 00       	call   c00256dc <__udivdi3>
c0002f30:	83 c4 10             	add    esp,0x10
c0002f33:	b9 01 00 00 00       	mov    ecx,0x1
c0002f38:	39 c5                	cmp    ebp,eax
c0002f3a:	77 60                	ja     c0002f9c <get_fat+0x1ec>
c0002f3c:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f41:	74 59                	je     c0002f9c <get_fat+0x1ec>
c0002f43:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f46:	eb 54                	jmp    c0002f9c <get_fat+0x1ec>
c0002f48:	80 f9 03             	cmp    cl,0x3
c0002f4b:	75 05                	jne    c0002f52 <get_fat+0x1a2>
c0002f4d:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f50:	77 f1                	ja     c0002f43 <get_fat+0x193>
c0002f52:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f57:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f5b:	75 3f                	jne    c0002f9c <get_fat+0x1ec>
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	89 f2                	mov    edx,esi
c0002f61:	89 f8                	mov    eax,edi
c0002f63:	c1 ea 07             	shr    edx,0x7
c0002f66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6c:	e8 b7 f2 ff ff       	call   c0002228 <move_window>
c0002f71:	85 c0                	test   eax,eax
c0002f73:	0f 85 a3 fe ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002f79:	c1 e6 02             	shl    esi,0x2
c0002f7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f86:	e8 cc ea ff ff       	call   c0001a57 <ld_dword>
c0002f8b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f90:	89 c1                	mov    ecx,eax
c0002f92:	eb 08                	jmp    c0002f9c <get_fat+0x1ec>
c0002f94:	b9 01 00 00 00       	mov    ecx,0x1
c0002f99:	89 c8                	mov    eax,ecx
c0002f9b:	c3                   	ret    
c0002f9c:	83 c4 1c             	add    esp,0x1c
c0002f9f:	89 c8                	mov    eax,ecx
c0002fa1:	5b                   	pop    ebx
c0002fa2:	5e                   	pop    esi
c0002fa3:	5f                   	pop    edi
c0002fa4:	5d                   	pop    ebp
c0002fa5:	c3                   	ret    

c0002fa6 <dir_sdi>:
c0002fa6:	55                   	push   ebp
c0002fa7:	57                   	push   edi
c0002fa8:	56                   	push   esi
c0002fa9:	53                   	push   ebx
c0002faa:	89 c3                	mov    ebx,eax
c0002fac:	83 ec 1c             	sub    esp,0x1c
c0002faf:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb1:	31 c0                	xor    eax,eax
c0002fb3:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb6:	0f 94 c0             	sete   al
c0002fb9:	48                   	dec    eax
c0002fba:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fbf:	05 00 00 00 10       	add    eax,0x10000000
c0002fc4:	39 d0                	cmp    eax,edx
c0002fc6:	77 0a                	ja     c0002fd2 <dir_sdi+0x2c>
c0002fc8:	b8 02 00 00 00       	mov    eax,0x2
c0002fcd:	e9 c4 00 00 00       	jmp    c0003096 <dir_sdi+0xf0>
c0002fd2:	89 d6                	mov    esi,edx
c0002fd4:	f6 c2 1f             	test   dl,0x1f
c0002fd7:	75 ef                	jne    c0002fc8 <dir_sdi+0x22>
c0002fd9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fdc:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fdf:	85 c9                	test   ecx,ecx
c0002fe1:	75 2d                	jne    c0003010 <dir_sdi+0x6a>
c0002fe3:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe6:	77 1b                	ja     c0003003 <dir_sdi+0x5d>
c0002fe8:	89 f2                	mov    edx,esi
c0002fea:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fee:	c1 ea 05             	shr    edx,0x5
c0002ff1:	39 c2                	cmp    edx,eax
c0002ff3:	73 d3                	jae    c0002fc8 <dir_sdi+0x22>
c0002ff5:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff8:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ffb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ffe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003001:	eb 4b                	jmp    c000304e <dir_sdi+0xa8>
c0003003:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003006:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000300a:	85 c0                	test   eax,eax
c000300c:	74 da                	je     c0002fe8 <dir_sdi+0x42>
c000300e:	89 c1                	mov    ecx,eax
c0003010:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003014:	c1 e5 09             	shl    ebp,0x9
c0003017:	89 ca                	mov    edx,ecx
c0003019:	39 ee                	cmp    esi,ebp
c000301b:	72 1c                	jb     c0003039 <dir_sdi+0x93>
c000301d:	89 d8                	mov    eax,ebx
c000301f:	e8 8c fd ff ff       	call   c0002db0 <get_fat>
c0003024:	89 c1                	mov    ecx,eax
c0003026:	83 f8 ff             	cmp    eax,0xffffffff
c0003029:	74 66                	je     c0003091 <dir_sdi+0xeb>
c000302b:	83 f8 01             	cmp    eax,0x1
c000302e:	76 98                	jbe    c0002fc8 <dir_sdi+0x22>
c0003030:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003033:	76 93                	jbe    c0002fc8 <dir_sdi+0x22>
c0003035:	29 ee                	sub    esi,ebp
c0003037:	eb de                	jmp    c0003017 <dir_sdi+0x71>
c0003039:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000303d:	89 f8                	mov    eax,edi
c000303f:	e8 9f ec ff ff       	call   c0001ce3 <clst2sect>
c0003044:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003048:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000304b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003051:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003054:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003057:	89 d1                	mov    ecx,edx
c0003059:	09 c1                	or     ecx,eax
c000305b:	0f 84 67 ff ff ff    	je     c0002fc8 <dir_sdi+0x22>
c0003061:	89 f1                	mov    ecx,esi
c0003063:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000306b:	c1 e9 09             	shr    ecx,0x9
c000306e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003072:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003076:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000307a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003083:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003086:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308d:	31 c0                	xor    eax,eax
c000308f:	eb 05                	jmp    c0003096 <dir_sdi+0xf0>
c0003091:	b8 01 00 00 00       	mov    eax,0x1
c0003096:	83 c4 1c             	add    esp,0x1c
c0003099:	5b                   	pop    ebx
c000309a:	5e                   	pop    esi
c000309b:	5f                   	pop    edi
c000309c:	5d                   	pop    ebp
c000309d:	c3                   	ret    

c000309e <create_chain>:
c000309e:	55                   	push   ebp
c000309f:	89 c5                	mov    ebp,eax
c00030a1:	57                   	push   edi
c00030a2:	56                   	push   esi
c00030a3:	53                   	push   ebx
c00030a4:	83 ec 1c             	sub    esp,0x1c
c00030a7:	85 d2                	test   edx,edx
c00030a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00030af:	75 0e                	jne    c00030bf <create_chain+0x21>
c00030b1:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b4:	85 ff                	test   edi,edi
c00030b6:	74 39                	je     c00030f1 <create_chain+0x53>
c00030b8:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030bb:	77 39                	ja     c00030f6 <create_chain+0x58>
c00030bd:	eb 32                	jmp    c00030f1 <create_chain+0x53>
c00030bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c3:	e8 e8 fc ff ff       	call   c0002db0 <get_fat>
c00030c8:	89 c3                	mov    ebx,eax
c00030ca:	83 f8 01             	cmp    eax,0x1
c00030cd:	77 0a                	ja     c00030d9 <create_chain+0x3b>
c00030cf:	bb 01 00 00 00       	mov    ebx,0x1
c00030d4:	e9 ba 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c00030d9:	83 f8 ff             	cmp    eax,0xffffffff
c00030dc:	0f 84 62 01 00 00    	je     c0003244 <create_chain+0x1a6>
c00030e2:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e5:	0f 87 a8 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c00030eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030ef:	eb 05                	jmp    c00030f6 <create_chain+0x58>
c00030f1:	bf 01 00 00 00       	mov    edi,0x1
c00030f6:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030fa:	75 07                	jne    c0003103 <create_chain+0x65>
c00030fc:	31 db                	xor    ebx,ebx
c00030fe:	e9 90 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c0003103:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003106:	75 74                	jne    c000317c <create_chain+0xde>
c0003108:	b9 01 00 00 00       	mov    ecx,0x1
c000310d:	89 fa                	mov    edx,edi
c000310f:	89 f0                	mov    eax,esi
c0003111:	e8 2d f9 ff ff       	call   c0002a43 <find_bitmap>
c0003116:	89 c3                	mov    ebx,eax
c0003118:	8d 40 ff             	lea    eax,[eax-0x1]
c000311b:	83 f8 fd             	cmp    eax,0xfffffffd
c000311e:	0f 87 6f 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c0003124:	83 ec 0c             	sub    esp,0xc
c0003127:	b9 01 00 00 00       	mov    ecx,0x1
c000312c:	6a 01                	push   0x1
c000312e:	89 da                	mov    edx,ebx
c0003130:	89 f0                	mov    eax,esi
c0003132:	e8 bf f9 ff ff       	call   c0002af6 <change_bitmap>
c0003137:	83 c4 10             	add    esp,0x10
c000313a:	83 f8 02             	cmp    eax,0x2
c000313d:	74 90                	je     c00030cf <create_chain+0x31>
c000313f:	83 f8 01             	cmp    eax,0x1
c0003142:	0f 84 fc 00 00 00    	je     c0003244 <create_chain+0x1a6>
c0003148:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314d:	75 09                	jne    c0003158 <create_chain+0xba>
c000314f:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003153:	e9 0c 01 00 00       	jmp    c0003264 <create_chain+0x1c6>
c0003158:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315c:	0f 85 e7 00 00 00    	jne    c0003249 <create_chain+0x1ab>
c0003162:	8d 57 01             	lea    edx,[edi+0x1]
c0003165:	39 da                	cmp    edx,ebx
c0003167:	0f 84 f7 00 00 00    	je     c0003264 <create_chain+0x1c6>
c000316d:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003170:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003174:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003177:	e9 cd 00 00 00       	jmp    c0003249 <create_chain+0x1ab>
c000317c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003180:	75 41                	jne    c00031c3 <create_chain+0x125>
c0003182:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003185:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003188:	77 05                	ja     c000318f <create_chain+0xf1>
c000318a:	bb 02 00 00 00       	mov    ebx,0x2
c000318f:	89 da                	mov    edx,ebx
c0003191:	89 e8                	mov    eax,ebp
c0003193:	e8 18 fc ff ff       	call   c0002db0 <get_fat>
c0003198:	83 f8 01             	cmp    eax,0x1
c000319b:	0f 84 2e ff ff ff    	je     c00030cf <create_chain+0x31>
c00031a1:	83 f8 ff             	cmp    eax,0xffffffff
c00031a4:	0f 84 9a 00 00 00    	je     c0003244 <create_chain+0x1a6>
c00031aa:	85 c0                	test   eax,eax
c00031ac:	74 11                	je     c00031bf <create_chain+0x121>
c00031ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b1:	83 f8 01             	cmp    eax,0x1
c00031b4:	76 0d                	jbe    c00031c3 <create_chain+0x125>
c00031b6:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031b9:	76 08                	jbe    c00031c3 <create_chain+0x125>
c00031bb:	89 c7                	mov    edi,eax
c00031bd:	eb 04                	jmp    c00031c3 <create_chain+0x125>
c00031bf:	85 db                	test   ebx,ebx
c00031c1:	75 38                	jne    c00031fb <create_chain+0x15d>
c00031c3:	89 fb                	mov    ebx,edi
c00031c5:	43                   	inc    ebx
c00031c6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031c9:	77 0e                	ja     c00031d9 <create_chain+0x13b>
c00031cb:	83 ff 01             	cmp    edi,0x1
c00031ce:	0f 86 28 ff ff ff    	jbe    c00030fc <create_chain+0x5e>
c00031d4:	bb 02 00 00 00       	mov    ebx,0x2
c00031d9:	89 da                	mov    edx,ebx
c00031db:	89 e8                	mov    eax,ebp
c00031dd:	e8 ce fb ff ff       	call   c0002db0 <get_fat>
c00031e2:	85 c0                	test   eax,eax
c00031e4:	74 15                	je     c00031fb <create_chain+0x15d>
c00031e6:	83 f8 01             	cmp    eax,0x1
c00031e9:	0f 84 e0 fe ff ff    	je     c00030cf <create_chain+0x31>
c00031ef:	40                   	inc    eax
c00031f0:	74 52                	je     c0003244 <create_chain+0x1a6>
c00031f2:	39 fb                	cmp    ebx,edi
c00031f4:	75 cf                	jne    c00031c5 <create_chain+0x127>
c00031f6:	e9 01 ff ff ff       	jmp    c00030fc <create_chain+0x5e>
c00031fb:	83 c9 ff             	or     ecx,0xffffffff
c00031fe:	89 da                	mov    edx,ebx
c0003200:	89 f0                	mov    eax,esi
c0003202:	e8 a4 f9 ff ff       	call   c0002bab <put_fat>
c0003207:	85 c0                	test   eax,eax
c0003209:	75 32                	jne    c000323d <create_chain+0x19f>
c000320b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003210:	74 11                	je     c0003223 <create_chain+0x185>
c0003212:	89 d9                	mov    ecx,ebx
c0003214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 8c f9 ff ff       	call   c0002bab <put_fat>
c000321f:	85 c0                	test   eax,eax
c0003221:	75 1a                	jne    c000323d <create_chain+0x19f>
c0003223:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003226:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003229:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322c:	8d 51 fe             	lea    edx,[ecx-0x2]
c000322f:	39 d0                	cmp    eax,edx
c0003231:	77 04                	ja     c0003237 <create_chain+0x199>
c0003233:	48                   	dec    eax
c0003234:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003237:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323b:	eb 56                	jmp    c0003293 <create_chain+0x1f5>
c000323d:	48                   	dec    eax
c000323e:	0f 85 8b fe ff ff    	jne    c00030cf <create_chain+0x31>
c0003244:	83 cb ff             	or     ebx,0xffffffff
c0003247:	eb 4a                	jmp    c0003293 <create_chain+0x1f5>
c0003249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000324d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003250:	41                   	inc    ecx
c0003251:	39 d9                	cmp    ecx,ebx
c0003253:	75 19                	jne    c000326e <create_chain+0x1d0>
c0003255:	b9 02 00 00 00       	mov    ecx,0x2
c000325a:	85 d2                	test   edx,edx
c000325c:	74 03                	je     c0003261 <create_chain+0x1c3>
c000325e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003261:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003264:	85 c0                	test   eax,eax
c0003266:	0f 85 63 fe ff ff    	jne    c00030cf <create_chain+0x31>
c000326c:	eb b5                	jmp    c0003223 <create_chain+0x185>
c000326e:	85 d2                	test   edx,edx
c0003270:	75 07                	jne    c0003279 <create_chain+0x1db>
c0003272:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003279:	89 d9                	mov    ecx,ebx
c000327b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000327f:	89 e8                	mov    eax,ebp
c0003281:	e8 bb fa ff ff       	call   c0002d41 <fill_last_frag>
c0003286:	85 c0                	test   eax,eax
c0003288:	75 b3                	jne    c000323d <create_chain+0x19f>
c000328a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003291:	eb 90                	jmp    c0003223 <create_chain+0x185>
c0003293:	83 c4 1c             	add    esp,0x1c
c0003296:	89 d8                	mov    eax,ebx
c0003298:	5b                   	pop    ebx
c0003299:	5e                   	pop    esi
c000329a:	5f                   	pop    edi
c000329b:	5d                   	pop    ebp
c000329c:	c3                   	ret    

c000329d <remove_chain>:
c000329d:	55                   	push   ebp
c000329e:	57                   	push   edi
c000329f:	56                   	push   esi
c00032a0:	53                   	push   ebx
c00032a1:	83 ec 1c             	sub    esp,0x1c
c00032a4:	83 fa 01             	cmp    edx,0x1
c00032a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ab:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ad:	77 0a                	ja     c00032b9 <remove_chain+0x1c>
c00032af:	b8 02 00 00 00       	mov    eax,0x2
c00032b4:	e9 24 01 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032b9:	89 d6                	mov    esi,edx
c00032bb:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032be:	76 ef                	jbe    c00032af <remove_chain+0x12>
c00032c0:	89 c7                	mov    edi,eax
c00032c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c7:	75 06                	jne    c00032cf <remove_chain+0x32>
c00032c9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032cd:	eb 54                	jmp    c0003323 <remove_chain+0x86>
c00032cf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d2:	75 06                	jne    c00032da <remove_chain+0x3d>
c00032d4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d8:	74 ef                	je     c00032c9 <remove_chain+0x2c>
c00032da:	83 c9 ff             	or     ecx,0xffffffff
c00032dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e1:	89 d8                	mov    eax,ebx
c00032e3:	e8 c3 f8 ff ff       	call   c0002bab <put_fat>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 dd                	je     c00032c9 <remove_chain+0x2c>
c00032ec:	e9 ec 00 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032f1:	83 f8 01             	cmp    eax,0x1
c00032f4:	74 b9                	je     c00032af <remove_chain+0x12>
c00032f6:	83 f8 ff             	cmp    eax,0xffffffff
c00032f9:	74 6d                	je     c0003368 <remove_chain+0xcb>
c00032fb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fe:	75 6f                	jne    c000336f <remove_chain+0xd2>
c0003300:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003303:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003306:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003309:	39 d0                	cmp    eax,edx
c000330b:	73 08                	jae    c0003315 <remove_chain+0x78>
c000330d:	40                   	inc    eax
c000330e:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003312:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003315:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003318:	39 e9                	cmp    ecx,ebp
c000331a:	75 64                	jne    c0003380 <remove_chain+0xe3>
c000331c:	89 ee                	mov    esi,ebp
c000331e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003321:	76 0f                	jbe    c0003332 <remove_chain+0x95>
c0003323:	89 f2                	mov    edx,esi
c0003325:	89 f8                	mov    eax,edi
c0003327:	e8 84 fa ff ff       	call   c0002db0 <get_fat>
c000332c:	89 c5                	mov    ebp,eax
c000332e:	85 c0                	test   eax,eax
c0003330:	75 bf                	jne    c00032f1 <remove_chain+0x54>
c0003332:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003335:	0f 85 a0 00 00 00    	jne    c00033db <remove_chain+0x13e>
c000333b:	eb 6c                	jmp    c00033a9 <remove_chain+0x10c>
c000333d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003340:	84 c0                	test   al,al
c0003342:	75 7d                	jne    c00033c1 <remove_chain+0x124>
c0003344:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003347:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000334b:	0f 84 86 00 00 00    	je     c00033d7 <remove_chain+0x13a>
c0003351:	89 da                	mov    edx,ebx
c0003353:	89 f8                	mov    eax,edi
c0003355:	e8 56 fa ff ff       	call   c0002db0 <get_fat>
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	0f 86 4c ff ff ff    	jbe    c00032af <remove_chain+0x12>
c0003363:	83 f8 ff             	cmp    eax,0xffffffff
c0003366:	75 4e                	jne    c00033b6 <remove_chain+0x119>
c0003368:	b8 01 00 00 00       	mov    eax,0x1
c000336d:	eb 6e                	jmp    c00033dd <remove_chain+0x140>
c000336f:	31 c9                	xor    ecx,ecx
c0003371:	89 f2                	mov    edx,esi
c0003373:	89 d8                	mov    eax,ebx
c0003375:	e8 31 f8 ff ff       	call   c0002bab <put_fat>
c000337a:	85 c0                	test   eax,eax
c000337c:	74 82                	je     c0003300 <remove_chain+0x63>
c000337e:	eb 5d                	jmp    c00033dd <remove_chain+0x140>
c0003380:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003383:	75 1b                	jne    c00033a0 <remove_chain+0x103>
c0003385:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003389:	89 d8                	mov    eax,ebx
c000338b:	83 ec 0c             	sub    esp,0xc
c000338e:	6a 00                	push   0x0
c0003390:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003394:	e8 5d f7 ff ff       	call   c0002af6 <change_bitmap>
c0003399:	83 c4 10             	add    esp,0x10
c000339c:	85 c0                	test   eax,eax
c000339e:	75 3d                	jne    c00033dd <remove_chain+0x140>
c00033a0:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a4:	e9 73 ff ff ff       	jmp    c000331c <remove_chain+0x7f>
c00033a9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033ae:	75 8d                	jne    c000333d <remove_chain+0xa0>
c00033b0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b4:	eb 25                	jmp    c00033db <remove_chain+0x13e>
c00033b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b9:	89 c3                	mov    ebx,eax
c00033bb:	39 c2                	cmp    edx,eax
c00033bd:	74 88                	je     c0003347 <remove_chain+0xaa>
c00033bf:	eb 1a                	jmp    c00033db <remove_chain+0x13e>
c00033c1:	3c 03                	cmp    al,0x3
c00033c3:	75 16                	jne    c00033db <remove_chain+0x13e>
c00033c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cc:	77 0d                	ja     c00033db <remove_chain+0x13e>
c00033ce:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d5:	72 04                	jb     c00033db <remove_chain+0x13e>
c00033d7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033db:	31 c0                	xor    eax,eax
c00033dd:	83 c4 1c             	add    esp,0x1c
c00033e0:	5b                   	pop    ebx
c00033e1:	5e                   	pop    esi
c00033e2:	5f                   	pop    edi
c00033e3:	5d                   	pop    ebp
c00033e4:	c3                   	ret    

c00033e5 <dir_clear>:
c00033e5:	55                   	push   ebp
c00033e6:	57                   	push   edi
c00033e7:	56                   	push   esi
c00033e8:	89 c6                	mov    esi,eax
c00033ea:	53                   	push   ebx
c00033eb:	83 ec 1c             	sub    esp,0x1c
c00033ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f2:	e8 9d ed ff ff       	call   c0002194 <sync_window>
c00033f7:	85 c0                	test   eax,eax
c00033f9:	0f 85 de 00 00 00    	jne    c00034dd <dir_clear+0xf8>
c00033ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003403:	89 f0                	mov    eax,esi
c0003405:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003408:	e8 d6 e8 ff ff       	call   c0001ce3 <clst2sect>
c000340d:	b9 00 02 00 00       	mov    ecx,0x200
c0003412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003416:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000341a:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341d:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003420:	89 e8                	mov    eax,ebp
c0003422:	31 d2                	xor    edx,edx
c0003424:	e8 b5 e6 ff ff       	call   c0001ade <mem_set>
c0003429:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000342d:	c1 e3 09             	shl    ebx,0x9
c0003430:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003436:	76 1f                	jbe    c0003457 <dir_clear+0x72>
c0003438:	bb 00 80 00 00       	mov    ebx,0x8000
c000343d:	eb 18                	jmp    c0003457 <dir_clear+0x72>
c000343f:	83 ec 0c             	sub    esp,0xc
c0003442:	53                   	push   ebx
c0003443:	e8 35 4e 00 00       	call   c000827d <ff_memalloc>
c0003448:	83 c4 10             	add    esp,0x10
c000344b:	89 c7                	mov    edi,eax
c000344d:	85 c0                	test   eax,eax
c000344f:	0f 85 8f 00 00 00    	jne    c00034e4 <dir_clear+0xff>
c0003455:	d1 eb                	shr    ebx,1
c0003457:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000345d:	77 e0                	ja     c000343f <dir_clear+0x5a>
c000345f:	31 db                	xor    ebx,ebx
c0003461:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003465:	39 d8                	cmp    eax,ebx
c0003467:	76 66                	jbe    c00034cf <dir_clear+0xea>
c0003469:	83 ec 0c             	sub    esp,0xc
c000346c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003470:	6a 01                	push   0x1
c0003472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347a:	55                   	push   ebp
c000347b:	50                   	push   eax
c000347c:	e8 94 e5 ff ff       	call   c0001a15 <disk_write>
c0003481:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003486:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000348b:	83 c4 20             	add    esp,0x20
c000348e:	85 c0                	test   eax,eax
c0003490:	75 3d                	jne    c00034cf <dir_clear+0xea>
c0003492:	43                   	inc    ebx
c0003493:	eb cc                	jmp    c0003461 <dir_clear+0x7c>
c0003495:	83 ec 0c             	sub    esp,0xc
c0003498:	31 d2                	xor    edx,edx
c000349a:	55                   	push   ebp
c000349b:	89 d8                	mov    eax,ebx
c000349d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a5:	52                   	push   edx
c00034a6:	50                   	push   eax
c00034a7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ab:	57                   	push   edi
c00034ac:	50                   	push   eax
c00034ad:	e8 63 e5 ff ff       	call   c0001a15 <disk_write>
c00034b2:	83 c4 20             	add    esp,0x20
c00034b5:	85 c0                	test   eax,eax
c00034b7:	75 0a                	jne    c00034c3 <dir_clear+0xde>
c00034b9:	01 eb                	add    ebx,ebp
c00034bb:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034bf:	39 d8                	cmp    eax,ebx
c00034c1:	77 d2                	ja     c0003495 <dir_clear+0xb0>
c00034c3:	83 ec 0c             	sub    esp,0xc
c00034c6:	57                   	push   edi
c00034c7:	e8 c7 4d 00 00       	call   c0008293 <ff_memfree>
c00034cc:	83 c4 10             	add    esp,0x10
c00034cf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d3:	39 d8                	cmp    eax,ebx
c00034d5:	0f 95 c0             	setne  al
c00034d8:	0f b6 c0             	movzx  eax,al
c00034db:	eb 19                	jmp    c00034f6 <dir_clear+0x111>
c00034dd:	b8 01 00 00 00       	mov    eax,0x1
c00034e2:	eb 12                	jmp    c00034f6 <dir_clear+0x111>
c00034e4:	89 d9                	mov    ecx,ebx
c00034e6:	31 d2                	xor    edx,edx
c00034e8:	c1 eb 09             	shr    ebx,0x9
c00034eb:	e8 ee e5 ff ff       	call   c0001ade <mem_set>
c00034f0:	89 dd                	mov    ebp,ebx
c00034f2:	31 db                	xor    ebx,ebx
c00034f4:	eb c5                	jmp    c00034bb <dir_clear+0xd6>
c00034f6:	83 c4 1c             	add    esp,0x1c
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <dir_next>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	89 c3                	mov    ebx,eax
c0003504:	83 ec 1c             	sub    esp,0x1c
c0003507:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003509:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003510:	8d 78 20             	lea    edi,[eax+0x20]
c0003513:	31 c0                	xor    eax,eax
c0003515:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003519:	0f 94 c0             	sete   al
c000351c:	48                   	dec    eax
c000351d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003522:	05 00 00 00 10       	add    eax,0x10000000
c0003527:	39 f8                	cmp    eax,edi
c0003529:	77 0e                	ja     c0003539 <dir_next+0x3b>
c000352b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003532:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003539:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000353c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000353f:	b8 04 00 00 00       	mov    eax,0x4
c0003544:	89 ce                	mov    esi,ecx
c0003546:	09 d6                	or     esi,edx
c0003548:	0f 84 da 00 00 00    	je     c0003628 <dir_next+0x12a>
c000354e:	89 f8                	mov    eax,edi
c0003550:	25 ff 01 00 00       	and    eax,0x1ff
c0003555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003559:	0f 85 b9 00 00 00    	jne    c0003618 <dir_next+0x11a>
c000355f:	83 c2 01             	add    edx,0x1
c0003562:	83 d1 00             	adc    ecx,0x0
c0003565:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003568:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000356b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356e:	85 d2                	test   edx,edx
c0003570:	75 29                	jne    c000359b <dir_next+0x9d>
c0003572:	89 fa                	mov    edx,edi
c0003574:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003578:	c1 ea 05             	shr    edx,0x5
c000357b:	39 c2                	cmp    edx,eax
c000357d:	0f 82 95 00 00 00    	jb     c0003618 <dir_next+0x11a>
c0003583:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000358a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003591:	b8 04 00 00 00       	mov    eax,0x4
c0003596:	e9 8d 00 00 00       	jmp    c0003628 <dir_next+0x12a>
c000359b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000359f:	89 f9                	mov    ecx,edi
c00035a1:	48                   	dec    eax
c00035a2:	c1 e9 09             	shr    ecx,0x9
c00035a5:	85 c8                	test   eax,ecx
c00035a7:	75 6f                	jne    c0003618 <dir_next+0x11a>
c00035a9:	89 d8                	mov    eax,ebx
c00035ab:	e8 00 f8 ff ff       	call   c0002db0 <get_fat>
c00035b0:	89 c6                	mov    esi,eax
c00035b2:	83 f8 01             	cmp    eax,0x1
c00035b5:	77 07                	ja     c00035be <dir_next+0xc0>
c00035b7:	b8 02 00 00 00       	mov    eax,0x2
c00035bc:	eb 6a                	jmp    c0003628 <dir_next+0x12a>
c00035be:	83 f8 ff             	cmp    eax,0xffffffff
c00035c1:	75 07                	jne    c00035ca <dir_next+0xcc>
c00035c3:	b8 01 00 00 00       	mov    eax,0x1
c00035c8:	eb 5e                	jmp    c0003628 <dir_next+0x12a>
c00035ca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035cd:	77 37                	ja     c0003606 <dir_next+0x108>
c00035cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d4:	74 ad                	je     c0003583 <dir_next+0x85>
c00035d6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d9:	89 d8                	mov    eax,ebx
c00035db:	e8 be fa ff ff       	call   c000309e <create_chain>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	b8 07 00 00 00       	mov    eax,0x7
c00035e7:	85 f6                	test   esi,esi
c00035e9:	74 3d                	je     c0003628 <dir_next+0x12a>
c00035eb:	83 fe 01             	cmp    esi,0x1
c00035ee:	74 c7                	je     c00035b7 <dir_next+0xb9>
c00035f0:	83 fe ff             	cmp    esi,0xffffffff
c00035f3:	74 ce                	je     c00035c3 <dir_next+0xc5>
c00035f5:	89 f2                	mov    edx,esi
c00035f7:	89 e8                	mov    eax,ebp
c00035f9:	e8 e7 fd ff ff       	call   c00033e5 <dir_clear>
c00035fe:	85 c0                	test   eax,eax
c0003600:	75 c1                	jne    c00035c3 <dir_next+0xc5>
c0003602:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003606:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003609:	89 f2                	mov    edx,esi
c000360b:	89 e8                	mov    eax,ebp
c000360d:	e8 d1 e6 ff ff       	call   c0001ce3 <clst2sect>
c0003612:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003615:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000361f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003623:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003626:	31 c0                	xor    eax,eax
c0003628:	83 c4 1c             	add    esp,0x1c
c000362b:	5b                   	pop    ebx
c000362c:	5e                   	pop    esi
c000362d:	5f                   	pop    edi
c000362e:	5d                   	pop    ebp
c000362f:	c3                   	ret    

c0003630 <load_xdir>:
c0003630:	55                   	push   ebp
c0003631:	57                   	push   edi
c0003632:	56                   	push   esi
c0003633:	89 c6                	mov    esi,eax
c0003635:	53                   	push   ebx
c0003636:	83 ec 1c             	sub    esp,0x1c
c0003639:	8b 00                	mov    eax,DWORD PTR [eax]
c000363b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003641:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003644:	e8 df eb ff ff       	call   c0002228 <move_window>
c0003649:	89 c3                	mov    ebx,eax
c000364b:	85 c0                	test   eax,eax
c000364d:	0f 85 0c 01 00 00    	jne    c000375f <load_xdir+0x12f>
c0003653:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003656:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003659:	0f 85 fb 00 00 00    	jne    c000375a <load_xdir+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	b9 20 00 00 00       	mov    ecx,0x20
c0003666:	e8 5e e4 ff ff       	call   c0001ac9 <mem_cpy>
c000366b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000366f:	40                   	inc    eax
c0003670:	c1 e0 05             	shl    eax,0x5
c0003673:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003677:	83 e8 60             	sub    eax,0x60
c000367a:	3d 00 02 00 00       	cmp    eax,0x200
c000367f:	0f 87 d5 00 00 00    	ja     c000375a <load_xdir+0x12a>
c0003685:	31 d2                	xor    edx,edx
c0003687:	89 f0                	mov    eax,esi
c0003689:	e8 70 fe ff ff       	call   c00034fe <dir_next>
c000368e:	89 c3                	mov    ebx,eax
c0003690:	83 f8 04             	cmp    eax,0x4
c0003693:	0f 84 c1 00 00 00    	je     c000375a <load_xdir+0x12a>
c0003699:	85 c0                	test   eax,eax
c000369b:	0f 85 be 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036a1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a9:	e8 7a eb ff ff       	call   c0002228 <move_window>
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	85 c0                	test   eax,eax
c00036b2:	0f 85 a7 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036b8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036bb:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036be:	0f 85 96 00 00 00    	jne    c000375a <load_xdir+0x12a>
c00036c4:	8d 47 20             	lea    eax,[edi+0x20]
c00036c7:	b9 20 00 00 00       	mov    ecx,0x20
c00036cc:	e8 f8 e3 ff ff       	call   c0001ac9 <mem_cpy>
c00036d1:	31 d2                	xor    edx,edx
c00036d3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036dc:	83 c0 2c             	add    eax,0x2c
c00036df:	f7 f1                	div    ecx
c00036e1:	c1 e0 05             	shl    eax,0x5
c00036e4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e8:	77 70                	ja     c000375a <load_xdir+0x12a>
c00036ea:	bd 40 00 00 00       	mov    ebp,0x40
c00036ef:	31 d2                	xor    edx,edx
c00036f1:	89 f0                	mov    eax,esi
c00036f3:	e8 06 fe ff ff       	call   c00034fe <dir_next>
c00036f8:	89 c3                	mov    ebx,eax
c00036fa:	83 f8 04             	cmp    eax,0x4
c00036fd:	74 5b                	je     c000375a <load_xdir+0x12a>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 5c                	jne    c000375f <load_xdir+0x12f>
c0003703:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003706:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003709:	8b 06                	mov    eax,DWORD PTR [esi]
c000370b:	e8 18 eb ff ff       	call   c0002228 <move_window>
c0003710:	89 c3                	mov    ebx,eax
c0003712:	85 c0                	test   eax,eax
c0003714:	75 49                	jne    c000375f <load_xdir+0x12f>
c0003716:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003719:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371c:	75 3c                	jne    c000375a <load_xdir+0x12a>
c000371e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003724:	77 0d                	ja     c0003733 <load_xdir+0x103>
c0003726:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003729:	b9 20 00 00 00       	mov    ecx,0x20
c000372e:	e8 96 e3 ff ff       	call   c0001ac9 <mem_cpy>
c0003733:	83 c5 20             	add    ebp,0x20
c0003736:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000373a:	77 b3                	ja     c00036ef <load_xdir+0xbf>
c000373c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003742:	77 1b                	ja     c000375f <load_xdir+0x12f>
c0003744:	89 f8                	mov    eax,edi
c0003746:	e8 cd e7 ff ff       	call   c0001f18 <xdir_sum>
c000374b:	89 c1                	mov    ecx,eax
c000374d:	8d 47 02             	lea    eax,[edi+0x2]
c0003750:	e8 f5 e2 ff ff       	call   c0001a4a <ld_word>
c0003755:	66 39 c1             	cmp    cx,ax
c0003758:	74 05                	je     c000375f <load_xdir+0x12f>
c000375a:	bb 02 00 00 00       	mov    ebx,0x2
c000375f:	83 c4 1c             	add    esp,0x1c
c0003762:	89 d8                	mov    eax,ebx
c0003764:	5b                   	pop    ebx
c0003765:	5e                   	pop    esi
c0003766:	5f                   	pop    edi
c0003767:	5d                   	pop    ebp
c0003768:	c3                   	ret    

c0003769 <load_obj_xdir>:
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 08             	sub    esp,0x8
c000376f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003771:	89 03                	mov    DWORD PTR [ebx],eax
c0003773:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003776:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003779:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000377f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003782:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003789:	30 c0                	xor    al,al
c000378b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003792:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003795:	89 d8                	mov    eax,ebx
c0003797:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000379a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000379d:	e8 04 f8 ff ff       	call   c0002fa6 <dir_sdi>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	75 0b                	jne    c00037b1 <load_obj_xdir+0x48>
c00037a6:	89 d8                	mov    eax,ebx
c00037a8:	83 c4 08             	add    esp,0x8
c00037ab:	5b                   	pop    ebx
c00037ac:	e9 7f fe ff ff       	jmp    c0003630 <load_xdir>
c00037b1:	83 c4 08             	add    esp,0x8
c00037b4:	5b                   	pop    ebx
c00037b5:	c3                   	ret    

c00037b6 <dir_read>:
c00037b6:	55                   	push   ebp
c00037b7:	bd 04 00 00 00       	mov    ebp,0x4
c00037bc:	57                   	push   edi
c00037bd:	56                   	push   esi
c00037be:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c3:	53                   	push   ebx
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	83 ec 1c             	sub    esp,0x1c
c00037c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037cd:	8b 38                	mov    edi,DWORD PTR [eax]
c00037cf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037da:	89 c8                	mov    eax,ecx
c00037dc:	09 d0                	or     eax,edx
c00037de:	0f 84 25 01 00 00    	je     c0003909 <dir_read+0x153>
c00037e4:	89 f8                	mov    eax,edi
c00037e6:	e8 3d ea ff ff       	call   c0002228 <move_window>
c00037eb:	89 c5                	mov    ebp,eax
c00037ed:	85 c0                	test   eax,eax
c00037ef:	0f 85 23 01 00 00    	jne    c0003918 <dir_read+0x162>
c00037f5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037fa:	84 c9                	test   cl,cl
c00037fc:	0f 84 11 01 00 00    	je     c0003913 <dir_read+0x15d>
c0003802:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003805:	75 48                	jne    c000384f <dir_read+0x99>
c0003807:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380c:	74 10                	je     c000381e <dir_read+0x68>
c000380e:	80 f9 83             	cmp    cl,0x83
c0003811:	0f 85 dd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003817:	31 ed                	xor    ebp,ebp
c0003819:	e9 08 01 00 00       	jmp    c0003926 <dir_read+0x170>
c000381e:	80 f9 85             	cmp    cl,0x85
c0003821:	0f 85 cd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003827:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000382d:	89 d8                	mov    eax,ebx
c000382f:	e8 fc fd ff ff       	call   c0003630 <load_xdir>
c0003834:	89 c5                	mov    ebp,eax
c0003836:	85 c0                	test   eax,eax
c0003838:	0f 85 da 00 00 00    	jne    c0003918 <dir_read+0x162>
c000383e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003841:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003844:	83 e0 3f             	and    eax,0x3f
c0003847:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384a:	e9 d7 00 00 00       	jmp    c0003926 <dir_read+0x170>
c000384f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003852:	83 e0 3f             	and    eax,0x3f
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000385f:	0f 84 8a 00 00 00    	je     c00038ef <dir_read+0x139>
c0003865:	80 f9 e5             	cmp    cl,0xe5
c0003868:	0f 84 81 00 00 00    	je     c00038ef <dir_read+0x139>
c000386e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003872:	83 e0 1f             	and    eax,0x1f
c0003875:	83 f8 08             	cmp    eax,0x8
c0003878:	0f 94 c0             	sete   al
c000387b:	0f b6 c0             	movzx  eax,al
c000387e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003882:	75 6b                	jne    c00038ef <dir_read+0x139>
c0003884:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003889:	75 44                	jne    c00038cf <dir_read+0x119>
c000388b:	f6 c1 40             	test   cl,0x40
c000388e:	74 12                	je     c00038a2 <dir_read+0xec>
c0003890:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003893:	83 e1 bf             	and    ecx,0xffffffbf
c0003896:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000389a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000389d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a0:	eb 06                	jmp    c00038a8 <dir_read+0xf2>
c00038a2:	89 f0                	mov    eax,esi
c00038a4:	38 c8                	cmp    al,cl
c00038a6:	75 47                	jne    c00038ef <dir_read+0x139>
c00038a8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ac:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b4:	75 3e                	jne    c00038f4 <dir_read+0x13e>
c00038b6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ba:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038bd:	e8 8a e4 ff ff       	call   c0001d4c <pick_lfn>
c00038c2:	85 c0                	test   eax,eax
c00038c4:	74 2e                	je     c00038f4 <dir_read+0x13e>
c00038c6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ca:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038cd:	eb 25                	jmp    c00038f4 <dir_read+0x13e>
c00038cf:	89 f0                	mov    eax,esi
c00038d1:	84 c0                	test   al,al
c00038d3:	75 11                	jne    c00038e6 <dir_read+0x130>
c00038d5:	89 d0                	mov    eax,edx
c00038d7:	e8 2a e6 ff ff       	call   c0001f06 <sum_sfn>
c00038dc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e0:	0f 84 31 ff ff ff    	je     c0003817 <dir_read+0x61>
c00038e6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038ed:	eb 37                	jmp    c0003926 <dir_read+0x170>
c00038ef:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f4:	31 d2                	xor    edx,edx
c00038f6:	89 d8                	mov    eax,ebx
c00038f8:	e8 01 fc ff ff       	call   c00034fe <dir_next>
c00038fd:	89 c5                	mov    ebp,eax
c00038ff:	85 c0                	test   eax,eax
c0003901:	0f 84 cd fe ff ff    	je     c00037d4 <dir_read+0x1e>
c0003907:	eb 0f                	jmp    c0003918 <dir_read+0x162>
c0003909:	85 ed                	test   ebp,ebp
c000390b:	0f 84 06 ff ff ff    	je     c0003817 <dir_read+0x61>
c0003911:	eb 05                	jmp    c0003918 <dir_read+0x162>
c0003913:	bd 04 00 00 00       	mov    ebp,0x4
c0003918:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000391f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003926:	83 c4 1c             	add    esp,0x1c
c0003929:	89 e8                	mov    eax,ebp
c000392b:	5b                   	pop    ebx
c000392c:	5e                   	pop    esi
c000392d:	5f                   	pop    edi
c000392e:	5d                   	pop    ebp
c000392f:	c3                   	ret    

c0003930 <dir_alloc>:
c0003930:	55                   	push   ebp
c0003931:	89 d5                	mov    ebp,edx
c0003933:	57                   	push   edi
c0003934:	31 d2                	xor    edx,edx
c0003936:	56                   	push   esi
c0003937:	53                   	push   ebx
c0003938:	89 c3                	mov    ebx,eax
c000393a:	83 ec 0c             	sub    esp,0xc
c000393d:	8b 38                	mov    edi,DWORD PTR [eax]
c000393f:	e8 62 f6 ff ff       	call   c0002fa6 <dir_sdi>
c0003944:	85 c0                	test   eax,eax
c0003946:	75 4e                	jne    c0003996 <dir_alloc+0x66>
c0003948:	31 f6                	xor    esi,esi
c000394a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000394d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003950:	89 f8                	mov    eax,edi
c0003952:	e8 d1 e8 ff ff       	call   c0002228 <move_window>
c0003957:	85 c0                	test   eax,eax
c0003959:	75 3b                	jne    c0003996 <dir_alloc+0x66>
c000395b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000395e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003961:	8a 12                	mov    dl,BYTE PTR [edx]
c0003963:	75 07                	jne    c000396c <dir_alloc+0x3c>
c0003965:	f7 d2                	not    edx
c0003967:	c0 ea 07             	shr    dl,0x7
c000396a:	eb 0d                	jmp    c0003979 <dir_alloc+0x49>
c000396c:	84 d2                	test   dl,dl
c000396e:	0f 94 c1             	sete   cl
c0003971:	80 fa e5             	cmp    dl,0xe5
c0003974:	0f 94 c2             	sete   dl
c0003977:	09 ca                	or     edx,ecx
c0003979:	84 d2                	test   dl,dl
c000397b:	74 07                	je     c0003984 <dir_alloc+0x54>
c000397d:	46                   	inc    esi
c000397e:	39 ee                	cmp    esi,ebp
c0003980:	75 04                	jne    c0003986 <dir_alloc+0x56>
c0003982:	eb 1c                	jmp    c00039a0 <dir_alloc+0x70>
c0003984:	31 f6                	xor    esi,esi
c0003986:	ba 01 00 00 00       	mov    edx,0x1
c000398b:	89 d8                	mov    eax,ebx
c000398d:	e8 6c fb ff ff       	call   c00034fe <dir_next>
c0003992:	85 c0                	test   eax,eax
c0003994:	74 b4                	je     c000394a <dir_alloc+0x1a>
c0003996:	83 f8 04             	cmp    eax,0x4
c0003999:	75 05                	jne    c00039a0 <dir_alloc+0x70>
c000399b:	b8 07 00 00 00       	mov    eax,0x7
c00039a0:	83 c4 0c             	add    esp,0xc
c00039a3:	5b                   	pop    ebx
c00039a4:	5e                   	pop    esi
c00039a5:	5f                   	pop    edi
c00039a6:	5d                   	pop    ebp
c00039a7:	c3                   	ret    

c00039a8 <store_xdir>:
c00039a8:	55                   	push   ebp
c00039a9:	57                   	push   edi
c00039aa:	89 c7                	mov    edi,eax
c00039ac:	56                   	push   esi
c00039ad:	53                   	push   ebx
c00039ae:	83 ec 0c             	sub    esp,0xc
c00039b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b6:	89 e8                	mov    eax,ebp
c00039b8:	e8 5b e5 ff ff       	call   c0001f18 <xdir_sum>
c00039bd:	0f b7 d0             	movzx  edx,ax
c00039c0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c3:	e8 f4 e0 ff ff       	call   c0001abc <st_word>
c00039c8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039cc:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039cf:	89 f8                	mov    eax,edi
c00039d1:	e8 d0 f5 ff ff       	call   c0002fa6 <dir_sdi>
c00039d6:	89 c6                	mov    esi,eax
c00039d8:	85 f6                	test   esi,esi
c00039da:	75 3d                	jne    c0003a19 <store_xdir+0x71>
c00039dc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039df:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e4:	e8 3f e8 ff ff       	call   c0002228 <move_window>
c00039e9:	89 c6                	mov    esi,eax
c00039eb:	85 c0                	test   eax,eax
c00039ed:	75 2a                	jne    c0003a19 <store_xdir+0x71>
c00039ef:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f2:	b9 20 00 00 00       	mov    ecx,0x20
c00039f7:	89 ea                	mov    edx,ebp
c00039f9:	e8 cb e0 ff ff       	call   c0001ac9 <mem_cpy>
c00039fe:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a00:	85 db                	test   ebx,ebx
c0003a02:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a06:	74 11                	je     c0003a19 <store_xdir+0x71>
c0003a08:	31 d2                	xor    edx,edx
c0003a0a:	89 f8                	mov    eax,edi
c0003a0c:	83 c5 20             	add    ebp,0x20
c0003a0f:	e8 ea fa ff ff       	call   c00034fe <dir_next>
c0003a14:	4b                   	dec    ebx
c0003a15:	89 c6                	mov    esi,eax
c0003a17:	eb bf                	jmp    c00039d8 <store_xdir+0x30>
c0003a19:	89 f0                	mov    eax,esi
c0003a1b:	83 fe 02             	cmp    esi,0x2
c0003a1e:	76 05                	jbe    c0003a25 <store_xdir+0x7d>
c0003a20:	b8 02 00 00 00       	mov    eax,0x2
c0003a25:	83 c4 0c             	add    esp,0xc
c0003a28:	5b                   	pop    ebx
c0003a29:	5e                   	pop    esi
c0003a2a:	5f                   	pop    edi
c0003a2b:	5d                   	pop    ebp
c0003a2c:	c3                   	ret    

c0003a2d <dir_remove>:
c0003a2d:	57                   	push   edi
c0003a2e:	56                   	push   esi
c0003a2f:	53                   	push   ebx
c0003a30:	89 c3                	mov    ebx,eax
c0003a32:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a35:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a37:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a3a:	83 fa ff             	cmp    edx,0xffffffff
c0003a3d:	74 09                	je     c0003a48 <dir_remove+0x1b>
c0003a3f:	e8 62 f5 ff ff       	call   c0002fa6 <dir_sdi>
c0003a44:	85 c0                	test   eax,eax
c0003a46:	75 41                	jne    c0003a89 <dir_remove+0x5c>
c0003a48:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a4b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a4e:	89 f0                	mov    eax,esi
c0003a50:	e8 d3 e7 ff ff       	call   c0002228 <move_window>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 26                	jne    c0003a7f <dir_remove+0x52>
c0003a59:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a5f:	75 05                	jne    c0003a66 <dir_remove+0x39>
c0003a61:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a64:	eb 03                	jmp    c0003a69 <dir_remove+0x3c>
c0003a66:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a6d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a70:	73 17                	jae    c0003a89 <dir_remove+0x5c>
c0003a72:	31 d2                	xor    edx,edx
c0003a74:	89 d8                	mov    eax,ebx
c0003a76:	e8 83 fa ff ff       	call   c00034fe <dir_next>
c0003a7b:	85 c0                	test   eax,eax
c0003a7d:	74 c9                	je     c0003a48 <dir_remove+0x1b>
c0003a7f:	83 f8 04             	cmp    eax,0x4
c0003a82:	75 05                	jne    c0003a89 <dir_remove+0x5c>
c0003a84:	b8 02 00 00 00       	mov    eax,0x2
c0003a89:	5b                   	pop    ebx
c0003a8a:	5e                   	pop    esi
c0003a8b:	5f                   	pop    edi
c0003a8c:	c3                   	ret    

c0003a8d <create_name>:
c0003a8d:	55                   	push   ebp
c0003a8e:	89 d5                	mov    ebp,edx
c0003a90:	57                   	push   edi
c0003a91:	89 c7                	mov    edi,eax
c0003a93:	56                   	push   esi
c0003a94:	31 f6                	xor    esi,esi
c0003a96:	53                   	push   ebx
c0003a97:	83 ec 3c             	sub    esp,0x3c
c0003a9a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa0:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aa9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aad:	e8 72 e0 ff ff       	call   c0001b24 <tchar2uni>
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab7:	75 0a                	jne    c0003ac3 <create_name+0x36>
c0003ab9:	b8 06 00 00 00       	mov    eax,0x6
c0003abe:	e9 9e 02 00 00       	jmp    c0003d61 <create_name+0x2d4>
c0003ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac8:	76 0c                	jbe    c0003ad6 <create_name+0x49>
c0003aca:	c1 e8 10             	shr    eax,0x10
c0003acd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ad1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad5:	46                   	inc    esi
c0003ad6:	66 83 fb 1f          	cmp    bx,0x1f
c0003ada:	76 4f                	jbe    c0003b2b <create_name+0x9e>
c0003adc:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae0:	74 35                	je     c0003b17 <create_name+0x8a>
c0003ae2:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae6:	74 2f                	je     c0003b17 <create_name+0x8a>
c0003ae8:	66 83 fb 7f          	cmp    bx,0x7f
c0003aec:	77 11                	ja     c0003aff <create_name+0x72>
c0003aee:	0f b7 d3             	movzx  edx,bx
c0003af1:	b8 52 81 02 c0       	mov    eax,0xc0028152
c0003af6:	e8 11 e0 ff ff       	call   c0001b0c <chk_chr>
c0003afb:	85 c0                	test   eax,eax
c0003afd:	75 ba                	jne    c0003ab9 <create_name+0x2c>
c0003aff:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b05:	77 b2                	ja     c0003ab9 <create_name+0x2c>
c0003b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0b:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b0f:	46                   	inc    esi
c0003b10:	eb 97                	jmp    c0003aa9 <create_name+0x1c>
c0003b12:	40                   	inc    eax
c0003b13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1b:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1d:	80 fa 2f             	cmp    dl,0x2f
c0003b20:	74 f0                	je     c0003b12 <create_name+0x85>
c0003b22:	80 fa 5c             	cmp    dl,0x5c
c0003b25:	74 eb                	je     c0003b12 <create_name+0x85>
c0003b27:	31 db                	xor    ebx,ebx
c0003b29:	eb 02                	jmp    c0003b2d <create_name+0xa0>
c0003b2b:	b3 04                	mov    bl,0x4
c0003b2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b34:	85 f6                	test   esi,esi
c0003b36:	74 18                	je     c0003b50 <create_name+0xc3>
c0003b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b3c:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b41:	66 83 f8 20          	cmp    ax,0x20
c0003b45:	74 06                	je     c0003b4d <create_name+0xc0>
c0003b47:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4b:	75 03                	jne    c0003b50 <create_name+0xc3>
c0003b4d:	4e                   	dec    esi
c0003b4e:	eb e4                	jmp    c0003b34 <create_name+0xa7>
c0003b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b54:	31 ed                	xor    ebp,ebp
c0003b56:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5c:	85 f6                	test   esi,esi
c0003b5e:	0f 84 55 ff ff ff    	je     c0003ab9 <create_name+0x2c>
c0003b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b68:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6b:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b6f:	66 83 f8 20          	cmp    ax,0x20
c0003b73:	75 04                	jne    c0003b79 <create_name+0xec>
c0003b75:	89 d5                	mov    ebp,edx
c0003b77:	eb eb                	jmp    c0003b64 <create_name+0xd7>
c0003b79:	85 ed                	test   ebp,ebp
c0003b7b:	75 06                	jne    c0003b83 <create_name+0xf6>
c0003b7d:	66 83 f8 2e          	cmp    ax,0x2e
c0003b81:	75 08                	jne    c0003b8b <create_name+0xfe>
c0003b83:	83 cb 03             	or     ebx,0x3
c0003b86:	eb 03                	jmp    c0003b8b <create_name+0xfe>
c0003b88:	4e                   	dec    esi
c0003b89:	74 0c                	je     c0003b97 <create_name+0x10a>
c0003b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8f:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b95:	75 f1                	jne    c0003b88 <create_name+0xfb>
c0003b97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9c:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b9f:	ba 20 00 00 00       	mov    edx,0x20
c0003ba4:	e8 35 df ff ff       	call   c0001ade <mem_set>
c0003ba9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bb1:	31 c9                	xor    ecx,ecx
c0003bb3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb8:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bc3:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc7:	66 85 ed             	test   bp,bp
c0003bca:	0f 84 30 01 00 00    	je     c0003d00 <create_name+0x273>
c0003bd0:	66 83 fd 20          	cmp    bp,0x20
c0003bd4:	74 10                	je     c0003be6 <create_name+0x159>
c0003bd6:	66 83 fd 2e          	cmp    bp,0x2e
c0003bda:	75 13                	jne    c0003bef <create_name+0x162>
c0003bdc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be0:	0f 84 6b 01 00 00    	je     c0003d51 <create_name+0x2c4>
c0003be6:	83 cb 03             	or     ebx,0x3
c0003be9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bed:	eb c9                	jmp    c0003bb8 <create_name+0x12b>
c0003bef:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bf3:	73 0b                	jae    c0003c00 <create_name+0x173>
c0003bf5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bf9:	75 47                	jne    c0003c42 <create_name+0x1b5>
c0003bfb:	e9 51 01 00 00       	jmp    c0003d51 <create_name+0x2c4>
c0003c00:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c05:	75 10                	jne    c0003c17 <create_name+0x18a>
c0003c07:	83 cb 03             	or     ebx,0x3
c0003c0a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c12:	e9 e9 00 00 00       	jmp    c0003d00 <create_name+0x273>
c0003c17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1b:	74 0d                	je     c0003c2a <create_name+0x19d>
c0003c1d:	83 cb 03             	or     ebx,0x3
c0003c20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c24:	0f 87 d6 00 00 00    	ja     c0003d00 <create_name+0x273>
c0003c2a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c2f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c33:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3b:	b9 08 00 00 00       	mov    ecx,0x8
c0003c40:	eb a7                	jmp    c0003be9 <create_name+0x15c>
c0003c42:	66 83 fd 7f          	cmp    bp,0x7f
c0003c46:	76 68                	jbe    c0003cb0 <create_name+0x223>
c0003c48:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4c:	88 da                	mov    dl,bl
c0003c4e:	83 ca 02             	or     edx,0x2
c0003c51:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c55:	50                   	push   eax
c0003c56:	50                   	push   eax
c0003c57:	68 b5 01 00 00       	push   0x1b5
c0003c5c:	55                   	push   ebp
c0003c5d:	e8 48 46 00 00       	call   c00082aa <ff_uni2oem>
c0003c62:	83 c4 10             	add    esp,0x10
c0003c65:	89 c5                	mov    ebp,eax
c0003c67:	a8 80                	test   al,0x80
c0003c69:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c71:	74 0c                	je     c0003c7f <create_name+0x1f2>
c0003c73:	83 e5 7f             	and    ebp,0x7f
c0003c76:	0f b6 ad a0 80 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7f60]
c0003c7d:	eb 2a                	jmp    c0003ca9 <create_name+0x21c>
c0003c7f:	66 3d ff 00          	cmp    ax,0xff
c0003c83:	76 24                	jbe    c0003ca9 <create_name+0x21c>
c0003c85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c89:	48                   	dec    eax
c0003c8a:	39 c8                	cmp    eax,ecx
c0003c8c:	77 0c                	ja     c0003c9a <create_name+0x20d>
c0003c8e:	83 cb 03             	or     ebx,0x3
c0003c91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c95:	e9 4f ff ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003c9a:	89 e8                	mov    eax,ebp
c0003c9c:	88 d3                	mov    bl,dl
c0003c9e:	66 c1 e8 08          	shr    ax,0x8
c0003ca2:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca6:	41                   	inc    ecx
c0003ca7:	eb 4b                	jmp    c0003cf4 <create_name+0x267>
c0003ca9:	88 d3                	mov    bl,dl
c0003cab:	66 85 ed             	test   bp,bp
c0003cae:	74 19                	je     c0003cc9 <create_name+0x23c>
c0003cb0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb4:	0f b7 d5             	movzx  edx,bp
c0003cb7:	b8 5b 81 02 c0       	mov    eax,0xc002815b
c0003cbc:	e8 4b de ff ff       	call   c0001b0c <chk_chr>
c0003cc1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc5:	85 c0                	test   eax,eax
c0003cc7:	74 0a                	je     c0003cd3 <create_name+0x246>
c0003cc9:	83 cb 03             	or     ebx,0x3
c0003ccc:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd1:	eb 21                	jmp    c0003cf4 <create_name+0x267>
c0003cd3:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd6:	66 83 f8 19          	cmp    ax,0x19
c0003cda:	77 07                	ja     c0003ce3 <create_name+0x256>
c0003cdc:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ce1:	eb 11                	jmp    c0003cf4 <create_name+0x267>
c0003ce3:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce6:	66 83 f8 19          	cmp    ax,0x19
c0003cea:	77 08                	ja     c0003cf4 <create_name+0x267>
c0003cec:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cf1:	83 ed 20             	sub    ebp,0x20
c0003cf4:	89 e8                	mov    eax,ebp
c0003cf6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cfa:	41                   	inc    ecx
c0003cfb:	e9 e9 fe ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003d00:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d04:	75 04                	jne    c0003d0a <create_name+0x27d>
c0003d06:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d0a:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d0f:	75 05                	jne    c0003d16 <create_name+0x289>
c0003d11:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d16:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1a:	83 e0 0c             	and    eax,0xc
c0003d1d:	3c 0c                	cmp    al,0xc
c0003d1f:	74 0b                	je     c0003d2c <create_name+0x29f>
c0003d21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d25:	83 e0 03             	and    eax,0x3
c0003d28:	3c 03                	cmp    al,0x3
c0003d2a:	75 05                	jne    c0003d31 <create_name+0x2a4>
c0003d2c:	83 cb 02             	or     ebx,0x2
c0003d2f:	eb 19                	jmp    c0003d4a <create_name+0x2bd>
c0003d31:	f6 c3 02             	test   bl,0x2
c0003d34:	75 14                	jne    c0003d4a <create_name+0x2bd>
c0003d36:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d3b:	74 03                	je     c0003d40 <create_name+0x2b3>
c0003d3d:	83 cb 10             	or     ebx,0x10
c0003d40:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d45:	74 03                	je     c0003d4a <create_name+0x2bd>
c0003d47:	83 cb 08             	or     ebx,0x8
c0003d4a:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4d:	31 c0                	xor    eax,eax
c0003d4f:	eb 10                	jmp    c0003d61 <create_name+0x2d4>
c0003d51:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d56:	0f 85 ce fe ff ff    	jne    c0003c2a <create_name+0x19d>
c0003d5c:	e9 a6 fe ff ff       	jmp    c0003c07 <create_name+0x17a>
c0003d61:	83 c4 3c             	add    esp,0x3c
c0003d64:	5b                   	pop    ebx
c0003d65:	5e                   	pop    esi
c0003d66:	5f                   	pop    edi
c0003d67:	5d                   	pop    ebp
c0003d68:	c3                   	ret    

c0003d69 <xname_sum>:
c0003d69:	56                   	push   esi
c0003d6a:	53                   	push   ebx
c0003d6b:	89 c6                	mov    esi,eax
c0003d6d:	51                   	push   ecx
c0003d6e:	31 db                	xor    ebx,ebx
c0003d70:	83 c6 02             	add    esi,0x2
c0003d73:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d77:	66 85 c0             	test   ax,ax
c0003d7a:	74 1f                	je     c0003d9b <xname_sum+0x32>
c0003d7c:	83 ec 0c             	sub    esp,0xc
c0003d7f:	66 d1 cb             	ror    bx,1
c0003d82:	50                   	push   eax
c0003d83:	e8 1e 46 00 00       	call   c00083a6 <ff_wtoupper>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	0f b6 d0             	movzx  edx,al
c0003d8e:	66 c1 e8 08          	shr    ax,0x8
c0003d92:	01 d3                	add    ebx,edx
c0003d94:	66 d1 cb             	ror    bx,1
c0003d97:	01 c3                	add    ebx,eax
c0003d99:	eb d5                	jmp    c0003d70 <xname_sum+0x7>
c0003d9b:	89 d8                	mov    eax,ebx
c0003d9d:	5a                   	pop    edx
c0003d9e:	5b                   	pop    ebx
c0003d9f:	5e                   	pop    esi
c0003da0:	c3                   	ret    

c0003da1 <create_xdir>:
c0003da1:	55                   	push   ebp
c0003da2:	b9 40 00 00 00       	mov    ecx,0x40
c0003da7:	57                   	push   edi
c0003da8:	bd 01 00 00 00       	mov    ebp,0x1
c0003dad:	56                   	push   esi
c0003dae:	31 ff                	xor    edi,edi
c0003db0:	53                   	push   ebx
c0003db1:	be 40 00 00 00       	mov    esi,0x40
c0003db6:	89 c3                	mov    ebx,eax
c0003db8:	83 ec 1c             	sub    esp,0x1c
c0003dbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dbf:	31 d2                	xor    edx,edx
c0003dc1:	e8 18 dd ff ff       	call   c0001ade <mem_set>
c0003dc6:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dc9:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dcd:	31 c9                	xor    ecx,ecx
c0003dcf:	8d 46 01             	lea    eax,[esi+0x1]
c0003dd2:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dd6:	83 c6 02             	add    esi,0x2
c0003dd9:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ddd:	66 85 ed             	test   bp,bp
c0003de0:	74 12                	je     c0003df4 <create_xdir+0x53>
c0003de2:	0f b6 c1             	movzx  eax,cl
c0003de5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de9:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ded:	66 83 fd 01          	cmp    bp,0x1
c0003df1:	80 d9 ff             	sbb    cl,0xff
c0003df4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003df7:	0f b7 d5             	movzx  edx,bp
c0003dfa:	83 c6 02             	add    esi,0x2
c0003dfd:	e8 ba dc ff ff       	call   c0001abc <st_word>
c0003e02:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e08:	75 d3                	jne    c0003ddd <create_xdir+0x3c>
c0003e0a:	8d 47 01             	lea    eax,[edi+0x1]
c0003e0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e15:	0f b6 c1             	movzx  eax,cl
c0003e18:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e1d:	74 07                	je     c0003e26 <create_xdir+0x85>
c0003e1f:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e24:	eb a9                	jmp    c0003dcf <create_xdir+0x2e>
c0003e26:	8d 47 02             	lea    eax,[edi+0x2]
c0003e29:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e2c:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e2f:	89 d0                	mov    eax,edx
c0003e31:	e8 33 ff ff ff       	call   c0003d69 <xname_sum>
c0003e36:	83 c4 1c             	add    esp,0x1c
c0003e39:	0f b7 d0             	movzx  edx,ax
c0003e3c:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e3f:	5b                   	pop    ebx
c0003e40:	5e                   	pop    esi
c0003e41:	5f                   	pop    edi
c0003e42:	5d                   	pop    ebp
c0003e43:	e9 74 dc ff ff       	jmp    c0001abc <st_word>

c0003e48 <cmp_lfn>:
c0003e48:	55                   	push   ebp
c0003e49:	57                   	push   edi
c0003e4a:	89 d7                	mov    edi,edx
c0003e4c:	56                   	push   esi
c0003e4d:	53                   	push   ebx
c0003e4e:	83 ec 1c             	sub    esp,0x1c
c0003e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e55:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e58:	e8 ed db ff ff       	call   c0001a4a <ld_word>
c0003e5d:	66 85 c0             	test   ax,ax
c0003e60:	74 07                	je     c0003e69 <cmp_lfn+0x21>
c0003e62:	31 c0                	xor    eax,eax
c0003e64:	e9 9a 00 00 00       	jmp    c0003f03 <cmp_lfn+0xbb>
c0003e69:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e6b:	bd 01 00 00 00       	mov    ebp,0x1
c0003e70:	83 e3 3f             	and    ebx,0x3f
c0003e73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e7b:	4b                   	dec    ebx
c0003e7c:	6b db 0d             	imul   ebx,ebx,0xd
c0003e7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e83:	0f b6 80 20 81 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7ee0]
c0003e8a:	01 f8                	add    eax,edi
c0003e8c:	e8 b9 db ff ff       	call   c0001a4a <ld_word>
c0003e91:	66 85 ed             	test   bp,bp
c0003e94:	89 c6                	mov    esi,eax
c0003e96:	74 3c                	je     c0003ed4 <cmp_lfn+0x8c>
c0003e98:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e9e:	77 c2                	ja     c0003e62 <cmp_lfn+0x1a>
c0003ea0:	83 ec 0c             	sub    esp,0xc
c0003ea3:	0f b7 c0             	movzx  eax,ax
c0003ea6:	50                   	push   eax
c0003ea7:	e8 fa 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003eac:	89 c5                	mov    ebp,eax
c0003eae:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eb9:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ebd:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec0:	e8 e1 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003ec5:	83 c4 10             	add    esp,0x10
c0003ec8:	39 c5                	cmp    ebp,eax
c0003eca:	75 96                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ecc:	89 f5                	mov    ebp,esi
c0003ece:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ed2:	eb 04                	jmp    c0003ed8 <cmp_lfn+0x90>
c0003ed4:	66 46                	inc    si
c0003ed6:	75 8a                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ed8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003edc:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ee1:	75 9c                	jne    c0003e7f <cmp_lfn+0x37>
c0003ee3:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ee6:	74 16                	je     c0003efe <cmp_lfn+0xb6>
c0003ee8:	66 85 ed             	test   bp,bp
c0003eeb:	74 11                	je     c0003efe <cmp_lfn+0xb6>
c0003eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ef1:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ef6:	0f 94 c0             	sete   al
c0003ef9:	0f b6 c0             	movzx  eax,al
c0003efc:	eb 05                	jmp    c0003f03 <cmp_lfn+0xbb>
c0003efe:	b8 01 00 00 00       	mov    eax,0x1
c0003f03:	83 c4 1c             	add    esp,0x1c
c0003f06:	5b                   	pop    ebx
c0003f07:	5e                   	pop    esi
c0003f08:	5f                   	pop    edi
c0003f09:	5d                   	pop    ebp
c0003f0a:	c3                   	ret    

c0003f0b <dir_find>:
c0003f0b:	55                   	push   ebp
c0003f0c:	31 d2                	xor    edx,edx
c0003f0e:	57                   	push   edi
c0003f0f:	56                   	push   esi
c0003f10:	53                   	push   ebx
c0003f11:	89 c3                	mov    ebx,eax
c0003f13:	83 ec 1c             	sub    esp,0x1c
c0003f16:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f18:	e8 89 f0 ff ff       	call   c0002fa6 <dir_sdi>
c0003f1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 9e 01 00 00    	jne    c00040c6 <dir_find+0x1bb>
c0003f28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f2b:	0f 85 8d 00 00 00    	jne    c0003fbe <dir_find+0xb3>
c0003f31:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f34:	e8 30 fe ff ff       	call   c0003d69 <xname_sum>
c0003f39:	89 c7                	mov    edi,eax
c0003f3b:	31 d2                	xor    edx,edx
c0003f3d:	89 d8                	mov    eax,ebx
c0003f3f:	e8 72 f8 ff ff       	call   c00037b6 <dir_read>
c0003f44:	85 c0                	test   eax,eax
c0003f46:	0f 85 5e 01 00 00    	jne    c00040aa <dir_find+0x19f>
c0003f4c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f4f:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f52:	e8 f3 da ff ff       	call   c0001a4a <ld_word>
c0003f57:	66 39 f8             	cmp    ax,di
c0003f5a:	75 df                	jne    c0003f3b <dir_find+0x30>
c0003f5c:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f5f:	31 ed                	xor    ebp,ebp
c0003f61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f65:	ba 40 00 00 00       	mov    edx,0x40
c0003f6a:	89 e9                	mov    ecx,ebp
c0003f6c:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f70:	0f 84 42 01 00 00    	je     c00040b8 <dir_find+0x1ad>
c0003f76:	f6 c2 1f             	test   dl,0x1f
c0003f79:	75 03                	jne    c0003f7e <dir_find+0x73>
c0003f7b:	83 c2 02             	add    edx,0x2
c0003f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f82:	89 d0                	mov    eax,edx
c0003f84:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f87:	e8 be da ff ff       	call   c0001a4a <ld_word>
c0003f8c:	83 ec 0c             	sub    esp,0xc
c0003f8f:	0f b7 c0             	movzx  eax,ax
c0003f92:	50                   	push   eax
c0003f93:	e8 0e 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003f98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f9c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f9f:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fa3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fa6:	e8 fb 43 00 00       	call   c00083a6 <ff_wtoupper>
c0003fab:	83 c4 10             	add    esp,0x10
c0003fae:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fb2:	75 87                	jne    c0003f3b <dir_find+0x30>
c0003fb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb8:	45                   	inc    ebp
c0003fb9:	83 c2 02             	add    edx,0x2
c0003fbc:	eb ac                	jmp    c0003f6a <dir_find+0x5f>
c0003fbe:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc5:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fca:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fcf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fd2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fd5:	89 f0                	mov    eax,esi
c0003fd7:	e8 4c e2 ff ff       	call   c0002228 <move_window>
c0003fdc:	85 c0                	test   eax,eax
c0003fde:	0f 85 c6 00 00 00    	jne    c00040aa <dir_find+0x19f>
c0003fe4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fe7:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fea:	84 c9                	test   cl,cl
c0003fec:	0f 84 bd 00 00 00    	je     c00040af <dir_find+0x1a4>
c0003ff2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ff5:	88 d0                	mov    al,dl
c0003ff7:	83 e0 3f             	and    eax,0x3f
c0003ffa:	80 f9 e5             	cmp    cl,0xe5
c0003ffd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004000:	0f 84 87 00 00 00    	je     c000408d <dir_find+0x182>
c0004006:	80 e2 08             	and    dl,0x8
c0004009:	74 06                	je     c0004011 <dir_find+0x106>
c000400b:	3c 0f                	cmp    al,0xf
c000400d:	75 7e                	jne    c000408d <dir_find+0x182>
c000400f:	eb 04                	jmp    c0004015 <dir_find+0x10a>
c0004011:	3c 0f                	cmp    al,0xf
c0004013:	75 4c                	jne    c0004061 <dir_find+0x156>
c0004015:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004019:	75 7e                	jne    c0004099 <dir_find+0x18e>
c000401b:	f6 c1 40             	test   cl,0x40
c000401e:	74 12                	je     c0004032 <dir_find+0x127>
c0004020:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004023:	83 e1 bf             	and    ecx,0xffffffbf
c0004026:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000402a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000402d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004030:	eb 06                	jmp    c0004038 <dir_find+0x12d>
c0004032:	89 f8                	mov    eax,edi
c0004034:	38 c8                	cmp    al,cl
c0004036:	75 5c                	jne    c0004094 <dir_find+0x189>
c0004038:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000403c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004041:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004044:	75 53                	jne    c0004099 <dir_find+0x18e>
c0004046:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000404a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000404d:	89 ea                	mov    edx,ebp
c000404f:	e8 f4 fd ff ff       	call   c0003e48 <cmp_lfn>
c0004054:	85 c0                	test   eax,eax
c0004056:	74 41                	je     c0004099 <dir_find+0x18e>
c0004058:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000405c:	8d 79 ff             	lea    edi,[ecx-0x1]
c000405f:	eb 38                	jmp    c0004099 <dir_find+0x18e>
c0004061:	89 f8                	mov    eax,edi
c0004063:	84 c0                	test   al,al
c0004065:	75 0d                	jne    c0004074 <dir_find+0x169>
c0004067:	89 e8                	mov    eax,ebp
c0004069:	e8 98 de ff ff       	call   c0001f06 <sum_sfn>
c000406e:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004072:	74 52                	je     c00040c6 <dir_find+0x1bb>
c0004074:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004078:	75 13                	jne    c000408d <dir_find+0x182>
c000407a:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000407d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004082:	89 e8                	mov    eax,ebp
c0004084:	e8 60 da ff ff       	call   c0001ae9 <mem_cmp>
c0004089:	85 c0                	test   eax,eax
c000408b:	74 39                	je     c00040c6 <dir_find+0x1bb>
c000408d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004094:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004099:	31 d2                	xor    edx,edx
c000409b:	89 d8                	mov    eax,ebx
c000409d:	e8 5c f4 ff ff       	call   c00034fe <dir_next>
c00040a2:	85 c0                	test   eax,eax
c00040a4:	0f 84 25 ff ff ff    	je     c0003fcf <dir_find+0xc4>
c00040aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040ad:	eb 17                	jmp    c00040c6 <dir_find+0x1bb>
c00040af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040b6:	eb 0e                	jmp    c00040c6 <dir_find+0x1bb>
c00040b8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040bb:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040c0:	0f 85 75 fe ff ff    	jne    c0003f3b <dir_find+0x30>
c00040c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040c9:	83 c4 1c             	add    esp,0x1c
c00040cc:	5b                   	pop    ebx
c00040cd:	5e                   	pop    esi
c00040ce:	5f                   	pop    edi
c00040cf:	5d                   	pop    ebp
c00040d0:	c3                   	ret    

c00040d1 <dir_register>:
c00040d1:	55                   	push   ebp
c00040d2:	57                   	push   edi
c00040d3:	56                   	push   esi
c00040d4:	be 06 00 00 00       	mov    esi,0x6
c00040d9:	53                   	push   ebx
c00040da:	83 ec 6c             	sub    esp,0x6c
c00040dd:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040e1:	0f 85 62 02 00 00    	jne    c0004349 <dir_register+0x278>
c00040e7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040e9:	31 ff                	xor    edi,edi
c00040eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ee:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040f3:	74 03                	je     c00040f8 <dir_register+0x27>
c00040f5:	47                   	inc    edi
c00040f6:	eb f6                	jmp    c00040ee <dir_register+0x1d>
c00040f8:	89 c3                	mov    ebx,eax
c00040fa:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040fe:	0f 85 e1 00 00 00    	jne    c00041e5 <dir_register+0x114>
c0004104:	83 c7 0e             	add    edi,0xe
c0004107:	b9 0f 00 00 00       	mov    ecx,0xf
c000410c:	89 f8                	mov    eax,edi
c000410e:	31 d2                	xor    edx,edx
c0004110:	f7 f1                	div    ecx
c0004112:	8d 50 02             	lea    edx,[eax+0x2]
c0004115:	89 c7                	mov    edi,eax
c0004117:	89 d8                	mov    eax,ebx
c0004119:	e8 12 f8 ff ff       	call   c0003930 <dir_alloc>
c000411e:	89 c6                	mov    esi,eax
c0004120:	85 c0                	test   eax,eax
c0004122:	0f 85 21 02 00 00    	jne    c0004349 <dir_register+0x278>
c0004128:	81 c7 01 00 00 08    	add    edi,0x8000001
c000412e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004131:	c1 e7 05             	shl    edi,0x5
c0004134:	29 f8                	sub    eax,edi
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000413c:	a8 04                	test   al,0x4
c000413e:	0f 84 91 00 00 00    	je     c00041d5 <dir_register+0x104>
c0004144:	83 e0 fb             	and    eax,0xfffffffb
c0004147:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000414a:	89 d8                	mov    eax,ebx
c000414c:	e8 25 ec ff ff       	call   c0002d76 <fill_first_frag>
c0004151:	85 c0                	test   eax,eax
c0004153:	0f 85 ee 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004159:	83 c9 ff             	or     ecx,0xffffffff
c000415c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000415f:	89 d8                	mov    eax,ebx
c0004161:	e8 db eb ff ff       	call   c0002d41 <fill_last_frag>
c0004166:	85 c0                	test   eax,eax
c0004168:	0f 85 d9 01 00 00    	jne    c0004347 <dir_register+0x276>
c000416e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004172:	74 61                	je     c00041d5 <dir_register+0x104>
c0004174:	89 da                	mov    edx,ebx
c0004176:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417a:	e8 ea f5 ff ff       	call   c0003769 <load_obj_xdir>
c000417f:	85 c0                	test   eax,eax
c0004181:	0f 85 c0 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004187:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000418b:	31 c9                	xor    ecx,ecx
c000418d:	c1 e2 09             	shl    edx,0x9
c0004190:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004193:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004196:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004199:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000419c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000419f:	83 c0 38             	add    eax,0x38
c00041a2:	e8 1c d9 ff ff       	call   c0001ac3 <st_qword>
c00041a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041ad:	83 c0 28             	add    eax,0x28
c00041b0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041b3:	e8 0b d9 ff ff       	call   c0001ac3 <st_qword>
c00041b8:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041bb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041be:	83 c8 01             	or     eax,0x1
c00041c1:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c8:	e8 db f7 ff ff       	call   c00039a8 <store_xdir>
c00041cd:	85 c0                	test   eax,eax
c00041cf:	0f 85 72 01 00 00    	jne    c0004347 <dir_register+0x276>
c00041d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041db:	e8 c1 fb ff ff       	call   c0003da1 <create_xdir>
c00041e0:	e9 64 01 00 00       	jmp    c0004349 <dir_register+0x278>
c00041e5:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e8:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041f1:	89 c2                	mov    edx,eax
c00041f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f7:	e8 cd d8 ff ff       	call   c0001ac9 <mem_cpy>
c00041fc:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004201:	74 58                	je     c000425b <dir_register+0x18a>
c0004203:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004207:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004219:	8d 54 24 24          	lea    edx,[esp+0x24]
c000421d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004221:	e8 24 dc ff ff       	call   c0001e4a <gen_numname>
c0004226:	89 d8                	mov    eax,ebx
c0004228:	e8 de fc ff ff       	call   c0003f0b <dir_find>
c000422d:	83 c4 10             	add    esp,0x10
c0004230:	89 c6                	mov    esi,eax
c0004232:	85 c0                	test   eax,eax
c0004234:	75 15                	jne    c000424b <dir_register+0x17a>
c0004236:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000423a:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000423f:	75 ce                	jne    c000420f <dir_register+0x13e>
c0004241:	be 07 00 00 00       	mov    esi,0x7
c0004246:	e9 fe 00 00 00       	jmp    c0004349 <dir_register+0x278>
c000424b:	83 f8 04             	cmp    eax,0x4
c000424e:	0f 85 f5 00 00 00    	jne    c0004349 <dir_register+0x278>
c0004254:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004258:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000425b:	b9 01 00 00 00       	mov    ecx,0x1
c0004260:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004265:	74 0f                	je     c0004276 <dir_register+0x1a5>
c0004267:	b9 0d 00 00 00       	mov    ecx,0xd
c000426c:	8d 47 0c             	lea    eax,[edi+0xc]
c000426f:	31 d2                	xor    edx,edx
c0004271:	f7 f1                	div    ecx
c0004273:	8d 48 01             	lea    ecx,[eax+0x1]
c0004276:	89 ca                	mov    edx,ecx
c0004278:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000427c:	89 d8                	mov    eax,ebx
c000427e:	e8 ad f6 ff ff       	call   c0003930 <dir_alloc>
c0004283:	89 c6                	mov    esi,eax
c0004285:	85 c0                	test   eax,eax
c0004287:	0f 85 bc 00 00 00    	jne    c0004349 <dir_register+0x278>
c000428d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004291:	49                   	dec    ecx
c0004292:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004296:	74 6a                	je     c0004302 <dir_register+0x231>
c0004298:	89 c8                	mov    eax,ecx
c000429a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000429d:	c1 e0 05             	shl    eax,0x5
c00042a0:	29 c2                	sub    edx,eax
c00042a2:	89 d8                	mov    eax,ebx
c00042a4:	e8 fd ec ff ff       	call   c0002fa6 <dir_sdi>
c00042a9:	89 c6                	mov    esi,eax
c00042ab:	85 c0                	test   eax,eax
c00042ad:	0f 85 96 00 00 00    	jne    c0004349 <dir_register+0x278>
c00042b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042b7:	e8 4a dc ff ff       	call   c0001f06 <sum_sfn>
c00042bc:	0f b6 f8             	movzx  edi,al
c00042bf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042c2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c5:	89 e8                	mov    eax,ebp
c00042c7:	e8 5c df ff ff       	call   c0002228 <move_window>
c00042cc:	89 c6                	mov    esi,eax
c00042ce:	85 c0                	test   eax,eax
c00042d0:	75 77                	jne    c0004349 <dir_register+0x278>
c00042d2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042d7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042da:	83 ec 0c             	sub    esp,0xc
c00042dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042e0:	57                   	push   edi
c00042e1:	e8 e0 da ff ff       	call   c0001dc6 <put_lfn>
c00042e6:	31 d2                	xor    edx,edx
c00042e8:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042ec:	89 d8                	mov    eax,ebx
c00042ee:	e8 0b f2 ff ff       	call   c00034fe <dir_next>
c00042f3:	83 c4 10             	add    esp,0x10
c00042f6:	89 c6                	mov    esi,eax
c00042f8:	85 c0                	test   eax,eax
c00042fa:	75 4d                	jne    c0004349 <dir_register+0x278>
c00042fc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004300:	75 bd                	jne    c00042bf <dir_register+0x1ee>
c0004302:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004305:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004308:	89 e8                	mov    eax,ebp
c000430a:	e8 19 df ff ff       	call   c0002228 <move_window>
c000430f:	89 c6                	mov    esi,eax
c0004311:	85 c0                	test   eax,eax
c0004313:	75 34                	jne    c0004349 <dir_register+0x278>
c0004315:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004318:	b9 20 00 00 00       	mov    ecx,0x20
c000431d:	31 d2                	xor    edx,edx
c000431f:	e8 ba d7 ff ff       	call   c0001ade <mem_set>
c0004324:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004327:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000432b:	b9 0b 00 00 00       	mov    ecx,0xb
c0004330:	e8 94 d7 ff ff       	call   c0001ac9 <mem_cpy>
c0004335:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004338:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000433b:	83 e0 18             	and    eax,0x18
c000433e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004341:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004345:	eb 02                	jmp    c0004349 <dir_register+0x278>
c0004347:	89 c6                	mov    esi,eax
c0004349:	83 c4 6c             	add    esp,0x6c
c000434c:	89 f0                	mov    eax,esi
c000434e:	5b                   	pop    ebx
c000434f:	5e                   	pop    esi
c0004350:	5f                   	pop    edi
c0004351:	5d                   	pop    ebp
c0004352:	c3                   	ret    

c0004353 <sync_fs>:
c0004353:	56                   	push   esi
c0004354:	53                   	push   ebx
c0004355:	53                   	push   ebx
c0004356:	89 c3                	mov    ebx,eax
c0004358:	e8 37 de ff ff       	call   c0002194 <sync_window>
c000435d:	85 c0                	test   eax,eax
c000435f:	0f 85 b1 00 00 00    	jne    c0004416 <sync_fs+0xc3>
c0004365:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004368:	0f 85 8e 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c000436e:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004372:	0f 85 84 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c0004378:	b9 00 02 00 00       	mov    ecx,0x200
c000437d:	8d 73 54             	lea    esi,[ebx+0x54]
c0004380:	31 d2                	xor    edx,edx
c0004382:	89 f0                	mov    eax,esi
c0004384:	e8 55 d7 ff ff       	call   c0001ade <mem_set>
c0004389:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000438f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004394:	e8 23 d7 ff ff       	call   c0001abc <st_word>
c0004399:	ba 52 52 61 41       	mov    edx,0x41615252
c000439e:	89 f0                	mov    eax,esi
c00043a0:	e8 1b d7 ff ff       	call   c0001ac0 <st_dword>
c00043a5:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043ab:	ba 72 72 41 61       	mov    edx,0x61417272
c00043b0:	e8 0b d7 ff ff       	call   c0001ac0 <st_dword>
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043be:	e8 fd d6 ff ff       	call   c0001ac0 <st_dword>
c00043c3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043c6:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043cc:	e8 ef d6 ff ff       	call   c0001ac0 <st_dword>
c00043d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043d7:	83 c0 01             	add    eax,0x1
c00043da:	83 d2 00             	adc    edx,0x0
c00043dd:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043e0:	83 ec 0c             	sub    esp,0xc
c00043e3:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043e6:	6a 01                	push   0x1
c00043e8:	52                   	push   edx
c00043e9:	50                   	push   eax
c00043ea:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ee:	56                   	push   esi
c00043ef:	50                   	push   eax
c00043f0:	e8 20 d6 ff ff       	call   c0001a15 <disk_write>
c00043f5:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043f9:	83 c4 20             	add    esp,0x20
c00043fc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004400:	51                   	push   ecx
c0004401:	6a 00                	push   0x0
c0004403:	6a 00                	push   0x0
c0004405:	50                   	push   eax
c0004406:	e8 20 d6 ff ff       	call   c0001a2b <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	0f 95 c0             	setne  al
c0004413:	0f b6 c0             	movzx  eax,al
c0004416:	5a                   	pop    edx
c0004417:	5b                   	pop    ebx
c0004418:	5e                   	pop    esi
c0004419:	c3                   	ret    

c000441a <create_partition>:
c000441a:	55                   	push   ebp
c000441b:	0f b6 c0             	movzx  eax,al
c000441e:	57                   	push   edi
c000441f:	56                   	push   esi
c0004420:	53                   	push   ebx
c0004421:	83 ec 60             	sub    esp,0x60
c0004424:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004428:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000442c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004430:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004434:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004438:	50                   	push   eax
c0004439:	6a 01                	push   0x1
c000443b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000443f:	e8 e7 d5 ff ff       	call   c0001a2b <disk_ioctl>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	85 c0                	test   eax,eax
c0004449:	74 0a                	je     c0004455 <create_partition+0x3b>
c000444b:	b8 01 00 00 00       	mov    eax,0x1
c0004450:	e9 67 05 00 00       	jmp    c00049bc <create_partition+0x5a2>
c0004455:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004459:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000445d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004465:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000446a:	0f 86 ed 03 00 00    	jbe    c000485d <create_partition+0x443>
c0004470:	83 c0 df             	add    eax,0xffffffdf
c0004473:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000447b:	83 d2 ff             	adc    edx,0xffffffff
c000447e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004486:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000448a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000448e:	83 c0 bd             	add    eax,0xffffffbd
c0004491:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004498:	83 d2 ff             	adc    edx,0xffffffff
c000449b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000449f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044ab:	be 22 00 00 00       	mov    esi,0x22
c00044b0:	31 ff                	xor    edi,edi
c00044b2:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044ba:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044c2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044ca:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044ce:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044d4:	75 0e                	jne    c00044e4 <create_partition+0xca>
c00044d6:	b9 00 02 00 00       	mov    ecx,0x200
c00044db:	31 d2                	xor    edx,edx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 fa d5 ff ff       	call   c0001ade <mem_set>
c00044e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044f0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f3:	0f 84 23 01 00 00    	je     c000461c <create_partition+0x202>
c00044f9:	89 f0                	mov    eax,esi
c00044fb:	89 fa                	mov    edx,edi
c00044fd:	05 ff 07 00 00       	add    eax,0x7ff
c0004502:	83 d2 00             	adc    edx,0x0
c0004505:	89 c1                	mov    ecx,eax
c0004507:	89 d7                	mov    edi,edx
c0004509:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000450f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004513:	89 ce                	mov    esi,ecx
c0004515:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004519:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000451d:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004521:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004528:	89 04 24             	mov    DWORD PTR [esp],eax
c000452b:	b8 64 00 00 00       	mov    eax,0x64
c0004530:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004533:	b8 00 00 00 00       	mov    eax,0x0
c0004538:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000453c:	72 41                	jb     c000457f <create_partition+0x165>
c000453e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004546:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000454a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000454f:	01 c1                	add    ecx,eax
c0004551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004555:	f7 24 24             	mul    DWORD PTR [esp]
c0004558:	6a 00                	push   0x0
c000455a:	01 ca                	add    edx,ecx
c000455c:	6a 64                	push   0x64
c000455e:	52                   	push   edx
c000455f:	50                   	push   eax
c0004560:	e8 77 11 02 00       	call   c00256dc <__udivdi3>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	05 ff 07 00 00       	add    eax,0x7ff
c000456d:	83 d2 00             	adc    edx,0x0
c0004570:	89 c1                	mov    ecx,eax
c0004572:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004576:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000457c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000457f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004582:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004586:	01 f0                	add    eax,esi
c0004588:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000458c:	11 fa                	adc    edx,edi
c000458e:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004592:	19 d1                	sbb    ecx,edx
c0004594:	73 2e                	jae    c00045c4 <create_partition+0x1aa>
c0004596:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000459a:	89 f8                	mov    eax,edi
c000459c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045a3:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045af:	73 6b                	jae    c000461c <create_partition+0x202>
c00045b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045b9:	29 f0                	sub    eax,esi
c00045bb:	19 fa                	sbb    edx,edi
c00045bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00045c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045cb:	74 4f                	je     c000461c <create_partition+0x202>
c00045cd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045d0:	b9 10 00 00 00       	mov    ecx,0x10
c00045d5:	ba 30 81 02 c0       	mov    edx,0xc0028130
c00045da:	e8 ea d4 ff ff       	call   c0001ac9 <mem_cpy>
c00045df:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045e3:	b9 10 00 00 00       	mov    ecx,0x10
c00045e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ec:	e8 2c db ff ff       	call   c000211d <make_rand>
c00045f1:	89 f2                	mov    edx,esi
c00045f3:	89 f9                	mov    ecx,edi
c00045f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045f9:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045fd:	e8 c1 d4 ff ff       	call   c0001ac3 <st_qword>
c0004602:	03 34 24             	add    esi,DWORD PTR [esp]
c0004605:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004609:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000460d:	89 f2                	mov    edx,esi
c000460f:	89 f9                	mov    ecx,edi
c0004611:	83 c2 ff             	add    edx,0xffffffff
c0004614:	83 d1 ff             	adc    ecx,0xffffffff
c0004617:	e8 a7 d4 ff ff       	call   c0001ac3 <st_qword>
c000461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004620:	83 e8 80             	sub    eax,0xffffff80
c0004623:	89 c5                	mov    ebp,eax
c0004625:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004629:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000462f:	75 6b                	jne    c000469c <create_partition+0x282>
c0004631:	45                   	inc    ebp
c0004632:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004636:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000463b:	e8 39 da ff ff       	call   c0002079 <crc32>
c0004640:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004646:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000464a:	75 e5                	jne    c0004631 <create_partition+0x217>
c000464c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004650:	31 d2                	xor    edx,edx
c0004652:	83 ec 0c             	sub    esp,0xc
c0004655:	c1 ed 09             	shr    ebp,0x9
c0004658:	6a 01                	push   0x1
c000465a:	8d 45 02             	lea    eax,[ebp+0x2]
c000465d:	52                   	push   edx
c000465e:	50                   	push   eax
c000465f:	53                   	push   ebx
c0004660:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004664:	e8 ac d3 ff ff       	call   c0001a15 <disk_write>
c0004669:	83 c4 20             	add    esp,0x20
c000466c:	85 c0                	test   eax,eax
c000466e:	0f 85 d7 fd ff ff    	jne    c000444b <create_partition+0x31>
c0004674:	83 ec 0c             	sub    esp,0xc
c0004677:	31 d2                	xor    edx,edx
c0004679:	6a 01                	push   0x1
c000467b:	89 e8                	mov    eax,ebp
c000467d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004681:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004685:	52                   	push   edx
c0004686:	50                   	push   eax
c0004687:	53                   	push   ebx
c0004688:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468c:	e8 84 d3 ff ff       	call   c0001a15 <disk_write>
c0004691:	83 c4 20             	add    esp,0x20
c0004694:	85 c0                	test   eax,eax
c0004696:	0f 85 af fd ff ff    	jne    c000444b <create_partition+0x31>
c000469c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046a4:	3d 00 40 00 00       	cmp    eax,0x4000
c00046a9:	74 0d                	je     c00046b8 <create_partition+0x29e>
c00046ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046b3:	e9 12 fe ff ff       	jmp    c00044ca <create_partition+0xb0>
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	b9 00 02 00 00       	mov    ecx,0x200
c00046bf:	89 d8                	mov    eax,ebx
c00046c1:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046c4:	e8 15 d4 ff ff       	call   c0001ade <mem_set>
c00046c9:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046cc:	b9 10 00 00 00       	mov    ecx,0x10
c00046d1:	ba 20 80 02 c0       	mov    edx,0xc0028020
c00046d6:	89 d8                	mov    eax,ebx
c00046d8:	e8 ec d3 ff ff       	call   c0001ac9 <mem_cpy>
c00046dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046e1:	8d 43 58             	lea    eax,[ebx+0x58]
c00046e4:	f7 d2                	not    edx
c00046e6:	e8 d5 d3 ff ff       	call   c0001ac0 <st_dword>
c00046eb:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ee:	31 c9                	xor    ecx,ecx
c00046f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00046f3:	ba 01 00 00 00       	mov    edx,0x1
c00046f8:	e8 c6 d3 ff ff       	call   c0001ac3 <st_qword>
c00046fd:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004701:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004705:	83 c2 ff             	add    edx,0xffffffff
c0004708:	89 e8                	mov    eax,ebp
c000470a:	83 d1 ff             	adc    ecx,0xffffffff
c000470d:	e8 b1 d3 ff ff       	call   c0001ac3 <st_qword>
c0004712:	31 c9                	xor    ecx,ecx
c0004714:	8d 43 28             	lea    eax,[ebx+0x28]
c0004717:	ba 22 00 00 00       	mov    edx,0x22
c000471c:	e8 a2 d3 ff ff       	call   c0001ac3 <st_qword>
c0004721:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004725:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004729:	83 c2 de             	add    edx,0xffffffde
c000472c:	8d 43 30             	lea    eax,[ebx+0x30]
c000472f:	83 d1 ff             	adc    ecx,0xffffffff
c0004732:	31 f6                	xor    esi,esi
c0004734:	e8 8a d3 ff ff       	call   c0001ac3 <st_qword>
c0004739:	8d 43 54             	lea    eax,[ebx+0x54]
c000473c:	ba 80 00 00 00       	mov    edx,0x80
c0004741:	e8 7a d3 ff ff       	call   c0001ac0 <st_dword>
c0004746:	8d 43 50             	lea    eax,[ebx+0x50]
c0004749:	ba 80 00 00 00       	mov    edx,0x80
c000474e:	e8 6d d3 ff ff       	call   c0001ac0 <st_dword>
c0004753:	ba 02 00 00 00       	mov    edx,0x2
c0004758:	89 f8                	mov    eax,edi
c000475a:	e8 61 d3 ff ff       	call   c0001ac0 <st_dword>
c000475f:	8d 53 38             	lea    edx,[ebx+0x38]
c0004762:	b9 10 00 00 00       	mov    ecx,0x10
c0004767:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000476b:	e8 ad d9 ff ff       	call   c000211d <make_rand>
c0004770:	83 c8 ff             	or     eax,0xffffffff
c0004773:	46                   	inc    esi
c0004774:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004779:	e8 fb d8 ff ff       	call   c0002079 <crc32>
c000477e:	83 fe 5c             	cmp    esi,0x5c
c0004781:	75 f0                	jne    c0004773 <create_partition+0x359>
c0004783:	f7 d0                	not    eax
c0004785:	8d 73 10             	lea    esi,[ebx+0x10]
c0004788:	89 c2                	mov    edx,eax
c000478a:	89 f0                	mov    eax,esi
c000478c:	e8 2f d3 ff ff       	call   c0001ac0 <st_dword>
c0004791:	83 ec 0c             	sub    esp,0xc
c0004794:	6a 01                	push   0x1
c0004796:	6a 00                	push   0x0
c0004798:	6a 01                	push   0x1
c000479a:	53                   	push   ebx
c000479b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479f:	e8 71 d2 ff ff       	call   c0001a15 <disk_write>
c00047a4:	83 c4 20             	add    esp,0x20
c00047a7:	85 c0                	test   eax,eax
c00047a9:	0f 85 9c fc ff ff    	jne    c000444b <create_partition+0x31>
c00047af:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047b3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047b7:	83 c2 ff             	add    edx,0xffffffff
c00047ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bd:	83 d1 ff             	adc    ecx,0xffffffff
c00047c0:	e8 fe d2 ff ff       	call   c0001ac3 <st_qword>
c00047c5:	ba 01 00 00 00       	mov    edx,0x1
c00047ca:	31 c9                	xor    ecx,ecx
c00047cc:	89 e8                	mov    eax,ebp
c00047ce:	e8 f0 d2 ff ff       	call   c0001ac3 <st_qword>
c00047d3:	89 f8                	mov    eax,edi
c00047d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047dd:	31 ff                	xor    edi,edi
c00047df:	e8 df d2 ff ff       	call   c0001ac3 <st_qword>
c00047e4:	89 f0                	mov    eax,esi
c00047e6:	31 d2                	xor    edx,edx
c00047e8:	e8 d3 d2 ff ff       	call   c0001ac0 <st_dword>
c00047ed:	83 c8 ff             	or     eax,0xffffffff
c00047f0:	47                   	inc    edi
c00047f1:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047f6:	e8 7e d8 ff ff       	call   c0002079 <crc32>
c00047fb:	83 ff 5c             	cmp    edi,0x5c
c00047fe:	75 f0                	jne    c00047f0 <create_partition+0x3d6>
c0004800:	f7 d0                	not    eax
c0004802:	89 c2                	mov    edx,eax
c0004804:	89 f0                	mov    eax,esi
c0004806:	e8 b5 d2 ff ff       	call   c0001ac0 <st_dword>
c000480b:	83 ec 0c             	sub    esp,0xc
c000480e:	6a 01                	push   0x1
c0004810:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004814:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004818:	83 c0 ff             	add    eax,0xffffffff
c000481b:	83 d2 ff             	adc    edx,0xffffffff
c000481e:	52                   	push   edx
c000481f:	50                   	push   eax
c0004820:	53                   	push   ebx
c0004821:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004825:	e8 eb d1 ff ff       	call   c0001a15 <disk_write>
c000482a:	83 c4 20             	add    esp,0x20
c000482d:	85 c0                	test   eax,eax
c000482f:	0f 85 16 fc ff ff    	jne    c000444b <create_partition+0x31>
c0004835:	31 d2                	xor    edx,edx
c0004837:	89 d8                	mov    eax,ebx
c0004839:	b9 00 02 00 00       	mov    ecx,0x200
c000483e:	e8 9b d2 ff ff       	call   c0001ade <mem_set>
c0004843:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004849:	b9 10 00 00 00       	mov    ecx,0x10
c000484e:	ba 30 80 02 c0       	mov    edx,0xc0028030
c0004853:	e8 71 d2 ff ff       	call   c0001ac9 <mem_cpy>
c0004858:	e9 21 01 00 00       	jmp    c000497e <create_partition+0x564>
c000485d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004861:	b9 05 00 00 00       	mov    ecx,0x5
c0004866:	89 04 24             	mov    DWORD PTR [esp],eax
c0004869:	bf 08 00 00 00       	mov    edi,0x8
c000486e:	89 f8                	mov    eax,edi
c0004870:	31 d2                	xor    edx,edx
c0004872:	0f b6 f0             	movzx  esi,al
c0004875:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004878:	f7 f6                	div    esi
c000487a:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000487f:	76 0a                	jbe    c000488b <create_partition+0x471>
c0004881:	d1 e7                	shl    edi,1
c0004883:	49                   	dec    ecx
c0004884:	75 e8                	jne    c000486e <create_partition+0x454>
c0004886:	bf ff ff ff ff       	mov    edi,0xffffffff
c000488b:	b9 00 02 00 00       	mov    ecx,0x200
c0004890:	31 d2                	xor    edx,edx
c0004892:	89 d8                	mov    eax,ebx
c0004894:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c000489a:	e8 3f d2 ff ff       	call   c0001ade <mem_set>
c000489f:	b9 64 00 00 00       	mov    ecx,0x64
c00048a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048b1:	f7 f1                	div    ecx
c00048b3:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048bc:	89 f8                	mov    eax,edi
c00048be:	0f b6 c0             	movzx  eax,al
c00048c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048c5:	e9 80 00 00 00       	jmp    c000494a <create_partition+0x530>
c00048ca:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048cd:	29 cf                	sub    edi,ecx
c00048cf:	89 ca                	mov    edx,ecx
c00048d1:	89 f0                	mov    eax,esi
c00048d3:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d8:	e8 e3 d1 ff ff       	call   c0001ac0 <st_dword>
c00048dd:	8d 46 04             	lea    eax,[esi+0x4]
c00048e0:	89 fa                	mov    edx,edi
c00048e2:	83 c6 10             	add    esi,0x10
c00048e5:	e8 d6 d1 ff ff       	call   c0001ac0 <st_dword>
c00048ea:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048f3:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048f7:	89 c8                	mov    eax,ecx
c00048f9:	01 f9                	add    ecx,edi
c00048fb:	f7 f5                	div    ebp
c00048fd:	89 d5                	mov    ebp,edx
c00048ff:	31 d2                	xor    edx,edx
c0004901:	45                   	inc    ebp
c0004902:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004906:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004909:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000490c:	89 c2                	mov    edx,eax
c000490e:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004911:	c1 ea 02             	shr    edx,0x2
c0004914:	83 e2 c0             	and    edx,0xffffffc0
c0004917:	09 ea                	or     edx,ebp
c0004919:	bd 3f 00 00 00       	mov    ebp,0x3f
c000491e:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004921:	31 d2                	xor    edx,edx
c0004923:	f7 f5                	div    ebp
c0004925:	89 d7                	mov    edi,edx
c0004927:	31 d2                	xor    edx,edx
c0004929:	47                   	inc    edi
c000492a:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004931:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004934:	89 c5                	mov    ebp,eax
c0004936:	c1 ed 02             	shr    ebp,0x2
c0004939:	83 e5 c0             	and    ebp,0xffffffc0
c000493c:	09 ef                	or     edi,ebp
c000493e:	89 fa                	mov    edx,edi
c0004940:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004943:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004948:	74 34                	je     c000497e <create_partition+0x564>
c000494a:	85 c9                	test   ecx,ecx
c000494c:	74 30                	je     c000497e <create_partition+0x564>
c000494e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004951:	76 2b                	jbe    c000497e <create_partition+0x564>
c0004953:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004957:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000495b:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000495e:	83 ff 64             	cmp    edi,0x64
c0004961:	76 4b                	jbe    c00049ae <create_partition+0x594>
c0004963:	89 f8                	mov    eax,edi
c0004965:	01 c8                	add    eax,ecx
c0004967:	0f 82 5d ff ff ff    	jb     c00048ca <create_partition+0x4b0>
c000496d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004970:	0f 87 54 ff ff ff    	ja     c00048ca <create_partition+0x4b0>
c0004976:	85 ff                	test   edi,edi
c0004978:	0f 85 51 ff ff ff    	jne    c00048cf <create_partition+0x4b5>
c000497e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004984:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004989:	e8 2e d1 ff ff       	call   c0001abc <st_word>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	6a 01                	push   0x1
c0004993:	6a 00                	push   0x0
c0004995:	6a 00                	push   0x0
c0004997:	53                   	push   ebx
c0004998:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000499c:	e8 74 d0 ff ff       	call   c0001a15 <disk_write>
c00049a1:	83 c4 20             	add    esp,0x20
c00049a4:	85 c0                	test   eax,eax
c00049a6:	0f 95 c0             	setne  al
c00049a9:	0f b6 c0             	movzx  eax,al
c00049ac:	eb 0e                	jmp    c00049bc <create_partition+0x5a2>
c00049ae:	74 07                	je     c00049b7 <create_partition+0x59d>
c00049b0:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049b5:	eb ac                	jmp    c0004963 <create_partition+0x549>
c00049b7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ba:	eb a7                	jmp    c0004963 <create_partition+0x549>
c00049bc:	83 c4 5c             	add    esp,0x5c
c00049bf:	5b                   	pop    ebx
c00049c0:	5e                   	pop    esi
c00049c1:	5f                   	pop    edi
c00049c2:	5d                   	pop    ebp
c00049c3:	c3                   	ret    

c00049c4 <get_fileinfo>:
c00049c4:	55                   	push   ebp
c00049c5:	57                   	push   edi
c00049c6:	56                   	push   esi
c00049c7:	53                   	push   ebx
c00049c8:	83 ec 1c             	sub    esp,0x1c
c00049cb:	8b 30                	mov    esi,DWORD PTR [eax]
c00049cd:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d5:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d8:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049db:	0f 84 dc 01 00 00    	je     c0004bbd <get_fileinfo+0x1f9>
c00049e1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e4:	75 0f                	jne    c00049f5 <get_fileinfo+0x31>
c00049e6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049e9:	83 c4 1c             	add    esp,0x1c
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	5d                   	pop    ebp
c00049f0:	e9 58 d5 ff ff       	jmp    c0001f4d <get_xfileinfo>
c00049f5:	89 d3                	mov    ebx,edx
c00049f7:	89 c6                	mov    esi,eax
c00049f9:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fd:	74 6a                	je     c0004a69 <get_fileinfo+0xa5>
c00049ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a07:	31 ed                	xor    ebp,ebp
c0004a09:	31 ff                	xor    edi,edi
c0004a0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a16:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a1a:	66 85 d2             	test   dx,dx
c0004a1d:	74 3e                	je     c0004a5d <get_fileinfo+0x99>
c0004a1f:	66 85 ed             	test   bp,bp
c0004a22:	75 0c                	jne    c0004a30 <get_fileinfo+0x6c>
c0004a24:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a2a:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2e:	76 22                	jbe    c0004a52 <get_fileinfo+0x8e>
c0004a30:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a35:	89 e8                	mov    eax,ebp
c0004a37:	29 f9                	sub    ecx,edi
c0004a39:	c1 e0 10             	shl    eax,0x10
c0004a3c:	09 d0                	or     eax,edx
c0004a3e:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a42:	e8 a3 d1 ff ff       	call   c0001bea <put_utf>
c0004a47:	84 c0                	test   al,al
c0004a49:	74 10                	je     c0004a5b <get_fileinfo+0x97>
c0004a4b:	0f b6 c0             	movzx  eax,al
c0004a4e:	31 d2                	xor    edx,edx
c0004a50:	01 c7                	add    edi,eax
c0004a52:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a57:	89 d5                	mov    ebp,edx
c0004a59:	eb b0                	jmp    c0004a0b <get_fileinfo+0x47>
c0004a5b:	31 ff                	xor    edi,edi
c0004a5d:	66 85 ed             	test   bp,bp
c0004a60:	74 02                	je     c0004a64 <get_fileinfo+0xa0>
c0004a62:	31 ff                	xor    edi,edi
c0004a64:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a69:	31 ff                	xor    edi,edi
c0004a6b:	31 c9                	xor    ecx,ecx
c0004a6d:	83 f9 0a             	cmp    ecx,0xa
c0004a70:	0f 87 ad 00 00 00    	ja     c0004b23 <get_fileinfo+0x15f>
c0004a76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a79:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7c:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a80:	66 83 fa 20          	cmp    dx,0x20
c0004a84:	0f 84 92 00 00 00    	je     c0004b1c <get_fileinfo+0x158>
c0004a8a:	66 83 fa 05          	cmp    dx,0x5
c0004a8e:	75 05                	jne    c0004a95 <get_fileinfo+0xd1>
c0004a90:	ba e5 00 00 00       	mov    edx,0xe5
c0004a95:	83 ff 0b             	cmp    edi,0xb
c0004a98:	77 0b                	ja     c0004aa5 <get_fileinfo+0xe1>
c0004a9a:	83 fd 09             	cmp    ebp,0x9
c0004a9d:	75 06                	jne    c0004aa5 <get_fileinfo+0xe1>
c0004a9f:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa4:	47                   	inc    edi
c0004aa5:	0f b7 c2             	movzx  eax,dx
c0004aa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aac:	e8 6d d0 ff ff       	call   c0001b1e <dbc_1st>
c0004ab1:	85 c0                	test   eax,eax
c0004ab3:	74 2f                	je     c0004ae4 <get_fileinfo+0x120>
c0004ab5:	83 fd 08             	cmp    ebp,0x8
c0004ab8:	74 2a                	je     c0004ae4 <get_fileinfo+0x120>
c0004aba:	83 fd 0b             	cmp    ebp,0xb
c0004abd:	74 25                	je     c0004ae4 <get_fileinfo+0x120>
c0004abf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac2:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aca:	e8 52 d0 ff ff       	call   c0001b21 <dbc_2nd>
c0004acf:	85 c0                	test   eax,eax
c0004ad1:	74 11                	je     c0004ae4 <get_fileinfo+0x120>
c0004ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004adc:	c1 e2 08             	shl    edx,0x8
c0004adf:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ae2:	09 c2                	or     edx,eax
c0004ae4:	0f b7 d2             	movzx  edx,dx
c0004ae7:	50                   	push   eax
c0004ae8:	50                   	push   eax
c0004ae9:	68 b5 01 00 00       	push   0x1b5
c0004aee:	52                   	push   edx
c0004aef:	e8 46 38 00 00       	call   c000833a <ff_oem2uni>
c0004af4:	83 c4 10             	add    esp,0x10
c0004af7:	66 85 c0             	test   ax,ax
c0004afa:	75 04                	jne    c0004b00 <get_fileinfo+0x13c>
c0004afc:	31 ff                	xor    edi,edi
c0004afe:	eb 23                	jmp    c0004b23 <get_fileinfo+0x15f>
c0004b00:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b05:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b09:	29 f9                	sub    ecx,edi
c0004b0b:	0f b7 c0             	movzx  eax,ax
c0004b0e:	e8 d7 d0 ff ff       	call   c0001bea <put_utf>
c0004b13:	84 c0                	test   al,al
c0004b15:	74 e5                	je     c0004afc <get_fileinfo+0x138>
c0004b17:	0f b6 c0             	movzx  eax,al
c0004b1a:	01 c7                	add    edi,eax
c0004b1c:	89 e9                	mov    ecx,ebp
c0004b1e:	e9 4a ff ff ff       	jmp    c0004a6d <get_fileinfo+0xa9>
c0004b23:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b28:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2c:	75 54                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b2e:	85 ff                	test   edi,edi
c0004b30:	75 0b                	jne    c0004b3d <get_fileinfo+0x179>
c0004b32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b36:	ba 01 00 00 00       	mov    edx,0x1
c0004b3b:	eb 33                	jmp    c0004b70 <get_fileinfo+0x1ac>
c0004b3d:	b1 08                	mov    cl,0x8
c0004b3f:	31 d2                	xor    edx,edx
c0004b41:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b47:	84 c0                	test   al,al
c0004b49:	74 25                	je     c0004b70 <get_fileinfo+0x1ac>
c0004b4b:	66 83 f8 2e          	cmp    ax,0x2e
c0004b4f:	74 16                	je     c0004b67 <get_fileinfo+0x1a3>
c0004b51:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b54:	66 83 ff 19          	cmp    di,0x19
c0004b58:	77 0f                	ja     c0004b69 <get_fileinfo+0x1a5>
c0004b5a:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5d:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b60:	74 07                	je     c0004b69 <get_fileinfo+0x1a5>
c0004b62:	83 c0 20             	add    eax,0x20
c0004b65:	eb 02                	jmp    c0004b69 <get_fileinfo+0x1a5>
c0004b67:	b1 10                	mov    cl,0x10
c0004b69:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6d:	42                   	inc    edx
c0004b6e:	eb d1                	jmp    c0004b41 <get_fileinfo+0x17d>
c0004b70:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7c:	75 04                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b7e:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b88:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8e:	83 c0 1c             	add    eax,0x1c
c0004b91:	e8 c1 ce ff ff       	call   c0001a57 <ld_dword>
c0004b96:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9d:	89 03                	mov    DWORD PTR [ebx],eax
c0004b9f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba2:	83 c0 16             	add    eax,0x16
c0004ba5:	e8 a0 ce ff ff       	call   c0001a4a <ld_word>
c0004baa:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bae:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb1:	83 c0 18             	add    eax,0x18
c0004bb4:	e8 91 ce ff ff       	call   c0001a4a <ld_word>
c0004bb9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbd:	83 c4 1c             	add    esp,0x1c
c0004bc0:	5b                   	pop    ebx
c0004bc1:	5e                   	pop    esi
c0004bc2:	5f                   	pop    edi
c0004bc3:	5d                   	pop    ebp
c0004bc4:	c3                   	ret    

c0004bc5 <ld_clust.isra.0>:
c0004bc5:	56                   	push   esi
c0004bc6:	89 c6                	mov    esi,eax
c0004bc8:	53                   	push   ebx
c0004bc9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bcc:	89 d3                	mov    ebx,edx
c0004bce:	e8 77 ce ff ff       	call   c0001a4a <ld_word>
c0004bd3:	0f b7 c8             	movzx  ecx,ax
c0004bd6:	89 f0                	mov    eax,esi
c0004bd8:	3c 03                	cmp    al,0x3
c0004bda:	75 0d                	jne    c0004be9 <ld_clust.isra.0+0x24>
c0004bdc:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bdf:	e8 66 ce ff ff       	call   c0001a4a <ld_word>
c0004be4:	c1 e0 10             	shl    eax,0x10
c0004be7:	09 c1                	or     ecx,eax
c0004be9:	89 c8                	mov    eax,ecx
c0004beb:	5b                   	pop    ebx
c0004bec:	5e                   	pop    esi
c0004bed:	c3                   	ret    

c0004bee <st_clust.isra.1>:
c0004bee:	56                   	push   esi
c0004bef:	89 c6                	mov    esi,eax
c0004bf1:	53                   	push   ebx
c0004bf2:	89 d3                	mov    ebx,edx
c0004bf4:	0f b7 d1             	movzx  edx,cx
c0004bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bfa:	e8 bd ce ff ff       	call   c0001abc <st_word>
c0004bff:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c02:	75 0f                	jne    c0004c13 <st_clust.isra.1+0x25>
c0004c04:	c1 e9 10             	shr    ecx,0x10
c0004c07:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c0a:	89 ca                	mov    edx,ecx
c0004c0c:	5b                   	pop    ebx
c0004c0d:	5e                   	pop    esi
c0004c0e:	e9 a9 ce ff ff       	jmp    c0001abc <st_word>
c0004c13:	5b                   	pop    ebx
c0004c14:	5e                   	pop    esi
c0004c15:	c3                   	ret    

c0004c16 <init_alloc_info.isra.2>:
c0004c16:	56                   	push   esi
c0004c17:	53                   	push   ebx
c0004c18:	89 c6                	mov    esi,eax
c0004c1a:	89 d3                	mov    ebx,edx
c0004c1c:	51                   	push   ecx
c0004c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c1f:	83 c0 34             	add    eax,0x34
c0004c22:	e8 30 ce ff ff       	call   c0001a57 <ld_dword>
c0004c27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2c:	83 c0 38             	add    eax,0x38
c0004c2f:	e8 3b ce ff ff       	call   c0001a6f <ld_qword>
c0004c34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c37:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3c:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c3f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c46:	83 e0 02             	and    eax,0x2
c0004c49:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4c:	5b                   	pop    ebx
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	c3                   	ret    

c0004c50 <follow_path>:
c0004c50:	56                   	push   esi
c0004c51:	53                   	push   ebx
c0004c52:	89 c3                	mov    ebx,eax
c0004c54:	83 ec 14             	sub    esp,0x14
c0004c57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c5b:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c61:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c63:	80 fa 5c             	cmp    dl,0x5c
c0004c66:	75 07                	jne    c0004c6f <follow_path+0x1f>
c0004c68:	40                   	inc    eax
c0004c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6d:	eb ee                	jmp    c0004c5d <follow_path+0xd>
c0004c6f:	80 fa 2f             	cmp    dl,0x2f
c0004c72:	74 f4                	je     c0004c68 <follow_path+0x18>
c0004c74:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c7b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c82:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c85:	77 52                	ja     c0004cd9 <follow_path+0x89>
c0004c87:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c8b:	31 d2                	xor    edx,edx
c0004c8d:	89 d8                	mov    eax,ebx
c0004c8f:	e8 12 e3 ff ff       	call   c0002fa6 <dir_sdi>
c0004c94:	eb 7c                	jmp    c0004d12 <follow_path+0xc2>
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 6e f2 ff ff       	call   c0003f0b <dir_find>
c0004c9d:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca0:	85 c0                	test   eax,eax
c0004ca2:	75 46                	jne    c0004cea <follow_path+0x9a>
c0004ca4:	80 e2 04             	and    dl,0x4
c0004ca7:	75 69                	jne    c0004d12 <follow_path+0xc2>
c0004ca9:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cad:	74 5e                	je     c0004d0d <follow_path+0xbd>
c0004caf:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb1:	3c 04                	cmp    al,0x4
c0004cb3:	75 41                	jne    c0004cf6 <follow_path+0xa6>
c0004cb5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cbc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cbf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc2:	30 c0                	xor    al,al
c0004cc4:	09 d0                	or     eax,edx
c0004cc6:	89 da                	mov    edx,ebx
c0004cc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ccb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cce:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd1:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd4:	e8 3d ff ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004cd9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cdd:	89 d8                	mov    eax,ebx
c0004cdf:	e8 a9 ed ff ff       	call   c0003a8d <create_name>
c0004ce4:	85 c0                	test   eax,eax
c0004ce6:	74 ae                	je     c0004c96 <follow_path+0x46>
c0004ce8:	eb 28                	jmp    c0004d12 <follow_path+0xc2>
c0004cea:	83 f8 04             	cmp    eax,0x4
c0004ced:	75 23                	jne    c0004d12 <follow_path+0xc2>
c0004cef:	80 e2 04             	and    dl,0x4
c0004cf2:	74 19                	je     c0004d0d <follow_path+0xbd>
c0004cf4:	eb 1c                	jmp    c0004d12 <follow_path+0xc2>
c0004cf6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cf9:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cff:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d03:	e8 bd fe ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004d08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d0b:	eb cc                	jmp    c0004cd9 <follow_path+0x89>
c0004d0d:	b8 05 00 00 00       	mov    eax,0x5
c0004d12:	83 c4 14             	add    esp,0x14
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	c3                   	ret    

c0004d18 <f_mount>:
c0004d18:	53                   	push   ebx
c0004d19:	83 ec 18             	sub    esp,0x18
c0004d1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d20:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2c:	e8 fb d2 ff ff       	call   c000202c <get_ldnumber>
c0004d31:	89 c2                	mov    edx,eax
c0004d33:	b8 0b 00 00 00       	mov    eax,0xb
c0004d38:	85 d2                	test   edx,edx
c0004d3a:	78 39                	js     c0004d75 <f_mount+0x5d>
c0004d3c:	8b 04 95 20 cd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd32e0]
c0004d43:	85 c0                	test   eax,eax
c0004d45:	74 03                	je     c0004d4a <f_mount+0x32>
c0004d47:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4e:	85 c0                	test   eax,eax
c0004d50:	74 03                	je     c0004d55 <f_mount+0x3d>
c0004d52:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d59:	89 04 95 20 cd 02 c0 	mov    DWORD PTR [edx*4-0x3ffd32e0],eax
c0004d60:	31 c0                	xor    eax,eax
c0004d62:	84 db                	test   bl,bl
c0004d64:	74 0f                	je     c0004d75 <f_mount+0x5d>
c0004d66:	31 c9                	xor    ecx,ecx
c0004d68:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d70:	e8 65 d7 ff ff       	call   c00024da <mount_volume>
c0004d75:	83 c4 18             	add    esp,0x18
c0004d78:	5b                   	pop    ebx
c0004d79:	c3                   	ret    

c0004d7a <f_open>:
c0004d7a:	55                   	push   ebp
c0004d7b:	bd 09 00 00 00       	mov    ebp,0x9
c0004d80:	57                   	push   edi
c0004d81:	56                   	push   esi
c0004d82:	53                   	push   ebx
c0004d83:	83 ec 7c             	sub    esp,0x7c
c0004d86:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8d:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d94:	85 db                	test   ebx,ebx
c0004d96:	0f 84 10 04 00 00    	je     c00051ac <f_open+0x432>
c0004d9c:	89 fe                	mov    esi,edi
c0004d9e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da2:	83 e6 3f             	and    esi,0x3f
c0004da5:	89 f0                	mov    eax,esi
c0004da7:	0f b6 c8             	movzx  ecx,al
c0004daa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db1:	e8 24 d7 ff ff       	call   c00024da <mount_volume>
c0004db6:	89 c5                	mov    ebp,eax
c0004db8:	85 c0                	test   eax,eax
c0004dba:	0f 85 e6 03 00 00    	jne    c00051a6 <f_open+0x42c>
c0004dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc4:	bd 11 00 00 00       	mov    ebp,0x11
c0004dc9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	68 60 04 00 00       	push   0x460
c0004dd5:	e8 a3 34 00 00       	call   c000827d <ff_memalloc>
c0004dda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de6:	0f 84 c0 03 00 00    	je     c00051ac <f_open+0x432>
c0004dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df4:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dfa:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e00:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e0b:	e8 40 fe ff ff       	call   c0004c50 <follow_path>
c0004e10:	89 c5                	mov    ebp,eax
c0004e12:	85 c0                	test   eax,eax
c0004e14:	75 0c                	jne    c0004e22 <f_open+0xa8>
c0004e16:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e1b:	79 05                	jns    c0004e22 <f_open+0xa8>
c0004e1d:	bd 06 00 00 00       	mov    ebp,0x6
c0004e22:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e28:	0f 84 84 01 00 00    	je     c0004fb2 <f_open+0x238>
c0004e2e:	85 ed                	test   ebp,ebp
c0004e30:	74 20                	je     c0004e52 <f_open+0xd8>
c0004e32:	83 fd 04             	cmp    ebp,0x4
c0004e35:	0f 85 58 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e3f:	83 ce 08             	or     esi,0x8
c0004e42:	e8 8a f2 ff ff       	call   c00040d1 <dir_register>
c0004e47:	89 c5                	mov    ebp,eax
c0004e49:	85 c0                	test   eax,eax
c0004e4b:	74 2f                	je     c0004e7c <f_open+0x102>
c0004e4d:	e9 41 03 00 00       	jmp    c0005193 <f_open+0x419>
c0004e52:	bd 07 00 00 00       	mov    ebp,0x7
c0004e57:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5c:	0f 85 31 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e62:	bd 08 00 00 00       	mov    ebp,0x8
c0004e67:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6d:	0f 85 20 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e73:	83 e7 08             	and    edi,0x8
c0004e76:	0f 84 65 01 00 00    	je     c0004fe1 <f_open+0x267>
c0004e7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e80:	8a 02                	mov    al,BYTE PTR [edx]
c0004e82:	3c 04                	cmp    al,0x4
c0004e84:	0f 85 97 00 00 00    	jne    c0004f21 <f_open+0x1a7>
c0004e8a:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8d:	89 13                	mov    DWORD PTR [ebx],edx
c0004e8f:	89 da                	mov    edx,ebx
c0004e91:	e8 80 fd ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004e96:	31 d2                	xor    edx,edx
c0004e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9c:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea4:	83 c0 02             	add    eax,0x2
c0004ea7:	e8 32 cc ff ff       	call   c0001ade <mem_set>
c0004eac:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb1:	31 d2                	xor    edx,edx
c0004eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eba:	83 c0 26             	add    eax,0x26
c0004ebd:	e8 1c cc ff ff       	call   c0001ade <mem_set>
c0004ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ec9:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ecd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed5:	83 c0 08             	add    eax,0x8
c0004ed8:	e8 e3 cb ff ff       	call   c0001ac0 <st_dword>
c0004edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee4:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eec:	e8 b7 ea ff ff       	call   c00039a8 <store_xdir>
c0004ef1:	89 c5                	mov    ebp,eax
c0004ef3:	85 c0                	test   eax,eax
c0004ef5:	0f 85 98 02 00 00    	jne    c0005193 <f_open+0x419>
c0004efb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004efe:	85 d2                	test   edx,edx
c0004f00:	0f 84 db 00 00 00    	je     c0004fe1 <f_open+0x267>
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	89 d8                	mov    eax,ebx
c0004f0a:	e8 8e e3 ff ff       	call   c000329d <remove_chain>
c0004f0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f13:	89 c5                	mov    ebp,eax
c0004f15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f18:	48                   	dec    eax
c0004f19:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1c:	e9 b8 00 00 00       	jmp    c0004fd9 <f_open+0x25f>
c0004f21:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f25:	89 ea                	mov    edx,ebp
c0004f27:	e8 99 fc ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004f2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f31:	89 c7                	mov    edi,eax
c0004f33:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f36:	e8 85 cb ff ff       	call   c0001ac0 <st_dword>
c0004f3b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f3f:	31 c9                	xor    ecx,ecx
c0004f41:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f49:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4d:	e8 9c fc ff ff       	call   c0004bee <st_clust.isra.1>
c0004f52:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f56:	31 d2                	xor    edx,edx
c0004f58:	83 c0 1c             	add    eax,0x1c
c0004f5b:	e8 60 cb ff ff       	call   c0001ac0 <st_dword>
c0004f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f64:	85 ff                	test   edi,edi
c0004f66:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f6a:	74 75                	je     c0004fe1 <f_open+0x267>
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	31 c9                	xor    ecx,ecx
c0004f72:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f75:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f80:	89 fa                	mov    edx,edi
c0004f82:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f86:	e8 12 e3 ff ff       	call   c000329d <remove_chain>
c0004f8b:	89 c5                	mov    ebp,eax
c0004f8d:	85 c0                	test   eax,eax
c0004f8f:	0f 85 fe 01 00 00    	jne    c0005193 <f_open+0x419>
c0004f95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	4f                   	dec    edi
c0004fa2:	e8 81 d2 ff ff       	call   c0002228 <move_window>
c0004fa7:	89 c5                	mov    ebp,eax
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb0:	eb 27                	jmp    c0004fd9 <f_open+0x25f>
c0004fb2:	85 ed                	test   ebp,ebp
c0004fb4:	0f 85 d9 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fba:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbe:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc3:	a8 10                	test   al,0x10
c0004fc5:	0f 85 c8 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fcb:	83 e7 02             	and    edi,0x2
c0004fce:	74 11                	je     c0004fe1 <f_open+0x267>
c0004fd0:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd5:	a8 01                	test   al,0x1
c0004fd7:	eb 02                	jmp    c0004fdb <f_open+0x261>
c0004fd9:	85 ed                	test   ebp,ebp
c0004fdb:	0f 85 b2 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fe1:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe7:	74 03                	je     c0004fec <f_open+0x272>
c0004fe9:	83 ce 40             	or     esi,0x40
c0004fec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff0:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff3:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff6:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ff9:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005000:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005003:	8a 02                	mov    al,BYTE PTR [edx]
c0005005:	3c 04                	cmp    al,0x4
c0005007:	75 2a                	jne    c0005033 <f_open+0x2b9>
c0005009:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500d:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005012:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005015:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005019:	30 c0                	xor    al,al
c000501b:	09 c8                	or     eax,ecx
c000501d:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005020:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005024:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005027:	8d 42 10             	lea    eax,[edx+0x10]
c000502a:	89 da                	mov    edx,ebx
c000502c:	e8 e5 fb ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005031:	eb 1c                	jmp    c000504f <f_open+0x2d5>
c0005033:	89 fa                	mov    edx,edi
c0005035:	e8 8b fb ff ff       	call   c0004bc5 <ld_clust.isra.0>
c000503a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503d:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005040:	e8 12 ca ff ff       	call   c0001a57 <ld_dword>
c0005045:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000504f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005053:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000505a:	89 03                	mov    DWORD PTR [ebx],eax
c000505c:	31 d2                	xor    edx,edx
c000505e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005062:	b9 00 02 00 00       	mov    ecx,0x200
c0005067:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000506b:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000506f:	89 f0                	mov    eax,esi
c0005071:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005078:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000507b:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005082:	8d 43 50             	lea    eax,[ebx+0x50]
c0005085:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005093:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005097:	e8 42 ca ff ff       	call   c0001ade <mem_set>
c000509c:	83 e6 20             	and    esi,0x20
c000509f:	75 07                	jne    c00050a8 <f_open+0x32e>
c00050a1:	31 ed                	xor    ebp,ebp
c00050a3:	e9 eb 00 00 00       	jmp    c0005193 <f_open+0x419>
c00050a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050ab:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050ba:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050be:	74 e1                	je     c00050a1 <f_open+0x327>
c00050c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050cb:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d5:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050d9:	31 ff                	xor    edi,edi
c00050db:	c1 e5 09             	shl    ebp,0x9
c00050de:	89 ee                	mov    esi,ebp
c00050e0:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e4:	89 f8                	mov    eax,edi
c00050e6:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050ea:	73 22                	jae    c000510e <f_open+0x394>
c00050ec:	89 d8                	mov    eax,ebx
c00050ee:	e8 bd dc ff ff       	call   c0002db0 <get_fat>
c00050f3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f7:	89 c2                	mov    edx,eax
c00050f9:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fd:	83 f8 01             	cmp    eax,0x1
c0005100:	76 10                	jbe    c0005112 <f_open+0x398>
c0005102:	83 f8 ff             	cmp    eax,0xffffffff
c0005105:	75 d9                	jne    c00050e0 <f_open+0x366>
c0005107:	bd 01 00 00 00       	mov    ebp,0x1
c000510c:	eb 09                	jmp    c0005117 <f_open+0x39d>
c000510e:	31 ed                	xor    ebp,ebp
c0005110:	eb 05                	jmp    c0005117 <f_open+0x39d>
c0005112:	bd 02 00 00 00       	mov    ebp,0x2
c0005117:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000511a:	85 ed                	test   ebp,ebp
c000511c:	75 75                	jne    c0005193 <f_open+0x419>
c000511e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005122:	25 ff 01 00 00       	and    eax,0x1ff
c0005127:	0f 84 74 ff ff ff    	je     c00050a1 <f_open+0x327>
c000512d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005131:	bd 02 00 00 00       	mov    ebp,0x2
c0005136:	89 c8                	mov    eax,ecx
c0005138:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513c:	e8 a2 cb ff ff       	call   c0001ce3 <clst2sect>
c0005141:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005145:	89 d7                	mov    edi,edx
c0005147:	09 c7                	or     edi,eax
c0005149:	74 48                	je     c0005193 <f_open+0x419>
c000514b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000514f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000515b:	0f ac fe 09          	shrd   esi,edi,0x9
c000515f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005163:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005167:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000516a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516e:	83 ec 0c             	sub    esp,0xc
c0005171:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005174:	6a 01                	push   0x1
c0005176:	52                   	push   edx
c0005177:	50                   	push   eax
c0005178:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005180:	50                   	push   eax
c0005181:	e8 79 c8 ff ff       	call   c00019ff <disk_read>
c0005186:	83 c4 20             	add    esp,0x20
c0005189:	85 c0                	test   eax,eax
c000518b:	0f 95 c0             	setne  al
c000518e:	0f b6 c0             	movzx  eax,al
c0005191:	89 c5                	mov    ebp,eax
c0005193:	83 ec 0c             	sub    esp,0xc
c0005196:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000519a:	e8 f4 30 00 00       	call   c0008293 <ff_memfree>
c000519f:	83 c4 10             	add    esp,0x10
c00051a2:	85 ed                	test   ebp,ebp
c00051a4:	74 06                	je     c00051ac <f_open+0x432>
c00051a6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ac:	83 c4 7c             	add    esp,0x7c
c00051af:	89 e8                	mov    eax,ebp
c00051b1:	5b                   	pop    ebx
c00051b2:	5e                   	pop    esi
c00051b3:	5f                   	pop    edi
c00051b4:	5d                   	pop    ebp
c00051b5:	c3                   	ret    

c00051b6 <f_read>:
c00051b6:	55                   	push   ebp
c00051b7:	57                   	push   edi
c00051b8:	56                   	push   esi
c00051b9:	53                   	push   ebx
c00051ba:	83 ec 2c             	sub    esp,0x2c
c00051bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051cb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051cf:	89 d8                	mov    eax,ebx
c00051d1:	e8 77 cf ff ff       	call   c000214d <validate>
c00051d6:	89 c5                	mov    ebp,eax
c00051d8:	85 c0                	test   eax,eax
c00051da:	0f 85 4c 02 00 00    	jne    c000542c <f_read+0x276>
c00051e0:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e4:	85 ed                	test   ebp,ebp
c00051e6:	0f 85 40 02 00 00    	jne    c000542c <f_read+0x276>
c00051ec:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f0:	0f 84 31 02 00 00    	je     c0005427 <f_read+0x271>
c00051f6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051f9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fc:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051ff:	bf 00 00 00 00       	mov    edi,0x0
c0005204:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005207:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000520b:	89 d1                	mov    ecx,edx
c000520d:	19 f9                	sbb    ecx,edi
c000520f:	0f 83 cf 00 00 00    	jae    c00052e4 <f_read+0x12e>
c0005215:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005219:	e9 c6 00 00 00       	jmp    c00052e4 <f_read+0x12e>
c000521e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005221:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005224:	89 d0                	mov    eax,edx
c0005226:	25 ff 01 00 00       	and    eax,0x1ff
c000522b:	0f 85 c9 01 00 00    	jne    c00053fa <f_read+0x244>
c0005231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005235:	89 d6                	mov    esi,edx
c0005237:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000523b:	89 cf                	mov    edi,ecx
c000523d:	48                   	dec    eax
c000523e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005242:	21 f0                	and    eax,esi
c0005244:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005248:	0f 84 a6 00 00 00    	je     c00052f4 <f_read+0x13e>
c000524e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 c8                	mov    eax,ecx
c0005257:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000525a:	e8 84 ca ff ff       	call   c0001ce3 <clst2sect>
c000525f:	89 d7                	mov    edi,edx
c0005261:	09 c7                	or     edi,eax
c0005263:	0f 84 b4 00 00 00    	je     c000531d <f_read+0x167>
c0005269:	31 ff                	xor    edi,edi
c000526b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000526f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005272:	01 c6                	add    esi,eax
c0005274:	11 d7                	adc    edi,edx
c0005276:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527e:	0f 86 fd 00 00 00    	jbe    c0005381 <f_read+0x1cb>
c0005284:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005288:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528c:	c1 e8 09             	shr    eax,0x9
c000528f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005292:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005296:	03 14 24             	add    edx,DWORD PTR [esp]
c0005299:	39 c2                	cmp    edx,eax
c000529b:	76 07                	jbe    c00052a4 <f_read+0xee>
c000529d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ab:	57                   	push   edi
c00052ac:	56                   	push   esi
c00052ad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b5:	50                   	push   eax
c00052b6:	e8 44 c7 ff ff       	call   c00019ff <disk_read>
c00052bb:	83 c4 20             	add    esp,0x20
c00052be:	85 c0                	test   eax,eax
c00052c0:	75 6e                	jne    c0005330 <f_read+0x17a>
c00052c2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c6:	78 7e                	js     c0005346 <f_read+0x190>
c00052c8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052cb:	c1 e6 09             	shl    esi,0x9
c00052ce:	31 ff                	xor    edi,edi
c00052d0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052dc:	01 30                	add    DWORD PTR [eax],esi
c00052de:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052e9:	0f 85 2f ff ff ff    	jne    c000521e <f_read+0x68>
c00052ef:	e9 38 01 00 00       	jmp    c000542c <f_read+0x276>
c00052f4:	89 c8                	mov    eax,ecx
c00052f6:	09 d0                	or     eax,edx
c00052f8:	75 05                	jne    c00052ff <f_read+0x149>
c00052fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fd:	eb 19                	jmp    c0005318 <f_read+0x162>
c00052ff:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005303:	74 09                	je     c000530e <f_read+0x158>
c0005305:	89 d8                	mov    eax,ebx
c0005307:	e8 f8 c9 ff ff       	call   c0001d04 <clmt_clust>
c000530c:	eb 0a                	jmp    c0005318 <f_read+0x162>
c000530e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005311:	89 d8                	mov    eax,ebx
c0005313:	e8 98 da ff ff       	call   c0002db0 <get_fat>
c0005318:	83 f8 01             	cmp    eax,0x1
c000531b:	77 0e                	ja     c000532b <f_read+0x175>
c000531d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005321:	bd 02 00 00 00       	mov    ebp,0x2
c0005326:	e9 01 01 00 00       	jmp    c000542c <f_read+0x276>
c000532b:	83 f8 ff             	cmp    eax,0xffffffff
c000532e:	75 0e                	jne    c000533e <f_read+0x188>
c0005330:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005334:	bd 01 00 00 00       	mov    ebp,0x1
c0005339:	e9 ee 00 00 00       	jmp    c000542c <f_read+0x276>
c000533e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005341:	e9 08 ff ff ff       	jmp    c000524e <f_read+0x98>
c0005346:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005349:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534c:	29 f0                	sub    eax,esi
c000534e:	19 fa                	sbb    edx,edi
c0005350:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005353:	89 d7                	mov    edi,edx
c0005355:	ba 00 00 00 00       	mov    edx,0x0
c000535a:	89 f9                	mov    ecx,edi
c000535c:	19 d1                	sbb    ecx,edx
c000535e:	0f 83 64 ff ff ff    	jae    c00052c8 <f_read+0x112>
c0005364:	89 c7                	mov    edi,eax
c0005366:	8d 53 50             	lea    edx,[ebx+0x50]
c0005369:	c1 e7 09             	shl    edi,0x9
c000536c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005370:	b9 00 02 00 00       	mov    ecx,0x200
c0005375:	01 f8                	add    eax,edi
c0005377:	e8 4d c7 ff ff       	call   c0001ac9 <mem_cpy>
c000537c:	e9 47 ff ff ff       	jmp    c00052c8 <f_read+0x112>
c0005381:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005384:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005387:	89 04 24             	mov    DWORD PTR [esp],eax
c000538a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538e:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005392:	75 05                	jne    c0005399 <f_read+0x1e3>
c0005394:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005397:	74 5b                	je     c00053f4 <f_read+0x23e>
c0005399:	8d 43 50             	lea    eax,[ebx+0x50]
c000539c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a4:	79 2a                	jns    c00053d0 <f_read+0x21a>
c00053a6:	83 ec 0c             	sub    esp,0xc
c00053a9:	6a 01                	push   0x1
c00053ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bb:	50                   	push   eax
c00053bc:	e8 54 c6 ff ff       	call   c0001a15 <disk_write>
c00053c1:	83 c4 20             	add    esp,0x20
c00053c4:	85 c0                	test   eax,eax
c00053c6:	0f 85 64 ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053cc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d0:	83 ec 0c             	sub    esp,0xc
c00053d3:	6a 01                	push   0x1
c00053d5:	57                   	push   edi
c00053d6:	56                   	push   esi
c00053d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053df:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e3:	50                   	push   eax
c00053e4:	e8 16 c6 ff ff       	call   c00019ff <disk_read>
c00053e9:	83 c4 20             	add    esp,0x20
c00053ec:	85 c0                	test   eax,eax
c00053ee:	0f 85 3c ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053f4:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f7:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053fa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fd:	ba 00 02 00 00       	mov    edx,0x200
c0005402:	25 ff 01 00 00       	and    eax,0x1ff
c0005407:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000540b:	29 c2                	sub    edx,eax
c000540d:	39 d6                	cmp    esi,edx
c000540f:	76 02                	jbe    c0005413 <f_read+0x25d>
c0005411:	89 d6                	mov    esi,edx
c0005413:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005417:	89 f1                	mov    ecx,esi
c0005419:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541d:	e8 a7 c6 ff ff       	call   c0001ac9 <mem_cpy>
c0005422:	e9 a7 fe ff ff       	jmp    c00052ce <f_read+0x118>
c0005427:	bd 07 00 00 00       	mov    ebp,0x7
c000542c:	83 c4 2c             	add    esp,0x2c
c000542f:	89 e8                	mov    eax,ebp
c0005431:	5b                   	pop    ebx
c0005432:	5e                   	pop    esi
c0005433:	5f                   	pop    edi
c0005434:	5d                   	pop    ebp
c0005435:	c3                   	ret    

c0005436 <f_write>:
c0005436:	55                   	push   ebp
c0005437:	57                   	push   edi
c0005438:	56                   	push   esi
c0005439:	53                   	push   ebx
c000543a:	83 ec 2c             	sub    esp,0x2c
c000543d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005441:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005445:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000544b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000544f:	89 d8                	mov    eax,ebx
c0005451:	e8 f7 cc ff ff       	call   c000214d <validate>
c0005456:	89 c5                	mov    ebp,eax
c0005458:	85 c0                	test   eax,eax
c000545a:	0f 85 86 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c0005460:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005464:	85 ed                	test   ebp,ebp
c0005466:	0f 85 7a 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c000546c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005470:	0f 84 6b 02 00 00    	je     c00056e1 <f_write+0x2ab>
c0005476:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547d:	0f 84 43 01 00 00    	je     c00055c6 <f_write+0x190>
c0005483:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005486:	89 c1                	mov    ecx,eax
c0005488:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548c:	0f 83 34 01 00 00    	jae    c00055c6 <f_write+0x190>
c0005492:	f7 d0                	not    eax
c0005494:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005498:	e9 29 01 00 00       	jmp    c00055c6 <f_write+0x190>
c000549d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a3:	89 d0                	mov    eax,edx
c00054a5:	25 ff 01 00 00       	and    eax,0x1ff
c00054aa:	0f 85 00 02 00 00    	jne    c00056b0 <f_write+0x27a>
c00054b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b4:	89 d6                	mov    esi,edx
c00054b6:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054ba:	89 cf                	mov    edi,ecx
c00054bc:	48                   	dec    eax
c00054bd:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c1:	21 f0                	and    eax,esi
c00054c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c7:	0f 84 06 01 00 00    	je     c00055d3 <f_write+0x19d>
c00054cd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d1:	0f 88 6e 01 00 00    	js     c0005645 <f_write+0x20f>
c00054d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054db:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054de:	89 c8                	mov    eax,ecx
c00054e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e4:	e8 fa c7 ff ff       	call   c0001ce3 <clst2sect>
c00054e9:	89 d1                	mov    ecx,edx
c00054eb:	09 c1                	or     ecx,eax
c00054ed:	0f 84 1c 01 00 00    	je     c000560f <f_write+0x1d9>
c00054f3:	31 ff                	xor    edi,edi
c00054f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fd:	01 c6                	add    esi,eax
c00054ff:	11 d7                	adc    edi,edx
c0005501:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005509:	0f 86 63 01 00 00    	jbe    c0005672 <f_write+0x23c>
c000550f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005517:	c1 e8 09             	shr    eax,0x9
c000551a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551e:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005522:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005526:	39 c2                	cmp    edx,eax
c0005528:	76 08                	jbe    c0005532 <f_write+0xfc>
c000552a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005532:	83 ec 0c             	sub    esp,0xc
c0005535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005539:	57                   	push   edi
c000553a:	56                   	push   esi
c000553b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000553f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005543:	50                   	push   eax
c0005544:	e8 cc c4 ff ff       	call   c0001a15 <disk_write>
c0005549:	83 c4 20             	add    esp,0x20
c000554c:	85 c0                	test   eax,eax
c000554e:	0f 85 ce 00 00 00    	jne    c0005622 <f_write+0x1ec>
c0005554:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005557:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000555a:	29 f0                	sub    eax,esi
c000555c:	19 fa                	sbb    edx,edi
c000555e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005562:	89 d7                	mov    edi,edx
c0005564:	ba 00 00 00 00       	mov    edx,0x0
c0005569:	89 f9                	mov    ecx,edi
c000556b:	19 d1                	sbb    ecx,edx
c000556d:	73 1c                	jae    c000558b <f_write+0x155>
c000556f:	89 c7                	mov    edi,eax
c0005571:	b9 00 02 00 00       	mov    ecx,0x200
c0005576:	c1 e7 09             	shl    edi,0x9
c0005579:	8d 43 50             	lea    eax,[ebx+0x50]
c000557c:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005580:	89 fa                	mov    edx,edi
c0005582:	e8 42 c5 ff ff       	call   c0001ac9 <mem_cpy>
c0005587:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000558b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000558f:	c1 e6 09             	shl    esi,0x9
c0005592:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005596:	31 ff                	xor    edi,edi
c0005598:	01 30                	add    DWORD PTR [eax],esi
c000559a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a5:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ab:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055ae:	89 c1                	mov    ecx,eax
c00055b0:	39 f2                	cmp    edx,esi
c00055b2:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b5:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b8:	19 f9                	sbb    ecx,edi
c00055ba:	73 04                	jae    c00055c0 <f_write+0x18a>
c00055bc:	89 f2                	mov    edx,esi
c00055be:	89 f8                	mov    eax,edi
c00055c0:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055cb:	0f 85 cc fe ff ff    	jne    c000549d <f_write+0x67>
c00055d1:	eb 2e                	jmp    c0005601 <f_write+0x1cb>
c00055d3:	89 c8                	mov    eax,ecx
c00055d5:	09 d0                	or     eax,edx
c00055d7:	75 0b                	jne    c00055e4 <f_write+0x1ae>
c00055d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055dc:	31 d2                	xor    edx,edx
c00055de:	85 c0                	test   eax,eax
c00055e0:	75 28                	jne    c000560a <f_write+0x1d4>
c00055e2:	eb 12                	jmp    c00055f6 <f_write+0x1c0>
c00055e4:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e8:	74 09                	je     c00055f3 <f_write+0x1bd>
c00055ea:	89 d8                	mov    eax,ebx
c00055ec:	e8 13 c7 ff ff       	call   c0001d04 <clmt_clust>
c00055f1:	eb 0a                	jmp    c00055fd <f_write+0x1c7>
c00055f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f6:	89 d8                	mov    eax,ebx
c00055f8:	e8 a1 da ff ff       	call   c000309e <create_chain>
c00055fd:	85 c0                	test   eax,eax
c00055ff:	75 09                	jne    c000560a <f_write+0x1d4>
c0005601:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005605:	e9 dc 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000560a:	83 f8 01             	cmp    eax,0x1
c000560d:	75 0e                	jne    c000561d <f_write+0x1e7>
c000560f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005613:	bd 02 00 00 00       	mov    ebp,0x2
c0005618:	e9 c9 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000561d:	83 f8 ff             	cmp    eax,0xffffffff
c0005620:	75 0e                	jne    c0005630 <f_write+0x1fa>
c0005622:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005626:	bd 01 00 00 00       	mov    ebp,0x1
c000562b:	e9 b6 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c0005630:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005633:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005637:	0f 85 90 fe ff ff    	jne    c00054cd <f_write+0x97>
c000563d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005640:	e9 88 fe ff ff       	jmp    c00054cd <f_write+0x97>
c0005645:	83 ec 0c             	sub    esp,0xc
c0005648:	8d 43 50             	lea    eax,[ebx+0x50]
c000564b:	6a 01                	push   0x1
c000564d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005650:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005653:	50                   	push   eax
c0005654:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005658:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565c:	50                   	push   eax
c000565d:	e8 b3 c3 ff ff       	call   c0001a15 <disk_write>
c0005662:	83 c4 20             	add    esp,0x20
c0005665:	85 c0                	test   eax,eax
c0005667:	75 b9                	jne    c0005622 <f_write+0x1ec>
c0005669:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566d:	e9 65 fe ff ff       	jmp    c00054d7 <f_write+0xa1>
c0005672:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005675:	75 05                	jne    c000567c <f_write+0x246>
c0005677:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000567a:	74 2e                	je     c00056aa <f_write+0x274>
c000567c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000567f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005682:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005685:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005688:	73 20                	jae    c00056aa <f_write+0x274>
c000568a:	83 ec 0c             	sub    esp,0xc
c000568d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005690:	6a 01                	push   0x1
c0005692:	57                   	push   edi
c0005693:	56                   	push   esi
c0005694:	50                   	push   eax
c0005695:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005699:	50                   	push   eax
c000569a:	e8 60 c3 ff ff       	call   c00019ff <disk_read>
c000569f:	83 c4 20             	add    esp,0x20
c00056a2:	85 c0                	test   eax,eax
c00056a4:	0f 85 78 ff ff ff    	jne    c0005622 <f_write+0x1ec>
c00056aa:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ad:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b3:	ba 00 02 00 00       	mov    edx,0x200
c00056b8:	25 ff 01 00 00       	and    eax,0x1ff
c00056bd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c1:	29 c2                	sub    edx,eax
c00056c3:	39 d6                	cmp    esi,edx
c00056c5:	76 02                	jbe    c00056c9 <f_write+0x293>
c00056c7:	89 d6                	mov    esi,edx
c00056c9:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056cd:	89 f1                	mov    ecx,esi
c00056cf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d3:	e8 f1 c3 ff ff       	call   c0001ac9 <mem_cpy>
c00056d8:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056dc:	e9 b1 fe ff ff       	jmp    c0005592 <f_write+0x15c>
c00056e1:	bd 07 00 00 00       	mov    ebp,0x7
c00056e6:	83 c4 2c             	add    esp,0x2c
c00056e9:	89 e8                	mov    eax,ebp
c00056eb:	5b                   	pop    ebx
c00056ec:	5e                   	pop    esi
c00056ed:	5f                   	pop    edi
c00056ee:	5d                   	pop    ebp
c00056ef:	c3                   	ret    

c00056f0 <f_sync>:
c00056f0:	56                   	push   esi
c00056f1:	53                   	push   ebx
c00056f2:	83 ec 64             	sub    esp,0x64
c00056f5:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fd:	89 d8                	mov    eax,ebx
c00056ff:	e8 49 ca ff ff       	call   c000214d <validate>
c0005704:	85 c0                	test   eax,eax
c0005706:	0f 85 ba 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000570c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000570f:	f6 c2 40             	test   dl,0x40
c0005712:	0f 84 ae 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c0005718:	84 d2                	test   dl,dl
c000571a:	79 33                	jns    c000574f <f_sync+0x5f>
c000571c:	83 ec 0c             	sub    esp,0xc
c000571f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005722:	6a 01                	push   0x1
c0005724:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005727:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000572a:	50                   	push   eax
c000572b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000572f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005733:	50                   	push   eax
c0005734:	e8 dc c2 ff ff       	call   c0001a15 <disk_write>
c0005739:	83 c4 20             	add    esp,0x20
c000573c:	89 c2                	mov    edx,eax
c000573e:	b8 01 00 00 00       	mov    eax,0x1
c0005743:	85 d2                	test   edx,edx
c0005745:	0f 85 7b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000574b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000574f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005753:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005756:	0f 85 11 01 00 00    	jne    c000586d <f_sync+0x17d>
c000575c:	89 d8                	mov    eax,ebx
c000575e:	e8 13 d6 ff ff       	call   c0002d76 <fill_first_frag>
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 5b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000576b:	83 c9 ff             	or     ecx,0xffffffff
c000576e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005771:	89 d8                	mov    eax,ebx
c0005773:	e8 c9 d5 ff ff       	call   c0002d41 <fill_last_frag>
c0005778:	85 c0                	test   eax,eax
c000577a:	0f 85 46 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c0005780:	83 ec 0c             	sub    esp,0xc
c0005783:	68 60 04 00 00       	push   0x460
c0005788:	e8 f0 2a 00 00       	call   c000827d <ff_memalloc>
c000578d:	83 c4 10             	add    esp,0x10
c0005790:	89 c6                	mov    esi,eax
c0005792:	b8 11 00 00 00       	mov    eax,0x11
c0005797:	85 f6                	test   esi,esi
c0005799:	0f 84 27 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c000579f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057a9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057af:	89 da                	mov    edx,ebx
c00057b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b5:	e8 af df ff ff       	call   c0003769 <load_obj_xdir>
c00057ba:	85 c0                	test   eax,eax
c00057bc:	0f 85 95 00 00 00    	jne    c0005857 <f_sync+0x167>
c00057c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057c9:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057cd:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d0:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d3:	83 ca 01             	or     edx,0x1
c00057d6:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057d9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057df:	83 c0 34             	add    eax,0x34
c00057e2:	e8 d9 c2 ff ff       	call   c0001ac0 <st_dword>
c00057e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057eb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f4:	83 c0 38             	add    eax,0x38
c00057f7:	e8 c7 c2 ff ff       	call   c0001ac3 <st_qword>
c00057fc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005809:	83 c0 28             	add    eax,0x28
c000580c:	e8 b2 c2 ff ff       	call   c0001ac3 <st_qword>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	ba 00 00 21 50       	mov    edx,0x50210000
c000581a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581d:	83 c0 0c             	add    eax,0xc
c0005820:	e8 9b c2 ff ff       	call   c0001ac0 <st_dword>
c0005825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005829:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582c:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005830:	31 d2                	xor    edx,edx
c0005832:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005835:	83 c0 10             	add    eax,0x10
c0005838:	e8 83 c2 ff ff       	call   c0001ac0 <st_dword>
c000583d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005841:	e8 62 e1 ff ff       	call   c00039a8 <store_xdir>
c0005846:	85 c0                	test   eax,eax
c0005848:	75 0d                	jne    c0005857 <f_sync+0x167>
c000584a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584e:	e8 00 eb ff ff       	call   c0004353 <sync_fs>
c0005853:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005857:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585b:	83 ec 0c             	sub    esp,0xc
c000585e:	56                   	push   esi
c000585f:	e8 2f 2a 00 00       	call   c0008293 <ff_memfree>
c0005864:	83 c4 10             	add    esp,0x10
c0005867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586b:	eb 59                	jmp    c00058c6 <f_sync+0x1d6>
c000586d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005870:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005873:	e8 b0 c9 ff ff       	call   c0002228 <move_window>
c0005878:	85 c0                	test   eax,eax
c000587a:	75 4a                	jne    c00058c6 <f_sync+0x1d6>
c000587c:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000587f:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005883:	89 f2                	mov    edx,esi
c0005885:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005888:	8b 03                	mov    eax,DWORD PTR [ebx]
c000588a:	e8 5f f3 ff ff       	call   c0004bee <st_clust.isra.1>
c000588f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005892:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005895:	e8 26 c2 ff ff       	call   c0001ac0 <st_dword>
c000589a:	8d 46 16             	lea    eax,[esi+0x16]
c000589d:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a2:	e8 19 c2 ff ff       	call   c0001ac0 <st_dword>
c00058a7:	8d 46 12             	lea    eax,[esi+0x12]
c00058aa:	31 d2                	xor    edx,edx
c00058ac:	e8 0b c2 ff ff       	call   c0001abc <st_word>
c00058b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058bd:	e8 91 ea ff ff       	call   c0004353 <sync_fs>
c00058c2:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c6:	83 c4 64             	add    esp,0x64
c00058c9:	5b                   	pop    ebx
c00058ca:	5e                   	pop    esi
c00058cb:	c3                   	ret    

c00058cc <f_close>:
c00058cc:	53                   	push   ebx
c00058cd:	83 ec 24             	sub    esp,0x24
c00058d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d4:	53                   	push   ebx
c00058d5:	e8 16 fe ff ff       	call   c00056f0 <f_sync>
c00058da:	83 c4 10             	add    esp,0x10
c00058dd:	85 c0                	test   eax,eax
c00058df:	75 15                	jne    c00058f6 <f_close+0x2a>
c00058e1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e5:	89 d8                	mov    eax,ebx
c00058e7:	e8 61 c8 ff ff       	call   c000214d <validate>
c00058ec:	85 c0                	test   eax,eax
c00058ee:	75 06                	jne    c00058f6 <f_close+0x2a>
c00058f0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f6:	83 c4 18             	add    esp,0x18
c00058f9:	5b                   	pop    ebx
c00058fa:	c3                   	ret    

c00058fb <f_lseek>:
c00058fb:	55                   	push   ebp
c00058fc:	57                   	push   edi
c00058fd:	56                   	push   esi
c00058fe:	53                   	push   ebx
c00058ff:	83 ec 3c             	sub    esp,0x3c
c0005902:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005906:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000590a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005911:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005915:	89 d8                	mov    eax,ebx
c0005917:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000591b:	e8 2d c8 ff ff       	call   c000214d <validate>
c0005920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005924:	85 c0                	test   eax,eax
c0005926:	0f 85 7a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000592c:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005930:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005934:	85 c0                	test   eax,eax
c0005936:	0f 85 6a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000593c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005940:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005943:	74 0c                	je     c0005951 <f_lseek+0x56>
c0005945:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005948:	85 c0                	test   eax,eax
c000594a:	75 1f                	jne    c000596b <f_lseek+0x70>
c000594c:	e9 b5 01 00 00       	jmp    c0005b06 <f_lseek+0x20b>
c0005951:	83 c9 ff             	or     ecx,0xffffffff
c0005954:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005957:	89 d8                	mov    eax,ebx
c0005959:	e8 e3 d3 ff ff       	call   c0002d41 <fill_last_frag>
c000595e:	85 c0                	test   eax,eax
c0005960:	74 e3                	je     c0005945 <f_lseek+0x4a>
c0005962:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005966:	e9 3b 04 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c000596b:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005970:	0f 85 ac 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005976:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000597a:	0f 85 a2 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005980:	8d 78 04             	lea    edi,[eax+0x4]
c0005983:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005986:	8b 00                	mov    eax,DWORD PTR [eax]
c0005988:	be 02 00 00 00       	mov    esi,0x2
c000598d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005991:	85 ed                	test   ebp,ebp
c0005993:	74 73                	je     c0005a08 <f_lseek+0x10d>
c0005995:	89 e9                	mov    ecx,ebp
c0005997:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599e:	ff 04 24             	inc    DWORD PTR [esp]
c00059a1:	89 ca                	mov    edx,ecx
c00059a3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a7:	89 d8                	mov    eax,ebx
c00059a9:	e8 02 d4 ff ff       	call   c0002db0 <get_fat>
c00059ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b2:	83 f8 01             	cmp    eax,0x1
c00059b5:	77 11                	ja     c00059c8 <f_lseek+0xcd>
c00059b7:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059bb:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059c3:	e9 de 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059c8:	83 f8 ff             	cmp    eax,0xffffffff
c00059cb:	75 11                	jne    c00059de <f_lseek+0xe3>
c00059cd:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d1:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059d9:	e9 c8 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059de:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e1:	89 c1                	mov    ecx,eax
c00059e3:	39 c2                	cmp    edx,eax
c00059e5:	74 b7                	je     c000599e <f_lseek+0xa3>
c00059e7:	83 c6 02             	add    esi,0x2
c00059ea:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059ee:	72 0b                	jb     c00059fb <f_lseek+0x100>
c00059f0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f3:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f6:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f8:	83 c7 08             	add    edi,0x8
c00059fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059ff:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a02:	76 04                	jbe    c0005a08 <f_lseek+0x10d>
c0005a04:	89 c5                	mov    ebp,eax
c0005a06:	eb 8d                	jmp    c0005995 <f_lseek+0x9a>
c0005a08:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a0b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a0f:	89 30                	mov    DWORD PTR [eax],esi
c0005a11:	0f 87 87 03 00 00    	ja     c0005d9e <f_lseek+0x4a3>
c0005a17:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1d:	e9 84 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c0005a22:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a25:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a34:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a3b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a3f:	73 0f                	jae    c0005a50 <f_lseek+0x155>
c0005a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a58:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a5b:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a66:	0f 84 3a 03 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005a6c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a70:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a74:	83 c6 ff             	add    esi,0xffffffff
c0005a77:	89 d8                	mov    eax,ebx
c0005a79:	83 d7 ff             	adc    edi,0xffffffff
c0005a7c:	89 f2                	mov    edx,esi
c0005a7e:	89 f9                	mov    ecx,edi
c0005a80:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a84:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a87:	e8 78 c2 ff ff       	call   c0001d04 <clmt_clust>
c0005a8c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a90:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a93:	89 c2                	mov    edx,eax
c0005a95:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a99:	89 c8                	mov    eax,ecx
c0005a9b:	e8 43 c2 ff ff       	call   c0001ce3 <clst2sect>
c0005aa0:	89 d7                	mov    edi,edx
c0005aa2:	09 c7                	or     edi,eax
c0005aa4:	0f 84 0d ff ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005aaa:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aae:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ab4:	0f 84 ec 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005aba:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005abe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ac5:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ac9:	0f ac fe 09          	shrd   esi,edi,0x9
c0005acd:	4d                   	dec    ebp
c0005ace:	31 ff                	xor    edi,edi
c0005ad0:	21 ee                	and    esi,ebp
c0005ad2:	01 c6                	add    esi,eax
c0005ad4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ad7:	11 d7                	adc    edi,edx
c0005ad9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005adc:	39 fa                	cmp    edx,edi
c0005ade:	75 08                	jne    c0005ae8 <f_lseek+0x1ed>
c0005ae0:	39 f0                	cmp    eax,esi
c0005ae2:	0f 84 be 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005ae8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aeb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aef:	0f 89 80 02 00 00    	jns    c0005d75 <f_lseek+0x47a>
c0005af5:	83 ec 0c             	sub    esp,0xc
c0005af8:	6a 01                	push   0x1
c0005afa:	52                   	push   edx
c0005afb:	50                   	push   eax
c0005afc:	55                   	push   ebp
c0005afd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b01:	e9 5a 02 00 00       	jmp    c0005d60 <f_lseek+0x465>
c0005b06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b0a:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b0d:	74 16                	je     c0005b25 <f_lseek+0x22a>
c0005b0f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b14:	76 0f                	jbe    c0005b25 <f_lseek+0x22a>
c0005b16:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b25:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b2b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b2e:	89 c7                	mov    edi,eax
c0005b30:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b34:	73 0d                	jae    c0005b43 <f_lseek+0x248>
c0005b36:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b3a:	75 07                	jne    c0005b43 <f_lseek+0x248>
c0005b3c:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b43:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b46:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b4d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b54:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b5b:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b5e:	75 09                	jne    c0005b69 <f_lseek+0x26e>
c0005b60:	31 f6                	xor    esi,esi
c0005b62:	31 ff                	xor    edi,edi
c0005b64:	e9 af 01 00 00       	jmp    c0005d18 <f_lseek+0x41d>
c0005b69:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b6d:	89 d7                	mov    edi,edx
c0005b6f:	c1 e1 09             	shl    ecx,0x9
c0005b72:	09 c7                	or     edi,eax
c0005b74:	89 cd                	mov    ebp,ecx
c0005b76:	74 6d                	je     c0005be5 <f_lseek+0x2ea>
c0005b78:	83 c0 ff             	add    eax,0xffffffff
c0005b7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b7f:	83 d2 ff             	adc    edx,0xffffffff
c0005b82:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b89:	83 c0 ff             	add    eax,0xffffffff
c0005b8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b90:	83 d2 ff             	adc    edx,0xffffffff
c0005b93:	31 ff                	xor    edi,edi
c0005b95:	57                   	push   edi
c0005b96:	51                   	push   ecx
c0005b97:	52                   	push   edx
c0005b98:	50                   	push   eax
c0005b99:	e8 3e fb 01 00       	call   c00256dc <__udivdi3>
c0005b9e:	83 c4 10             	add    esp,0x10
c0005ba1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ba5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ba9:	57                   	push   edi
c0005baa:	55                   	push   ebp
c0005bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb3:	e8 24 fb 01 00       	call   c00256dc <__udivdi3>
c0005bb8:	83 c4 10             	add    esp,0x10
c0005bbb:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bbf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bc3:	19 d1                	sbb    ecx,edx
c0005bc5:	72 1e                	jb     c0005be5 <f_lseek+0x2ea>
c0005bc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bcb:	89 e9                	mov    ecx,ebp
c0005bcd:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bd0:	f7 d9                	neg    ecx
c0005bd2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bd5:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bd9:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bdc:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bdf:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005be3:	eb 28                	jmp    c0005c0d <f_lseek+0x312>
c0005be5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be8:	85 c0                	test   eax,eax
c0005bea:	75 1e                	jne    c0005c0a <f_lseek+0x30f>
c0005bec:	31 d2                	xor    edx,edx
c0005bee:	89 d8                	mov    eax,ebx
c0005bf0:	e8 a9 d4 ff ff       	call   c000309e <create_chain>
c0005bf5:	83 f8 01             	cmp    eax,0x1
c0005bf8:	0f 84 b9 fd ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005bfe:	83 f8 ff             	cmp    eax,0xffffffff
c0005c01:	0f 84 c6 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005c07:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c0a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c0d:	85 c0                	test   eax,eax
c0005c0f:	0f 84 4b ff ff ff    	je     c0005b60 <f_lseek+0x265>
c0005c15:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c19:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c21:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c24:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c28:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c2b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c2e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c32:	0f 83 9d 00 00 00    	jae    c0005cd5 <f_lseek+0x3da>
c0005c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c3c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c40:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c43:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c47:	01 f2                	add    edx,esi
c0005c49:	11 f9                	adc    ecx,edi
c0005c4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c4f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c53:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c56:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c59:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c5c:	f6 c1 02             	test   cl,0x2
c0005c5f:	74 35                	je     c0005c96 <f_lseek+0x39b>
c0005c61:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c65:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c68:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c6b:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c6f:	73 16                	jae    c0005c87 <f_lseek+0x38c>
c0005c71:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c79:	88 ca                	mov    dl,cl
c0005c7b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c7e:	83 ca 40             	or     edx,0x40
c0005c81:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c84:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c87:	89 c2                	mov    edx,eax
c0005c89:	89 d8                	mov    eax,ebx
c0005c8b:	e8 0e d4 ff ff       	call   c000309e <create_chain>
c0005c90:	85 c0                	test   eax,eax
c0005c92:	75 0b                	jne    c0005c9f <f_lseek+0x3a4>
c0005c94:	eb 30                	jmp    c0005cc6 <f_lseek+0x3cb>
c0005c96:	89 c2                	mov    edx,eax
c0005c98:	89 d8                	mov    eax,ebx
c0005c9a:	e8 11 d1 ff ff       	call   c0002db0 <get_fat>
c0005c9f:	83 f8 ff             	cmp    eax,0xffffffff
c0005ca2:	0f 84 25 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005ca8:	83 f8 01             	cmp    eax,0x1
c0005cab:	0f 86 06 fd ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cb1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cb5:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb8:	0f 86 f9 fc ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cbe:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc1:	e9 5b ff ff ff       	jmp    c0005c21 <f_lseek+0x326>
c0005cc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ccd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cd5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd8:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cdc:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cdf:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ce2:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ce5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ceb:	0f 84 6f fe ff ff    	je     c0005b60 <f_lseek+0x265>
c0005cf1:	89 c2                	mov    edx,eax
c0005cf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cf7:	e8 e7 bf ff ff       	call   c0001ce3 <clst2sect>
c0005cfc:	89 d7                	mov    edi,edx
c0005cfe:	09 c7                	or     edi,eax
c0005d00:	0f 84 b1 fc ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005d06:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d11:	c1 ef 09             	shr    edi,0x9
c0005d14:	01 c6                	add    esi,eax
c0005d16:	11 d7                	adc    edi,edx
c0005d18:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d1b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d1e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d21:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d24:	19 d1                	sbb    ecx,edx
c0005d26:	73 0a                	jae    c0005d32 <f_lseek+0x437>
c0005d28:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d2b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d2e:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d32:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d37:	74 6d                	je     c0005da6 <f_lseek+0x4ab>
c0005d39:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d3f:	39 fa                	cmp    edx,edi
c0005d41:	75 04                	jne    c0005d47 <f_lseek+0x44c>
c0005d43:	39 f0                	cmp    eax,esi
c0005d45:	74 5f                	je     c0005da6 <f_lseek+0x4ab>
c0005d47:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d4e:	79 25                	jns    c0005d75 <f_lseek+0x47a>
c0005d50:	83 ec 0c             	sub    esp,0xc
c0005d53:	6a 01                	push   0x1
c0005d55:	52                   	push   edx
c0005d56:	50                   	push   eax
c0005d57:	55                   	push   ebp
c0005d58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d5c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d60:	50                   	push   eax
c0005d61:	e8 af bc ff ff       	call   c0001a15 <disk_write>
c0005d66:	83 c4 20             	add    esp,0x20
c0005d69:	85 c0                	test   eax,eax
c0005d6b:	0f 85 5c fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d71:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d75:	83 ec 0c             	sub    esp,0xc
c0005d78:	6a 01                	push   0x1
c0005d7a:	57                   	push   edi
c0005d7b:	56                   	push   esi
c0005d7c:	55                   	push   ebp
c0005d7d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d85:	50                   	push   eax
c0005d86:	e8 74 bc ff ff       	call   c00019ff <disk_read>
c0005d8b:	83 c4 20             	add    esp,0x20
c0005d8e:	85 c0                	test   eax,eax
c0005d90:	0f 85 37 fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d96:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d99:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d9c:	eb 08                	jmp    c0005da6 <f_lseek+0x4ab>
c0005d9e:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005da6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005daa:	83 c4 3c             	add    esp,0x3c
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	5d                   	pop    ebp
c0005db1:	c3                   	ret    

c0005db2 <f_opendir>:
c0005db2:	56                   	push   esi
c0005db3:	b8 09 00 00 00       	mov    eax,0x9
c0005db8:	53                   	push   ebx
c0005db9:	83 ec 24             	sub    esp,0x24
c0005dbc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dc0:	85 db                	test   ebx,ebx
c0005dc2:	0f 84 e6 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005dc8:	31 c9                	xor    ecx,ecx
c0005dca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dce:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dd2:	e8 03 c7 ff ff       	call   c00024da <mount_volume>
c0005dd7:	85 c0                	test   eax,eax
c0005dd9:	0f 85 c9 00 00 00    	jne    c0005ea8 <f_opendir+0xf6>
c0005ddf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005de3:	83 ec 0c             	sub    esp,0xc
c0005de6:	89 03                	mov    DWORD PTR [ebx],eax
c0005de8:	68 60 04 00 00       	push   0x460
c0005ded:	e8 8b 24 00 00       	call   c000827d <ff_memalloc>
c0005df2:	83 c4 10             	add    esp,0x10
c0005df5:	89 c6                	mov    esi,eax
c0005df7:	b8 11 00 00 00       	mov    eax,0x11
c0005dfc:	85 f6                	test   esi,esi
c0005dfe:	0f 84 aa 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005e04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e08:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e0e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e11:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e18:	89 d8                	mov    eax,ebx
c0005e1a:	e8 31 ee ff ff       	call   c0004c50 <follow_path>
c0005e1f:	85 c0                	test   eax,eax
c0005e21:	75 61                	jne    c0005e84 <f_opendir+0xd2>
c0005e23:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e27:	78 46                	js     c0005e6f <f_opendir+0xbd>
c0005e29:	b8 05 00 00 00       	mov    eax,0x5
c0005e2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e32:	74 50                	je     c0005e84 <f_opendir+0xd2>
c0005e34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e38:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e3a:	3c 04                	cmp    al,0x4
c0005e3c:	75 26                	jne    c0005e64 <f_opendir+0xb2>
c0005e3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e41:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e44:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e47:	30 d2                	xor    dl,dl
c0005e49:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e4d:	09 c2                	or     edx,eax
c0005e4f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e52:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e55:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e58:	89 da                	mov    edx,ebx
c0005e5a:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e5d:	e8 b4 ed ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005e62:	eb 0b                	jmp    c0005e6f <f_opendir+0xbd>
c0005e64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e67:	e8 59 ed ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0005e6c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e73:	31 d2                	xor    edx,edx
c0005e75:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e79:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 22 d1 ff ff       	call   c0002fa6 <dir_sdi>
c0005e84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e88:	83 ec 0c             	sub    esp,0xc
c0005e8b:	56                   	push   esi
c0005e8c:	e8 02 24 00 00       	call   c0008293 <ff_memfree>
c0005e91:	83 c4 10             	add    esp,0x10
c0005e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e98:	83 f8 04             	cmp    eax,0x4
c0005e9b:	74 06                	je     c0005ea3 <f_opendir+0xf1>
c0005e9d:	85 c0                	test   eax,eax
c0005e9f:	74 0d                	je     c0005eae <f_opendir+0xfc>
c0005ea1:	eb 05                	jmp    c0005ea8 <f_opendir+0xf6>
c0005ea3:	b8 05 00 00 00       	mov    eax,0x5
c0005ea8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eae:	83 c4 24             	add    esp,0x24
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	c3                   	ret    

c0005eb4 <f_closedir>:
c0005eb4:	53                   	push   ebx
c0005eb5:	83 ec 18             	sub    esp,0x18
c0005eb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ebc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 86 c2 ff ff       	call   c000214d <validate>
c0005ec7:	85 c0                	test   eax,eax
c0005ec9:	75 06                	jne    c0005ed1 <f_closedir+0x1d>
c0005ecb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed1:	83 c4 18             	add    esp,0x18
c0005ed4:	5b                   	pop    ebx
c0005ed5:	c3                   	ret    

c0005ed6 <f_readdir>:
c0005ed6:	57                   	push   edi
c0005ed7:	56                   	push   esi
c0005ed8:	53                   	push   ebx
c0005ed9:	83 ec 20             	sub    esp,0x20
c0005edc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ee4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 5e c2 ff ff       	call   c000214d <validate>
c0005eef:	85 c0                	test   eax,eax
c0005ef1:	75 77                	jne    c0005f6a <f_readdir+0x94>
c0005ef3:	85 ff                	test   edi,edi
c0005ef5:	75 0b                	jne    c0005f02 <f_readdir+0x2c>
c0005ef7:	31 d2                	xor    edx,edx
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 a6 d0 ff ff       	call   c0002fa6 <dir_sdi>
c0005f00:	eb 68                	jmp    c0005f6a <f_readdir+0x94>
c0005f02:	83 ec 0c             	sub    esp,0xc
c0005f05:	68 60 04 00 00       	push   0x460
c0005f0a:	e8 6e 23 00 00       	call   c000827d <ff_memalloc>
c0005f0f:	83 c4 10             	add    esp,0x10
c0005f12:	89 c6                	mov    esi,eax
c0005f14:	b8 11 00 00 00       	mov    eax,0x11
c0005f19:	85 f6                	test   esi,esi
c0005f1b:	74 4d                	je     c0005f6a <f_readdir+0x94>
c0005f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f21:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f27:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f2a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f2d:	31 d2                	xor    edx,edx
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	e8 80 d8 ff ff       	call   c00037b6 <dir_read>
c0005f36:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f3b:	75 19                	jne    c0005f56 <f_readdir+0x80>
c0005f3d:	89 fa                	mov    edx,edi
c0005f3f:	89 d8                	mov    eax,ebx
c0005f41:	e8 7e ea ff ff       	call   c00049c4 <get_fileinfo>
c0005f46:	31 d2                	xor    edx,edx
c0005f48:	89 d8                	mov    eax,ebx
c0005f4a:	e8 af d5 ff ff       	call   c00034fe <dir_next>
c0005f4f:	83 f8 04             	cmp    eax,0x4
c0005f52:	75 02                	jne    c0005f56 <f_readdir+0x80>
c0005f54:	31 c0                	xor    eax,eax
c0005f56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5a:	83 ec 0c             	sub    esp,0xc
c0005f5d:	56                   	push   esi
c0005f5e:	e8 30 23 00 00       	call   c0008293 <ff_memfree>
c0005f63:	83 c4 10             	add    esp,0x10
c0005f66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f6a:	83 c4 20             	add    esp,0x20
c0005f6d:	5b                   	pop    ebx
c0005f6e:	5e                   	pop    esi
c0005f6f:	5f                   	pop    edi
c0005f70:	c3                   	ret    

c0005f71 <f_stat>:
c0005f71:	57                   	push   edi
c0005f72:	31 c9                	xor    ecx,ecx
c0005f74:	56                   	push   esi
c0005f75:	53                   	push   ebx
c0005f76:	83 ec 50             	sub    esp,0x50
c0005f79:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f7d:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f81:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f85:	e8 50 c5 ff ff       	call   c00024da <mount_volume>
c0005f8a:	89 c3                	mov    ebx,eax
c0005f8c:	85 c0                	test   eax,eax
c0005f8e:	75 67                	jne    c0005ff7 <f_stat+0x86>
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	bb 11 00 00 00       	mov    ebx,0x11
c0005f98:	68 60 04 00 00       	push   0x460
c0005f9d:	e8 db 22 00 00       	call   c000827d <ff_memalloc>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	89 c6                	mov    esi,eax
c0005fa7:	85 c0                	test   eax,eax
c0005fa9:	74 4c                	je     c0005ff7 <f_stat+0x86>
c0005fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005faf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fb5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fbb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fbf:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fc3:	e8 88 ec ff ff       	call   c0004c50 <follow_path>
c0005fc8:	89 c3                	mov    ebx,eax
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	75 1d                	jne    c0005feb <f_stat+0x7a>
c0005fce:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fd3:	78 11                	js     c0005fe6 <f_stat+0x75>
c0005fd5:	85 ff                	test   edi,edi
c0005fd7:	74 12                	je     c0005feb <f_stat+0x7a>
c0005fd9:	89 fa                	mov    edx,edi
c0005fdb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fdf:	e8 e0 e9 ff ff       	call   c00049c4 <get_fileinfo>
c0005fe4:	eb 05                	jmp    c0005feb <f_stat+0x7a>
c0005fe6:	bb 06 00 00 00       	mov    ebx,0x6
c0005feb:	83 ec 0c             	sub    esp,0xc
c0005fee:	56                   	push   esi
c0005fef:	e8 9f 22 00 00       	call   c0008293 <ff_memfree>
c0005ff4:	83 c4 10             	add    esp,0x10
c0005ff7:	83 c4 50             	add    esp,0x50
c0005ffa:	89 d8                	mov    eax,ebx
c0005ffc:	5b                   	pop    ebx
c0005ffd:	5e                   	pop    esi
c0005ffe:	5f                   	pop    edi
c0005fff:	c3                   	ret    

c0006000 <f_getfree>:
c0006000:	55                   	push   ebp
c0006001:	31 c9                	xor    ecx,ecx
c0006003:	57                   	push   edi
c0006004:	56                   	push   esi
c0006005:	53                   	push   ebx
c0006006:	83 ec 5c             	sub    esp,0x5c
c0006009:	8d 54 24 24          	lea    edx,[esp+0x24]
c000600d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006011:	e8 c4 c4 ff ff       	call   c00024da <mount_volume>
c0006016:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000601a:	85 c0                	test   eax,eax
c000601c:	0f 85 9d 01 00 00    	jne    c00061bf <f_getfree+0x1bf>
c0006022:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006026:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000602a:	89 02                	mov    DWORD PTR [edx],eax
c000602c:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000602f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006032:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006035:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006039:	39 f2                	cmp    edx,esi
c000603b:	77 0b                	ja     c0006048 <f_getfree+0x48>
c000603d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006041:	89 10                	mov    DWORD PTR [eax],edx
c0006043:	e9 77 01 00 00       	jmp    c00061bf <f_getfree+0x1bf>
c0006048:	8a 10                	mov    dl,BYTE PTR [eax]
c000604a:	80 fa 01             	cmp    dl,0x1
c000604d:	75 3a                	jne    c0006089 <f_getfree+0x89>
c000604f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006053:	be 02 00 00 00       	mov    esi,0x2
c0006058:	31 db                	xor    ebx,ebx
c000605a:	89 f2                	mov    edx,esi
c000605c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006060:	e8 4b cd ff ff       	call   c0002db0 <get_fat>
c0006065:	83 f8 ff             	cmp    eax,0xffffffff
c0006068:	0f 84 28 01 00 00    	je     c0006196 <f_getfree+0x196>
c000606e:	83 f8 01             	cmp    eax,0x1
c0006071:	0f 84 29 01 00 00    	je     c00061a0 <f_getfree+0x1a0>
c0006077:	83 d3 00             	adc    ebx,0x0
c000607a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607e:	46                   	inc    esi
c000607f:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006082:	77 d6                	ja     c000605a <f_getfree+0x5a>
c0006084:	e9 25 01 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c0006089:	80 fa 04             	cmp    dl,0x4
c000608c:	0f 85 88 00 00 00    	jne    c000611a <f_getfree+0x11a>
c0006092:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006095:	31 ed                	xor    ebp,ebp
c0006097:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000609a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a2:	31 db                	xor    ebx,ebx
c00060a4:	85 ed                	test   ebp,ebp
c00060a6:	75 3f                	jne    c00060e7 <f_getfree+0xe7>
c00060a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060b0:	83 c0 01             	add    eax,0x1
c00060b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060b7:	83 d2 00             	adc    edx,0x0
c00060ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060ca:	e8 59 c1 ff ff       	call   c0002228 <move_window>
c00060cf:	85 c0                	test   eax,eax
c00060d1:	0f 85 d3 00 00 00    	jne    c00061aa <f_getfree+0x1aa>
c00060d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060eb:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060ee:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060f2:	89 cf                	mov    edi,ecx
c00060f4:	85 f6                	test   esi,esi
c00060f6:	74 12                	je     c000610a <f_getfree+0x10a>
c00060f8:	88 c1                	mov    cl,al
c00060fa:	83 e1 01             	and    ecx,0x1
c00060fd:	80 f9 01             	cmp    cl,0x1
c0006100:	83 d3 00             	adc    ebx,0x0
c0006103:	d0 e8                	shr    al,1
c0006105:	4e                   	dec    esi
c0006106:	39 fe                	cmp    esi,edi
c0006108:	75 ea                	jne    c00060f4 <f_getfree+0xf4>
c000610a:	45                   	inc    ebp
c000610b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006111:	85 f6                	test   esi,esi
c0006113:	75 8f                	jne    c00060a4 <f_getfree+0xa4>
c0006115:	e9 94 00 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c000611a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000611d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006120:	31 f6                	xor    esi,esi
c0006122:	31 db                	xor    ebx,ebx
c0006124:	85 f6                	test   esi,esi
c0006126:	75 1b                	jne    c0006143 <f_getfree+0x143>
c0006128:	89 d7                	mov    edi,edx
c000612a:	89 cd                	mov    ebp,ecx
c000612c:	83 c7 01             	add    edi,0x1
c000612f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006133:	83 d5 00             	adc    ebp,0x0
c0006136:	e8 ed c0 ff ff       	call   c0002228 <move_window>
c000613b:	85 c0                	test   eax,eax
c000613d:	75 6b                	jne    c00061aa <f_getfree+0x1aa>
c000613f:	89 fa                	mov    edx,edi
c0006141:	89 e9                	mov    ecx,ebp
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000614b:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000614f:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006152:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006156:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000615a:	75 11                	jne    c000616d <f_getfree+0x16d>
c000615c:	e8 e9 b8 ff ff       	call   c0001a4a <ld_word>
c0006161:	66 83 f8 01          	cmp    ax,0x1
c0006165:	83 d3 00             	adc    ebx,0x0
c0006168:	83 c6 02             	add    esi,0x2
c000616b:	eb 13                	jmp    c0006180 <f_getfree+0x180>
c000616d:	e8 e5 b8 ff ff       	call   c0001a57 <ld_dword>
c0006172:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	83 d3 00             	adc    ebx,0x0
c000617d:	83 c6 04             	add    esi,0x4
c0006180:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006186:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000618a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000618e:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006192:	75 90                	jne    c0006124 <f_getfree+0x124>
c0006194:	eb 18                	jmp    c00061ae <f_getfree+0x1ae>
c0006196:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000619e:	eb 0e                	jmp    c00061ae <f_getfree+0x1ae>
c00061a0:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a8:	eb 04                	jmp    c00061ae <f_getfree+0x1ae>
c00061aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061ae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061b2:	89 18                	mov    DWORD PTR [eax],ebx
c00061b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b8:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061bb:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061c3:	83 c4 5c             	add    esp,0x5c
c00061c6:	5b                   	pop    ebx
c00061c7:	5e                   	pop    esi
c00061c8:	5f                   	pop    edi
c00061c9:	5d                   	pop    ebp
c00061ca:	c3                   	ret    

c00061cb <f_truncate>:
c00061cb:	56                   	push   esi
c00061cc:	53                   	push   ebx
c00061cd:	83 ec 14             	sub    esp,0x14
c00061d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d8:	89 d8                	mov    eax,ebx
c00061da:	e8 6e bf ff ff       	call   c000214d <validate>
c00061df:	89 c6                	mov    esi,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	0f 85 d2 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061e9:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ed:	85 f6                	test   esi,esi
c00061ef:	0f 85 c6 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061f5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061f9:	0f 84 b7 00 00 00    	je     c00062b6 <f_truncate+0xeb>
c00061ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006202:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006205:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006208:	89 d1                	mov    ecx,edx
c000620a:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000620d:	0f 83 a8 00 00 00    	jae    c00062bb <f_truncate+0xf0>
c0006213:	09 c2                	or     edx,eax
c0006215:	75 15                	jne    c000622c <f_truncate+0x61>
c0006217:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000621a:	31 c9                	xor    ecx,ecx
c000621c:	89 d8                	mov    eax,ebx
c000621e:	e8 7a d0 ff ff       	call   c000329d <remove_chain>
c0006223:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000622a:	eb 35                	jmp    c0006261 <f_truncate+0x96>
c000622c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000622f:	89 d8                	mov    eax,ebx
c0006231:	e8 7a cb ff ff       	call   c0002db0 <get_fat>
c0006236:	89 c2                	mov    edx,eax
c0006238:	b8 01 00 00 00       	mov    eax,0x1
c000623d:	83 fa ff             	cmp    edx,0xffffffff
c0006240:	74 1f                	je     c0006261 <f_truncate+0x96>
c0006242:	b8 02 00 00 00       	mov    eax,0x2
c0006247:	83 fa 01             	cmp    edx,0x1
c000624a:	74 15                	je     c0006261 <f_truncate+0x96>
c000624c:	31 c0                	xor    eax,eax
c000624e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006252:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006255:	76 0a                	jbe    c0006261 <f_truncate+0x96>
c0006257:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000625a:	89 d8                	mov    eax,ebx
c000625c:	e8 3c d0 ff ff       	call   c000329d <remove_chain>
c0006261:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006264:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006267:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000626a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000626d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006270:	83 ca 40             	or     edx,0x40
c0006273:	85 c0                	test   eax,eax
c0006275:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006278:	75 35                	jne    c00062af <f_truncate+0xe4>
c000627a:	84 d2                	test   dl,dl
c000627c:	79 3d                	jns    c00062bb <f_truncate+0xf0>
c000627e:	83 ec 0c             	sub    esp,0xc
c0006281:	8d 43 50             	lea    eax,[ebx+0x50]
c0006284:	6a 01                	push   0x1
c0006286:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006289:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000628c:	50                   	push   eax
c000628d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006291:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006295:	50                   	push   eax
c0006296:	e8 7a b7 ff ff       	call   c0001a15 <disk_write>
c000629b:	83 c4 20             	add    esp,0x20
c000629e:	85 c0                	test   eax,eax
c00062a0:	75 08                	jne    c00062aa <f_truncate+0xdf>
c00062a2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062a6:	31 f6                	xor    esi,esi
c00062a8:	eb 11                	jmp    c00062bb <f_truncate+0xf0>
c00062aa:	b8 01 00 00 00       	mov    eax,0x1
c00062af:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062b2:	89 c6                	mov    esi,eax
c00062b4:	eb 05                	jmp    c00062bb <f_truncate+0xf0>
c00062b6:	be 07 00 00 00       	mov    esi,0x7
c00062bb:	89 f0                	mov    eax,esi
c00062bd:	83 c4 14             	add    esp,0x14
c00062c0:	5b                   	pop    ebx
c00062c1:	5e                   	pop    esi
c00062c2:	c3                   	ret    

c00062c3 <f_unlink>:
c00062c3:	56                   	push   esi
c00062c4:	b9 02 00 00 00       	mov    ecx,0x2
c00062c9:	53                   	push   ebx
c00062ca:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062d4:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062db:	e8 fa c1 ff ff       	call   c00024da <mount_volume>
c00062e0:	85 c0                	test   eax,eax
c00062e2:	0f 85 55 01 00 00    	jne    c000643d <f_unlink+0x17a>
c00062e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ec:	83 ec 0c             	sub    esp,0xc
c00062ef:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062f3:	68 60 04 00 00       	push   0x460
c00062f8:	e8 80 1f 00 00       	call   c000827d <ff_memalloc>
c00062fd:	83 c4 10             	add    esp,0x10
c0006300:	89 c3                	mov    ebx,eax
c0006302:	b8 11 00 00 00       	mov    eax,0x11
c0006307:	85 db                	test   ebx,ebx
c0006309:	0f 84 2e 01 00 00    	je     c000643d <f_unlink+0x17a>
c000630f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006313:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006319:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000631c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000631f:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006326:	8d 44 24 48          	lea    eax,[esp+0x48]
c000632a:	e8 21 e9 ff ff       	call   c0004c50 <follow_path>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 85 f2 00 00 00    	jne    c0006429 <f_unlink+0x166>
c0006337:	b8 06 00 00 00       	mov    eax,0x6
c000633c:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006344:	0f 88 df 00 00 00    	js     c0006429 <f_unlink+0x166>
c000634a:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000634f:	74 0a                	je     c000635b <f_unlink+0x98>
c0006351:	b8 07 00 00 00       	mov    eax,0x7
c0006356:	e9 ce 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c000635b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000635f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006363:	8a 02                	mov    al,BYTE PTR [edx]
c0006365:	3c 04                	cmp    al,0x4
c0006367:	75 12                	jne    c000637b <f_unlink+0xb8>
c0006369:	8d 42 10             	lea    eax,[edx+0x10]
c000636c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006370:	e8 a1 e8 ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0006375:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006379:	eb 0e                	jmp    c0006389 <f_unlink+0xc6>
c000637b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006382:	e8 3e e8 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0006387:	89 c6                	mov    esi,eax
c0006389:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000638e:	75 12                	jne    c00063a2 <f_unlink+0xdf>
c0006390:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006394:	e8 94 d6 ff ff       	call   c0003a2d <dir_remove>
c0006399:	85 c0                	test   eax,eax
c000639b:	74 6c                	je     c0006409 <f_unlink+0x146>
c000639d:	e9 87 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c00063a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063a6:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063ad:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063b7:	75 21                	jne    c00063da <f_unlink+0x117>
c00063b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063c1:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c8:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063cf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063d3:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063da:	31 d2                	xor    edx,edx
c00063dc:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e3:	e8 be cb ff ff       	call   c0002fa6 <dir_sdi>
c00063e8:	85 c0                	test   eax,eax
c00063ea:	75 3d                	jne    c0006429 <f_unlink+0x166>
c00063ec:	31 d2                	xor    edx,edx
c00063ee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f5:	e8 bc d3 ff ff       	call   c00037b6 <dir_read>
c00063fa:	85 c0                	test   eax,eax
c00063fc:	0f 84 4f ff ff ff    	je     c0006351 <f_unlink+0x8e>
c0006402:	83 f8 04             	cmp    eax,0x4
c0006405:	75 22                	jne    c0006429 <f_unlink+0x166>
c0006407:	eb 87                	jmp    c0006390 <f_unlink+0xcd>
c0006409:	85 f6                	test   esi,esi
c000640b:	75 0b                	jne    c0006418 <f_unlink+0x155>
c000640d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006411:	e8 3d df ff ff       	call   c0004353 <sync_fs>
c0006416:	eb 11                	jmp    c0006429 <f_unlink+0x166>
c0006418:	31 c9                	xor    ecx,ecx
c000641a:	89 f2                	mov    edx,esi
c000641c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006420:	e8 78 ce ff ff       	call   c000329d <remove_chain>
c0006425:	85 c0                	test   eax,eax
c0006427:	74 e4                	je     c000640d <f_unlink+0x14a>
c0006429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000642d:	83 ec 0c             	sub    esp,0xc
c0006430:	53                   	push   ebx
c0006431:	e8 5d 1e 00 00       	call   c0008293 <ff_memfree>
c0006436:	83 c4 10             	add    esp,0x10
c0006439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000643d:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006443:	5b                   	pop    ebx
c0006444:	5e                   	pop    esi
c0006445:	c3                   	ret    

c0006446 <f_mkdir>:
c0006446:	57                   	push   edi
c0006447:	b9 02 00 00 00       	mov    ecx,0x2
c000644c:	56                   	push   esi
c000644d:	53                   	push   ebx
c000644e:	83 c4 80             	add    esp,0xffffff80
c0006451:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006455:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000645c:	e8 79 c0 ff ff       	call   c00024da <mount_volume>
c0006461:	89 c3                	mov    ebx,eax
c0006463:	85 c0                	test   eax,eax
c0006465:	0f 85 fe 01 00 00    	jne    c0006669 <f_mkdir+0x223>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	bb 11 00 00 00       	mov    ebx,0x11
c0006474:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006478:	83 ec 0c             	sub    esp,0xc
c000647b:	68 60 04 00 00       	push   0x460
c0006480:	e8 f8 1d 00 00       	call   c000827d <ff_memalloc>
c0006485:	83 c4 10             	add    esp,0x10
c0006488:	89 c7                	mov    edi,eax
c000648a:	85 c0                	test   eax,eax
c000648c:	0f 84 d7 01 00 00    	je     c0006669 <f_mkdir+0x223>
c0006492:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006496:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000649c:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000649f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064a2:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064a9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ad:	e8 9e e7 ff ff       	call   c0004c50 <follow_path>
c00064b2:	89 c3                	mov    ebx,eax
c00064b4:	85 c0                	test   eax,eax
c00064b6:	74 3e                	je     c00064f6 <f_mkdir+0xb0>
c00064b8:	83 f8 04             	cmp    eax,0x4
c00064bb:	75 3e                	jne    c00064fb <f_mkdir+0xb5>
c00064bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c1:	31 d2                	xor    edx,edx
c00064c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064cb:	e8 ce cb ff ff       	call   c000309e <create_chain>
c00064d0:	89 c6                	mov    esi,eax
c00064d2:	85 c0                	test   eax,eax
c00064d4:	74 0c                	je     c00064e2 <f_mkdir+0x9c>
c00064d6:	bb 02 00 00 00       	mov    ebx,0x2
c00064db:	83 f8 01             	cmp    eax,0x1
c00064de:	74 07                	je     c00064e7 <f_mkdir+0xa1>
c00064e0:	eb 2a                	jmp    c000650c <f_mkdir+0xc6>
c00064e2:	bb 07 00 00 00       	mov    ebx,0x7
c00064e7:	31 c9                	xor    ecx,ecx
c00064e9:	89 f2                	mov    edx,esi
c00064eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ef:	e8 a9 cd ff ff       	call   c000329d <remove_chain>
c00064f4:	eb 05                	jmp    c00064fb <f_mkdir+0xb5>
c00064f6:	bb 08 00 00 00       	mov    ebx,0x8
c00064fb:	83 ec 0c             	sub    esp,0xc
c00064fe:	57                   	push   edi
c00064ff:	e8 8f 1d 00 00       	call   c0008293 <ff_memfree>
c0006504:	83 c4 10             	add    esp,0x10
c0006507:	e9 5d 01 00 00       	jmp    c0006669 <f_mkdir+0x223>
c000650c:	bb 01 00 00 00       	mov    ebx,0x1
c0006511:	83 f8 ff             	cmp    eax,0xffffffff
c0006514:	74 d1                	je     c00064e7 <f_mkdir+0xa1>
c0006516:	89 f2                	mov    edx,esi
c0006518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651c:	e8 c4 ce ff ff       	call   c00033e5 <dir_clear>
c0006521:	89 c3                	mov    ebx,eax
c0006523:	85 c0                	test   eax,eax
c0006525:	75 c0                	jne    c00064e7 <f_mkdir+0xa1>
c0006527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000652e:	74 69                	je     c0006599 <f_mkdir+0x153>
c0006530:	b9 0b 00 00 00       	mov    ecx,0xb
c0006535:	83 c0 54             	add    eax,0x54
c0006538:	ba 20 00 00 00       	mov    edx,0x20
c000653d:	e8 9c b5 ff ff       	call   c0001ade <mem_set>
c0006542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006546:	ba 00 00 21 50       	mov    edx,0x50210000
c000654b:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000654f:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006553:	83 c0 6a             	add    eax,0x6a
c0006556:	e8 65 b5 ff ff       	call   c0001ac0 <st_dword>
c000655b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655f:	89 f1                	mov    ecx,esi
c0006561:	8d 50 54             	lea    edx,[eax+0x54]
c0006564:	e8 85 e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656d:	b9 20 00 00 00       	mov    ecx,0x20
c0006572:	8d 50 54             	lea    edx,[eax+0x54]
c0006575:	83 c0 74             	add    eax,0x74
c0006578:	e8 4c b5 ff ff       	call   c0001ac9 <mem_cpy>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006585:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006589:	8d 50 74             	lea    edx,[eax+0x74]
c000658c:	e8 5d e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006595:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006599:	8d 44 24 34          	lea    eax,[esp+0x34]
c000659d:	e8 2f db ff ff       	call   c00040d1 <dir_register>
c00065a2:	89 c3                	mov    ebx,eax
c00065a4:	85 c0                	test   eax,eax
c00065a6:	0f 85 3b ff ff ff    	jne    c00064e7 <f_mkdir+0xa1>
c00065ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b3:	75 74                	jne    c0006629 <f_mkdir+0x1e3>
c00065b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b8:	ba 00 00 21 50       	mov    edx,0x50210000
c00065bd:	83 c0 0c             	add    eax,0xc
c00065c0:	e8 fb b4 ff ff       	call   c0001ac0 <st_dword>
c00065c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c9:	89 f2                	mov    edx,esi
c00065cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ce:	83 c0 34             	add    eax,0x34
c00065d1:	e8 ea b4 ff ff       	call   c0001ac0 <st_dword>
c00065d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065da:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e1:	c1 e2 09             	shl    edx,0x9
c00065e4:	83 c0 38             	add    eax,0x38
c00065e7:	e8 d4 b4 ff ff       	call   c0001ac0 <st_dword>
c00065ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f0:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f7:	c1 e2 09             	shl    edx,0x9
c00065fa:	83 c0 28             	add    eax,0x28
c00065fd:	e8 be b4 ff ff       	call   c0001ac0 <st_dword>
c0006602:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006606:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006609:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000660d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006610:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006614:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006618:	e8 8b d3 ff ff       	call   c00039a8 <store_xdir>
c000661d:	89 c3                	mov    ebx,eax
c000661f:	85 c0                	test   eax,eax
c0006621:	0f 85 d4 fe ff ff    	jne    c00064fb <f_mkdir+0xb5>
c0006627:	eb 30                	jmp    c0006659 <f_mkdir+0x213>
c0006629:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000662d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006632:	83 c0 16             	add    eax,0x16
c0006635:	e8 86 b4 ff ff       	call   c0001ac0 <st_dword>
c000663a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663e:	89 f1                	mov    ecx,esi
c0006640:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006644:	e8 a5 e5 ff ff       	call   c0004bee <st_clust.isra.1>
c0006649:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664d:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006655:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665d:	e8 f1 dc ff ff       	call   c0004353 <sync_fs>
c0006662:	89 c3                	mov    ebx,eax
c0006664:	e9 92 fe ff ff       	jmp    c00064fb <f_mkdir+0xb5>
c0006669:	83 ec 80             	sub    esp,0xffffff80
c000666c:	89 d8                	mov    eax,ebx
c000666e:	5b                   	pop    ebx
c000666f:	5e                   	pop    esi
c0006670:	5f                   	pop    edi
c0006671:	c3                   	ret    

c0006672 <f_rename>:
c0006672:	55                   	push   ebp
c0006673:	57                   	push   edi
c0006674:	56                   	push   esi
c0006675:	53                   	push   ebx
c0006676:	81 ec fc 00 00 00    	sub    esp,0xfc
c000667c:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006683:	e8 a4 b9 ff ff       	call   c000202c <get_ldnumber>
c0006688:	b9 02 00 00 00       	mov    ecx,0x2
c000668d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006691:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006698:	e8 3d be ff ff       	call   c00024da <mount_volume>
c000669d:	85 c0                	test   eax,eax
c000669f:	0f 85 b5 02 00 00    	jne    c000695a <f_rename+0x2e8>
c00066a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066a9:	83 ec 0c             	sub    esp,0xc
c00066ac:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066b0:	68 60 04 00 00       	push   0x460
c00066b5:	e8 c3 1b 00 00       	call   c000827d <ff_memalloc>
c00066ba:	83 c4 10             	add    esp,0x10
c00066bd:	89 c3                	mov    ebx,eax
c00066bf:	b8 11 00 00 00       	mov    eax,0x11
c00066c4:	85 db                	test   ebx,ebx
c00066c6:	0f 84 8e 02 00 00    	je     c000695a <f_rename+0x2e8>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066d6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dc:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066e3:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066e7:	e8 64 e5 ff ff       	call   c0004c50 <follow_path>
c00066ec:	85 c0                	test   eax,eax
c00066ee:	0f 85 52 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c00066f4:	b8 06 00 00 00       	mov    eax,0x6
c00066f9:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006701:	0f 85 3f 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670e:	0f 85 05 01 00 00    	jne    c0006819 <f_rename+0x1a7>
c0006714:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006717:	b9 40 00 00 00       	mov    ecx,0x40
c000671c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006720:	e8 a4 b3 ff ff       	call   c0001ac9 <mem_cpy>
c0006725:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672a:	8d 54 24 58          	lea    edx,[esp+0x58]
c000672e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006735:	e8 8f b3 ff ff       	call   c0001ac9 <mem_cpy>
c000673a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006741:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006748:	e8 03 e5 ff ff       	call   c0004c50 <follow_path>
c000674d:	85 c0                	test   eax,eax
c000674f:	75 29                	jne    c000677a <f_rename+0x108>
c0006751:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006755:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675c:	74 0a                	je     c0006768 <f_rename+0xf6>
c000675e:	b8 08 00 00 00       	mov    eax,0x8
c0006763:	e9 de 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006768:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000676f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006776:	75 e6                	jne    c000675e <f_rename+0xec>
c0006778:	eb 09                	jmp    c0006783 <f_rename+0x111>
c000677a:	83 f8 04             	cmp    eax,0x4
c000677d:	0f 85 c3 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006783:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678a:	e8 42 d9 ff ff       	call   c00040d1 <dir_register>
c000678f:	85 c0                	test   eax,eax
c0006791:	0f 85 af 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679b:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000679e:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067a1:	89 c5                	mov    ebp,eax
c00067a3:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067a6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067aa:	8d 46 24             	lea    eax,[esi+0x24]
c00067ad:	e8 98 b2 ff ff       	call   c0001a4a <ld_word>
c00067b2:	b9 40 00 00 00       	mov    ecx,0x40
c00067b7:	89 c7                	mov    edi,eax
c00067b9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067bd:	89 f0                	mov    eax,esi
c00067bf:	e8 05 b3 ff ff       	call   c0001ac9 <mem_cpy>
c00067c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c8:	89 e9                	mov    ecx,ebp
c00067ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cd:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067d0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067db:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067de:	0f b7 d7             	movzx  edx,di
c00067e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e4:	83 c0 24             	add    eax,0x24
c00067e7:	e8 d0 b2 ff ff       	call   c0001abc <st_word>
c00067ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067f3:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067f6:	a8 10                	test   al,0x10
c00067f8:	75 06                	jne    c0006800 <f_rename+0x18e>
c00067fa:	83 c8 20             	or     eax,0x20
c00067fd:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006800:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006807:	e8 9c d1 ff ff       	call   c00039a8 <store_xdir>
c000680c:	85 c0                	test   eax,eax
c000680e:	0f 84 1c 01 00 00    	je     c0006930 <f_rename+0x2be>
c0006814:	e9 2d 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006819:	b9 20 00 00 00       	mov    ecx,0x20
c000681e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 9b b2 ff ff       	call   c0001ac9 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 86 b2 ff ff       	call   c0001ac9 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 fa e3 ff ff       	call   c0004c50 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 27                	jne    c0006881 <f_rename+0x20f>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	0f 85 f3 fe ff ff    	jne    c000675e <f_rename+0xec>
c000686b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006872:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006879:	0f 85 df fe ff ff    	jne    c000675e <f_rename+0xec>
c000687f:	eb 09                	jmp    c000688a <f_rename+0x218>
c0006881:	83 f8 04             	cmp    eax,0x4
c0006884:	0f 85 bc 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000688a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006891:	e8 3b d8 ff ff       	call   c00040d1 <dir_register>
c0006896:	85 c0                	test   eax,eax
c0006898:	0f 85 a8 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000689e:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068a5:	b9 13 00 00 00       	mov    ecx,0x13
c00068aa:	8d 46 0d             	lea    eax,[esi+0xd]
c00068ad:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068b1:	e8 13 b2 ff ff       	call   c0001ac9 <mem_cpy>
c00068b6:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068ba:	a8 10                	test   al,0x10
c00068bc:	75 03                	jne    c00068c1 <f_rename+0x24f>
c00068be:	83 c8 20             	or     eax,0x20
c00068c1:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068cc:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068d0:	74 5e                	je     c0006930 <f_rename+0x2be>
c00068d2:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068d9:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068dd:	74 51                	je     c0006930 <f_rename+0x2be>
c00068df:	89 f2                	mov    edx,esi
c00068e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068e5:	8a 07                	mov    al,BYTE PTR [edi]
c00068e7:	e8 d9 e2 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c00068ec:	89 c2                	mov    edx,eax
c00068ee:	89 f8                	mov    eax,edi
c00068f0:	e8 ee b3 ff ff       	call   c0001ce3 <clst2sect>
c00068f5:	89 c6                	mov    esi,eax
c00068f7:	89 d1                	mov    ecx,edx
c00068f9:	b8 02 00 00 00       	mov    eax,0x2
c00068fe:	09 f2                	or     edx,esi
c0006900:	74 44                	je     c0006946 <f_rename+0x2d4>
c0006902:	89 f2                	mov    edx,esi
c0006904:	89 f8                	mov    eax,edi
c0006906:	e8 1d b9 ff ff       	call   c0002228 <move_window>
c000690b:	85 c0                	test   eax,eax
c000690d:	75 37                	jne    c0006946 <f_rename+0x2d4>
c000690f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006913:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006917:	75 17                	jne    c0006930 <f_rename+0x2be>
c0006919:	8d 50 74             	lea    edx,[eax+0x74]
c000691c:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006923:	e8 c6 e2 ff ff       	call   c0004bee <st_clust.isra.1>
c0006928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006930:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006934:	e8 f4 d0 ff ff       	call   c0003a2d <dir_remove>
c0006939:	85 c0                	test   eax,eax
c000693b:	75 09                	jne    c0006946 <f_rename+0x2d4>
c000693d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006941:	e8 0d da ff ff       	call   c0004353 <sync_fs>
c0006946:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	53                   	push   ebx
c000694e:	e8 40 19 00 00       	call   c0008293 <ff_memfree>
c0006953:	83 c4 10             	add    esp,0x10
c0006956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000695a:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006960:	5b                   	pop    ebx
c0006961:	5e                   	pop    esi
c0006962:	5f                   	pop    edi
c0006963:	5d                   	pop    ebp
c0006964:	c3                   	ret    

c0006965 <f_chmod>:
c0006965:	57                   	push   edi
c0006966:	b9 02 00 00 00       	mov    ecx,0x2
c000696b:	56                   	push   esi
c000696c:	53                   	push   ebx
c000696d:	83 ec 60             	sub    esp,0x60
c0006970:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006974:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006978:	8d 54 24 10          	lea    edx,[esp+0x10]
c000697c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006980:	e8 55 bb ff ff       	call   c00024da <mount_volume>
c0006985:	85 c0                	test   eax,eax
c0006987:	0f 85 af 00 00 00    	jne    c0006a3c <f_chmod+0xd7>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	83 ec 0c             	sub    esp,0xc
c0006994:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006998:	68 60 04 00 00       	push   0x460
c000699d:	e8 db 18 00 00       	call   c000827d <ff_memalloc>
c00069a2:	83 c4 10             	add    esp,0x10
c00069a5:	89 c6                	mov    esi,eax
c00069a7:	b8 11 00 00 00       	mov    eax,0x11
c00069ac:	85 f6                	test   esi,esi
c00069ae:	0f 84 88 00 00 00    	je     c0006a3c <f_chmod+0xd7>
c00069b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069c4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069cc:	e8 7f e2 ff ff       	call   c0004c50 <follow_path>
c00069d1:	85 c0                	test   eax,eax
c00069d3:	75 53                	jne    c0006a28 <f_chmod+0xc3>
c00069d5:	b8 06 00 00 00       	mov    eax,0x6
c00069da:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069df:	75 47                	jne    c0006a28 <f_chmod+0xc3>
c00069e1:	89 f9                	mov    ecx,edi
c00069e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e7:	83 e1 27             	and    ecx,0x27
c00069ea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ed:	75 1d                	jne    c0006a0c <f_chmod+0xa7>
c00069ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f2:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f5:	21 cb                	and    ebx,ecx
c00069f7:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069fa:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a01:	e8 a2 cf ff ff       	call   c00039a8 <store_xdir>
c0006a06:	85 c0                	test   eax,eax
c0006a08:	75 1e                	jne    c0006a28 <f_chmod+0xc3>
c0006a0a:	eb 13                	jmp    c0006a1f <f_chmod+0xba>
c0006a0c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a10:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a13:	21 cb                	and    ebx,ecx
c0006a15:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a18:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	e8 2b d9 ff ff       	call   c0004353 <sync_fs>
c0006a28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a2c:	83 ec 0c             	sub    esp,0xc
c0006a2f:	56                   	push   esi
c0006a30:	e8 5e 18 00 00       	call   c0008293 <ff_memfree>
c0006a35:	83 c4 10             	add    esp,0x10
c0006a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a3c:	83 c4 60             	add    esp,0x60
c0006a3f:	5b                   	pop    ebx
c0006a40:	5e                   	pop    esi
c0006a41:	5f                   	pop    edi
c0006a42:	c3                   	ret    

c0006a43 <f_utime>:
c0006a43:	56                   	push   esi
c0006a44:	b9 02 00 00 00       	mov    ecx,0x2
c0006a49:	53                   	push   ebx
c0006a4a:	83 ec 64             	sub    esp,0x64
c0006a4d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a51:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a59:	e8 7c ba ff ff       	call   c00024da <mount_volume>
c0006a5e:	85 c0                	test   eax,eax
c0006a60:	0f 85 b5 00 00 00    	jne    c0006b1b <f_utime+0xd8>
c0006a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6a:	83 ec 0c             	sub    esp,0xc
c0006a6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a71:	68 60 04 00 00       	push   0x460
c0006a76:	e8 02 18 00 00       	call   c000827d <ff_memalloc>
c0006a7b:	83 c4 10             	add    esp,0x10
c0006a7e:	89 c3                	mov    ebx,eax
c0006a80:	b8 11 00 00 00       	mov    eax,0x11
c0006a85:	85 db                	test   ebx,ebx
c0006a87:	0f 84 8e 00 00 00    	je     c0006b1b <f_utime+0xd8>
c0006a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a91:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a97:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a9a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a9d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aa1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa5:	e8 a6 e1 ff ff       	call   c0004c50 <follow_path>
c0006aaa:	85 c0                	test   eax,eax
c0006aac:	75 59                	jne    c0006b07 <f_utime+0xc4>
c0006aae:	b8 06 00 00 00       	mov    eax,0x6
c0006ab3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab8:	75 4d                	jne    c0006b07 <f_utime+0xc4>
c0006aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abe:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ac2:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ac6:	c1 e2 10             	shl    edx,0x10
c0006ac9:	09 ca                	or     edx,ecx
c0006acb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ace:	75 1a                	jne    c0006aea <f_utime+0xa7>
c0006ad0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ad3:	83 c0 0c             	add    eax,0xc
c0006ad6:	e8 e5 af ff ff       	call   c0001ac0 <st_dword>
c0006adb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006adf:	e8 c4 ce ff ff       	call   c00039a8 <store_xdir>
c0006ae4:	85 c0                	test   eax,eax
c0006ae6:	75 1f                	jne    c0006b07 <f_utime+0xc4>
c0006ae8:	eb 14                	jmp    c0006afe <f_utime+0xbb>
c0006aea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aee:	83 c0 16             	add    eax,0x16
c0006af1:	e8 ca af ff ff       	call   c0001ac0 <st_dword>
c0006af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	e8 4c d8 ff ff       	call   c0004353 <sync_fs>
c0006b07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b0b:	83 ec 0c             	sub    esp,0xc
c0006b0e:	53                   	push   ebx
c0006b0f:	e8 7f 17 00 00       	call   c0008293 <ff_memfree>
c0006b14:	83 c4 10             	add    esp,0x10
c0006b17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1b:	83 c4 64             	add    esp,0x64
c0006b1e:	5b                   	pop    ebx
c0006b1f:	5e                   	pop    esi
c0006b20:	c3                   	ret    

c0006b21 <f_getlabel>:
c0006b21:	55                   	push   ebp
c0006b22:	31 c9                	xor    ecx,ecx
c0006b24:	57                   	push   edi
c0006b25:	56                   	push   esi
c0006b26:	53                   	push   ebx
c0006b27:	83 ec 6c             	sub    esp,0x6c
c0006b2a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b35:	e8 a0 b9 ff ff       	call   c00024da <mount_volume>
c0006b3a:	89 c6                	mov    esi,eax
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 c1 01 00 00    	jne    c0006d05 <f_getlabel+0x1e4>
c0006b44:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b4c:	0f 84 5f 01 00 00    	je     c0006cb1 <f_getlabel+0x190>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	31 d2                	xor    edx,edx
c0006b58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b64:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b68:	e8 39 c4 ff ff       	call   c0002fa6 <dir_sdi>
c0006b6d:	85 c0                	test   eax,eax
c0006b6f:	0f 85 2d 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b75:	ba 01 00 00 00       	mov    edx,0x1
c0006b7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7e:	e8 33 cc ff ff       	call   c00037b6 <dir_read>
c0006b83:	85 c0                	test   eax,eax
c0006b85:	0f 85 17 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b92:	74 09                	je     c0006b9d <f_getlabel+0x7c>
c0006b94:	31 db                	xor    ebx,ebx
c0006b96:	31 c9                	xor    ecx,ecx
c0006b98:	e9 c8 00 00 00       	jmp    c0006c65 <f_getlabel+0x144>
c0006b9d:	31 ed                	xor    ebp,ebp
c0006b9f:	31 db                	xor    ebx,ebx
c0006ba1:	31 ff                	xor    edi,edi
c0006ba3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ba7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bab:	39 fa                	cmp    edx,edi
c0006bad:	76 4b                	jbe    c0006bfa <f_getlabel+0xd9>
c0006baf:	47                   	inc    edi
c0006bb0:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bb3:	01 d0                	add    eax,edx
c0006bb5:	e8 90 ae ff ff       	call   c0001a4a <ld_word>
c0006bba:	66 85 ed             	test   bp,bp
c0006bbd:	75 0d                	jne    c0006bcc <f_getlabel+0xab>
c0006bbf:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bc5:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bca:	76 28                	jbe    c0006bf4 <f_getlabel+0xd3>
c0006bcc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bd3:	89 e9                	mov    ecx,ebp
c0006bd5:	01 da                	add    edx,ebx
c0006bd7:	c1 e1 10             	shl    ecx,0x10
c0006bda:	0f b7 c0             	movzx  eax,ax
c0006bdd:	09 c8                	or     eax,ecx
c0006bdf:	b9 04 00 00 00       	mov    ecx,0x4
c0006be4:	e8 01 b0 ff ff       	call   c0001bea <put_utf>
c0006be9:	84 c0                	test   al,al
c0006beb:	74 0b                	je     c0006bf8 <f_getlabel+0xd7>
c0006bed:	0f b6 c0             	movzx  eax,al
c0006bf0:	01 c3                	add    ebx,eax
c0006bf2:	31 c0                	xor    eax,eax
c0006bf4:	89 c5                	mov    ebp,eax
c0006bf6:	eb ab                	jmp    c0006ba3 <f_getlabel+0x82>
c0006bf8:	31 db                	xor    ebx,ebx
c0006bfa:	66 85 ed             	test   bp,bp
c0006bfd:	74 02                	je     c0006c01 <f_getlabel+0xe0>
c0006bff:	31 db                	xor    ebx,ebx
c0006c01:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c08:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c0c:	e9 a0 00 00 00       	jmp    c0006cb1 <f_getlabel+0x190>
c0006c11:	83 ff 0b             	cmp    edi,0xb
c0006c14:	74 11                	je     c0006c27 <f_getlabel+0x106>
c0006c16:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c1f:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c22:	c1 e0 08             	shl    eax,0x8
c0006c25:	09 c2                	or     edx,eax
c0006c27:	0f b7 d2             	movzx  edx,dx
c0006c2a:	50                   	push   eax
c0006c2b:	50                   	push   eax
c0006c2c:	68 b5 01 00 00       	push   0x1b5
c0006c31:	52                   	push   edx
c0006c32:	e8 03 17 00 00       	call   c000833a <ff_oem2uni>
c0006c37:	83 c4 10             	add    esp,0x10
c0006c3a:	66 85 c0             	test   ax,ax
c0006c3d:	74 46                	je     c0006c85 <f_getlabel+0x164>
c0006c3f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c46:	0f b7 c0             	movzx  eax,ax
c0006c49:	01 da                	add    edx,ebx
c0006c4b:	b9 04 00 00 00       	mov    ecx,0x4
c0006c50:	e8 95 af ff ff       	call   c0001bea <put_utf>
c0006c55:	84 c0                	test   al,al
c0006c57:	74 2c                	je     c0006c85 <f_getlabel+0x164>
c0006c59:	0f b6 c0             	movzx  eax,al
c0006c5c:	01 c3                	add    ebx,eax
c0006c5e:	83 ff 0b             	cmp    edi,0xb
c0006c61:	74 24                	je     c0006c87 <f_getlabel+0x166>
c0006c63:	89 f9                	mov    ecx,edi
c0006c65:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c69:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c6c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c71:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c7a:	e8 9f ae ff ff       	call   c0001b1e <dbc_1st>
c0006c7f:	85 c0                	test   eax,eax
c0006c81:	74 a4                	je     c0006c27 <f_getlabel+0x106>
c0006c83:	eb 8c                	jmp    c0006c11 <f_getlabel+0xf0>
c0006c85:	31 db                	xor    ebx,ebx
c0006c87:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c8e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c91:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c98:	74 17                	je     c0006cb1 <f_getlabel+0x190>
c0006c9a:	4b                   	dec    ebx
c0006c9b:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c9e:	74 ee                	je     c0006c8e <f_getlabel+0x16d>
c0006ca0:	eb 0f                	jmp    c0006cb1 <f_getlabel+0x190>
c0006ca2:	83 f8 04             	cmp    eax,0x4
c0006ca5:	75 5c                	jne    c0006d03 <f_getlabel+0x1e2>
c0006ca7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cb1:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cb9:	74 4a                	je     c0006d05 <f_getlabel+0x1e4>
c0006cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cbf:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cc2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cc5:	e8 5e b5 ff ff       	call   c0002228 <move_window>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	85 c0                	test   eax,eax
c0006cce:	75 35                	jne    c0006d05 <f_getlabel+0x1e4>
c0006cd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cd4:	b8 43 00 00 00       	mov    eax,0x43
c0006cd9:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cdb:	80 f9 03             	cmp    cl,0x3
c0006cde:	74 0f                	je     c0006cef <f_getlabel+0x1ce>
c0006ce0:	31 c0                	xor    eax,eax
c0006ce2:	80 f9 04             	cmp    cl,0x4
c0006ce5:	0f 94 c0             	sete   al
c0006ce8:	48                   	dec    eax
c0006ce9:	83 e0 c3             	and    eax,0xffffffc3
c0006cec:	83 c0 64             	add    eax,0x64
c0006cef:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cf3:	e8 5f ad ff ff       	call   c0001a57 <ld_dword>
c0006cf8:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cff:	89 07                	mov    DWORD PTR [edi],eax
c0006d01:	eb 02                	jmp    c0006d05 <f_getlabel+0x1e4>
c0006d03:	89 c6                	mov    esi,eax
c0006d05:	83 c4 6c             	add    esp,0x6c
c0006d08:	89 f0                	mov    eax,esi
c0006d0a:	5b                   	pop    ebx
c0006d0b:	5e                   	pop    esi
c0006d0c:	5f                   	pop    edi
c0006d0d:	5d                   	pop    ebp
c0006d0e:	c3                   	ret    

c0006d0f <f_setlabel>:
c0006d0f:	56                   	push   esi
c0006d10:	b9 02 00 00 00       	mov    ecx,0x2
c0006d15:	53                   	push   ebx
c0006d16:	83 ec 74             	sub    esp,0x74
c0006d19:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d1d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d24:	e8 b1 b7 ff ff       	call   c00024da <mount_volume>
c0006d29:	89 c6                	mov    esi,eax
c0006d2b:	85 c0                	test   eax,eax
c0006d2d:	0f 85 41 02 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d37:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d3a:	0f 85 8e 00 00 00    	jne    c0006dce <f_setlabel+0xbf>
c0006d40:	b9 16 00 00 00       	mov    ecx,0x16
c0006d45:	31 d2                	xor    edx,edx
c0006d47:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d4b:	31 db                	xor    ebx,ebx
c0006d4d:	e8 8c ad ff ff       	call   c0001ade <mem_set>
c0006d52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d59:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d5c:	0f 86 0a 01 00 00    	jbe    c0006e6c <f_setlabel+0x15d>
c0006d62:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d69:	e8 b6 ad ff ff       	call   c0001b24 <tchar2uni>
c0006d6e:	89 c6                	mov    esi,eax
c0006d70:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d75:	76 2a                	jbe    c0006da1 <f_setlabel+0x92>
c0006d77:	83 f8 ff             	cmp    eax,0xffffffff
c0006d7a:	74 05                	je     c0006d81 <f_setlabel+0x72>
c0006d7c:	83 fb 09             	cmp    ebx,0x9
c0006d7f:	76 0a                	jbe    c0006d8b <f_setlabel+0x7c>
c0006d81:	be 06 00 00 00       	mov    esi,0x6
c0006d86:	e9 e9 01 00 00       	jmp    c0006f74 <f_setlabel+0x265>
c0006d8b:	89 c2                	mov    edx,eax
c0006d8d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d91:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d94:	c1 ea 10             	shr    edx,0x10
c0006d97:	01 c8                	add    eax,ecx
c0006d99:	43                   	inc    ebx
c0006d9a:	e8 1d ad ff ff       	call   c0001abc <st_word>
c0006d9f:	eb 04                	jmp    c0006da5 <f_setlabel+0x96>
c0006da1:	85 c0                	test   eax,eax
c0006da3:	74 dc                	je     c0006d81 <f_setlabel+0x72>
c0006da5:	89 f2                	mov    edx,esi
c0006da7:	b8 77 80 02 c0       	mov    eax,0xc0028077
c0006dac:	e8 5b ad ff ff       	call   c0001b0c <chk_chr>
c0006db1:	85 c0                	test   eax,eax
c0006db3:	75 cc                	jne    c0006d81 <f_setlabel+0x72>
c0006db5:	83 fb 0a             	cmp    ebx,0xa
c0006db8:	77 c7                	ja     c0006d81 <f_setlabel+0x72>
c0006dba:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbd:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dc1:	0f b7 d6             	movzx  edx,si
c0006dc4:	01 c8                	add    eax,ecx
c0006dc6:	43                   	inc    ebx
c0006dc7:	e8 f0 ac ff ff       	call   c0001abc <st_word>
c0006dcc:	eb 84                	jmp    c0006d52 <f_setlabel+0x43>
c0006dce:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dd3:	ba 20 00 00 00       	mov    edx,0x20
c0006dd8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	e8 fb ac ff ff       	call   c0001ade <mem_set>
c0006de3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006dea:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ded:	76 60                	jbe    c0006e4f <f_setlabel+0x140>
c0006def:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006df6:	e8 29 ad ff ff       	call   c0001b24 <tchar2uni>
c0006dfb:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e00:	0f 87 7b ff ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006e06:	83 ec 0c             	sub    esp,0xc
c0006e09:	50                   	push   eax
c0006e0a:	e8 97 15 00 00       	call   c00083a6 <ff_wtoupper>
c0006e0f:	5a                   	pop    edx
c0006e10:	59                   	pop    ecx
c0006e11:	68 b5 01 00 00       	push   0x1b5
c0006e16:	50                   	push   eax
c0006e17:	e8 8e 14 00 00       	call   c00082aa <ff_uni2oem>
c0006e1c:	83 c4 10             	add    esp,0x10
c0006e1f:	89 c6                	mov    esi,eax
c0006e21:	66 85 c0             	test   ax,ax
c0006e24:	0f 84 57 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e2a:	0f b7 d0             	movzx  edx,ax
c0006e2d:	b8 70 80 02 c0       	mov    eax,0xc0028070
c0006e32:	e8 d5 ac ff ff       	call   c0001b0c <chk_chr>
c0006e37:	85 c0                	test   eax,eax
c0006e39:	0f 85 42 ff ff ff    	jne    c0006d81 <f_setlabel+0x72>
c0006e3f:	66 81 fe ff 00       	cmp    si,0xff
c0006e44:	0f 87 14 01 00 00    	ja     c0006f5e <f_setlabel+0x24f>
c0006e4a:	e9 fa 00 00 00       	jmp    c0006f49 <f_setlabel+0x23a>
c0006e4f:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e54:	0f 84 27 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e5a:	85 db                	test   ebx,ebx
c0006e5c:	74 0e                	je     c0006e6c <f_setlabel+0x15d>
c0006e5e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e61:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e66:	75 04                	jne    c0006e6c <f_setlabel+0x15d>
c0006e68:	89 c3                	mov    ebx,eax
c0006e6a:	eb ee                	jmp    c0006e5a <f_setlabel+0x14b>
c0006e6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e70:	31 d2                	xor    edx,edx
c0006e72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e76:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e7e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e82:	e8 1f c1 ff ff       	call   c0002fa6 <dir_sdi>
c0006e87:	89 c6                	mov    esi,eax
c0006e89:	85 c0                	test   eax,eax
c0006e8b:	0f 85 e3 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006e91:	ba 01 00 00 00       	mov    edx,0x1
c0006e96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e9a:	e8 17 c9 ff ff       	call   c00037b6 <dir_read>
c0006e9f:	85 c0                	test   eax,eax
c0006ea1:	75 21                	jne    c0006ec4 <f_setlabel+0x1b5>
c0006ea3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ea7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eab:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eae:	74 5d                	je     c0006f0d <f_setlabel+0x1fe>
c0006eb0:	85 db                	test   ebx,ebx
c0006eb2:	74 0b                	je     c0006ebf <f_setlabel+0x1b0>
c0006eb4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eb9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ebd:	eb 70                	jmp    c0006f2f <f_setlabel+0x220>
c0006ebf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ec2:	eb 70                	jmp    c0006f34 <f_setlabel+0x225>
c0006ec4:	83 f8 04             	cmp    eax,0x4
c0006ec7:	75 7c                	jne    c0006f45 <f_setlabel+0x236>
c0006ec9:	85 db                	test   ebx,ebx
c0006ecb:	0f 84 a3 00 00 00    	je     c0006f74 <f_setlabel+0x265>
c0006ed1:	ba 01 00 00 00       	mov    edx,0x1
c0006ed6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eda:	e8 51 ca ff ff       	call   c0003930 <dir_alloc>
c0006edf:	89 c6                	mov    esi,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 8b 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006ee9:	31 d2                	xor    edx,edx
c0006eeb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eef:	b9 20 00 00 00       	mov    ecx,0x20
c0006ef4:	e8 e5 ab ff ff       	call   c0001ade <mem_set>
c0006ef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f00:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f04:	75 18                	jne    c0006f1e <f_setlabel+0x20f>
c0006f06:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0d:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f10:	b9 16 00 00 00       	mov    ecx,0x16
c0006f15:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f19:	83 c0 02             	add    eax,0x2
c0006f1c:	eb 9b                	jmp    c0006eb9 <f_setlabel+0x1aa>
c0006f1e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f22:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f27:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2f:	e8 95 ab ff ff       	call   c0001ac9 <mem_cpy>
c0006f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f38:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f40:	e8 0e d4 ff ff       	call   c0004353 <sync_fs>
c0006f45:	89 c6                	mov    esi,eax
c0006f47:	eb 2b                	jmp    c0006f74 <f_setlabel+0x265>
c0006f49:	83 fb 0a             	cmp    ebx,0xa
c0006f4c:	0f 87 2f fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f52:	89 f0                	mov    eax,esi
c0006f54:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f58:	43                   	inc    ebx
c0006f59:	e9 85 fe ff ff       	jmp    c0006de3 <f_setlabel+0xd4>
c0006f5e:	83 fb 09             	cmp    ebx,0x9
c0006f61:	0f 87 1a fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f67:	89 f0                	mov    eax,esi
c0006f69:	66 c1 e8 08          	shr    ax,0x8
c0006f6d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f71:	43                   	inc    ebx
c0006f72:	eb de                	jmp    c0006f52 <f_setlabel+0x243>
c0006f74:	89 f0                	mov    eax,esi
c0006f76:	83 c4 74             	add    esp,0x74
c0006f79:	5b                   	pop    ebx
c0006f7a:	5e                   	pop    esi
c0006f7b:	c3                   	ret    

c0006f7c <f_forward>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 2c             	sub    esp,0x2c
c0006f83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f95:	89 d8                	mov    eax,ebx
c0006f97:	e8 b1 b1 ff ff       	call   c000214d <validate>
c0006f9c:	89 c5                	mov    ebp,eax
c0006f9e:	85 c0                	test   eax,eax
c0006fa0:	0f 85 aa 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fa6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006faa:	85 ed                	test   ebp,ebp
c0006fac:	0f 85 9e 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fb2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fb6:	0f 84 8f 01 00 00    	je     c000714b <f_forward+0x1cf>
c0006fbc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fbf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fc2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fc5:	bf 00 00 00 00       	mov    edi,0x0
c0006fca:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fcd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fd1:	89 d1                	mov    ecx,edx
c0006fd3:	19 f9                	sbb    ecx,edi
c0006fd5:	0f 83 cf 00 00 00    	jae    c00070aa <f_forward+0x12e>
c0006fdb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fdf:	e9 c6 00 00 00       	jmp    c00070aa <f_forward+0x12e>
c0006fe4:	50                   	push   eax
c0006fe5:	50                   	push   eax
c0006fe6:	6a 00                	push   0x0
c0006fe8:	6a 00                	push   0x0
c0006fea:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fee:	83 c4 10             	add    esp,0x10
c0006ff1:	85 c0                	test   eax,eax
c0006ff3:	0f 84 57 01 00 00    	je     c0007150 <f_forward+0x1d4>
c0006ff9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ffc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007000:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007003:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007007:	89 d7                	mov    edi,edx
c0007009:	8d 4e ff             	lea    ecx,[esi-0x1]
c000700c:	89 c6                	mov    esi,eax
c000700e:	0f ac fe 09          	shrd   esi,edi,0x9
c0007012:	21 ce                	and    esi,ecx
c0007014:	89 c1                	mov    ecx,eax
c0007016:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000701c:	0f 84 98 00 00 00    	je     c00070ba <f_forward+0x13e>
c0007022:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007026:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007029:	89 c8                	mov    eax,ecx
c000702b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000702f:	e8 af ac ff ff       	call   c0001ce3 <clst2sect>
c0007034:	89 d7                	mov    edi,edx
c0007036:	09 c7                	or     edi,eax
c0007038:	0f 84 9e 00 00 00    	je     c00070dc <f_forward+0x160>
c000703e:	31 ff                	xor    edi,edi
c0007040:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007043:	01 c6                	add    esi,eax
c0007045:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007049:	11 d7                	adc    edi,edx
c000704b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000704e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007051:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007055:	39 fa                	cmp    edx,edi
c0007057:	0f 85 a2 00 00 00    	jne    c00070ff <f_forward+0x183>
c000705d:	39 f0                	cmp    eax,esi
c000705f:	0f 85 9a 00 00 00    	jne    c00070ff <f_forward+0x183>
c0007065:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007068:	ba 00 02 00 00       	mov    edx,0x200
c000706d:	25 ff 01 00 00       	and    eax,0x1ff
c0007072:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007076:	29 c2                	sub    edx,eax
c0007078:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000707b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000707e:	39 d1                	cmp    ecx,edx
c0007080:	76 02                	jbe    c0007084 <f_forward+0x108>
c0007082:	89 d1                	mov    ecx,edx
c0007084:	8d 73 50             	lea    esi,[ebx+0x50]
c0007087:	52                   	push   edx
c0007088:	01 c6                	add    esi,eax
c000708a:	52                   	push   edx
c000708b:	51                   	push   ecx
c000708c:	56                   	push   esi
c000708d:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007091:	83 c4 10             	add    esp,0x10
c0007094:	85 c0                	test   eax,eax
c0007096:	74 44                	je     c00070dc <f_forward+0x160>
c0007098:	31 ff                	xor    edi,edi
c000709a:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000709d:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070a0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070a4:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a8:	01 07                	add    DWORD PTR [edi],eax
c00070aa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070af:	0f 85 2f ff ff ff    	jne    c0006fe4 <f_forward+0x68>
c00070b5:	e9 96 00 00 00       	jmp    c0007150 <f_forward+0x1d4>
c00070ba:	85 f6                	test   esi,esi
c00070bc:	0f 85 60 ff ff ff    	jne    c0007022 <f_forward+0xa6>
c00070c2:	89 d7                	mov    edi,edx
c00070c4:	09 c7                	or     edi,eax
c00070c6:	75 05                	jne    c00070cd <f_forward+0x151>
c00070c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070cb:	eb 0a                	jmp    c00070d7 <f_forward+0x15b>
c00070cd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070d0:	89 d8                	mov    eax,ebx
c00070d2:	e8 d9 bc ff ff       	call   c0002db0 <get_fat>
c00070d7:	83 f8 01             	cmp    eax,0x1
c00070da:	77 0b                	ja     c00070e7 <f_forward+0x16b>
c00070dc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070e0:	bd 02 00 00 00       	mov    ebp,0x2
c00070e5:	eb 69                	jmp    c0007150 <f_forward+0x1d4>
c00070e7:	83 f8 ff             	cmp    eax,0xffffffff
c00070ea:	75 0b                	jne    c00070f7 <f_forward+0x17b>
c00070ec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070f0:	bd 01 00 00 00       	mov    ebp,0x1
c00070f5:	eb 59                	jmp    c0007150 <f_forward+0x1d4>
c00070f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070fa:	e9 23 ff ff ff       	jmp    c0007022 <f_forward+0xa6>
c00070ff:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007103:	79 20                	jns    c0007125 <f_forward+0x1a9>
c0007105:	83 ec 0c             	sub    esp,0xc
c0007108:	6a 01                	push   0x1
c000710a:	52                   	push   edx
c000710b:	50                   	push   eax
c000710c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007110:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007114:	50                   	push   eax
c0007115:	e8 fb a8 ff ff       	call   c0001a15 <disk_write>
c000711a:	83 c4 20             	add    esp,0x20
c000711d:	85 c0                	test   eax,eax
c000711f:	75 cb                	jne    c00070ec <f_forward+0x170>
c0007121:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007125:	83 ec 0c             	sub    esp,0xc
c0007128:	6a 01                	push   0x1
c000712a:	57                   	push   edi
c000712b:	56                   	push   esi
c000712c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007130:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007134:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007138:	50                   	push   eax
c0007139:	e8 c1 a8 ff ff       	call   c00019ff <disk_read>
c000713e:	83 c4 20             	add    esp,0x20
c0007141:	85 c0                	test   eax,eax
c0007143:	0f 84 1c ff ff ff    	je     c0007065 <f_forward+0xe9>
c0007149:	eb a1                	jmp    c00070ec <f_forward+0x170>
c000714b:	bd 07 00 00 00       	mov    ebp,0x7
c0007150:	83 c4 2c             	add    esp,0x2c
c0007153:	89 e8                	mov    eax,ebp
c0007155:	5b                   	pop    ebx
c0007156:	5e                   	pop    esi
c0007157:	5f                   	pop    edi
c0007158:	5d                   	pop    ebp
c0007159:	c3                   	ret    

c000715a <f_mkfs>:
c000715a:	55                   	push   ebp
c000715b:	57                   	push   edi
c000715c:	56                   	push   esi
c000715d:	53                   	push   ebx
c000715e:	bb 0b 00 00 00       	mov    ebx,0xb
c0007163:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007169:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007170:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007177:	e8 b0 ae ff ff       	call   c000202c <get_ldnumber>
c000717c:	85 c0                	test   eax,eax
c000717e:	0f 88 ec 10 00 00    	js     c0008270 <f_mkfs+0x1116>
c0007184:	8b 14 85 20 cd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd32e0]
c000718b:	85 d2                	test   edx,edx
c000718d:	74 03                	je     c0007192 <f_mkfs+0x38>
c000718f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007192:	85 f6                	test   esi,esi
c0007194:	75 05                	jne    c000719b <f_mkfs+0x41>
c0007196:	be 60 80 02 c0       	mov    esi,0xc0028060
c000719b:	83 ec 0c             	sub    esp,0xc
c000719e:	0f b6 c0             	movzx  eax,al
c00071a1:	bb 03 00 00 00       	mov    ebx,0x3
c00071a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ae:	e8 49 a8 ff ff       	call   c00019fc <disk_initialize>
c00071b3:	83 c4 10             	add    esp,0x10
c00071b6:	a8 01                	test   al,0x1
c00071b8:	0f 85 b2 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071be:	bb 0a 00 00 00       	mov    ebx,0xa
c00071c3:	a8 04                	test   al,0x4
c00071c5:	0f 85 a5 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071ce:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071d2:	85 c0                	test   eax,eax
c00071d4:	75 20                	jne    c00071f6 <f_mkfs+0x9c>
c00071d6:	51                   	push   ecx
c00071d7:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071db:	50                   	push   eax
c00071dc:	6a 03                	push   0x3
c00071de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e2:	e8 44 a8 ff ff       	call   c0001a2b <disk_ioctl>
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	85 c0                	test   eax,eax
c00071ec:	74 08                	je     c00071f6 <f_mkfs+0x9c>
c00071ee:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071f6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071fa:	8d 42 ff             	lea    eax,[edx-0x1]
c00071fd:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007202:	77 04                	ja     c0007208 <f_mkfs+0xae>
c0007204:	85 c2                	test   edx,eax
c0007206:	74 08                	je     c0007210 <f_mkfs+0xb6>
c0007208:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007210:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007213:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007217:	48                   	dec    eax
c0007218:	3c 01                	cmp    al,0x1
c000721a:	76 05                	jbe    c0007221 <f_mkfs+0xc7>
c000721c:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007221:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007224:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007228:	48                   	dec    eax
c0007229:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722e:	77 07                	ja     c0007237 <f_mkfs+0xdd>
c0007230:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007235:	74 08                	je     c000723f <f_mkfs+0xe5>
c0007237:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000723f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007242:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007248:	77 07                	ja     c0007251 <f_mkfs+0xf7>
c000724a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000724d:	85 d8                	test   eax,ebx
c000724f:	74 02                	je     c0007253 <f_mkfs+0xf9>
c0007251:	31 db                	xor    ebx,ebx
c0007253:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000725e:	77 0a                	ja     c000726a <f_mkfs+0x110>
c0007260:	bb 11 00 00 00       	mov    ebx,0x11
c0007265:	e9 06 10 00 00       	jmp    c0008270 <f_mkfs+0x1116>
c000726a:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007271:	8b 36                	mov    esi,DWORD PTR [esi]
c0007273:	85 ed                	test   ebp,ebp
c0007275:	75 1e                	jne    c0007295 <f_mkfs+0x13b>
c0007277:	83 ec 0c             	sub    esp,0xc
c000727a:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007281:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007286:	50                   	push   eax
c0007287:	e8 f1 0f 00 00       	call   c000827d <ff_memalloc>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	89 c5                	mov    ebp,eax
c0007291:	85 c0                	test   eax,eax
c0007293:	74 cb                	je     c0007260 <f_mkfs+0x106>
c0007295:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000729d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072a5:	52                   	push   edx
c00072a6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072aa:	50                   	push   eax
c00072ab:	6a 01                	push   0x1
c00072ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b1:	e8 75 a7 ff ff       	call   c0001a2b <disk_ioctl>
c00072b6:	83 c4 10             	add    esp,0x10
c00072b9:	85 c0                	test   eax,eax
c00072bb:	0f 85 4a 0f 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00072c1:	89 f1                	mov    ecx,esi
c00072c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072cb:	83 e1 0f             	and    ecx,0xf
c00072ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072d6:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072da:	83 e6 08             	and    esi,0x8
c00072dd:	75 56                	jne    c0007335 <f_mkfs+0x1db>
c00072df:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072e3:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072e7:	83 ff 00             	cmp    edi,0x0
c00072ea:	76 20                	jbe    c000730c <f_mkfs+0x1b2>
c00072ec:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072f1:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072f9:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072ff:	83 d7 ff             	adc    edi,0xffffffff
c0007302:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007306:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000730a:	eb 21                	jmp    c000732d <f_mkfs+0x1d3>
c000730c:	ba 3f 00 00 00       	mov    edx,0x3f
c0007311:	39 f2                	cmp    edx,esi
c0007313:	19 f8                	sbb    eax,edi
c0007315:	73 1e                	jae    c0007335 <f_mkfs+0x1db>
c0007317:	83 c6 c1             	add    esi,0xffffffc1
c000731a:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007322:	83 d7 ff             	adc    edi,0xffffffff
c0007325:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007329:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007335:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007339:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000733d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007340:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007344:	31 c0                	xor    eax,eax
c0007346:	ba 7f 00 00 00       	mov    edx,0x7f
c000734b:	89 c7                	mov    edi,eax
c000734d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007350:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007354:	0f 83 c5 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c000735a:	89 df                	mov    edi,ebx
c000735c:	c1 ef 09             	shr    edi,0x9
c000735f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007363:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000736a:	c1 ef 09             	shr    edi,0x9
c000736d:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007372:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007376:	74 29                	je     c00073a1 <f_mkfs+0x247>
c0007378:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737e:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007383:	0f 97 c2             	seta   dl
c0007386:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007389:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738d:	0f 92 c0             	setb   al
c0007390:	08 c2                	or     dl,al
c0007392:	75 5b                	jne    c00073ef <f_mkfs+0x295>
c0007394:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007398:	83 e0 07             	and    eax,0x7
c000739b:	3c 04                	cmp    al,0x4
c000739d:	74 50                	je     c00073ef <f_mkfs+0x295>
c000739f:	eb 1b                	jmp    c00073bc <f_mkfs+0x262>
c00073a1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073a6:	0f 87 73 0a 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c00073ac:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073b2:	76 08                	jbe    c00073bc <f_mkfs+0x262>
c00073b4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c0:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073c4:	83 e0 01             	and    eax,0x1
c00073c7:	80 e1 02             	and    cl,0x2
c00073ca:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073ce:	74 0d                	je     c00073dd <f_mkfs+0x283>
c00073d0:	84 c0                	test   al,al
c00073d2:	0f 84 53 09 00 00    	je     c0007d2b <f_mkfs+0xbd1>
c00073d8:	e9 12 08 00 00       	jmp    c0007bef <f_mkfs+0xa95>
c00073dd:	bb 13 00 00 00       	mov    ebx,0x13
c00073e2:	84 c0                	test   al,al
c00073e4:	0f 85 05 08 00 00    	jne    c0007bef <f_mkfs+0xa95>
c00073ea:	e9 39 0e 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c00073ef:	31 c0                	xor    eax,eax
c00073f1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073f6:	89 c7                	mov    edi,eax
c00073f8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073fb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073ff:	0f 83 1a 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c0007405:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000740b:	77 39                	ja     c0007446 <f_mkfs+0x2ec>
c000740d:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007412:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000741a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007421:	73 08                	jae    c000742b <f_mkfs+0x2d1>
c0007423:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000742b:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007430:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007433:	b8 00 00 00 00       	mov    eax,0x0
c0007438:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000743c:	73 08                	jae    c0007446 <f_mkfs+0x2ec>
c000743e:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000744e:	83 c0 20             	add    eax,0x20
c0007451:	83 d2 00             	adc    edx,0x0
c0007454:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007458:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000745c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007460:	31 d2                	xor    edx,edx
c0007462:	31 ff                	xor    edi,edi
c0007464:	52                   	push   edx
c0007465:	89 fb                	mov    ebx,edi
c0007467:	50                   	push   eax
c0007468:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007470:	e8 67 e2 01 00       	call   c00256dc <__udivdi3>
c0007475:	83 c4 10             	add    esp,0x10
c0007478:	c1 e0 02             	shl    eax,0x2
c000747b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000747f:	05 07 02 00 00       	add    eax,0x207
c0007484:	89 f1                	mov    ecx,esi
c0007486:	c1 e8 09             	shr    eax,0x9
c0007489:	83 c1 ff             	add    ecx,0xffffffff
c000748c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007490:	83 d3 ff             	adc    ebx,0xffffffff
c0007493:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007497:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000749b:	31 d2                	xor    edx,edx
c000749d:	01 c8                	add    eax,ecx
c000749f:	11 da                	adc    edx,ebx
c00074a1:	89 c1                	mov    ecx,eax
c00074a3:	f7 de                	neg    esi
c00074a5:	89 d0                	mov    eax,edx
c00074a7:	83 d7 00             	adc    edi,0x0
c00074aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074ae:	f7 df                	neg    edi
c00074b0:	21 f1                	and    ecx,esi
c00074b2:	21 f8                	and    eax,edi
c00074b4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074c4:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074cb:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074cf:	0f ac d0 01          	shrd   eax,edx,0x1
c00074d3:	89 df                	mov    edi,ebx
c00074d5:	d1 ea                	shr    edx,1
c00074d7:	39 c1                	cmp    ecx,eax
c00074d9:	19 d7                	sbb    edi,edx
c00074db:	0f 83 3e 09 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c00074e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e5:	31 d2                	xor    edx,edx
c00074e7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074ef:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f6:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074fa:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074fe:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007502:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007506:	83 f8 0f             	cmp    eax,0xf
c0007509:	0f 86 10 09 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c000750f:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007517:	0f 87 02 09 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c000751d:	31 d2                	xor    edx,edx
c000751f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007523:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000752b:	83 c0 07             	add    eax,0x7
c000752e:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007536:	c1 e8 03             	shr    eax,0x3
c0007539:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007540:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007548:	c1 e0 09             	shl    eax,0x9
c000754b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000754f:	48                   	dec    eax
c0007550:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007554:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007558:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000755c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007560:	31 d2                	xor    edx,edx
c0007562:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007566:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000756d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007571:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007576:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000757a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000757e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007582:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007586:	31 ff                	xor    edi,edi
c0007588:	31 f6                	xor    esi,esi
c000758a:	31 db                	xor    ebx,ebx
c000758c:	85 ff                	test   edi,edi
c000758e:	74 05                	je     c0007595 <f_mkfs+0x43b>
c0007590:	4f                   	dec    edi
c0007591:	74 44                	je     c00075d7 <f_mkfs+0x47d>
c0007593:	eb 4f                	jmp    c00075e4 <f_mkfs+0x48a>
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	0f b7 c3             	movzx  eax,bx
c000759b:	50                   	push   eax
c000759c:	e8 05 0e 00 00       	call   c00083a6 <ff_wtoupper>
c00075a1:	83 c4 10             	add    esp,0x10
c00075a4:	89 c1                	mov    ecx,eax
c00075a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00075a9:	66 39 c3             	cmp    bx,ax
c00075ac:	75 3e                	jne    c00075ec <f_mkfs+0x492>
c00075ae:	be 01 00 00 00       	mov    esi,0x1
c00075b3:	89 df                	mov    edi,ebx
c00075b5:	66 01 f7             	add    di,si
c00075b8:	75 07                	jne    c00075c1 <f_mkfs+0x467>
c00075ba:	83 fe 7f             	cmp    esi,0x7f
c00075bd:	77 31                	ja     c00075f0 <f_mkfs+0x496>
c00075bf:	eb 16                	jmp    c00075d7 <f_mkfs+0x47d>
c00075c1:	83 ec 0c             	sub    esp,0xc
c00075c4:	0f b7 ff             	movzx  edi,di
c00075c7:	57                   	push   edi
c00075c8:	e8 d9 0d 00 00       	call   c00083a6 <ff_wtoupper>
c00075cd:	83 c4 10             	add    esp,0x10
c00075d0:	39 c7                	cmp    edi,eax
c00075d2:	75 e6                	jne    c00075ba <f_mkfs+0x460>
c00075d4:	46                   	inc    esi
c00075d5:	eb dc                	jmp    c00075b3 <f_mkfs+0x459>
c00075d7:	31 c0                	xor    eax,eax
c00075d9:	89 d9                	mov    ecx,ebx
c00075db:	4e                   	dec    esi
c00075dc:	0f 95 c0             	setne  al
c00075df:	43                   	inc    ebx
c00075e0:	89 c7                	mov    edi,eax
c00075e2:	eb 14                	jmp    c00075f8 <f_mkfs+0x49e>
c00075e4:	89 f1                	mov    ecx,esi
c00075e6:	01 f3                	add    ebx,esi
c00075e8:	31 ff                	xor    edi,edi
c00075ea:	eb 0c                	jmp    c00075f8 <f_mkfs+0x49e>
c00075ec:	89 d3                	mov    ebx,edx
c00075ee:	eb 08                	jmp    c00075f8 <f_mkfs+0x49e>
c00075f0:	bf 02 00 00 00       	mov    edi,0x2
c00075f5:	83 c9 ff             	or     ecx,0xffffffff
c00075f8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ff:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007603:	0f b6 c1             	movzx  eax,cl
c0007606:	e8 3a a9 ff ff       	call   c0001f45 <xsum32>
c000760b:	66 c1 e9 08          	shr    cx,0x8
c000760f:	89 c2                	mov    edx,eax
c0007611:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007614:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007618:	0f b7 c1             	movzx  eax,cx
c000761b:	e8 25 a9 ff ff       	call   c0001f45 <xsum32>
c0007620:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007625:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007629:	66 85 db             	test   bx,bx
c000762c:	74 1f                	je     c000764d <f_mkfs+0x4f3>
c000762e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007631:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007638:	83 c0 02             	add    eax,0x2
c000763b:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007641:	39 c2                	cmp    edx,eax
c0007643:	74 08                	je     c000764d <f_mkfs+0x4f3>
c0007645:	89 04 24             	mov    DWORD PTR [esp],eax
c0007648:	e9 3f ff ff ff       	jmp    c000758c <f_mkfs+0x432>
c000764d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007650:	83 ec 0c             	sub    esp,0xc
c0007653:	05 01 02 00 00       	add    eax,0x201
c0007658:	c1 e8 09             	shr    eax,0x9
c000765b:	50                   	push   eax
c000765c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007660:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007664:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007668:	55                   	push   ebp
c0007669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000766d:	e8 a3 a3 ff ff       	call   c0001a15 <disk_write>
c0007672:	83 c4 20             	add    esp,0x20
c0007675:	85 c0                	test   eax,eax
c0007677:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000767a:	0f 85 8b 0b 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007680:	89 d0                	mov    eax,edx
c0007682:	31 d2                	xor    edx,edx
c0007684:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007688:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000768c:	66 85 db             	test   bx,bx
c000768f:	74 04                	je     c0007695 <f_mkfs+0x53b>
c0007691:	31 c0                	xor    eax,eax
c0007693:	eb b0                	jmp    c0007645 <f_mkfs+0x4eb>
c0007695:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007699:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000769d:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076a1:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076a7:	31 d2                	xor    edx,edx
c00076a9:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076b4:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b8:	c1 eb 09             	shr    ebx,0x9
c00076bb:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076ce:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076d2:	8d 70 01             	lea    esi,[eax+0x1]
c00076d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076dd:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076e4:	31 d2                	xor    edx,edx
c00076e6:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ee:	89 c1                	mov    ecx,eax
c00076f0:	89 e8                	mov    eax,ebp
c00076f2:	e8 e7 a3 ff ff       	call   c0001ade <mem_set>
c00076f7:	31 c0                	xor    eax,eax
c00076f9:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076fc:	76 10                	jbe    c000770e <f_mkfs+0x5b4>
c00076fe:	83 fe 07             	cmp    esi,0x7
c0007701:	76 0b                	jbe    c000770e <f_mkfs+0x5b4>
c0007703:	40                   	inc    eax
c0007704:	83 ee 08             	sub    esi,0x8
c0007707:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000770c:	eb eb                	jmp    c00076f9 <f_mkfs+0x59f>
c000770e:	b2 01                	mov    dl,0x1
c0007710:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007714:	85 f6                	test   esi,esi
c0007716:	74 0c                	je     c0007724 <f_mkfs+0x5ca>
c0007718:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771b:	76 07                	jbe    c0007724 <f_mkfs+0x5ca>
c000771d:	08 11                	or     BYTE PTR [ecx],dl
c000771f:	4e                   	dec    esi
c0007720:	d1 e2                	shl    edx,1
c0007722:	eb f0                	jmp    c0007714 <f_mkfs+0x5ba>
c0007724:	89 df                	mov    edi,ebx
c0007726:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000772a:	76 04                	jbe    c0007730 <f_mkfs+0x5d6>
c000772c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007730:	83 ec 0c             	sub    esp,0xc
c0007733:	57                   	push   edi
c0007734:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007738:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000773c:	55                   	push   ebp
c000773d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007741:	e8 cf a2 ff ff       	call   c0001a15 <disk_write>
c0007746:	83 c4 20             	add    esp,0x20
c0007749:	85 c0                	test   eax,eax
c000774b:	0f 85 ba 0a 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007751:	31 d2                	xor    edx,edx
c0007753:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007757:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000775b:	29 fb                	sub    ebx,edi
c000775d:	0f 85 7a ff ff ff    	jne    c00076dd <f_mkfs+0x583>
c0007763:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007767:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000776f:	31 f6                	xor    esi,esi
c0007771:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007775:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007778:	31 d2                	xor    edx,edx
c000777a:	89 e8                	mov    eax,ebp
c000777c:	e8 5d a3 ff ff       	call   c0001ade <mem_set>
c0007781:	31 c9                	xor    ecx,ecx
c0007783:	85 db                	test   ebx,ebx
c0007785:	75 40                	jne    c00077c7 <f_mkfs+0x66d>
c0007787:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000778c:	89 e8                	mov    eax,ebp
c000778e:	bb 02 00 00 00       	mov    ebx,0x2
c0007793:	e8 28 a3 ff ff       	call   c0001ac0 <st_dword>
c0007798:	8d 45 04             	lea    eax,[ebp+0x4]
c000779b:	83 ca ff             	or     edx,0xffffffff
c000779e:	e8 1d a3 ff ff       	call   c0001ac0 <st_dword>
c00077a3:	b9 08 00 00 00       	mov    ecx,0x8
c00077a8:	eb 1d                	jmp    c00077c7 <f_mkfs+0x66d>
c00077aa:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ad:	76 3b                	jbe    c00077ea <f_mkfs+0x690>
c00077af:	43                   	inc    ebx
c00077b0:	83 fe 01             	cmp    esi,0x1
c00077b3:	89 da                	mov    edx,ebx
c00077b5:	77 03                	ja     c00077ba <f_mkfs+0x660>
c00077b7:	83 ca ff             	or     edx,0xffffffff
c00077ba:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077be:	4e                   	dec    esi
c00077bf:	e8 fc a2 ff ff       	call   c0001ac0 <st_dword>
c00077c4:	83 c1 04             	add    ecx,0x4
c00077c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077cb:	85 f6                	test   esi,esi
c00077cd:	75 db                	jne    c00077aa <f_mkfs+0x650>
c00077cf:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077d4:	77 14                	ja     c00077ea <f_mkfs+0x690>
c00077d6:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077da:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077e1:	85 f6                	test   esi,esi
c00077e3:	74 05                	je     c00077ea <f_mkfs+0x690>
c00077e5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e8:	77 dd                	ja     c00077c7 <f_mkfs+0x66d>
c00077ea:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f2:	39 cf                	cmp    edi,ecx
c00077f4:	76 02                	jbe    c00077f8 <f_mkfs+0x69e>
c00077f6:	89 cf                	mov    edi,ecx
c00077f8:	83 ec 0c             	sub    esp,0xc
c00077fb:	57                   	push   edi
c00077fc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007800:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007804:	55                   	push   ebp
c0007805:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007809:	e8 07 a2 ff ff       	call   c0001a15 <disk_write>
c000780e:	83 c4 20             	add    esp,0x20
c0007811:	85 c0                	test   eax,eax
c0007813:	0f 85 f2 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007819:	31 d2                	xor    edx,edx
c000781b:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000781f:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007823:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007827:	0f 85 48 ff ff ff    	jne    c0007775 <f_mkfs+0x61b>
c000782d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007830:	31 d2                	xor    edx,edx
c0007832:	89 e8                	mov    eax,ebp
c0007834:	31 ff                	xor    edi,edi
c0007836:	e8 a3 a2 ff ff       	call   c0001ade <mem_set>
c000783b:	8d 45 34             	lea    eax,[ebp+0x34]
c000783e:	ba 02 00 00 00       	mov    edx,0x2
c0007843:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007847:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000784b:	e8 70 a2 ff ff       	call   c0001ac0 <st_dword>
c0007850:	8d 45 38             	lea    eax,[ebp+0x38]
c0007853:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007857:	e8 64 a2 ff ff       	call   c0001ac0 <st_dword>
c000785c:	8d 45 44             	lea    eax,[ebp+0x44]
c000785f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007863:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007867:	e8 54 a2 ff ff       	call   c0001ac0 <st_dword>
c000786c:	8d 45 54             	lea    eax,[ebp+0x54]
c000786f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007873:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007877:	83 c2 02             	add    edx,0x2
c000787a:	e8 41 a2 ff ff       	call   c0001ac0 <st_dword>
c000787f:	8d 45 58             	lea    eax,[ebp+0x58]
c0007882:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007886:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000788a:	e8 31 a2 ff ff       	call   c0001ac0 <st_dword>
c000788f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007893:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007898:	89 c6                	mov    esi,eax
c000789a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a5:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078a9:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078b0:	39 cb                	cmp    ebx,ecx
c00078b2:	76 02                	jbe    c00078b6 <f_mkfs+0x75c>
c00078b4:	89 cb                	mov    ebx,ecx
c00078b6:	83 ec 0c             	sub    esp,0xc
c00078b9:	53                   	push   ebx
c00078ba:	57                   	push   edi
c00078bb:	56                   	push   esi
c00078bc:	55                   	push   ebp
c00078bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078c1:	e8 4f a1 ff ff       	call   c0001a15 <disk_write>
c00078c6:	83 c4 20             	add    esp,0x20
c00078c9:	85 c0                	test   eax,eax
c00078cb:	0f 85 3a 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00078d1:	31 d2                	xor    edx,edx
c00078d3:	b9 00 02 00 00       	mov    ecx,0x200
c00078d8:	89 e8                	mov    eax,ebp
c00078da:	e8 ff a1 ff ff       	call   c0001ade <mem_set>
c00078df:	31 d2                	xor    edx,edx
c00078e1:	01 de                	add    esi,ebx
c00078e3:	11 d7                	adc    edi,edx
c00078e5:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e8:	75 bf                	jne    c00078a9 <f_mkfs+0x74f>
c00078ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078f2:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078fa:	b9 00 02 00 00       	mov    ecx,0x200
c00078ff:	31 d2                	xor    edx,edx
c0007901:	89 e8                	mov    eax,ebp
c0007903:	e8 d6 a1 ff ff       	call   c0001ade <mem_set>
c0007908:	b9 0b 00 00 00       	mov    ecx,0xb
c000790d:	ba 40 81 02 c0       	mov    edx,0xc0028140
c0007912:	89 e8                	mov    eax,ebp
c0007914:	e8 b0 a1 ff ff       	call   c0001ac9 <mem_cpy>
c0007919:	8d 45 40             	lea    eax,[ebp+0x40]
c000791c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007920:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007924:	e8 9a a1 ff ff       	call   c0001ac3 <st_qword>
c0007929:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000792d:	8d 45 48             	lea    eax,[ebp+0x48]
c0007930:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007934:	e8 8a a1 ff ff       	call   c0001ac3 <st_qword>
c0007939:	8d 45 50             	lea    eax,[ebp+0x50]
c000793c:	ba 20 00 00 00       	mov    edx,0x20
c0007941:	e8 7a a1 ff ff       	call   c0001ac0 <st_dword>
c0007946:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000794a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000794e:	e8 6d a1 ff ff       	call   c0001ac0 <st_dword>
c0007953:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007957:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000795b:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c000795f:	e8 5c a1 ff ff       	call   c0001ac0 <st_dword>
c0007964:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007967:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000796b:	e8 50 a1 ff ff       	call   c0001ac0 <st_dword>
c0007970:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007974:	8d 50 02             	lea    edx,[eax+0x2]
c0007977:	8d 45 60             	lea    eax,[ebp+0x60]
c000797a:	e8 41 a1 ff ff       	call   c0001ac0 <st_dword>
c000797f:	8d 45 64             	lea    eax,[ebp+0x64]
c0007982:	ba 00 00 21 50       	mov    edx,0x50210000
c0007987:	e8 34 a1 ff ff       	call   c0001ac0 <st_dword>
c000798c:	8d 45 68             	lea    eax,[ebp+0x68]
c000798f:	ba 00 01 00 00       	mov    edx,0x100
c0007994:	e8 23 a1 ff ff       	call   c0001abc <st_word>
c0007999:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000799d:	b8 0a 00 00 00       	mov    eax,0xa
c00079a2:	48                   	dec    eax
c00079a3:	74 05                	je     c00079aa <f_mkfs+0x850>
c00079a5:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a8:	eb f8                	jmp    c00079a2 <f_mkfs+0x848>
c00079aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079ae:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079b6:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079ba:	74 05                	je     c00079c1 <f_mkfs+0x867>
c00079bc:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079bf:	eb f5                	jmp    c00079b6 <f_mkfs+0x85c>
c00079c1:	8d 45 78             	lea    eax,[ebp+0x78]
c00079c4:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079c9:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079cf:	31 db                	xor    ebx,ebx
c00079d1:	e8 e6 a0 ff ff       	call   c0001abc <st_word>
c00079d6:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079dc:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00079e4:	e8 d3 a0 ff ff       	call   c0001abc <st_word>
c00079e9:	31 c9                	xor    ecx,ecx
c00079eb:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ee:	83 f8 01             	cmp    eax,0x1
c00079f1:	76 13                	jbe    c0007a06 <f_mkfs+0x8ac>
c00079f3:	83 f9 70             	cmp    ecx,0x70
c00079f6:	74 0e                	je     c0007a06 <f_mkfs+0x8ac>
c00079f8:	89 da                	mov    edx,ebx
c00079fa:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ff:	e8 41 a5 ff ff       	call   c0001f45 <xsum32>
c0007a04:	89 c3                	mov    ebx,eax
c0007a06:	41                   	inc    ecx
c0007a07:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0d:	75 dc                	jne    c00079eb <f_mkfs+0x891>
c0007a0f:	89 f0                	mov    eax,esi
c0007a11:	89 fa                	mov    edx,edi
c0007a13:	83 c0 01             	add    eax,0x1
c0007a16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1a:	83 d2 00             	adc    edx,0x0
c0007a1d:	83 ec 0c             	sub    esp,0xc
c0007a20:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a24:	6a 01                	push   0x1
c0007a26:	57                   	push   edi
c0007a27:	56                   	push   esi
c0007a28:	55                   	push   ebp
c0007a29:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2d:	e8 e3 9f ff ff       	call   c0001a15 <disk_write>
c0007a32:	83 c4 20             	add    esp,0x20
c0007a35:	85 c0                	test   eax,eax
c0007a37:	0f 85 ce 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007a3d:	31 d2                	xor    edx,edx
c0007a3f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a44:	89 e8                	mov    eax,ebp
c0007a46:	e8 93 a0 ff ff       	call   c0001ade <mem_set>
c0007a4b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a53:	e8 64 a0 ff ff       	call   c0001abc <st_word>
c0007a58:	89 f0                	mov    eax,esi
c0007a5a:	89 fa                	mov    edx,edi
c0007a5c:	83 c0 09             	add    eax,0x9
c0007a5f:	83 d2 00             	adc    edx,0x0
c0007a62:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a69:	31 c9                	xor    ecx,ecx
c0007a6b:	41                   	inc    ecx
c0007a6c:	89 da                	mov    edx,ebx
c0007a6e:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a73:	e8 cd a4 ff ff       	call   c0001f45 <xsum32>
c0007a78:	89 c3                	mov    ebx,eax
c0007a7a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a80:	75 e9                	jne    c0007a6b <f_mkfs+0x911>
c0007a82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a86:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a8a:	83 c0 01             	add    eax,0x1
c0007a8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a91:	83 d2 00             	adc    edx,0x0
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a9b:	6a 01                	push   0x1
c0007a9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa5:	55                   	push   ebp
c0007aa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aaa:	e8 66 9f ff ff       	call   c0001a15 <disk_write>
c0007aaf:	83 c4 20             	add    esp,0x20
c0007ab2:	85 c0                	test   eax,eax
c0007ab4:	0f 85 51 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007abe:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ac2:	75 09                	jne    c0007acd <f_mkfs+0x973>
c0007ac4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ac7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007acb:	74 12                	je     c0007adf <f_mkfs+0x985>
c0007acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007add:	eb 8a                	jmp    c0007a69 <f_mkfs+0x90f>
c0007adf:	31 d2                	xor    edx,edx
c0007ae1:	b9 00 02 00 00       	mov    ecx,0x200
c0007ae6:	89 e8                	mov    eax,ebp
c0007ae8:	e8 f1 9f ff ff       	call   c0001ade <mem_set>
c0007aed:	83 c6 0b             	add    esi,0xb
c0007af0:	83 d7 00             	adc    edi,0x0
c0007af3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007af7:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007afb:	31 c9                	xor    ecx,ecx
c0007afd:	41                   	inc    ecx
c0007afe:	89 da                	mov    edx,ebx
c0007b00:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b05:	e8 3b a4 ff ff       	call   c0001f45 <xsum32>
c0007b0a:	89 c3                	mov    ebx,eax
c0007b0c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b12:	75 e9                	jne    c0007afd <f_mkfs+0x9a3>
c0007b14:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b1b:	83 c6 01             	add    esi,0x1
c0007b1e:	83 d7 00             	adc    edi,0x0
c0007b21:	83 ec 0c             	sub    esp,0xc
c0007b24:	6a 01                	push   0x1
c0007b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2e:	55                   	push   ebp
c0007b2f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b33:	e8 dd 9e ff ff       	call   c0001a15 <disk_write>
c0007b38:	83 c4 20             	add    esp,0x20
c0007b3b:	85 c0                	test   eax,eax
c0007b3d:	0f 85 c8 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007b43:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b47:	75 06                	jne    c0007b4f <f_mkfs+0x9f5>
c0007b49:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b4d:	74 09                	je     c0007b58 <f_mkfs+0x9fe>
c0007b4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b52:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b56:	eb a3                	jmp    c0007afb <f_mkfs+0x9a1>
c0007b58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	01 e8                	add    eax,ebp
c0007b60:	e8 5b 9f ff ff       	call   c0001ac0 <st_dword>
c0007b65:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b6a:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b72:	75 e4                	jne    c0007b58 <f_mkfs+0x9fe>
c0007b74:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b7b:	83 c6 02             	add    esi,0x2
c0007b7e:	83 d7 00             	adc    edi,0x0
c0007b81:	83 ec 0c             	sub    esp,0xc
c0007b84:	6a 01                	push   0x1
c0007b86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8e:	55                   	push   ebp
c0007b8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b93:	e8 7d 9e ff ff       	call   c0001a15 <disk_write>
c0007b98:	83 c4 20             	add    esp,0x20
c0007b9b:	85 c0                	test   eax,eax
c0007b9d:	0f 85 68 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007ba3:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba8:	74 0d                	je     c0007bb7 <f_mkfs+0xa5d>
c0007baa:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bb2:	e9 43 fd ff ff       	jmp    c00078fa <f_mkfs+0x7a0>
c0007bb7:	b1 07                	mov    cl,0x7
c0007bb9:	e9 e3 05 00 00       	jmp    c00081a1 <f_mkfs+0x1047>
c0007bbe:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bc3:	0f 85 4f 02 00 00    	jne    c0007e18 <f_mkfs+0xcbe>
c0007bc9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bce:	0f 86 22 02 00 00    	jbe    c0007df6 <f_mkfs+0xc9c>
c0007bd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bd9:	0f 85 81 06 00 00    	jne    c0008260 <f_mkfs+0x1106>
c0007bdf:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be6:	83 f8 40             	cmp    eax,0x40
c0007be9:	0f 87 51 06 00 00    	ja     c0008240 <f_mkfs+0x10e6>
c0007bef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bf3:	85 ff                	test   edi,edi
c0007bf5:	75 1c                	jne    c0007c13 <f_mkfs+0xab9>
c0007bf7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bfa:	ba 40 80 02 c0       	mov    edx,0xc0028040
c0007bff:	c1 e9 0c             	shr    ecx,0xc
c0007c02:	bf 01 00 00 00       	mov    edi,0x1
c0007c07:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c0a:	66 85 c0             	test   ax,ax
c0007c0d:	0f 85 95 01 00 00    	jne    c0007da8 <f_mkfs+0xc4e>
c0007c13:	31 d2                	xor    edx,edx
c0007c15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c18:	f7 f7                	div    edi
c0007c1a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c1f:	0f 86 95 01 00 00    	jbe    c0007dba <f_mkfs+0xc60>
c0007c25:	83 c0 02             	add    eax,0x2
c0007c28:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c2d:	01 c0                	add    eax,eax
c0007c2f:	05 ff 01 00 00       	add    eax,0x1ff
c0007c34:	be 01 00 00 00       	mov    esi,0x1
c0007c39:	c1 e8 09             	shr    eax,0x9
c0007c3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c44:	c1 e0 05             	shl    eax,0x5
c0007c47:	c1 e8 09             	shr    eax,0x9
c0007c4a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c4e:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c53:	31 d2                	xor    edx,edx
c0007c55:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c59:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c5d:	89 f0                	mov    eax,esi
c0007c5f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c63:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c73:	31 d2                	xor    edx,edx
c0007c75:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c7a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c7e:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c82:	31 db                	xor    ebx,ebx
c0007c84:	01 c8                	add    eax,ecx
c0007c86:	11 da                	adc    edx,ebx
c0007c88:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c8c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c90:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c94:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c98:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c9c:	f7 da                	neg    edx
c0007c9e:	21 d1                	and    ecx,edx
c0007ca0:	29 d9                	sub    ecx,ebx
c0007ca2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca7:	0f 85 20 01 00 00    	jne    c0007dcd <f_mkfs+0xc73>
c0007cad:	31 db                	xor    ebx,ebx
c0007caf:	01 ce                	add    esi,ecx
c0007cb1:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cb5:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cb9:	31 d2                	xor    edx,edx
c0007cbb:	89 f8                	mov    eax,edi
c0007cbd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cc1:	c1 e0 04             	shl    eax,0x4
c0007cc4:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ccc:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cd0:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cd4:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cd7:	19 d3                	sbb    ebx,edx
c0007cd9:	0f 82 40 01 00 00    	jb     c0007e1f <f_mkfs+0xcc5>
c0007cdf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ce6:	89 c8                	mov    eax,ecx
c0007ce8:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ced:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cf1:	29 f0                	sub    eax,esi
c0007cf3:	29 d0                	sub    eax,edx
c0007cf5:	31 d2                	xor    edx,edx
c0007cf7:	f7 f7                	div    edi
c0007cf9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cfe:	89 c3                	mov    ebx,eax
c0007d00:	0f 85 b8 fe ff ff    	jne    c0007bbe <f_mkfs+0xa64>
c0007d06:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d0b:	0f 87 1d 01 00 00    	ja     c0007e2e <f_mkfs+0xcd4>
c0007d11:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d16:	0f 85 03 01 00 00    	jne    c0007e1f <f_mkfs+0xcc5>
c0007d1c:	83 ff 01             	cmp    edi,0x1
c0007d1f:	0f 86 fa 00 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c0007d25:	d1 ef                	shr    edi,1
c0007d27:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d2b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d2f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d32:	85 db                	test   ebx,ebx
c0007d34:	75 2d                	jne    c0007d63 <f_mkfs+0xc09>
c0007d36:	89 cb                	mov    ebx,ecx
c0007d38:	ba 50 80 02 c0       	mov    edx,0xc0028050
c0007d3d:	c1 eb 11             	shr    ebx,0x11
c0007d40:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d48:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d4b:	66 85 c0             	test   ax,ax
c0007d4e:	74 11                	je     c0007d61 <f_mkfs+0xc07>
c0007d50:	83 c2 02             	add    edx,0x2
c0007d53:	39 d8                	cmp    eax,ebx
c0007d55:	77 0a                	ja     c0007d61 <f_mkfs+0xc07>
c0007d57:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d5b:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d5f:	eb e7                	jmp    c0007d48 <f_mkfs+0xbee>
c0007d61:	31 db                	xor    ebx,ebx
c0007d63:	31 d2                	xor    edx,edx
c0007d65:	89 c8                	mov    eax,ecx
c0007d67:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d6b:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d72:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d77:	c1 ea 09             	shr    edx,0x9
c0007d7a:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d7f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d83:	0f 87 96 00 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c0007d89:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d8d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d95:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d99:	be 20 00 00 00       	mov    esi,0x20
c0007d9e:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007da3:	e9 a6 fe ff ff       	jmp    c0007c4e <f_mkfs+0xaf4>
c0007da8:	83 c2 02             	add    edx,0x2
c0007dab:	39 c8                	cmp    eax,ecx
c0007dad:	0f 87 60 fe ff ff    	ja     c0007c13 <f_mkfs+0xab9>
c0007db3:	01 ff                	add    edi,edi
c0007db5:	e9 4d fe ff ff       	jmp    c0007c07 <f_mkfs+0xaad>
c0007dba:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dbd:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dc2:	40                   	inc    eax
c0007dc3:	d1 e8                	shr    eax,1
c0007dc5:	83 c0 03             	add    eax,0x3
c0007dc8:	e9 62 fe ff ff       	jmp    c0007c2f <f_mkfs+0xad5>
c0007dcd:	31 d2                	xor    edx,edx
c0007dcf:	89 c8                	mov    eax,ecx
c0007dd1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dd5:	85 d2                	test   edx,edx
c0007dd7:	74 0c                	je     c0007de5 <f_mkfs+0xc8b>
c0007dd9:	49                   	dec    ecx
c0007dda:	46                   	inc    esi
c0007ddb:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007de0:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007de5:	89 c8                	mov    eax,ecx
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ded:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007df1:	e9 c3 fe ff ff       	jmp    c0007cb9 <f_mkfs+0xb5f>
c0007df6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfb:	77 31                	ja     c0007e2e <f_mkfs+0xcd4>
c0007dfd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e02:	75 1b                	jne    c0007e1f <f_mkfs+0xcc5>
c0007e04:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e0b:	3d 80 00 00 00       	cmp    eax,0x80
c0007e10:	0f 86 d9 fd ff ff    	jbe    c0007bef <f_mkfs+0xa95>
c0007e16:	eb 07                	jmp    c0007e1f <f_mkfs+0xcc5>
c0007e18:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1d:	76 0a                	jbe    c0007e29 <f_mkfs+0xccf>
c0007e1f:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e24:	e9 ff 03 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c0007e29:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e2e:	31 d2                	xor    edx,edx
c0007e30:	b9 00 02 00 00       	mov    ecx,0x200
c0007e35:	89 e8                	mov    eax,ebp
c0007e37:	e8 a2 9c ff ff       	call   c0001ade <mem_set>
c0007e3c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e41:	ba 62 81 02 c0       	mov    edx,0xc0028162
c0007e46:	89 e8                	mov    eax,ebp
c0007e48:	e8 7c 9c ff ff       	call   c0001ac9 <mem_cpy>
c0007e4d:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e50:	ba 00 02 00 00       	mov    edx,0x200
c0007e55:	e8 62 9c ff ff       	call   c0001abc <st_word>
c0007e5a:	89 f8                	mov    eax,edi
c0007e5c:	0f b7 d6             	movzx  edx,si
c0007e5f:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e62:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e65:	e8 52 9c ff ff       	call   c0001abc <st_word>
c0007e6a:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e6e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e73:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e76:	75 08                	jne    c0007e80 <f_mkfs+0xd26>
c0007e78:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e80:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e87:	e8 30 9c ff ff       	call   c0001abc <st_word>
c0007e8c:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e95:	39 d0                	cmp    eax,edx
c0007e97:	b8 00 00 00 00       	mov    eax,0x0
c0007e9c:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ea0:	72 0a                	jb     c0007eac <f_mkfs+0xd52>
c0007ea2:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ea5:	e8 12 9c ff ff       	call   c0001abc <st_word>
c0007eaa:	eb 08                	jmp    c0007eb4 <f_mkfs+0xd5a>
c0007eac:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eaf:	e8 0c 9c ff ff       	call   c0001ac0 <st_dword>
c0007eb4:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eb7:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ebc:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ec0:	e8 f7 9b ff ff       	call   c0001abc <st_word>
c0007ec5:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec8:	ba ff 00 00 00       	mov    edx,0xff
c0007ecd:	e8 ea 9b ff ff       	call   c0001abc <st_word>
c0007ed2:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ed5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ed9:	e8 e2 9b ff ff       	call   c0001ac0 <st_dword>
c0007ede:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee3:	75 57                	jne    c0007f3c <f_mkfs+0xde2>
c0007ee5:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eed:	e8 ce 9b ff ff       	call   c0001ac0 <st_dword>
c0007ef2:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ef5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ef9:	e8 c2 9b ff ff       	call   c0001ac0 <st_dword>
c0007efe:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f01:	ba 02 00 00 00       	mov    edx,0x2
c0007f06:	e8 b5 9b ff ff       	call   c0001ac0 <st_dword>
c0007f0b:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f0e:	ba 01 00 00 00       	mov    edx,0x1
c0007f13:	e8 a4 9b ff ff       	call   c0001abc <st_word>
c0007f18:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f1b:	ba 06 00 00 00       	mov    edx,0x6
c0007f20:	e8 97 9b ff ff       	call   c0001abc <st_word>
c0007f25:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f29:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f2d:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f30:	b9 13 00 00 00       	mov    ecx,0x13
c0007f35:	ba 6e 81 02 c0       	mov    edx,0xc002816e
c0007f3a:	eb 2f                	jmp    c0007f6b <f_mkfs+0xe11>
c0007f3c:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f3f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f44:	e8 77 9b ff ff       	call   c0001ac0 <st_dword>
c0007f49:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f4e:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f51:	e8 66 9b ff ff       	call   c0001abc <st_word>
c0007f56:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f5a:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f5e:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f61:	b9 13 00 00 00       	mov    ecx,0x13
c0007f66:	ba 82 81 02 c0       	mov    edx,0xc0028182
c0007f6b:	e8 59 9b ff ff       	call   c0001ac9 <mem_cpy>
c0007f70:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f76:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f7b:	89 f0                	mov    eax,esi
c0007f7d:	e8 3a 9b ff ff       	call   c0001abc <st_word>
c0007f82:	83 ec 0c             	sub    esp,0xc
c0007f85:	6a 01                	push   0x1
c0007f87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8f:	55                   	push   ebp
c0007f90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f94:	e8 7c 9a ff ff       	call   c0001a15 <disk_write>
c0007f99:	83 c4 20             	add    esp,0x20
c0007f9c:	85 c0                	test   eax,eax
c0007f9e:	0f 85 67 02 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007fa4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fa9:	0f 85 b7 00 00 00    	jne    c0008066 <f_mkfs+0xf0c>
c0007faf:	83 ec 0c             	sub    esp,0xc
c0007fb2:	6a 01                	push   0x1
c0007fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fbc:	83 c0 06             	add    eax,0x6
c0007fbf:	83 d2 00             	adc    edx,0x0
c0007fc2:	52                   	push   edx
c0007fc3:	50                   	push   eax
c0007fc4:	55                   	push   ebp
c0007fc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fc9:	e8 47 9a ff ff       	call   c0001a15 <disk_write>
c0007fce:	83 c4 20             	add    esp,0x20
c0007fd1:	b9 00 02 00 00       	mov    ecx,0x200
c0007fd6:	31 d2                	xor    edx,edx
c0007fd8:	89 e8                	mov    eax,ebp
c0007fda:	e8 ff 9a ff ff       	call   c0001ade <mem_set>
c0007fdf:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fe4:	89 e8                	mov    eax,ebp
c0007fe6:	e8 d5 9a ff ff       	call   c0001ac0 <st_dword>
c0007feb:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ff1:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ff6:	e8 c5 9a ff ff       	call   c0001ac0 <st_dword>
c0007ffb:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ffe:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008004:	e8 b7 9a ff ff       	call   c0001ac0 <st_dword>
c0008009:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000800f:	ba 02 00 00 00       	mov    edx,0x2
c0008014:	e8 a7 9a ff ff       	call   c0001ac0 <st_dword>
c0008019:	ba 55 aa 00 00       	mov    edx,0xaa55
c000801e:	89 f0                	mov    eax,esi
c0008020:	e8 97 9a ff ff       	call   c0001abc <st_word>
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	6a 01                	push   0x1
c000802a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000802e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008032:	83 c0 07             	add    eax,0x7
c0008035:	83 d2 00             	adc    edx,0x0
c0008038:	52                   	push   edx
c0008039:	50                   	push   eax
c000803a:	55                   	push   ebp
c000803b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000803f:	e8 d1 99 ff ff       	call   c0001a15 <disk_write>
c0008044:	83 c4 14             	add    esp,0x14
c0008047:	6a 01                	push   0x1
c0008049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000804d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008051:	83 c0 01             	add    eax,0x1
c0008054:	83 d2 00             	adc    edx,0x0
c0008057:	52                   	push   edx
c0008058:	50                   	push   eax
c0008059:	55                   	push   ebp
c000805a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000805e:	e8 b2 99 ff ff       	call   c0001a15 <disk_write>
c0008063:	83 c4 20             	add    esp,0x20
c0008066:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000806d:	31 d2                	xor    edx,edx
c000806f:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008075:	31 db                	xor    ebx,ebx
c0008077:	89 e8                	mov    eax,ebp
c0008079:	e8 60 9a ff ff       	call   c0001ade <mem_set>
c000807e:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008083:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000808a:	0f 94 c3             	sete   bl
c000808d:	4b                   	dec    ebx
c000808e:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008094:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000809a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000809f:	75 21                	jne    c00080c2 <f_mkfs+0xf68>
c00080a1:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080a6:	89 e8                	mov    eax,ebp
c00080a8:	e8 13 9a ff ff       	call   c0001ac0 <st_dword>
c00080ad:	8d 45 04             	lea    eax,[ebp+0x4]
c00080b0:	83 ca ff             	or     edx,0xffffffff
c00080b3:	e8 08 9a ff ff       	call   c0001ac0 <st_dword>
c00080b8:	8d 45 08             	lea    eax,[ebp+0x8]
c00080bb:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080c0:	eb 04                	jmp    c00080c6 <f_mkfs+0xf6c>
c00080c2:	89 da                	mov    edx,ebx
c00080c4:	89 e8                	mov    eax,ebp
c00080c6:	e8 f5 99 ff ff       	call   c0001ac0 <st_dword>
c00080cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080d3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080db:	39 ce                	cmp    esi,ecx
c00080dd:	76 02                	jbe    c00080e1 <f_mkfs+0xf87>
c00080df:	89 ce                	mov    esi,ecx
c00080e1:	83 ec 0c             	sub    esp,0xc
c00080e4:	56                   	push   esi
c00080e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ed:	55                   	push   ebp
c00080ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f2:	e8 1e 99 ff ff       	call   c0001a15 <disk_write>
c00080f7:	83 c4 20             	add    esp,0x20
c00080fa:	85 c0                	test   eax,eax
c00080fc:	0f 85 09 01 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0008102:	31 d2                	xor    edx,edx
c0008104:	b9 00 02 00 00       	mov    ecx,0x200
c0008109:	89 e8                	mov    eax,ebp
c000810b:	e8 ce 99 ff ff       	call   c0001ade <mem_set>
c0008110:	31 d2                	xor    edx,edx
c0008112:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008116:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000811a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000811e:	75 b3                	jne    c00080d3 <f_mkfs+0xf79>
c0008120:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008123:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000812a:	40                   	inc    eax
c000812b:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000812f:	0f 87 65 ff ff ff    	ja     c000809a <f_mkfs+0xf40>
c0008135:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813a:	74 04                	je     c0008140 <f_mkfs+0xfe6>
c000813c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008140:	89 fb                	mov    ebx,edi
c0008142:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008146:	76 04                	jbe    c000814c <f_mkfs+0xff2>
c0008148:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000814c:	83 ec 0c             	sub    esp,0xc
c000814f:	53                   	push   ebx
c0008150:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008154:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008158:	55                   	push   ebp
c0008159:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000815d:	e8 b3 98 ff ff       	call   c0001a15 <disk_write>
c0008162:	83 c4 20             	add    esp,0x20
c0008165:	85 c0                	test   eax,eax
c0008167:	0f 85 9e 00 00 00    	jne    c000820b <f_mkfs+0x10b1>
c000816d:	31 d2                	xor    edx,edx
c000816f:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008173:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008177:	29 df                	sub    edi,ebx
c0008179:	75 c5                	jne    c0008140 <f_mkfs+0xfe6>
c000817b:	b1 0c                	mov    cl,0xc
c000817d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008182:	74 1d                	je     c00081a1 <f_mkfs+0x1047>
c0008184:	b8 ff ff 00 00       	mov    eax,0xffff
c0008189:	b1 06                	mov    cl,0x6
c000818b:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000818f:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008193:	72 0c                	jb     c00081a1 <f_mkfs+0x1047>
c0008195:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000819a:	0f 94 c1             	sete   cl
c000819d:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081a1:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081a6:	75 4c                	jne    c00081f4 <f_mkfs+0x109a>
c00081a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ac:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081b0:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081b7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081be:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081c9:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081d4:	0f b6 c9             	movzx  ecx,cl
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	55                   	push   ebp
c00081db:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e6:	e8 2f c2 ff ff       	call   c000441a <create_partition>
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	89 c3                	mov    ebx,eax
c00081f0:	85 c0                	test   eax,eax
c00081f2:	75 34                	jne    c0008228 <f_mkfs+0x10ce>
c00081f4:	31 db                	xor    ebx,ebx
c00081f6:	50                   	push   eax
c00081f7:	6a 00                	push   0x0
c00081f9:	6a 00                	push   0x0
c00081fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ff:	e8 27 98 ff ff       	call   c0001a2b <disk_ioctl>
c0008204:	83 c4 10             	add    esp,0x10
c0008207:	85 c0                	test   eax,eax
c0008209:	74 1d                	je     c0008228 <f_mkfs+0x10ce>
c000820b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008213:	75 0c                	jne    c0008221 <f_mkfs+0x10c7>
c0008215:	83 ec 0c             	sub    esp,0xc
c0008218:	55                   	push   ebp
c0008219:	e8 75 00 00 00       	call   c0008293 <ff_memfree>
c000821e:	83 c4 10             	add    esp,0x10
c0008221:	bb 01 00 00 00       	mov    ebx,0x1
c0008226:	eb 48                	jmp    c0008270 <f_mkfs+0x1116>
c0008228:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008230:	75 3e                	jne    c0008270 <f_mkfs+0x1116>
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	55                   	push   ebp
c0008236:	e8 58 00 00 00       	call   c0008293 <ff_memfree>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	eb 30                	jmp    c0008270 <f_mkfs+0x1116>
c0008240:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008245:	0f 85 eb fa ff ff    	jne    c0007d36 <f_mkfs+0xbdc>
c000824b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000824f:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008255:	0f 86 b8 f9 ff ff    	jbe    c0007c13 <f_mkfs+0xab9>
c000825b:	e9 bf fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008260:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008265:	0f 85 c0 fa ff ff    	jne    c0007d2b <f_mkfs+0xbd1>
c000826b:	e9 af fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008270:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008276:	89 d8                	mov    eax,ebx
c0008278:	5b                   	pop    ebx
c0008279:	5e                   	pop    esi
c000827a:	5f                   	pop    edi
c000827b:	5d                   	pop    ebp
c000827c:	c3                   	ret    

c000827d <ff_memalloc>:
c000827d:	83 ec 0c             	sub    esp,0xc
c0008280:	83 ec 0c             	sub    esp,0xc
c0008283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008287:	e8 98 73 00 00       	call   c000f624 <malloc>
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	83 c4 0c             	add    esp,0xc
c0008292:	c3                   	ret    

c0008293 <ff_memfree>:
c0008293:	83 ec 0c             	sub    esp,0xc
c0008296:	83 ec 0c             	sub    esp,0xc
c0008299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829d:	e8 92 73 00 00       	call   c000f634 <free>
c00082a2:	83 c4 10             	add    esp,0x10
c00082a5:	90                   	nop
c00082a6:	83 c4 0c             	add    esp,0xc
c00082a9:	c3                   	ret    

c00082aa <ff_uni2oem>:
c00082aa:	83 ec 14             	sub    esp,0x14
c00082ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082b1:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082b5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082bc:	c7 44 24 0c a0 84 02 c0 	mov    DWORD PTR [esp+0xc],0xc00284a0
c00082c4:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082c9:	77 0b                	ja     c00082d6 <ff_uni2oem+0x2c>
c00082cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082cf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082d4:	eb 5b                	jmp    c0008331 <ff_uni2oem+0x87>
c00082d6:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082de:	77 51                	ja     c0008331 <ff_uni2oem+0x87>
c00082e0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082e6:	75 49                	jne    c0008331 <ff_uni2oem+0x87>
c00082e8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082ef:	eb 0b                	jmp    c00082fc <ff_uni2oem+0x52>
c00082f1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f6:	40                   	inc    eax
c00082f7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fc:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008302:	77 1b                	ja     c000831f <ff_uni2oem+0x75>
c0008304:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008309:	01 c0                	add    eax,eax
c000830b:	89 c2                	mov    edx,eax
c000830d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008311:	01 d0                	add    eax,edx
c0008313:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008316:	0f b7 c0             	movzx  eax,ax
c0008319:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000831d:	75 d2                	jne    c00082f1 <ff_uni2oem+0x47>
c000831f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008324:	83 e8 80             	sub    eax,0xffffff80
c0008327:	25 ff 00 00 00       	and    eax,0xff
c000832c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008331:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008336:	83 c4 14             	add    esp,0x14
c0008339:	c3                   	ret    

c000833a <ff_oem2uni>:
c000833a:	83 ec 18             	sub    esp,0x18
c000833d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008345:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000834a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000834e:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008355:	c7 44 24 10 a0 84 02 c0 	mov    DWORD PTR [esp+0x10],0xc00284a0
c000835d:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008363:	77 0b                	ja     c0008370 <ff_oem2uni+0x36>
c0008365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008369:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836e:	eb 2d                	jmp    c000839d <ff_oem2uni+0x63>
c0008370:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008376:	75 25                	jne    c000839d <ff_oem2uni+0x63>
c0008378:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000837f:	77 1c                	ja     c000839d <ff_oem2uni+0x63>
c0008381:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008386:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000838b:	01 c0                	add    eax,eax
c000838d:	89 c2                	mov    edx,eax
c000838f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008393:	01 d0                	add    eax,edx
c0008395:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008398:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000839d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083a2:	83 c4 18             	add    esp,0x18
c00083a5:	c3                   	ret    

c00083a6 <ff_wtoupper>:
c00083a6:	83 ec 10             	sub    esp,0x10
c00083a9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083b1:	0f 87 3e 01 00 00    	ja     c00084f5 <ff_wtoupper+0x14f>
c00083b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083bb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c0:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083c7:	77 07                	ja     c00083d0 <ff_wtoupper+0x2a>
c00083c9:	b8 a0 82 02 c0       	mov    eax,0xc00282a0
c00083ce:	eb 05                	jmp    c00083d5 <ff_wtoupper+0x2f>
c00083d0:	b8 e0 81 02 c0       	mov    eax,0xc00281e0
c00083d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083dd:	8d 50 02             	lea    edx,[eax+0x2]
c00083e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ec:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083f2:	0f 84 f4 00 00 00    	je     c00084ec <ff_wtoupper+0x146>
c00083f8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083fd:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008402:	0f 82 e4 00 00 00    	jb     c00084ec <ff_wtoupper+0x146>
c0008408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840c:	8d 50 02             	lea    edx,[eax+0x2]
c000840f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008413:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008416:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000841b:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008420:	66 c1 e8 08          	shr    ax,0x8
c0008424:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008429:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000843a:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000843f:	01 ca                	add    edx,ecx
c0008441:	39 d0                	cmp    eax,edx
c0008443:	0f 8d 86 00 00 00    	jge    c00084cf <ff_wtoupper+0x129>
c0008449:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000844e:	83 f8 08             	cmp    eax,0x8
c0008451:	0f 87 94 00 00 00    	ja     c00084eb <ff_wtoupper+0x145>
c0008457:	8b 04 85 a0 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7e60]
c000845e:	ff e0                	jmp    eax
c0008460:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008465:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000846a:	29 c2                	sub    edx,eax
c000846c:	89 d0                	mov    eax,edx
c000846e:	01 c0                	add    eax,eax
c0008470:	89 c2                	mov    edx,eax
c0008472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008476:	01 d0                	add    eax,edx
c0008478:	66 8b 00             	mov    ax,WORD PTR [eax]
c000847b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008480:	eb 4b                	jmp    c00084cd <ff_wtoupper+0x127>
c0008482:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008487:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000848b:	83 e0 01             	and    eax,0x1
c000848e:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008493:	eb 38                	jmp    c00084cd <ff_wtoupper+0x127>
c0008495:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000849b:	eb 30                	jmp    c00084cd <ff_wtoupper+0x127>
c000849d:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084a3:	eb 28                	jmp    c00084cd <ff_wtoupper+0x127>
c00084a5:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084ab:	eb 20                	jmp    c00084cd <ff_wtoupper+0x127>
c00084ad:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084b3:	eb 18                	jmp    c00084cd <ff_wtoupper+0x127>
c00084b5:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084bb:	eb 10                	jmp    c00084cd <ff_wtoupper+0x127>
c00084bd:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084c3:	eb 08                	jmp    c00084cd <ff_wtoupper+0x127>
c00084c5:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084cc:	90                   	nop
c00084cd:	eb 1c                	jmp    c00084eb <ff_wtoupper+0x145>
c00084cf:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084d5:	0f 85 fe fe ff ff    	jne    c00083d9 <ff_wtoupper+0x33>
c00084db:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084e0:	01 c0                	add    eax,eax
c00084e2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084e6:	e9 ee fe ff ff       	jmp    c00083d9 <ff_wtoupper+0x33>
c00084eb:	90                   	nop
c00084ec:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f9:	83 c4 10             	add    esp,0x10
c00084fc:	c3                   	ret    

c00084fd <psrc_set_converter>:
c00084fd:	56                   	push   esi
c00084fe:	89 d6                	mov    esi,edx
c0008500:	53                   	push   ebx
c0008501:	89 c3                	mov    ebx,eax
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	52                   	push   edx
c0008507:	50                   	push   eax
c0008508:	e8 6f 55 00 00       	call   c000da7c <sinc_set_converter>
c000850d:	83 c4 10             	add    esp,0x10
c0008510:	85 c0                	test   eax,eax
c0008512:	74 25                	je     c0008539 <psrc_set_converter+0x3c>
c0008514:	50                   	push   eax
c0008515:	50                   	push   eax
c0008516:	56                   	push   esi
c0008517:	53                   	push   ebx
c0008518:	e8 17 5d 00 00       	call   c000e234 <zoh_set_converter>
c000851d:	83 c4 10             	add    esp,0x10
c0008520:	85 c0                	test   eax,eax
c0008522:	74 15                	je     c0008539 <psrc_set_converter+0x3c>
c0008524:	51                   	push   ecx
c0008525:	51                   	push   ecx
c0008526:	56                   	push   esi
c0008527:	53                   	push   ebx
c0008528:	e8 0f 11 00 00       	call   c000963c <linear_set_converter>
c000852d:	83 c4 10             	add    esp,0x10
c0008530:	ba 0a 00 00 00       	mov    edx,0xa
c0008535:	85 c0                	test   eax,eax
c0008537:	75 02                	jne    c000853b <psrc_set_converter+0x3e>
c0008539:	31 d2                	xor    edx,edx
c000853b:	89 d0                	mov    eax,edx
c000853d:	5a                   	pop    edx
c000853e:	5b                   	pop    ebx
c000853f:	5e                   	pop    esi
c0008540:	c3                   	ret    

c0008541 <src_delete>:
c0008541:	53                   	push   ebx
c0008542:	83 ec 08             	sub    esp,0x8
c0008545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008549:	85 db                	test   ebx,ebx
c000854b:	74 29                	je     c0008576 <src_delete+0x35>
c000854d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008550:	85 c0                	test   eax,eax
c0008552:	74 0c                	je     c0008560 <src_delete+0x1f>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	50                   	push   eax
c0008558:	e8 d7 70 00 00       	call   c000f634 <free>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	50                   	push   eax
c0008561:	6a 3c                	push   0x3c
c0008563:	6a 00                	push   0x0
c0008565:	53                   	push   ebx
c0008566:	e8 59 81 ff ff       	call   c00006c4 <memset>
c000856b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000856e:	e8 c1 70 00 00       	call   c000f634 <free>
c0008573:	83 c4 10             	add    esp,0x10
c0008576:	31 c0                	xor    eax,eax
c0008578:	83 c4 08             	add    esp,0x8
c000857b:	5b                   	pop    ebx
c000857c:	c3                   	ret    

c000857d <src_process>:
c000857d:	55                   	push   ebp
c000857e:	57                   	push   edi
c000857f:	56                   	push   esi
c0008580:	53                   	push   ebx
c0008581:	83 ec 1c             	sub    esp,0x1c
c0008584:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008588:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000858c:	85 ed                	test   ebp,ebp
c000858e:	0f 84 6f 01 00 00    	je     c0008703 <src_process+0x186>
c0008594:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008598:	0f 84 6c 01 00 00    	je     c000870a <src_process+0x18d>
c000859e:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00085a2:	0f 84 62 01 00 00    	je     c000870a <src_process+0x18d>
c00085a8:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00085af:	0f 85 5c 01 00 00    	jne    c0008711 <src_process+0x194>
c00085b5:	85 db                	test   ebx,ebx
c00085b7:	0f 84 5b 01 00 00    	je     c0008718 <src_process+0x19b>
c00085bd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00085bf:	85 f6                	test   esi,esi
c00085c1:	0f 84 58 01 00 00    	je     c000871f <src_process+0x1a2>
c00085c7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00085ca:	85 ff                	test   edi,edi
c00085cc:	0f 84 4d 01 00 00    	je     c000871f <src_process+0x1a2>
c00085d2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085d5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00085d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085e0:	68 00 00 70 3f       	push   0x3f700000
c00085e5:	6a 00                	push   0x0
c00085e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085ef:	e8 bb eb 01 00       	call   c00271af <__ltdf2>
c00085f4:	83 c4 10             	add    esp,0x10
c00085f7:	85 c0                	test   eax,eax
c00085f9:	0f 88 27 01 00 00    	js     c0008726 <src_process+0x1a9>
c00085ff:	68 00 00 70 40       	push   0x40700000
c0008604:	6a 00                	push   0x0
c0008606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860e:	e8 7e eb 01 00       	call   c0027191 <__gtdf2>
c0008613:	83 c4 10             	add    esp,0x10
c0008616:	85 c0                	test   eax,eax
c0008618:	0f 8f 08 01 00 00    	jg     c0008726 <src_process+0x1a9>
c000861e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008622:	79 07                	jns    c000862b <src_process+0xae>
c0008624:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000862b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000862e:	85 c0                	test   eax,eax
c0008630:	79 50                	jns    c0008682 <src_process+0x105>
c0008632:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008639:	39 fe                	cmp    esi,edi
c000863b:	72 37                	jb     c0008674 <src_process+0xf7>
c000863d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008644:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864b:	68 00 00 70 3f       	push   0x3f700000
c0008650:	6a 00                	push   0x0
c0008652:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008655:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008658:	e8 52 eb 01 00       	call   c00271af <__ltdf2>
c000865d:	83 c4 10             	add    esp,0x10
c0008660:	85 c0                	test   eax,eax
c0008662:	79 37                	jns    c000869b <src_process+0x11e>
c0008664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008668:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000866c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000866f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008672:	eb 27                	jmp    c000869b <src_process+0x11e>
c0008674:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008677:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000867b:	8d 04 86             	lea    eax,[esi+eax*4]
c000867e:	39 c7                	cmp    edi,eax
c0008680:	eb 0d                	jmp    c000868f <src_process+0x112>
c0008682:	39 fe                	cmp    esi,edi
c0008684:	72 ee                	jb     c0008674 <src_process+0xf7>
c0008686:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000868a:	8d 04 87             	lea    eax,[edi+eax*4]
c000868d:	39 c6                	cmp    esi,eax
c000868f:	73 ac                	jae    c000863d <src_process+0xc0>
c0008691:	b8 10 00 00 00       	mov    eax,0x10
c0008696:	e9 90 00 00 00       	jmp    c000872b <src_process+0x1ae>
c000869b:	83 ec 10             	sub    esp,0x10
c000869e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086a1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00086a7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00086aa:	e8 05 e2 01 00       	call   c00268b4 <__subdf3>
c00086af:	83 c4 18             	add    esp,0x18
c00086b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086ba:	52                   	push   edx
c00086bb:	50                   	push   eax
c00086bc:	e8 7f ec 01 00       	call   c0027340 <fabs>
c00086c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086c9:	83 c4 10             	add    esp,0x10
c00086cc:	68 af 03 d2 3c       	push   0x3cd203af
c00086d1:	68 16 56 e7 9e       	push   0x9ee75616
c00086d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086de:	e8 cc ea 01 00       	call   c00271af <__ltdf2>
c00086e3:	83 c4 10             	add    esp,0x10
c00086e6:	85 c0                	test   eax,eax
c00086e8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086ec:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086f0:	79 05                	jns    c00086f7 <src_process+0x17a>
c00086f2:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086f5:	eb 03                	jmp    c00086fa <src_process+0x17d>
c00086f7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086fa:	83 c4 1c             	add    esp,0x1c
c00086fd:	5b                   	pop    ebx
c00086fe:	5e                   	pop    esi
c00086ff:	5f                   	pop    edi
c0008700:	5d                   	pop    ebp
c0008701:	ff e0                	jmp    eax
c0008703:	b8 02 00 00 00       	mov    eax,0x2
c0008708:	eb 21                	jmp    c000872b <src_process+0x1ae>
c000870a:	b8 07 00 00 00       	mov    eax,0x7
c000870f:	eb 1a                	jmp    c000872b <src_process+0x1ae>
c0008711:	b8 12 00 00 00       	mov    eax,0x12
c0008716:	eb 13                	jmp    c000872b <src_process+0x1ae>
c0008718:	b8 03 00 00 00       	mov    eax,0x3
c000871d:	eb 0c                	jmp    c000872b <src_process+0x1ae>
c000871f:	b8 04 00 00 00       	mov    eax,0x4
c0008724:	eb 05                	jmp    c000872b <src_process+0x1ae>
c0008726:	b8 06 00 00 00       	mov    eax,0x6
c000872b:	83 c4 1c             	add    esp,0x1c
c000872e:	5b                   	pop    ebx
c000872f:	5e                   	pop    esi
c0008730:	5f                   	pop    edi
c0008731:	5d                   	pop    ebp
c0008732:	c3                   	ret    

c0008733 <src_callback_read>:
c0008733:	55                   	push   ebp
c0008734:	57                   	push   edi
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	83 ec 3c             	sub    esp,0x3c
c000873a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000873e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008742:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008746:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000874a:	85 ed                	test   ebp,ebp
c000874c:	0f 8e 52 01 00 00    	jle    c00088a4 <src_callback_read+0x171>
c0008752:	85 db                	test   ebx,ebx
c0008754:	0f 84 4a 01 00 00    	je     c00088a4 <src_callback_read+0x171>
c000875a:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008761:	74 0c                	je     c000876f <src_callback_read+0x3c>
c0008763:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000876a:	e9 35 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c000876f:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008773:	75 0c                	jne    c0008781 <src_callback_read+0x4e>
c0008775:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000877c:	e9 23 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c0008781:	51                   	push   ecx
c0008782:	6a 24                	push   0x24
c0008784:	6a 00                	push   0x0
c0008786:	8d 44 24 18          	lea    eax,[esp+0x18]
c000878a:	50                   	push   eax
c000878b:	e8 34 7f ff ff       	call   c00006c4 <memset>
c0008790:	83 c4 10             	add    esp,0x10
c0008793:	68 00 00 70 3f       	push   0x3f700000
c0008798:	6a 00                	push   0x0
c000879a:	57                   	push   edi
c000879b:	56                   	push   esi
c000879c:	e8 0e ea 01 00       	call   c00271af <__ltdf2>
c00087a1:	83 c4 10             	add    esp,0x10
c00087a4:	85 c0                	test   eax,eax
c00087a6:	78 3e                	js     c00087e6 <src_callback_read+0xb3>
c00087a8:	68 00 00 70 40       	push   0x40700000
c00087ad:	6a 00                	push   0x0
c00087af:	57                   	push   edi
c00087b0:	56                   	push   esi
c00087b1:	e8 db e9 01 00       	call   c0027191 <__gtdf2>
c00087b6:	83 c4 10             	add    esp,0x10
c00087b9:	85 c0                	test   eax,eax
c00087bb:	7f 29                	jg     c00087e6 <src_callback_read+0xb3>
c00087bd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087c1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087c9:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087cd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087d0:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d8:	31 f6                	xor    esi,esi
c00087da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087e1:	e9 97 00 00 00       	jmp    c000887d <src_callback_read+0x14a>
c00087e6:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087ed:	e9 b2 00 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c00087f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fa:	52                   	push   edx
c00087fb:	52                   	push   edx
c00087fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008800:	50                   	push   eax
c0008801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008804:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008807:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000880b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000880f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	75 08                	jne    c0008822 <src_callback_read+0xef>
c000881a:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008822:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000882f:	50                   	push   eax
c0008830:	53                   	push   ebx
c0008831:	e8 47 fd ff ff       	call   c000857d <src_process>
c0008836:	83 c4 10             	add    esp,0x10
c0008839:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008840:	85 c0                	test   eax,eax
c0008842:	75 49                	jne    c000888d <src_callback_read+0x15a>
c0008844:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008848:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000884b:	89 f9                	mov    ecx,edi
c000884d:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008851:	0f af ca             	imul   ecx,edx
c0008854:	c1 e1 02             	shl    ecx,0x2
c0008857:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000885b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000885f:	0f af d1             	imul   edx,ecx
c0008862:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008866:	c1 e2 02             	shl    edx,0x2
c0008869:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000886d:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008870:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008875:	74 12                	je     c0008889 <src_callback_read+0x156>
c0008877:	39 d5                	cmp    ebp,edx
c0008879:	7e 14                	jle    c000888f <src_callback_read+0x15c>
c000887b:	89 d6                	mov    esi,edx
c000887d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008882:	75 9e                	jne    c0008822 <src_callback_read+0xef>
c0008884:	e9 69 ff ff ff       	jmp    c00087f2 <src_callback_read+0xbf>
c0008889:	85 c9                	test   ecx,ecx
c000888b:	75 ea                	jne    c0008877 <src_callback_read+0x144>
c000888d:	89 f2                	mov    edx,esi
c000888f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008893:	85 c0                	test   eax,eax
c0008895:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008898:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000889c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000889f:	74 05                	je     c00088a6 <src_callback_read+0x173>
c00088a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088a4:	31 d2                	xor    edx,edx
c00088a6:	83 c4 3c             	add    esp,0x3c
c00088a9:	89 d0                	mov    eax,edx
c00088ab:	5b                   	pop    ebx
c00088ac:	5e                   	pop    esi
c00088ad:	5f                   	pop    edi
c00088ae:	5d                   	pop    ebp
c00088af:	c3                   	ret    

c00088b0 <src_set_ratio>:
c00088b0:	57                   	push   edi
c00088b1:	ba 02 00 00 00       	mov    edx,0x2
c00088b6:	56                   	push   esi
c00088b7:	53                   	push   ebx
c00088b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088c4:	85 db                	test   ebx,ebx
c00088c6:	74 4c                	je     c0008914 <src_set_ratio+0x64>
c00088c8:	ba 07 00 00 00       	mov    edx,0x7
c00088cd:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088d1:	74 41                	je     c0008914 <src_set_ratio+0x64>
c00088d3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088d7:	74 3b                	je     c0008914 <src_set_ratio+0x64>
c00088d9:	68 00 00 70 3f       	push   0x3f700000
c00088de:	6a 00                	push   0x0
c00088e0:	57                   	push   edi
c00088e1:	56                   	push   esi
c00088e2:	e8 c8 e8 01 00       	call   c00271af <__ltdf2>
c00088e7:	83 c4 10             	add    esp,0x10
c00088ea:	ba 06 00 00 00       	mov    edx,0x6
c00088ef:	85 c0                	test   eax,eax
c00088f1:	78 21                	js     c0008914 <src_set_ratio+0x64>
c00088f3:	68 00 00 70 40       	push   0x40700000
c00088f8:	6a 00                	push   0x0
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	e8 90 e8 01 00       	call   c0027191 <__gtdf2>
c0008901:	83 c4 10             	add    esp,0x10
c0008904:	ba 06 00 00 00       	mov    edx,0x6
c0008909:	85 c0                	test   eax,eax
c000890b:	7f 07                	jg     c0008914 <src_set_ratio+0x64>
c000890d:	89 33                	mov    DWORD PTR [ebx],esi
c000890f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008912:	31 d2                	xor    edx,edx
c0008914:	5b                   	pop    ebx
c0008915:	89 d0                	mov    eax,edx
c0008917:	5e                   	pop    esi
c0008918:	5f                   	pop    edi
c0008919:	c3                   	ret    

c000891a <src_get_channels>:
c000891a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000891e:	b8 02 00 00 00       	mov    eax,0x2
c0008923:	85 d2                	test   edx,edx
c0008925:	74 14                	je     c000893b <src_get_channels+0x21>
c0008927:	b8 07 00 00 00       	mov    eax,0x7
c000892c:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008930:	74 09                	je     c000893b <src_get_channels+0x21>
c0008932:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008936:	74 03                	je     c000893b <src_get_channels+0x21>
c0008938:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000893b:	c3                   	ret    

c000893c <src_reset>:
c000893c:	53                   	push   ebx
c000893d:	b8 02 00 00 00       	mov    eax,0x2
c0008942:	83 ec 08             	sub    esp,0x8
c0008945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008949:	85 db                	test   ebx,ebx
c000894b:	74 36                	je     c0008983 <src_reset+0x47>
c000894d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008950:	85 c0                	test   eax,eax
c0008952:	74 09                	je     c000895d <src_reset+0x21>
c0008954:	83 ec 0c             	sub    esp,0xc
c0008957:	53                   	push   ebx
c0008958:	ff d0                	call   eax
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	31 c0                	xor    eax,eax
c000895f:	31 d2                	xor    edx,edx
c0008961:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008964:	89 03                	mov    DWORD PTR [ebx],eax
c0008966:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008969:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000896c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008973:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000897a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008981:	31 c0                	xor    eax,eax
c0008983:	83 c4 08             	add    esp,0x8
c0008986:	5b                   	pop    ebx
c0008987:	c3                   	ret    

c0008988 <src_new>:
c0008988:	57                   	push   edi
c0008989:	56                   	push   esi
c000898a:	53                   	push   ebx
c000898b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000898f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008993:	85 f6                	test   esi,esi
c0008995:	74 73                	je     c0008a0a <src_new+0x82>
c0008997:	85 ff                	test   edi,edi
c0008999:	7f 08                	jg     c00089a3 <src_new+0x1b>
c000899b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089a1:	eb 1e                	jmp    c00089c1 <src_new+0x39>
c00089a3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089a9:	50                   	push   eax
c00089aa:	50                   	push   eax
c00089ab:	6a 3c                	push   0x3c
c00089ad:	6a 01                	push   0x1
c00089af:	e8 a0 6c 00 00       	call   c000f654 <calloc>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	89 c3                	mov    ebx,eax
c00089b9:	85 c0                	test   eax,eax
c00089bb:	75 10                	jne    c00089cd <src_new+0x45>
c00089bd:	85 f6                	test   esi,esi
c00089bf:	75 04                	jne    c00089c5 <src_new+0x3d>
c00089c1:	31 db                	xor    ebx,ebx
c00089c3:	eb 4b                	jmp    c0008a10 <src_new+0x88>
c00089c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089cb:	eb 43                	jmp    c0008a10 <src_new+0x88>
c00089cd:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089d0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089db:	e8 1d fb ff ff       	call   c00084fd <psrc_set_converter>
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 18                	je     c00089fc <src_new+0x74>
c00089e4:	85 f6                	test   esi,esi
c00089e6:	74 06                	je     c00089ee <src_new+0x66>
c00089e8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089ee:	83 ec 0c             	sub    esp,0xc
c00089f1:	53                   	push   ebx
c00089f2:	31 db                	xor    ebx,ebx
c00089f4:	e8 3b 6c 00 00       	call   c000f634 <free>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 37 ff ff ff       	call   c000893c <src_reset>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	eb 06                	jmp    c0008a10 <src_new+0x88>
c0008a0a:	85 ff                	test   edi,edi
c0008a0c:	7f 9b                	jg     c00089a9 <src_new+0x21>
c0008a0e:	eb b1                	jmp    c00089c1 <src_new+0x39>
c0008a10:	89 d8                	mov    eax,ebx
c0008a12:	5b                   	pop    ebx
c0008a13:	5e                   	pop    esi
c0008a14:	5f                   	pop    edi
c0008a15:	c3                   	ret    

c0008a16 <src_callback_new>:
c0008a16:	56                   	push   esi
c0008a17:	53                   	push   ebx
c0008a18:	53                   	push   ebx
c0008a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a21:	85 f6                	test   esi,esi
c0008a23:	75 0e                	jne    c0008a33 <src_callback_new+0x1d>
c0008a25:	31 db                	xor    ebx,ebx
c0008a27:	85 c0                	test   eax,eax
c0008a29:	74 47                	je     c0008a72 <src_callback_new+0x5c>
c0008a2b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a31:	eb 3f                	jmp    c0008a72 <src_callback_new+0x5c>
c0008a33:	85 c0                	test   eax,eax
c0008a35:	74 06                	je     c0008a3d <src_callback_new+0x27>
c0008a37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3d:	51                   	push   ecx
c0008a3e:	50                   	push   eax
c0008a3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a47:	e8 3c ff ff ff       	call   c0008988 <src_new>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	89 c3                	mov    ebx,eax
c0008a51:	85 c0                	test   eax,eax
c0008a53:	74 1d                	je     c0008a72 <src_callback_new+0x5c>
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	50                   	push   eax
c0008a59:	e8 de fe ff ff       	call   c000893c <src_reset>
c0008a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a62:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a69:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a6c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a6f:	83 c4 10             	add    esp,0x10
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	5a                   	pop    edx
c0008a75:	5b                   	pop    ebx
c0008a76:	5e                   	pop    esi
c0008a77:	c3                   	ret    

c0008a78 <src_get_name>:
c0008a78:	53                   	push   ebx
c0008a79:	83 ec 14             	sub    esp,0x14
c0008a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a80:	53                   	push   ebx
c0008a81:	e8 d0 4f 00 00       	call   c000da56 <sinc_get_name>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 1d                	jne    c0008aaa <src_get_name+0x32>
c0008a8d:	83 ec 0c             	sub    esp,0xc
c0008a90:	53                   	push   ebx
c0008a91:	e8 80 57 00 00       	call   c000e216 <zoh_get_name>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	85 c0                	test   eax,eax
c0008a9b:	75 0d                	jne    c0008aaa <src_get_name+0x32>
c0008a9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aa1:	83 c4 08             	add    esp,0x8
c0008aa4:	5b                   	pop    ebx
c0008aa5:	e9 74 0b 00 00       	jmp    c000961e <linear_get_name>
c0008aaa:	83 c4 08             	add    esp,0x8
c0008aad:	5b                   	pop    ebx
c0008aae:	c3                   	ret    

c0008aaf <src_get_description>:
c0008aaf:	53                   	push   ebx
c0008ab0:	83 ec 14             	sub    esp,0x14
c0008ab3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ab7:	53                   	push   ebx
c0008ab8:	e8 ac 4f 00 00       	call   c000da69 <sinc_get_description>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	85 c0                	test   eax,eax
c0008ac2:	75 1d                	jne    c0008ae1 <src_get_description+0x32>
c0008ac4:	83 ec 0c             	sub    esp,0xc
c0008ac7:	53                   	push   ebx
c0008ac8:	e8 58 57 00 00       	call   c000e225 <zoh_get_description>
c0008acd:	83 c4 10             	add    esp,0x10
c0008ad0:	85 c0                	test   eax,eax
c0008ad2:	75 0d                	jne    c0008ae1 <src_get_description+0x32>
c0008ad4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ad8:	83 c4 08             	add    esp,0x8
c0008adb:	5b                   	pop    ebx
c0008adc:	e9 4c 0b 00 00       	jmp    c000962d <linear_get_description>
c0008ae1:	83 c4 08             	add    esp,0x8
c0008ae4:	5b                   	pop    ebx
c0008ae5:	c3                   	ret    

c0008ae6 <src_get_version>:
c0008ae6:	b8 a0 85 02 c0       	mov    eax,0xc00285a0
c0008aeb:	c3                   	ret    

c0008aec <src_is_valid_ratio>:
c0008aec:	83 ec 1c             	sub    esp,0x1c
c0008aef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008af7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008afb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008aff:	68 00 00 70 3f       	push   0x3f700000
c0008b04:	6a 00                	push   0x0
c0008b06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0e:	e8 9c e6 01 00       	call   c00271af <__ltdf2>
c0008b13:	83 c4 10             	add    esp,0x10
c0008b16:	31 d2                	xor    edx,edx
c0008b18:	85 c0                	test   eax,eax
c0008b1a:	78 1e                	js     c0008b3a <src_is_valid_ratio+0x4e>
c0008b1c:	68 00 00 70 40       	push   0x40700000
c0008b21:	6a 00                	push   0x0
c0008b23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b2b:	e8 61 e6 01 00       	call   c0027191 <__gtdf2>
c0008b30:	31 d2                	xor    edx,edx
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	85 c0                	test   eax,eax
c0008b37:	0f 9e c2             	setle  dl
c0008b3a:	89 d0                	mov    eax,edx
c0008b3c:	83 c4 1c             	add    esp,0x1c
c0008b3f:	c3                   	ret    

c0008b40 <src_error>:
c0008b40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b44:	31 c0                	xor    eax,eax
c0008b46:	85 d2                	test   edx,edx
c0008b48:	74 03                	je     c0008b4d <src_error+0xd>
c0008b4a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b4d:	c3                   	ret    

c0008b4e <src_strerror>:
c0008b4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b52:	31 c0                	xor    eax,eax
c0008b54:	83 fa 17             	cmp    edx,0x17
c0008b57:	77 07                	ja     c0008b60 <src_strerror+0x12>
c0008b59:	8b 04 95 00 8a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7600]
c0008b60:	c3                   	ret    

c0008b61 <src_simple>:
c0008b61:	56                   	push   esi
c0008b62:	53                   	push   ebx
c0008b63:	83 ec 18             	sub    esp,0x18
c0008b66:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b6e:	50                   	push   eax
c0008b6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b77:	e8 0c fe ff ff       	call   c0008988 <src_new>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	85 c0                	test   eax,eax
c0008b81:	75 06                	jne    c0008b89 <src_simple+0x28>
c0008b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b87:	eb 25                	jmp    c0008bae <src_simple+0x4d>
c0008b89:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b90:	89 c3                	mov    ebx,eax
c0008b92:	50                   	push   eax
c0008b93:	50                   	push   eax
c0008b94:	56                   	push   esi
c0008b95:	53                   	push   ebx
c0008b96:	e8 e2 f9 ff ff       	call   c000857d <src_process>
c0008b9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ba2:	e8 9a f9 ff ff       	call   c0008541 <src_delete>
c0008ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bab:	83 c4 10             	add    esp,0x10
c0008bae:	83 c4 14             	add    esp,0x14
c0008bb1:	5b                   	pop    ebx
c0008bb2:	5e                   	pop    esi
c0008bb3:	c3                   	ret    

c0008bb4 <src_short_to_float_array>:
c0008bb4:	53                   	push   ebx
c0008bb5:	83 ec 18             	sub    esp,0x18
c0008bb8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bbc:	85 db                	test   ebx,ebx
c0008bbe:	74 54                	je     c0008c14 <src_short_to_float_array+0x60>
c0008bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc4:	4b                   	dec    ebx
c0008bc5:	83 ec 0c             	sub    esp,0xc
c0008bc8:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008bcc:	50                   	push   eax
c0008bcd:	e8 71 e3 01 00       	call   c0026f43 <__floatsidf>
c0008bd2:	83 c4 10             	add    esp,0x10
c0008bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bdd:	68 00 00 00 3f       	push   0x3f000000
c0008be2:	6a 00                	push   0x0
c0008be4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008be8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bec:	e8 ef dc 01 00       	call   c00268e0 <__muldf3>
c0008bf1:	59                   	pop    ecx
c0008bf2:	59                   	pop    ecx
c0008bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bf7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c03:	e8 ab e5 01 00       	call   c00271b3 <__truncdfsf2>
c0008c08:	83 c4 10             	add    esp,0x10
c0008c0b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c0f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c12:	eb a8                	jmp    c0008bbc <src_short_to_float_array+0x8>
c0008c14:	83 c4 18             	add    esp,0x18
c0008c17:	5b                   	pop    ebx
c0008c18:	c3                   	ret    

c0008c19 <src_float_to_short_array>:
c0008c19:	56                   	push   esi
c0008c1a:	53                   	push   ebx
c0008c1b:	83 ec 14             	sub    esp,0x14
c0008c1e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c22:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c26:	85 db                	test   ebx,ebx
c0008c28:	0f 84 a4 00 00 00    	je     c0008cd2 <src_float_to_short_array+0xb9>
c0008c2e:	83 ec 0c             	sub    esp,0xc
c0008c31:	4b                   	dec    ebx
c0008c32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c36:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c39:	e8 99 e6 01 00       	call   c00272d7 <__extendsfdf2>
c0008c3e:	83 c4 10             	add    esp,0x10
c0008c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c49:	68 00 00 e0 41       	push   0x41e00000
c0008c4e:	6a 00                	push   0x0
c0008c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c58:	e8 83 dc 01 00       	call   c00268e0 <__muldf3>
c0008c5d:	83 c4 10             	add    esp,0x10
c0008c60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c68:	68 ff ff df 41       	push   0x41dfffff
c0008c6d:	68 00 00 c0 ff       	push   0xffc00000
c0008c72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c7a:	e8 2e e5 01 00       	call   c00271ad <__gedf2>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	85 c0                	test   eax,eax
c0008c84:	78 08                	js     c0008c8e <src_float_to_short_array+0x75>
c0008c86:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c8c:	eb 98                	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008c8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008c93:	6a 00                	push   0x0
c0008c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c9d:	e8 0f e5 01 00       	call   c00271b1 <__ledf2>
c0008ca2:	83 c4 10             	add    esp,0x10
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	7f 0b                	jg     c0008cb4 <src_float_to_short_array+0x9b>
c0008ca9:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008caf:	e9 72 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cb4:	50                   	push   eax
c0008cb5:	50                   	push   eax
c0008cb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cbe:	e8 9d e6 01 00       	call   c0027360 <lrint>
c0008cc3:	83 c4 10             	add    esp,0x10
c0008cc6:	c1 f8 10             	sar    eax,0x10
c0008cc9:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ccd:	e9 54 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cd2:	83 c4 14             	add    esp,0x14
c0008cd5:	5b                   	pop    ebx
c0008cd6:	5e                   	pop    esi
c0008cd7:	c3                   	ret    

c0008cd8 <src_int_to_float_array>:
c0008cd8:	53                   	push   ebx
c0008cd9:	83 ec 18             	sub    esp,0x18
c0008cdc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ce0:	85 db                	test   ebx,ebx
c0008ce2:	74 52                	je     c0008d36 <src_int_to_float_array+0x5e>
c0008ce4:	83 ec 0c             	sub    esp,0xc
c0008ce7:	4b                   	dec    ebx
c0008ce8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cec:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cef:	e8 4f e2 01 00       	call   c0026f43 <__floatsidf>
c0008cf4:	83 c4 10             	add    esp,0x10
c0008cf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cff:	68 00 00 00 3e       	push   0x3e000000
c0008d04:	6a 00                	push   0x0
c0008d06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0e:	e8 cd db 01 00       	call   c00268e0 <__muldf3>
c0008d13:	59                   	pop    ecx
c0008d14:	59                   	pop    ecx
c0008d15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008d19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 89 e4 01 00       	call   c00271b3 <__truncdfsf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d31:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d34:	eb aa                	jmp    c0008ce0 <src_int_to_float_array+0x8>
c0008d36:	83 c4 18             	add    esp,0x18
c0008d39:	5b                   	pop    ebx
c0008d3a:	c3                   	ret    

c0008d3b <src_float_to_int_array>:
c0008d3b:	56                   	push   esi
c0008d3c:	53                   	push   ebx
c0008d3d:	83 ec 14             	sub    esp,0x14
c0008d40:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d44:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d48:	85 db                	test   ebx,ebx
c0008d4a:	0f 84 a2 00 00 00    	je     c0008df2 <src_float_to_int_array+0xb7>
c0008d50:	83 ec 0c             	sub    esp,0xc
c0008d53:	4b                   	dec    ebx
c0008d54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d58:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d5b:	e8 77 e5 01 00       	call   c00272d7 <__extendsfdf2>
c0008d60:	83 c4 10             	add    esp,0x10
c0008d63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d6b:	68 00 00 e0 41       	push   0x41e00000
c0008d70:	6a 00                	push   0x0
c0008d72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7a:	e8 61 db 01 00       	call   c00268e0 <__muldf3>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d8a:	68 ff ff df 41       	push   0x41dfffff
c0008d8f:	68 00 00 c0 ff       	push   0xffc00000
c0008d94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9c:	e8 0c e4 01 00       	call   c00271ad <__gedf2>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	85 c0                	test   eax,eax
c0008da6:	78 09                	js     c0008db1 <src_float_to_int_array+0x76>
c0008da8:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008daf:	eb 97                	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008db1:	68 00 00 e0 c1       	push   0xc1e00000
c0008db6:	6a 00                	push   0x0
c0008db8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc0:	e8 ec e3 01 00       	call   c00271b1 <__ledf2>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	85 c0                	test   eax,eax
c0008dca:	7f 0c                	jg     c0008dd8 <src_float_to_int_array+0x9d>
c0008dcc:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008dd3:	e9 70 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008dd8:	50                   	push   eax
c0008dd9:	50                   	push   eax
c0008dda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de2:	e8 79 e5 01 00       	call   c0027360 <lrint>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008ded:	e9 56 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008df2:	83 c4 14             	add    esp,0x14
c0008df5:	5b                   	pop    ebx
c0008df6:	5e                   	pop    esi
c0008df7:	c3                   	ret    

c0008df8 <linear_vari_process>:
c0008df8:	55                   	push   ebp
c0008df9:	31 d2                	xor    edx,edx
c0008dfb:	57                   	push   edi
c0008dfc:	56                   	push   esi
c0008dfd:	53                   	push   ebx
c0008dfe:	83 ec 3c             	sub    esp,0x3c
c0008e01:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e05:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e09:	0f 8e d3 07 00 00    	jle    c00095e2 <linear_vari_process+0x7ea>
c0008e0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e13:	ba 05 00 00 00       	mov    edx,0x5
c0008e18:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e1b:	85 db                	test   ebx,ebx
c0008e1d:	0f 84 bf 07 00 00    	je     c00095e2 <linear_vari_process+0x7ea>
c0008e23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e26:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e2a:	74 19                	je     c0008e45 <linear_vari_process+0x4d>
c0008e2c:	31 d2                	xor    edx,edx
c0008e2e:	39 c2                	cmp    edx,eax
c0008e30:	7d 0c                	jge    c0008e3e <linear_vari_process+0x46>
c0008e32:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e34:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e37:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e3b:	42                   	inc    edx
c0008e3c:	eb f0                	jmp    c0008e2e <linear_vari_process+0x36>
c0008e3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e45:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e48:	0f af d0             	imul   edx,eax
c0008e4b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e4e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e52:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e59:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e5c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e63:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e67:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e74:	68 00 00 70 3f       	push   0x3f700000
c0008e79:	6a 00                	push   0x0
c0008e7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e83:	e8 27 e3 01 00       	call   c00271af <__ltdf2>
c0008e88:	83 c4 10             	add    esp,0x10
c0008e8b:	ba 16 00 00 00       	mov    edx,0x16
c0008e90:	85 c0                	test   eax,eax
c0008e92:	0f 88 4a 07 00 00    	js     c00095e2 <linear_vari_process+0x7ea>
c0008e98:	68 00 00 70 40       	push   0x40700000
c0008e9d:	6a 00                	push   0x0
c0008e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea7:	e8 e5 e2 01 00       	call   c0027191 <__gtdf2>
c0008eac:	83 c4 10             	add    esp,0x10
c0008eaf:	ba 16 00 00 00       	mov    edx,0x16
c0008eb4:	85 c0                	test   eax,eax
c0008eb6:	0f 8f 26 07 00 00    	jg     c00095e2 <linear_vari_process+0x7ea>
c0008ebc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008ec3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ec6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008eca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ece:	68 00 00 f0 3f       	push   0x3ff00000
c0008ed3:	6a 00                	push   0x0
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 cd e2 01 00       	call   c00271af <__ltdf2>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	85 c0                	test   eax,eax
c0008ee7:	0f 89 89 02 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008eed:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ef0:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008ef3:	0f 8d 7d 02 00 00    	jge    c0009176 <linear_vari_process+0x37e>
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eff:	e8 3f e0 01 00       	call   c0026f43 <__floatsidf>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f0e:	68 00 00 f0 3f       	push   0x3ff00000
c0008f13:	6a 00                	push   0x0
c0008f15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	e8 41 d3 01 00       	call   c0026263 <__adddf3>
c0008f22:	83 c4 10             	add    esp,0x10
c0008f25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f2d:	52                   	push   edx
c0008f2e:	50                   	push   eax
c0008f2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f37:	e8 a4 d9 01 00       	call   c00268e0 <__muldf3>
c0008f3c:	5d                   	pop    ebp
c0008f3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f45:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f48:	e8 f6 df 01 00       	call   c0026f43 <__floatsidf>
c0008f4d:	83 c4 10             	add    esp,0x10
c0008f50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f58:	52                   	push   edx
c0008f59:	50                   	push   eax
c0008f5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f62:	e8 fc d2 01 00       	call   c0026263 <__adddf3>
c0008f67:	59                   	pop    ecx
c0008f68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f70:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f73:	e8 cb df 01 00       	call   c0026f43 <__floatsidf>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f83:	52                   	push   edx
c0008f84:	50                   	push   eax
c0008f85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f8d:	e8 1b e2 01 00       	call   c00271ad <__gedf2>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	85 c0                	test   eax,eax
c0008f97:	0f 89 d9 01 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008f9d:	85 ff                	test   edi,edi
c0008f9f:	0f 8e f4 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008fa5:	83 ec 10             	sub    esp,0x10
c0008fa8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fab:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fb2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fb5:	ff 30                	push   DWORD PTR [eax]
c0008fb7:	e8 f8 d8 01 00       	call   c00268b4 <__subdf3>
c0008fbc:	83 c4 18             	add    esp,0x18
c0008fbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fc7:	52                   	push   edx
c0008fc8:	50                   	push   eax
c0008fc9:	e8 72 e3 01 00       	call   c0027340 <fabs>
c0008fce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fde:	68 23 42 92 0c       	push   0xc924223
c0008fe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008feb:	e8 a1 e1 01 00       	call   c0027191 <__gtdf2>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	85 c0                	test   eax,eax
c0008ff5:	0f 8e 9e 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008ffb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fff:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009002:	8b 00                	mov    eax,DWORD PTR [eax]
c0009004:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009008:	89 04 24             	mov    DWORD PTR [esp],eax
c000900b:	52                   	push   edx
c000900c:	50                   	push   eax
c000900d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009010:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009013:	e8 9c d8 01 00       	call   c00268b4 <__subdf3>
c0009018:	59                   	pop    ecx
c0009019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000901d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009021:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009024:	e8 1a df 01 00       	call   c0026f43 <__floatsidf>
c0009029:	83 c4 10             	add    esp,0x10
c000902c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009034:	52                   	push   edx
c0009035:	50                   	push   eax
c0009036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903e:	e8 9d d8 01 00       	call   c00268e0 <__muldf3>
c0009043:	5f                   	pop    edi
c0009044:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009048:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000904c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000904f:	e8 ef de 01 00       	call   c0026f43 <__floatsidf>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000905b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000905f:	52                   	push   edx
c0009060:	50                   	push   eax
c0009061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009069:	e8 56 db 01 00       	call   c0026bc4 <__divdf3>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009075:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009079:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000907d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009089:	e8 d5 d1 01 00       	call   c0026263 <__adddf3>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009095:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009099:	31 ff                	xor    edi,edi
c000909b:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000909e:	0f 8e 9d 00 00 00    	jle    c0009141 <linear_vari_process+0x349>
c00090a4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090a7:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090ae:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00090b7:	52                   	push   edx
c00090b8:	52                   	push   edx
c00090b9:	55                   	push   ebp
c00090ba:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090bd:	47                   	inc    edi
c00090be:	e8 35 cb 01 00       	call   c0025bf8 <__subsf3>
c00090c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00090c6:	e8 0c e2 01 00       	call   c00272d7 <__extendsfdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e6:	e8 f5 d7 01 00       	call   c00268e0 <__muldf3>
c00090eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090f6:	e8 dc e1 01 00       	call   c00272d7 <__extendsfdf2>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009102:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009106:	52                   	push   edx
c0009107:	50                   	push   eax
c0009108:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000910c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009110:	e8 4e d1 01 00       	call   c0026263 <__adddf3>
c0009115:	59                   	pop    ecx
c0009116:	5d                   	pop    ebp
c0009117:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000911b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000911f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009123:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009127:	e8 87 e0 01 00       	call   c00271b3 <__truncdfsf2>
c000912c:	83 c4 10             	add    esp,0x10
c000912f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009132:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009136:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009139:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000913c:	e9 5a ff ff ff       	jmp    c000909b <linear_vari_process+0x2a3>
c0009141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009149:	68 00 00 f0 3f       	push   0x3ff00000
c000914e:	6a 00                	push   0x0
c0009150:	e8 6f da 01 00       	call   c0026bc4 <__divdf3>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 04 24             	mov    DWORD PTR [esp],eax
c000915b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000915f:	52                   	push   edx
c0009160:	50                   	push   eax
c0009161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009169:	e8 f5 d0 01 00       	call   c0026263 <__adddf3>
c000916e:	83 c4 10             	add    esp,0x10
c0009171:	e9 50 fd ff ff       	jmp    c0008ec6 <linear_vari_process+0xce>
c0009176:	50                   	push   eax
c0009177:	50                   	push   eax
c0009178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009180:	e8 db e1 01 00       	call   c0027360 <lrint>
c0009185:	83 ec 0c             	sub    esp,0xc
c0009188:	50                   	push   eax
c0009189:	e8 b5 dd 01 00       	call   c0026f43 <__floatsidf>
c000918e:	83 c4 10             	add    esp,0x10
c0009191:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009195:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009199:	52                   	push   edx
c000919a:	50                   	push   eax
c000919b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000919f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a3:	e8 0c d7 01 00       	call   c00268b4 <__subdf3>
c00091a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091ac:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091b0:	83 c4 20             	add    esp,0x20
c00091b3:	6a 00                	push   0x0
c00091b5:	6a 00                	push   0x0
c00091b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bf:	e8 eb df 01 00       	call   c00271af <__ltdf2>
c00091c4:	83 c4 10             	add    esp,0x10
c00091c7:	85 c0                	test   eax,eax
c00091c9:	79 1e                	jns    c00091e9 <linear_vari_process+0x3f1>
c00091cb:	68 00 00 f0 3f       	push   0x3ff00000
c00091d0:	6a 00                	push   0x0
c00091d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091da:	e8 84 d0 01 00       	call   c0026263 <__adddf3>
c00091df:	83 c4 10             	add    esp,0x10
c00091e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091ec:	83 ec 10             	sub    esp,0x10
c00091ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ff:	e8 b0 d6 01 00       	call   c00268b4 <__subdf3>
c0009204:	83 c4 18             	add    esp,0x18
c0009207:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000920f:	52                   	push   edx
c0009210:	50                   	push   eax
c0009211:	e8 4a e1 01 00       	call   c0027360 <lrint>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	0f af f8             	imul   edi,eax
c000921c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000921f:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009222:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009225:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009228:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000922b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000922f:	0f 8d 13 03 00 00    	jge    c0009548 <linear_vari_process+0x750>
c0009235:	83 ec 0c             	sub    esp,0xc
c0009238:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000923b:	e8 03 dd 01 00       	call   c0026f43 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009247:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000924b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000924f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009257:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000925b:	e8 80 d6 01 00       	call   c00268e0 <__muldf3>
c0009260:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009263:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009267:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926b:	e8 d3 dc 01 00       	call   c0026f43 <__floatsidf>
c0009270:	83 c4 10             	add    esp,0x10
c0009273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009277:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927b:	52                   	push   edx
c000927c:	50                   	push   eax
c000927d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009281:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009285:	e8 d9 cf 01 00       	call   c0026263 <__adddf3>
c000928a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000928d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009291:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009295:	e8 a9 dc 01 00       	call   c0026f43 <__floatsidf>
c000929a:	83 c4 10             	add    esp,0x10
c000929d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092a5:	52                   	push   edx
c00092a6:	50                   	push   eax
c00092a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092af:	e8 fb de 01 00       	call   c00271af <__ltdf2>
c00092b4:	83 c4 10             	add    esp,0x10
c00092b7:	85 c0                	test   eax,eax
c00092b9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092bd:	0f 89 85 02 00 00    	jns    c0009548 <linear_vari_process+0x750>
c00092c3:	85 c9                	test   ecx,ecx
c00092c5:	0f 8e f5 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c00092cb:	83 ec 10             	sub    esp,0x10
c00092ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092d4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092db:	ff 30                	push   DWORD PTR [eax]
c00092dd:	e8 d2 d5 01 00       	call   c00268b4 <__subdf3>
c00092e2:	83 c4 18             	add    esp,0x18
c00092e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092ed:	52                   	push   edx
c00092ee:	50                   	push   eax
c00092ef:	e8 4c e0 01 00       	call   c0027340 <fabs>
c00092f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092fc:	83 c4 10             	add    esp,0x10
c00092ff:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009304:	68 23 42 92 0c       	push   0xc924223
c0009309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000930d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009311:	e8 7b de 01 00       	call   c0027191 <__gtdf2>
c0009316:	83 c4 10             	add    esp,0x10
c0009319:	85 c0                	test   eax,eax
c000931b:	0f 8e 9f 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c0009321:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009325:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009328:	8b 00                	mov    eax,DWORD PTR [eax]
c000932a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000932e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009332:	52                   	push   edx
c0009333:	50                   	push   eax
c0009334:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009337:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000933a:	e8 75 d5 01 00       	call   c00268b4 <__subdf3>
c000933f:	5f                   	pop    edi
c0009340:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009344:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009348:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000934b:	e8 f3 db 01 00       	call   c0026f43 <__floatsidf>
c0009350:	83 c4 10             	add    esp,0x10
c0009353:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009357:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000935b:	52                   	push   edx
c000935c:	50                   	push   eax
c000935d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009365:	e8 76 d5 01 00       	call   c00268e0 <__muldf3>
c000936a:	5d                   	pop    ebp
c000936b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000936f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009373:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009376:	e8 c8 db 01 00       	call   c0026f43 <__floatsidf>
c000937b:	83 c4 10             	add    esp,0x10
c000937e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009382:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009386:	52                   	push   edx
c0009387:	50                   	push   eax
c0009388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	e8 2f d8 01 00       	call   c0026bc4 <__divdf3>
c0009395:	83 c4 10             	add    esp,0x10
c0009398:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000939c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b0:	e8 ae ce 01 00       	call   c0026263 <__adddf3>
c00093b5:	83 c4 10             	add    esp,0x10
c00093b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093c0:	31 ff                	xor    edi,edi
c00093c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093c5:	39 f8                	cmp    eax,edi
c00093c7:	0f 8e ac 00 00 00    	jle    c0009479 <linear_vari_process+0x681>
c00093cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00093cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093d2:	29 c1                	sub    ecx,eax
c00093d4:	89 c8                	mov    eax,ecx
c00093d6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093d9:	01 f8                	add    eax,edi
c00093db:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093df:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093e2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093ec:	51                   	push   ecx
c00093ed:	01 f8                	add    eax,edi
c00093ef:	51                   	push   ecx
c00093f0:	47                   	inc    edi
c00093f1:	55                   	push   ebp
c00093f2:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093f5:	e8 fe c7 01 00       	call   c0025bf8 <__subsf3>
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 d5 de 01 00       	call   c00272d7 <__extendsfdf2>
c0009402:	83 c4 10             	add    esp,0x10
c0009405:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009409:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000940d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009411:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009415:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009419:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941d:	e8 be d4 01 00       	call   c00268e0 <__muldf3>
c0009422:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000942d:	e8 a5 de 01 00       	call   c00272d7 <__extendsfdf2>
c0009432:	83 c4 10             	add    esp,0x10
c0009435:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009439:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000943d:	52                   	push   edx
c000943e:	50                   	push   eax
c000943f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009443:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009447:	e8 17 ce 01 00       	call   c0026263 <__adddf3>
c000944c:	5d                   	pop    ebp
c000944d:	59                   	pop    ecx
c000944e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009452:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009456:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945e:	e8 50 dd 01 00       	call   c00271b3 <__truncdfsf2>
c0009463:	83 c4 10             	add    esp,0x10
c0009466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000946a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000946e:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009471:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009474:	e9 49 ff ff ff       	jmp    c00093c2 <linear_vari_process+0x5ca>
c0009479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009481:	68 00 00 f0 3f       	push   0x3ff00000
c0009486:	6a 00                	push   0x0
c0009488:	e8 37 d7 01 00       	call   c0026bc4 <__divdf3>
c000948d:	83 c4 10             	add    esp,0x10
c0009490:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009494:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009498:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000949c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	e8 b6 cd 01 00       	call   c0026263 <__adddf3>
c00094ad:	59                   	pop    ecx
c00094ae:	5f                   	pop    edi
c00094af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bf:	e8 9c de 01 00       	call   c0027360 <lrint>
c00094c4:	83 ec 0c             	sub    esp,0xc
c00094c7:	50                   	push   eax
c00094c8:	e8 76 da 01 00       	call   c0026f43 <__floatsidf>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094d8:	52                   	push   edx
c00094d9:	50                   	push   eax
c00094da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094e2:	e8 cd d3 01 00       	call   c00268b4 <__subdf3>
c00094e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094ef:	83 c4 20             	add    esp,0x20
c00094f2:	6a 00                	push   0x0
c00094f4:	6a 00                	push   0x0
c00094f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fe:	e8 ac dc 01 00       	call   c00271af <__ltdf2>
c0009503:	83 c4 10             	add    esp,0x10
c0009506:	85 c0                	test   eax,eax
c0009508:	79 1e                	jns    c0009528 <linear_vari_process+0x730>
c000950a:	68 00 00 f0 3f       	push   0x3ff00000
c000950f:	6a 00                	push   0x0
c0009511:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009515:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009519:	e8 45 cd 01 00       	call   c0026263 <__adddf3>
c000951e:	83 c4 10             	add    esp,0x10
c0009521:	89 04 24             	mov    DWORD PTR [esp],eax
c0009524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009528:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000952b:	83 ec 10             	sub    esp,0x10
c000952e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009532:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953e:	e8 71 d3 01 00       	call   c00268b4 <__subdf3>
c0009543:	e9 bc fc ff ff       	jmp    c0009204 <linear_vari_process+0x40c>
c0009548:	39 fd                	cmp    ebp,edi
c000954a:	7d 38                	jge    c0009584 <linear_vari_process+0x78c>
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	89 f8                	mov    eax,edi
c0009551:	29 e8                	sub    eax,ebp
c0009553:	99                   	cdq    
c0009554:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009557:	50                   	push   eax
c0009558:	e8 e6 d9 01 00       	call   c0026f43 <__floatsidf>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009564:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009568:	52                   	push   edx
c0009569:	50                   	push   eax
c000956a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000956e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009572:	e8 ec cc 01 00       	call   c0026263 <__adddf3>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000957d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009580:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009584:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009588:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000958b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000958f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009592:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009595:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009598:	85 c0                	test   eax,eax
c000959a:	7f 29                	jg     c00095c5 <linear_vari_process+0x7cd>
c000959c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00095a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00095a8:	89 01                	mov    DWORD PTR [ecx],eax
c00095aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00095ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095b0:	99                   	cdq    
c00095b1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095b4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095ba:	99                   	cdq    
c00095bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095be:	31 d2                	xor    edx,edx
c00095c0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095c3:	eb 1d                	jmp    c00095e2 <linear_vari_process+0x7ea>
c00095c5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095c8:	31 d2                	xor    edx,edx
c00095ca:	29 c8                	sub    eax,ecx
c00095cc:	c1 e0 02             	shl    eax,0x2
c00095cf:	39 d1                	cmp    ecx,edx
c00095d1:	7e c9                	jle    c000959c <linear_vari_process+0x7a4>
c00095d3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095d5:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095d8:	83 c0 04             	add    eax,0x4
c00095db:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095df:	42                   	inc    edx
c00095e0:	eb ed                	jmp    c00095cf <linear_vari_process+0x7d7>
c00095e2:	83 c4 3c             	add    esp,0x3c
c00095e5:	89 d0                	mov    eax,edx
c00095e7:	5b                   	pop    ebx
c00095e8:	5e                   	pop    esi
c00095e9:	5f                   	pop    edi
c00095ea:	5d                   	pop    ebp
c00095eb:	c3                   	ret    

c00095ec <linear_reset>:
c00095ec:	83 ec 0c             	sub    esp,0xc
c00095ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095f3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095f6:	85 c0                	test   eax,eax
c00095f8:	74 20                	je     c000961a <linear_reset+0x2e>
c00095fa:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095fd:	83 c0 1c             	add    eax,0x1c
c0009600:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009603:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000960a:	c1 e2 02             	shl    edx,0x2
c000960d:	51                   	push   ecx
c000960e:	52                   	push   edx
c000960f:	6a 00                	push   0x0
c0009611:	50                   	push   eax
c0009612:	e8 ad 70 ff ff       	call   c00006c4 <memset>
c0009617:	83 c4 10             	add    esp,0x10
c000961a:	83 c4 0c             	add    esp,0xc
c000961d:	c3                   	ret    

c000961e <linear_get_name>:
c000961e:	31 c0                	xor    eax,eax
c0009620:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009625:	75 05                	jne    c000962c <linear_get_name+0xe>
c0009627:	b8 60 8a 02 c0       	mov    eax,0xc0028a60
c000962c:	c3                   	ret    

c000962d <linear_get_description>:
c000962d:	31 c0                	xor    eax,eax
c000962f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009634:	75 05                	jne    c000963b <linear_get_description+0xe>
c0009636:	b8 74 8a 02 c0       	mov    eax,0xc0028a74
c000963b:	c3                   	ret    

c000963c <linear_set_converter>:
c000963c:	53                   	push   ebx
c000963d:	b8 0a 00 00 00       	mov    eax,0xa
c0009642:	83 ec 08             	sub    esp,0x8
c0009645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009649:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000964e:	75 6e                	jne    c00096be <linear_set_converter+0x82>
c0009650:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009653:	85 c0                	test   eax,eax
c0009655:	74 13                	je     c000966a <linear_set_converter+0x2e>
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	50                   	push   eax
c000965b:	e8 d4 5f 00 00       	call   c000f634 <free>
c0009660:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	50                   	push   eax
c000966b:	50                   	push   eax
c000966c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000966f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009676:	50                   	push   eax
c0009677:	6a 01                	push   0x1
c0009679:	e8 d6 5f 00 00       	call   c000f654 <calloc>
c000967e:	83 c4 10             	add    esp,0x10
c0009681:	89 c2                	mov    edx,eax
c0009683:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009686:	85 d2                	test   edx,edx
c0009688:	b8 01 00 00 00       	mov    eax,0x1
c000968d:	74 2f                	je     c00096be <linear_set_converter+0x82>
c000968f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009698:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000969e:	c7 43 24 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008df8
c00096a5:	c7 43 20 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008df8
c00096ac:	c7 43 28 ec 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095ec
c00096b3:	53                   	push   ebx
c00096b4:	e8 33 ff ff ff       	call   c00095ec <linear_reset>
c00096b9:	83 c4 10             	add    esp,0x10
c00096bc:	31 c0                	xor    eax,eax
c00096be:	83 c4 08             	add    esp,0x8
c00096c1:	5b                   	pop    ebx
c00096c2:	c3                   	ret    

c00096c3 <int_to_fp>:
c00096c3:	c1 e0 0c             	shl    eax,0xc
c00096c6:	c3                   	ret    

c00096c7 <fp_to_int>:
c00096c7:	c1 f8 0c             	sar    eax,0xc
c00096ca:	c3                   	ret    

c00096cb <fp_fraction_part>:
c00096cb:	25 ff 0f 00 00       	and    eax,0xfff
c00096d0:	c3                   	ret    

c00096d1 <fp_to_double>:
c00096d1:	83 ec 1c             	sub    esp,0x1c
c00096d4:	e8 f2 ff ff ff       	call   c00096cb <fp_fraction_part>
c00096d9:	83 ec 0c             	sub    esp,0xc
c00096dc:	50                   	push   eax
c00096dd:	e8 61 d8 01 00       	call   c0026f43 <__floatsidf>
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096ed:	68 00 00 30 3f       	push   0x3f300000
c00096f2:	6a 00                	push   0x0
c00096f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fc:	e8 df d1 01 00       	call   c00268e0 <__muldf3>
c0009701:	83 c4 2c             	add    esp,0x2c
c0009704:	c3                   	ret    

c0009705 <calc_output_single>:
c0009705:	55                   	push   ebp
c0009706:	57                   	push   edi
c0009707:	56                   	push   esi
c0009708:	89 c6                	mov    esi,eax
c000970a:	53                   	push   ebx
c000970b:	89 d3                	mov    ebx,edx
c000970d:	83 ec 4c             	sub    esp,0x4c
c0009710:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009714:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009717:	e8 a7 ff ff ff       	call   c00096c3 <int_to_fp>
c000971c:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000971f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009723:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009727:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000972b:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000972e:	99                   	cdq    
c000972f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009737:	f7 fb                	idiv   ebx
c0009739:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009741:	89 da                	mov    edx,ebx
c0009743:	0f af d0             	imul   edx,eax
c0009746:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000974a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000974e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009752:	29 c2                	sub    edx,eax
c0009754:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000975b:	83 c5 04             	add    ebp,0x4
c000975e:	e8 6e ff ff ff       	call   c00096d1 <fp_to_double>
c0009763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000976b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000976f:	e8 53 ff ff ff       	call   c00096c7 <fp_to_int>
c0009774:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009777:	52                   	push   edx
c0009778:	52                   	push   edx
c0009779:	51                   	push   ecx
c000977a:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000977e:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009782:	e8 71 c4 01 00       	call   c0025bf8 <__subsf3>
c0009787:	89 04 24             	mov    DWORD PTR [esp],eax
c000978a:	e8 48 db 01 00       	call   c00272d7 <__extendsfdf2>
c000978f:	83 c4 10             	add    esp,0x10
c0009792:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009796:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000979a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000979e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097aa:	e8 31 d1 01 00       	call   c00268e0 <__muldf3>
c00097af:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097b3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097ba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097be:	e8 14 db 01 00       	call   c00272d7 <__extendsfdf2>
c00097c3:	83 c4 10             	add    esp,0x10
c00097c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097ce:	52                   	push   edx
c00097cf:	50                   	push   eax
c00097d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d8:	e8 86 ca 01 00       	call   c0026263 <__adddf3>
c00097dd:	59                   	pop    ecx
c00097de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097e6:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097ec:	e8 e6 da 01 00       	call   c00272d7 <__extendsfdf2>
c00097f1:	83 c4 10             	add    esp,0x10
c00097f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097fc:	52                   	push   edx
c00097fd:	50                   	push   eax
c00097fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009802:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009806:	e8 d5 d0 01 00       	call   c00268e0 <__muldf3>
c000980b:	83 c4 10             	add    esp,0x10
c000980e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009812:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009816:	52                   	push   edx
c0009817:	50                   	push   eax
c0009818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000981c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009820:	e8 3e ca 01 00       	call   c0026263 <__adddf3>
c0009825:	83 c4 10             	add    esp,0x10
c0009828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000982c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009830:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009834:	0f 89 1d ff ff ff    	jns    c0009757 <calc_output_single+0x52>
c000983a:	89 d9                	mov    ecx,ebx
c000983c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009840:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009844:	89 dd                	mov    ebp,ebx
c0009846:	29 c8                	sub    eax,ecx
c0009848:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009850:	99                   	cdq    
c0009851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009859:	f7 fb                	idiv   ebx
c000985b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000985f:	0f af e8             	imul   ebp,eax
c0009862:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009866:	01 cd                	add    ebp,ecx
c0009868:	8d 34 86             	lea    esi,[esi+eax*4]
c000986b:	89 e8                	mov    eax,ebp
c000986d:	83 ee 04             	sub    esi,0x4
c0009870:	e8 5c fe ff ff       	call   c00096d1 <fp_to_double>
c0009875:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009879:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000987d:	89 e8                	mov    eax,ebp
c000987f:	29 dd                	sub    ebp,ebx
c0009881:	e8 41 fe ff ff       	call   c00096c7 <fp_to_int>
c0009886:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009889:	52                   	push   edx
c000988a:	52                   	push   edx
c000988b:	51                   	push   ecx
c000988c:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009890:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009894:	e8 5f c3 01 00       	call   c0025bf8 <__subsf3>
c0009899:	89 04 24             	mov    DWORD PTR [esp],eax
c000989c:	e8 36 da 01 00       	call   c00272d7 <__extendsfdf2>
c00098a1:	83 c4 10             	add    esp,0x10
c00098a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098bc:	e8 1f d0 01 00       	call   c00268e0 <__muldf3>
c00098c1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098d0:	e8 02 da 01 00       	call   c00272d7 <__extendsfdf2>
c00098d5:	83 c4 10             	add    esp,0x10
c00098d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098e0:	52                   	push   edx
c00098e1:	50                   	push   eax
c00098e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ea:	e8 74 c9 01 00       	call   c0026263 <__adddf3>
c00098ef:	59                   	pop    ecx
c00098f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098f4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098f8:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098fe:	e8 d4 d9 01 00       	call   c00272d7 <__extendsfdf2>
c0009903:	83 c4 10             	add    esp,0x10
c0009906:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000990a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000990e:	52                   	push   edx
c000990f:	50                   	push   eax
c0009910:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009914:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009918:	e8 c3 cf 01 00       	call   c00268e0 <__muldf3>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009924:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009928:	52                   	push   edx
c0009929:	50                   	push   eax
c000992a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000992e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009932:	e8 2c c9 01 00       	call   c0026263 <__adddf3>
c0009937:	83 c4 10             	add    esp,0x10
c000993a:	85 ed                	test   ebp,ebp
c000993c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009940:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009944:	0f 8f 21 ff ff ff    	jg     c000986b <calc_output_single+0x166>
c000994a:	52                   	push   edx
c000994b:	50                   	push   eax
c000994c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009950:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009954:	e8 0a c9 01 00       	call   c0026263 <__adddf3>
c0009959:	83 c4 5c             	add    esp,0x5c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    

c0009961 <calc_output_stereo>:
c0009961:	55                   	push   ebp
c0009962:	89 cd                	mov    ebp,ecx
c0009964:	57                   	push   edi
c0009965:	56                   	push   esi
c0009966:	53                   	push   ebx
c0009967:	89 c3                	mov    ebx,eax
c0009969:	83 ec 6c             	sub    esp,0x6c
c000996c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009970:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009977:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000997e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009982:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009986:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009989:	e8 35 fd ff ff       	call   c00096c3 <int_to_fp>
c000998e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009996:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000999a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099a2:	29 c8                	sub    eax,ecx
c00099a4:	99                   	cdq    
c00099a5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099ad:	0f af d0             	imul   edx,eax
c00099b0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099b3:	31 d2                	xor    edx,edx
c00099b5:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099bd:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099c0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099c4:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099cb:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099cf:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099d7:	29 c1                	sub    ecx,eax
c00099d9:	31 c0                	xor    eax,eax
c00099db:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099e6:	83 c7 08             	add    edi,0x8
c00099e9:	e8 e3 fc ff ff       	call   c00096d1 <fp_to_double>
c00099ee:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099fa:	e8 c8 fc ff ff       	call   c00096c7 <fp_to_int>
c00099ff:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a02:	52                   	push   edx
c0009a03:	52                   	push   edx
c0009a04:	51                   	push   ecx
c0009a05:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a09:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a0d:	e8 e6 c1 01 00       	call   c0025bf8 <__subsf3>
c0009a12:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a15:	e8 bd d8 01 00       	call   c00272d7 <__extendsfdf2>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a21:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a35:	e8 a6 ce 01 00       	call   c00268e0 <__muldf3>
c0009a3a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a3e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a49:	e8 89 d8 01 00       	call   c00272d7 <__extendsfdf2>
c0009a4e:	83 c4 10             	add    esp,0x10
c0009a51:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a55:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a59:	52                   	push   edx
c0009a5a:	50                   	push   eax
c0009a5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a5f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a63:	e8 fb c7 01 00       	call   c0026263 <__adddf3>
c0009a68:	59                   	pop    ecx
c0009a69:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a6d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a71:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a77:	e8 5b d8 01 00       	call   c00272d7 <__extendsfdf2>
c0009a7c:	83 c4 10             	add    esp,0x10
c0009a7f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a83:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a93:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a97:	e8 44 ce 01 00       	call   c00268e0 <__muldf3>
c0009a9c:	83 c4 10             	add    esp,0x10
c0009a9f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aa3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aa7:	52                   	push   edx
c0009aa8:	50                   	push   eax
c0009aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ab1:	e8 ad c7 01 00       	call   c0026263 <__adddf3>
c0009ab6:	59                   	pop    ecx
c0009ab7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009abb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009abf:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ac5:	e8 0d d8 01 00       	call   c00272d7 <__extendsfdf2>
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ad9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009add:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae5:	e8 f6 cd 01 00       	call   c00268e0 <__muldf3>
c0009aea:	83 c4 10             	add    esp,0x10
c0009aed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009af1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009af5:	52                   	push   edx
c0009af6:	50                   	push   eax
c0009af7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009afb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009aff:	e8 5f c7 01 00       	call   c0026263 <__adddf3>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b13:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b17:	0f 89 c5 fe ff ff    	jns    c00099e2 <calc_output_stereo+0x81>
c0009b1d:	29 e9                	sub    ecx,ebp
c0009b1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b27:	29 c8                	sub    eax,ecx
c0009b29:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b31:	99                   	cdq    
c0009b32:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b36:	31 d2                	xor    edx,edx
c0009b38:	0f af f8             	imul   edi,eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	40                   	inc    eax
c0009b40:	01 cf                	add    edi,ecx
c0009b42:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b47:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b4b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b53:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b56:	31 c0                	xor    eax,eax
c0009b58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5c:	89 f8                	mov    eax,edi
c0009b5e:	83 eb 08             	sub    ebx,0x8
c0009b61:	e8 6b fb ff ff       	call   c00096d1 <fp_to_double>
c0009b66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b6e:	89 f8                	mov    eax,edi
c0009b70:	e8 52 fb ff ff       	call   c00096c7 <fp_to_int>
c0009b75:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b78:	52                   	push   edx
c0009b79:	52                   	push   edx
c0009b7a:	55                   	push   ebp
c0009b7b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b7f:	e8 74 c0 01 00       	call   c0025bf8 <__subsf3>
c0009b84:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b87:	e8 4b d7 01 00       	call   c00272d7 <__extendsfdf2>
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba7:	e8 34 cd 01 00       	call   c00268e0 <__muldf3>
c0009bac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009baf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bb3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bb7:	e8 1b d7 01 00       	call   c00272d7 <__extendsfdf2>
c0009bbc:	83 c4 10             	add    esp,0x10
c0009bbf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bc7:	52                   	push   edx
c0009bc8:	50                   	push   eax
c0009bc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bd1:	e8 8d c6 01 00       	call   c0026263 <__adddf3>
c0009bd6:	59                   	pop    ecx
c0009bd7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bdb:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bdf:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009be5:	e8 ed d6 01 00       	call   c00272d7 <__extendsfdf2>
c0009bea:	83 c4 10             	add    esp,0x10
c0009bed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c05:	e8 d6 cc 01 00       	call   c00268e0 <__muldf3>
c0009c0a:	83 c4 10             	add    esp,0x10
c0009c0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c11:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c15:	52                   	push   edx
c0009c16:	50                   	push   eax
c0009c17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1f:	e8 3f c6 01 00       	call   c0026263 <__adddf3>
c0009c24:	5d                   	pop    ebp
c0009c25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c29:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c2d:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c33:	e8 9f d6 01 00       	call   c00272d7 <__extendsfdf2>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c53:	e8 88 cc 01 00       	call   c00268e0 <__muldf3>
c0009c58:	83 c4 10             	add    esp,0x10
c0009c5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c63:	52                   	push   edx
c0009c64:	50                   	push   eax
c0009c65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c6d:	e8 f1 c5 01 00       	call   c0026263 <__adddf3>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c81:	85 ff                	test   edi,edi
c0009c83:	0f 8f d3 fe ff ff    	jg     c0009b5c <calc_output_stereo+0x1fb>
c0009c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c99:	e8 c5 c5 01 00       	call   c0026263 <__adddf3>
c0009c9e:	83 c4 10             	add    esp,0x10
c0009ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ca5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ca9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb9:	e8 22 cc 01 00       	call   c00268e0 <__muldf3>
c0009cbe:	59                   	pop    ecx
c0009cbf:	5b                   	pop    ebx
c0009cc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd0:	e8 de d4 01 00       	call   c00271b3 <__truncdfsf2>
c0009cd5:	83 c4 10             	add    esp,0x10
c0009cd8:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cdf:	89 03                	mov    DWORD PTR [ebx],eax
c0009ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf1:	e8 6d c5 01 00       	call   c0026263 <__adddf3>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d11:	e8 ca cb 01 00       	call   c00268e0 <__muldf3>
c0009d16:	5e                   	pop    esi
c0009d17:	5f                   	pop    edi
c0009d18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d28:	e8 86 d4 01 00       	call   c00271b3 <__truncdfsf2>
c0009d2d:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d34:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d37:	83 c4 7c             	add    esp,0x7c
c0009d3a:	5b                   	pop    ebx
c0009d3b:	5e                   	pop    esi
c0009d3c:	5f                   	pop    edi
c0009d3d:	5d                   	pop    ebp
c0009d3e:	c3                   	ret    

c0009d3f <calc_output_quad>:
c0009d3f:	55                   	push   ebp
c0009d40:	57                   	push   edi
c0009d41:	56                   	push   esi
c0009d42:	89 c6                	mov    esi,eax
c0009d44:	53                   	push   ebx
c0009d45:	83 ec 7c             	sub    esp,0x7c
c0009d48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d4c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d50:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d57:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d66:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d69:	e8 55 f9 ff ff       	call   c00096c3 <int_to_fp>
c0009d6e:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d71:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d74:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d78:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d7c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d80:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d84:	99                   	cdq    
c0009d85:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d89:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d8d:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d90:	31 d2                	xor    edx,edx
c0009d92:	0f af d8             	imul   ebx,eax
c0009d95:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d9d:	0f af c7             	imul   eax,edi
c0009da0:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009da4:	29 c1                	sub    ecx,eax
c0009da6:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009dae:	31 c0                	xor    eax,eax
c0009db0:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009db3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009db7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009dbb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dcb:	89 d8                	mov    eax,ebx
c0009dcd:	83 c7 10             	add    edi,0x10
c0009dd0:	e8 fc f8 ff ff       	call   c00096d1 <fp_to_double>
c0009dd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ddd:	89 d8                	mov    eax,ebx
c0009ddf:	e8 e3 f8 ff ff       	call   c00096c7 <fp_to_int>
c0009de4:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009de8:	52                   	push   edx
c0009de9:	52                   	push   edx
c0009dea:	51                   	push   ecx
c0009deb:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009def:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009df3:	e8 00 be 01 00       	call   c0025bf8 <__subsf3>
c0009df8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dfb:	e8 d7 d4 01 00       	call   c00272d7 <__extendsfdf2>
c0009e00:	83 c4 10             	add    esp,0x10
c0009e03:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e07:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e13:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e1b:	e8 c0 ca 01 00       	call   c00268e0 <__muldf3>
c0009e20:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e28:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e2f:	e8 a3 d4 01 00       	call   c00272d7 <__extendsfdf2>
c0009e34:	83 c4 10             	add    esp,0x10
c0009e37:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e3b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e3f:	52                   	push   edx
c0009e40:	50                   	push   eax
c0009e41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e49:	e8 15 c4 01 00       	call   c0026263 <__adddf3>
c0009e4e:	59                   	pop    ecx
c0009e4f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e53:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e57:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e5d:	e8 75 d4 01 00       	call   c00272d7 <__extendsfdf2>
c0009e62:	83 c4 10             	add    esp,0x10
c0009e65:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e69:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e79:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e7d:	e8 5e ca 01 00       	call   c00268e0 <__muldf3>
c0009e82:	83 c4 10             	add    esp,0x10
c0009e85:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e89:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e8d:	52                   	push   edx
c0009e8e:	50                   	push   eax
c0009e8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e97:	e8 c7 c3 01 00       	call   c0026263 <__adddf3>
c0009e9c:	59                   	pop    ecx
c0009e9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ea5:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009eab:	e8 27 d4 01 00       	call   c00272d7 <__extendsfdf2>
c0009eb0:	83 c4 10             	add    esp,0x10
c0009eb3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecb:	e8 10 ca 01 00       	call   c00268e0 <__muldf3>
c0009ed0:	83 c4 10             	add    esp,0x10
c0009ed3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ed7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009edb:	52                   	push   edx
c0009edc:	50                   	push   eax
c0009edd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee5:	e8 79 c3 01 00       	call   c0026263 <__adddf3>
c0009eea:	59                   	pop    ecx
c0009eeb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eef:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009ef3:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ef9:	e8 d9 d3 01 00       	call   c00272d7 <__extendsfdf2>
c0009efe:	83 c4 10             	add    esp,0x10
c0009f01:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f05:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f11:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f15:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f19:	e8 c2 c9 01 00       	call   c00268e0 <__muldf3>
c0009f1e:	83 c4 10             	add    esp,0x10
c0009f21:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f25:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f29:	52                   	push   edx
c0009f2a:	50                   	push   eax
c0009f2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f33:	e8 2b c3 01 00       	call   c0026263 <__adddf3>
c0009f38:	59                   	pop    ecx
c0009f39:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f3d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f41:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f47:	e8 8b d3 01 00       	call   c00272d7 <__extendsfdf2>
c0009f4c:	83 c4 10             	add    esp,0x10
c0009f4f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f53:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f63:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f67:	e8 74 c9 01 00       	call   c00268e0 <__muldf3>
c0009f6c:	83 c4 10             	add    esp,0x10
c0009f6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f77:	52                   	push   edx
c0009f78:	50                   	push   eax
c0009f79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f81:	e8 dd c2 01 00       	call   c0026263 <__adddf3>
c0009f86:	83 c4 10             	add    esp,0x10
c0009f89:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f8d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f91:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f95:	0f 89 30 fe ff ff    	jns    c0009dcb <calc_output_quad+0x8c>
c0009f9b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fa7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fab:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fb3:	29 c8                	sub    eax,ecx
c0009fb5:	99                   	cdq    
c0009fb6:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fba:	31 d2                	xor    edx,edx
c0009fbc:	0f af d8             	imul   ebx,eax
c0009fbf:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009fc3:	40                   	inc    eax
c0009fc4:	01 cb                	add    ebx,ecx
c0009fc6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fcf:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fd7:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fda:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fe2:	31 c0                	xor    eax,eax
c0009fe4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fe8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ff0:	89 d8                	mov    eax,ebx
c0009ff2:	83 ee 10             	sub    esi,0x10
c0009ff5:	e8 d7 f6 ff ff       	call   c00096d1 <fp_to_double>
c0009ffa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a002:	89 d8                	mov    eax,ebx
c000a004:	e8 be f6 ff ff       	call   c00096c7 <fp_to_int>
c000a009:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a00d:	52                   	push   edx
c000a00e:	52                   	push   edx
c000a00f:	57                   	push   edi
c000a010:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a014:	e8 df bb 01 00       	call   c0025bf8 <__subsf3>
c000a019:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01c:	e8 b6 d2 01 00       	call   c00272d7 <__extendsfdf2>
c000a021:	83 c4 10             	add    esp,0x10
c000a024:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a028:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a034:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a038:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03c:	e8 9f c8 01 00       	call   c00268e0 <__muldf3>
c000a041:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a044:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a048:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04c:	e8 86 d2 01 00       	call   c00272d7 <__extendsfdf2>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a058:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05c:	52                   	push   edx
c000a05d:	50                   	push   eax
c000a05e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a066:	e8 f8 c1 01 00       	call   c0026263 <__adddf3>
c000a06b:	59                   	pop    ecx
c000a06c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a070:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a074:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a07a:	e8 58 d2 01 00       	call   c00272d7 <__extendsfdf2>
c000a07f:	83 c4 10             	add    esp,0x10
c000a082:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a086:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a092:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a096:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09a:	e8 41 c8 01 00       	call   c00268e0 <__muldf3>
c000a09f:	83 c4 10             	add    esp,0x10
c000a0a2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0aa:	52                   	push   edx
c000a0ab:	50                   	push   eax
c000a0ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b4:	e8 aa c1 01 00       	call   c0026263 <__adddf3>
c000a0b9:	5f                   	pop    edi
c000a0ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0c2:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0c8:	e8 0a d2 01 00       	call   c00272d7 <__extendsfdf2>
c000a0cd:	83 c4 10             	add    esp,0x10
c000a0d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e8:	e8 f3 c7 01 00       	call   c00268e0 <__muldf3>
c000a0ed:	83 c4 10             	add    esp,0x10
c000a0f0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f8:	52                   	push   edx
c000a0f9:	50                   	push   eax
c000a0fa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0fe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a102:	e8 5c c1 01 00       	call   c0026263 <__adddf3>
c000a107:	59                   	pop    ecx
c000a108:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a10c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a110:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a116:	e8 bc d1 01 00       	call   c00272d7 <__extendsfdf2>
c000a11b:	83 c4 10             	add    esp,0x10
c000a11e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a122:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a132:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a136:	e8 a5 c7 01 00       	call   c00268e0 <__muldf3>
c000a13b:	83 c4 10             	add    esp,0x10
c000a13e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a142:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a146:	52                   	push   edx
c000a147:	50                   	push   eax
c000a148:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a14c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a150:	e8 0e c1 01 00       	call   c0026263 <__adddf3>
c000a155:	5f                   	pop    edi
c000a156:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a15a:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a15e:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a164:	e8 6e d1 01 00       	call   c00272d7 <__extendsfdf2>
c000a169:	83 c4 10             	add    esp,0x10
c000a16c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a170:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a180:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a184:	e8 57 c7 01 00       	call   c00268e0 <__muldf3>
c000a189:	83 c4 10             	add    esp,0x10
c000a18c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a190:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a194:	52                   	push   edx
c000a195:	50                   	push   eax
c000a196:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19e:	e8 c0 c0 01 00       	call   c0026263 <__adddf3>
c000a1a3:	83 c4 10             	add    esp,0x10
c000a1a6:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1aa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1ae:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1b2:	85 db                	test   ebx,ebx
c000a1b4:	0f 8f 36 fe ff ff    	jg     c0009ff0 <calc_output_quad+0x2b1>
c000a1ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ca:	e8 94 c0 01 00       	call   c0026263 <__adddf3>
c000a1cf:	83 c4 10             	add    esp,0x10
c000a1d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ea:	e8 f1 c6 01 00       	call   c00268e0 <__muldf3>
c000a1ef:	59                   	pop    ecx
c000a1f0:	5b                   	pop    ebx
c000a1f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	e8 ad cf 01 00       	call   c00271b3 <__truncdfsf2>
c000a206:	83 c4 10             	add    esp,0x10
c000a209:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a210:	89 06                	mov    DWORD PTR [esi],eax
c000a212:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a216:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a21a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a21e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a222:	e8 3c c0 01 00       	call   c0026263 <__adddf3>
c000a227:	83 c4 10             	add    esp,0x10
c000a22a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a22e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a242:	e8 99 c6 01 00       	call   c00268e0 <__muldf3>
c000a247:	5e                   	pop    esi
c000a248:	5f                   	pop    edi
c000a249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a24d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a255:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a259:	e8 55 cf 01 00       	call   c00271b3 <__truncdfsf2>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a268:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a26b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a26f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a273:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a277:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a27b:	e8 e3 bf 01 00       	call   c0026263 <__adddf3>
c000a280:	83 c4 10             	add    esp,0x10
c000a283:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a287:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a293:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a297:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a29b:	e8 40 c6 01 00       	call   c00268e0 <__muldf3>
c000a2a0:	5d                   	pop    ebp
c000a2a1:	59                   	pop    ecx
c000a2a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b2:	e8 fc ce 01 00       	call   c00271b3 <__truncdfsf2>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2c1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d4:	e8 8a bf 01 00       	call   c0026263 <__adddf3>
c000a2d9:	83 c4 10             	add    esp,0x10
c000a2dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f4:	e8 e7 c5 01 00       	call   c00268e0 <__muldf3>
c000a2f9:	5b                   	pop    ebx
c000a2fa:	5e                   	pop    esi
c000a2fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2ff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a303:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a307:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a30b:	e8 a3 ce 01 00       	call   c00271b3 <__truncdfsf2>
c000a310:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a317:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a31a:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a320:	5b                   	pop    ebx
c000a321:	5e                   	pop    esi
c000a322:	5f                   	pop    edi
c000a323:	5d                   	pop    ebp
c000a324:	c3                   	ret    

c000a325 <calc_output_hex>:
c000a325:	55                   	push   ebp
c000a326:	89 cd                	mov    ebp,ecx
c000a328:	57                   	push   edi
c000a329:	56                   	push   esi
c000a32a:	53                   	push   ebx
c000a32b:	89 c3                	mov    ebx,eax
c000a32d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a333:	89 14 24             	mov    DWORD PTR [esp],edx
c000a336:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a33d:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a344:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a348:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a34c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a34f:	e8 6f f3 ff ff       	call   c00096c3 <int_to_fp>
c000a354:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a357:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a35b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a35e:	29 c8                	sub    eax,ecx
c000a360:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a364:	99                   	cdq    
c000a365:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a36d:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a370:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a378:	0f af f8             	imul   edi,eax
c000a37b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a37e:	01 cf                	add    edi,ecx
c000a380:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a384:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a387:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a38b:	0f af c2             	imul   eax,edx
c000a38e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a392:	29 c1                	sub    ecx,eax
c000a394:	31 d2                	xor    edx,edx
c000a396:	31 c0                	xor    eax,eax
c000a398:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3c3:	89 f8                	mov    eax,edi
c000a3c5:	e8 07 f3 ff ff       	call   c00096d1 <fp_to_double>
c000a3ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d2:	89 f8                	mov    eax,edi
c000a3d4:	e8 ee f2 ff ff       	call   c00096c7 <fp_to_int>
c000a3d9:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3dd:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3e0:	52                   	push   edx
c000a3e1:	52                   	push   edx
c000a3e2:	51                   	push   ecx
c000a3e3:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3e7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3ee:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3f2:	e8 01 b8 01 00       	call   c0025bf8 <__subsf3>
c000a3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3fa:	e8 d8 ce 01 00       	call   c00272d7 <__extendsfdf2>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a406:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a40e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a412:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a416:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a41a:	e8 c1 c4 01 00       	call   c00268e0 <__muldf3>
c000a41f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a423:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a427:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a42a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a42e:	e8 a4 ce 01 00       	call   c00272d7 <__extendsfdf2>
c000a433:	83 c4 10             	add    esp,0x10
c000a436:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43e:	52                   	push   edx
c000a43f:	50                   	push   eax
c000a440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a448:	e8 16 be 01 00       	call   c0026263 <__adddf3>
c000a44d:	59                   	pop    ecx
c000a44e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a452:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a456:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a45c:	e8 76 ce 01 00       	call   c00272d7 <__extendsfdf2>
c000a461:	83 c4 10             	add    esp,0x10
c000a464:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a468:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a478:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47c:	e8 5f c4 01 00       	call   c00268e0 <__muldf3>
c000a481:	83 c4 10             	add    esp,0x10
c000a484:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a488:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a48c:	52                   	push   edx
c000a48d:	50                   	push   eax
c000a48e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a496:	e8 c8 bd 01 00       	call   c0026263 <__adddf3>
c000a49b:	59                   	pop    ecx
c000a49c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4a0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4a4:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4aa:	e8 28 ce 01 00       	call   c00272d7 <__extendsfdf2>
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ca:	e8 11 c4 01 00       	call   c00268e0 <__muldf3>
c000a4cf:	83 c4 10             	add    esp,0x10
c000a4d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4da:	52                   	push   edx
c000a4db:	50                   	push   eax
c000a4dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e4:	e8 7a bd 01 00       	call   c0026263 <__adddf3>
c000a4e9:	59                   	pop    ecx
c000a4ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4ee:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4f2:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4f8:	e8 da cd 01 00       	call   c00272d7 <__extendsfdf2>
c000a4fd:	83 c4 10             	add    esp,0x10
c000a500:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a504:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a510:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a514:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a518:	e8 c3 c3 01 00       	call   c00268e0 <__muldf3>
c000a51d:	83 c4 10             	add    esp,0x10
c000a520:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a524:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a528:	52                   	push   edx
c000a529:	50                   	push   eax
c000a52a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a52e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a532:	e8 2c bd 01 00       	call   c0026263 <__adddf3>
c000a537:	59                   	pop    ecx
c000a538:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a53c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a540:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a546:	e8 8c cd 01 00       	call   c00272d7 <__extendsfdf2>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a552:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a562:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a566:	e8 75 c3 01 00       	call   c00268e0 <__muldf3>
c000a56b:	83 c4 10             	add    esp,0x10
c000a56e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a572:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a576:	52                   	push   edx
c000a577:	50                   	push   eax
c000a578:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a57c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a580:	e8 de bc 01 00       	call   c0026263 <__adddf3>
c000a585:	59                   	pop    ecx
c000a586:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a58a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a58e:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a594:	e8 3e cd 01 00       	call   c00272d7 <__extendsfdf2>
c000a599:	83 c4 10             	add    esp,0x10
c000a59c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b4:	e8 27 c3 01 00       	call   c00268e0 <__muldf3>
c000a5b9:	83 c4 10             	add    esp,0x10
c000a5bc:	83 c6 18             	add    esi,0x18
c000a5bf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5c7:	52                   	push   edx
c000a5c8:	50                   	push   eax
c000a5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5d1:	e8 8d bc 01 00       	call   c0026263 <__adddf3>
c000a5d6:	59                   	pop    ecx
c000a5d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5df:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5e5:	e8 ed cc 01 00       	call   c00272d7 <__extendsfdf2>
c000a5ea:	83 c4 10             	add    esp,0x10
c000a5ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a601:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a605:	e8 d6 c2 01 00       	call   c00268e0 <__muldf3>
c000a60a:	83 c4 10             	add    esp,0x10
c000a60d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a611:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a615:	52                   	push   edx
c000a616:	50                   	push   eax
c000a617:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61f:	e8 3f bc 01 00       	call   c0026263 <__adddf3>
c000a624:	83 c4 10             	add    esp,0x10
c000a627:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a62b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a62f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a632:	0f 89 8b fd ff ff    	jns    c000a3c3 <calc_output_hex+0x9e>
c000a638:	31 f6                	xor    esi,esi
c000a63a:	31 ff                	xor    edi,edi
c000a63c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a640:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a643:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a647:	29 e9                	sub    ecx,ebp
c000a649:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a64d:	29 c8                	sub    eax,ecx
c000a64f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a652:	99                   	cdq    
c000a653:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a657:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a65a:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a65e:	0f af e8             	imul   ebp,eax
c000a661:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a665:	40                   	inc    eax
c000a666:	01 cd                	add    ebp,ecx
c000a668:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a66d:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a671:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a675:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a679:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a67c:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a680:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a684:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a688:	89 e8                	mov    eax,ebp
c000a68a:	e8 42 f0 ff ff       	call   c00096d1 <fp_to_double>
c000a68f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a693:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a697:	89 e8                	mov    eax,ebp
c000a699:	e8 29 f0 ff ff       	call   c00096c7 <fp_to_int>
c000a69e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6a2:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6a5:	52                   	push   edx
c000a6a6:	52                   	push   edx
c000a6a7:	51                   	push   ecx
c000a6a8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6af:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6b6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6ba:	e8 39 b5 01 00       	call   c0025bf8 <__subsf3>
c000a6bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6c2:	e8 10 cc 01 00       	call   c00272d7 <__extendsfdf2>
c000a6c7:	83 c4 10             	add    esp,0x10
c000a6ca:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ce:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6da:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6de:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6e2:	e8 f9 c1 01 00       	call   c00268e0 <__muldf3>
c000a6e7:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6f5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6f9:	e8 d9 cb 01 00       	call   c00272d7 <__extendsfdf2>
c000a6fe:	83 c4 10             	add    esp,0x10
c000a701:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a705:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a709:	52                   	push   edx
c000a70a:	50                   	push   eax
c000a70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a713:	e8 4b bb 01 00       	call   c0026263 <__adddf3>
c000a718:	59                   	pop    ecx
c000a719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a71d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a721:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a727:	e8 ab cb 01 00       	call   c00272d7 <__extendsfdf2>
c000a72c:	83 c4 10             	add    esp,0x10
c000a72f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a733:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a743:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a747:	e8 94 c1 01 00       	call   c00268e0 <__muldf3>
c000a74c:	83 c4 10             	add    esp,0x10
c000a74f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a753:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a757:	52                   	push   edx
c000a758:	50                   	push   eax
c000a759:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a75d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a761:	e8 fd ba 01 00       	call   c0026263 <__adddf3>
c000a766:	59                   	pop    ecx
c000a767:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a76b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a76f:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a775:	e8 5d cb 01 00       	call   c00272d7 <__extendsfdf2>
c000a77a:	83 c4 10             	add    esp,0x10
c000a77d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a781:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a791:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a795:	e8 46 c1 01 00       	call   c00268e0 <__muldf3>
c000a79a:	83 c4 10             	add    esp,0x10
c000a79d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7a5:	52                   	push   edx
c000a7a6:	50                   	push   eax
c000a7a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7af:	e8 af ba 01 00       	call   c0026263 <__adddf3>
c000a7b4:	59                   	pop    ecx
c000a7b5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7b9:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7bd:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7c3:	e8 0f cb 01 00       	call   c00272d7 <__extendsfdf2>
c000a7c8:	83 c4 10             	add    esp,0x10
c000a7cb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7cf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7db:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7df:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e3:	e8 f8 c0 01 00       	call   c00268e0 <__muldf3>
c000a7e8:	83 c4 10             	add    esp,0x10
c000a7eb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7ef:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f3:	52                   	push   edx
c000a7f4:	50                   	push   eax
c000a7f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fd:	e8 61 ba 01 00       	call   c0026263 <__adddf3>
c000a802:	59                   	pop    ecx
c000a803:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a807:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a80b:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a811:	e8 c1 ca 01 00       	call   c00272d7 <__extendsfdf2>
c000a816:	83 c4 10             	add    esp,0x10
c000a819:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a829:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a82d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a831:	e8 aa c0 01 00       	call   c00268e0 <__muldf3>
c000a836:	83 c4 10             	add    esp,0x10
c000a839:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a83d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a841:	52                   	push   edx
c000a842:	50                   	push   eax
c000a843:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a847:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a84b:	e8 13 ba 01 00       	call   c0026263 <__adddf3>
c000a850:	59                   	pop    ecx
c000a851:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a855:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a859:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a85f:	e8 73 ca 01 00       	call   c00272d7 <__extendsfdf2>
c000a864:	83 c4 10             	add    esp,0x10
c000a867:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a86f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a877:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87f:	e8 5c c0 01 00       	call   c00268e0 <__muldf3>
c000a884:	83 c4 10             	add    esp,0x10
c000a887:	83 eb 18             	sub    ebx,0x18
c000a88a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a88e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a892:	52                   	push   edx
c000a893:	50                   	push   eax
c000a894:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a898:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a89c:	e8 c2 b9 01 00       	call   c0026263 <__adddf3>
c000a8a1:	59                   	pop    ecx
c000a8a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8a6:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8aa:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8b0:	e8 22 ca 01 00       	call   c00272d7 <__extendsfdf2>
c000a8b5:	83 c4 10             	add    esp,0x10
c000a8b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8cc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d0:	e8 0b c0 01 00       	call   c00268e0 <__muldf3>
c000a8d5:	83 c4 10             	add    esp,0x10
c000a8d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8e0:	52                   	push   edx
c000a8e1:	50                   	push   eax
c000a8e2:	57                   	push   edi
c000a8e3:	56                   	push   esi
c000a8e4:	e8 7a b9 01 00       	call   c0026263 <__adddf3>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	89 c6                	mov    esi,eax
c000a8ee:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8f1:	89 d7                	mov    edi,edx
c000a8f3:	85 ed                	test   ebp,ebp
c000a8f5:	0f 8f 8d fd ff ff    	jg     c000a688 <calc_output_hex+0x363>
c000a8fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a903:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a907:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a90b:	e8 53 b9 01 00       	call   c0026263 <__adddf3>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 04 24             	mov    DWORD PTR [esp],eax
c000a916:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a91a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a922:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a926:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92a:	e8 b1 bf 01 00       	call   c00268e0 <__muldf3>
c000a92f:	59                   	pop    ecx
c000a930:	5b                   	pop    ebx
c000a931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a935:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a939:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a941:	e8 6d c8 01 00       	call   c00271b3 <__truncdfsf2>
c000a946:	83 c4 10             	add    esp,0x10
c000a949:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a950:	89 03                	mov    DWORD PTR [ebx],eax
c000a952:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a956:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a95a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a95e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a962:	e8 fc b8 01 00       	call   c0026263 <__adddf3>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a96d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a971:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a975:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a979:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a981:	e8 5a bf 01 00       	call   c00268e0 <__muldf3>
c000a986:	5d                   	pop    ebp
c000a987:	59                   	pop    ecx
c000a988:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a98c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	e8 16 c8 01 00       	call   c00271b3 <__truncdfsf2>
c000a99d:	83 c4 10             	add    esp,0x10
c000a9a0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9aa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9ae:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9b2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9b6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9ba:	e8 a4 b8 01 00       	call   c0026263 <__adddf3>
c000a9bf:	83 c4 10             	add    esp,0x10
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d9:	e8 02 bf 01 00       	call   c00268e0 <__muldf3>
c000a9de:	5b                   	pop    ebx
c000a9df:	5d                   	pop    ebp
c000a9e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	e8 be c7 01 00       	call   c00271b3 <__truncdfsf2>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9ff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa02:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa06:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa12:	e8 4c b8 01 00       	call   c0026263 <__adddf3>
c000aa17:	83 c4 10             	add    esp,0x10
c000aa1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa31:	e8 aa be 01 00       	call   c00268e0 <__muldf3>
c000aa36:	59                   	pop    ecx
c000aa37:	5b                   	pop    ebx
c000aa38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	e8 66 c7 01 00       	call   c00271b3 <__truncdfsf2>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa57:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa5a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa6a:	e8 f4 b7 01 00       	call   c0026263 <__adddf3>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa81:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa89:	e8 52 be 01 00       	call   c00268e0 <__muldf3>
c000aa8e:	5d                   	pop    ebp
c000aa8f:	59                   	pop    ecx
c000aa90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa0:	e8 0e c7 01 00       	call   c00271b3 <__truncdfsf2>
c000aaa5:	83 c4 10             	add    esp,0x10
c000aaa8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aab2:	57                   	push   edi
c000aab3:	56                   	push   esi
c000aab4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aab8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aabc:	e8 a2 b7 01 00       	call   c0026263 <__adddf3>
c000aac1:	83 c4 10             	add    esp,0x10
c000aac4:	89 04 24             	mov    DWORD PTR [esp],eax
c000aac7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aadb:	e8 00 be 01 00       	call   c00268e0 <__muldf3>
c000aae0:	5b                   	pop    ebx
c000aae1:	5e                   	pop    esi
c000aae2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf2:	e8 bc c6 01 00       	call   c00271b3 <__truncdfsf2>
c000aaf7:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aafe:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab01:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab07:	5b                   	pop    ebx
c000ab08:	5e                   	pop    esi
c000ab09:	5f                   	pop    edi
c000ab0a:	5d                   	pop    ebp
c000ab0b:	c3                   	ret    

c000ab0c <sinc_reset>:
c000ab0c:	56                   	push   esi
c000ab0d:	53                   	push   ebx
c000ab0e:	51                   	push   ecx
c000ab0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab13:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab16:	85 db                	test   ebx,ebx
c000ab18:	74 59                	je     c000ab73 <sinc_reset+0x67>
c000ab1a:	31 d2                	xor    edx,edx
c000ab1c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab23:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab26:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab29:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab30:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab37:	31 c0                	xor    eax,eax
c000ab39:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab3f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab42:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab45:	52                   	push   edx
c000ab46:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab49:	c1 e0 02             	shl    eax,0x2
c000ab4c:	50                   	push   eax
c000ab4d:	6a 00                	push   0x0
c000ab4f:	56                   	push   esi
c000ab50:	e8 6f 5b ff ff       	call   c00006c4 <memset>
c000ab55:	83 c4 0c             	add    esp,0xc
c000ab58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab5b:	c1 e0 02             	shl    eax,0x2
c000ab5e:	50                   	push   eax
c000ab5f:	68 aa 00 00 00       	push   0xaa
c000ab64:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab67:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab6a:	50                   	push   eax
c000ab6b:	e8 54 5b ff ff       	call   c00006c4 <memset>
c000ab70:	83 c4 10             	add    esp,0x10
c000ab73:	58                   	pop    eax
c000ab74:	5b                   	pop    ebx
c000ab75:	5e                   	pop    esi
c000ab76:	c3                   	ret    

c000ab77 <calc_output_multi>:
c000ab77:	55                   	push   ebp
c000ab78:	57                   	push   edi
c000ab79:	56                   	push   esi
c000ab7a:	89 c6                	mov    esi,eax
c000ab7c:	53                   	push   ebx
c000ab7d:	83 ec 4c             	sub    esp,0x4c
c000ab80:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab84:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab88:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab8c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab90:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab9c:	8d 46 44             	lea    eax,[esi+0x44]
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000aba8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abac:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abaf:	e8 0f eb ff ff       	call   c00096c3 <int_to_fp>
c000abb4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abb7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abbb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abbf:	99                   	cdq    
c000abc0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abc8:	0f af d0             	imul   edx,eax
c000abcb:	0f af c3             	imul   eax,ebx
c000abce:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abd2:	29 c1                	sub    ecx,eax
c000abd4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abdc:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abe3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abe7:	57                   	push   edi
c000abe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abec:	6a 00                	push   0x0
c000abee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf2:	e8 cd 5a ff ff       	call   c00006c4 <memset>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abfe:	89 df                	mov    edi,ebx
c000ac00:	e8 cc ea ff ff       	call   c00096d1 <fp_to_double>
c000ac05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac11:	e8 b1 ea ff ff       	call   c00096c7 <fp_to_int>
c000ac16:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac19:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac1c:	51                   	push   ecx
c000ac1d:	51                   	push   ecx
c000ac1e:	55                   	push   ebp
c000ac1f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac23:	e8 d0 af 01 00       	call   c0025bf8 <__subsf3>
c000ac28:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac2b:	e8 a7 c6 01 00       	call   c00272d7 <__extendsfdf2>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac4b:	e8 90 bc 01 00       	call   c00268e0 <__muldf3>
c000ac50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac5b:	e8 77 c6 01 00       	call   c00272d7 <__extendsfdf2>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac6b:	52                   	push   edx
c000ac6c:	50                   	push   eax
c000ac6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac75:	e8 e9 b5 01 00       	call   c0026263 <__adddf3>
c000ac7a:	83 c4 10             	add    esp,0x10
c000ac7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac81:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac85:	89 f8                	mov    eax,edi
c000ac87:	b9 08 00 00 00       	mov    ecx,0x8
c000ac8c:	99                   	cdq    
c000ac8d:	f7 f9                	idiv   ecx
c000ac8f:	4a                   	dec    edx
c000ac90:	83 fa 06             	cmp    edx,0x6
c000ac93:	77 07                	ja     c000ac9c <calc_output_multi+0x125>
c000ac95:	ff 24 95 a4 8a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd755c]
c000ac9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac9f:	4f                   	dec    edi
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aca6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acaa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acb1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acb5:	e8 1d c6 01 00       	call   c00272d7 <__extendsfdf2>
c000acba:	83 c4 10             	add    esp,0x10
c000acbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acc1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000accd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd5:	e8 06 bc 01 00       	call   c00268e0 <__muldf3>
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ace5:	52                   	push   edx
c000ace6:	50                   	push   eax
c000ace7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acea:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aced:	e8 71 b5 01 00       	call   c0026263 <__adddf3>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acf8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acfb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acfe:	4f                   	dec    edi
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad09:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad10:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad14:	e8 be c5 01 00       	call   c00272d7 <__extendsfdf2>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad34:	e8 a7 bb 01 00       	call   c00268e0 <__muldf3>
c000ad39:	83 c4 10             	add    esp,0x10
c000ad3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad44:	52                   	push   edx
c000ad45:	50                   	push   eax
c000ad46:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad49:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad4c:	e8 12 b5 01 00       	call   c0026263 <__adddf3>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad57:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad5a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad5d:	4f                   	dec    edi
c000ad5e:	83 ec 0c             	sub    esp,0xc
c000ad61:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad68:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad6f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad73:	e8 5f c5 01 00       	call   c00272d7 <__extendsfdf2>
c000ad78:	83 c4 10             	add    esp,0x10
c000ad7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad7f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad8b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad93:	e8 48 bb 01 00       	call   c00268e0 <__muldf3>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad9f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada3:	52                   	push   edx
c000ada4:	50                   	push   eax
c000ada5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ada8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adab:	e8 b3 b4 01 00       	call   c0026263 <__adddf3>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adb6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adbc:	4f                   	dec    edi
c000adbd:	83 ec 0c             	sub    esp,0xc
c000adc0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adc7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adce:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000add2:	e8 00 c5 01 00       	call   c00272d7 <__extendsfdf2>
c000add7:	83 c4 10             	add    esp,0x10
c000adda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ade2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adf2:	e8 e9 ba 01 00       	call   c00268e0 <__muldf3>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae02:	52                   	push   edx
c000ae03:	50                   	push   eax
c000ae04:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae07:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae0a:	e8 54 b4 01 00       	call   c0026263 <__adddf3>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae15:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae1b:	4f                   	dec    edi
c000ae1c:	83 ec 0c             	sub    esp,0xc
c000ae1f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae26:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae2d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae31:	e8 a1 c4 01 00       	call   c00272d7 <__extendsfdf2>
c000ae36:	83 c4 10             	add    esp,0x10
c000ae39:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae3d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae51:	e8 8a ba 01 00       	call   c00268e0 <__muldf3>
c000ae56:	83 c4 10             	add    esp,0x10
c000ae59:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae61:	52                   	push   edx
c000ae62:	50                   	push   eax
c000ae63:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae66:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae69:	e8 f5 b3 01 00       	call   c0026263 <__adddf3>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae74:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7a:	4f                   	dec    edi
c000ae7b:	83 ec 0c             	sub    esp,0xc
c000ae7e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae85:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae90:	e8 42 c4 01 00       	call   c00272d7 <__extendsfdf2>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb0:	e8 2b ba 01 00       	call   c00268e0 <__muldf3>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec0:	52                   	push   edx
c000aec1:	50                   	push   eax
c000aec2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aec8:	e8 96 b3 01 00       	call   c0026263 <__adddf3>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aed9:	4f                   	dec    edi
c000aeda:	83 ec 0c             	sub    esp,0xc
c000aedd:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeeb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeef:	e8 e3 c3 01 00       	call   c00272d7 <__extendsfdf2>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0f:	e8 cc b9 01 00       	call   c00268e0 <__muldf3>
c000af14:	83 c4 10             	add    esp,0x10
c000af17:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1f:	52                   	push   edx
c000af20:	50                   	push   eax
c000af21:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af24:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af27:	e8 37 b3 01 00       	call   c0026263 <__adddf3>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af32:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af38:	4f                   	dec    edi
c000af39:	83 ec 0c             	sub    esp,0xc
c000af3c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af43:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af4e:	e8 84 c3 01 00       	call   c00272d7 <__extendsfdf2>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6e:	e8 6d b9 01 00       	call   c00268e0 <__muldf3>
c000af73:	83 c4 10             	add    esp,0x10
c000af76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7e:	52                   	push   edx
c000af7f:	50                   	push   eax
c000af80:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af83:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af86:	e8 d8 b2 01 00       	call   c0026263 <__adddf3>
c000af8b:	83 c4 10             	add    esp,0x10
c000af8e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af91:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af94:	85 ff                	test   edi,edi
c000af96:	0f 8f e9 fc ff ff    	jg     c000ac85 <calc_output_multi+0x10e>
c000af9c:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afa0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afa4:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afa8:	0f 89 4c fc ff ff    	jns    c000abfa <calc_output_multi+0x83>
c000afae:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afb6:	29 c8                	sub    eax,ecx
c000afb8:	99                   	cdq    
c000afb9:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afc1:	0f af d0             	imul   edx,eax
c000afc4:	40                   	inc    eax
c000afc5:	01 d1                	add    ecx,edx
c000afc7:	0f af c3             	imul   eax,ebx
c000afca:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afce:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afd5:	55                   	push   ebp
c000afd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afda:	6a 00                	push   0x0
c000afdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afe0:	e8 df 56 ff ff       	call   c00006c4 <memset>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afec:	e8 e0 e6 ff ff       	call   c00096d1 <fp_to_double>
c000aff1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aff5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aff9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000affd:	e8 c5 e6 ff ff       	call   c00096c7 <fp_to_int>
c000b002:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b005:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b008:	57                   	push   edi
c000b009:	57                   	push   edi
c000b00a:	89 df                	mov    edi,ebx
c000b00c:	55                   	push   ebp
c000b00d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b011:	e8 e2 ab 01 00       	call   c0025bf8 <__subsf3>
c000b016:	89 04 24             	mov    DWORD PTR [esp],eax
c000b019:	e8 b9 c2 01 00       	call   c00272d7 <__extendsfdf2>
c000b01e:	83 c4 10             	add    esp,0x10
c000b021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b029:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b02d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b031:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b035:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b039:	e8 a2 b8 01 00       	call   c00268e0 <__muldf3>
c000b03e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b041:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b045:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b049:	e8 89 c2 01 00       	call   c00272d7 <__extendsfdf2>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b059:	52                   	push   edx
c000b05a:	50                   	push   eax
c000b05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b063:	e8 fb b1 01 00       	call   c0026263 <__adddf3>
c000b068:	83 c4 10             	add    esp,0x10
c000b06b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b06f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b073:	89 f8                	mov    eax,edi
c000b075:	b9 08 00 00 00       	mov    ecx,0x8
c000b07a:	99                   	cdq    
c000b07b:	f7 f9                	idiv   ecx
c000b07d:	4a                   	dec    edx
c000b07e:	83 fa 06             	cmp    edx,0x6
c000b081:	77 07                	ja     c000b08a <calc_output_multi+0x513>
c000b083:	ff 24 95 c0 8a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7540]
c000b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08e:	4f                   	dec    edi
c000b08f:	83 ec 0c             	sub    esp,0xc
c000b092:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b099:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a4:	e8 2e c2 01 00       	call   c00272d7 <__extendsfdf2>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c4:	e8 17 b8 01 00       	call   c00268e0 <__muldf3>
c000b0c9:	83 c4 10             	add    esp,0x10
c000b0cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0d4:	52                   	push   edx
c000b0d5:	50                   	push   eax
c000b0d6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0d9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0dc:	e8 82 b1 01 00       	call   c0026263 <__adddf3>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0ee:	4f                   	dec    edi
c000b0ef:	83 ec 0c             	sub    esp,0xc
c000b0f2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0f9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b100:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b104:	e8 ce c1 01 00       	call   c00272d7 <__extendsfdf2>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b110:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b124:	e8 b7 b7 01 00       	call   c00268e0 <__muldf3>
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b130:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b134:	52                   	push   edx
c000b135:	50                   	push   eax
c000b136:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b139:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13c:	e8 22 b1 01 00       	call   c0026263 <__adddf3>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b147:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b14e:	4f                   	dec    edi
c000b14f:	83 ec 0c             	sub    esp,0xc
c000b152:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b155:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b159:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b160:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b164:	e8 6e c1 01 00       	call   c00272d7 <__extendsfdf2>
c000b169:	83 c4 10             	add    esp,0x10
c000b16c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b170:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b180:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b184:	e8 57 b7 01 00       	call   c00268e0 <__muldf3>
c000b189:	83 c4 10             	add    esp,0x10
c000b18c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b190:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b194:	52                   	push   edx
c000b195:	50                   	push   eax
c000b196:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b199:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19c:	e8 c2 b0 01 00       	call   c0026263 <__adddf3>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1ae:	4f                   	dec    edi
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1b9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1c0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1c4:	e8 0e c1 01 00       	call   c00272d7 <__extendsfdf2>
c000b1c9:	83 c4 10             	add    esp,0x10
c000b1cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e4:	e8 f7 b6 01 00       	call   c00268e0 <__muldf3>
c000b1e9:	83 c4 10             	add    esp,0x10
c000b1ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1f4:	52                   	push   edx
c000b1f5:	50                   	push   eax
c000b1f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1f9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1fc:	e8 62 b0 01 00       	call   c0026263 <__adddf3>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b207:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b20a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b20e:	4f                   	dec    edi
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b219:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b220:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b224:	e8 ae c0 01 00       	call   c00272d7 <__extendsfdf2>
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b230:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b23c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b240:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b244:	e8 97 b6 01 00       	call   c00268e0 <__muldf3>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b250:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b254:	52                   	push   edx
c000b255:	50                   	push   eax
c000b256:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b259:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b25c:	e8 02 b0 01 00       	call   c0026263 <__adddf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b267:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26e:	4f                   	dec    edi
c000b26f:	83 ec 0c             	sub    esp,0xc
c000b272:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b279:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b280:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b284:	e8 4e c0 01 00       	call   c00272d7 <__extendsfdf2>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b29c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a4:	e8 37 b6 01 00       	call   c00268e0 <__muldf3>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b4:	52                   	push   edx
c000b2b5:	50                   	push   eax
c000b2b6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2bc:	e8 a2 af 01 00       	call   c0026263 <__adddf3>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ce:	4f                   	dec    edi
c000b2cf:	83 ec 0c             	sub    esp,0xc
c000b2d2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2e0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e4:	e8 ee bf 01 00       	call   c00272d7 <__extendsfdf2>
c000b2e9:	83 c4 10             	add    esp,0x10
c000b2ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b300:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b304:	e8 d7 b5 01 00       	call   c00268e0 <__muldf3>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b310:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b314:	52                   	push   edx
c000b315:	50                   	push   eax
c000b316:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b319:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b31c:	e8 42 af 01 00       	call   c0026263 <__adddf3>
c000b321:	83 c4 10             	add    esp,0x10
c000b324:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b327:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32e:	4f                   	dec    edi
c000b32f:	83 ec 0c             	sub    esp,0xc
c000b332:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b335:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b339:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b340:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b344:	e8 8e bf 01 00       	call   c00272d7 <__extendsfdf2>
c000b349:	83 c4 10             	add    esp,0x10
c000b34c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b350:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b35c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b360:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b364:	e8 77 b5 01 00       	call   c00268e0 <__muldf3>
c000b369:	83 c4 10             	add    esp,0x10
c000b36c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b370:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b374:	52                   	push   edx
c000b375:	50                   	push   eax
c000b376:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b379:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b37c:	e8 e2 ae 01 00       	call   c0026263 <__adddf3>
c000b381:	83 c4 10             	add    esp,0x10
c000b384:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b387:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b38a:	85 ff                	test   edi,edi
c000b38c:	0f 8f e1 fc ff ff    	jg     c000b073 <calc_output_multi+0x4fc>
c000b392:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b396:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b39a:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b39e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3a3:	0f 8f 3f fc ff ff    	jg     c000afe8 <calc_output_multi+0x471>
c000b3a9:	be 08 00 00 00       	mov    esi,0x8
c000b3ae:	89 d8                	mov    eax,ebx
c000b3b0:	99                   	cdq    
c000b3b1:	f7 fe                	idiv   esi
c000b3b3:	4a                   	dec    edx
c000b3b4:	83 fa 06             	cmp    edx,0x6
c000b3b7:	77 07                	ja     c000b3c0 <calc_output_multi+0x849>
c000b3b9:	ff 24 95 dc 8a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7524]
c000b3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c4:	4b                   	dec    ebx
c000b3c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3d7:	e8 87 ae 01 00       	call   c0026263 <__adddf3>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	e8 e4 b4 01 00       	call   c00268e0 <__muldf3>
c000b3fc:	5d                   	pop    ebp
c000b3fd:	59                   	pop    ecx
c000b3fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b402:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40e:	e8 a0 bd 01 00       	call   c00271b3 <__truncdfsf2>
c000b413:	83 c4 10             	add    esp,0x10
c000b416:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b41a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b41d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b421:	4b                   	dec    ebx
c000b422:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b426:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b42d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b431:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b434:	e8 2a ae 01 00       	call   c0026263 <__adddf3>
c000b439:	83 c4 10             	add    esp,0x10
c000b43c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b454:	e8 87 b4 01 00       	call   c00268e0 <__muldf3>
c000b459:	59                   	pop    ecx
c000b45a:	5f                   	pop    edi
c000b45b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b45f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b463:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b46b:	e8 43 bd 01 00       	call   c00271b3 <__truncdfsf2>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b477:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47e:	4b                   	dec    ebx
c000b47f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b483:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b48a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b48e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b491:	e8 cd ad 01 00       	call   c0026263 <__adddf3>
c000b496:	83 c4 10             	add    esp,0x10
c000b499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b49d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b1:	e8 2a b4 01 00       	call   c00268e0 <__muldf3>
c000b4b6:	5f                   	pop    edi
c000b4b7:	5d                   	pop    ebp
c000b4b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c8:	e8 e6 bc 01 00       	call   c00271b3 <__truncdfsf2>
c000b4cd:	83 c4 10             	add    esp,0x10
c000b4d0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4d4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4db:	4b                   	dec    ebx
c000b4dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4ee:	e8 70 ad 01 00       	call   c0026263 <__adddf3>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50e:	e8 cd b3 01 00       	call   c00268e0 <__muldf3>
c000b513:	5d                   	pop    ebp
c000b514:	59                   	pop    ecx
c000b515:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b519:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b525:	e8 89 bc 01 00       	call   c00271b3 <__truncdfsf2>
c000b52a:	83 c4 10             	add    esp,0x10
c000b52d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b531:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b538:	4b                   	dec    ebx
c000b539:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b53d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b544:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b548:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b54b:	e8 13 ad 01 00       	call   c0026263 <__adddf3>
c000b550:	83 c4 10             	add    esp,0x10
c000b553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b557:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b55b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56b:	e8 70 b3 01 00       	call   c00268e0 <__muldf3>
c000b570:	59                   	pop    ecx
c000b571:	5f                   	pop    edi
c000b572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b57a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b582:	e8 2c bc 01 00       	call   c00271b3 <__truncdfsf2>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b58e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b595:	4b                   	dec    ebx
c000b596:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b59a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b59d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a8:	e8 b6 ac 01 00       	call   c0026263 <__adddf3>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c8:	e8 13 b3 01 00       	call   c00268e0 <__muldf3>
c000b5cd:	5f                   	pop    edi
c000b5ce:	5d                   	pop    ebp
c000b5cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5df:	e8 cf bb 01 00       	call   c00271b3 <__truncdfsf2>
c000b5e4:	83 c4 10             	add    esp,0x10
c000b5e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f2:	4b                   	dec    ebx
c000b5f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b602:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b605:	e8 59 ac 01 00       	call   c0026263 <__adddf3>
c000b60a:	83 c4 10             	add    esp,0x10
c000b60d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b611:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 b6 b2 01 00       	call   c00268e0 <__muldf3>
c000b62a:	5d                   	pop    ebp
c000b62b:	59                   	pop    ecx
c000b62c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b630:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b634:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b638:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63c:	e8 72 bb 01 00       	call   c00271b3 <__truncdfsf2>
c000b641:	83 c4 10             	add    esp,0x10
c000b644:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b648:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b64b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64f:	4b                   	dec    ebx
c000b650:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b654:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b65b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b65f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b662:	e8 fc ab 01 00       	call   c0026263 <__adddf3>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 59 b2 01 00       	call   c00268e0 <__muldf3>
c000b687:	59                   	pop    ecx
c000b688:	5f                   	pop    edi
c000b689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b68d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b695:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b699:	e8 15 bb 01 00       	call   c00271b3 <__truncdfsf2>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	85 db                	test   ebx,ebx
c000b6a3:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6a7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6aa:	0f 8f fe fc ff ff    	jg     c000b3ae <calc_output_multi+0x837>
c000b6b0:	83 c4 4c             	add    esp,0x4c
c000b6b3:	5b                   	pop    ebx
c000b6b4:	5e                   	pop    esi
c000b6b5:	5f                   	pop    edi
c000b6b6:	5d                   	pop    ebp
c000b6b7:	c3                   	ret    

c000b6b8 <double_to_fp>:
c000b6b8:	83 ec 0c             	sub    esp,0xc
c000b6bb:	68 00 00 b0 40       	push   0x40b00000
c000b6c0:	6a 00                	push   0x0
c000b6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ca:	e8 11 b2 01 00       	call   c00268e0 <__muldf3>
c000b6cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6d7:	83 c4 1c             	add    esp,0x1c
c000b6da:	e9 81 bc 01 00       	jmp    c0027360 <lrint>

c000b6df <prepare_data>:
c000b6df:	55                   	push   ebp
c000b6e0:	57                   	push   edi
c000b6e1:	56                   	push   esi
c000b6e2:	53                   	push   ebx
c000b6e3:	83 ec 1c             	sub    esp,0x1c
c000b6e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6ea:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6ee:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6f2:	0f 89 57 01 00 00    	jns    c000b84f <prepare_data+0x170>
c000b6f8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6fb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fe:	85 d2                	test   edx,edx
c000b700:	75 0d                	jne    c000b70f <prepare_data+0x30>
c000b702:	8d 14 36             	lea    edx,[esi+esi*1]
c000b705:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b708:	29 d0                	sub    eax,edx
c000b70a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70d:	eb 44                	jmp    c000b753 <prepare_data+0x74>
c000b70f:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b712:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b715:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b718:	39 c1                	cmp    ecx,eax
c000b71a:	7d 04                	jge    c000b720 <prepare_data+0x41>
c000b71c:	29 d0                	sub    eax,edx
c000b71e:	eb 2d                	jmp    c000b74d <prepare_data+0x6e>
c000b720:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b726:	29 d7                	sub    edi,edx
c000b728:	01 f7                	add    edi,esi
c000b72a:	51                   	push   ecx
c000b72b:	29 f2                	sub    edx,esi
c000b72d:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b734:	8d 14 90             	lea    edx,[eax+edx*4]
c000b737:	51                   	push   ecx
c000b738:	52                   	push   edx
c000b739:	50                   	push   eax
c000b73a:	e8 29 4f ff ff       	call   c0000668 <memmove>
c000b73f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b742:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b745:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b748:	29 f0                	sub    eax,esi
c000b74a:	83 c4 10             	add    esp,0x10
c000b74d:	29 f0                	sub    eax,esi
c000b74f:	79 02                	jns    c000b753 <prepare_data+0x74>
c000b751:	31 c0                	xor    eax,eax
c000b753:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b756:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b759:	29 ef                	sub    edi,ebp
c000b75b:	39 c7                	cmp    edi,eax
c000b75d:	7e 02                	jle    c000b761 <prepare_data+0x82>
c000b75f:	89 c7                	mov    edi,eax
c000b761:	89 f8                	mov    eax,edi
c000b763:	99                   	cdq    
c000b764:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b767:	b8 15 00 00 00       	mov    eax,0x15
c000b76c:	29 d7                	sub    edi,edx
c000b76e:	0f 88 dd 00 00 00    	js     c000b851 <prepare_data+0x172>
c000b774:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b777:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b77a:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b77d:	0f 8f ce 00 00 00    	jg     c000b851 <prepare_data+0x172>
c000b783:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b789:	50                   	push   eax
c000b78a:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b791:	50                   	push   eax
c000b792:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b796:	8b 00                	mov    eax,DWORD PTR [eax]
c000b798:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b79b:	50                   	push   eax
c000b79c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b79f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7a3:	50                   	push   eax
c000b7a4:	e8 f7 4e ff ff       	call   c00006a0 <memcpy>
c000b7a9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b7ac:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b7af:	01 fd                	add    ebp,edi
c000b7b1:	01 f9                	add    ecx,edi
c000b7b3:	83 c4 10             	add    esp,0x10
c000b7b6:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b7b9:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b7bc:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b7bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7c3:	0f 85 86 00 00 00    	jne    c000b84f <prepare_data+0x170>
c000b7c9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b7cc:	89 e8                	mov    eax,ebp
c000b7ce:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b7d1:	29 c8                	sub    eax,ecx
c000b7d3:	39 f8                	cmp    eax,edi
c000b7d5:	7d 78                	jge    c000b84f <prepare_data+0x170>
c000b7d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7db:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7df:	74 6e                	je     c000b84f <prepare_data+0x170>
c000b7e1:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7e4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7e8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7eb:	29 ef                	sub    edi,ebp
c000b7ed:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7f1:	7c 29                	jl     c000b81c <prepare_data+0x13d>
c000b7f3:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f6:	29 f1                	sub    ecx,esi
c000b7f8:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7ff:	55                   	push   ebp
c000b800:	50                   	push   eax
c000b801:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b804:	50                   	push   eax
c000b805:	52                   	push   edx
c000b806:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b80a:	e8 59 4e ff ff       	call   c0000668 <memmove>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b815:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b81c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b81f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b822:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b825:	83 c6 05             	add    esi,0x5
c000b828:	78 07                	js     c000b831 <prepare_data+0x152>
c000b82a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b82d:	39 cf                	cmp    edi,ecx
c000b82f:	7e 04                	jle    c000b835 <prepare_data+0x156>
c000b831:	89 ce                	mov    esi,ecx
c000b833:	29 c6                	sub    esi,eax
c000b835:	8d 04 82             	lea    eax,[edx+eax*4]
c000b838:	51                   	push   ecx
c000b839:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b840:	51                   	push   ecx
c000b841:	6a 00                	push   0x0
c000b843:	50                   	push   eax
c000b844:	e8 7b 4e ff ff       	call   c00006c4 <memset>
c000b849:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	31 c0                	xor    eax,eax
c000b851:	83 c4 1c             	add    esp,0x1c
c000b854:	5b                   	pop    ebx
c000b855:	5e                   	pop    esi
c000b856:	5f                   	pop    edi
c000b857:	5d                   	pop    ebp
c000b858:	c3                   	ret    

c000b859 <sinc_multichan_vari_process>:
c000b859:	55                   	push   ebp
c000b85a:	ba 05 00 00 00       	mov    edx,0x5
c000b85f:	57                   	push   edi
c000b860:	56                   	push   esi
c000b861:	53                   	push   ebx
c000b862:	83 ec 4c             	sub    esp,0x4c
c000b865:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b869:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b86d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b870:	85 db                	test   ebx,ebx
c000b872:	0f 84 9b 06 00 00    	je     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b878:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b87b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b87e:	0f af c5             	imul   eax,ebp
c000b881:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b884:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b887:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b88e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b895:	0f af c5             	imul   eax,ebp
c000b898:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b89b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b89e:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a8:	68 00 00 70 3f       	push   0x3f700000
c000b8ad:	6a 00                	push   0x0
c000b8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b7:	e8 f3 b8 01 00       	call   c00271af <__ltdf2>
c000b8bc:	83 c4 10             	add    esp,0x10
c000b8bf:	ba 16 00 00 00       	mov    edx,0x16
c000b8c4:	85 c0                	test   eax,eax
c000b8c6:	0f 88 47 06 00 00    	js     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8cc:	68 00 00 70 40       	push   0x40700000
c000b8d1:	6a 00                	push   0x0
c000b8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8db:	e8 b1 b8 01 00       	call   c0027191 <__gtdf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	ba 16 00 00 00       	mov    edx,0x16
c000b8e8:	85 c0                	test   eax,eax
c000b8ea:	0f 8f 23 06 00 00    	jg     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8f0:	83 ec 0c             	sub    esp,0xc
c000b8f3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8f6:	e8 48 b6 01 00       	call   c0026f43 <__floatsidf>
c000b8fb:	83 c4 10             	add    esp,0x10
c000b8fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b902:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b906:	68 00 00 00 40       	push   0x40000000
c000b90b:	6a 00                	push   0x0
c000b90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b915:	e8 49 a9 01 00       	call   c0026263 <__adddf3>
c000b91a:	59                   	pop    ecx
c000b91b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b91f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b923:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b926:	e8 18 b6 01 00       	call   c0026f43 <__floatsidf>
c000b92b:	83 c4 10             	add    esp,0x10
c000b92e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b932:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b936:	52                   	push   edx
c000b937:	50                   	push   eax
c000b938:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b940:	e8 7f b2 01 00       	call   c0026bc4 <__divdf3>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b94c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b950:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b953:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b95a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96e:	e8 1e b8 01 00       	call   c0027191 <__gtdf2>
c000b973:	83 c4 10             	add    esp,0x10
c000b976:	85 c0                	test   eax,eax
c000b978:	7e 2d                	jle    c000b9a7 <sinc_multichan_vari_process+0x14e>
c000b97a:	68 00 00 f0 3f       	push   0x3ff00000
c000b97f:	6a 00                	push   0x0
c000b981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b989:	e8 21 b8 01 00       	call   c00271af <__ltdf2>
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	85 c0                	test   eax,eax
c000b993:	79 4d                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b999:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b99d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9a5:	eb 1b                	jmp    c000b9c2 <sinc_multichan_vari_process+0x169>
c000b9a7:	68 00 00 f0 3f       	push   0x3ff00000
c000b9ac:	6a 00                	push   0x0
c000b9ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b6:	e8 f4 b7 01 00       	call   c00271af <__ltdf2>
c000b9bb:	83 c4 10             	add    esp,0x10
c000b9be:	85 c0                	test   eax,eax
c000b9c0:	79 20                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b9c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d2:	e8 ed b1 01 00       	call   c0026bc4 <__divdf3>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e2:	50                   	push   eax
c000b9e3:	50                   	push   eax
c000b9e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ec:	e8 6f b9 01 00       	call   c0027360 <lrint>
c000b9f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9f4:	40                   	inc    eax
c000b9f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f9:	0f af c5             	imul   eax,ebp
c000b9fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ba00:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba07:	58                   	pop    eax
c000ba08:	5a                   	pop    edx
c000ba09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba11:	e8 4a b9 01 00       	call   c0027360 <lrint>
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	50                   	push   eax
c000ba1a:	e8 24 b5 01 00       	call   c0026f43 <__floatsidf>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba2a:	52                   	push   edx
c000ba2b:	50                   	push   eax
c000ba2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba34:	e8 7b ae 01 00       	call   c00268b4 <__subdf3>
c000ba39:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba41:	83 c4 20             	add    esp,0x20
c000ba44:	6a 00                	push   0x0
c000ba46:	6a 00                	push   0x0
c000ba48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba50:	e8 5a b7 01 00       	call   c00271af <__ltdf2>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	85 c0                	test   eax,eax
c000ba5a:	79 1f                	jns    c000ba7b <sinc_multichan_vari_process+0x222>
c000ba5c:	68 00 00 f0 3f       	push   0x3ff00000
c000ba61:	6a 00                	push   0x0
c000ba63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba6b:	e8 f3 a7 01 00       	call   c0026263 <__adddf3>
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba7b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba7e:	83 ec 10             	sub    esp,0x10
c000ba81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba85:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba98:	e8 17 ae 01 00       	call   c00268b4 <__subdf3>
c000ba9d:	83 c4 18             	add    esp,0x18
c000baa0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baa4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa8:	52                   	push   edx
c000baa9:	50                   	push   eax
c000baaa:	e8 b1 b8 01 00       	call   c0027360 <lrint>
c000baaf:	0f af e8             	imul   ebp,eax
c000bab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bab6:	01 e8                	add    eax,ebp
c000bab8:	99                   	cdq    
c000bab9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000babc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000babf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac7:	68 00 00 f0 3f       	push   0x3ff00000
c000bacc:	6a 00                	push   0x0
c000bace:	e8 f1 b0 01 00       	call   c0026bc4 <__divdf3>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bada:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bade:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bae3:	68 23 42 92 0c       	push   0xc924223
c000bae8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baf0:	e8 6e a7 01 00       	call   c0026263 <__adddf3>
c000baf5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bafd:	83 c4 20             	add    esp,0x20
c000bb00:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb08:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bb10:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb13:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb16:	7d 50                	jge    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bb18:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb1e:	01 c8                	add    eax,ecx
c000bb20:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb23:	99                   	cdq    
c000bb24:	f7 f9                	idiv   ecx
c000bb26:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2a:	7d 0c                	jge    c000bb38 <sinc_multichan_vari_process+0x2df>
c000bb2c:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bb2f:	85 ed                	test   ebp,ebp
c000bb31:	79 6b                	jns    c000bb9e <sinc_multichan_vari_process+0x345>
c000bb33:	e9 e6 00 00 00       	jmp    c000bc1e <sinc_multichan_vari_process+0x3c5>
c000bb38:	50                   	push   eax
c000bb39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb3d:	57                   	push   edi
c000bb3e:	53                   	push   ebx
c000bb3f:	e8 9b fb ff ff       	call   c000b6df <prepare_data>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	89 c2                	mov    edx,eax
c000bb49:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb4c:	85 c0                	test   eax,eax
c000bb4e:	0f 85 bf 03 00 00    	jne    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb54:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb57:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb5a:	01 c8                	add    eax,ecx
c000bb5c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb5f:	99                   	cdq    
c000bb60:	f7 f9                	idiv   ecx
c000bb62:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb66:	7c c4                	jl     c000bb2c <sinc_multichan_vari_process+0x2d3>
c000bb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb70:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb73:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7e:	89 06                	mov    DWORD PTR [esi],eax
c000bb80:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb86:	99                   	cdq    
c000bb87:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb8a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb90:	99                   	cdq    
c000bb91:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb94:	31 d2                	xor    edx,edx
c000bb96:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb99:	e9 75 03 00 00       	jmp    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb9e:	83 ec 0c             	sub    esp,0xc
c000bba1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bba4:	e8 9a b3 01 00       	call   c0026f43 <__floatsidf>
c000bba9:	83 c4 10             	add    esp,0x10
c000bbac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbb0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc4:	e8 9a a6 01 00       	call   c0026263 <__adddf3>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbd0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe4:	e8 7a a6 01 00       	call   c0026263 <__adddf3>
c000bbe9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbf4:	e8 4a b3 01 00       	call   c0026f43 <__floatsidf>
c000bbf9:	83 c4 10             	add    esp,0x10
c000bbfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc04:	52                   	push   edx
c000bc05:	50                   	push   eax
c000bc06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0e:	e8 9a b5 01 00       	call   c00271ad <__gedf2>
c000bc13:	83 c4 10             	add    esp,0x10
c000bc16:	85 c0                	test   eax,eax
c000bc18:	0f 89 4a ff ff ff    	jns    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bc1e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc22:	0f 8e ed 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc28:	83 ec 10             	sub    esp,0x10
c000bc2b:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc2e:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc34:	ff 36                	push   DWORD PTR [esi]
c000bc36:	e8 79 ac 01 00       	call   c00268b4 <__subdf3>
c000bc3b:	83 c4 18             	add    esp,0x18
c000bc3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc46:	52                   	push   edx
c000bc47:	50                   	push   eax
c000bc48:	e8 f3 b6 01 00       	call   c0027340 <fabs>
c000bc4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc55:	83 c4 10             	add    esp,0x10
c000bc58:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc5d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6a:	e8 22 b5 01 00       	call   c0027191 <__gtdf2>
c000bc6f:	83 c4 10             	add    esp,0x10
c000bc72:	85 c0                	test   eax,eax
c000bc74:	0f 8e 9b 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc7a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc7c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc83:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc87:	52                   	push   edx
c000bc88:	50                   	push   eax
c000bc89:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc8c:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc8f:	e8 20 ac 01 00       	call   c00268b4 <__subdf3>
c000bc94:	59                   	pop    ecx
c000bc95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc99:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc9d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bca0:	e8 9e b2 01 00       	call   c0026f43 <__floatsidf>
c000bca5:	83 c4 10             	add    esp,0x10
c000bca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcb0:	52                   	push   edx
c000bcb1:	50                   	push   eax
c000bcb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcba:	e8 21 ac 01 00       	call   c00268e0 <__muldf3>
c000bcbf:	5d                   	pop    ebp
c000bcc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcc4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcc8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bccb:	e8 73 b2 01 00       	call   c0026f43 <__floatsidf>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcdb:	52                   	push   edx
c000bcdc:	50                   	push   eax
c000bcdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce5:	e8 da ae 01 00       	call   c0026bc4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcf1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd05:	e8 59 a5 01 00       	call   c0026263 <__adddf3>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd11:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bd15:	83 ec 0c             	sub    esp,0xc
c000bd18:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd1b:	e8 23 b2 01 00       	call   c0026f43 <__floatsidf>
c000bd20:	83 c4 10             	add    esp,0x10
c000bd23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd3b:	e8 6f b4 01 00       	call   c00271af <__ltdf2>
c000bd40:	83 c4 10             	add    esp,0x10
c000bd43:	85 c0                	test   eax,eax
c000bd45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd4d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd51:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd55:	78 10                	js     c000bd67 <sinc_multichan_vari_process+0x50e>
c000bd57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd63:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd77:	e8 64 ab 01 00       	call   c00268e0 <__muldf3>
c000bd7c:	59                   	pop    ecx
c000bd7d:	5d                   	pop    ebp
c000bd7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd82:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8e:	e8 25 f9 ff ff       	call   c000b6b8 <double_to_fp>
c000bd93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd97:	89 c5                	mov    ebp,eax
c000bd99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda5:	e8 36 ab 01 00       	call   c00268e0 <__muldf3>
c000bdaa:	83 c4 18             	add    esp,0x18
c000bdad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdb5:	52                   	push   edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 fc f8 ff ff       	call   c000b6b8 <double_to_fp>
c000bdbc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdbf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdc3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bdc6:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc9:	50                   	push   eax
c000bdca:	50                   	push   eax
c000bdcb:	50                   	push   eax
c000bdcc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdcf:	e8 6f b1 01 00       	call   c0026f43 <__floatsidf>
c000bdd4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bddc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdec:	e8 d3 ad 01 00       	call   c0026bc4 <__divdf3>
c000bdf1:	83 c4 1c             	add    esp,0x1c
c000bdf4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdf8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdfc:	52                   	push   edx
c000bdfd:	89 ea                	mov    edx,ebp
c000bdff:	50                   	push   eax
c000be00:	89 d8                	mov    eax,ebx
c000be02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be05:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be09:	e8 69 ed ff ff       	call   c000ab77 <calc_output_multi>
c000be0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be11:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be24:	e8 9b ad 01 00       	call   c0026bc4 <__divdf3>
c000be29:	83 c4 10             	add    esp,0x10
c000be2c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be30:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000be34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be44:	e8 1a a4 01 00       	call   c0026263 <__adddf3>
c000be49:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be4d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be51:	83 c4 28             	add    esp,0x28
c000be54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5c:	e8 ff b4 01 00       	call   c0027360 <lrint>
c000be61:	83 ec 0c             	sub    esp,0xc
c000be64:	50                   	push   eax
c000be65:	e8 d9 b0 01 00       	call   c0026f43 <__floatsidf>
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be75:	52                   	push   edx
c000be76:	50                   	push   eax
c000be77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7f:	e8 30 aa 01 00       	call   c00268b4 <__subdf3>
c000be84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8c:	83 c4 20             	add    esp,0x20
c000be8f:	6a 00                	push   0x0
c000be91:	6a 00                	push   0x0
c000be93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be9b:	e8 0f b3 01 00       	call   c00271af <__ltdf2>
c000bea0:	83 c4 10             	add    esp,0x10
c000bea3:	85 c0                	test   eax,eax
c000bea5:	79 20                	jns    c000bec7 <sinc_multichan_vari_process+0x66e>
c000bea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb7:	e8 a7 a3 01 00       	call   c0026263 <__adddf3>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bec3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bec7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beca:	83 ec 10             	sub    esp,0x10
c000becd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bed1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bedc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee4:	e8 cb a9 01 00       	call   c00268b4 <__subdf3>
c000bee9:	83 c4 18             	add    esp,0x18
c000beec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	e8 65 b4 01 00       	call   c0027360 <lrint>
c000befb:	0f af e8             	imul   ebp,eax
c000befe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	01 e8                	add    eax,ebp
c000bf07:	99                   	cdq    
c000bf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf0e:	e9 fd fb ff ff       	jmp    c000bb10 <sinc_multichan_vari_process+0x2b7>
c000bf13:	83 c4 4c             	add    esp,0x4c
c000bf16:	89 d0                	mov    eax,edx
c000bf18:	5b                   	pop    ebx
c000bf19:	5e                   	pop    esi
c000bf1a:	5f                   	pop    edi
c000bf1b:	5d                   	pop    ebp
c000bf1c:	c3                   	ret    

c000bf1d <sinc_hex_vari_process>:
c000bf1d:	55                   	push   ebp
c000bf1e:	ba 05 00 00 00       	mov    edx,0x5
c000bf23:	57                   	push   edi
c000bf24:	56                   	push   esi
c000bf25:	53                   	push   ebx
c000bf26:	83 ec 4c             	sub    esp,0x4c
c000bf29:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf2d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf31:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf34:	85 db                	test   ebx,ebx
c000bf36:	0f 84 9c 06 00 00    	je     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf3c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf3f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf42:	0f af c7             	imul   eax,edi
c000bf45:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf48:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf4b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf52:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf59:	0f af c7             	imul   eax,edi
c000bf5c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf5f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf6d:	68 00 00 70 3f       	push   0x3f700000
c000bf72:	6a 00                	push   0x0
c000bf74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf7c:	e8 2e b2 01 00       	call   c00271af <__ltdf2>
c000bf81:	83 c4 10             	add    esp,0x10
c000bf84:	ba 16 00 00 00       	mov    edx,0x16
c000bf89:	85 c0                	test   eax,eax
c000bf8b:	0f 88 47 06 00 00    	js     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf91:	68 00 00 70 40       	push   0x40700000
c000bf96:	6a 00                	push   0x0
c000bf98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfa0:	e8 ec b1 01 00       	call   c0027191 <__gtdf2>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	ba 16 00 00 00       	mov    edx,0x16
c000bfad:	85 c0                	test   eax,eax
c000bfaf:	0f 8f 23 06 00 00    	jg     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bfb5:	83 ec 0c             	sub    esp,0xc
c000bfb8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bfbb:	e8 83 af 01 00       	call   c0026f43 <__floatsidf>
c000bfc0:	83 c4 10             	add    esp,0x10
c000bfc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfcb:	68 00 00 00 40       	push   0x40000000
c000bfd0:	6a 00                	push   0x0
c000bfd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfda:	e8 84 a2 01 00       	call   c0026263 <__adddf3>
c000bfdf:	59                   	pop    ecx
c000bfe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfe4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfe8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfeb:	e8 53 af 01 00       	call   c0026f43 <__floatsidf>
c000bff0:	83 c4 10             	add    esp,0x10
c000bff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bffb:	52                   	push   edx
c000bffc:	50                   	push   eax
c000bffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c005:	e8 ba ab 01 00       	call   c0026bc4 <__divdf3>
c000c00a:	83 c4 10             	add    esp,0x10
c000c00d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c011:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c015:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c018:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c033:	e8 59 b1 01 00       	call   c0027191 <__gtdf2>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	85 c0                	test   eax,eax
c000c03d:	7e 2d                	jle    c000c06c <sinc_hex_vari_process+0x14f>
c000c03f:	68 00 00 f0 3f       	push   0x3ff00000
c000c044:	6a 00                	push   0x0
c000c046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04e:	e8 5c b1 01 00       	call   c00271af <__ltdf2>
c000c053:	83 c4 10             	add    esp,0x10
c000c056:	85 c0                	test   eax,eax
c000c058:	79 4d                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c062:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c066:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c06a:	eb 1b                	jmp    c000c087 <sinc_hex_vari_process+0x16a>
c000c06c:	68 00 00 f0 3f       	push   0x3ff00000
c000c071:	6a 00                	push   0x0
c000c073:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c07b:	e8 2f b1 01 00       	call   c00271af <__ltdf2>
c000c080:	83 c4 10             	add    esp,0x10
c000c083:	85 c0                	test   eax,eax
c000c085:	79 20                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c087:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c097:	e8 28 ab 01 00       	call   c0026bc4 <__divdf3>
c000c09c:	83 c4 10             	add    esp,0x10
c000c09f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a7:	50                   	push   eax
c000c0a8:	50                   	push   eax
c000c0a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b1:	e8 aa b2 01 00       	call   c0027360 <lrint>
c000c0b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c0b9:	40                   	inc    eax
c000c0ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0be:	0f af c7             	imul   eax,edi
c000c0c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0cc:	58                   	pop    eax
c000c0cd:	5a                   	pop    edx
c000c0ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d6:	e8 85 b2 01 00       	call   c0027360 <lrint>
c000c0db:	83 ec 0c             	sub    esp,0xc
c000c0de:	50                   	push   eax
c000c0df:	e8 5f ae 01 00       	call   c0026f43 <__floatsidf>
c000c0e4:	83 c4 10             	add    esp,0x10
c000c0e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0ef:	52                   	push   edx
c000c0f0:	50                   	push   eax
c000c0f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f9:	e8 b6 a7 01 00       	call   c00268b4 <__subdf3>
c000c0fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c106:	83 c4 20             	add    esp,0x20
c000c109:	6a 00                	push   0x0
c000c10b:	6a 00                	push   0x0
c000c10d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c115:	e8 95 b0 01 00       	call   c00271af <__ltdf2>
c000c11a:	83 c4 10             	add    esp,0x10
c000c11d:	85 c0                	test   eax,eax
c000c11f:	79 1f                	jns    c000c140 <sinc_hex_vari_process+0x223>
c000c121:	68 00 00 f0 3f       	push   0x3ff00000
c000c126:	6a 00                	push   0x0
c000c128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c12c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c130:	e8 2e a1 01 00       	call   c0026263 <__adddf3>
c000c135:	83 c4 10             	add    esp,0x10
c000c138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c13c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c140:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c143:	83 ec 10             	sub    esp,0x10
c000c146:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c14a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c14d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c159:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c15d:	e8 52 a7 01 00       	call   c00268b4 <__subdf3>
c000c162:	83 c4 18             	add    esp,0x18
c000c165:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c169:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c16d:	52                   	push   edx
c000c16e:	50                   	push   eax
c000c16f:	e8 ec b1 01 00       	call   c0027360 <lrint>
c000c174:	0f af f8             	imul   edi,eax
c000c177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c17b:	01 f8                	add    eax,edi
c000c17d:	99                   	cdq    
c000c17e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c181:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c188:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c18c:	68 00 00 f0 3f       	push   0x3ff00000
c000c191:	6a 00                	push   0x0
c000c193:	e8 2c aa 01 00       	call   c0026bc4 <__divdf3>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c19f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1a3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c1a8:	68 23 42 92 0c       	push   0xc924223
c000c1ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b5:	e8 a9 a0 01 00       	call   c0026263 <__adddf3>
c000c1ba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c1be:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c1c2:	83 c4 20             	add    esp,0x20
c000c1c5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1cd:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c1d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c1d8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1db:	7d 50                	jge    c000c22d <sinc_hex_vari_process+0x310>
c000c1dd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e3:	01 c8                	add    eax,ecx
c000c1e5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1e8:	99                   	cdq    
c000c1e9:	f7 f9                	idiv   ecx
c000c1eb:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1ef:	7d 0c                	jge    c000c1fd <sinc_hex_vari_process+0x2e0>
c000c1f1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1f4:	85 ff                	test   edi,edi
c000c1f6:	79 6c                	jns    c000c264 <sinc_hex_vari_process+0x347>
c000c1f8:	e9 e7 00 00 00       	jmp    c000c2e4 <sinc_hex_vari_process+0x3c7>
c000c1fd:	50                   	push   eax
c000c1fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c202:	56                   	push   esi
c000c203:	53                   	push   ebx
c000c204:	e8 d6 f4 ff ff       	call   c000b6df <prepare_data>
c000c209:	83 c4 10             	add    esp,0x10
c000c20c:	89 c2                	mov    edx,eax
c000c20e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c211:	85 c0                	test   eax,eax
c000c213:	0f 85 bf 03 00 00    	jne    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c219:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c21c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c21f:	01 c8                	add    eax,ecx
c000c221:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c224:	99                   	cdq    
c000c225:	f7 f9                	idiv   ecx
c000c227:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c22b:	7c c4                	jl     c000c1f1 <sinc_hex_vari_process+0x2d4>
c000c22d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c231:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c235:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c238:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c243:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c246:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c249:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c24c:	99                   	cdq    
c000c24d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c250:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c253:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c256:	99                   	cdq    
c000c257:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c25a:	31 d2                	xor    edx,edx
c000c25c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c25f:	e9 74 03 00 00       	jmp    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c26a:	e8 d4 ac 01 00       	call   c0026f43 <__floatsidf>
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c276:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c27a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c27e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c282:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c286:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28a:	e8 d4 9f 01 00       	call   c0026263 <__adddf3>
c000c28f:	83 c4 10             	add    esp,0x10
c000c292:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c296:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c29a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c29e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2aa:	e8 b4 9f 01 00       	call   c0026263 <__adddf3>
c000c2af:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2ba:	e8 84 ac 01 00       	call   c0026f43 <__floatsidf>
c000c2bf:	83 c4 10             	add    esp,0x10
c000c2c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2ca:	52                   	push   edx
c000c2cb:	50                   	push   eax
c000c2cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d4:	e8 d4 ae 01 00       	call   c00271ad <__gedf2>
c000c2d9:	83 c4 10             	add    esp,0x10
c000c2dc:	85 c0                	test   eax,eax
c000c2de:	0f 89 49 ff ff ff    	jns    c000c22d <sinc_hex_vari_process+0x310>
c000c2e4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2e8:	0f 8e ef 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c2ee:	83 ec 10             	sub    esp,0x10
c000c2f1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2f4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2fa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2fd:	e8 b2 a5 01 00       	call   c00268b4 <__subdf3>
c000c302:	83 c4 18             	add    esp,0x18
c000c305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c30d:	52                   	push   edx
c000c30e:	50                   	push   eax
c000c30f:	e8 2c b0 01 00       	call   c0027340 <fabs>
c000c314:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c318:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c324:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c32d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c331:	e8 5b ae 01 00       	call   c0027191 <__gtdf2>
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	85 c0                	test   eax,eax
c000c33b:	0f 8e 9c 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c341:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c344:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c347:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c34b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c34f:	52                   	push   edx
c000c350:	50                   	push   eax
c000c351:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c354:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c357:	e8 58 a5 01 00       	call   c00268b4 <__subdf3>
c000c35c:	59                   	pop    ecx
c000c35d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c361:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c365:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c368:	e8 d6 ab 01 00       	call   c0026f43 <__floatsidf>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c374:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c378:	52                   	push   edx
c000c379:	50                   	push   eax
c000c37a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c37e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c382:	e8 59 a5 01 00       	call   c00268e0 <__muldf3>
c000c387:	5f                   	pop    edi
c000c388:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c38c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c390:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c393:	e8 ab ab 01 00       	call   c0026f43 <__floatsidf>
c000c398:	83 c4 10             	add    esp,0x10
c000c39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3a3:	52                   	push   edx
c000c3a4:	50                   	push   eax
c000c3a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3ad:	e8 12 a8 01 00       	call   c0026bc4 <__divdf3>
c000c3b2:	83 c4 10             	add    esp,0x10
c000c3b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3b9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3cd:	e8 91 9e 01 00       	call   c0026263 <__adddf3>
c000c3d2:	83 c4 10             	add    esp,0x10
c000c3d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3dd:	83 ec 0c             	sub    esp,0xc
c000c3e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3e3:	e8 5b ab 01 00       	call   c0026f43 <__floatsidf>
c000c3e8:	83 c4 10             	add    esp,0x10
c000c3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c403:	e8 a7 ad 01 00       	call   c00271af <__ltdf2>
c000c408:	83 c4 10             	add    esp,0x10
c000c40b:	85 c0                	test   eax,eax
c000c40d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c411:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c415:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c419:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c41d:	78 10                	js     c000c42f <sinc_hex_vari_process+0x512>
c000c41f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c423:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c427:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c42b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c42f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c433:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43f:	e8 9c a4 01 00       	call   c00268e0 <__muldf3>
c000c444:	59                   	pop    ecx
c000c445:	5f                   	pop    edi
c000c446:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c44a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c44e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c452:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c456:	e8 5d f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45f:	89 c7                	mov    edi,eax
c000c461:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c465:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c469:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c46d:	e8 6e a4 01 00       	call   c00268e0 <__muldf3>
c000c472:	83 c4 18             	add    esp,0x18
c000c475:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c479:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c47d:	52                   	push   edx
c000c47e:	50                   	push   eax
c000c47f:	e8 34 f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c484:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c487:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c48b:	83 c4 0c             	add    esp,0xc
c000c48e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c491:	8d 04 90             	lea    eax,[eax+edx*4]
c000c494:	50                   	push   eax
c000c495:	50                   	push   eax
c000c496:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c499:	e8 a5 aa 01 00       	call   c0026f43 <__floatsidf>
c000c49e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4a2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b6:	e8 09 a7 01 00       	call   c0026bc4 <__divdf3>
c000c4bb:	83 c4 18             	add    esp,0x18
c000c4be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c6:	52                   	push   edx
c000c4c7:	89 fa                	mov    edx,edi
c000c4c9:	50                   	push   eax
c000c4ca:	89 d8                	mov    eax,ebx
c000c4cc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c4d0:	e8 50 de ff ff       	call   c000a325 <calc_output_hex>
c000c4d5:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e9:	e8 d6 a6 01 00       	call   c0026bc4 <__divdf3>
c000c4ee:	83 c4 10             	add    esp,0x10
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c505:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c509:	e8 55 9d 01 00       	call   c0026263 <__adddf3>
c000c50e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c512:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c516:	83 c4 18             	add    esp,0x18
c000c519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c521:	e8 3a ae 01 00       	call   c0027360 <lrint>
c000c526:	83 ec 0c             	sub    esp,0xc
c000c529:	50                   	push   eax
c000c52a:	e8 14 aa 01 00       	call   c0026f43 <__floatsidf>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c536:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c53a:	52                   	push   edx
c000c53b:	50                   	push   eax
c000c53c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c540:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c544:	e8 6b a3 01 00       	call   c00268b4 <__subdf3>
c000c549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c551:	83 c4 20             	add    esp,0x20
c000c554:	6a 00                	push   0x0
c000c556:	6a 00                	push   0x0
c000c558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c560:	e8 4a ac 01 00       	call   c00271af <__ltdf2>
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	85 c0                	test   eax,eax
c000c56a:	79 20                	jns    c000c58c <sinc_hex_vari_process+0x66f>
c000c56c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c57c:	e8 e2 9c 01 00       	call   c0026263 <__adddf3>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c588:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c58c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c58f:	83 ec 10             	sub    esp,0x10
c000c592:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c596:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a9:	e8 06 a3 01 00       	call   c00268b4 <__subdf3>
c000c5ae:	83 c4 18             	add    esp,0x18
c000c5b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b9:	52                   	push   edx
c000c5ba:	50                   	push   eax
c000c5bb:	e8 a0 ad 01 00       	call   c0027360 <lrint>
c000c5c0:	0f af f8             	imul   edi,eax
c000c5c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c5c7:	83 c4 10             	add    esp,0x10
c000c5ca:	01 f8                	add    eax,edi
c000c5cc:	99                   	cdq    
c000c5cd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c5d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c5d3:	e9 fd fb ff ff       	jmp    c000c1d5 <sinc_hex_vari_process+0x2b8>
c000c5d8:	83 c4 4c             	add    esp,0x4c
c000c5db:	89 d0                	mov    eax,edx
c000c5dd:	5b                   	pop    ebx
c000c5de:	5e                   	pop    esi
c000c5df:	5f                   	pop    edi
c000c5e0:	5d                   	pop    ebp
c000c5e1:	c3                   	ret    

c000c5e2 <sinc_quad_vari_process>:
c000c5e2:	55                   	push   ebp
c000c5e3:	ba 05 00 00 00       	mov    edx,0x5
c000c5e8:	57                   	push   edi
c000c5e9:	56                   	push   esi
c000c5ea:	53                   	push   ebx
c000c5eb:	83 ec 4c             	sub    esp,0x4c
c000c5ee:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5f2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5f6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5f9:	85 db                	test   ebx,ebx
c000c5fb:	0f 84 9c 06 00 00    	je     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c601:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c604:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c607:	0f af c7             	imul   eax,edi
c000c60a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c60d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c610:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c617:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c61e:	0f af c7             	imul   eax,edi
c000c621:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c624:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c627:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c62a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c62e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c632:	68 00 00 70 3f       	push   0x3f700000
c000c637:	6a 00                	push   0x0
c000c639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c641:	e8 69 ab 01 00       	call   c00271af <__ltdf2>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	ba 16 00 00 00       	mov    edx,0x16
c000c64e:	85 c0                	test   eax,eax
c000c650:	0f 88 47 06 00 00    	js     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c656:	68 00 00 70 40       	push   0x40700000
c000c65b:	6a 00                	push   0x0
c000c65d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c665:	e8 27 ab 01 00       	call   c0027191 <__gtdf2>
c000c66a:	83 c4 10             	add    esp,0x10
c000c66d:	ba 16 00 00 00       	mov    edx,0x16
c000c672:	85 c0                	test   eax,eax
c000c674:	0f 8f 23 06 00 00    	jg     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c680:	e8 be a8 01 00       	call   c0026f43 <__floatsidf>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c68c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c690:	68 00 00 00 40       	push   0x40000000
c000c695:	6a 00                	push   0x0
c000c697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69f:	e8 bf 9b 01 00       	call   c0026263 <__adddf3>
c000c6a4:	59                   	pop    ecx
c000c6a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6a9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 8e a8 01 00       	call   c0026f43 <__floatsidf>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6c0:	52                   	push   edx
c000c6c1:	50                   	push   eax
c000c6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ca:	e8 f5 a4 01 00       	call   c0026bc4 <__divdf3>
c000c6cf:	83 c4 10             	add    esp,0x10
c000c6d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6dd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f8:	e8 94 aa 01 00       	call   c0027191 <__gtdf2>
c000c6fd:	83 c4 10             	add    esp,0x10
c000c700:	85 c0                	test   eax,eax
c000c702:	7e 2d                	jle    c000c731 <sinc_quad_vari_process+0x14f>
c000c704:	68 00 00 f0 3f       	push   0x3ff00000
c000c709:	6a 00                	push   0x0
c000c70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c713:	e8 97 aa 01 00       	call   c00271af <__ltdf2>
c000c718:	83 c4 10             	add    esp,0x10
c000c71b:	85 c0                	test   eax,eax
c000c71d:	79 4d                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c723:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c72b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c72f:	eb 1b                	jmp    c000c74c <sinc_quad_vari_process+0x16a>
c000c731:	68 00 00 f0 3f       	push   0x3ff00000
c000c736:	6a 00                	push   0x0
c000c738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c740:	e8 6a aa 01 00       	call   c00271af <__ltdf2>
c000c745:	83 c4 10             	add    esp,0x10
c000c748:	85 c0                	test   eax,eax
c000c74a:	79 20                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c74c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c750:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c754:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c758:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75c:	e8 63 a4 01 00       	call   c0026bc4 <__divdf3>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c768:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76c:	50                   	push   eax
c000c76d:	50                   	push   eax
c000c76e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c772:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c776:	e8 e5 ab 01 00       	call   c0027360 <lrint>
c000c77b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c77e:	40                   	inc    eax
c000c77f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c783:	0f af c7             	imul   eax,edi
c000c786:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c791:	58                   	pop    eax
c000c792:	5a                   	pop    edx
c000c793:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c797:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c79b:	e8 c0 ab 01 00       	call   c0027360 <lrint>
c000c7a0:	83 ec 0c             	sub    esp,0xc
c000c7a3:	50                   	push   eax
c000c7a4:	e8 9a a7 01 00       	call   c0026f43 <__floatsidf>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b4:	52                   	push   edx
c000c7b5:	50                   	push   eax
c000c7b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7be:	e8 f1 a0 01 00       	call   c00268b4 <__subdf3>
c000c7c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cb:	83 c4 20             	add    esp,0x20
c000c7ce:	6a 00                	push   0x0
c000c7d0:	6a 00                	push   0x0
c000c7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7da:	e8 d0 a9 01 00       	call   c00271af <__ltdf2>
c000c7df:	83 c4 10             	add    esp,0x10
c000c7e2:	85 c0                	test   eax,eax
c000c7e4:	79 1f                	jns    c000c805 <sinc_quad_vari_process+0x223>
c000c7e6:	68 00 00 f0 3f       	push   0x3ff00000
c000c7eb:	6a 00                	push   0x0
c000c7ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f5:	e8 69 9a 01 00       	call   c0026263 <__adddf3>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c801:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c805:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c808:	83 ec 10             	sub    esp,0x10
c000c80b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c80f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c81e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c822:	e8 8d a0 01 00       	call   c00268b4 <__subdf3>
c000c827:	83 c4 18             	add    esp,0x18
c000c82a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c82e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c832:	52                   	push   edx
c000c833:	50                   	push   eax
c000c834:	e8 27 ab 01 00       	call   c0027360 <lrint>
c000c839:	0f af f8             	imul   edi,eax
c000c83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c840:	01 f8                	add    eax,edi
c000c842:	99                   	cdq    
c000c843:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c846:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c849:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c851:	68 00 00 f0 3f       	push   0x3ff00000
c000c856:	6a 00                	push   0x0
c000c858:	e8 67 a3 01 00       	call   c0026bc4 <__divdf3>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c864:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c868:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c86d:	68 23 42 92 0c       	push   0xc924223
c000c872:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c876:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c87a:	e8 e4 99 01 00       	call   c0026263 <__adddf3>
c000c87f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c883:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c887:	83 c4 20             	add    esp,0x20
c000c88a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c892:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c89a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c89d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c8a0:	7d 50                	jge    c000c8f2 <sinc_quad_vari_process+0x310>
c000c8a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8a8:	01 c8                	add    eax,ecx
c000c8aa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8ad:	99                   	cdq    
c000c8ae:	f7 f9                	idiv   ecx
c000c8b0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b4:	7d 0c                	jge    c000c8c2 <sinc_quad_vari_process+0x2e0>
c000c8b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c8b9:	85 ff                	test   edi,edi
c000c8bb:	79 6c                	jns    c000c929 <sinc_quad_vari_process+0x347>
c000c8bd:	e9 e7 00 00 00       	jmp    c000c9a9 <sinc_quad_vari_process+0x3c7>
c000c8c2:	50                   	push   eax
c000c8c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c7:	56                   	push   esi
c000c8c8:	53                   	push   ebx
c000c8c9:	e8 11 ee ff ff       	call   c000b6df <prepare_data>
c000c8ce:	83 c4 10             	add    esp,0x10
c000c8d1:	89 c2                	mov    edx,eax
c000c8d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c8d6:	85 c0                	test   eax,eax
c000c8d8:	0f 85 bf 03 00 00    	jne    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c8de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8e4:	01 c8                	add    eax,ecx
c000c8e6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8e9:	99                   	cdq    
c000c8ea:	f7 f9                	idiv   ecx
c000c8ec:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8f0:	7c c4                	jl     c000c8b6 <sinc_quad_vari_process+0x2d4>
c000c8f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c904:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c908:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c90b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c90e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c911:	99                   	cdq    
c000c912:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c915:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c918:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c91b:	99                   	cdq    
c000c91c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c91f:	31 d2                	xor    edx,edx
c000c921:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c924:	e9 74 03 00 00       	jmp    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c929:	83 ec 0c             	sub    esp,0xc
c000c92c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c92f:	e8 0f a6 01 00       	call   c0026f43 <__floatsidf>
c000c934:	83 c4 10             	add    esp,0x10
c000c937:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c93b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c93f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c947:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94f:	e8 0f 99 01 00       	call   c0026263 <__adddf3>
c000c954:	83 c4 10             	add    esp,0x10
c000c957:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c95b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c963:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c967:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96f:	e8 ef 98 01 00       	call   c0026263 <__adddf3>
c000c974:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c97f:	e8 bf a5 01 00       	call   c0026f43 <__floatsidf>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c98b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98f:	52                   	push   edx
c000c990:	50                   	push   eax
c000c991:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c999:	e8 0f a8 01 00       	call   c00271ad <__gedf2>
c000c99e:	83 c4 10             	add    esp,0x10
c000c9a1:	85 c0                	test   eax,eax
c000c9a3:	0f 89 49 ff ff ff    	jns    c000c8f2 <sinc_quad_vari_process+0x310>
c000c9a9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c9ad:	0f 8e ef 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000c9b3:	83 ec 10             	sub    esp,0x10
c000c9b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9bf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9c2:	e8 ed 9e 01 00       	call   c00268b4 <__subdf3>
c000c9c7:	83 c4 18             	add    esp,0x18
c000c9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9d2:	52                   	push   edx
c000c9d3:	50                   	push   eax
c000c9d4:	e8 67 a9 01 00       	call   c0027340 <fabs>
c000c9d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9e1:	83 c4 10             	add    esp,0x10
c000c9e4:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9e9:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f6:	e8 96 a7 01 00       	call   c0027191 <__gtdf2>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	85 c0                	test   eax,eax
c000ca00:	0f 8e 9c 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000ca06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca09:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca14:	52                   	push   edx
c000ca15:	50                   	push   eax
c000ca16:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ca19:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ca1c:	e8 93 9e 01 00       	call   c00268b4 <__subdf3>
c000ca21:	59                   	pop    ecx
c000ca22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca26:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca2a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ca2d:	e8 11 a5 01 00       	call   c0026f43 <__floatsidf>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca3d:	52                   	push   edx
c000ca3e:	50                   	push   eax
c000ca3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca47:	e8 94 9e 01 00       	call   c00268e0 <__muldf3>
c000ca4c:	5f                   	pop    edi
c000ca4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca51:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca55:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca58:	e8 e6 a4 01 00       	call   c0026f43 <__floatsidf>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca68:	52                   	push   edx
c000ca69:	50                   	push   eax
c000ca6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca72:	e8 4d a1 01 00       	call   c0026bc4 <__divdf3>
c000ca77:	83 c4 10             	add    esp,0x10
c000ca7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca92:	e8 cc 97 01 00       	call   c0026263 <__adddf3>
c000ca97:	83 c4 10             	add    esp,0x10
c000ca9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca9e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000caa8:	e8 96 a4 01 00       	call   c0026f43 <__floatsidf>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cab4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac8:	e8 e2 a6 01 00       	call   c00271af <__ltdf2>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	85 c0                	test   eax,eax
c000cad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cad6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cada:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cade:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cae2:	78 10                	js     c000caf4 <sinc_quad_vari_process+0x512>
c000cae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cae8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caf0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cafc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb04:	e8 d7 9d 01 00       	call   c00268e0 <__muldf3>
c000cb09:	59                   	pop    ecx
c000cb0a:	5f                   	pop    edi
c000cb0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb1b:	e8 98 eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb24:	89 c7                	mov    edi,eax
c000cb26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb32:	e8 a9 9d 01 00       	call   c00268e0 <__muldf3>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb42:	52                   	push   edx
c000cb43:	50                   	push   eax
c000cb44:	e8 6f eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb49:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb4c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb50:	83 c4 0c             	add    esp,0xc
c000cb53:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb56:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb59:	50                   	push   eax
c000cb5a:	50                   	push   eax
c000cb5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb5e:	e8 e0 a3 01 00       	call   c0026f43 <__floatsidf>
c000cb63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb7b:	e8 44 a0 01 00       	call   c0026bc4 <__divdf3>
c000cb80:	83 c4 18             	add    esp,0x18
c000cb83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb8b:	52                   	push   edx
c000cb8c:	89 fa                	mov    edx,edi
c000cb8e:	50                   	push   eax
c000cb8f:	89 d8                	mov    eax,ebx
c000cb91:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb95:	e8 a5 d1 ff ff       	call   c0009d3f <calc_output_quad>
c000cb9a:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbae:	e8 11 a0 01 00       	call   c0026bc4 <__divdf3>
c000cbb3:	83 c4 10             	add    esp,0x10
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbce:	e8 90 96 01 00       	call   c0026263 <__adddf3>
c000cbd3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cbd7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cbdb:	83 c4 18             	add    esp,0x18
c000cbde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe6:	e8 75 a7 01 00       	call   c0027360 <lrint>
c000cbeb:	83 ec 0c             	sub    esp,0xc
c000cbee:	50                   	push   eax
c000cbef:	e8 4f a3 01 00       	call   c0026f43 <__floatsidf>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbfb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbff:	52                   	push   edx
c000cc00:	50                   	push   eax
c000cc01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc09:	e8 a6 9c 01 00       	call   c00268b4 <__subdf3>
c000cc0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc16:	83 c4 20             	add    esp,0x20
c000cc19:	6a 00                	push   0x0
c000cc1b:	6a 00                	push   0x0
c000cc1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc25:	e8 85 a5 01 00       	call   c00271af <__ltdf2>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	85 c0                	test   eax,eax
c000cc2f:	79 20                	jns    c000cc51 <sinc_quad_vari_process+0x66f>
c000cc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc41:	e8 1d 96 01 00       	call   c0026263 <__adddf3>
c000cc46:	83 c4 10             	add    esp,0x10
c000cc49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc51:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc54:	83 ec 10             	sub    esp,0x10
c000cc57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc5b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6e:	e8 41 9c 01 00       	call   c00268b4 <__subdf3>
c000cc73:	83 c4 18             	add    esp,0x18
c000cc76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7e:	52                   	push   edx
c000cc7f:	50                   	push   eax
c000cc80:	e8 db a6 01 00       	call   c0027360 <lrint>
c000cc85:	0f af f8             	imul   edi,eax
c000cc88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	01 f8                	add    eax,edi
c000cc91:	99                   	cdq    
c000cc92:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc95:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc98:	e9 fd fb ff ff       	jmp    c000c89a <sinc_quad_vari_process+0x2b8>
c000cc9d:	83 c4 4c             	add    esp,0x4c
c000cca0:	89 d0                	mov    eax,edx
c000cca2:	5b                   	pop    ebx
c000cca3:	5e                   	pop    esi
c000cca4:	5f                   	pop    edi
c000cca5:	5d                   	pop    ebp
c000cca6:	c3                   	ret    

c000cca7 <sinc_stereo_vari_process>:
c000cca7:	55                   	push   ebp
c000cca8:	ba 05 00 00 00       	mov    edx,0x5
c000ccad:	57                   	push   edi
c000ccae:	56                   	push   esi
c000ccaf:	53                   	push   ebx
c000ccb0:	83 ec 4c             	sub    esp,0x4c
c000ccb3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ccb7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ccbb:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ccbe:	85 db                	test   ebx,ebx
c000ccc0:	0f 84 9c 06 00 00    	je     c000d362 <sinc_stereo_vari_process+0x6bb>
c000ccc6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ccc9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cccc:	0f af c7             	imul   eax,edi
c000cccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ccd2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccd5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ccdc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cce3:	0f af c7             	imul   eax,edi
c000cce6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cce9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccf7:	68 00 00 70 3f       	push   0x3f700000
c000ccfc:	6a 00                	push   0x0
c000ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd06:	e8 a4 a4 01 00       	call   c00271af <__ltdf2>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	ba 16 00 00 00       	mov    edx,0x16
c000cd13:	85 c0                	test   eax,eax
c000cd15:	0f 88 47 06 00 00    	js     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd1b:	68 00 00 70 40       	push   0x40700000
c000cd20:	6a 00                	push   0x0
c000cd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd2a:	e8 62 a4 01 00       	call   c0027191 <__gtdf2>
c000cd2f:	83 c4 10             	add    esp,0x10
c000cd32:	ba 16 00 00 00       	mov    edx,0x16
c000cd37:	85 c0                	test   eax,eax
c000cd39:	0f 8f 23 06 00 00    	jg     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd3f:	83 ec 0c             	sub    esp,0xc
c000cd42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd45:	e8 f9 a1 01 00       	call   c0026f43 <__floatsidf>
c000cd4a:	83 c4 10             	add    esp,0x10
c000cd4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd55:	68 00 00 00 40       	push   0x40000000
c000cd5a:	6a 00                	push   0x0
c000cd5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd64:	e8 fa 94 01 00       	call   c0026263 <__adddf3>
c000cd69:	59                   	pop    ecx
c000cd6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 c9 a1 01 00       	call   c0026f43 <__floatsidf>
c000cd7a:	83 c4 10             	add    esp,0x10
c000cd7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd81:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd85:	52                   	push   edx
c000cd86:	50                   	push   eax
c000cd87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8f:	e8 30 9e 01 00       	call   c0026bc4 <__divdf3>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd9f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cda2:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cda5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbd:	e8 cf a3 01 00       	call   c0027191 <__gtdf2>
c000cdc2:	83 c4 10             	add    esp,0x10
c000cdc5:	85 c0                	test   eax,eax
c000cdc7:	7e 2d                	jle    c000cdf6 <sinc_stereo_vari_process+0x14f>
c000cdc9:	68 00 00 f0 3f       	push   0x3ff00000
c000cdce:	6a 00                	push   0x0
c000cdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd8:	e8 d2 a3 01 00       	call   c00271af <__ltdf2>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	85 c0                	test   eax,eax
c000cde2:	79 4d                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdf4:	eb 1b                	jmp    c000ce11 <sinc_stereo_vari_process+0x16a>
c000cdf6:	68 00 00 f0 3f       	push   0x3ff00000
c000cdfb:	6a 00                	push   0x0
c000cdfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce05:	e8 a5 a3 01 00       	call   c00271af <__ltdf2>
c000ce0a:	83 c4 10             	add    esp,0x10
c000ce0d:	85 c0                	test   eax,eax
c000ce0f:	79 20                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000ce11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce21:	e8 9e 9d 01 00       	call   c0026bc4 <__divdf3>
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce31:	50                   	push   eax
c000ce32:	50                   	push   eax
c000ce33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce37:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce3b:	e8 20 a5 01 00       	call   c0027360 <lrint>
c000ce40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce43:	40                   	inc    eax
c000ce44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce48:	0f af c7             	imul   eax,edi
c000ce4b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce52:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce56:	58                   	pop    eax
c000ce57:	5a                   	pop    edx
c000ce58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce60:	e8 fb a4 01 00       	call   c0027360 <lrint>
c000ce65:	83 ec 0c             	sub    esp,0xc
c000ce68:	50                   	push   eax
c000ce69:	e8 d5 a0 01 00       	call   c0026f43 <__floatsidf>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce79:	52                   	push   edx
c000ce7a:	50                   	push   eax
c000ce7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce83:	e8 2c 9a 01 00       	call   c00268b4 <__subdf3>
c000ce88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce90:	83 c4 20             	add    esp,0x20
c000ce93:	6a 00                	push   0x0
c000ce95:	6a 00                	push   0x0
c000ce97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9f:	e8 0b a3 01 00       	call   c00271af <__ltdf2>
c000cea4:	83 c4 10             	add    esp,0x10
c000cea7:	85 c0                	test   eax,eax
c000cea9:	79 1f                	jns    c000ceca <sinc_stereo_vari_process+0x223>
c000ceab:	68 00 00 f0 3f       	push   0x3ff00000
c000ceb0:	6a 00                	push   0x0
c000ceb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceba:	e8 a4 93 01 00       	call   c0026263 <__adddf3>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ceca:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cecd:	83 ec 10             	sub    esp,0x10
c000ced0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ced4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee7:	e8 c8 99 01 00       	call   c00268b4 <__subdf3>
c000ceec:	83 c4 18             	add    esp,0x18
c000ceef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cef3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cef7:	52                   	push   edx
c000cef8:	50                   	push   eax
c000cef9:	e8 62 a4 01 00       	call   c0027360 <lrint>
c000cefe:	0f af f8             	imul   edi,eax
c000cf01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf05:	01 f8                	add    eax,edi
c000cf07:	99                   	cdq    
c000cf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cf0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf16:	68 00 00 f0 3f       	push   0x3ff00000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	e8 a2 9c 01 00       	call   c0026bc4 <__divdf3>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf2d:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cf32:	68 23 42 92 0c       	push   0xc924223
c000cf37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3f:	e8 1f 93 01 00       	call   c0026263 <__adddf3>
c000cf44:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf48:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf4c:	83 c4 20             	add    esp,0x20
c000cf4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf57:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf5f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf62:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf65:	7d 50                	jge    c000cfb7 <sinc_stereo_vari_process+0x310>
c000cf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf6d:	01 c8                	add    eax,ecx
c000cf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf72:	99                   	cdq    
c000cf73:	f7 f9                	idiv   ecx
c000cf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf79:	7d 0c                	jge    c000cf87 <sinc_stereo_vari_process+0x2e0>
c000cf7b:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf7e:	85 ff                	test   edi,edi
c000cf80:	79 6c                	jns    c000cfee <sinc_stereo_vari_process+0x347>
c000cf82:	e9 e7 00 00 00       	jmp    c000d06e <sinc_stereo_vari_process+0x3c7>
c000cf87:	50                   	push   eax
c000cf88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8c:	56                   	push   esi
c000cf8d:	53                   	push   ebx
c000cf8e:	e8 4c e7 ff ff       	call   c000b6df <prepare_data>
c000cf93:	83 c4 10             	add    esp,0x10
c000cf96:	89 c2                	mov    edx,eax
c000cf98:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf9b:	85 c0                	test   eax,eax
c000cf9d:	0f 85 bf 03 00 00    	jne    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfa3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cfa6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cfa9:	01 c8                	add    eax,ecx
c000cfab:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cfae:	99                   	cdq    
c000cfaf:	f7 f9                	idiv   ecx
c000cfb1:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cfb5:	7c c4                	jl     c000cf7b <sinc_stereo_vari_process+0x2d4>
c000cfb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfbf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cfc2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfcd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cfd0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cfd3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cfd6:	99                   	cdq    
c000cfd7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfdd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfe0:	99                   	cdq    
c000cfe1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfe4:	31 d2                	xor    edx,edx
c000cfe6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfe9:	e9 74 03 00 00       	jmp    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfee:	83 ec 0c             	sub    esp,0xc
c000cff1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cff4:	e8 4a 9f 01 00       	call   c0026f43 <__floatsidf>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d000:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d004:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d008:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d010:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d014:	e8 4a 92 01 00       	call   c0026263 <__adddf3>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d020:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d024:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d028:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d02c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d034:	e8 2a 92 01 00       	call   c0026263 <__adddf3>
c000d039:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d03c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d040:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d044:	e8 fa 9e 01 00       	call   c0026f43 <__floatsidf>
c000d049:	83 c4 10             	add    esp,0x10
c000d04c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d050:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d054:	52                   	push   edx
c000d055:	50                   	push   eax
c000d056:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05e:	e8 4a a1 01 00       	call   c00271ad <__gedf2>
c000d063:	83 c4 10             	add    esp,0x10
c000d066:	85 c0                	test   eax,eax
c000d068:	0f 89 49 ff ff ff    	jns    c000cfb7 <sinc_stereo_vari_process+0x310>
c000d06e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d072:	0f 8e ef 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d078:	83 ec 10             	sub    esp,0x10
c000d07b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d07e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d081:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d084:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d087:	e8 28 98 01 00       	call   c00268b4 <__subdf3>
c000d08c:	83 c4 18             	add    esp,0x18
c000d08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d093:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d097:	52                   	push   edx
c000d098:	50                   	push   eax
c000d099:	e8 a2 a2 01 00       	call   c0027340 <fabs>
c000d09e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a6:	83 c4 10             	add    esp,0x10
c000d0a9:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d0ae:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d0b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0bb:	e8 d1 a0 01 00       	call   c0027191 <__gtdf2>
c000d0c0:	83 c4 10             	add    esp,0x10
c000d0c3:	85 c0                	test   eax,eax
c000d0c5:	0f 8e 9c 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d0cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0ce:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0d9:	52                   	push   edx
c000d0da:	50                   	push   eax
c000d0db:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0de:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0e1:	e8 ce 97 01 00       	call   c00268b4 <__subdf3>
c000d0e6:	59                   	pop    ecx
c000d0e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0eb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0f2:	e8 4c 9e 01 00       	call   c0026f43 <__floatsidf>
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d102:	52                   	push   edx
c000d103:	50                   	push   eax
c000d104:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10c:	e8 cf 97 01 00       	call   c00268e0 <__muldf3>
c000d111:	5f                   	pop    edi
c000d112:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d116:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d11a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d11d:	e8 21 9e 01 00       	call   c0026f43 <__floatsidf>
c000d122:	83 c4 10             	add    esp,0x10
c000d125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d12d:	52                   	push   edx
c000d12e:	50                   	push   eax
c000d12f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d137:	e8 88 9a 01 00       	call   c0026bc4 <__divdf3>
c000d13c:	83 c4 10             	add    esp,0x10
c000d13f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d143:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d157:	e8 07 91 01 00       	call   c0026263 <__adddf3>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d16d:	e8 d1 9d 01 00       	call   c0026f43 <__floatsidf>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d179:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d17d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18d:	e8 1d a0 01 00       	call   c00271af <__ltdf2>
c000d192:	83 c4 10             	add    esp,0x10
c000d195:	85 c0                	test   eax,eax
c000d197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d19b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d19f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d1a3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d1a7:	78 10                	js     c000d1b9 <sinc_stereo_vari_process+0x512>
c000d1a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c9:	e8 12 97 01 00       	call   c00268e0 <__muldf3>
c000d1ce:	59                   	pop    ecx
c000d1cf:	5f                   	pop    edi
c000d1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1e0:	e8 d3 e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d1e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1e9:	89 c7                	mov    edi,eax
c000d1eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f7:	e8 e4 96 01 00       	call   c00268e0 <__muldf3>
c000d1fc:	83 c4 18             	add    esp,0x18
c000d1ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d203:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d207:	52                   	push   edx
c000d208:	50                   	push   eax
c000d209:	e8 aa e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d20e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d211:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d215:	83 c4 0c             	add    esp,0xc
c000d218:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d21b:	8d 04 90             	lea    eax,[eax+edx*4]
c000d21e:	50                   	push   eax
c000d21f:	50                   	push   eax
c000d220:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d223:	e8 1b 9d 01 00       	call   c0026f43 <__floatsidf>
c000d228:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d22c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d234:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d238:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d23c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d240:	e8 7f 99 01 00       	call   c0026bc4 <__divdf3>
c000d245:	83 c4 18             	add    esp,0x18
c000d248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d24c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d250:	52                   	push   edx
c000d251:	89 fa                	mov    edx,edi
c000d253:	50                   	push   eax
c000d254:	89 d8                	mov    eax,ebx
c000d256:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d25a:	e8 02 c7 ff ff       	call   c0009961 <calc_output_stereo>
c000d25f:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d263:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d267:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d26f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d273:	e8 4c 99 01 00       	call   c0026bc4 <__divdf3>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d28f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d293:	e8 cb 8f 01 00       	call   c0026263 <__adddf3>
c000d298:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d29c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d2a0:	83 c4 18             	add    esp,0x18
c000d2a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ab:	e8 b0 a0 01 00       	call   c0027360 <lrint>
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	50                   	push   eax
c000d2b4:	e8 8a 9c 01 00       	call   c0026f43 <__floatsidf>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d2c4:	52                   	push   edx
c000d2c5:	50                   	push   eax
c000d2c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ce:	e8 e1 95 01 00       	call   c00268b4 <__subdf3>
c000d2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2db:	83 c4 20             	add    esp,0x20
c000d2de:	6a 00                	push   0x0
c000d2e0:	6a 00                	push   0x0
c000d2e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ea:	e8 c0 9e 01 00       	call   c00271af <__ltdf2>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	85 c0                	test   eax,eax
c000d2f4:	79 20                	jns    c000d316 <sinc_stereo_vari_process+0x66f>
c000d2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d302:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d306:	e8 58 8f 01 00       	call   c0026263 <__adddf3>
c000d30b:	83 c4 10             	add    esp,0x10
c000d30e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d312:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d316:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d319:	83 ec 10             	sub    esp,0x10
c000d31c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d320:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d32f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d333:	e8 7c 95 01 00       	call   c00268b4 <__subdf3>
c000d338:	83 c4 18             	add    esp,0x18
c000d33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d33f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d343:	52                   	push   edx
c000d344:	50                   	push   eax
c000d345:	e8 16 a0 01 00       	call   c0027360 <lrint>
c000d34a:	0f af f8             	imul   edi,eax
c000d34d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	01 f8                	add    eax,edi
c000d356:	99                   	cdq    
c000d357:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d35a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d35d:	e9 fd fb ff ff       	jmp    c000cf5f <sinc_stereo_vari_process+0x2b8>
c000d362:	83 c4 4c             	add    esp,0x4c
c000d365:	89 d0                	mov    eax,edx
c000d367:	5b                   	pop    ebx
c000d368:	5e                   	pop    esi
c000d369:	5f                   	pop    edi
c000d36a:	5d                   	pop    ebp
c000d36b:	c3                   	ret    

c000d36c <sinc_mono_vari_process>:
c000d36c:	55                   	push   ebp
c000d36d:	ba 05 00 00 00       	mov    edx,0x5
c000d372:	57                   	push   edi
c000d373:	56                   	push   esi
c000d374:	53                   	push   ebx
c000d375:	83 ec 4c             	sub    esp,0x4c
c000d378:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d37c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d380:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d383:	85 db                	test   ebx,ebx
c000d385:	0f 84 c1 06 00 00    	je     c000da4c <sinc_mono_vari_process+0x6e0>
c000d38b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d38e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d391:	0f af c7             	imul   eax,edi
c000d394:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d397:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d39a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d3a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d3a8:	0f af c7             	imul   eax,edi
c000d3ab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d3ae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3bf:	68 00 00 70 3f       	push   0x3f700000
c000d3c4:	6a 00                	push   0x0
c000d3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ce:	e8 dc 9d 01 00       	call   c00271af <__ltdf2>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	ba 16 00 00 00       	mov    edx,0x16
c000d3db:	85 c0                	test   eax,eax
c000d3dd:	0f 88 69 06 00 00    	js     c000da4c <sinc_mono_vari_process+0x6e0>
c000d3e3:	68 00 00 70 40       	push   0x40700000
c000d3e8:	6a 00                	push   0x0
c000d3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f2:	e8 9a 9d 01 00       	call   c0027191 <__gtdf2>
c000d3f7:	83 c4 10             	add    esp,0x10
c000d3fa:	ba 16 00 00 00       	mov    edx,0x16
c000d3ff:	85 c0                	test   eax,eax
c000d401:	0f 8f 45 06 00 00    	jg     c000da4c <sinc_mono_vari_process+0x6e0>
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d40d:	e8 31 9b 01 00       	call   c0026f43 <__floatsidf>
c000d412:	83 c4 10             	add    esp,0x10
c000d415:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d41d:	68 00 00 00 40       	push   0x40000000
c000d422:	6a 00                	push   0x0
c000d424:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d428:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d42c:	e8 32 8e 01 00       	call   c0026263 <__adddf3>
c000d431:	59                   	pop    ecx
c000d432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d436:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d43a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43d:	e8 01 9b 01 00       	call   c0026f43 <__floatsidf>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d449:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d44d:	52                   	push   edx
c000d44e:	50                   	push   eax
c000d44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d457:	e8 68 97 01 00       	call   c0026bc4 <__divdf3>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d463:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d467:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d46a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d485:	e8 07 9d 01 00       	call   c0027191 <__gtdf2>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	85 c0                	test   eax,eax
c000d48f:	7e 2d                	jle    c000d4be <sinc_mono_vari_process+0x152>
c000d491:	68 00 00 f0 3f       	push   0x3ff00000
c000d496:	6a 00                	push   0x0
c000d498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a0:	e8 0a 9d 01 00       	call   c00271af <__ltdf2>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	85 c0                	test   eax,eax
c000d4aa:	79 4d                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d4b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4bc:	eb 1b                	jmp    c000d4d9 <sinc_mono_vari_process+0x16d>
c000d4be:	68 00 00 f0 3f       	push   0x3ff00000
c000d4c3:	6a 00                	push   0x0
c000d4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4cd:	e8 dd 9c 01 00       	call   c00271af <__ltdf2>
c000d4d2:	83 c4 10             	add    esp,0x10
c000d4d5:	85 c0                	test   eax,eax
c000d4d7:	79 20                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e9:	e8 d6 96 01 00       	call   c0026bc4 <__divdf3>
c000d4ee:	83 c4 10             	add    esp,0x10
c000d4f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4f9:	50                   	push   eax
c000d4fa:	50                   	push   eax
c000d4fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d503:	e8 58 9e 01 00       	call   c0027360 <lrint>
c000d508:	40                   	inc    eax
c000d509:	0f af c7             	imul   eax,edi
c000d50c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d510:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d514:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d522:	58                   	pop    eax
c000d523:	5a                   	pop    edx
c000d524:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d528:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d52c:	e8 2f 9e 01 00       	call   c0027360 <lrint>
c000d531:	83 ec 0c             	sub    esp,0xc
c000d534:	50                   	push   eax
c000d535:	e8 09 9a 01 00       	call   c0026f43 <__floatsidf>
c000d53a:	83 c4 10             	add    esp,0x10
c000d53d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d541:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d545:	52                   	push   edx
c000d546:	50                   	push   eax
c000d547:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	e8 60 93 01 00       	call   c00268b4 <__subdf3>
c000d554:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d558:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55c:	83 c4 20             	add    esp,0x20
c000d55f:	6a 00                	push   0x0
c000d561:	6a 00                	push   0x0
c000d563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d56b:	e8 3f 9c 01 00       	call   c00271af <__ltdf2>
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	85 c0                	test   eax,eax
c000d575:	79 1f                	jns    c000d596 <sinc_mono_vari_process+0x22a>
c000d577:	68 00 00 f0 3f       	push   0x3ff00000
c000d57c:	6a 00                	push   0x0
c000d57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d582:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d586:	e8 d8 8c 01 00       	call   c0026263 <__adddf3>
c000d58b:	83 c4 10             	add    esp,0x10
c000d58e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d596:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d599:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d59c:	83 ec 10             	sub    esp,0x10
c000d59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5af:	e8 00 93 01 00       	call   c00268b4 <__subdf3>
c000d5b4:	83 c4 18             	add    esp,0x18
c000d5b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5bf:	52                   	push   edx
c000d5c0:	50                   	push   eax
c000d5c1:	e8 9a 9d 01 00       	call   c0027360 <lrint>
c000d5c6:	0f af f8             	imul   edi,eax
c000d5c9:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d5cc:	31 ff                	xor    edi,edi
c000d5ce:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d5d3:	99                   	cdq    
c000d5d4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d5d7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5e2:	55                   	push   ebp
c000d5e3:	57                   	push   edi
c000d5e4:	e8 db 95 01 00       	call   c0026bc4 <__divdf3>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5f4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5f9:	68 23 42 92 0c       	push   0xc924223
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d606:	e8 58 8c 01 00       	call   c0026263 <__adddf3>
c000d60b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d60f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d613:	83 c4 20             	add    esp,0x20
c000d616:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d61a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d61e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d621:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d624:	7d 54                	jge    c000d67a <sinc_mono_vari_process+0x30e>
c000d626:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d629:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d62c:	01 c8                	add    eax,ecx
c000d62e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d631:	99                   	cdq    
c000d632:	f7 f9                	idiv   ecx
c000d634:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d638:	7d 0c                	jge    c000d646 <sinc_mono_vari_process+0x2da>
c000d63a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d63d:	85 ff                	test   edi,edi
c000d63f:	79 73                	jns    c000d6b4 <sinc_mono_vari_process+0x348>
c000d641:	e9 ee 00 00 00       	jmp    c000d734 <sinc_mono_vari_process+0x3c8>
c000d646:	50                   	push   eax
c000d647:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d64b:	56                   	push   esi
c000d64c:	53                   	push   ebx
c000d64d:	e8 8d e0 ff ff       	call   c000b6df <prepare_data>
c000d652:	89 c2                	mov    edx,eax
c000d654:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d65e:	85 d2                	test   edx,edx
c000d660:	0f 85 e6 03 00 00    	jne    c000da4c <sinc_mono_vari_process+0x6e0>
c000d666:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d669:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d66c:	01 c8                	add    eax,ecx
c000d66e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d671:	99                   	cdq    
c000d672:	f7 f9                	idiv   ecx
c000d674:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d678:	7c c0                	jl     c000d63a <sinc_mono_vari_process+0x2ce>
c000d67a:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d686:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d689:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d690:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d694:	89 01                	mov    DWORD PTR [ecx],eax
c000d696:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d699:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d69c:	99                   	cdq    
c000d69d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6a0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d6a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d6a6:	99                   	cdq    
c000d6a7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6aa:	31 d2                	xor    edx,edx
c000d6ac:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d6af:	e9 98 03 00 00       	jmp    c000da4c <sinc_mono_vari_process+0x6e0>
c000d6b4:	83 ec 0c             	sub    esp,0xc
c000d6b7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d6ba:	e8 84 98 01 00       	call   c0026f43 <__floatsidf>
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6da:	e8 84 8b 01 00       	call   c0026263 <__adddf3>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6fa:	e8 64 8b 01 00       	call   c0026263 <__adddf3>
c000d6ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d702:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d706:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d70a:	e8 34 98 01 00       	call   c0026f43 <__floatsidf>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d716:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d71a:	52                   	push   edx
c000d71b:	50                   	push   eax
c000d71c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d720:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d724:	e8 68 9a 01 00       	call   c0027191 <__gtdf2>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	85 c0                	test   eax,eax
c000d72e:	0f 8f 46 ff ff ff    	jg     c000d67a <sinc_mono_vari_process+0x30e>
c000d734:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d738:	0f 8e f5 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d73e:	83 ec 10             	sub    esp,0x10
c000d741:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d744:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d747:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d74b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d74e:	ff 30                	push   DWORD PTR [eax]
c000d750:	e8 5f 91 01 00       	call   c00268b4 <__subdf3>
c000d755:	83 c4 18             	add    esp,0x18
c000d758:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d75c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d760:	52                   	push   edx
c000d761:	50                   	push   eax
c000d762:	e8 d9 9b 01 00       	call   c0027340 <fabs>
c000d767:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d76b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d76f:	83 c4 10             	add    esp,0x10
c000d772:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d777:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d77c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d780:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d784:	e8 08 9a 01 00       	call   c0027191 <__gtdf2>
c000d789:	83 c4 10             	add    esp,0x10
c000d78c:	85 c0                	test   eax,eax
c000d78e:	0f 8e 9f 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d794:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d798:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d79b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d79d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7a5:	52                   	push   edx
c000d7a6:	50                   	push   eax
c000d7a7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d7aa:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d7ad:	e8 02 91 01 00       	call   c00268b4 <__subdf3>
c000d7b2:	5f                   	pop    edi
c000d7b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d7be:	e8 80 97 01 00       	call   c0026f43 <__floatsidf>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7ce:	52                   	push   edx
c000d7cf:	50                   	push   eax
c000d7d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d8:	e8 03 91 01 00       	call   c00268e0 <__muldf3>
c000d7dd:	5d                   	pop    ebp
c000d7de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7e6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7e9:	e8 55 97 01 00       	call   c0026f43 <__floatsidf>
c000d7ee:	83 c4 10             	add    esp,0x10
c000d7f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7f9:	52                   	push   edx
c000d7fa:	50                   	push   eax
c000d7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d803:	e8 bc 93 01 00       	call   c0026bc4 <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d817:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d81b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d823:	e8 3b 8a 01 00       	call   c0026263 <__adddf3>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d82f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d833:	83 ec 0c             	sub    esp,0xc
c000d836:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d839:	e8 05 97 01 00       	call   c0026f43 <__floatsidf>
c000d83e:	83 c4 10             	add    esp,0x10
c000d841:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d845:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d859:	e8 51 99 01 00       	call   c00271af <__ltdf2>
c000d85e:	83 c4 10             	add    esp,0x10
c000d861:	85 c0                	test   eax,eax
c000d863:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d867:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d86b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d86f:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d873:	78 10                	js     c000d885 <sinc_mono_vari_process+0x519>
c000d875:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d879:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d87d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d881:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d885:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d889:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d88d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d891:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d895:	e8 46 90 01 00       	call   c00268e0 <__muldf3>
c000d89a:	59                   	pop    ecx
c000d89b:	5f                   	pop    edi
c000d89c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ac:	e8 07 de ff ff       	call   c000b6b8 <double_to_fp>
c000d8b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b5:	89 c7                	mov    edi,eax
c000d8b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8c3:	e8 18 90 01 00       	call   c00268e0 <__muldf3>
c000d8c8:	83 c4 18             	add    esp,0x18
c000d8cb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d3:	52                   	push   edx
c000d8d4:	50                   	push   eax
c000d8d5:	e8 de dd ff ff       	call   c000b6b8 <double_to_fp>
c000d8da:	83 ec 0c             	sub    esp,0xc
c000d8dd:	89 c5                	mov    ebp,eax
c000d8df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8e2:	e8 5c 96 01 00       	call   c0026f43 <__floatsidf>
c000d8e7:	83 c4 10             	add    esp,0x10
c000d8ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8ee:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f2:	52                   	push   edx
c000d8f3:	50                   	push   eax
c000d8f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fc:	e8 c3 92 01 00       	call   c0026bc4 <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 e9                	mov    ecx,ebp
c000d906:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d90a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d90e:	89 d8                	mov    eax,ebx
c000d910:	89 fa                	mov    edx,edi
c000d912:	e8 ee bd ff ff       	call   c0009705 <calc_output_single>
c000d917:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d91a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d91d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d921:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d925:	52                   	push   edx
c000d926:	50                   	push   eax
c000d927:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92f:	e8 ac 8f 01 00       	call   c00268e0 <__muldf3>
c000d934:	59                   	pop    ecx
c000d935:	59                   	pop    ecx
c000d936:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d93a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d93e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d942:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d946:	e8 68 98 01 00       	call   c00271b3 <__truncdfsf2>
c000d94b:	83 c4 10             	add    esp,0x10
c000d94e:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d951:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d954:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d958:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d95c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d960:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d964:	e8 5b 92 01 00       	call   c0026bc4 <__divdf3>
c000d969:	83 c4 10             	add    esp,0x10
c000d96c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d970:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d97c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d980:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d984:	e8 da 88 01 00       	call   c0026263 <__adddf3>
c000d989:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d98d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d991:	83 c4 18             	add    esp,0x18
c000d994:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d998:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99c:	e8 bf 99 01 00       	call   c0027360 <lrint>
c000d9a1:	83 ec 0c             	sub    esp,0xc
c000d9a4:	50                   	push   eax
c000d9a5:	e8 99 95 01 00       	call   c0026f43 <__floatsidf>
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9b5:	52                   	push   edx
c000d9b6:	50                   	push   eax
c000d9b7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bf:	e8 f0 8e 01 00       	call   c00268b4 <__subdf3>
c000d9c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9cc:	83 c4 20             	add    esp,0x20
c000d9cf:	6a 00                	push   0x0
c000d9d1:	6a 00                	push   0x0
c000d9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9db:	e8 cf 97 01 00       	call   c00271af <__ltdf2>
c000d9e0:	83 c4 10             	add    esp,0x10
c000d9e3:	85 c0                	test   eax,eax
c000d9e5:	79 20                	jns    c000da07 <sinc_mono_vari_process+0x69b>
c000d9e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f7:	e8 67 88 01 00       	call   c0026263 <__adddf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da07:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000da0a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000da0d:	83 ec 10             	sub    esp,0x10
c000da10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da20:	e8 8f 8e 01 00       	call   c00268b4 <__subdf3>
c000da25:	83 c4 18             	add    esp,0x18
c000da28:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da30:	52                   	push   edx
c000da31:	50                   	push   eax
c000da32:	e8 29 99 01 00       	call   c0027360 <lrint>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	0f af f8             	imul   edi,eax
c000da3d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da40:	99                   	cdq    
c000da41:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da44:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da47:	e9 d2 fb ff ff       	jmp    c000d61e <sinc_mono_vari_process+0x2b2>
c000da4c:	83 c4 4c             	add    esp,0x4c
c000da4f:	89 d0                	mov    eax,edx
c000da51:	5b                   	pop    ebx
c000da52:	5e                   	pop    esi
c000da53:	5f                   	pop    edi
c000da54:	5d                   	pop    ebp
c000da55:	c3                   	ret    

c000da56 <sinc_get_name>:
c000da56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da5a:	31 c0                	xor    eax,eax
c000da5c:	83 fa 02             	cmp    edx,0x2
c000da5f:	77 07                	ja     c000da68 <sinc_get_name+0x12>
c000da61:	8b 04 95 04 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd74fc]
c000da68:	c3                   	ret    

c000da69 <sinc_get_description>:
c000da69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da6d:	31 c0                	xor    eax,eax
c000da6f:	83 fa 02             	cmp    edx,0x2
c000da72:	77 07                	ja     c000da7b <sinc_get_description+0x12>
c000da74:	8b 04 95 f8 8a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7508]
c000da7b:	c3                   	ret    

c000da7c <sinc_set_converter>:
c000da7c:	53                   	push   ebx
c000da7d:	81 ec 58 08 00 00    	sub    esp,0x858
c000da83:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da8a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da8d:	85 c0                	test   eax,eax
c000da8f:	74 13                	je     c000daa4 <sinc_set_converter+0x28>
c000da91:	83 ec 0c             	sub    esp,0xc
c000da94:	50                   	push   eax
c000da95:	e8 9a 1b 00 00       	call   c000f634 <free>
c000da9a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	50                   	push   eax
c000daa5:	68 44 08 00 00       	push   0x844
c000daaa:	6a 00                	push   0x0
c000daac:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dab0:	50                   	push   eax
c000dab1:	e8 0e 2c ff ff       	call   c00006c4 <memset>
c000dab6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	b8 0b 00 00 00       	mov    eax,0xb
c000dac1:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dac7:	7f 6e                	jg     c000db37 <sinc_set_converter+0xbb>
c000dac9:	83 fa 01             	cmp    edx,0x1
c000dacc:	75 10                	jne    c000dade <sinc_set_converter+0x62>
c000dace:	c7 43 24 6c d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d36c
c000dad5:	c7 43 20 6c d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d36c
c000dadc:	eb 4d                	jmp    c000db2b <sinc_set_converter+0xaf>
c000dade:	83 fa 02             	cmp    edx,0x2
c000dae1:	75 10                	jne    c000daf3 <sinc_set_converter+0x77>
c000dae3:	c7 43 24 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cca7
c000daea:	c7 43 20 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cca7
c000daf1:	eb 38                	jmp    c000db2b <sinc_set_converter+0xaf>
c000daf3:	83 fa 04             	cmp    edx,0x4
c000daf6:	75 10                	jne    c000db08 <sinc_set_converter+0x8c>
c000daf8:	c7 43 24 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5e2
c000daff:	c7 43 20 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5e2
c000db06:	eb 23                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db08:	83 fa 06             	cmp    edx,0x6
c000db0b:	75 10                	jne    c000db1d <sinc_set_converter+0xa1>
c000db0d:	c7 43 24 1d bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf1d
c000db14:	c7 43 20 1d bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf1d
c000db1b:	eb 0e                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db1d:	c7 43 24 59 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b859
c000db24:	c7 43 20 59 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b859
c000db2b:	c7 43 28 0c ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab0c
c000db32:	b8 0a 00 00 00       	mov    eax,0xa
c000db37:	81 c4 58 08 00 00    	add    esp,0x858
c000db3d:	5b                   	pop    ebx
c000db3e:	c3                   	ret    

c000db3f <zoh_vari_process>:
c000db3f:	55                   	push   ebp
c000db40:	31 d2                	xor    edx,edx
c000db42:	57                   	push   edi
c000db43:	56                   	push   esi
c000db44:	53                   	push   ebx
c000db45:	83 ec 3c             	sub    esp,0x3c
c000db48:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db4c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db50:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db54:	0f 8e 80 06 00 00    	jle    c000e1da <zoh_vari_process+0x69b>
c000db5a:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db5d:	ba 05 00 00 00       	mov    edx,0x5
c000db62:	85 db                	test   ebx,ebx
c000db64:	0f 84 70 06 00 00    	je     c000e1da <zoh_vari_process+0x69b>
c000db6a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db6d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db71:	74 19                	je     c000db8c <zoh_vari_process+0x4d>
c000db73:	31 d2                	xor    edx,edx
c000db75:	39 c2                	cmp    edx,eax
c000db77:	7d 0c                	jge    c000db85 <zoh_vari_process+0x46>
c000db79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db7b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db7e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db82:	42                   	inc    edx
c000db83:	eb f0                	jmp    c000db75 <zoh_vari_process+0x36>
c000db85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db8c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db8f:	0f af d0             	imul   edx,eax
c000db92:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db95:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db99:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dba0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dba3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dbaa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dbad:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbb7:	68 00 00 70 3f       	push   0x3f700000
c000dbbc:	6a 00                	push   0x0
c000dbbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc6:	e8 e4 95 01 00       	call   c00271af <__ltdf2>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	ba 16 00 00 00       	mov    edx,0x16
c000dbd3:	85 c0                	test   eax,eax
c000dbd5:	0f 88 ff 05 00 00    	js     c000e1da <zoh_vari_process+0x69b>
c000dbdb:	68 00 00 70 40       	push   0x40700000
c000dbe0:	6a 00                	push   0x0
c000dbe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbea:	e8 a2 95 01 00       	call   c0027191 <__gtdf2>
c000dbef:	83 c4 10             	add    esp,0x10
c000dbf2:	ba 16 00 00 00       	mov    edx,0x16
c000dbf7:	85 c0                	test   eax,eax
c000dbf9:	0f 8f db 05 00 00    	jg     c000e1da <zoh_vari_process+0x69b>
c000dbff:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc02:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc0d:	68 00 00 f0 3f       	push   0x3ff00000
c000dc12:	6a 00                	push   0x0
c000dc14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1c:	e8 8e 95 01 00       	call   c00271af <__ltdf2>
c000dc21:	83 c4 10             	add    esp,0x10
c000dc24:	85 c0                	test   eax,eax
c000dc26:	0f 89 da 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dc2c:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dc2f:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dc32:	0f 8d ce 01 00 00    	jge    c000de06 <zoh_vari_process+0x2c7>
c000dc38:	83 ec 0c             	sub    esp,0xc
c000dc3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc3e:	e8 00 93 01 00       	call   c0026f43 <__floatsidf>
c000dc43:	83 c4 10             	add    esp,0x10
c000dc46:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc5d:	e8 7e 8c 01 00       	call   c00268e0 <__muldf3>
c000dc62:	59                   	pop    ecx
c000dc63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc67:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc6b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc6e:	e8 d0 92 01 00       	call   c0026f43 <__floatsidf>
c000dc73:	83 c4 10             	add    esp,0x10
c000dc76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc7e:	52                   	push   edx
c000dc7f:	50                   	push   eax
c000dc80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc88:	e8 d6 85 01 00       	call   c0026263 <__adddf3>
c000dc8d:	59                   	pop    ecx
c000dc8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc96:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc99:	e8 a5 92 01 00       	call   c0026f43 <__floatsidf>
c000dc9e:	83 c4 10             	add    esp,0x10
c000dca1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dca5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dca9:	52                   	push   edx
c000dcaa:	50                   	push   eax
c000dcab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcb3:	e8 f5 94 01 00       	call   c00271ad <__gedf2>
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	85 c0                	test   eax,eax
c000dcbd:	0f 89 43 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dcc3:	85 ed                	test   ebp,ebp
c000dcc5:	0f 8e ec 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dccb:	83 ec 10             	sub    esp,0x10
c000dcce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcd1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcd4:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dcd7:	ff 37                	push   DWORD PTR [edi]
c000dcd9:	e8 d6 8b 01 00       	call   c00268b4 <__subdf3>
c000dcde:	83 c4 18             	add    esp,0x18
c000dce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dce9:	52                   	push   edx
c000dcea:	50                   	push   eax
c000dceb:	e8 50 96 01 00       	call   c0027340 <fabs>
c000dcf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcf4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dd00:	68 23 42 92 0c       	push   0xc924223
c000dd05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd0d:	e8 7f 94 01 00       	call   c0027191 <__gtdf2>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	85 c0                	test   eax,eax
c000dd17:	0f 8e 9a 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dd1d:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd1f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd22:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd29:	52                   	push   edx
c000dd2a:	50                   	push   eax
c000dd2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dd2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dd31:	e8 7e 8b 01 00       	call   c00268b4 <__subdf3>
c000dd36:	59                   	pop    ecx
c000dd37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd3b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd3f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd42:	e8 fc 91 01 00       	call   c0026f43 <__floatsidf>
c000dd47:	83 c4 10             	add    esp,0x10
c000dd4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd52:	52                   	push   edx
c000dd53:	50                   	push   eax
c000dd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5c:	e8 7f 8b 01 00       	call   c00268e0 <__muldf3>
c000dd61:	5d                   	pop    ebp
c000dd62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd6a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd6d:	e8 d1 91 01 00       	call   c0026f43 <__floatsidf>
c000dd72:	83 c4 10             	add    esp,0x10
c000dd75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd7d:	52                   	push   edx
c000dd7e:	50                   	push   eax
c000dd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd87:	e8 38 8e 01 00       	call   c0026bc4 <__divdf3>
c000dd8c:	83 c4 10             	add    esp,0x10
c000dd8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd97:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda7:	e8 b7 84 01 00       	call   c0026263 <__adddf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddb7:	31 c0                	xor    eax,eax
c000ddb9:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ddbc:	7e 13                	jle    c000ddd1 <zoh_vari_process+0x292>
c000ddbe:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000ddc2:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ddc5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ddc8:	40                   	inc    eax
c000ddc9:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000ddcc:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ddcf:	eb e8                	jmp    c000ddb9 <zoh_vari_process+0x27a>
c000ddd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd9:	68 00 00 f0 3f       	push   0x3ff00000
c000ddde:	6a 00                	push   0x0
c000dde0:	e8 df 8d 01 00       	call   c0026bc4 <__divdf3>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddeb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddef:	52                   	push   edx
c000ddf0:	50                   	push   eax
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 65 84 01 00       	call   c0026263 <__adddf3>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	e9 ff fd ff ff       	jmp    c000dc05 <zoh_vari_process+0xc6>
c000de06:	55                   	push   ebp
c000de07:	55                   	push   ebp
c000de08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de10:	e8 4b 95 01 00       	call   c0027360 <lrint>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	50                   	push   eax
c000de19:	e8 25 91 01 00       	call   c0026f43 <__floatsidf>
c000de1e:	83 c4 10             	add    esp,0x10
c000de21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de29:	52                   	push   edx
c000de2a:	50                   	push   eax
c000de2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de33:	e8 7c 8a 01 00       	call   c00268b4 <__subdf3>
c000de38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de3c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de40:	83 c4 20             	add    esp,0x20
c000de43:	6a 00                	push   0x0
c000de45:	6a 00                	push   0x0
c000de47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4f:	e8 5b 93 01 00       	call   c00271af <__ltdf2>
c000de54:	83 c4 10             	add    esp,0x10
c000de57:	85 c0                	test   eax,eax
c000de59:	79 1e                	jns    c000de79 <zoh_vari_process+0x33a>
c000de5b:	68 00 00 f0 3f       	push   0x3ff00000
c000de60:	6a 00                	push   0x0
c000de62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de6a:	e8 f4 83 01 00       	call   c0026263 <__adddf3>
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	89 04 24             	mov    DWORD PTR [esp],eax
c000de75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de79:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de7c:	83 ec 10             	sub    esp,0x10
c000de7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8f:	e8 20 8a 01 00       	call   c00268b4 <__subdf3>
c000de94:	83 c4 18             	add    esp,0x18
c000de97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9f:	52                   	push   edx
c000dea0:	50                   	push   eax
c000dea1:	e8 ba 94 01 00       	call   c0027360 <lrint>
c000dea6:	83 c4 10             	add    esp,0x10
c000dea9:	0f af e8             	imul   ebp,eax
c000deac:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000deaf:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000deb2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000deb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000deb9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000debc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec0:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dec3:	0f 8d 7a 02 00 00    	jge    c000e143 <zoh_vari_process+0x604>
c000dec9:	83 ec 0c             	sub    esp,0xc
c000decc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000decf:	e8 6f 90 01 00       	call   c0026f43 <__floatsidf>
c000ded4:	83 c4 10             	add    esp,0x10
c000ded7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dedb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dedf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deef:	e8 ec 89 01 00       	call   c00268e0 <__muldf3>
c000def4:	59                   	pop    ecx
c000def5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000def9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000defd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df01:	e8 3d 90 01 00       	call   c0026f43 <__floatsidf>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df0d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df11:	52                   	push   edx
c000df12:	50                   	push   eax
c000df13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df1b:	e8 43 83 01 00       	call   c0026263 <__adddf3>
c000df20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000df23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000df2b:	e8 13 90 01 00       	call   c0026f43 <__floatsidf>
c000df30:	83 c4 10             	add    esp,0x10
c000df33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df37:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df3b:	52                   	push   edx
c000df3c:	50                   	push   eax
c000df3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df45:	e8 67 92 01 00       	call   c00271b1 <__ledf2>
c000df4a:	83 c4 10             	add    esp,0x10
c000df4d:	85 c0                	test   eax,eax
c000df4f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df53:	0f 8f ea 01 00 00    	jg     c000e143 <zoh_vari_process+0x604>
c000df59:	85 c9                	test   ecx,ecx
c000df5b:	0f 8e ed 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000df61:	83 ec 10             	sub    esp,0x10
c000df64:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df67:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df6a:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df6d:	ff 37                	push   DWORD PTR [edi]
c000df6f:	e8 40 89 01 00       	call   c00268b4 <__subdf3>
c000df74:	83 c4 18             	add    esp,0x18
c000df77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df7f:	52                   	push   edx
c000df80:	50                   	push   eax
c000df81:	e8 ba 93 01 00       	call   c0027340 <fabs>
c000df86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df8a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df96:	68 23 42 92 0c       	push   0xc924223
c000df9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa3:	e8 e9 91 01 00       	call   c0027191 <__gtdf2>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	85 c0                	test   eax,eax
c000dfad:	0f 8e 9b 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000dfb3:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfb5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc0:	52                   	push   edx
c000dfc1:	50                   	push   eax
c000dfc2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dfc5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dfc8:	e8 e7 88 01 00       	call   c00268b4 <__subdf3>
c000dfcd:	5d                   	pop    ebp
c000dfce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfd6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfd9:	e8 65 8f 01 00       	call   c0026f43 <__floatsidf>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfe9:	52                   	push   edx
c000dfea:	50                   	push   eax
c000dfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff3:	e8 e8 88 01 00       	call   c00268e0 <__muldf3>
c000dff8:	59                   	pop    ecx
c000dff9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dffd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e001:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e004:	e8 3a 8f 01 00       	call   c0026f43 <__floatsidf>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e014:	52                   	push   edx
c000e015:	50                   	push   eax
c000e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01e:	e8 a1 8b 01 00       	call   c0026bc4 <__divdf3>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e02a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e02e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e032:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03e:	e8 20 82 01 00       	call   c0026263 <__adddf3>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e04a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e04e:	31 d2                	xor    edx,edx
c000e050:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e053:	39 d0                	cmp    eax,edx
c000e055:	7e 1d                	jle    c000e074 <zoh_vari_process+0x535>
c000e057:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e05a:	29 c1                	sub    ecx,eax
c000e05c:	89 c8                	mov    eax,ecx
c000e05e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e060:	01 d0                	add    eax,edx
c000e062:	42                   	inc    edx
c000e063:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e066:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e069:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e06c:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e06f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e072:	eb dc                	jmp    c000e050 <zoh_vari_process+0x511>
c000e074:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e078:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07c:	68 00 00 f0 3f       	push   0x3ff00000
c000e081:	6a 00                	push   0x0
c000e083:	e8 3c 8b 01 00       	call   c0026bc4 <__divdf3>
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e08f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e093:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e097:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a3:	e8 bb 81 01 00       	call   c0026263 <__adddf3>
c000e0a8:	5d                   	pop    ebp
c000e0a9:	59                   	pop    ecx
c000e0aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ba:	e8 a1 92 01 00       	call   c0027360 <lrint>
c000e0bf:	83 ec 0c             	sub    esp,0xc
c000e0c2:	50                   	push   eax
c000e0c3:	e8 7b 8e 01 00       	call   c0026f43 <__floatsidf>
c000e0c8:	83 c4 10             	add    esp,0x10
c000e0cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0d3:	52                   	push   edx
c000e0d4:	50                   	push   eax
c000e0d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0dd:	e8 d2 87 01 00       	call   c00268b4 <__subdf3>
c000e0e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0e6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ea:	83 c4 20             	add    esp,0x20
c000e0ed:	6a 00                	push   0x0
c000e0ef:	6a 00                	push   0x0
c000e0f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f9:	e8 b1 90 01 00       	call   c00271af <__ltdf2>
c000e0fe:	83 c4 10             	add    esp,0x10
c000e101:	85 c0                	test   eax,eax
c000e103:	79 1e                	jns    c000e123 <zoh_vari_process+0x5e4>
c000e105:	68 00 00 f0 3f       	push   0x3ff00000
c000e10a:	6a 00                	push   0x0
c000e10c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e114:	e8 4a 81 01 00       	call   c0026263 <__adddf3>
c000e119:	83 c4 10             	add    esp,0x10
c000e11c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e11f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e123:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e126:	83 ec 10             	sub    esp,0x10
c000e129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e135:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e139:	e8 76 87 01 00       	call   c00268b4 <__subdf3>
c000e13e:	e9 51 fd ff ff       	jmp    c000de94 <zoh_vari_process+0x355>
c000e143:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e147:	7d 3a                	jge    c000e183 <zoh_vari_process+0x644>
c000e149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14d:	83 ec 0c             	sub    esp,0xc
c000e150:	29 e8                	sub    eax,ebp
c000e152:	99                   	cdq    
c000e153:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e156:	50                   	push   eax
c000e157:	e8 e7 8d 01 00       	call   c0026f43 <__floatsidf>
c000e15c:	83 c4 10             	add    esp,0x10
c000e15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e167:	52                   	push   edx
c000e168:	50                   	push   eax
c000e169:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e16d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e171:	e8 ed 80 01 00       	call   c0026263 <__adddf3>
c000e176:	83 c4 10             	add    esp,0x10
c000e179:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e17c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e17f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e183:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e186:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e18a:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e18d:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e190:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e193:	85 c0                	test   eax,eax
c000e195:	7f 25                	jg     c000e1bc <zoh_vari_process+0x67d>
c000e197:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e19b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e19f:	89 07                	mov    DWORD PTR [edi],eax
c000e1a1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e1a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e1a7:	99                   	cdq    
c000e1a8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1ab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e1ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e1b1:	99                   	cdq    
c000e1b2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1b5:	31 d2                	xor    edx,edx
c000e1b7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e1ba:	eb 1e                	jmp    c000e1da <zoh_vari_process+0x69b>
c000e1bc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e1bf:	31 d2                	xor    edx,edx
c000e1c1:	29 c8                	sub    eax,ecx
c000e1c3:	c1 e0 02             	shl    eax,0x2
c000e1c6:	39 d1                	cmp    ecx,edx
c000e1c8:	7e cd                	jle    c000e197 <zoh_vari_process+0x658>
c000e1ca:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e1cc:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e1d0:	83 c0 04             	add    eax,0x4
c000e1d3:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e1d7:	42                   	inc    edx
c000e1d8:	eb ec                	jmp    c000e1c6 <zoh_vari_process+0x687>
c000e1da:	83 c4 3c             	add    esp,0x3c
c000e1dd:	89 d0                	mov    eax,edx
c000e1df:	5b                   	pop    ebx
c000e1e0:	5e                   	pop    esi
c000e1e1:	5f                   	pop    edi
c000e1e2:	5d                   	pop    ebp
c000e1e3:	c3                   	ret    

c000e1e4 <zoh_reset>:
c000e1e4:	83 ec 0c             	sub    esp,0xc
c000e1e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1eb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1ee:	85 c0                	test   eax,eax
c000e1f0:	74 20                	je     c000e212 <zoh_reset+0x2e>
c000e1f2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1f5:	83 c0 1c             	add    eax,0x1c
c000e1f8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1fb:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e202:	c1 e2 02             	shl    edx,0x2
c000e205:	51                   	push   ecx
c000e206:	52                   	push   edx
c000e207:	6a 00                	push   0x0
c000e209:	50                   	push   eax
c000e20a:	e8 b5 24 ff ff       	call   c00006c4 <memset>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	83 c4 0c             	add    esp,0xc
c000e215:	c3                   	ret    

c000e216 <zoh_get_name>:
c000e216:	31 c0                	xor    eax,eax
c000e218:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e21d:	75 05                	jne    c000e224 <zoh_get_name+0xe>
c000e21f:	b8 1e 8c 02 c0       	mov    eax,0xc0028c1e
c000e224:	c3                   	ret    

c000e225 <zoh_get_description>:
c000e225:	31 c0                	xor    eax,eax
c000e227:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e22c:	75 05                	jne    c000e233 <zoh_get_description+0xe>
c000e22e:	b8 2f 8c 02 c0       	mov    eax,0xc0028c2f
c000e233:	c3                   	ret    

c000e234 <zoh_set_converter>:
c000e234:	53                   	push   ebx
c000e235:	b8 0a 00 00 00       	mov    eax,0xa
c000e23a:	83 ec 08             	sub    esp,0x8
c000e23d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e241:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e246:	75 6e                	jne    c000e2b6 <zoh_set_converter+0x82>
c000e248:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e24b:	85 c0                	test   eax,eax
c000e24d:	74 13                	je     c000e262 <zoh_set_converter+0x2e>
c000e24f:	83 ec 0c             	sub    esp,0xc
c000e252:	50                   	push   eax
c000e253:	e8 dc 13 00 00       	call   c000f634 <free>
c000e258:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e25f:	83 c4 10             	add    esp,0x10
c000e262:	50                   	push   eax
c000e263:	50                   	push   eax
c000e264:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e267:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e26e:	50                   	push   eax
c000e26f:	6a 01                	push   0x1
c000e271:	e8 de 13 00 00       	call   c000f654 <calloc>
c000e276:	83 c4 10             	add    esp,0x10
c000e279:	89 c2                	mov    edx,eax
c000e27b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e27e:	85 d2                	test   edx,edx
c000e280:	b8 01 00 00 00       	mov    eax,0x1
c000e285:	74 2f                	je     c000e2b6 <zoh_set_converter+0x82>
c000e287:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e28a:	83 ec 0c             	sub    esp,0xc
c000e28d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e290:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e296:	c7 43 24 3f db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db3f
c000e29d:	c7 43 20 3f db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db3f
c000e2a4:	c7 43 28 e4 e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1e4
c000e2ab:	53                   	push   ebx
c000e2ac:	e8 33 ff ff ff       	call   c000e1e4 <zoh_reset>
c000e2b1:	83 c4 10             	add    esp,0x10
c000e2b4:	31 c0                	xor    eax,eax
c000e2b6:	83 c4 08             	add    esp,0x8
c000e2b9:	5b                   	pop    ebx
c000e2ba:	c3                   	ret    

c000e2bb <CPU::current()>:
c000e2bb:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000e2c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2c6:	90                   	nop
c000e2c7:	c3                   	ret    

c000e2c8 <operator new(unsigned long)>:
c000e2c8:	83 ec 0c             	sub    esp,0xc
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d2:	e8 4d 13 00 00       	call   c000f624 <malloc>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	83 c4 0c             	add    esp,0xc
c000e2dd:	c3                   	ret    

c000e2de <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 66 8c 02 c0       	push   0xc0028c66
c000e2e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ed:	e8 c2 24 ff ff       	call   c00007b4 <strcmp>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	0f 94 c0             	sete   al
c000e2fa:	84 c0                	test   al,al
c000e2fc:	74 0a                	je     c000e308 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e2fe:	b8 88 cd 02 c0       	mov    eax,0xc002cd88
c000e303:	e9 e3 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e308:	83 ec 08             	sub    esp,0x8
c000e30b:	68 6f 8c 02 c0       	push   0xc0028c6f
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 9b 24 ff ff       	call   c00007b4 <strcmp>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	85 c0                	test   eax,eax
c000e31e:	0f 94 c0             	sete   al
c000e321:	84 c0                	test   al,al
c000e323:	74 0a                	je     c000e32f <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e325:	b8 dc 56 02 c0       	mov    eax,0xc00256dc
c000e32a:	e9 bc 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e32f:	83 ec 08             	sub    esp,0x8
c000e332:	68 79 8c 02 c0       	push   0xc0028c79
c000e337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33b:	e8 74 24 ff ff       	call   c00007b4 <strcmp>
c000e340:	83 c4 10             	add    esp,0x10
c000e343:	85 c0                	test   eax,eax
c000e345:	0f 94 c0             	sete   al
c000e348:	84 c0                	test   al,al
c000e34a:	74 0a                	je     c000e356 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e34c:	b8 10 54 02 c0       	mov    eax,0xc0025410
c000e351:	e9 95 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e356:	83 ec 08             	sub    esp,0x8
c000e359:	68 82 8c 02 c0       	push   0xc0028c82
c000e35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e362:	e8 4d 24 ff ff       	call   c00007b4 <strcmp>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	85 c0                	test   eax,eax
c000e36c:	0f 94 c0             	sete   al
c000e36f:	84 c0                	test   al,al
c000e371:	74 07                	je     c000e37a <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e373:	b8 dc 57 02 c0       	mov    eax,0xc00257dc
c000e378:	eb 71                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e37a:	83 ec 08             	sub    esp,0x8
c000e37d:	68 8c 8c 02 c0       	push   0xc0028c8c
c000e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e386:	e8 29 24 ff ff       	call   c00007b4 <strcmp>
c000e38b:	83 c4 10             	add    esp,0x10
c000e38e:	85 c0                	test   eax,eax
c000e390:	0f 94 c0             	sete   al
c000e393:	84 c0                	test   al,al
c000e395:	74 07                	je     c000e39e <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e397:	b8 5c 55 02 c0       	mov    eax,0xc002555c
c000e39c:	eb 4d                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e39e:	83 ec 08             	sub    esp,0x8
c000e3a1:	68 95 8c 02 c0       	push   0xc0028c95
c000e3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3aa:	e8 05 24 ff ff       	call   c00007b4 <strcmp>
c000e3af:	83 c4 10             	add    esp,0x10
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	0f 94 c0             	sete   al
c000e3b7:	84 c0                	test   al,al
c000e3b9:	74 07                	je     c000e3c2 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e3bb:	b8 8c cd 02 c0       	mov    eax,0xc002cd8c
c000e3c0:	eb 29                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3c2:	83 ec 08             	sub    esp,0x8
c000e3c5:	68 a2 8c 02 c0       	push   0xc0028ca2
c000e3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ce:	e8 e1 23 ff ff       	call   c00007b4 <strcmp>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	85 c0                	test   eax,eax
c000e3d8:	0f 94 c0             	sete   al
c000e3db:	84 c0                	test   al,al
c000e3dd:	74 07                	je     c000e3e6 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3df:	b8 8d cd 02 c0       	mov    eax,0xc002cd8d
c000e3e4:	eb 05                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3e6:	b8 00 00 00 00       	mov    eax,0x0
c000e3eb:	83 c4 0c             	add    esp,0xc
c000e3ee:	c3                   	ret    
c000e3ef:	90                   	nop

c000e3f0 <Computer::close(int, int, void*)>:
c000e3f0:	57                   	push   edi
c000e3f1:	56                   	push   esi
c000e3f2:	53                   	push   ebx
c000e3f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3ff:	83 ec 0c             	sub    esp,0xc
c000e402:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e408:	e8 65 5a 00 00       	call   c0013e72 <Device::closeAll()>
c000e40d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	8b 10                	mov    edx,DWORD PTR [eax]
c000e418:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e41c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e424:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e428:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e42c:	5b                   	pop    ebx
c000e42d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e430:	5e                   	pop    esi
c000e431:	5f                   	pop    edi
c000e432:	ff e0                	jmp    eax

c000e434 <Krnl::firstTask()>:
c000e434:	53                   	push   ebx
c000e435:	83 ec 14             	sub    esp,0x14
c000e438:	fb                   	sti    
c000e439:	68 3f 07 00 00       	push   0x73f
c000e43e:	e8 e1 11 00 00       	call   c000f624 <malloc>
c000e443:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e44a:	89 c3                	mov    ebx,eax
c000e44c:	ff 35 d4 e2 02 c0    	push   DWORD PTR ds:0xc002e2d4
c000e452:	68 af 8c 02 c0       	push   0xc0028caf
c000e457:	6a 01                	push   0x1
c000e459:	50                   	push   eax
c000e45a:	e8 47 ea 00 00       	call   c001cea6 <Process::Process(bool, char const*, Process*, char**)>
c000e45f:	83 c4 20             	add    esp,0x20
c000e462:	68 ff 00 00 00       	push   0xff
c000e467:	6a 00                	push   0x0
c000e469:	68 b9 ef 00 c0       	push   0xc000efb9
c000e46e:	53                   	push   ebx
c000e46f:	e8 30 ed 00 00       	call   c001d1a4 <Process::createThread(void (*)(void*), void*, int)>
c000e474:	6a 7a                	push   0x7a
c000e476:	6a 00                	push   0x0
c000e478:	68 02 da 01 c0       	push   0xc001da02
c000e47d:	ff 35 d4 e2 02 c0    	push   DWORD PTR ds:0xc002e2d4
c000e483:	e8 1c ed 00 00       	call   c001d1a4 <Process::createThread(void (*)(void*), void*, int)>
c000e488:	83 c4 20             	add    esp,0x20
c000e48b:	a3 88 e2 02 c0       	mov    ds:0xc002e288,eax
c000e490:	c6 05 8d cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd8d,0x1
c000e497:	e8 e7 f8 00 00       	call   c001dd83 <Vm::initialise8086()>
c000e49c:	e8 b9 47 00 00       	call   c0012c5a <Fs::initVFS()>
c000e4a1:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000e4a6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e4ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ae:	6a 00                	push   0x0
c000e4b0:	6a 00                	push   0x0
c000e4b2:	6a 00                	push   0x0
c000e4b4:	50                   	push   eax
c000e4b5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4b8:	e8 e3 d3 00 00       	call   c001b8a0 <Sys::loadSyscalls()>
c000e4bd:	e8 c8 b4 00 00       	call   c001998a <Krnl::loadSystemEnv()>
c000e4c2:	83 c4 0c             	add    esp,0xc
c000e4c5:	6a 3a                	push   0x3a
c000e4c7:	68 bc 8c 02 c0       	push   0xc0028cbc
c000e4cc:	68 c5 8c 02 c0       	push   0xc0028cc5
c000e4d1:	e8 70 c1 00 00       	call   c001a646 <Reg::readIntWithDefault(char*, char*, int)>
c000e4d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d9:	e8 64 52 00 00       	call   c0013742 <User::loadClockSettings(int)>
c000e4de:	58                   	pop    eax
c000e4df:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000e4e4:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4ea:	e8 57 59 00 00       	call   c0013e46 <Device::loadDriversForAll()>
c000e4ef:	5a                   	pop    edx
c000e4f0:	8b 1d 88 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd88
c000e4f6:	59                   	pop    ecx
c000e4f7:	6a 01                	push   0x1
c000e4f9:	68 cd 8c 02 c0       	push   0xc0028ccd
c000e4fe:	e8 fc e4 00 00       	call   c001c9ff <Thr::loadDLL(char const*, bool)>
c000e503:	5a                   	pop    edx
c000e504:	59                   	pop    ecx
c000e505:	53                   	push   ebx
c000e506:	50                   	push   eax
c000e507:	e8 02 e7 00 00       	call   c001cc0e <Thr::executeDLL(unsigned long, void*)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 ef ef 00 00       	call   c001d508 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Krnl::firstTask()+0xdb>

c000e51e <Computer::Computer()>:
c000e51e:	83 ec 0c             	sub    esp,0xc
c000e521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e525:	83 ec 08             	sub    esp,0x8
c000e528:	68 e9 8c 02 c0       	push   0xc0028ce9
c000e52d:	50                   	push   eax
c000e52e:	e8 b9 59 00 00       	call   c0013eec <Device::Device(char const*)>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	ba 88 8e 02 c0       	mov    edx,0xc0028e88
c000e53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53f:	89 10                	mov    DWORD PTR [eax],edx
c000e541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e545:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e553:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e561:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e567:	83 ca 04             	or     edx,0x4
c000e56a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e574:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e57a:	0f b6 d0             	movzx  edx,al
c000e57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e581:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e592:	0f b6 d0             	movzx  edx,al
c000e595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e599:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5a8:	8d 50 01             	lea    edx,[eax+0x1]
c000e5ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5af:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5b5:	0f b6 d0             	movzx  edx,al
c000e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5c0:	83 e1 3f             	and    ecx,0x3f
c000e5c3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5d1:	0f b6 d0             	movzx  edx,al
c000e5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d8:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5e9:	0f b6 d0             	movzx  edx,al
c000e5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f0:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e602:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e606:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e60c:	0f b6 d0             	movzx  edx,al
c000e60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e613:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e617:	83 e1 3f             	and    ecx,0x3f
c000e61a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e622:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e628:	0f b6 d0             	movzx  edx,al
c000e62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62f:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e640:	0f b6 d0             	movzx  edx,al
c000e643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e647:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e650:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e656:	8d 50 01             	lea    edx,[eax+0x1]
c000e659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e65d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e663:	0f b6 d0             	movzx  edx,al
c000e666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e66a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e66e:	83 e1 3f             	and    ecx,0x3f
c000e671:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e675:	90                   	nop
c000e676:	83 c4 0c             	add    esp,0xc
c000e679:	c3                   	ret    

c000e67a <Computer::setBootMessage(char const*)>:
c000e67a:	c3                   	ret    
c000e67b:	90                   	nop

c000e67c <Computer::detectFeatures()>:
c000e67c:	55                   	push   ebp
c000e67d:	57                   	push   edi
c000e67e:	56                   	push   esi
c000e67f:	53                   	push   ebx
c000e680:	83 ec 1c             	sub    esp,0x1c
c000e683:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e687:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e691:	e8 4e 1c ff ff       	call   c00002e4 <detectCPUID>
c000e696:	85 c0                	test   eax,eax
c000e698:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e69e:	0f 95 c2             	setne  dl
c000e6a1:	83 e0 fd             	and    eax,0xfffffffd
c000e6a4:	d1 e2                	shl    edx,1
c000e6a6:	09 d0                	or     eax,edx
c000e6a8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6ae:	a8 02                	test   al,0x2
c000e6b0:	75 46                	jne    c000e6f8 <Computer::detectFeatures()+0x7c>
c000e6b2:	f6 05 a1 cd 02 c0 04 	test   BYTE PTR ds:0xc002cda1,0x4
c000e6b9:	74 07                	je     c000e6c2 <Computer::detectFeatures()+0x46>
c000e6bb:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e6c2:	e8 df 6c 01 00       	call   c00253a6 <x87Detect>
c000e6c7:	83 e0 01             	and    eax,0x1
c000e6ca:	c1 e0 04             	shl    eax,0x4
c000e6cd:	88 c2                	mov    dl,al
c000e6cf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6d5:	83 e0 ef             	and    eax,0xffffffef
c000e6d8:	09 d0                	or     eax,edx
c000e6da:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6e0:	a8 10                	test   al,0x10
c000e6e2:	0f 85 2a 01 00 00    	jne    c000e812 <Computer::detectFeatures()+0x196>
c000e6e8:	84 c0                	test   al,al
c000e6ea:	0f 88 45 01 00 00    	js     c000e835 <Computer::detectFeatures()+0x1b9>
c000e6f0:	83 c4 1c             	add    esp,0x1c
c000e6f3:	5b                   	pop    ebx
c000e6f4:	5e                   	pop    esi
c000e6f5:	5f                   	pop    edi
c000e6f6:	5d                   	pop    ebp
c000e6f7:	c3                   	ret    
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	6a 20                	push   0x20
c000e6fd:	e8 4a 9c 00 00       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c000e702:	83 e0 01             	and    eax,0x1
c000e705:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e70c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e712:	83 e0 f7             	and    eax,0xfffffff7
c000e715:	09 d0                	or     eax,edx
c000e717:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e724:	e8 23 9c 00 00       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c000e729:	83 e0 01             	and    eax,0x1
c000e72c:	88 c2                	mov    dl,al
c000e72e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e734:	83 e0 fe             	and    eax,0xfffffffe
c000e737:	09 d0                	or     eax,edx
c000e739:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e73f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e746:	e8 01 9c 00 00       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c000e74b:	c1 e0 07             	shl    eax,0x7
c000e74e:	88 c2                	mov    dl,al
c000e750:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e756:	83 e0 7f             	and    eax,0x7f
c000e759:	09 d0                	or     eax,edx
c000e75b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e761:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e768:	e8 df 9b 00 00       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	83 e0 01             	and    eax,0x1
c000e773:	c1 e0 05             	shl    eax,0x5
c000e776:	88 c2                	mov    dl,al
c000e778:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e77e:	83 e0 df             	and    eax,0xffffffdf
c000e781:	09 d0                	or     eax,edx
c000e783:	f7 05 a0 cd 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002cda0,0x401
c000e78d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e793:	0f 84 c2 00 00 00    	je     c000e85b <Computer::detectFeatures()+0x1df>
c000e799:	83 e0 fe             	and    eax,0xfffffffe
c000e79c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7a2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e7a8:	88 c2                	mov    dl,al
c000e7aa:	83 e2 09             	and    edx,0x9
c000e7ad:	fe ca                	dec    dl
c000e7af:	75 09                	jne    c000e7ba <Computer::detectFeatures()+0x13e>
c000e7b1:	83 e0 fe             	and    eax,0xfffffffe
c000e7b4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e7c1:	50                   	push   eax
c000e7c2:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e7c6:	55                   	push   ebp
c000e7c7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e7cb:	57                   	push   edi
c000e7cc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7d0:	56                   	push   esi
c000e7d1:	68 00 00 00 80       	push   0x80000000
c000e7d6:	e8 ed 9a 00 00       	call   c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7db:	83 c4 20             	add    esp,0x20
c000e7de:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7e9:	0f 86 c3 fe ff ff    	jbe    c000e6b2 <Computer::detectFeatures()+0x36>
c000e7ef:	83 ec 0c             	sub    esp,0xc
c000e7f2:	50                   	push   eax
c000e7f3:	55                   	push   ebp
c000e7f4:	57                   	push   edi
c000e7f5:	56                   	push   esi
c000e7f6:	68 01 00 00 80       	push   0x80000001
c000e7fb:	e8 c8 9a 00 00       	call   c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e800:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e80a:	83 c4 20             	add    esp,0x20
c000e80d:	e9 a0 fe ff ff       	jmp    c000e6b2 <Computer::detectFeatures()+0x36>
c000e812:	e8 49 6b 01 00       	call   c0025360 <absolutelyNoChanceInHell>
c000e817:	88 c2                	mov    dl,al
c000e819:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e81f:	c1 e2 07             	shl    edx,0x7
c000e822:	83 e0 7f             	and    eax,0x7f
c000e825:	09 d0                	or     eax,edx
c000e827:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e82d:	84 c0                	test   al,al
c000e82f:	0f 89 bb fe ff ff    	jns    c000e6f0 <Computer::detectFeatures()+0x74>
c000e835:	e8 06 6b 01 00       	call   c0025340 <avxDetect>
c000e83a:	83 e0 01             	and    eax,0x1
c000e83d:	c1 e0 05             	shl    eax,0x5
c000e840:	88 c2                	mov    dl,al
c000e842:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e848:	83 e0 df             	and    eax,0xffffffdf
c000e84b:	09 d0                	or     eax,edx
c000e84d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e853:	83 c4 1c             	add    esp,0x1c
c000e856:	5b                   	pop    ebx
c000e857:	5e                   	pop    esi
c000e858:	5f                   	pop    edi
c000e859:	5d                   	pop    ebp
c000e85a:	c3                   	ret    
c000e85b:	83 ec 0c             	sub    esp,0xc
c000e85e:	68 00 02 00 00       	push   0x200
c000e863:	e8 e4 9a 00 00       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	83 e0 01             	and    eax,0x1
c000e86e:	88 c2                	mov    dl,al
c000e870:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e876:	83 e0 fe             	and    eax,0xfffffffe
c000e879:	09 d0                	or     eax,edx
c000e87b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e881:	e9 1c ff ff ff       	jmp    c000e7a2 <Computer::detectFeatures()+0x126>

c000e886 <Computer::displayFeatures()>:
c000e886:	53                   	push   ebx
c000e887:	83 ec 14             	sub    esp,0x14
c000e88a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e88e:	68 f9 8c 02 c0       	push   0xc0028cf9
c000e893:	e8 3d 40 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e8a2:	0f 85 73 02 00 00    	jne    c000eb1b <Computer::displayFeatures()+0x295>
c000e8a8:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000e8ad:	83 ec 08             	sub    esp,0x8
c000e8b0:	50                   	push   eax
c000e8b1:	68 0c 8d 02 c0       	push   0xc0028d0c
c000e8b6:	e8 1a 40 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e8c5:	0f 85 8c 02 00 00    	jne    c000eb57 <Computer::displayFeatures()+0x2d1>
c000e8cb:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000e8d0:	83 ec 08             	sub    esp,0x8
c000e8d3:	50                   	push   eax
c000e8d4:	68 1d 8d 02 c0       	push   0xc0028d1d
c000e8d9:	e8 f7 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e8de:	83 c4 10             	add    esp,0x10
c000e8e1:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8e8:	0f 85 5f 02 00 00    	jne    c000eb4d <Computer::displayFeatures()+0x2c7>
c000e8ee:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000e8f3:	83 ec 08             	sub    esp,0x8
c000e8f6:	50                   	push   eax
c000e8f7:	68 2e 8d 02 c0       	push   0xc0028d2e
c000e8fc:	e8 d4 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e90b:	0f 85 32 02 00 00    	jne    c000eb43 <Computer::displayFeatures()+0x2bd>
c000e911:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000e916:	83 ec 08             	sub    esp,0x8
c000e919:	50                   	push   eax
c000e91a:	68 3f 8d 02 c0       	push   0xc0028d3f
c000e91f:	e8 b1 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e924:	83 c4 10             	add    esp,0x10
c000e927:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e92e:	0f 85 05 02 00 00    	jne    c000eb39 <Computer::displayFeatures()+0x2b3>
c000e934:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000e939:	83 ec 08             	sub    esp,0x8
c000e93c:	50                   	push   eax
c000e93d:	68 50 8d 02 c0       	push   0xc0028d50
c000e942:	e8 8e 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e947:	83 c4 10             	add    esp,0x10
c000e94a:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e951:	0f 85 d8 01 00 00    	jne    c000eb2f <Computer::displayFeatures()+0x2a9>
c000e957:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000e95c:	83 ec 08             	sub    esp,0x8
c000e95f:	50                   	push   eax
c000e960:	68 61 8d 02 c0       	push   0xc0028d61
c000e965:	e8 6b 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e96a:	83 c4 10             	add    esp,0x10
c000e96d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e974:	0f 85 ab 01 00 00    	jne    c000eb25 <Computer::displayFeatures()+0x29f>
c000e97a:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	50                   	push   eax
c000e983:	68 72 8d 02 c0       	push   0xc0028d72
c000e988:	e8 48 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e997:	0f 88 1b 02 00 00    	js     c000ebb8 <Computer::displayFeatures()+0x332>
c000e99d:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000e9a2:	83 ec 08             	sub    esp,0x8
c000e9a5:	50                   	push   eax
c000e9a6:	68 83 8d 02 c0       	push   0xc0028d83
c000e9ab:	e8 25 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e9b0:	83 c4 10             	add    esp,0x10
c000e9b3:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e9ba:	0f 85 a1 01 00 00    	jne    c000eb61 <Computer::displayFeatures()+0x2db>
c000e9c0:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000e9c5:	83 ec 08             	sub    esp,0x8
c000e9c8:	50                   	push   eax
c000e9c9:	68 94 8d 02 c0       	push   0xc0028d94
c000e9ce:	e8 02 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9dd:	0f 85 cb 01 00 00    	jne    c000ebae <Computer::displayFeatures()+0x328>
c000e9e3:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000e9e8:	83 ec 08             	sub    esp,0x8
c000e9eb:	50                   	push   eax
c000e9ec:	68 a5 8d 02 c0       	push   0xc0028da5
c000e9f1:	e8 df 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e9f6:	83 c4 10             	add    esp,0x10
c000e9f9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ea00:	0f 85 9e 01 00 00    	jne    c000eba4 <Computer::displayFeatures()+0x31e>
c000ea06:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000ea0b:	83 ec 08             	sub    esp,0x8
c000ea0e:	50                   	push   eax
c000ea0f:	68 b6 8d 02 c0       	push   0xc0028db6
c000ea14:	e8 bc 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ea23:	0f 85 71 01 00 00    	jne    c000eb9a <Computer::displayFeatures()+0x314>
c000ea29:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000ea2e:	83 ec 08             	sub    esp,0x8
c000ea31:	50                   	push   eax
c000ea32:	68 c7 8d 02 c0       	push   0xc0028dc7
c000ea37:	e8 99 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ea3c:	83 c4 10             	add    esp,0x10
c000ea3f:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea46:	0f 85 44 01 00 00    	jne    c000eb90 <Computer::displayFeatures()+0x30a>
c000ea4c:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000ea51:	83 ec 08             	sub    esp,0x8
c000ea54:	50                   	push   eax
c000ea55:	68 d8 8d 02 c0       	push   0xc0028dd8
c000ea5a:	e8 76 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ea5f:	83 c4 10             	add    esp,0x10
c000ea62:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea69:	0f 85 17 01 00 00    	jne    c000eb86 <Computer::displayFeatures()+0x300>
c000ea6f:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000ea74:	83 ec 08             	sub    esp,0x8
c000ea77:	50                   	push   eax
c000ea78:	68 e9 8d 02 c0       	push   0xc0028de9
c000ea7d:	e8 53 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea8c:	0f 85 ea 00 00 00    	jne    c000eb7c <Computer::displayFeatures()+0x2f6>
c000ea92:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000ea97:	83 ec 08             	sub    esp,0x8
c000ea9a:	50                   	push   eax
c000ea9b:	68 fa 8d 02 c0       	push   0xc0028dfa
c000eaa0:	e8 30 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eaaf:	0f 88 0d 01 00 00    	js     c000ebc2 <Computer::displayFeatures()+0x33c>
c000eab5:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000eaba:	83 ec 08             	sub    esp,0x8
c000eabd:	50                   	push   eax
c000eabe:	68 0b 8e 02 c0       	push   0xc0028e0b
c000eac3:	e8 0d 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000eac8:	83 c4 10             	add    esp,0x10
c000eacb:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ead2:	0f 85 9a 00 00 00    	jne    c000eb72 <Computer::displayFeatures()+0x2ec>
c000ead8:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000eadd:	83 ec 08             	sub    esp,0x8
c000eae0:	50                   	push   eax
c000eae1:	68 1c 8e 02 c0       	push   0xc0028e1c
c000eae6:	e8 ea 3d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000eaeb:	83 c4 10             	add    esp,0x10
c000eaee:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eaf5:	75 74                	jne    c000eb6b <Computer::displayFeatures()+0x2e5>
c000eaf7:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c000eafc:	83 ec 08             	sub    esp,0x8
c000eaff:	50                   	push   eax
c000eb00:	68 2d 8e 02 c0       	push   0xc0028e2d
c000eb05:	e8 cb 3d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000eb0a:	c7 44 24 20 0b a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a60b
c000eb12:	83 c4 18             	add    esp,0x18
c000eb15:	5b                   	pop    ebx
c000eb16:	e9 ba 3d 00 00       	jmp    c00128d5 <Dbg::kprintf(char const*, ...)>
c000eb1b:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb20:	e9 88 fd ff ff       	jmp    c000e8ad <Computer::displayFeatures()+0x27>
c000eb25:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb2a:	e9 50 fe ff ff       	jmp    c000e97f <Computer::displayFeatures()+0xf9>
c000eb2f:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb34:	e9 23 fe ff ff       	jmp    c000e95c <Computer::displayFeatures()+0xd6>
c000eb39:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb3e:	e9 f6 fd ff ff       	jmp    c000e939 <Computer::displayFeatures()+0xb3>
c000eb43:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb48:	e9 c9 fd ff ff       	jmp    c000e916 <Computer::displayFeatures()+0x90>
c000eb4d:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb52:	e9 9c fd ff ff       	jmp    c000e8f3 <Computer::displayFeatures()+0x6d>
c000eb57:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb5c:	e9 6f fd ff ff       	jmp    c000e8d0 <Computer::displayFeatures()+0x4a>
c000eb61:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb66:	e9 5a fe ff ff       	jmp    c000e9c5 <Computer::displayFeatures()+0x13f>
c000eb6b:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb70:	eb 8a                	jmp    c000eafc <Computer::displayFeatures()+0x276>
c000eb72:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb77:	e9 61 ff ff ff       	jmp    c000eadd <Computer::displayFeatures()+0x257>
c000eb7c:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb81:	e9 11 ff ff ff       	jmp    c000ea97 <Computer::displayFeatures()+0x211>
c000eb86:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb8b:	e9 e4 fe ff ff       	jmp    c000ea74 <Computer::displayFeatures()+0x1ee>
c000eb90:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb95:	e9 b7 fe ff ff       	jmp    c000ea51 <Computer::displayFeatures()+0x1cb>
c000eb9a:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eb9f:	e9 8a fe ff ff       	jmp    c000ea2e <Computer::displayFeatures()+0x1a8>
c000eba4:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000eba9:	e9 5d fe ff ff       	jmp    c000ea0b <Computer::displayFeatures()+0x185>
c000ebae:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000ebb3:	e9 30 fe ff ff       	jmp    c000e9e8 <Computer::displayFeatures()+0x162>
c000ebb8:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000ebbd:	e9 e0 fd ff ff       	jmp    c000e9a2 <Computer::displayFeatures()+0x11c>
c000ebc2:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c000ebc7:	e9 ee fe ff ff       	jmp    c000eaba <Computer::displayFeatures()+0x234>

c000ebcc <Computer::rdmsr(unsigned int)>:
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebda:	74 0a                	je     c000ebe6 <Computer::rdmsr(unsigned int)+0x1a>
c000ebdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebe0:	0f 32                	rdmsr  
c000ebe2:	83 c4 0c             	add    esp,0xc
c000ebe5:	c3                   	ret    
c000ebe6:	83 ec 0c             	sub    esp,0xc
c000ebe9:	68 3e 8e 02 c0       	push   0xc0028e3e
c000ebee:	e8 d0 ae 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	eb e4                	jmp    c000ebdc <Computer::rdmsr(unsigned int)+0x10>

c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ebf8:	57                   	push   edi
c000ebf9:	56                   	push   esi
c000ebfa:	52                   	push   edx
c000ebfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec07:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ec0e:	74 0e                	je     c000ec1e <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ec10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec14:	89 f0                	mov    eax,esi
c000ec16:	89 fa                	mov    edx,edi
c000ec18:	0f 30                	wrmsr  
c000ec1a:	58                   	pop    eax
c000ec1b:	5e                   	pop    esi
c000ec1c:	5f                   	pop    edi
c000ec1d:	c3                   	ret    
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	68 44 8e 02 c0       	push   0xc0028e44
c000ec26:	e8 98 ae 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	eb e0                	jmp    c000ec10 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ec30 <Computer::nmiEnabled()>:
c000ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec34:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec3a:	c3                   	ret    
c000ec3b:	90                   	nop

c000ec3c <Computer::readCMOS(unsigned char)>:
c000ec3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec40:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec47:	19 c0                	sbb    eax,eax
c000ec49:	83 e0 80             	and    eax,0xffffff80
c000ec4c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec50:	e6 70                	out    0x70,al
c000ec52:	e4 71                	in     al,0x71
c000ec54:	c3                   	ret    
c000ec55:	90                   	nop

c000ec56 <Computer::enableNMI(bool)>:
c000ec56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec5e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec64:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec6c:	eb ce                	jmp    c000ec3c <Computer::readCMOS(unsigned char)>

c000ec6e <Computer::open(int, int, void*)>:
c000ec6e:	56                   	push   esi
c000ec6f:	53                   	push   ebx
c000ec70:	83 ec 10             	sub    esp,0x10
c000ec73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec77:	f6 05 a0 cd 02 c0 04 	test   BYTE PTR ds:0xc002cda0,0x4
c000ec7e:	68 68 0a 00 00       	push   0xa68
c000ec83:	0f 94 05 c4 bc 02 c0 	sete   BYTE PTR ds:0xc002bcc4
c000ec8a:	e8 95 09 00 00       	call   c000f624 <malloc>
c000ec8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec92:	89 c6                	mov    esi,eax
c000ec94:	e8 23 8c 00 00       	call   c00178bc <ACPI::ACPI()>
c000ec99:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec9f:	58                   	pop    eax
c000eca0:	5a                   	pop    edx
c000eca1:	56                   	push   esi
c000eca2:	53                   	push   ebx
c000eca3:	e8 54 50 00 00       	call   c0013cfc <Device::addChild(Device*)>
c000eca8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecab:	e8 cc f9 ff ff       	call   c000e67c <Computer::detectFeatures()>
c000ecb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecb3:	e8 ce fb ff ff       	call   c000e886 <Computer::displayFeatures()>
c000ecb8:	59                   	pop    ecx
c000ecb9:	5e                   	pop    esi
c000ecba:	6a 01                	push   0x1
c000ecbc:	53                   	push   ebx
c000ecbd:	e8 94 ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ecc2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ecc9:	e8 56 09 00 00       	call   c000f624 <malloc>
c000ecce:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecd1:	89 c6                	mov    esi,eax
c000ecd3:	e8 2c 97 00 00       	call   c0018404 <CPU::CPU()>
c000ecd8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ecde:	58                   	pop    eax
c000ecdf:	5a                   	pop    edx
c000ece0:	56                   	push   esi
c000ece1:	53                   	push   ebx
c000ece2:	e8 15 50 00 00       	call   c0013cfc <Device::addChild(Device*)>
c000ece7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eced:	8b 10                	mov    edx,DWORD PTR [eax]
c000ecef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ecf3:	6a 00                	push   0x0
c000ecf5:	6a 00                	push   0x0
c000ecf7:	50                   	push   eax
c000ecf8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecfb:	83 c4 20             	add    esp,0x20
c000ecfe:	e8 6b 55 00 00       	call   c001426e <setupFPU()>
c000ed03:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ed09:	85 c0                	test   eax,eax
c000ed0b:	74 1f                	je     c000ed2c <Computer::open(int, int, void*)+0xbe>
c000ed0d:	83 ec 08             	sub    esp,0x8
c000ed10:	50                   	push   eax
c000ed11:	53                   	push   ebx
c000ed12:	e8 e5 4f 00 00       	call   c0013cfc <Device::addChild(Device*)>
c000ed17:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ed1d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed1f:	6a 00                	push   0x0
c000ed21:	6a 00                	push   0x0
c000ed23:	6a 00                	push   0x0
c000ed25:	50                   	push   eax
c000ed26:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed29:	83 c4 20             	add    esp,0x20
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 34 e4 00 c0       	push   0xc000e434
c000ed34:	e8 6b e5 00 00       	call   c001d2a4 <setupMultitasking(void (*)())>
c000ed39:	83 c4 14             	add    esp,0x14
c000ed3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed41:	5b                   	pop    ebx
c000ed42:	5e                   	pop    esi
c000ed43:	c3                   	ret    

c000ed44 <Computer::disableNMI()>:
c000ed44:	6a 00                	push   0x0
c000ed46:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed4a:	e8 07 ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ed4f:	58                   	pop    eax
c000ed50:	5a                   	pop    edx
c000ed51:	c3                   	ret    

c000ed52 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed56:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed5d:	19 c0                	sbb    eax,eax
c000ed5f:	83 e0 80             	and    eax,0xffffff80
c000ed62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed66:	e6 70                	out    0x70,al
c000ed68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed6c:	e6 71                	out    0x71,al
c000ed6e:	c3                   	ret    
c000ed6f:	90                   	nop

c000ed70 <Computer::handleNMI()>:
c000ed70:	56                   	push   esi
c000ed71:	53                   	push   ebx
c000ed72:	83 ec 10             	sub    esp,0x10
c000ed75:	e4 92                	in     al,0x92
c000ed77:	89 c6                	mov    esi,eax
c000ed79:	e4 61                	in     al,0x61
c000ed7b:	68 4a 8e 02 c0       	push   0xc0028e4a
c000ed80:	88 c3                	mov    bl,al
c000ed82:	e8 4e 3b 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ed87:	83 c4 10             	add    esp,0x10
c000ed8a:	83 e6 10             	and    esi,0x10
c000ed8d:	75 0d                	jne    c000ed9c <Computer::handleNMI()+0x2c>
c000ed8f:	f6 c3 40             	test   bl,0x40
c000ed92:	75 1d                	jne    c000edb1 <Computer::handleNMI()+0x41>
c000ed94:	84 db                	test   bl,bl
c000ed96:	78 2d                	js     c000edc5 <Computer::handleNMI()+0x55>
c000ed98:	58                   	pop    eax
c000ed99:	5b                   	pop    ebx
c000ed9a:	5e                   	pop    esi
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 5b 8e 02 c0       	push   0xc0028e5b
c000eda4:	e8 1a ad 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	f6 c3 40             	test   bl,0x40
c000edaf:	74 e3                	je     c000ed94 <Computer::handleNMI()+0x24>
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	68 68 8e 02 c0       	push   0xc0028e68
c000edb9:	e8 05 ad 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c000edbe:	83 c4 10             	add    esp,0x10
c000edc1:	84 db                	test   bl,bl
c000edc3:	79 d3                	jns    c000ed98 <Computer::handleNMI()+0x28>
c000edc5:	c7 44 24 10 72 8e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028e72
c000edcd:	5a                   	pop    edx
c000edce:	5b                   	pop    ebx
c000edcf:	5e                   	pop    esi
c000edd0:	e9 ee ac 00 00       	jmp    c0019ac3 <Krnl::panic(char const*)>
c000edd5:	90                   	nop

c000edd6 <Computer::setDiskActivityLight(int, bool)>:
c000edd6:	56                   	push   esi
c000edd7:	53                   	push   ebx
c000edd8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eddc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ede1:	77 1b                	ja     c000edfe <Computer::setDiskActivityLight(int, bool)+0x28>
c000ede3:	e4 92                	in     al,0x92
c000ede5:	bb 40 00 00 00       	mov    ebx,0x40
c000edea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000edee:	89 da                	mov    edx,ebx
c000edf0:	d3 e2                	shl    edx,cl
c000edf2:	89 f1                	mov    ecx,esi
c000edf4:	f7 d2                	not    edx
c000edf6:	d3 e3                	shl    ebx,cl
c000edf8:	21 d0                	and    eax,edx
c000edfa:	09 d8                	or     eax,ebx
c000edfc:	e6 92                	out    0x92,al
c000edfe:	5b                   	pop    ebx
c000edff:	5e                   	pop    esi
c000ee00:	c3                   	ret    
c000ee01:	90                   	nop

c000ee02 <GDTEntry::setBase(unsigned int)>:
c000ee02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee0a:	89 c1                	mov    ecx,eax
c000ee0c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ee10:	c1 e9 10             	shr    ecx,0x10
c000ee13:	c1 e8 18             	shr    eax,0x18
c000ee16:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ee19:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ee1c:	c3                   	ret    
c000ee1d:	90                   	nop

c000ee1e <GDTEntry::setLimit(unsigned int)>:
c000ee1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee26:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ee29:	66 89 01             	mov    WORD PTR [ecx],ax
c000ee2c:	83 e2 f0             	and    edx,0xfffffff0
c000ee2f:	c1 e8 10             	shr    eax,0x10
c000ee32:	83 e0 0f             	and    eax,0xf
c000ee35:	09 d0                	or     eax,edx
c000ee37:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee3a:	c3                   	ret    
c000ee3b:	90                   	nop

c000ee3c <GDT::GDT()>:
c000ee3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee50:	90                   	nop
c000ee51:	c3                   	ret    

c000ee52 <GDT::addEntry(GDTEntry)>:
c000ee52:	53                   	push   ebx
c000ee53:	83 ec 0c             	sub    esp,0xc
c000ee56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee5c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee63:	52                   	push   edx
c000ee64:	50                   	push   eax
c000ee65:	68 ac 8e 02 c0       	push   0xc0028eac
c000ee6a:	e8 66 3a 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ee6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee79:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee7d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee81:	8d 50 01             	lea    edx,[eax+0x1]
c000ee84:	c1 e0 03             	shl    eax,0x3
c000ee87:	89 13                	mov    DWORD PTR [ebx],edx
c000ee89:	83 c4 18             	add    esp,0x18
c000ee8c:	5b                   	pop    ebx
c000ee8d:	c3                   	ret    

c000ee8e <GDT::getNumberOfEntries()>:
c000ee8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee92:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee94:	c3                   	ret    
c000ee95:	90                   	nop

c000ee96 <GDT::flush()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee9c:	83 c0 04             	add    eax,0x4
c000ee9f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000eea6:	a3 92 cd 02 c0       	mov    ds:0xc002cd92,eax
c000eeab:	66 89 15 90 cd 02 c0 	mov    WORD PTR ds:0xc002cd90,dx
c000eeb2:	e9 91 15 ff ff       	jmp    c0000448 <loadGDT>
c000eeb7:	90                   	nop

c000eeb8 <GDT::setup()>:
c000eeb8:	55                   	push   ebp
c000eeb9:	57                   	push   edi
c000eeba:	56                   	push   esi
c000eebb:	53                   	push   ebx
c000eebc:	83 ec 3c             	sub    esp,0x3c
c000eebf:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000eec3:	6a 00                	push   0x0
c000eec5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000eec9:	53                   	push   ebx
c000eeca:	e8 33 ff ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000eecf:	6a 00                	push   0x0
c000eed1:	53                   	push   ebx
c000eed2:	e8 47 ff ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000eed7:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000eedf:	6a 00                	push   0x0
c000eee1:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000eee5:	53                   	push   ebx
c000eee6:	e8 17 ff ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000eeeb:	68 ff ff ff 00       	push   0xffffff
c000eef0:	53                   	push   ebx
c000eef1:	e8 28 ff ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000eef6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eefa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeff:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ef04:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef08:	83 c4 20             	add    esp,0x20
c000ef0b:	6a 00                	push   0x0
c000ef0d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ef11:	53                   	push   ebx
c000ef12:	e8 eb fe ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000ef17:	68 ff ff ff 00       	push   0xffffff
c000ef1c:	53                   	push   ebx
c000ef1d:	e8 fc fe ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000ef22:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ef26:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef2a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ef2e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ef32:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ef36:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef3b:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef40:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef44:	89 d8                	mov    eax,ebx
c000ef46:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef4a:	80 cc 60             	or     ah,0x60
c000ef4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef51:	83 c4 0c             	add    esp,0xc
c000ef54:	89 f8                	mov    eax,edi
c000ef56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef5a:	80 cc 60             	or     ah,0x60
c000ef5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef61:	89 c7                	mov    edi,eax
c000ef63:	55                   	push   ebp
c000ef64:	e8 e9 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef69:	83 c4 0c             	add    esp,0xc
c000ef6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef74:	55                   	push   ebp
c000ef75:	e8 d8 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef7a:	83 c4 0c             	add    esp,0xc
c000ef7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef85:	55                   	push   ebp
c000ef86:	e8 c7 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef8b:	83 c4 0c             	add    esp,0xc
c000ef8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef96:	53                   	push   ebx
c000ef97:	51                   	push   ecx
c000ef98:	55                   	push   ebp
c000ef99:	e8 b4 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef9e:	83 c4 0c             	add    esp,0xc
c000efa1:	57                   	push   edi
c000efa2:	56                   	push   esi
c000efa3:	55                   	push   ebp
c000efa4:	e8 a9 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000efa9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000efac:	e8 e5 fe ff ff       	call   c000ee96 <GDT::flush()>
c000efb1:	83 c4 4c             	add    esp,0x4c
c000efb4:	5b                   	pop    ebx
c000efb5:	5e                   	pop    esi
c000efb6:	5f                   	pop    edi
c000efb7:	5d                   	pop    ebp
c000efb8:	c3                   	ret    

c000efb9 <idleFunction(void*)>:
c000efb9:	53                   	push   ebx
c000efba:	83 ec 08             	sub    esp,0x8
c000efbd:	e8 b2 e0 00 00       	call   c001d074 <unlockScheduler()>
c000efc2:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000efc7:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000efcd:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000efd4:	74 3c                	je     c000f012 <idleFunction(void*)+0x59>
c000efd6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000efdd:	74 33                	je     c000f012 <idleFunction(void*)+0x59>
c000efdf:	31 db                	xor    ebx,ebx
c000efe1:	52                   	push   edx
c000efe2:	52                   	push   edx
c000efe3:	68 e1 00 00 00       	push   0xe1
c000efe8:	50                   	push   eax
c000efe9:	e8 de fb ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c000efee:	53                   	push   ebx
c000efef:	83 e0 02             	and    eax,0x2
c000eff2:	50                   	push   eax
c000eff3:	68 e1 00 00 00       	push   0xe1
c000eff8:	ff 35 88 cd 02 c0    	push   DWORD PTR ds:0xc002cd88
c000effe:	e8 f5 fb ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f003:	83 c4 20             	add    esp,0x20
c000f006:	e8 74 12 ff ff       	call   c000027f <doTPAUSE>
c000f00b:	e8 d0 83 01 00       	call   c00273e0 <idleCommon()>
c000f010:	eb f4                	jmp    c000f006 <idleFunction(void*)+0x4d>
c000f012:	fb                   	sti    
c000f013:	f4                   	hlt    
c000f014:	e8 c7 83 01 00       	call   c00273e0 <idleCommon()>
c000f019:	eb f7                	jmp    c000f012 <idleFunction(void*)+0x59>
c000f01b:	90                   	nop

c000f01c <IDTEntry::IDTEntry(bool)>:
c000f01c:	83 ec 04             	sub    esp,0x4
c000f01f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f023:	88 04 24             	mov    BYTE PTR [esp],al
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f030:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f034:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f03f:	83 e2 f0             	and    edx,0xfffffff0
c000f042:	83 ca 0e             	or     edx,0xe
c000f045:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f04f:	83 e2 ef             	and    edx,0xffffffef
c000f052:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f055:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f059:	74 04                	je     c000f05f <IDTEntry::IDTEntry(bool)+0x43>
c000f05b:	b2 03                	mov    dl,0x3
c000f05d:	eb 02                	jmp    c000f061 <IDTEntry::IDTEntry(bool)+0x45>
c000f05f:	b2 00                	mov    dl,0x0
c000f061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f065:	83 e2 03             	and    edx,0x3
c000f068:	88 d1                	mov    cl,dl
c000f06a:	c1 e1 05             	shl    ecx,0x5
c000f06d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f070:	83 e2 9f             	and    edx,0xffffff9f
c000f073:	09 ca                	or     edx,ecx
c000f075:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f078:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f07c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f07f:	83 ca 80             	or     edx,0xffffff80
c000f082:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f085:	90                   	nop
c000f086:	83 c4 04             	add    esp,0x4
c000f089:	c3                   	ret    

c000f08a <IDTEntry::setOffset(unsigned int)>:
c000f08a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f08e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f092:	66 89 02             	mov    WORD PTR [edx],ax
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f09c:	c3                   	ret    
c000f09d:	90                   	nop

c000f09e <IDT::IDT()>:
c000f09e:	90                   	nop
c000f09f:	c3                   	ret    

c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a4:	83 c0 30             	add    eax,0x30
c000f0a7:	c3                   	ret    

c000f0a8 <IDT::addEntry(IDTEntry, int)>:
c000f0a8:	53                   	push   ebx
c000f0a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f0b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0b9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f0bc:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f0c0:	5b                   	pop    ebx
c000f0c1:	c3                   	ret    

c000f0c2 <IDT::addEntry(int, void (*)(), bool)>:
c000f0c2:	53                   	push   ebx
c000f0c3:	83 ec 10             	sub    esp,0x10
c000f0c6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f0cb:	50                   	push   eax
c000f0cc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f0d0:	53                   	push   ebx
c000f0d1:	e8 46 ff ff ff       	call   c000f01c <IDTEntry::IDTEntry(bool)>
c000f0d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0da:	53                   	push   ebx
c000f0db:	e8 aa ff ff ff       	call   c000f08a <IDTEntry::setOffset(unsigned int)>
c000f0e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f0f0:	e8 b3 ff ff ff       	call   c000f0a8 <IDT::addEntry(IDTEntry, int)>
c000f0f5:	83 c4 30             	add    esp,0x30
c000f0f8:	5b                   	pop    ebx
c000f0f9:	c3                   	ret    

c000f0fa <IDT::flush()>:
c000f0fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0fe:	66 c7 05 98 cd 02 c0 ff 07 	mov    WORD PTR ds:0xc002cd98,0x7ff
c000f107:	a3 9a cd 02 c0       	mov    ds:0xc002cd9a,eax
c000f10c:	0f 01 1d 98 cd 02 c0 	lidtd  ds:0xc002cd98
c000f113:	c3                   	ret    

c000f114 <IDT::setup()>:
c000f114:	57                   	push   edi
c000f115:	56                   	push   esi
c000f116:	53                   	push   ebx
c000f117:	83 ec 10             	sub    esp,0x10
c000f11a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f11e:	6a 00                	push   0x0
c000f120:	68 68 04 00 c0       	push   0xc0000468
c000f125:	6a 00                	push   0x0
c000f127:	53                   	push   ebx
c000f128:	e8 95 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f12d:	6a 00                	push   0x0
c000f12f:	68 78 04 00 c0       	push   0xc0000478
c000f134:	6a 01                	push   0x1
c000f136:	53                   	push   ebx
c000f137:	e8 86 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f13c:	83 c4 20             	add    esp,0x20
c000f13f:	6a 00                	push   0x0
c000f141:	68 82 04 00 c0       	push   0xc0000482
c000f146:	6a 02                	push   0x2
c000f148:	53                   	push   ebx
c000f149:	e8 74 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f14e:	6a 00                	push   0x0
c000f150:	68 8c 04 00 c0       	push   0xc000048c
c000f155:	6a 03                	push   0x3
c000f157:	53                   	push   ebx
c000f158:	e8 65 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f15d:	83 c4 20             	add    esp,0x20
c000f160:	6a 00                	push   0x0
c000f162:	68 96 04 00 c0       	push   0xc0000496
c000f167:	6a 04                	push   0x4
c000f169:	53                   	push   ebx
c000f16a:	e8 53 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f16f:	6a 00                	push   0x0
c000f171:	68 a0 04 00 c0       	push   0xc00004a0
c000f176:	6a 05                	push   0x5
c000f178:	53                   	push   ebx
c000f179:	e8 44 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f17e:	83 c4 20             	add    esp,0x20
c000f181:	6a 00                	push   0x0
c000f183:	68 aa 04 00 c0       	push   0xc00004aa
c000f188:	6a 06                	push   0x6
c000f18a:	53                   	push   ebx
c000f18b:	e8 32 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f190:	6a 00                	push   0x0
c000f192:	68 b4 04 00 c0       	push   0xc00004b4
c000f197:	6a 07                	push   0x7
c000f199:	53                   	push   ebx
c000f19a:	e8 23 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f19f:	83 c4 20             	add    esp,0x20
c000f1a2:	6a 00                	push   0x0
c000f1a4:	68 be 04 00 c0       	push   0xc00004be
c000f1a9:	6a 08                	push   0x8
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 11 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1b1:	6a 00                	push   0x0
c000f1b3:	68 c6 04 00 c0       	push   0xc00004c6
c000f1b8:	6a 09                	push   0x9
c000f1ba:	53                   	push   ebx
c000f1bb:	e8 02 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1c0:	83 c4 20             	add    esp,0x20
c000f1c3:	6a 00                	push   0x0
c000f1c5:	68 d0 04 00 c0       	push   0xc00004d0
c000f1ca:	6a 0a                	push   0xa
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 f0 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1d2:	6a 00                	push   0x0
c000f1d4:	68 d8 04 00 c0       	push   0xc00004d8
c000f1d9:	6a 0b                	push   0xb
c000f1db:	53                   	push   ebx
c000f1dc:	e8 e1 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1e1:	83 c4 20             	add    esp,0x20
c000f1e4:	6a 00                	push   0x0
c000f1e6:	68 e0 04 00 c0       	push   0xc00004e0
c000f1eb:	6a 0c                	push   0xc
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 cf fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1f3:	6a 00                	push   0x0
c000f1f5:	68 e8 04 00 c0       	push   0xc00004e8
c000f1fa:	6a 0d                	push   0xd
c000f1fc:	53                   	push   ebx
c000f1fd:	e8 c0 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f202:	83 c4 20             	add    esp,0x20
c000f205:	6a 00                	push   0x0
c000f207:	68 f0 04 00 c0       	push   0xc00004f0
c000f20c:	6a 0e                	push   0xe
c000f20e:	53                   	push   ebx
c000f20f:	e8 ae fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f214:	6a 00                	push   0x0
c000f216:	68 f8 04 00 c0       	push   0xc00004f8
c000f21b:	6a 0f                	push   0xf
c000f21d:	53                   	push   ebx
c000f21e:	e8 9f fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f223:	83 c4 20             	add    esp,0x20
c000f226:	6a 00                	push   0x0
c000f228:	68 02 05 00 c0       	push   0xc0000502
c000f22d:	6a 10                	push   0x10
c000f22f:	53                   	push   ebx
c000f230:	e8 8d fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f235:	6a 00                	push   0x0
c000f237:	68 0c 05 00 c0       	push   0xc000050c
c000f23c:	6a 11                	push   0x11
c000f23e:	53                   	push   ebx
c000f23f:	e8 7e fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f244:	83 c4 20             	add    esp,0x20
c000f247:	6a 00                	push   0x0
c000f249:	68 16 05 00 c0       	push   0xc0000516
c000f24e:	6a 12                	push   0x12
c000f250:	53                   	push   ebx
c000f251:	e8 6c fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f256:	6a 01                	push   0x1
c000f258:	68 b0 05 00 c0       	push   0xc00005b0
c000f25d:	6a 60                	push   0x60
c000f25f:	53                   	push   ebx
c000f260:	e8 5d fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f265:	83 c4 20             	add    esp,0x20
c000f268:	6a 00                	push   0x0
c000f26a:	68 b7 05 00 c0       	push   0xc00005b7
c000f26f:	6a 20                	push   0x20
c000f271:	53                   	push   ebx
c000f272:	e8 4b fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f277:	6a 00                	push   0x0
c000f279:	68 a2 05 00 c0       	push   0xc00005a2
c000f27e:	6a 21                	push   0x21
c000f280:	53                   	push   ebx
c000f281:	e8 3c fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f286:	83 c4 20             	add    esp,0x20
c000f289:	6a 00                	push   0x0
c000f28b:	68 a9 05 00 c0       	push   0xc00005a9
c000f290:	6a 22                	push   0x22
c000f292:	53                   	push   ebx
c000f293:	e8 2a fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f298:	6a 00                	push   0x0
c000f29a:	68 20 05 00 c0       	push   0xc0000520
c000f29f:	6a 23                	push   0x23
c000f2a1:	53                   	push   ebx
c000f2a2:	e8 1b fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2a7:	83 c4 20             	add    esp,0x20
c000f2aa:	6a 00                	push   0x0
c000f2ac:	68 2a 05 00 c0       	push   0xc000052a
c000f2b1:	6a 24                	push   0x24
c000f2b3:	53                   	push   ebx
c000f2b4:	e8 09 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2b9:	6a 00                	push   0x0
c000f2bb:	68 34 05 00 c0       	push   0xc0000534
c000f2c0:	6a 25                	push   0x25
c000f2c2:	53                   	push   ebx
c000f2c3:	e8 fa fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2c8:	83 c4 20             	add    esp,0x20
c000f2cb:	6a 00                	push   0x0
c000f2cd:	68 3e 05 00 c0       	push   0xc000053e
c000f2d2:	6a 26                	push   0x26
c000f2d4:	53                   	push   ebx
c000f2d5:	e8 e8 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2da:	6a 00                	push   0x0
c000f2dc:	68 48 05 00 c0       	push   0xc0000548
c000f2e1:	6a 27                	push   0x27
c000f2e3:	53                   	push   ebx
c000f2e4:	e8 d9 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2e9:	83 c4 20             	add    esp,0x20
c000f2ec:	6a 00                	push   0x0
c000f2ee:	68 52 05 00 c0       	push   0xc0000552
c000f2f3:	6a 28                	push   0x28
c000f2f5:	53                   	push   ebx
c000f2f6:	e8 c7 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2fb:	6a 00                	push   0x0
c000f2fd:	68 5c 05 00 c0       	push   0xc000055c
c000f302:	6a 29                	push   0x29
c000f304:	53                   	push   ebx
c000f305:	e8 b8 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f30a:	83 c4 20             	add    esp,0x20
c000f30d:	6a 00                	push   0x0
c000f30f:	68 66 05 00 c0       	push   0xc0000566
c000f314:	6a 2a                	push   0x2a
c000f316:	53                   	push   ebx
c000f317:	e8 a6 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f31c:	6a 00                	push   0x0
c000f31e:	68 70 05 00 c0       	push   0xc0000570
c000f323:	6a 2b                	push   0x2b
c000f325:	53                   	push   ebx
c000f326:	e8 97 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f32b:	83 c4 20             	add    esp,0x20
c000f32e:	6a 00                	push   0x0
c000f330:	68 7a 05 00 c0       	push   0xc000057a
c000f335:	6a 2c                	push   0x2c
c000f337:	53                   	push   ebx
c000f338:	e8 85 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f33d:	6a 00                	push   0x0
c000f33f:	68 84 05 00 c0       	push   0xc0000584
c000f344:	6a 2d                	push   0x2d
c000f346:	53                   	push   ebx
c000f347:	e8 76 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f34c:	83 c4 20             	add    esp,0x20
c000f34f:	6a 00                	push   0x0
c000f351:	68 8e 05 00 c0       	push   0xc000058e
c000f356:	6a 2e                	push   0x2e
c000f358:	53                   	push   ebx
c000f359:	e8 64 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f35e:	6a 00                	push   0x0
c000f360:	68 98 05 00 c0       	push   0xc0000598
c000f365:	6a 2f                	push   0x2f
c000f367:	53                   	push   ebx
c000f368:	e8 55 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f36d:	83 c4 20             	add    esp,0x20
c000f370:	6a 00                	push   0x0
c000f372:	68 ed 05 00 c0       	push   0xc00005ed
c000f377:	6a 30                	push   0x30
c000f379:	53                   	push   ebx
c000f37a:	e8 43 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f37f:	6a 00                	push   0x0
c000f381:	68 f7 05 00 c0       	push   0xc00005f7
c000f386:	6a 31                	push   0x31
c000f388:	53                   	push   ebx
c000f389:	e8 34 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f38e:	83 c4 20             	add    esp,0x20
c000f391:	6a 00                	push   0x0
c000f393:	68 01 06 00 c0       	push   0xc0000601
c000f398:	6a 32                	push   0x32
c000f39a:	53                   	push   ebx
c000f39b:	e8 22 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3a0:	6a 00                	push   0x0
c000f3a2:	68 0b 06 00 c0       	push   0xc000060b
c000f3a7:	6a 33                	push   0x33
c000f3a9:	53                   	push   ebx
c000f3aa:	e8 13 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3af:	83 c4 20             	add    esp,0x20
c000f3b2:	6a 00                	push   0x0
c000f3b4:	68 15 06 00 c0       	push   0xc0000615
c000f3b9:	6a 34                	push   0x34
c000f3bb:	53                   	push   ebx
c000f3bc:	e8 01 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3c1:	6a 00                	push   0x0
c000f3c3:	68 1f 06 00 c0       	push   0xc000061f
c000f3c8:	6a 35                	push   0x35
c000f3ca:	53                   	push   ebx
c000f3cb:	e8 f2 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3d0:	83 c4 20             	add    esp,0x20
c000f3d3:	6a 00                	push   0x0
c000f3d5:	68 29 06 00 c0       	push   0xc0000629
c000f3da:	6a 36                	push   0x36
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 e0 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3e2:	6a 00                	push   0x0
c000f3e4:	68 33 06 00 c0       	push   0xc0000633
c000f3e9:	6a 37                	push   0x37
c000f3eb:	53                   	push   ebx
c000f3ec:	e8 d1 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	e8 7c 26 00 00       	call   c0011a75 <Virt::getAKernelVAS()>
c000f3f9:	52                   	push   edx
c000f3fa:	6a 03                	push   0x3
c000f3fc:	6a 02                	push   0x2
c000f3fe:	50                   	push   eax
c000f3ff:	e8 ac 2c 00 00       	call   c00120b0 <VAS::allocatePages(int, int)>
c000f404:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f40b:	89 c6                	mov    esi,eax
c000f40d:	e8 12 02 00 00       	call   c000f624 <malloc>
c000f412:	81 c6 00 20 00 00    	add    esi,0x2000
c000f418:	89 04 24             	mov    DWORD PTR [esp],eax
c000f41b:	89 c7                	mov    edi,eax
c000f41d:	e8 f4 1d 00 00       	call   c0011216 <TSS::TSS()>
c000f422:	83 c4 0c             	add    esp,0xc
c000f425:	68 be 04 00 c0       	push   0xc00004be
c000f42a:	56                   	push   esi
c000f42b:	57                   	push   edi
c000f42c:	e8 25 1e 00 00       	call   c0011256 <TSS::setup(unsigned long, unsigned long)>
c000f431:	59                   	pop    ecx
c000f432:	89 c6                	mov    esi,eax
c000f434:	5f                   	pop    edi
c000f435:	6a 00                	push   0x0
c000f437:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f43b:	50                   	push   eax
c000f43c:	e8 db fb ff ff       	call   c000f01c <IDTEntry::IDTEntry(bool)>
c000f441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f445:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f44a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f451:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f457:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f45b:	80 ce 05             	or     dh,0x5
c000f45e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f465:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f469:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f46c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f46f:	e8 86 fc ff ff       	call   c000f0fa <IDT::flush()>
c000f474:	83 c4 20             	add    esp,0x20
c000f477:	5b                   	pop    ebx
c000f478:	5e                   	pop    esi
c000f479:	5f                   	pop    edi
c000f47a:	c3                   	ret    

c000f47b <sbrk>:
c000f47b:	55                   	push   ebp
c000f47c:	57                   	push   edi
c000f47d:	56                   	push   esi
c000f47e:	53                   	push   ebx
c000f47f:	83 ec 1c             	sub    esp,0x1c
c000f482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f486:	85 c0                	test   eax,eax
c000f488:	74 3e                	je     c000f4c8 <sbrk+0x4d>
c000f48a:	78 43                	js     c000f4cf <sbrk+0x54>
c000f48c:	8b 15 88 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd88
c000f492:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f498:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f49e:	83 e2 01             	and    edx,0x1
c000f4a1:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f4a5:	8b 0d b4 bc 02 c0    	mov    ecx,DWORD PTR ds:0xc002bcb4
c000f4ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f4af:	05 ff 0f 00 00       	add    eax,0xfff
c000f4b4:	89 c2                	mov    edx,eax
c000f4b6:	78 2f                	js     c000f4e7 <sbrk+0x6c>
c000f4b8:	c1 fa 0c             	sar    edx,0xc
c000f4bb:	89 d7                	mov    edi,edx
c000f4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4c1:	be 00 00 00 00       	mov    esi,0x0
c000f4c6:	eb 36                	jmp    c000f4fe <sbrk+0x83>
c000f4c8:	a1 b4 bc 02 c0       	mov    eax,ds:0xc002bcb4
c000f4cd:	eb 74                	jmp    c000f543 <sbrk+0xc8>
c000f4cf:	83 ec 08             	sub    esp,0x8
c000f4d2:	50                   	push   eax
c000f4d3:	68 c8 8e 02 c0       	push   0xc0028ec8
c000f4d8:	e8 f8 33 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000f4dd:	83 c4 10             	add    esp,0x10
c000f4e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4e5:	eb 5c                	jmp    c000f543 <sbrk+0xc8>
c000f4e7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f4ed:	eb c9                	jmp    c000f4b8 <sbrk+0x3d>
c000f4ef:	81 05 b4 bc 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002bcb4,0x1000
c000f4f9:	46                   	inc    esi
c000f4fa:	39 f7                	cmp    edi,esi
c000f4fc:	74 34                	je     c000f532 <sbrk+0xb7>
c000f4fe:	e8 72 25 00 00       	call   c0011a75 <Virt::getAKernelVAS()>
c000f503:	89 c3                	mov    ebx,eax
c000f505:	8b 2d b4 bc 02 c0    	mov    ebp,DWORD PTR ds:0xc002bcb4
c000f50b:	e8 93 07 00 00       	call   c000fca3 <Phys::allocatePage()>
c000f510:	68 01 04 00 00       	push   0x401
c000f515:	55                   	push   ebp
c000f516:	50                   	push   eax
c000f517:	53                   	push   ebx
c000f518:	e8 93 2a 00 00       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f51d:	83 c4 10             	add    esp,0x10
c000f520:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f525:	74 c8                	je     c000f4ef <sbrk+0x74>
c000f527:	8b 1d b4 bc 02 c0    	mov    ebx,DWORD PTR ds:0xc002bcb4
c000f52d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f530:	eb bd                	jmp    c000f4ef <sbrk+0x74>
c000f532:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f537:	75 12                	jne    c000f54b <sbrk+0xd0>
c000f539:	0f 20 d8             	mov    eax,cr3
c000f53c:	0f 22 d8             	mov    cr3,eax
c000f53f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f543:	83 c4 1c             	add    esp,0x1c
c000f546:	5b                   	pop    ebx
c000f547:	5e                   	pop    esi
c000f548:	5f                   	pop    edi
c000f549:	5d                   	pop    ebp
c000f54a:	c3                   	ret    
c000f54b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f54f:	89 cb                	mov    ebx,ecx
c000f551:	c1 eb 0a             	shr    ebx,0xa
c000f554:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f55a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f564:	c1 e0 0c             	shl    eax,0xc
c000f567:	01 c8                	add    eax,ecx
c000f569:	c1 e8 0a             	shr    eax,0xa
c000f56c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f571:	2d 00 00 40 00       	sub    eax,0x400000
c000f576:	39 c3                	cmp    ebx,eax
c000f578:	77 c5                	ja     c000f53f <sbrk+0xc4>
c000f57a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f57d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f583:	39 d8                	cmp    eax,ebx
c000f585:	73 f3                	jae    c000f57a <sbrk+0xff>
c000f587:	eb b6                	jmp    c000f53f <sbrk+0xc4>

c000f589 <mmap>:
c000f589:	83 ec 18             	sub    esp,0x18
c000f58c:	68 f8 8e 02 c0       	push   0xc0028ef8
c000f591:	e8 2d a5 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c000f596:	b8 00 00 00 00       	mov    eax,0x0
c000f59b:	83 c4 1c             	add    esp,0x1c
c000f59e:	c3                   	ret    

c000f59f <munmap>:
c000f59f:	83 ec 18             	sub    esp,0x18
c000f5a2:	68 fd 8e 02 c0       	push   0xc0028efd
c000f5a7:	e8 17 a5 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c000f5ac:	b8 00 00 00 00       	mov    eax,0x0
c000f5b1:	83 c4 1c             	add    esp,0x1c
c000f5b4:	c3                   	ret    

c000f5b5 <liballoc_lock()>:
c000f5b5:	83 ec 0c             	sub    esp,0xc
c000f5b8:	e8 b5 da 00 00       	call   c001d072 <lockScheduler()>
c000f5bd:	b8 00 00 00 00       	mov    eax,0x0
c000f5c2:	83 c4 0c             	add    esp,0xc
c000f5c5:	c3                   	ret    

c000f5c6 <liballoc_unlock()>:
c000f5c6:	83 ec 0c             	sub    esp,0xc
c000f5c9:	e8 a6 da 00 00       	call   c001d074 <unlockScheduler()>
c000f5ce:	b8 00 00 00 00       	mov    eax,0x0
c000f5d3:	83 c4 0c             	add    esp,0xc
c000f5d6:	c3                   	ret    

c000f5d7 <liballoc_alloc(int)>:
c000f5d7:	83 ec 0c             	sub    esp,0xc
c000f5da:	e8 96 24 00 00       	call   c0011a75 <Virt::getAKernelVAS()>
c000f5df:	83 ec 04             	sub    esp,0x4
c000f5e2:	6a 01                	push   0x1
c000f5e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5e8:	50                   	push   eax
c000f5e9:	e8 c2 2a 00 00       	call   c00120b0 <VAS::allocatePages(int, int)>
c000f5ee:	83 c4 1c             	add    esp,0x1c
c000f5f1:	c3                   	ret    

c000f5f2 <liballoc_free(void*, int)>:
c000f5f2:	83 ec 0c             	sub    esp,0xc
c000f5f5:	e8 7b 24 00 00       	call   c0011a75 <Virt::getAKernelVAS()>
c000f5fa:	83 ec 08             	sub    esp,0x8
c000f5fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f601:	50                   	push   eax
c000f602:	e8 65 27 00 00       	call   c0011d6c <VAS::freeAllocatedPages(unsigned long)>
c000f607:	b8 00 00 00 00       	mov    eax,0x0
c000f60c:	83 c4 1c             	add    esp,0x1c
c000f60f:	c3                   	ret    

c000f610 <realloc>:
c000f610:	83 ec 14             	sub    esp,0x14
c000f613:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f61b:	e8 1d 1e ff ff       	call   c000143d <dlrealloc>
c000f620:	83 c4 1c             	add    esp,0x1c
c000f623:	c3                   	ret    

c000f624 <malloc>:
c000f624:	83 ec 18             	sub    esp,0x18
c000f627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f62b:	e8 d0 18 ff ff       	call   c0000f00 <dlmalloc>
c000f630:	83 c4 1c             	add    esp,0x1c
c000f633:	c3                   	ret    

c000f634 <free>:
c000f634:	83 ec 18             	sub    esp,0x18
c000f637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f63b:	e8 65 15 ff ff       	call   c0000ba5 <dlfree>
c000f640:	83 c4 1c             	add    esp,0x1c
c000f643:	c3                   	ret    

c000f644 <rfree>:
c000f644:	83 ec 18             	sub    esp,0x18
c000f647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f64b:	e8 55 15 ff ff       	call   c0000ba5 <dlfree>
c000f650:	83 c4 1c             	add    esp,0x1c
c000f653:	c3                   	ret    

c000f654 <calloc>:
c000f654:	56                   	push   esi
c000f655:	53                   	push   ebx
c000f656:	83 ec 10             	sub    esp,0x10
c000f659:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f65d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f662:	53                   	push   ebx
c000f663:	e8 bc ff ff ff       	call   c000f624 <malloc>
c000f668:	89 c6                	mov    esi,eax
c000f66a:	83 c4 0c             	add    esp,0xc
c000f66d:	53                   	push   ebx
c000f66e:	6a 00                	push   0x0
c000f670:	50                   	push   eax
c000f671:	e8 4e 10 ff ff       	call   c00006c4 <memset>
c000f676:	89 f0                	mov    eax,esi
c000f678:	83 c4 14             	add    esp,0x14
c000f67b:	5b                   	pop    ebx
c000f67c:	5e                   	pop    esi
c000f67d:	c3                   	ret    

c000f67e <hwTextMode_loadInData(VgaText*)>:
c000f67e:	55                   	push   ebp
c000f67f:	a1 c0 bc 02 c0       	mov    eax,ds:0xc002bcc0
c000f684:	57                   	push   edi
c000f685:	56                   	push   esi
c000f686:	53                   	push   ebx
c000f687:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f68b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f691:	85 d2                	test   edx,edx
c000f693:	7e 2f                	jle    c000f6c4 <hwTextMode_loadInData(VgaText*)+0x46>
c000f695:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f69b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f69e:	31 f6                	xor    esi,esi
c000f6a0:	29 fd                	sub    ebp,edi
c000f6a2:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f6a5:	31 c0                	xor    eax,eax
c000f6a7:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f6ab:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f6af:	40                   	inc    eax
c000f6b0:	83 f8 50             	cmp    eax,0x50
c000f6b3:	75 f2                	jne    c000f6a7 <hwTextMode_loadInData(VgaText*)+0x29>
c000f6b5:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f6bb:	46                   	inc    esi
c000f6bc:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f6c2:	7f de                	jg     c000f6a2 <hwTextMode_loadInData(VgaText*)+0x24>
c000f6c4:	5b                   	pop    ebx
c000f6c5:	5e                   	pop    esi
c000f6c6:	5f                   	pop    edi
c000f6c7:	5d                   	pop    ebp
c000f6c8:	c3                   	ret    

c000f6c9 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f6c9:	55                   	push   ebp
c000f6ca:	80 3d 20 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce20,0x0
c000f6d1:	57                   	push   edi
c000f6d2:	56                   	push   esi
c000f6d3:	53                   	push   ebx
c000f6d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f6d8:	75 50                	jne    c000f72a <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f6da:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6e0:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6e6:	8b 15 c0 bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bcc0
c000f6ec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f6f0:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f6f6:	eb 0e                	jmp    c000f706 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f6f8:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6fe:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f704:	89 da                	mov    edx,ebx
c000f706:	83 e5 0f             	and    ebp,0xf
c000f709:	c1 e0 04             	shl    eax,0x4
c000f70c:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f70f:	0f b6 c0             	movzx  eax,al
c000f712:	41                   	inc    ecx
c000f713:	09 e8                	or     eax,ebp
c000f715:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f719:	c1 e0 08             	shl    eax,0x8
c000f71c:	09 e8                	or     eax,ebp
c000f71e:	39 fb                	cmp    ebx,edi
c000f720:	66 89 02             	mov    WORD PTR [edx],ax
c000f723:	75 d3                	jne    c000f6f8 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f725:	5b                   	pop    ebx
c000f726:	5e                   	pop    esi
c000f727:	5f                   	pop    edi
c000f728:	5d                   	pop    ebp
c000f729:	c3                   	ret    
c000f72a:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f734:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f73e:	31 c0                	xor    eax,eax
c000f740:	bd 02 00 00 00       	mov    ebp,0x2
c000f745:	eb 9f                	jmp    c000f6e6 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f747 <hwTextMode_showCursor(VgaText*, bool)>:
c000f747:	56                   	push   esi
c000f748:	80 3d 20 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce20,0x0
c000f74f:	53                   	push   ebx
c000f750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f754:	75 39                	jne    c000f78f <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f756:	84 c0                	test   al,al
c000f758:	74 38                	je     c000f792 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f75a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f75f:	b0 0a                	mov    al,0xa
c000f761:	89 da                	mov    edx,ebx
c000f763:	ee                   	out    dx,al
c000f764:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f769:	89 ca                	mov    edx,ecx
c000f76b:	ec                   	in     al,dx
c000f76c:	b2 0f                	mov    dl,0xf
c000f76e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f772:	83 e0 c0             	and    eax,0xffffffc0
c000f775:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f77b:	09 d0                	or     eax,edx
c000f77d:	89 ca                	mov    edx,ecx
c000f77f:	ee                   	out    dx,al
c000f780:	b0 0b                	mov    al,0xb
c000f782:	89 da                	mov    edx,ebx
c000f784:	ee                   	out    dx,al
c000f785:	89 ca                	mov    edx,ecx
c000f787:	ec                   	in     al,dx
c000f788:	83 e0 e0             	and    eax,0xffffffe0
c000f78b:	83 c8 0f             	or     eax,0xf
c000f78e:	ee                   	out    dx,al
c000f78f:	5b                   	pop    ebx
c000f790:	5e                   	pop    esi
c000f791:	c3                   	ret    
c000f792:	b0 0a                	mov    al,0xa
c000f794:	ba d4 03 00 00       	mov    edx,0x3d4
c000f799:	ee                   	out    dx,al
c000f79a:	b0 20                	mov    al,0x20
c000f79c:	ba d5 03 00 00       	mov    edx,0x3d5
c000f7a1:	ee                   	out    dx,al
c000f7a2:	5b                   	pop    ebx
c000f7a3:	5e                   	pop    esi
c000f7a4:	c3                   	ret    

c000f7a5 <hwTextMode_update(VgaText*)>:
c000f7a5:	c3                   	ret    

c000f7a6 <hwTextMode_updateCursor(VgaText*)>:
c000f7a6:	56                   	push   esi
c000f7a7:	80 3d 20 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce20,0x0
c000f7ae:	53                   	push   ebx
c000f7af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b3:	75 3f                	jne    c000f7f4 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f7b5:	be d4 03 00 00       	mov    esi,0x3d4
c000f7ba:	b9 19 00 00 00       	mov    ecx,0x19
c000f7bf:	89 f2                	mov    edx,esi
c000f7c1:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f7c7:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f7cd:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f7d0:	c1 e1 04             	shl    ecx,0x4
c000f7d3:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f7d9:	b0 0f                	mov    al,0xf
c000f7db:	ee                   	out    dx,al
c000f7dc:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f7e1:	88 c8                	mov    al,cl
c000f7e3:	89 da                	mov    edx,ebx
c000f7e5:	ee                   	out    dx,al
c000f7e6:	b0 0e                	mov    al,0xe
c000f7e8:	89 f2                	mov    edx,esi
c000f7ea:	ee                   	out    dx,al
c000f7eb:	89 c8                	mov    eax,ecx
c000f7ed:	89 da                	mov    edx,ebx
c000f7ef:	66 c1 e8 08          	shr    ax,0x8
c000f7f3:	ee                   	out    dx,al
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	c3                   	ret    

c000f7f7 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f7f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7fb:	80 3d 20 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce20,0x0
c000f802:	75 38                	jne    c000f83c <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f804:	ba da 03 00 00       	mov    edx,0x3da
c000f809:	84 c0                	test   al,al
c000f80b:	75 18                	jne    c000f825 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f80d:	ec                   	in     al,dx
c000f80e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f813:	b0 30                	mov    al,0x30
c000f815:	89 ca                	mov    edx,ecx
c000f817:	ee                   	out    dx,al
c000f818:	ba c1 03 00 00       	mov    edx,0x3c1
c000f81d:	ec                   	in     al,dx
c000f81e:	83 c8 08             	or     eax,0x8
c000f821:	89 ca                	mov    edx,ecx
c000f823:	ee                   	out    dx,al
c000f824:	c3                   	ret    
c000f825:	ec                   	in     al,dx
c000f826:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f82b:	b0 30                	mov    al,0x30
c000f82d:	89 ca                	mov    edx,ecx
c000f82f:	ee                   	out    dx,al
c000f830:	ba c1 03 00 00       	mov    edx,0x3c1
c000f835:	ec                   	in     al,dx
c000f836:	83 e0 f7             	and    eax,0xfffffff7
c000f839:	89 ca                	mov    edx,ecx
c000f83b:	ee                   	out    dx,al
c000f83c:	c3                   	ret    

c000f83d <hwTextMode_scrollScreen(VgaText*)>:
c000f83d:	55                   	push   ebp
c000f83e:	57                   	push   edi
c000f83f:	56                   	push   esi
c000f840:	53                   	push   ebx
c000f841:	83 ec 1c             	sub    esp,0x1c
c000f844:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f848:	80 3d 20 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce20,0x0
c000f84f:	74 14                	je     c000f865 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f851:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f85b:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f865:	a1 c0 bc 02 c0       	mov    eax,ds:0xc002bcc0
c000f86a:	bd 02 00 00 00       	mov    ebp,0x2
c000f86f:	05 a0 00 00 00       	add    eax,0xa0
c000f874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f878:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f87c:	31 c0                	xor    eax,eax
c000f87e:	eb 0b                	jmp    c000f88b <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f880:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f886:	74 57                	je     c000f8df <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f888:	43                   	inc    ebx
c000f889:	89 f0                	mov    eax,esi
c000f88b:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f891:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f897:	88 13                	mov    BYTE PTR [ebx],dl
c000f899:	8d 70 01             	lea    esi,[eax+0x1]
c000f89c:	83 fd 18             	cmp    ebp,0x18
c000f89f:	75 df                	jne    c000f880 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f8a1:	a8 01                	test   al,0x1
c000f8a3:	75 13                	jne    c000f8b8 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f8a5:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f8a8:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8ae:	75 d8                	jne    c000f888 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f8b0:	83 c4 1c             	add    esp,0x1c
c000f8b3:	5b                   	pop    ebx
c000f8b4:	5e                   	pop    esi
c000f8b5:	5f                   	pop    edi
c000f8b6:	5d                   	pop    ebp
c000f8b7:	c3                   	ret    
c000f8b8:	83 ec 08             	sub    esp,0x8
c000f8bb:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f8c2:	50                   	push   eax
c000f8c3:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f8c7:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f8ce:	50                   	push   eax
c000f8cf:	e8 14 0c 00 00       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c000f8d4:	83 c4 10             	add    esp,0x10
c000f8d7:	88 07                	mov    BYTE PTR [edi],al
c000f8d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8dd:	eb c9                	jmp    c000f8a8 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f8df:	45                   	inc    ebp
c000f8e0:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f8e8:	eb 8e                	jmp    c000f878 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f8ea <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f8ea:	57                   	push   edi
c000f8eb:	80 3d 20 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce20,0x0
c000f8f2:	56                   	push   esi
c000f8f3:	53                   	push   ebx
c000f8f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8f8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f8fc:	75 65                	jne    c000f963 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f8fe:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f903:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f908:	83 ec 08             	sub    esp,0x8
c000f90b:	52                   	push   edx
c000f90c:	50                   	push   eax
c000f90d:	e8 d6 0b 00 00       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c000f912:	5a                   	pop    edx
c000f913:	0f b6 c0             	movzx  eax,al
c000f916:	59                   	pop    ecx
c000f917:	50                   	push   eax
c000f918:	0f be c3             	movsx  eax,bl
c000f91b:	50                   	push   eax
c000f91c:	e8 6d 0c 00 00       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	8b 35 c0 bc 02 c0    	mov    esi,DWORD PTR ds:0xc002bcc0
c000f92a:	80 3d 20 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce20,0x0
c000f931:	74 07                	je     c000f93a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f933:	66 0f be c3          	movsx  ax,bl
c000f937:	80 cc 02             	or     ah,0x2
c000f93a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f93e:	ba 19 00 00 00       	mov    edx,0x19
c000f943:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f949:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f94c:	8d 14 92             	lea    edx,[edx+edx*4]
c000f94f:	c1 e1 04             	shl    ecx,0x4
c000f952:	c1 e2 04             	shl    edx,0x4
c000f955:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f959:	01 ca                	add    edx,ecx
c000f95b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f95f:	5b                   	pop    ebx
c000f960:	5e                   	pop    esi
c000f961:	5f                   	pop    edi
c000f962:	c3                   	ret    
c000f963:	b8 02 00 00 00       	mov    eax,0x2
c000f968:	31 d2                	xor    edx,edx
c000f96a:	eb 9c                	jmp    c000f908 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f96c <setupTextMode()>:
c000f96c:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f971:	83 e0 30             	and    eax,0x30
c000f974:	66 83 f8 30          	cmp    ax,0x30
c000f978:	75 11                	jne    c000f98b <setupTextMode()+0x1f>
c000f97a:	81 2d c0 bc 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002bcc0,0x8000
c000f984:	c6 05 20 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce20,0x1
c000f98b:	c7 05 58 ce 02 c0 f7 f7 00 c0 	mov    DWORD PTR ds:0xc002ce58,0xc000f7f7
c000f995:	c7 05 44 ce 02 c0 7e f6 00 c0 	mov    DWORD PTR ds:0xc002ce44,0xc000f67e
c000f99f:	c7 05 40 ce 02 c0 c9 f6 00 c0 	mov    DWORD PTR ds:0xc002ce40,0xc000f6c9
c000f9a9:	c7 05 4c ce 02 c0 3d f8 00 c0 	mov    DWORD PTR ds:0xc002ce4c,0xc000f83d
c000f9b3:	c7 05 54 ce 02 c0 47 f7 00 c0 	mov    DWORD PTR ds:0xc002ce54,0xc000f747
c000f9bd:	c7 05 48 ce 02 c0 a5 f7 00 c0 	mov    DWORD PTR ds:0xc002ce48,0xc000f7a5
c000f9c7:	c7 05 50 ce 02 c0 a6 f7 00 c0 	mov    DWORD PTR ds:0xc002ce50,0xc000f7a6
c000f9d1:	c7 05 5c ce 02 c0 ea f8 00 c0 	mov    DWORD PTR ds:0xc002ce5c,0xc000f8ea
c000f9db:	c3                   	ret    

c000f9dc <kernel_main>:
c000f9dc:	57                   	push   edi
c000f9dd:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9e2:	56                   	push   esi
c000f9e3:	31 f6                	xor    esi,esi
c000f9e5:	53                   	push   ebx
c000f9e6:	83 ec 10             	sub    esp,0x10
c000f9e9:	e8 54 09 00 00       	call   c0010342 <installVgaTextImplementation()>
c000f9ee:	e8 79 ff ff ff       	call   c000f96c <setupTextMode()>
c000f9f3:	89 f0                	mov    eax,esi
c000f9f5:	89 fa                	mov    edx,edi
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9fd:	b0 80                	mov    al,0x80
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b1 03                	mov    cl,0x3
c000fa04:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa09:	88 c8                	mov    al,cl
c000fa0b:	ee                   	out    dx,al
c000fa0c:	89 f0                	mov    eax,esi
c000fa0e:	89 fa                	mov    edx,edi
c000fa10:	ee                   	out    dx,al
c000fa11:	88 c8                	mov    al,cl
c000fa13:	89 da                	mov    edx,ebx
c000fa15:	ee                   	out    dx,al
c000fa16:	b0 c7                	mov    al,0xc7
c000fa18:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa1d:	ee                   	out    dx,al
c000fa1e:	b0 0b                	mov    al,0xb
c000fa20:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa25:	ee                   	out    dx,al
c000fa26:	83 ec 0c             	sub    esp,0xc
c000fa29:	68 04 8f 02 c0       	push   0xc0028f04
c000fa2e:	e8 a2 2e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000fa33:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa38:	05 ff 0f 00 00       	add    eax,0xfff
c000fa3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa42:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa45:	e8 b3 03 00 00       	call   c000fdfd <Phys::physicalMemorySetup(unsigned int)>
c000fa4a:	e8 a7 1f 00 00       	call   c00119f6 <Virt::virtualMemorySetup()>
c000fa4f:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa55:	83 c4 10             	add    esp,0x10
c000fa58:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa5e:	75 0e                	jne    c000fa6e <kernel_main+0x92>
c000fa60:	89 d8                	mov    eax,ebx
c000fa62:	25 48 03 00 00       	and    eax,0x348
c000fa67:	3d 00 03 00 00       	cmp    eax,0x300
c000fa6c:	74 10                	je     c000fa7e <kernel_main+0xa2>
c000fa6e:	83 ec 0c             	sub    esp,0xc
c000fa71:	68 0c a6 02 c0       	push   0xc002a60c
c000fa76:	e8 48 a0 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c000fa7b:	83 c4 10             	add    esp,0x10
c000fa7e:	83 ec 0c             	sub    esp,0xc
c000fa81:	89 1d a0 cd 02 c0    	mov    DWORD PTR ds:0xc002cda0,ebx
c000fa87:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa8b:	53                   	push   ebx
c000fa8c:	e8 19 21 00 00       	call   c0011baa <VAS::VAS()>
c000fa91:	89 1d 04 cf 02 c0    	mov    DWORD PTR ds:0xc002cf04,ebx
c000fa97:	e8 84 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa9c:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000faa3:	e8 7c fb ff ff       	call   c000f624 <malloc>
c000faa8:	89 04 24             	mov    DWORD PTR [esp],eax
c000faab:	89 c6                	mov    esi,eax
c000faad:	e8 6c ea ff ff       	call   c000e51e <Computer::Computer()>
c000fab2:	6a 00                	push   0x0
c000fab4:	89 35 88 cd 02 c0    	mov    DWORD PTR ds:0xc002cd88,esi
c000faba:	6a 00                	push   0x0
c000fabc:	6a 00                	push   0x0
c000fabe:	56                   	push   esi
c000fabf:	e8 aa f1 ff ff       	call   c000ec6e <Computer::open(int, int, void*)>
c000fac4:	83 c4 14             	add    esp,0x14
c000fac7:	53                   	push   ebx
c000fac8:	e8 77 23 00 00       	call   c0011e44 <VAS::~VAS()>
c000facd:	c7 04 24 1b 8f 02 c0 	mov    DWORD PTR [esp],0xc0028f1b
c000fad4:	e8 ea 9f 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c000fad9:	83 c4 20             	add    esp,0x20
c000fadc:	5b                   	pop    ebx
c000fadd:	5e                   	pop    esi
c000fade:	5f                   	pop    edi
c000fadf:	c3                   	ret    

c000fae0 <Phys::allocateDMA(unsigned long)>:
c000fae0:	55                   	push   ebp
c000fae1:	31 d2                	xor    edx,edx
c000fae3:	57                   	push   edi
c000fae4:	31 ed                	xor    ebp,ebp
c000fae6:	56                   	push   esi
c000fae7:	31 c9                	xor    ecx,ecx
c000fae9:	53                   	push   ebx
c000faea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000faee:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000faf4:	31 c0                	xor    eax,eax
c000faf6:	c1 ee 0c             	shr    esi,0xc
c000faf9:	eb 17                	jmp    c000fb12 <Phys::allocateDMA(unsigned long)+0x32>
c000fafb:	85 c9                	test   ecx,ecx
c000fafd:	75 04                	jne    c000fb03 <Phys::allocateDMA(unsigned long)+0x23>
c000faff:	89 d5                	mov    ebp,edx
c000fb01:	89 d0                	mov    eax,edx
c000fb03:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb06:	39 de                	cmp    esi,ebx
c000fb08:	74 20                	je     c000fb2a <Phys::allocateDMA(unsigned long)+0x4a>
c000fb0a:	42                   	inc    edx
c000fb0b:	89 d9                	mov    ecx,ebx
c000fb0d:	83 fa 2f             	cmp    edx,0x2f
c000fb10:	7f 11                	jg     c000fb23 <Phys::allocateDMA(unsigned long)+0x43>
c000fb12:	80 ba e0 cd 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3220],0x0
c000fb19:	74 e0                	je     c000fafb <Phys::allocateDMA(unsigned long)+0x1b>
c000fb1b:	31 c9                	xor    ecx,ecx
c000fb1d:	42                   	inc    edx
c000fb1e:	83 fa 2f             	cmp    edx,0x2f
c000fb21:	7e ef                	jle    c000fb12 <Phys::allocateDMA(unsigned long)+0x32>
c000fb23:	5b                   	pop    ebx
c000fb24:	31 c0                	xor    eax,eax
c000fb26:	5e                   	pop    esi
c000fb27:	5f                   	pop    edi
c000fb28:	5d                   	pop    ebp
c000fb29:	c3                   	ret    
c000fb2a:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb2d:	89 d7                	mov    edi,edx
c000fb2f:	4f                   	dec    edi
c000fb30:	79 03                	jns    c000fb35 <Phys::allocateDMA(unsigned long)+0x55>
c000fb32:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb35:	c1 ff 04             	sar    edi,0x4
c000fb38:	89 c2                	mov    edx,eax
c000fb3a:	c1 fa 04             	sar    edx,0x4
c000fb3d:	39 fa                	cmp    edx,edi
c000fb3f:	75 2f                	jne    c000fb70 <Phys::allocateDMA(unsigned long)+0x90>
c000fb41:	85 db                	test   ebx,ebx
c000fb43:	74 1a                	je     c000fb5f <Phys::allocateDMA(unsigned long)+0x7f>
c000fb45:	be e0 cd 02 c0       	mov    esi,0xc002cde0
c000fb4a:	8d 90 e0 cd 02 c0    	lea    edx,[eax-0x3ffd3220]
c000fb50:	f7 d6                	not    esi
c000fb52:	29 c6                	sub    esi,eax
c000fb54:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb57:	42                   	inc    edx
c000fb58:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb5b:	39 d9                	cmp    ecx,ebx
c000fb5d:	7f f5                	jg     c000fb54 <Phys::allocateDMA(unsigned long)+0x74>
c000fb5f:	85 ff                	test   edi,edi
c000fb61:	74 13                	je     c000fb76 <Phys::allocateDMA(unsigned long)+0x96>
c000fb63:	5b                   	pop    ebx
c000fb64:	05 50 20 0c 00       	add    eax,0xc2050
c000fb69:	5e                   	pop    esi
c000fb6a:	c1 e0 0c             	shl    eax,0xc
c000fb6d:	5f                   	pop    edi
c000fb6e:	5d                   	pop    ebp
c000fb6f:	c3                   	ret    
c000fb70:	89 ea                	mov    edx,ebp
c000fb72:	31 c9                	xor    ecx,ecx
c000fb74:	eb a7                	jmp    c000fb1d <Phys::allocateDMA(unsigned long)+0x3d>
c000fb76:	5b                   	pop    ebx
c000fb77:	c1 e0 0c             	shl    eax,0xc
c000fb7a:	5e                   	pop    esi
c000fb7b:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb80:	5f                   	pop    edi
c000fb81:	5d                   	pop    ebp
c000fb82:	c3                   	ret    

c000fb83 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fb83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb87:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fb8b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fb91:	c1 e9 0c             	shr    ecx,0xc
c000fb94:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fb99:	76 25                	jbe    c000fbc0 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fb9b:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fba0:	c1 e8 0c             	shr    eax,0xc
c000fba3:	8d 50 10             	lea    edx,[eax+0x10]
c000fba6:	85 c9                	test   ecx,ecx
c000fba8:	74 15                	je     c000fbbf <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbaa:	8d 82 e0 cd 02 c0    	lea    eax,[edx-0x3ffd3220]
c000fbb0:	8d 94 11 e0 cd 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3220]
c000fbb7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbba:	40                   	inc    eax
c000fbbb:	39 d0                	cmp    eax,edx
c000fbbd:	75 f8                	jne    c000fbb7 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbbf:	c3                   	ret    
c000fbc0:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbc6:	c1 ea 0c             	shr    edx,0xc
c000fbc9:	eb db                	jmp    c000fba6 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbcb <Phys::setPageState(unsigned long, bool)>:
c000fbcb:	56                   	push   esi
c000fbcc:	ba 01 00 00 00       	mov    edx,0x1
c000fbd1:	53                   	push   ebx
c000fbd2:	8b 35 b8 bc 02 c0    	mov    esi,DWORD PTR ds:0xc002bcb8
c000fbd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbdc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbe0:	89 c8                	mov    eax,ecx
c000fbe2:	83 e1 07             	and    ecx,0x7
c000fbe5:	c1 e8 03             	shr    eax,0x3
c000fbe8:	d3 e3                	shl    ebx,cl
c000fbea:	01 c6                	add    esi,eax
c000fbec:	d3 e2                	shl    edx,cl
c000fbee:	f7 d2                	not    edx
c000fbf0:	20 16                	and    BYTE PTR [esi],dl
c000fbf2:	03 05 b8 bc 02 c0    	add    eax,DWORD PTR ds:0xc002bcb8
c000fbf8:	08 18                	or     BYTE PTR [eax],bl
c000fbfa:	5b                   	pop    ebx
c000fbfb:	5e                   	pop    esi
c000fbfc:	c3                   	ret    

c000fbfd <Phys::getPageState(unsigned long)>:
c000fbfd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc01:	8b 15 b8 bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bcb8
c000fc07:	89 c8                	mov    eax,ecx
c000fc09:	83 e1 07             	and    ecx,0x7
c000fc0c:	c1 e8 03             	shr    eax,0x3
c000fc0f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc13:	d3 f8                	sar    eax,cl
c000fc15:	83 e0 01             	and    eax,0x1
c000fc18:	c3                   	ret    

c000fc19 <Phys::freePage(unsigned long)>:
c000fc19:	53                   	push   ebx
c000fc1a:	83 ec 08             	sub    esp,0x8
c000fc1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc21:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc27:	76 57                	jbe    c000fc80 <Phys::freePage(unsigned long)+0x67>
c000fc29:	c1 eb 0c             	shr    ebx,0xc
c000fc2c:	53                   	push   ebx
c000fc2d:	e8 cb ff ff ff       	call   c000fbfd <Phys::getPageState(unsigned long)>
c000fc32:	5a                   	pop    edx
c000fc33:	84 c0                	test   al,al
c000fc35:	74 5b                	je     c000fc92 <Phys::freePage(unsigned long)+0x79>
c000fc37:	a1 cc cd 02 c0       	mov    eax,ds:0xc002cdcc
c000fc3c:	48                   	dec    eax
c000fc3d:	a3 cc cd 02 c0       	mov    ds:0xc002cdcc,eax
c000fc42:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc45:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc48:	c1 e0 02             	shl    eax,0x2
c000fc4b:	99                   	cdq    
c000fc4c:	f7 3d d0 cd 02 c0    	idiv   DWORD PTR ds:0xc002cdd0
c000fc52:	39 05 c8 cd 02 c0    	cmp    DWORD PTR ds:0xc002cdc8,eax
c000fc58:	75 13                	jne    c000fc6d <Phys::freePage(unsigned long)+0x54>
c000fc5a:	83 ec 08             	sub    esp,0x8
c000fc5d:	6a 00                	push   0x0
c000fc5f:	53                   	push   ebx
c000fc60:	e8 66 ff ff ff       	call   c000fbcb <Phys::setPageState(unsigned long, bool)>
c000fc65:	83 c4 10             	add    esp,0x10
c000fc68:	83 c4 08             	add    esp,0x8
c000fc6b:	5b                   	pop    ebx
c000fc6c:	c3                   	ret    
c000fc6d:	83 ec 0c             	sub    esp,0xc
c000fc70:	a3 c8 cd 02 c0       	mov    ds:0xc002cdc8,eax
c000fc75:	50                   	push   eax
c000fc76:	e8 5b 0a 00 00       	call   c00106d6 <VgaText::updateRAMUsageDisplay(int)>
c000fc7b:	83 c4 10             	add    esp,0x10
c000fc7e:	eb da                	jmp    c000fc5a <Phys::freePage(unsigned long)+0x41>
c000fc80:	68 00 10 00 00       	push   0x1000
c000fc85:	53                   	push   ebx
c000fc86:	e8 f8 fe ff ff       	call   c000fb83 <Phys::freeDMA(unsigned long, unsigned long)>
c000fc8b:	59                   	pop    ecx
c000fc8c:	5b                   	pop    ebx
c000fc8d:	83 c4 08             	add    esp,0x8
c000fc90:	5b                   	pop    ebx
c000fc91:	c3                   	ret    
c000fc92:	c7 44 24 10 36 8f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028f36
c000fc9a:	83 c4 08             	add    esp,0x8
c000fc9d:	5b                   	pop    ebx
c000fc9e:	e9 20 9e 00 00       	jmp    c0019ac3 <Krnl::panic(char const*)>

c000fca3 <Phys::allocatePage()>:
c000fca3:	56                   	push   esi
c000fca4:	53                   	push   ebx
c000fca5:	51                   	push   ecx
c000fca6:	8b 35 c0 cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cdc0
c000fcac:	89 f3                	mov    ebx,esi
c000fcae:	eb 0a                	jmp    c000fcba <Phys::allocatePage()+0x17>
c000fcb0:	89 1d c0 cd 02 c0    	mov    DWORD PTR ds:0xc002cdc0,ebx
c000fcb6:	39 de                	cmp    esi,ebx
c000fcb8:	74 24                	je     c000fcde <Phys::allocatePage()+0x3b>
c000fcba:	53                   	push   ebx
c000fcbb:	e8 3d ff ff ff       	call   c000fbfd <Phys::getPageState(unsigned long)>
c000fcc0:	5a                   	pop    edx
c000fcc1:	84 c0                	test   al,al
c000fcc3:	74 5a                	je     c000fd1f <Phys::allocatePage()+0x7c>
c000fcc5:	43                   	inc    ebx
c000fcc6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fccc:	75 e2                	jne    c000fcb0 <Phys::allocatePage()+0xd>
c000fcce:	31 db                	xor    ebx,ebx
c000fcd0:	c7 05 c0 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cdc0,0x0
c000fcda:	39 de                	cmp    esi,ebx
c000fcdc:	75 dc                	jne    c000fcba <Phys::allocatePage()+0x17>
c000fcde:	83 ec 0c             	sub    esp,0xc
c000fce1:	68 4c 8f 02 c0       	push   0xc0028f4c
c000fce6:	e8 ea 2b 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000fceb:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fcf2:	e8 e9 fd ff ff       	call   c000fae0 <Phys::allocateDMA(unsigned long)>
c000fcf7:	83 c4 10             	add    esp,0x10
c000fcfa:	85 c0                	test   eax,eax
c000fcfc:	75 56                	jne    c000fd54 <Phys::allocatePage()+0xb1>
c000fcfe:	83 ec 0c             	sub    esp,0xc
c000fd01:	68 5d 8f 02 c0       	push   0xc0028f5d
c000fd06:	e8 b8 9d 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c000fd0b:	83 c4 10             	add    esp,0x10
c000fd0e:	8b 1d c0 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cdc0
c000fd14:	53                   	push   ebx
c000fd15:	e8 e3 fe ff ff       	call   c000fbfd <Phys::getPageState(unsigned long)>
c000fd1a:	5a                   	pop    edx
c000fd1b:	84 c0                	test   al,al
c000fd1d:	75 a6                	jne    c000fcc5 <Phys::allocatePage()+0x22>
c000fd1f:	6a 01                	push   0x1
c000fd21:	53                   	push   ebx
c000fd22:	e8 a4 fe ff ff       	call   c000fbcb <Phys::setPageState(unsigned long, bool)>
c000fd27:	a1 cc cd 02 c0       	mov    eax,ds:0xc002cdcc
c000fd2c:	59                   	pop    ecx
c000fd2d:	40                   	inc    eax
c000fd2e:	5b                   	pop    ebx
c000fd2f:	a3 cc cd 02 c0       	mov    ds:0xc002cdcc,eax
c000fd34:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd37:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd3a:	c1 e0 02             	shl    eax,0x2
c000fd3d:	99                   	cdq    
c000fd3e:	f7 3d d0 cd 02 c0    	idiv   DWORD PTR ds:0xc002cdd0
c000fd44:	39 05 c8 cd 02 c0    	cmp    DWORD PTR ds:0xc002cdc8,eax
c000fd4a:	75 0c                	jne    c000fd58 <Phys::allocatePage()+0xb5>
c000fd4c:	a1 c0 cd 02 c0       	mov    eax,ds:0xc002cdc0
c000fd51:	c1 e0 0c             	shl    eax,0xc
c000fd54:	5a                   	pop    edx
c000fd55:	5b                   	pop    ebx
c000fd56:	5e                   	pop    esi
c000fd57:	c3                   	ret    
c000fd58:	83 ec 0c             	sub    esp,0xc
c000fd5b:	a3 c8 cd 02 c0       	mov    ds:0xc002cdc8,eax
c000fd60:	50                   	push   eax
c000fd61:	e8 70 09 00 00       	call   c00106d6 <VgaText::updateRAMUsageDisplay(int)>
c000fd66:	83 c4 10             	add    esp,0x10
c000fd69:	eb e1                	jmp    c000fd4c <Phys::allocatePage()+0xa9>

c000fd6b <Phys::allocateContiguousPages(int)>:
c000fd6b:	57                   	push   edi
c000fd6c:	56                   	push   esi
c000fd6d:	53                   	push   ebx
c000fd6e:	31 db                	xor    ebx,ebx
c000fd70:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fd74:	e8 f9 d2 00 00       	call   c001d072 <lockScheduler()>
c000fd79:	85 db                	test   ebx,ebx
c000fd7b:	75 11                	jne    c000fd8e <Phys::allocateContiguousPages(int)+0x23>
c000fd7d:	e8 21 ff ff ff       	call   c000fca3 <Phys::allocatePage()>
c000fd82:	83 ff 01             	cmp    edi,0x1
c000fd85:	89 c6                	mov    esi,eax
c000fd87:	74 21                	je     c000fdaa <Phys::allocateContiguousPages(int)+0x3f>
c000fd89:	bb 01 00 00 00       	mov    ebx,0x1
c000fd8e:	e8 10 ff ff ff       	call   c000fca3 <Phys::allocatePage()>
c000fd93:	89 da                	mov    edx,ebx
c000fd95:	c1 e2 0c             	shl    edx,0xc
c000fd98:	01 f2                	add    edx,esi
c000fd9a:	39 c2                	cmp    edx,eax
c000fd9c:	74 17                	je     c000fdb5 <Phys::allocateContiguousPages(int)+0x4a>
c000fd9e:	bb 01 00 00 00       	mov    ebx,0x1
c000fda3:	89 c6                	mov    esi,eax
c000fda5:	83 ff 01             	cmp    edi,0x1
c000fda8:	75 e4                	jne    c000fd8e <Phys::allocateContiguousPages(int)+0x23>
c000fdaa:	e8 c5 d2 00 00       	call   c001d074 <unlockScheduler()>
c000fdaf:	89 f0                	mov    eax,esi
c000fdb1:	5b                   	pop    ebx
c000fdb2:	5e                   	pop    esi
c000fdb3:	5f                   	pop    edi
c000fdb4:	c3                   	ret    
c000fdb5:	43                   	inc    ebx
c000fdb6:	39 fb                	cmp    ebx,edi
c000fdb8:	75 bf                	jne    c000fd79 <Phys::allocateContiguousPages(int)+0xe>
c000fdba:	e8 b5 d2 00 00       	call   c001d074 <unlockScheduler()>
c000fdbf:	89 f0                	mov    eax,esi
c000fdc1:	5b                   	pop    ebx
c000fdc2:	5e                   	pop    esi
c000fdc3:	5f                   	pop    edi
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fdc5:	56                   	push   esi
c000fdc6:	53                   	push   ebx
c000fdc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdcb:	39 1d c4 cd 02 c0    	cmp    DWORD PTR ds:0xc002cdc4,ebx
c000fdd1:	73 06                	jae    c000fdd9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fdd3:	89 1d c4 cd 02 c0    	mov    DWORD PTR ds:0xc002cdc4,ebx
c000fdd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fddd:	c1 eb 0c             	shr    ebx,0xc
c000fde0:	c1 e8 0c             	shr    eax,0xc
c000fde3:	39 d8                	cmp    eax,ebx
c000fde5:	73 13                	jae    c000fdfa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fde7:	6a 00                	push   0x0
c000fde9:	8d 70 01             	lea    esi,[eax+0x1]
c000fdec:	50                   	push   eax
c000fded:	e8 d9 fd ff ff       	call   c000fbcb <Phys::setPageState(unsigned long, bool)>
c000fdf2:	5a                   	pop    edx
c000fdf3:	89 f0                	mov    eax,esi
c000fdf5:	59                   	pop    ecx
c000fdf6:	39 f3                	cmp    ebx,esi
c000fdf8:	75 ed                	jne    c000fde7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fdfa:	5b                   	pop    ebx
c000fdfb:	5e                   	pop    esi
c000fdfc:	c3                   	ret    

c000fdfd <Phys::physicalMemorySetup(unsigned int)>:
c000fdfd:	55                   	push   ebp
c000fdfe:	57                   	push   edi
c000fdff:	56                   	push   esi
c000fe00:	53                   	push   ebx
c000fe01:	31 db                	xor    ebx,ebx
c000fe03:	83 ec 40             	sub    esp,0x40
c000fe06:	6a 30                	push   0x30
c000fe08:	6a 00                	push   0x0
c000fe0a:	68 e0 cd 02 c0       	push   0xc002cde0
c000fe0f:	e8 b0 08 ff ff       	call   c00006c4 <memset>
c000fe14:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe18:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe1d:	05 00 10 00 00       	add    eax,0x1000
c000fe22:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe26:	83 c4 10             	add    esp,0x10
c000fe29:	83 ec 08             	sub    esp,0x8
c000fe2c:	6a 01                	push   0x1
c000fe2e:	53                   	push   ebx
c000fe2f:	43                   	inc    ebx
c000fe30:	e8 96 fd ff ff       	call   c000fbcb <Phys::setPageState(unsigned long, bool)>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe3e:	75 e9                	jne    c000fe29 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe40:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe47:	66 85 c0             	test   ax,ax
c000fe4a:	0f 84 8e 01 00 00    	je     c000ffde <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe54:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe60:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe65:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe69:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe71:	eb 15                	jmp    c000fe88 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe73:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe77:	83 c3 18             	add    ebx,0x18
c000fe7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe7e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe82:	0f 84 66 01 00 00    	je     c000ffee <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe88:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe8b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe8e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe95:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe99:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe9b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe9e:	01 f0                	add    eax,esi
c000fea0:	55                   	push   ebp
c000fea1:	11 fa                	adc    edx,edi
c000fea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fea7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000feab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000feaf:	56                   	push   esi
c000feb0:	68 98 8f 02 c0       	push   0xc0028f98
c000feb5:	e8 1b 2a 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000feba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000febe:	83 c4 10             	add    esp,0x10
c000fec1:	09 f8                	or     eax,edi
c000fec3:	0f 85 25 01 00 00    	jne    c000ffee <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fec9:	4d                   	dec    ebp
c000feca:	75 a7                	jne    c000fe73 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fecc:	ba 00 00 08 00       	mov    edx,0x80000
c000fed1:	89 c1                	mov    ecx,eax
c000fed3:	39 f2                	cmp    edx,esi
c000fed5:	19 f9                	sbb    ecx,edi
c000fed7:	0f 82 a7 00 00 00    	jb     c000ff84 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fedd:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fee1:	89 c1                	mov    ecx,eax
c000fee3:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fee7:	0f 83 97 00 00 00    	jae    c000ff84 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000feed:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fef2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fef6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fefa:	39 fa                	cmp    edx,edi
c000fefc:	19 e8                	sbb    eax,ebp
c000fefe:	0f 82 14 01 00 00    	jb     c0010018 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000ff04:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff08:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff0c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff12:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff17:	83 d5 ff             	adc    ebp,0xffffffff
c000ff1a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff1e:	31 c0                	xor    eax,eax
c000ff20:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff24:	39 fa                	cmp    edx,edi
c000ff26:	89 c1                	mov    ecx,eax
c000ff28:	19 e9                	sbb    ecx,ebp
c000ff2a:	0f 83 43 ff ff ff    	jae    c000fe73 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff30:	be 00 00 08 00       	mov    esi,0x80000
c000ff35:	50                   	push   eax
c000ff36:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff3a:	57                   	push   edi
c000ff3b:	56                   	push   esi
c000ff3c:	68 bc 8f 02 c0       	push   0xc0028fbc
c000ff41:	e8 8f 29 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ff46:	5a                   	pop    edx
c000ff47:	59                   	pop    ecx
c000ff48:	57                   	push   edi
c000ff49:	56                   	push   esi
c000ff4a:	e8 76 fe ff ff       	call   c000fdc5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff4f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff57:	83 c4 0c             	add    esp,0xc
c000ff5a:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff5e:	03 05 d0 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cdd0
c000ff64:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff6b:	a3 d0 cd 02 c0       	mov    ds:0xc002cdd0,eax
c000ff70:	52                   	push   edx
c000ff71:	50                   	push   eax
c000ff72:	68 79 8f 02 c0       	push   0xc0028f79
c000ff77:	e8 59 29 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	e9 ef fe ff ff       	jmp    c000fe73 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff84:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff90:	39 ea                	cmp    edx,ebp
c000ff92:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff96:	0f 82 d7 fe ff ff    	jb     c000fe73 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff9c:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ffa1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ffa5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ffa9:	0f 83 c4 fe ff ff    	jae    c000fe73 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffaf:	39 ee                	cmp    esi,ebp
c000ffb1:	89 f8                	mov    eax,edi
c000ffb3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffb7:	0f 83 78 ff ff ff    	jae    c000ff35 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffc5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffc9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffcd:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffd9:	e9 57 ff ff ff       	jmp    c000ff35 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffde:	83 ec 0c             	sub    esp,0xc
c000ffe1:	68 6b 8f 02 c0       	push   0xc0028f6b
c000ffe6:	e8 d8 9a 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	bb 40 01 00 00       	mov    ebx,0x140
c000fff3:	83 ec 08             	sub    esp,0x8
c000fff6:	6a 00                	push   0x0
c000fff8:	53                   	push   ebx
c000fff9:	43                   	inc    ebx
c000fffa:	e8 cc fb ff ff       	call   c000fbcb <Phys::setPageState(unsigned long, bool)>
c000ffff:	ff 05 d0 cd 02 c0    	inc    DWORD PTR ds:0xc002cdd0
c0010005:	83 c4 10             	add    esp,0x10
c0010008:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001000e:	75 e3                	jne    c000fff3 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010010:	83 c4 3c             	add    esp,0x3c
c0010013:	5b                   	pop    ebx
c0010014:	5e                   	pop    esi
c0010015:	5f                   	pop    edi
c0010016:	5d                   	pop    ebp
c0010017:	c3                   	ret    
c0010018:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010020:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010028:	e9 d7 fe ff ff       	jmp    c000ff04 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001002d:	90                   	nop

c001002e <Pipe::isAtty()>:
c001002e:	31 c0                	xor    eax,eax
c0010030:	c3                   	ret    
c0010031:	90                   	nop

c0010032 <Pipe::~Pipe()>:
c0010032:	83 ec 0c             	sub    esp,0xc
c0010035:	ba 28 90 02 c0       	mov    edx,0xc0029028
c001003a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001003e:	89 10                	mov    DWORD PTR [eax],edx
c0010040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010044:	83 ec 0c             	sub    esp,0xc
c0010047:	50                   	push   eax
c0010048:	e8 37 16 00 00       	call   c0011684 <UnixFile::~UnixFile()>
c001004d:	83 c4 10             	add    esp,0x10
c0010050:	90                   	nop
c0010051:	83 c4 0c             	add    esp,0xc
c0010054:	c3                   	ret    
c0010055:	90                   	nop

c0010056 <Pipe::~Pipe()>:
c0010056:	83 ec 0c             	sub    esp,0xc
c0010059:	83 ec 0c             	sub    esp,0xc
c001005c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010060:	e8 cd ff ff ff       	call   c0010032 <Pipe::~Pipe()>
c0010065:	83 c4 10             	add    esp,0x10
c0010068:	83 ec 08             	sub    esp,0x8
c001006b:	6a 20                	push   0x20
c001006d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010071:	e8 7f 27 00 00       	call   c00127f5 <operator delete(void*, unsigned long)>
c0010076:	83 c4 10             	add    esp,0x10
c0010079:	83 c4 0c             	add    esp,0xc
c001007c:	c3                   	ret    
c001007d:	90                   	nop

c001007e <Pipe::read(unsigned long long, void*, int*)>:
c001007e:	55                   	push   ebp
c001007f:	57                   	push   edi
c0010080:	56                   	push   esi
c0010081:	53                   	push   ebx
c0010082:	83 ec 1c             	sub    esp,0x1c
c0010085:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010089:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001008d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010091:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010094:	89 c8                	mov    eax,ecx
c0010096:	99                   	cdq    
c0010097:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001009b:	74 19                	je     c00100b6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001009d:	39 f9                	cmp    ecx,edi
c001009f:	89 d1                	mov    ecx,edx
c00100a1:	19 f1                	sbb    ecx,esi
c00100a3:	73 11                	jae    c00100b6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100a5:	e8 c8 cf 00 00       	call   c001d072 <lockScheduler()>
c00100aa:	e8 ff d2 00 00       	call   c001d3ae <schedule()>
c00100af:	e8 c0 cf 00 00       	call   c001d074 <unlockScheduler()>
c00100b4:	eb db                	jmp    c0010091 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100b6:	39 f8                	cmp    eax,edi
c00100b8:	89 d1                	mov    ecx,edx
c00100ba:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00100be:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00100c2:	19 f1                	sbb    ecx,esi
c00100c4:	73 08                	jae    c00100ce <Pipe::read(unsigned long long, void*, int*)+0x50>
c00100c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00100ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100d1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100d4:	29 c6                	sub    esi,eax
c00100d6:	89 f1                	mov    ecx,esi
c00100d8:	c1 f9 1f             	sar    ecx,0x1f
c00100db:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00100df:	89 ca                	mov    edx,ecx
c00100e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100e5:	19 d1                	sbb    ecx,edx
c00100e7:	73 04                	jae    c00100ed <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00100e9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00100ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00100f1:	89 fd                	mov    ebp,edi
c00100f3:	29 f5                	sub    ebp,esi
c00100f5:	85 f6                	test   esi,esi
c00100f7:	74 12                	je     c001010b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00100f9:	52                   	push   edx
c00100fa:	56                   	push   esi
c00100fb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00100fe:	50                   	push   eax
c00100ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010103:	e8 98 05 ff ff       	call   c00006a0 <memcpy>
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	85 ed                	test   ebp,ebp
c001010d:	74 12                	je     c0010121 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001010f:	50                   	push   eax
c0010110:	55                   	push   ebp
c0010111:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010114:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010118:	56                   	push   esi
c0010119:	e8 82 05 ff ff       	call   c00006a0 <memcpy>
c001011e:	83 c4 10             	add    esp,0x10
c0010121:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010124:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010127:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001012a:	99                   	cdq    
c001012b:	89 f7                	mov    edi,esi
c001012d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010135:	c1 ff 1f             	sar    edi,0x1f
c0010138:	57                   	push   edi
c0010139:	56                   	push   esi
c001013a:	52                   	push   edx
c001013b:	50                   	push   eax
c001013c:	e8 9b 56 01 00       	call   c00257dc <__umoddi3>
c0010141:	83 c4 10             	add    esp,0x10
c0010144:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010147:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001014c:	75 10                	jne    c001015e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001014e:	83 ec 0c             	sub    esp,0xc
c0010151:	68 e5 8f 02 c0       	push   0xc0028fe5
c0010156:	e8 68 99 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c001015b:	83 c4 10             	add    esp,0x10
c001015e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010162:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010166:	89 10                	mov    DWORD PTR [eax],edx
c0010168:	83 c4 1c             	add    esp,0x1c
c001016b:	31 c0                	xor    eax,eax
c001016d:	5b                   	pop    ebx
c001016e:	5e                   	pop    esi
c001016f:	5f                   	pop    edi
c0010170:	5d                   	pop    ebp
c0010171:	c3                   	ret    

c0010172 <Pipe::write(unsigned long long, void*, int*)>:
c0010172:	55                   	push   ebp
c0010173:	57                   	push   edi
c0010174:	56                   	push   esi
c0010175:	53                   	push   ebx
c0010176:	83 ec 1c             	sub    esp,0x1c
c0010179:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001017d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010181:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010185:	89 04 24             	mov    DWORD PTR [esp],eax
c0010188:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001018b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001018e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010192:	89 de                	mov    esi,ebx
c0010194:	89 df                	mov    edi,ebx
c0010196:	c1 ff 1f             	sar    edi,0x1f
c0010199:	01 c6                	add    esi,eax
c001019b:	89 c8                	mov    eax,ecx
c001019d:	11 d7                	adc    edi,edx
c001019f:	99                   	cdq    
c00101a0:	39 f1                	cmp    ecx,esi
c00101a2:	89 d0                	mov    eax,edx
c00101a4:	19 f8                	sbb    eax,edi
c00101a6:	b8 01 00 00 00       	mov    eax,0x1
c00101ab:	0f 82 80 00 00 00    	jb     c0010231 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00101b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101b4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00101b7:	01 d8                	add    eax,ebx
c00101b9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00101bd:	99                   	cdq    
c00101be:	f7 f9                	idiv   ecx
c00101c0:	29 d1                	sub    ecx,edx
c00101c2:	89 d7                	mov    edi,edx
c00101c4:	89 c8                	mov    eax,ecx
c00101c6:	99                   	cdq    
c00101c7:	39 ce                	cmp    esi,ecx
c00101c9:	19 d3                	sbb    ebx,edx
c00101cb:	bb 00 00 00 00       	mov    ebx,0x0
c00101d0:	72 04                	jb     c00101d6 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00101d2:	89 f3                	mov    ebx,esi
c00101d4:	29 cb                	sub    ebx,ecx
c00101d6:	89 f1                	mov    ecx,esi
c00101d8:	29 d9                	sub    ecx,ebx
c00101da:	74 1a                	je     c00101f6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00101dc:	52                   	push   edx
c00101dd:	51                   	push   ecx
c00101de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00101e6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101e9:	57                   	push   edi
c00101ea:	e8 b1 04 ff ff       	call   c00006a0 <memcpy>
c00101ef:	83 c4 10             	add    esp,0x10
c00101f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101f6:	85 db                	test   ebx,ebx
c00101f8:	74 12                	je     c001020c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00101fa:	50                   	push   eax
c00101fb:	53                   	push   ebx
c00101fc:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010200:	51                   	push   ecx
c0010201:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010204:	e8 97 04 ff ff       	call   c00006a0 <memcpy>
c0010209:	83 c4 10             	add    esp,0x10
c001020c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001020f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010214:	75 10                	jne    c0010226 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010216:	83 ec 0c             	sub    esp,0xc
c0010219:	68 01 90 02 c0       	push   0xc0029001
c001021e:	e8 a0 98 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0010223:	83 c4 10             	add    esp,0x10
c0010226:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001022a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001022d:	89 38                	mov    DWORD PTR [eax],edi
c001022f:	31 c0                	xor    eax,eax
c0010231:	83 c4 1c             	add    esp,0x1c
c0010234:	5b                   	pop    ebx
c0010235:	5e                   	pop    esi
c0010236:	5f                   	pop    edi
c0010237:	5d                   	pop    ebp
c0010238:	c3                   	ret    
c0010239:	90                   	nop

c001023a <Pipe::Pipe(int)>:
c001023a:	83 ec 0c             	sub    esp,0xc
c001023d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010241:	83 ec 08             	sub    esp,0x8
c0010244:	6a 00                	push   0x0
c0010246:	50                   	push   eax
c0010247:	e8 56 12 00 00       	call   c00114a2 <UnixFile::UnixFile(int)>
c001024c:	83 c4 10             	add    esp,0x10
c001024f:	ba 28 90 02 c0       	mov    edx,0xc0029028
c0010254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010258:	89 10                	mov    DWORD PTR [eax],edx
c001025a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010262:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010269:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010274:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001027b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001027f:	83 ec 0c             	sub    esp,0xc
c0010282:	50                   	push   eax
c0010283:	e8 9c f3 ff ff       	call   c000f624 <malloc>
c0010288:	83 c4 10             	add    esp,0x10
c001028b:	89 c2                	mov    edx,eax
c001028d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010291:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010298:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001029c:	90                   	nop
c001029d:	83 c4 0c             	add    esp,0xc
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <VgaText::isAtty()>:
c00102a2:	b0 01                	mov    al,0x1
c00102a4:	c3                   	ret    
c00102a5:	90                   	nop

c00102a6 <VgaText::~VgaText()>:
c00102a6:	83 ec 0c             	sub    esp,0xc
c00102a9:	ba e4 90 02 c0       	mov    edx,0xc00290e4
c00102ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b2:	89 10                	mov    DWORD PTR [eax],edx
c00102b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	50                   	push   eax
c00102bc:	e8 c3 13 00 00       	call   c0011684 <UnixFile::~UnixFile()>
c00102c1:	83 c4 10             	add    esp,0x10
c00102c4:	90                   	nop
c00102c5:	83 c4 0c             	add    esp,0xc
c00102c8:	c3                   	ret    
c00102c9:	90                   	nop

c00102ca <VgaText::~VgaText()>:
c00102ca:	83 ec 0c             	sub    esp,0xc
c00102cd:	83 ec 0c             	sub    esp,0xc
c00102d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d4:	e8 cd ff ff ff       	call   c00102a6 <VgaText::~VgaText()>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	83 ec 08             	sub    esp,0x8
c00102df:	68 60 12 00 00       	push   0x1260
c00102e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e8:	e8 08 25 00 00       	call   c00127f5 <operator delete(void*, unsigned long)>
c00102ed:	83 c4 10             	add    esp,0x10
c00102f0:	83 c4 0c             	add    esp,0xc
c00102f3:	c3                   	ret    

c00102f4 <VgaText::read(unsigned long long, void*, int*)>:
c00102f4:	83 ec 10             	sub    esp,0x10
c00102f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010303:	e8 39 58 00 00       	call   c0015b41 <readKeyboard(VgaText*, char*, unsigned long)>
c0010308:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001030c:	89 02                	mov    DWORD PTR [edx],eax
c001030e:	31 c0                	xor    eax,eax
c0010310:	83 c4 1c             	add    esp,0x1c
c0010313:	c3                   	ret    

c0010314 <setTerminalScrollLock(bool)>:
c0010314:	c3                   	ret    

c0010315 <addToTerminalCycle(VgaText*)>:
c0010315:	8b 15 60 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ce60
c001031b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001031f:	85 d2                	test   edx,edx
c0010321:	75 0c                	jne    c001032f <addToTerminalCycle(VgaText*)+0x1a>
c0010323:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010329:	a3 60 ce 02 c0       	mov    ds:0xc002ce60,eax
c001032e:	c3                   	ret    
c001032f:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010335:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001033b:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010341:	c3                   	ret    

c0010342 <installVgaTextImplementation()>:
c0010342:	83 ec 10             	sub    esp,0x10
c0010345:	6a 20                	push   0x20
c0010347:	6a 00                	push   0x0
c0010349:	68 40 ce 02 c0       	push   0xc002ce40
c001034e:	e8 71 03 ff ff       	call   c00006c4 <memset>
c0010353:	83 c4 1c             	add    esp,0x1c
c0010356:	c3                   	ret    

c0010357 <scrollTerminalScrollLock(int)>:
c0010357:	c3                   	ret    

c0010358 <VgaText::load()>:
c0010358:	53                   	push   ebx
c0010359:	31 c0                	xor    eax,eax
c001035b:	83 ec 58             	sub    esp,0x58
c001035e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010362:	89 e2                	mov    edx,esp
c0010364:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010368:	40                   	inc    eax
c0010369:	83 f8 50             	cmp    eax,0x50
c001036c:	75 f6                	jne    c0010364 <VgaText::load()+0xc>
c001036e:	31 c0                	xor    eax,eax
c0010370:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010377:	84 c9                	test   cl,cl
c0010379:	74 06                	je     c0010381 <VgaText::load()+0x29>
c001037b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001037e:	40                   	inc    eax
c001037f:	eb ef                	jmp    c0010370 <VgaText::load()+0x18>
c0010381:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010387:	85 c0                	test   eax,eax
c0010389:	74 09                	je     c0010394 <VgaText::load()+0x3c>
c001038b:	51                   	push   ecx
c001038c:	51                   	push   ecx
c001038d:	52                   	push   edx
c001038e:	53                   	push   ebx
c001038f:	ff d0                	call   eax
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001039a:	85 c0                	test   eax,eax
c001039c:	74 09                	je     c00103a7 <VgaText::load()+0x4f>
c001039e:	83 ec 0c             	sub    esp,0xc
c00103a1:	53                   	push   ebx
c00103a2:	ff d0                	call   eax
c00103a4:	83 c4 10             	add    esp,0x10
c00103a7:	83 c4 58             	add    esp,0x58
c00103aa:	5b                   	pop    ebx
c00103ab:	c3                   	ret    

c00103ac <VgaText::updateCursor()>:
c00103ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103b0:	39 05 64 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce64,eax
c00103b6:	75 0c                	jne    c00103c4 <VgaText::updateCursor()+0x18>
c00103b8:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00103be:	85 c0                	test   eax,eax
c00103c0:	74 02                	je     c00103c4 <VgaText::updateCursor()+0x18>
c00103c2:	ff e0                	jmp    eax
c00103c4:	c3                   	ret    
c00103c5:	90                   	nop

c00103c6 <VgaText::showCursor(bool)>:
c00103c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ce:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00103d4:	c3                   	ret    
c00103d5:	90                   	nop

c00103d6 <VgaText::disableBlink(bool)>:
c00103d6:	56                   	push   esi
c00103d7:	53                   	push   ebx
c00103d8:	51                   	push   ecx
c00103d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103e1:	39 1d 64 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce64,ebx
c00103e7:	75 18                	jne    c0010401 <VgaText::disableBlink(bool)+0x2b>
c00103e9:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00103ef:	85 c0                	test   eax,eax
c00103f1:	74 0e                	je     c0010401 <VgaText::disableBlink(bool)+0x2b>
c00103f3:	89 f1                	mov    ecx,esi
c00103f5:	52                   	push   edx
c00103f6:	52                   	push   edx
c00103f7:	0f b6 d1             	movzx  edx,cl
c00103fa:	52                   	push   edx
c00103fb:	53                   	push   ebx
c00103fc:	ff d0                	call   eax
c00103fe:	83 c4 10             	add    esp,0x10
c0010401:	89 f0                	mov    eax,esi
c0010403:	83 f0 01             	xor    eax,0x1
c0010406:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001040c:	58                   	pop    eax
c001040d:	5b                   	pop    ebx
c001040e:	5e                   	pop    esi
c001040f:	c3                   	ret    

c0010410 <VgaText::doANSI_SGR(int)>:
c0010410:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010418:	85 d2                	test   edx,edx
c001041a:	75 14                	jne    c0010430 <VgaText::doANSI_SGR(int)+0x20>
c001041c:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010422:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010428:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001042e:	eb 65                	jmp    c0010495 <VgaText::doANSI_SGR(int)+0x85>
c0010430:	83 fa 07             	cmp    edx,0x7
c0010433:	75 14                	jne    c0010449 <VgaText::doANSI_SGR(int)+0x39>
c0010435:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001043b:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010441:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010447:	eb 4c                	jmp    c0010495 <VgaText::doANSI_SGR(int)+0x85>
c0010449:	83 fa 1b             	cmp    edx,0x1b
c001044c:	74 ce                	je     c001041c <VgaText::doANSI_SGR(int)+0xc>
c001044e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010451:	83 f9 07             	cmp    ecx,0x7
c0010454:	77 09                	ja     c001045f <VgaText::doANSI_SGR(int)+0x4f>
c0010456:	8b 14 8d e0 bc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4320]
c001045d:	eb 20                	jmp    c001047f <VgaText::doANSI_SGR(int)+0x6f>
c001045f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010462:	83 f9 07             	cmp    ecx,0x7
c0010465:	77 09                	ja     c0010470 <VgaText::doANSI_SGR(int)+0x60>
c0010467:	8b 14 8d e0 bc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4320]
c001046e:	eb 25                	jmp    c0010495 <VgaText::doANSI_SGR(int)+0x85>
c0010470:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010473:	83 f9 07             	cmp    ecx,0x7
c0010476:	77 0e                	ja     c0010486 <VgaText::doANSI_SGR(int)+0x76>
c0010478:	8b 14 95 98 bb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4468]
c001047f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010485:	c3                   	ret    
c0010486:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010489:	83 f9 07             	cmp    ecx,0x7
c001048c:	77 0d                	ja     c001049b <VgaText::doANSI_SGR(int)+0x8b>
c001048e:	8b 14 95 70 bb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4490]
c0010495:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001049b:	c3                   	ret    

c001049c <VgaText::setDefaultBgColour(VgaColour)>:
c001049c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104a4:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00104aa:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104b0:	c3                   	ret    
c00104b1:	90                   	nop

c00104b2 <VgaText::setDefaultFgColour(VgaColour)>:
c00104b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ba:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00104c0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104c6:	c3                   	ret    
c00104c7:	90                   	nop

c00104c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00104c8:	53                   	push   ebx
c00104c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00104d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104d5:	51                   	push   ecx
c00104d6:	e8 c1 ff ff ff       	call   c001049c <VgaText::setDefaultBgColour(VgaColour)>
c00104db:	58                   	pop    eax
c00104dc:	5a                   	pop    edx
c00104dd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00104e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00104e5:	5b                   	pop    ebx
c00104e6:	eb ca                	jmp    c00104b2 <VgaText::setDefaultFgColour(VgaColour)>

c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00104e8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00104ec:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00104f1:	83 e0 0f             	and    eax,0xf
c00104f4:	c1 e2 04             	shl    edx,0x4
c00104f7:	09 d0                	or     eax,edx
c00104f9:	c3                   	ret    

c00104fa <VgaText::scrollScreen()>:
c00104fa:	57                   	push   edi
c00104fb:	56                   	push   esi
c00104fc:	be 01 00 00 00       	mov    esi,0x1
c0010501:	53                   	push   ebx
c0010502:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010506:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001050c:	31 ff                	xor    edi,edi
c001050e:	01 d9                	add    ecx,ebx
c0010510:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010513:	83 fe 17             	cmp    esi,0x17
c0010516:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001051c:	75 28                	jne    c0010546 <VgaText::scrollScreen()+0x4c>
c001051e:	f7 c7 01 00 00 00    	test   edi,0x1
c0010524:	74 1c                	je     c0010542 <VgaText::scrollScreen()+0x48>
c0010526:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001052d:	50                   	push   eax
c001052e:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010535:	50                   	push   eax
c0010536:	e8 ad ff ff ff       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c001053b:	5a                   	pop    edx
c001053c:	5a                   	pop    edx
c001053d:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010540:	eb 04                	jmp    c0010546 <VgaText::scrollScreen()+0x4c>
c0010542:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010546:	47                   	inc    edi
c0010547:	41                   	inc    ecx
c0010548:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001054e:	75 c0                	jne    c0010510 <VgaText::scrollScreen()+0x16>
c0010550:	46                   	inc    esi
c0010551:	83 fe 18             	cmp    esi,0x18
c0010554:	75 b0                	jne    c0010506 <VgaText::scrollScreen()+0xc>
c0010556:	39 1d 64 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce64,ebx
c001055c:	75 24                	jne    c0010582 <VgaText::scrollScreen()+0x88>
c001055e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010565:	74 08                	je     c001056f <VgaText::scrollScreen()+0x75>
c0010567:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001056d:	eb 13                	jmp    c0010582 <VgaText::scrollScreen()+0x88>
c001056f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010575:	85 c0                	test   eax,eax
c0010577:	74 09                	je     c0010582 <VgaText::scrollScreen()+0x88>
c0010579:	83 ec 0c             	sub    esp,0xc
c001057c:	53                   	push   ebx
c001057d:	ff d0                	call   eax
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010586:	5b                   	pop    ebx
c0010587:	5e                   	pop    esi
c0010588:	5f                   	pop    edi
c0010589:	e9 1e fe ff ff       	jmp    c00103ac <VgaText::updateCursor()>

c001058e <VgaText::combineCharAndColour(char, unsigned char)>:
c001058e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010593:	c1 e0 08             	shl    eax,0x8
c0010596:	89 c2                	mov    edx,eax
c0010598:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001059d:	09 d0                	or     eax,edx
c001059f:	c3                   	ret    

c00105a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105a0:	53                   	push   ebx
c00105a1:	83 ec 08             	sub    esp,0x8
c00105a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105a8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105ad:	50                   	push   eax
c00105ae:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105b3:	50                   	push   eax
c00105b4:	e8 2f ff ff ff       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c00105b9:	5a                   	pop    edx
c00105ba:	0f b6 c0             	movzx  eax,al
c00105bd:	5b                   	pop    ebx
c00105be:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105c3:	50                   	push   eax
c00105c4:	53                   	push   ebx
c00105c5:	e8 c4 ff ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c00105ca:	5a                   	pop    edx
c00105cb:	5a                   	pop    edx
c00105cc:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105d2:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105d6:	0f b7 d2             	movzx  edx,dx
c00105d9:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00105de:	39 0d 64 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce64,ecx
c00105e4:	75 14                	jne    c00105fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00105e6:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00105ec:	85 c0                	test   eax,eax
c00105ee:	74 0a                	je     c00105fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00105f0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105f4:	83 c4 08             	add    esp,0x8
c00105f7:	5b                   	pop    ebx
c00105f8:	ff e0                	jmp    eax
c00105fa:	83 c4 08             	add    esp,0x8
c00105fd:	5b                   	pop    ebx
c00105fe:	c3                   	ret    
c00105ff:	90                   	nop

c0010600 <VgaText::getCursorX()>:
c0010600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010604:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001060a:	c3                   	ret    
c001060b:	90                   	nop

c001060c <VgaText::getCursorY()>:
c001060c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010610:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010616:	c3                   	ret    
c0010617:	90                   	nop

c0010618 <VgaText::setCursor(int, int)>:
c0010618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010620:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010626:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001062a:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010630:	e9 77 fd ff ff       	jmp    c00103ac <VgaText::updateCursor()>
c0010635:	90                   	nop

c0010636 <VgaText::setCursorX(int)>:
c0010636:	83 ec 10             	sub    esp,0x10
c0010639:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001063d:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010647:	50                   	push   eax
c0010648:	e8 cb ff ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c001064d:	83 c4 1c             	add    esp,0x1c
c0010650:	c3                   	ret    
c0010651:	90                   	nop

c0010652 <VgaText::setCursorY(int)>:
c0010652:	83 ec 10             	sub    esp,0x10
c0010655:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010659:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001065d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010663:	50                   	push   eax
c0010664:	e8 af ff ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c0010669:	83 c4 1c             	add    esp,0x1c
c001066c:	c3                   	ret    
c001066d:	90                   	nop

c001066e <VgaText::incrementCursor(bool)>:
c001066e:	56                   	push   esi
c001066f:	53                   	push   ebx
c0010670:	51                   	push   ecx
c0010671:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010675:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010679:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001067f:	40                   	inc    eax
c0010680:	83 f8 50             	cmp    eax,0x50
c0010683:	74 08                	je     c001068d <VgaText::incrementCursor(bool)+0x1f>
c0010685:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001068b:	eb 33                	jmp    c00106c0 <VgaText::incrementCursor(bool)+0x52>
c001068d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010693:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001069d:	8d 50 01             	lea    edx,[eax+0x1]
c00106a0:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00106a6:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00106ac:	75 12                	jne    c00106c0 <VgaText::incrementCursor(bool)+0x52>
c00106ae:	83 ec 0c             	sub    esp,0xc
c00106b1:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00106b7:	53                   	push   ebx
c00106b8:	e8 3d fe ff ff       	call   c00104fa <VgaText::scrollScreen()>
c00106bd:	83 c4 10             	add    esp,0x10
c00106c0:	89 f0                	mov    eax,esi
c00106c2:	84 c0                	test   al,al
c00106c4:	74 0c                	je     c00106d2 <VgaText::incrementCursor(bool)+0x64>
c00106c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106ca:	5a                   	pop    edx
c00106cb:	5b                   	pop    ebx
c00106cc:	5e                   	pop    esi
c00106cd:	e9 da fc ff ff       	jmp    c00103ac <VgaText::updateCursor()>
c00106d2:	58                   	pop    eax
c00106d3:	5b                   	pop    ebx
c00106d4:	5e                   	pop    esi
c00106d5:	c3                   	ret    

c00106d6 <VgaText::updateRAMUsageDisplay(int)>:
c00106d6:	56                   	push   esi
c00106d7:	8b 35 c0 bc 02 c0    	mov    esi,DWORD PTR ds:0xc002bcc0
c00106dd:	53                   	push   ebx
c00106de:	bb 0a 00 00 00       	mov    ebx,0xa
c00106e3:	6a 0f                	push   0xf
c00106e5:	6a 00                	push   0x0
c00106e7:	e8 fc fd ff ff       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c00106ec:	5a                   	pop    edx
c00106ed:	59                   	pop    ecx
c00106ee:	0f b6 c8             	movzx  ecx,al
c00106f1:	51                   	push   ecx
c00106f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f6:	99                   	cdq    
c00106f7:	f7 fb                	idiv   ebx
c00106f9:	89 d3                	mov    ebx,edx
c00106fb:	83 c0 30             	add    eax,0x30
c00106fe:	83 c3 30             	add    ebx,0x30
c0010701:	0f be c0             	movsx  eax,al
c0010704:	0f b6 db             	movzx  ebx,bl
c0010707:	50                   	push   eax
c0010708:	e8 81 fe ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001070d:	5a                   	pop    edx
c001070e:	5a                   	pop    edx
c001070f:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010716:	51                   	push   ecx
c0010717:	53                   	push   ebx
c0010718:	e8 71 fe ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001071d:	5b                   	pop    ebx
c001071e:	5a                   	pop    edx
c001071f:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010726:	51                   	push   ecx
c0010727:	6a 25                	push   0x25
c0010729:	e8 60 fe ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001072e:	59                   	pop    ecx
c001072f:	5b                   	pop    ebx
c0010730:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010737:	5b                   	pop    ebx
c0010738:	5e                   	pop    esi
c0010739:	c3                   	ret    

c001073a <VgaText::updateDiskUsage()>:
c001073a:	55                   	push   ebp
c001073b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010740:	57                   	push   edi
c0010741:	8b 3d c0 bc 02 c0    	mov    edi,DWORD PTR ds:0xc002bcc0
c0010747:	56                   	push   esi
c0010748:	53                   	push   ebx
c0010749:	6a 0f                	push   0xf
c001074b:	6a 00                	push   0x0
c001074d:	e8 96 fd ff ff       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010752:	5a                   	pop    edx
c0010753:	0f b6 d8             	movzx  ebx,al
c0010756:	59                   	pop    ecx
c0010757:	8b 35 c8 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0c8
c001075d:	53                   	push   ebx
c001075e:	b9 0a 00 00 00       	mov    ecx,0xa
c0010763:	89 f0                	mov    eax,esi
c0010765:	99                   	cdq    
c0010766:	f7 fd                	idiv   ebp
c0010768:	99                   	cdq    
c0010769:	f7 f9                	idiv   ecx
c001076b:	8d 42 30             	lea    eax,[edx+0x30]
c001076e:	0f b6 c0             	movzx  eax,al
c0010771:	50                   	push   eax
c0010772:	e8 17 fe ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c0010777:	5d                   	pop    ebp
c0010778:	bd e8 03 00 00       	mov    ebp,0x3e8
c001077d:	5a                   	pop    edx
c001077e:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010782:	53                   	push   ebx
c0010783:	89 f0                	mov    eax,esi
c0010785:	99                   	cdq    
c0010786:	f7 fd                	idiv   ebp
c0010788:	99                   	cdq    
c0010789:	f7 f9                	idiv   ecx
c001078b:	8d 42 30             	lea    eax,[edx+0x30]
c001078e:	0f b6 c0             	movzx  eax,al
c0010791:	50                   	push   eax
c0010792:	e8 f7 fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c0010797:	5d                   	pop    ebp
c0010798:	bd 64 00 00 00       	mov    ebp,0x64
c001079d:	5a                   	pop    edx
c001079e:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00107a5:	53                   	push   ebx
c00107a6:	89 f0                	mov    eax,esi
c00107a8:	99                   	cdq    
c00107a9:	f7 fd                	idiv   ebp
c00107ab:	99                   	cdq    
c00107ac:	f7 f9                	idiv   ecx
c00107ae:	8d 42 30             	lea    eax,[edx+0x30]
c00107b1:	0f b6 c0             	movzx  eax,al
c00107b4:	50                   	push   eax
c00107b5:	e8 d4 fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c00107ba:	5d                   	pop    ebp
c00107bb:	5a                   	pop    edx
c00107bc:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00107c3:	53                   	push   ebx
c00107c4:	89 f0                	mov    eax,esi
c00107c6:	99                   	cdq    
c00107c7:	f7 f9                	idiv   ecx
c00107c9:	89 d6                	mov    esi,edx
c00107cb:	99                   	cdq    
c00107cc:	f7 f9                	idiv   ecx
c00107ce:	8d 42 30             	lea    eax,[edx+0x30]
c00107d1:	0f b6 c0             	movzx  eax,al
c00107d4:	50                   	push   eax
c00107d5:	e8 b4 fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c00107da:	5d                   	pop    ebp
c00107db:	5a                   	pop    edx
c00107dc:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00107e3:	53                   	push   ebx
c00107e4:	8d 46 30             	lea    eax,[esi+0x30]
c00107e7:	0f b6 f0             	movzx  esi,al
c00107ea:	56                   	push   esi
c00107eb:	e8 9e fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c00107f0:	5e                   	pop    esi
c00107f1:	8b 35 c4 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0c4
c00107f7:	5d                   	pop    ebp
c00107f8:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00107ff:	bd 10 27 00 00       	mov    ebp,0x2710
c0010804:	53                   	push   ebx
c0010805:	89 f0                	mov    eax,esi
c0010807:	99                   	cdq    
c0010808:	f7 fd                	idiv   ebp
c001080a:	99                   	cdq    
c001080b:	f7 f9                	idiv   ecx
c001080d:	8d 42 30             	lea    eax,[edx+0x30]
c0010810:	0f b6 c0             	movzx  eax,al
c0010813:	50                   	push   eax
c0010814:	e8 75 fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c0010819:	5a                   	pop    edx
c001081a:	5d                   	pop    ebp
c001081b:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010822:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010827:	53                   	push   ebx
c0010828:	89 f0                	mov    eax,esi
c001082a:	99                   	cdq    
c001082b:	f7 fd                	idiv   ebp
c001082d:	99                   	cdq    
c001082e:	f7 f9                	idiv   ecx
c0010830:	8d 42 30             	lea    eax,[edx+0x30]
c0010833:	0f b6 c0             	movzx  eax,al
c0010836:	50                   	push   eax
c0010837:	e8 52 fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001083c:	5a                   	pop    edx
c001083d:	5d                   	pop    ebp
c001083e:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010845:	bd 64 00 00 00       	mov    ebp,0x64
c001084a:	53                   	push   ebx
c001084b:	89 f0                	mov    eax,esi
c001084d:	99                   	cdq    
c001084e:	f7 fd                	idiv   ebp
c0010850:	99                   	cdq    
c0010851:	f7 f9                	idiv   ecx
c0010853:	83 c2 30             	add    edx,0x30
c0010856:	0f b6 d2             	movzx  edx,dl
c0010859:	52                   	push   edx
c001085a:	e8 2f fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001085f:	5a                   	pop    edx
c0010860:	5d                   	pop    ebp
c0010861:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010868:	53                   	push   ebx
c0010869:	89 f0                	mov    eax,esi
c001086b:	99                   	cdq    
c001086c:	f7 f9                	idiv   ecx
c001086e:	89 d6                	mov    esi,edx
c0010870:	99                   	cdq    
c0010871:	f7 f9                	idiv   ecx
c0010873:	8d 42 30             	lea    eax,[edx+0x30]
c0010876:	0f b6 c0             	movzx  eax,al
c0010879:	50                   	push   eax
c001087a:	e8 0f fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001087f:	5a                   	pop    edx
c0010880:	59                   	pop    ecx
c0010881:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010888:	53                   	push   ebx
c0010889:	8d 46 30             	lea    eax,[esi+0x30]
c001088c:	0f b6 f0             	movzx  esi,al
c001088f:	56                   	push   esi
c0010890:	e8 f9 fc ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c0010895:	5b                   	pop    ebx
c0010896:	5e                   	pop    esi
c0010897:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c001089e:	5b                   	pop    ebx
c001089f:	5e                   	pop    esi
c00108a0:	5f                   	pop    edi
c00108a1:	5d                   	pop    ebp
c00108a2:	c3                   	ret    
c00108a3:	90                   	nop

c00108a4 <VgaText::updateTitle()>:
c00108a4:	53                   	push   ebx
c00108a5:	31 c0                	xor    eax,eax
c00108a7:	83 ec 58             	sub    esp,0x58
c00108aa:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00108ae:	89 e1                	mov    ecx,esp
c00108b0:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00108b4:	40                   	inc    eax
c00108b5:	83 f8 50             	cmp    eax,0x50
c00108b8:	75 f6                	jne    c00108b0 <VgaText::updateTitle()+0xc>
c00108ba:	31 c0                	xor    eax,eax
c00108bc:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00108c3:	84 db                	test   bl,bl
c00108c5:	74 06                	je     c00108cd <VgaText::updateTitle()+0x29>
c00108c7:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00108ca:	40                   	inc    eax
c00108cb:	eb ef                	jmp    c00108bc <VgaText::updateTitle()+0x18>
c00108cd:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00108d3:	85 c0                	test   eax,eax
c00108d5:	74 09                	je     c00108e0 <VgaText::updateTitle()+0x3c>
c00108d7:	53                   	push   ebx
c00108d8:	53                   	push   ebx
c00108d9:	51                   	push   ecx
c00108da:	52                   	push   edx
c00108db:	ff d0                	call   eax
c00108dd:	83 c4 10             	add    esp,0x10
c00108e0:	e8 55 fe ff ff       	call   c001073a <VgaText::updateDiskUsage()>
c00108e5:	83 c4 58             	add    esp,0x58
c00108e8:	5b                   	pop    ebx
c00108e9:	c3                   	ret    

c00108ea <VgaText::setTitleTextColour(VgaColour)>:
c00108ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108f2:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00108f8:	eb aa                	jmp    c00108a4 <VgaText::updateTitle()>

c00108fa <VgaText::setTitleColour(VgaColour)>:
c00108fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010902:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010908:	eb 9a                	jmp    c00108a4 <VgaText::updateTitle()>

c001090a <VgaText::setTitle(char*)>:
c001090a:	53                   	push   ebx
c001090b:	83 ec 10             	sub    esp,0x10
c001090e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010916:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001091c:	50                   	push   eax
c001091d:	e8 41 fe fe ff       	call   c0000763 <strcpy>
c0010922:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010926:	83 c4 18             	add    esp,0x18
c0010929:	5b                   	pop    ebx
c001092a:	e9 75 ff ff ff       	jmp    c00108a4 <VgaText::updateTitle()>
c001092f:	90                   	nop

c0010930 <VgaText::decrementCursor(bool)>:
c0010930:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010934:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010938:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001093e:	85 c0                	test   eax,eax
c0010940:	74 07                	je     c0010949 <VgaText::decrementCursor(bool)+0x19>
c0010942:	48                   	dec    eax
c0010943:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010949:	84 c9                	test   cl,cl
c001094b:	74 09                	je     c0010956 <VgaText::decrementCursor(bool)+0x26>
c001094d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010951:	e9 56 fa ff ff       	jmp    c00103ac <VgaText::updateCursor()>
c0010956:	c3                   	ret    
c0010957:	90                   	nop

c0010958 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010958:	53                   	push   ebx
c0010959:	83 ec 08             	sub    esp,0x8
c001095c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010960:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010964:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010968:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001096c:	3c 07                	cmp    al,0x7
c001096e:	75 2a                	jne    c001099a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010970:	a1 0c cf 02 c0       	mov    eax,ds:0xc002cf0c
c0010975:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001097d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010985:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001098d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010991:	83 c4 08             	add    esp,0x8
c0010994:	5b                   	pop    ebx
c0010995:	e9 3a 2d 00 00       	jmp    c00136d4 <Buzzer::beep(int, int, bool)>
c001099a:	3c 0d                	cmp    al,0xd
c001099c:	75 0c                	jne    c00109aa <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001099e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109a8:	eb 3b                	jmp    c00109e5 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00109aa:	3c 0a                	cmp    al,0xa
c00109ac:	75 40                	jne    c00109ee <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00109ae:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109b4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109be:	8d 50 01             	lea    edx,[eax+0x1]
c00109c1:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109c7:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109cd:	75 12                	jne    c00109e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00109cf:	83 ec 0c             	sub    esp,0xc
c00109d2:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109d8:	53                   	push   ebx
c00109d9:	e8 1c fb ff ff       	call   c00104fa <VgaText::scrollScreen()>
c00109de:	83 c4 10             	add    esp,0x10
c00109e1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109e5:	83 c4 08             	add    esp,0x8
c00109e8:	5b                   	pop    ebx
c00109e9:	e9 be f9 ff ff       	jmp    c00103ac <VgaText::updateCursor()>
c00109ee:	3c 08                	cmp    al,0x8
c00109f0:	75 31                	jne    c0010a23 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00109f2:	50                   	push   eax
c00109f3:	50                   	push   eax
c00109f4:	6a 01                	push   0x1
c00109f6:	53                   	push   ebx
c00109f7:	e8 34 ff ff ff       	call   c0010930 <VgaText::decrementCursor(bool)>
c00109fc:	5a                   	pop    edx
c00109fd:	59                   	pop    ecx
c00109fe:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a04:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a0a:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a10:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a16:	6a 20                	push   0x20
c0010a18:	53                   	push   ebx
c0010a19:	e8 82 fb ff ff       	call   c00105a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a1e:	83 c4 28             	add    esp,0x28
c0010a21:	5b                   	pop    ebx
c0010a22:	c3                   	ret    
c0010a23:	83 ec 08             	sub    esp,0x8
c0010a26:	0f be c0             	movsx  eax,al
c0010a29:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a2f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a35:	51                   	push   ecx
c0010a36:	52                   	push   edx
c0010a37:	50                   	push   eax
c0010a38:	53                   	push   ebx
c0010a39:	e8 62 fb ff ff       	call   c00105a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a3e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010a42:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a4a:	83 c4 28             	add    esp,0x28
c0010a4d:	5b                   	pop    ebx
c0010a4e:	e9 1b fc ff ff       	jmp    c001066e <VgaText::incrementCursor(bool)>
c0010a53:	90                   	nop

c0010a54 <VgaText::isShowingCursor()>:
c0010a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a58:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010a5e:	c3                   	ret    
c0010a5f:	90                   	nop

c0010a60 <VgaText::isBlinkDisabled()>:
c0010a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a64:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010a6a:	83 f0 01             	xor    eax,0x1
c0010a6d:	c3                   	ret    

c0010a6e <VgaText::setCursorHeight(int)>:
c0010a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a76:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010a7c:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010a83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a87:	e9 3a f9 ff ff       	jmp    c00103c6 <VgaText::showCursor(bool)>

c0010a8c <VgaText::getCursorHeight()>:
c0010a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a90:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010a96:	c3                   	ret    

c0010a97 <setActiveTerminal(VgaText*)>:
c0010a97:	53                   	push   ebx
c0010a98:	83 ec 08             	sub    esp,0x8
c0010a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a9f:	85 db                	test   ebx,ebx
c0010aa1:	75 11                	jne    c0010ab4 <setActiveTerminal(VgaText*)+0x1d>
c0010aa3:	c7 44 24 10 3c 90 02 c0 	mov    DWORD PTR [esp+0x10],0xc002903c
c0010aab:	83 c4 08             	add    esp,0x8
c0010aae:	5b                   	pop    ebx
c0010aaf:	e9 0f 90 00 00       	jmp    c0019ac3 <Krnl::panic(char const*)>
c0010ab4:	50                   	push   eax
c0010ab5:	50                   	push   eax
c0010ab6:	53                   	push   ebx
c0010ab7:	68 4a 90 02 c0       	push   0xc002904a
c0010abc:	e8 14 1e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0010ac1:	a1 64 ce 02 c0       	mov    eax,ds:0xc002ce64
c0010ac6:	83 c4 10             	add    esp,0x10
c0010ac9:	85 c0                	test   eax,eax
c0010acb:	74 0c                	je     c0010ad9 <setActiveTerminal(VgaText*)+0x42>
c0010acd:	83 ec 0c             	sub    esp,0xc
c0010ad0:	50                   	push   eax
c0010ad1:	e8 d6 f8 ff ff       	call   c00103ac <VgaText::updateCursor()>
c0010ad6:	83 c4 10             	add    esp,0x10
c0010ad9:	89 1d 64 ce 02 c0    	mov    DWORD PTR ds:0xc002ce64,ebx
c0010adf:	51                   	push   ecx
c0010ae0:	51                   	push   ecx
c0010ae1:	53                   	push   ebx
c0010ae2:	68 62 90 02 c0       	push   0xc0029062
c0010ae7:	e8 e9 1d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0010aec:	83 c4 0c             	add    esp,0xc
c0010aef:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010af5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010afb:	53                   	push   ebx
c0010afc:	e8 17 fb ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c0010b01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b04:	e8 57 ff ff ff       	call   c0010a60 <VgaText::isBlinkDisabled()>
c0010b09:	5a                   	pop    edx
c0010b0a:	0f b6 c0             	movzx  eax,al
c0010b0d:	59                   	pop    ecx
c0010b0e:	50                   	push   eax
c0010b0f:	53                   	push   ebx
c0010b10:	e8 c1 f8 ff ff       	call   c00103d6 <VgaText::disableBlink(bool)>
c0010b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b18:	e8 6f ff ff ff       	call   c0010a8c <VgaText::getCursorHeight()>
c0010b1d:	5a                   	pop    edx
c0010b1e:	59                   	pop    ecx
c0010b1f:	50                   	push   eax
c0010b20:	53                   	push   ebx
c0010b21:	e8 48 ff ff ff       	call   c0010a6e <VgaText::setCursorHeight(int)>
c0010b26:	83 c4 10             	add    esp,0x10
c0010b29:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010b30:	75 0a                	jne    c0010b3c <setActiveTerminal(VgaText*)+0xa5>
c0010b32:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010b3c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b40:	83 c4 08             	add    esp,0x8
c0010b43:	5b                   	pop    ebx
c0010b44:	e9 0f f8 ff ff       	jmp    c0010358 <VgaText::load()>

c0010b49 <doTerminalCycle()>:
c0010b49:	83 ec 18             	sub    esp,0x18
c0010b4c:	a1 60 ce 02 c0       	mov    eax,ds:0xc002ce60
c0010b51:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010b57:	50                   	push   eax
c0010b58:	a3 60 ce 02 c0       	mov    ds:0xc002ce60,eax
c0010b5d:	e8 35 ff ff ff       	call   c0010a97 <setActiveTerminal(VgaText*)>
c0010b62:	83 c4 1c             	add    esp,0x1c
c0010b65:	c3                   	ret    

c0010b66 <VgaText::doUpdate()>:
c0010b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010b70:	85 c0                	test   eax,eax
c0010b72:	74 02                	je     c0010b76 <VgaText::doUpdate()+0x10>
c0010b74:	ff e0                	jmp    eax
c0010b76:	c3                   	ret    
c0010b77:	90                   	nop

c0010b78 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010b78:	55                   	push   ebp
c0010b79:	57                   	push   edi
c0010b7a:	56                   	push   esi
c0010b7b:	53                   	push   ebx
c0010b7c:	83 ec 1c             	sub    esp,0x1c
c0010b7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010b83:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010b88:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010b8f:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010b92:	50                   	push   eax
c0010b93:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010b98:	50                   	push   eax
c0010b99:	e8 4a f9 ff ff       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010b9e:	59                   	pop    ecx
c0010b9f:	0f b6 c0             	movzx  eax,al
c0010ba2:	5b                   	pop    ebx
c0010ba3:	31 c9                	xor    ecx,ecx
c0010ba5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010bad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010bb1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010bb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bbb:	0f b7 db             	movzx  ebx,bx
c0010bbe:	01 db                	add    ebx,ebx
c0010bc0:	01 fb                	add    ebx,edi
c0010bc2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010bc5:	84 c0                	test   al,al
c0010bc7:	0f 84 38 01 00 00    	je     c0010d05 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010bcd:	3c 0d                	cmp    al,0xd
c0010bcf:	75 0f                	jne    c0010be0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010bd1:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bdb:	e9 1f 01 00 00       	jmp    c0010cff <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010be0:	3c 0a                	cmp    al,0xa
c0010be2:	75 5b                	jne    c0010c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010be4:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010bea:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bf4:	8d 48 01             	lea    ecx,[eax+0x1]
c0010bf7:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010bfd:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010c03:	75 12                	jne    c0010c17 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010c05:	83 ec 0c             	sub    esp,0xc
c0010c08:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010c0e:	55                   	push   ebp
c0010c0f:	e8 e6 f8 ff ff       	call   c00104fa <VgaText::scrollScreen()>
c0010c14:	83 c4 10             	add    esp,0x10
c0010c17:	83 ec 0c             	sub    esp,0xc
c0010c1a:	55                   	push   ebp
c0010c1b:	e8 8c f7 ff ff       	call   c00103ac <VgaText::updateCursor()>
c0010c20:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c28:	83 c4 10             	add    esp,0x10
c0010c2b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c31:	31 c9                	xor    ecx,ecx
c0010c33:	0f b7 db             	movzx  ebx,bx
c0010c36:	01 db                	add    ebx,ebx
c0010c38:	01 fb                	add    ebx,edi
c0010c3a:	e9 c0 00 00 00       	jmp    c0010cff <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c3f:	3c 08                	cmp    al,0x8
c0010c41:	75 4e                	jne    c0010c91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010c43:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c47:	53                   	push   ebx
c0010c48:	53                   	push   ebx
c0010c49:	6a 01                	push   0x1
c0010c4b:	55                   	push   ebp
c0010c4c:	e8 df fc ff ff       	call   c0010930 <VgaText::decrementCursor(bool)>
c0010c51:	58                   	pop    eax
c0010c52:	5a                   	pop    edx
c0010c53:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c59:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c5f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010c65:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010c6b:	6a 20                	push   0x20
c0010c6d:	55                   	push   ebp
c0010c6e:	e8 2d f9 ff ff       	call   c00105a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c73:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c7b:	83 c4 20             	add    esp,0x20
c0010c7e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c84:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010c88:	0f b7 db             	movzx  ebx,bx
c0010c8b:	01 db                	add    ebx,ebx
c0010c8d:	01 fb                	add    ebx,edi
c0010c8f:	eb 6e                	jmp    c0010cff <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c91:	51                   	push   ecx
c0010c92:	51                   	push   ecx
c0010c93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c97:	50                   	push   eax
c0010c98:	e8 f1 f8 ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c0010c9d:	83 c4 10             	add    esp,0x10
c0010ca0:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ca3:	39 2d 64 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce64,ebp
c0010ca9:	75 2a                	jne    c0010cd5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cab:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010cb1:	85 c0                	test   eax,eax
c0010cb3:	74 20                	je     c0010cd5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cb5:	52                   	push   edx
c0010cb6:	52                   	push   edx
c0010cb7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010cbd:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010cc3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010cc7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ccb:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010cce:	51                   	push   ecx
c0010ccf:	55                   	push   ebp
c0010cd0:	ff d0                	call   eax
c0010cd2:	83 c4 20             	add    esp,0x20
c0010cd5:	83 c3 02             	add    ebx,0x2
c0010cd8:	50                   	push   eax
c0010cd9:	50                   	push   eax
c0010cda:	6a 00                	push   0x0
c0010cdc:	55                   	push   ebp
c0010cdd:	e8 8c f9 ff ff       	call   c001066e <VgaText::incrementCursor(bool)>
c0010ce2:	83 c4 10             	add    esp,0x10
c0010ce5:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010cec:	75 0f                	jne    c0010cfd <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010cee:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010cf6:	0f b7 db             	movzx  ebx,bx
c0010cf9:	01 db                	add    ebx,ebx
c0010cfb:	01 fb                	add    ebx,edi
c0010cfd:	b1 01                	mov    cl,0x1
c0010cff:	46                   	inc    esi
c0010d00:	e9 bd fe ff ff       	jmp    c0010bc2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010d05:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d09:	83 ec 0c             	sub    esp,0xc
c0010d0c:	55                   	push   ebp
c0010d0d:	e8 9a f6 ff ff       	call   c00103ac <VgaText::updateCursor()>
c0010d12:	83 c4 10             	add    esp,0x10
c0010d15:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d19:	84 c9                	test   cl,cl
c0010d1b:	74 0c                	je     c0010d29 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010d1d:	83 ec 0c             	sub    esp,0xc
c0010d20:	55                   	push   ebp
c0010d21:	e8 40 fe ff ff       	call   c0010b66 <VgaText::doUpdate()>
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010d30:	83 c4 1c             	add    esp,0x1c
c0010d33:	5b                   	pop    ebx
c0010d34:	5e                   	pop    esi
c0010d35:	5f                   	pop    edi
c0010d36:	5d                   	pop    ebp
c0010d37:	c3                   	ret    

c0010d38 <VgaText::clearScreen()>:
c0010d38:	57                   	push   edi
c0010d39:	56                   	push   esi
c0010d3a:	31 f6                	xor    esi,esi
c0010d3c:	53                   	push   ebx
c0010d3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d41:	52                   	push   edx
c0010d42:	6a 00                	push   0x0
c0010d44:	6a 00                	push   0x0
c0010d46:	53                   	push   ebx
c0010d47:	e8 cc f8 ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c0010d4c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010d53:	83 c4 10             	add    esp,0x10
c0010d56:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010d5c:	7e 26                	jle    c0010d84 <VgaText::clearScreen()+0x4c>
c0010d5e:	31 ff                	xor    edi,edi
c0010d60:	50                   	push   eax
c0010d61:	50                   	push   eax
c0010d62:	56                   	push   esi
c0010d63:	57                   	push   edi
c0010d64:	47                   	inc    edi
c0010d65:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d6b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d71:	6a 20                	push   0x20
c0010d73:	53                   	push   ebx
c0010d74:	e8 27 f8 ff ff       	call   c00105a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d79:	83 c4 20             	add    esp,0x20
c0010d7c:	83 ff 50             	cmp    edi,0x50
c0010d7f:	75 df                	jne    c0010d60 <VgaText::clearScreen()+0x28>
c0010d81:	46                   	inc    esi
c0010d82:	eb d2                	jmp    c0010d56 <VgaText::clearScreen()+0x1e>
c0010d84:	83 ec 0c             	sub    esp,0xc
c0010d87:	53                   	push   ebx
c0010d88:	e8 d9 fd ff ff       	call   c0010b66 <VgaText::doUpdate()>
c0010d8d:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010d94:	83 c4 10             	add    esp,0x10
c0010d97:	5b                   	pop    ebx
c0010d98:	5e                   	pop    esi
c0010d99:	5f                   	pop    edi
c0010d9a:	c3                   	ret    
c0010d9b:	90                   	nop

c0010d9c <VgaText::putchar(char)>:
c0010d9c:	56                   	push   esi
c0010d9d:	53                   	push   ebx
c0010d9e:	83 ec 14             	sub    esp,0x14
c0010da1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010da5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010da9:	3c 5b                	cmp    al,0x5b
c0010dab:	75 21                	jne    c0010dce <VgaText::putchar(char)+0x32>
c0010dad:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010db4:	74 28                	je     c0010dde <VgaText::putchar(char)+0x42>
c0010db6:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010dbf:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010dc9:	e9 e2 00 00 00       	jmp    c0010eb0 <VgaText::putchar(char)+0x114>
c0010dce:	3c 1b                	cmp    al,0x1b
c0010dd0:	75 0c                	jne    c0010dde <VgaText::putchar(char)+0x42>
c0010dd2:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010dd9:	e9 d2 00 00 00       	jmp    c0010eb0 <VgaText::putchar(char)+0x114>
c0010dde:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010de4:	84 c9                	test   cl,cl
c0010de6:	0f 84 ab 00 00 00    	je     c0010e97 <VgaText::putchar(char)+0xfb>
c0010dec:	8d 50 c0             	lea    edx,[eax-0x40]
c0010def:	80 fa 3e             	cmp    dl,0x3e
c0010df2:	0f 87 82 00 00 00    	ja     c0010e7a <VgaText::putchar(char)+0xde>
c0010df8:	3c 6d                	cmp    al,0x6d
c0010dfa:	75 4d                	jne    c0010e49 <VgaText::putchar(char)+0xad>
c0010dfc:	31 f6                	xor    esi,esi
c0010dfe:	31 d2                	xor    edx,edx
c0010e00:	31 c0                	xor    eax,eax
c0010e02:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010e08:	7e 30                	jle    c0010e3a <VgaText::putchar(char)+0x9e>
c0010e0a:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010e12:	80 fa 3b             	cmp    dl,0x3b
c0010e15:	75 17                	jne    c0010e2e <VgaText::putchar(char)+0x92>
c0010e17:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e1b:	50                   	push   eax
c0010e1c:	53                   	push   ebx
c0010e1d:	e8 ee f5 ff ff       	call   c0010410 <VgaText::doANSI_SGR(int)>
c0010e22:	59                   	pop    ecx
c0010e23:	31 d2                	xor    edx,edx
c0010e25:	58                   	pop    eax
c0010e26:	31 c0                	xor    eax,eax
c0010e28:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010e2c:	eb 09                	jmp    c0010e37 <VgaText::putchar(char)+0x9b>
c0010e2e:	6b c0 0a             	imul   eax,eax,0xa
c0010e31:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010e35:	88 ca                	mov    dl,cl
c0010e37:	46                   	inc    esi
c0010e38:	eb c8                	jmp    c0010e02 <VgaText::putchar(char)+0x66>
c0010e3a:	84 d2                	test   dl,dl
c0010e3c:	74 31                	je     c0010e6f <VgaText::putchar(char)+0xd3>
c0010e3e:	50                   	push   eax
c0010e3f:	53                   	push   ebx
c0010e40:	e8 cb f5 ff ff       	call   c0010410 <VgaText::doANSI_SGR(int)>
c0010e45:	58                   	pop    eax
c0010e46:	5a                   	pop    edx
c0010e47:	eb 26                	jmp    c0010e6f <VgaText::putchar(char)+0xd3>
c0010e49:	3c 4a                	cmp    al,0x4a
c0010e4b:	75 22                	jne    c0010e6f <VgaText::putchar(char)+0xd3>
c0010e4d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010e54:	75 19                	jne    c0010e6f <VgaText::putchar(char)+0xd3>
c0010e56:	83 ec 0c             	sub    esp,0xc
c0010e59:	53                   	push   ebx
c0010e5a:	e8 d9 fe ff ff       	call   c0010d38 <VgaText::clearScreen()>
c0010e5f:	83 c4 0c             	add    esp,0xc
c0010e62:	6a 00                	push   0x0
c0010e64:	6a 00                	push   0x0
c0010e66:	53                   	push   ebx
c0010e67:	e8 ac f7 ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c0010e6c:	83 c4 10             	add    esp,0x10
c0010e6f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010e78:	eb 36                	jmp    c0010eb0 <VgaText::putchar(char)+0x114>
c0010e7a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010e80:	83 fa 0e             	cmp    edx,0xe
c0010e83:	7f 2b                	jg     c0010eb0 <VgaText::putchar(char)+0x114>
c0010e85:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010e88:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010e8e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010e95:	eb 19                	jmp    c0010eb0 <VgaText::putchar(char)+0x114>
c0010e97:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010e9d:	0f be c0             	movsx  eax,al
c0010ea0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ea6:	50                   	push   eax
c0010ea7:	53                   	push   ebx
c0010ea8:	e8 ab fa ff ff       	call   c0010958 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	83 c4 14             	add    esp,0x14
c0010eb3:	5b                   	pop    ebx
c0010eb4:	5e                   	pop    esi
c0010eb5:	c3                   	ret    

c0010eb6 <VgaText::puts(char const*)>:
c0010eb6:	53                   	push   ebx
c0010eb7:	83 ec 08             	sub    esp,0x8
c0010eba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ebe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ec1:	84 c0                	test   al,al
c0010ec3:	74 12                	je     c0010ed7 <VgaText::puts(char const*)+0x21>
c0010ec5:	43                   	inc    ebx
c0010ec6:	51                   	push   ecx
c0010ec7:	51                   	push   ecx
c0010ec8:	50                   	push   eax
c0010ec9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ecd:	e8 ca fe ff ff       	call   c0010d9c <VgaText::putchar(char)>
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	eb e7                	jmp    c0010ebe <VgaText::puts(char const*)+0x8>
c0010ed7:	83 c4 08             	add    esp,0x8
c0010eda:	5b                   	pop    ebx
c0010edb:	c3                   	ret    

c0010edc <VgaText::putx(unsigned int)>:
c0010edc:	57                   	push   edi
c0010edd:	b9 11 00 00 00       	mov    ecx,0x11
c0010ee2:	56                   	push   esi
c0010ee3:	be 7e 90 02 c0       	mov    esi,0xc002907e
c0010ee8:	53                   	push   ebx
c0010ee9:	83 ec 20             	sub    esp,0x20
c0010eec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ef0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010ef4:	fc                   	cld    
c0010ef5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ef7:	be 08 00 00 00       	mov    esi,0x8
c0010efc:	50                   	push   eax
c0010efd:	50                   	push   eax
c0010efe:	89 d8                	mov    eax,ebx
c0010f00:	c1 e3 04             	shl    ebx,0x4
c0010f03:	c1 e8 1c             	shr    eax,0x1c
c0010f06:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010f0b:	50                   	push   eax
c0010f0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f10:	e8 87 fe ff ff       	call   c0010d9c <VgaText::putchar(char)>
c0010f15:	83 c4 10             	add    esp,0x10
c0010f18:	4e                   	dec    esi
c0010f19:	75 e1                	jne    c0010efc <VgaText::putx(unsigned int)+0x20>
c0010f1b:	83 c4 20             	add    esp,0x20
c0010f1e:	5b                   	pop    ebx
c0010f1f:	5e                   	pop    esi
c0010f20:	5f                   	pop    edi
c0010f21:	c3                   	ret    

c0010f22 <VgaText::VgaText(char const*)>:
c0010f22:	57                   	push   edi
c0010f23:	56                   	push   esi
c0010f24:	53                   	push   ebx
c0010f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f29:	83 ec 08             	sub    esp,0x8
c0010f2c:	6a 00                	push   0x0
c0010f2e:	50                   	push   eax
c0010f2f:	e8 6e 05 00 00       	call   c00114a2 <UnixFile::UnixFile(int)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	ba e4 90 02 c0       	mov    edx,0xc00290e4
c0010f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f40:	89 10                	mov    DWORD PTR [eax],edx
c0010f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f46:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f54:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f62:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f78:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f86:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f94:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010faa:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010fb0:	bb 40 ce 02 c0       	mov    ebx,0xc002ce40
c0010fb5:	b8 08 00 00 00       	mov    eax,0x8
c0010fba:	fc                   	cld    
c0010fbb:	89 d7                	mov    edi,edx
c0010fbd:	89 de                	mov    esi,ebx
c0010fbf:	89 c1                	mov    ecx,eax
c0010fc1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc7:	05 1e 10 00 00       	add    eax,0x101e
c0010fcc:	83 ec 08             	sub    esp,0x8
c0010fcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd3:	50                   	push   eax
c0010fd4:	e8 8a f7 fe ff       	call   c0000763 <strcpy>
c0010fd9:	83 c4 10             	add    esp,0x10
c0010fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe0:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fee:	83 c0 0c             	add    eax,0xc
c0010ff1:	83 ec 04             	sub    esp,0x4
c0010ff4:	68 00 0f 00 00       	push   0xf00
c0010ff9:	6a 00                	push   0x0
c0010ffb:	50                   	push   eax
c0010ffc:	e8 c3 f6 fe ff       	call   c00006c4 <memset>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	83 ec 04             	sub    esp,0x4
c0011007:	6a 00                	push   0x0
c0011009:	6a 07                	push   0x7
c001100b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001100f:	e8 b4 f4 ff ff       	call   c00104c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011014:	83 c4 10             	add    esp,0x10
c0011017:	83 ec 08             	sub    esp,0x8
c001101a:	6a 02                	push   0x2
c001101c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011020:	e8 49 fa ff ff       	call   c0010a6e <VgaText::setCursorHeight(int)>
c0011025:	83 c4 10             	add    esp,0x10
c0011028:	83 ec 04             	sub    esp,0x4
c001102b:	6a 00                	push   0x0
c001102d:	6a 00                	push   0x0
c001102f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011033:	e8 e0 f5 ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c0011038:	83 c4 10             	add    esp,0x10
c001103b:	83 ec 08             	sub    esp,0x8
c001103e:	6a 01                	push   0x1
c0011040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011044:	e8 7d f3 ff ff       	call   c00103c6 <VgaText::showCursor(bool)>
c0011049:	83 c4 10             	add    esp,0x10
c001104c:	83 ec 08             	sub    esp,0x8
c001104f:	6a 01                	push   0x1
c0011051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011055:	e8 7c f3 ff ff       	call   c00103d6 <VgaText::disableBlink(bool)>
c001105a:	83 c4 10             	add    esp,0x10
c001105d:	83 ec 0c             	sub    esp,0xc
c0011060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011064:	e8 cf fc ff ff       	call   c0010d38 <VgaText::clearScreen()>
c0011069:	83 c4 10             	add    esp,0x10
c001106c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011070:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107b:	05 9e 10 00 00       	add    eax,0x109e
c0011080:	83 ec 04             	sub    esp,0x4
c0011083:	68 96 00 00 00       	push   0x96
c0011088:	6a 00                	push   0x0
c001108a:	50                   	push   eax
c001108b:	e8 34 f6 fe ff       	call   c00006c4 <memset>
c0011090:	83 c4 10             	add    esp,0x10
c0011093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011097:	05 34 11 00 00       	add    eax,0x1134
c001109c:	83 ec 04             	sub    esp,0x4
c001109f:	68 2c 01 00 00       	push   0x12c
c00110a4:	6a 00                	push   0x0
c00110a6:	50                   	push   eax
c00110a7:	e8 18 f6 fe ff       	call   c00006c4 <memset>
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	90                   	nop
c00110b0:	5b                   	pop    ebx
c00110b1:	5e                   	pop    esi
c00110b2:	5f                   	pop    edi
c00110b3:	c3                   	ret    

c00110b4 <VgaText::receiveKey(unsigned char)>:
c00110b4:	55                   	push   ebp
c00110b5:	57                   	push   edi
c00110b6:	56                   	push   esi
c00110b7:	53                   	push   ebx
c00110b8:	83 ec 1c             	sub    esp,0x1c
c00110bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110c3:	84 db                	test   bl,bl
c00110c5:	0f 84 c9 00 00 00    	je     c0011194 <VgaText::receiveKey(unsigned char)+0xe0>
c00110cb:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00110d1:	80 fb 08             	cmp    bl,0x8
c00110d4:	75 2c                	jne    c0011102 <VgaText::receiveKey(unsigned char)+0x4e>
c00110d6:	83 ec 0c             	sub    esp,0xc
c00110d9:	57                   	push   edi
c00110da:	e8 02 f6 fe ff       	call   c00006e1 <strlen>
c00110df:	83 c4 10             	add    esp,0x10
c00110e2:	85 c0                	test   eax,eax
c00110e4:	74 41                	je     c0011127 <VgaText::receiveKey(unsigned char)+0x73>
c00110e6:	50                   	push   eax
c00110e7:	50                   	push   eax
c00110e8:	6a 08                	push   0x8
c00110ea:	56                   	push   esi
c00110eb:	e8 ac fc ff ff       	call   c0010d9c <VgaText::putchar(char)>
c00110f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110f3:	e8 e9 f5 fe ff       	call   c00006e1 <strlen>
c00110f8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011100:	eb 22                	jmp    c0011124 <VgaText::receiveKey(unsigned char)+0x70>
c0011102:	0f be c3             	movsx  eax,bl
c0011105:	52                   	push   edx
c0011106:	52                   	push   edx
c0011107:	50                   	push   eax
c0011108:	56                   	push   esi
c0011109:	e8 8e fc ff ff       	call   c0010d9c <VgaText::putchar(char)>
c001110e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011112:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011117:	59                   	pop    ecx
c0011118:	5d                   	pop    ebp
c0011119:	8d 44 24 16          	lea    eax,[esp+0x16]
c001111d:	50                   	push   eax
c001111e:	57                   	push   edi
c001111f:	e8 f6 f6 fe ff       	call   c000081a <strcat>
c0011124:	83 c4 10             	add    esp,0x10
c0011127:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001112e:	75 05                	jne    c0011135 <VgaText::receiveKey(unsigned char)+0x81>
c0011130:	80 fb 0a             	cmp    bl,0xa
c0011133:	75 53                	jne    c0011188 <VgaText::receiveKey(unsigned char)+0xd4>
c0011135:	83 ec 0c             	sub    esp,0xc
c0011138:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001113e:	53                   	push   ebx
c001113f:	e8 9d f5 fe ff       	call   c00006e1 <strlen>
c0011144:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011147:	89 c5                	mov    ebp,eax
c0011149:	e8 93 f5 fe ff       	call   c00006e1 <strlen>
c001114e:	83 c4 10             	add    esp,0x10
c0011151:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011155:	3d 2c 01 00 00       	cmp    eax,0x12c
c001115a:	76 10                	jbe    c001116c <VgaText::receiveKey(unsigned char)+0xb8>
c001115c:	83 ec 0c             	sub    esp,0xc
c001115f:	68 8f 90 02 c0       	push   0xc002908f
c0011164:	e8 5a 89 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0011169:	83 c4 10             	add    esp,0x10
c001116c:	50                   	push   eax
c001116d:	50                   	push   eax
c001116e:	57                   	push   edi
c001116f:	53                   	push   ebx
c0011170:	e8 a5 f6 fe ff       	call   c000081a <strcat>
c0011175:	83 c4 0c             	add    esp,0xc
c0011178:	68 96 00 00 00       	push   0x96
c001117d:	6a 00                	push   0x0
c001117f:	57                   	push   edi
c0011180:	e8 3f f5 fe ff       	call   c00006c4 <memset>
c0011185:	83 c4 10             	add    esp,0x10
c0011188:	83 ec 0c             	sub    esp,0xc
c001118b:	56                   	push   esi
c001118c:	e8 d5 f9 ff ff       	call   c0010b66 <VgaText::doUpdate()>
c0011191:	83 c4 10             	add    esp,0x10
c0011194:	83 c4 1c             	add    esp,0x1c
c0011197:	5b                   	pop    ebx
c0011198:	5e                   	pop    esi
c0011199:	5f                   	pop    edi
c001119a:	5d                   	pop    ebp
c001119b:	c3                   	ret    

c001119c <VgaText::write(unsigned long long, void*, int*)>:
c001119c:	55                   	push   ebp
c001119d:	57                   	push   edi
c001119e:	56                   	push   esi
c001119f:	53                   	push   ebx
c00111a0:	83 ec 0c             	sub    esp,0xc
c00111a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00111a7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111af:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00111b6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00111b9:	39 eb                	cmp    ebx,ebp
c00111bb:	74 13                	je     c00111d0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00111bd:	43                   	inc    ebx
c00111be:	50                   	push   eax
c00111bf:	50                   	push   eax
c00111c0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00111c4:	50                   	push   eax
c00111c5:	56                   	push   esi
c00111c6:	e8 d1 fb ff ff       	call   c0010d9c <VgaText::putchar(char)>
c00111cb:	83 c4 10             	add    esp,0x10
c00111ce:	eb e9                	jmp    c00111b9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00111d0:	83 ec 0c             	sub    esp,0xc
c00111d3:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00111da:	56                   	push   esi
c00111db:	e8 86 f9 ff ff       	call   c0010b66 <VgaText::doUpdate()>
c00111e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00111e4:	89 38                	mov    DWORD PTR [eax],edi
c00111e6:	83 c4 1c             	add    esp,0x1c
c00111e9:	31 c0                	xor    eax,eax
c00111eb:	5b                   	pop    ebx
c00111ec:	5e                   	pop    esi
c00111ed:	5f                   	pop    edi
c00111ee:	5d                   	pop    ebp
c00111ef:	c3                   	ret    

c00111f0 <newTerminal(char*)>:
c00111f0:	83 ec 28             	sub    esp,0x28
c00111f3:	68 60 12 00 00       	push   0x1260
c00111f8:	e8 27 e4 ff ff       	call   c000f624 <malloc>
c00111fd:	5a                   	pop    edx
c00111fe:	59                   	pop    ecx
c00111ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011203:	50                   	push   eax
c0011204:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011208:	e8 15 fd ff ff       	call   c0010f22 <VgaText::VgaText(char const*)>
c001120d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011211:	83 c4 2c             	add    esp,0x2c
c0011214:	c3                   	ret    
c0011215:	90                   	nop

c0011216 <TSS::TSS()>:
c0011216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001121a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011221:	90                   	nop
c0011222:	c3                   	ret    
c0011223:	90                   	nop

c0011224 <TSS::setESP(unsigned long)>:
c0011224:	55                   	push   ebp
c0011225:	89 e5                	mov    ebp,esp
c0011227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001122a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001122d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011230:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011233:	90                   	nop
c0011234:	5d                   	pop    ebp
c0011235:	c3                   	ret    

c0011236 <TSS::flush()>:
c0011236:	55                   	push   ebp
c0011237:	89 e5                	mov    ebp,esp
c0011239:	83 ec 10             	sub    esp,0x10
c001123c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001123f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011241:	83 c8 03             	or     eax,0x3
c0011244:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011248:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001124c:	66 89 d0             	mov    ax,dx
c001124f:	0f 00 d8             	ltr    ax
c0011252:	90                   	nop
c0011253:	c9                   	leave  
c0011254:	c3                   	ret    
c0011255:	90                   	nop

c0011256 <TSS::setup(unsigned long, unsigned long)>:
c0011256:	55                   	push   ebp
c0011257:	89 e5                	mov    ebp,esp
c0011259:	83 ec 18             	sub    esp,0x18
c001125c:	83 ec 0c             	sub    esp,0xc
c001125f:	6a 68                	push   0x68
c0011261:	e8 be e3 ff ff       	call   c000f624 <malloc>
c0011266:	83 c4 10             	add    esp,0x10
c0011269:	89 c2                	mov    edx,eax
c001126b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001126e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011277:	83 ec 04             	sub    esp,0x4
c001127a:	6a 68                	push   0x68
c001127c:	6a 00                	push   0x0
c001127e:	50                   	push   eax
c001127f:	e8 40 f4 fe ff       	call   c00006c4 <memset>
c0011284:	83 c4 10             	add    esp,0x10
c0011287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001128a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001128d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011296:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011299:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001129f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112a5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112b1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00112b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112bd:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00112c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00112cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112d5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00112db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00112e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ed:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00112f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00112fc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00112ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011302:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011305:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011308:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001130b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001130e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011311:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001131b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001131e:	0f 20 da             	mov    edx,cr3
c0011321:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011324:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011327:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001132a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001132d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011330:	83 ec 08             	sub    esp,0x8
c0011333:	50                   	push   eax
c0011334:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011337:	50                   	push   eax
c0011338:	e8 c5 da ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c001133d:	83 c4 10             	add    esp,0x10
c0011340:	83 ec 08             	sub    esp,0x8
c0011343:	6a 68                	push   0x68
c0011345:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011348:	50                   	push   eax
c0011349:	e8 d0 da ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c001134e:	83 c4 10             	add    esp,0x10
c0011351:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011355:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011358:	83 e0 0f             	and    eax,0xf
c001135b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001135e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011361:	83 c8 40             	or     eax,0x40
c0011364:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011367:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001136c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011372:	05 78 01 00 00       	add    eax,0x178
c0011377:	83 ec 04             	sub    esp,0x4
c001137a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001137d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011380:	50                   	push   eax
c0011381:	e8 cc da ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c0011386:	83 c4 10             	add    esp,0x10
c0011389:	89 c2                	mov    edx,eax
c001138b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001138e:	89 10                	mov    DWORD PTR [eax],edx
c0011390:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0011395:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001139b:	05 78 01 00 00       	add    eax,0x178
c00113a0:	83 ec 0c             	sub    esp,0xc
c00113a3:	50                   	push   eax
c00113a4:	e8 ed da ff ff       	call   c000ee96 <GDT::flush()>
c00113a9:	83 c4 10             	add    esp,0x10
c00113ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113af:	8b 00                	mov    eax,DWORD PTR [eax]
c00113b1:	83 ec 08             	sub    esp,0x8
c00113b4:	50                   	push   eax
c00113b5:	68 f8 90 02 c0       	push   0xc00290f8
c00113ba:	e8 16 15 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00113c7:	c9                   	leave  
c00113c8:	c3                   	ret    
c00113c9:	90                   	nop

c00113ca <ReservedFilename::read(unsigned long long, void*, int*)>:
c00113ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00113da:	75 08                	jne    c00113e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00113dc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00113e2:	eb 38                	jmp    c001141c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00113e4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00113e9:	75 17                	jne    c0011402 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00113eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113f3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00113f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00113fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113ff:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011402:	89 c1                	mov    ecx,eax
c0011404:	83 e1 fd             	and    ecx,0xfffffffd
c0011407:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001140d:	74 cd                	je     c00113dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001140f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011414:	83 e0 ef             	and    eax,0xffffffef
c0011417:	83 f8 08             	cmp    eax,0x8
c001141a:	76 c0                	jbe    c00113dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001141c:	31 c0                	xor    eax,eax
c001141e:	c3                   	ret    
c001141f:	90                   	nop

c0011420 <ReservedFilename::isAtty()>:
c0011420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011424:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011427:	31 c0                	xor    eax,eax
c0011429:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001142f:	74 09                	je     c001143a <ReservedFilename::isAtty()+0x1a>
c0011431:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011437:	0f 94 c0             	sete   al
c001143a:	c3                   	ret    
c001143b:	90                   	nop

c001143c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001143c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011440:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011444:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011447:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001144b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011450:	75 08                	jne    c001145a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011452:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011458:	eb 3d                	jmp    c0011497 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001145a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001145f:	75 17                	jne    c0011478 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011461:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011466:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011469:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001146f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011471:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011475:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011478:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001147d:	75 04                	jne    c0011483 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001147f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011481:	eb 14                	jmp    c0011497 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011483:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011488:	74 c8                	je     c0011452 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001148a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001148f:	83 e0 ef             	and    eax,0xffffffef
c0011492:	83 f8 08             	cmp    eax,0x8
c0011495:	76 bb                	jbe    c0011452 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011497:	31 c0                	xor    eax,eax
c0011499:	c3                   	ret    

c001149a <UnixFile::getFileDescriptor()>:
c001149a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001149e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a1:	c3                   	ret    

c00114a2 <UnixFile::UnixFile(int)>:
c00114a2:	53                   	push   ebx
c00114a3:	83 ec 28             	sub    esp,0x28
c00114a6:	ba e4 91 02 c0       	mov    edx,0xc00291e4
c00114ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114af:	89 10                	mov    DWORD PTR [eax],edx
c00114b1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00114b9:	0f 8f 8c 01 00 00    	jg     c001164b <UnixFile::UnixFile(int)+0x1a9>
c00114bf:	a1 20 bd 02 c0       	mov    eax,ds:0xc002bd20
c00114c4:	8d 50 01             	lea    edx,[eax+0x1]
c00114c7:	89 15 20 bd 02 c0    	mov    DWORD PTR ds:0xc002bd20,edx
c00114cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114d4:	83 ec 08             	sub    esp,0x8
c00114d7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00114db:	68 f8 ce 02 c0       	push   0xc002cef8
c00114e0:	e8 6b 5f 01 00       	call   c0027450 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00114e5:	83 c4 10             	add    esp,0x10
c00114e8:	a0 f4 ce 02 c0       	mov    al,ds:0xc002cef4
c00114ed:	83 f0 01             	xor    eax,0x1
c00114f0:	84 c0                	test   al,al
c00114f2:	0f 84 54 01 00 00    	je     c001164c <UnixFile::UnixFile(int)+0x1aa>
c00114f8:	c6 05 f4 ce 02 c0 01 	mov    BYTE PTR ds:0xc002cef4,0x1
c00114ff:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011507:	83 ec 0c             	sub    esp,0xc
c001150a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001150e:	e8 11 e1 ff ff       	call   c000f624 <malloc>
c0011513:	83 c4 10             	add    esp,0x10
c0011516:	89 c3                	mov    ebx,eax
c0011518:	83 ec 08             	sub    esp,0x8
c001151b:	68 03 ff ff 0f       	push   0xfffff03
c0011520:	53                   	push   ebx
c0011521:	e8 2c 01 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	89 1d ec ce 02 c0    	mov    DWORD PTR ds:0xc002ceec,ebx
c001152f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011537:	83 ec 0c             	sub    esp,0xc
c001153a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153e:	e8 e1 e0 ff ff       	call   c000f624 <malloc>
c0011543:	83 c4 10             	add    esp,0x10
c0011546:	89 c3                	mov    ebx,eax
c0011548:	83 ec 08             	sub    esp,0x8
c001154b:	68 01 ff ff 0f       	push   0xfffff01
c0011550:	53                   	push   ebx
c0011551:	e8 fc 00 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c0011556:	83 c4 10             	add    esp,0x10
c0011559:	89 1d f0 ce 02 c0    	mov    DWORD PTR ds:0xc002cef0,ebx
c001155f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011567:	83 ec 0c             	sub    esp,0xc
c001156a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001156e:	e8 b1 e0 ff ff       	call   c000f624 <malloc>
c0011573:	83 c4 10             	add    esp,0x10
c0011576:	89 c3                	mov    ebx,eax
c0011578:	83 ec 08             	sub    esp,0x8
c001157b:	68 00 ff ff 0f       	push   0xfffff00
c0011580:	53                   	push   ebx
c0011581:	e8 cc 00 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c0011586:	83 c4 10             	add    esp,0x10
c0011589:	89 1d e4 ce 02 c0    	mov    DWORD PTR ds:0xc002cee4,ebx
c001158f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011597:	83 ec 0c             	sub    esp,0xc
c001159a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001159e:	e8 81 e0 ff ff       	call   c000f624 <malloc>
c00115a3:	83 c4 10             	add    esp,0x10
c00115a6:	89 c3                	mov    ebx,eax
c00115a8:	83 ec 08             	sub    esp,0x8
c00115ab:	68 02 ff ff 0f       	push   0xfffff02
c00115b0:	53                   	push   ebx
c00115b1:	e8 9c 00 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c00115b6:	83 c4 10             	add    esp,0x10
c00115b9:	89 1d e8 ce 02 c0    	mov    DWORD PTR ds:0xc002cee8,ebx
c00115bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00115c7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00115cc:	7f 7e                	jg     c001164c <UnixFile::UnixFile(int)+0x1aa>
c00115ce:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00115d6:	83 ec 0c             	sub    esp,0xc
c00115d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115dd:	e8 42 e0 ff ff       	call   c000f624 <malloc>
c00115e2:	83 c4 10             	add    esp,0x10
c00115e5:	89 c3                	mov    ebx,eax
c00115e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115eb:	05 10 ff ff 0f       	add    eax,0xfffff10
c00115f0:	83 ec 08             	sub    esp,0x8
c00115f3:	50                   	push   eax
c00115f4:	53                   	push   ebx
c00115f5:	e8 58 00 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c00115fa:	83 c4 10             	add    esp,0x10
c00115fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011601:	89 1c 85 c0 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3140],ebx
c0011608:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011610:	83 ec 0c             	sub    esp,0xc
c0011613:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011617:	e8 08 e0 ff ff       	call   c000f624 <malloc>
c001161c:	83 c4 10             	add    esp,0x10
c001161f:	89 c3                	mov    ebx,eax
c0011621:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011625:	05 20 ff ff 0f       	add    eax,0xfffff20
c001162a:	83 ec 08             	sub    esp,0x8
c001162d:	50                   	push   eax
c001162e:	53                   	push   ebx
c001162f:	e8 1e 00 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c0011634:	83 c4 10             	add    esp,0x10
c0011637:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001163b:	89 1c 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],ebx
c0011642:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011646:	e9 7c ff ff ff       	jmp    c00115c7 <UnixFile::UnixFile(int)+0x125>
c001164b:	90                   	nop
c001164c:	83 c4 28             	add    esp,0x28
c001164f:	5b                   	pop    ebx
c0011650:	c3                   	ret    
c0011651:	90                   	nop

c0011652 <ReservedFilename::ReservedFilename(int)>:
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011659:	83 ec 08             	sub    esp,0x8
c001165c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011660:	50                   	push   eax
c0011661:	e8 3c fe ff ff       	call   c00114a2 <UnixFile::UnixFile(int)>
c0011666:	83 c4 10             	add    esp,0x10
c0011669:	ba 00 92 02 c0       	mov    edx,0xc0029200
c001166e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011672:	89 10                	mov    DWORD PTR [eax],edx
c0011674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011678:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001167c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001167f:	90                   	nop
c0011680:	83 c4 0c             	add    esp,0xc
c0011683:	c3                   	ret    

c0011684 <UnixFile::~UnixFile()>:
c0011684:	83 ec 1c             	sub    esp,0x1c
c0011687:	ba e4 91 02 c0       	mov    edx,0xc00291e4
c001168c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011690:	89 10                	mov    DWORD PTR [eax],edx
c0011692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011696:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011699:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001169e:	7f 73                	jg     c0011713 <UnixFile::~UnixFile()+0x8f>
c00116a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116a8:	83 ec 0c             	sub    esp,0xc
c00116ab:	68 f8 ce 02 c0       	push   0xc002cef8
c00116b0:	e8 6f 5e 01 00       	call   c0027524 <LinkedList<UnixFile>::getFirstElement()>
c00116b5:	83 c4 10             	add    esp,0x10
c00116b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	68 f8 ce 02 c0       	push   0xc002cef8
c00116c4:	e8 63 5e 01 00       	call   c002752c <LinkedList<UnixFile>::removeFirst()>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116d0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00116d4:	74 40                	je     c0011716 <UnixFile::~UnixFile()+0x92>
c00116d6:	83 ec 08             	sub    esp,0x8
c00116d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116dd:	68 f8 ce 02 c0       	push   0xc002cef8
c00116e2:	e8 69 5d 01 00       	call   c0027450 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116ee:	8d 50 01             	lea    edx,[eax+0x1]
c00116f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00116f5:	3d 88 13 00 00       	cmp    eax,0x1388
c00116fa:	0f 94 c0             	sete   al
c00116fd:	84 c0                	test   al,al
c00116ff:	74 a7                	je     c00116a8 <UnixFile::~UnixFile()+0x24>
c0011701:	83 ec 0c             	sub    esp,0xc
c0011704:	68 bc 91 02 c0       	push   0xc00291bc
c0011709:	e8 b5 83 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c001170e:	83 c4 10             	add    esp,0x10
c0011711:	eb 95                	jmp    c00116a8 <UnixFile::~UnixFile()+0x24>
c0011713:	90                   	nop
c0011714:	eb 01                	jmp    c0011717 <UnixFile::~UnixFile()+0x93>
c0011716:	90                   	nop
c0011717:	90                   	nop
c0011718:	83 c4 1c             	add    esp,0x1c
c001171b:	c3                   	ret    

c001171c <UnixFile::~UnixFile()>:
c001171c:	83 ec 0c             	sub    esp,0xc
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011726:	e8 59 ff ff ff       	call   c0011684 <UnixFile::~UnixFile()>
c001172b:	83 c4 10             	add    esp,0x10
c001172e:	83 ec 08             	sub    esp,0x8
c0011731:	6a 0c                	push   0xc
c0011733:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011737:	e8 b9 10 00 00       	call   c00127f5 <operator delete(void*, unsigned long)>
c001173c:	83 c4 10             	add    esp,0x10
c001173f:	83 c4 0c             	add    esp,0xc
c0011742:	c3                   	ret    
c0011743:	90                   	nop

c0011744 <ReservedFilename::~ReservedFilename()>:
c0011744:	83 ec 0c             	sub    esp,0xc
c0011747:	ba 00 92 02 c0       	mov    edx,0xc0029200
c001174c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011750:	89 10                	mov    DWORD PTR [eax],edx
c0011752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011756:	83 ec 0c             	sub    esp,0xc
c0011759:	50                   	push   eax
c001175a:	e8 25 ff ff ff       	call   c0011684 <UnixFile::~UnixFile()>
c001175f:	83 c4 10             	add    esp,0x10
c0011762:	90                   	nop
c0011763:	83 c4 0c             	add    esp,0xc
c0011766:	c3                   	ret    
c0011767:	90                   	nop

c0011768 <ReservedFilename::~ReservedFilename()>:
c0011768:	83 ec 0c             	sub    esp,0xc
c001176b:	83 ec 0c             	sub    esp,0xc
c001176e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011772:	e8 cd ff ff ff       	call   c0011744 <ReservedFilename::~ReservedFilename()>
c0011777:	83 c4 10             	add    esp,0x10
c001177a:	83 ec 08             	sub    esp,0x8
c001177d:	6a 0c                	push   0xc
c001177f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011783:	e8 6d 10 00 00       	call   c00127f5 <operator delete(void*, unsigned long)>
c0011788:	83 c4 10             	add    esp,0x10
c001178b:	83 c4 0c             	add    esp,0xc
c001178e:	c3                   	ret    

c001178f <getFromFileDescriptor(int)>:
c001178f:	53                   	push   ebx
c0011790:	83 ec 08             	sub    esp,0x8
c0011793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011797:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001179d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00117a3:	7f 2c                	jg     c00117d1 <getFromFileDescriptor(int)+0x42>
c00117a5:	83 ec 0c             	sub    esp,0xc
c00117a8:	68 f8 ce 02 c0       	push   0xc002cef8
c00117ad:	e8 72 5d 01 00       	call   c0027524 <LinkedList<UnixFile>::getFirstElement()>
c00117b2:	83 c4 10             	add    esp,0x10
c00117b5:	85 c0                	test   eax,eax
c00117b7:	75 04                	jne    c00117bd <getFromFileDescriptor(int)+0x2e>
c00117b9:	31 c0                	xor    eax,eax
c00117bb:	eb 6e                	jmp    c001182b <getFromFileDescriptor(int)+0x9c>
c00117bd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00117c0:	74 69                	je     c001182b <getFromFileDescriptor(int)+0x9c>
c00117c2:	52                   	push   edx
c00117c3:	52                   	push   edx
c00117c4:	50                   	push   eax
c00117c5:	68 f8 ce 02 c0       	push   0xc002cef8
c00117ca:	e8 ff 5d 01 00       	call   c00275ce <LinkedList<UnixFile>::getNext(UnixFile*)>
c00117cf:	eb e1                	jmp    c00117b2 <getFromFileDescriptor(int)+0x23>
c00117d1:	a1 ec ce 02 c0       	mov    eax,ds:0xc002ceec
c00117d6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00117dc:	74 4d                	je     c001182b <getFromFileDescriptor(int)+0x9c>
c00117de:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c00117e3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00117e9:	74 40                	je     c001182b <getFromFileDescriptor(int)+0x9c>
c00117eb:	a1 e8 ce 02 c0       	mov    eax,ds:0xc002cee8
c00117f0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00117f6:	74 33                	je     c001182b <getFromFileDescriptor(int)+0x9c>
c00117f8:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c00117fd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011803:	74 26                	je     c001182b <getFromFileDescriptor(int)+0x9c>
c0011805:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001180b:	83 f8 08             	cmp    eax,0x8
c001180e:	77 09                	ja     c0011819 <getFromFileDescriptor(int)+0x8a>
c0011810:	8b 04 85 c0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3140]
c0011817:	eb 12                	jmp    c001182b <getFromFileDescriptor(int)+0x9c>
c0011819:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001181f:	83 fb 08             	cmp    ebx,0x8
c0011822:	77 95                	ja     c00117b9 <getFromFileDescriptor(int)+0x2a>
c0011824:	8b 04 9d 80 ce 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3180]
c001182b:	83 c4 08             	add    esp,0x8
c001182e:	5b                   	pop    ebx
c001182f:	c3                   	ret    

c0011830 <__static_initialization_and_destruction_0(int, int)>:
c0011830:	83 ec 0c             	sub    esp,0xc
c0011833:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011838:	75 34                	jne    c001186e <__static_initialization_and_destruction_0(int, int)+0x3e>
c001183a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011842:	75 2a                	jne    c001186e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011844:	83 ec 0c             	sub    esp,0xc
c0011847:	68 f8 ce 02 c0       	push   0xc002cef8
c001184c:	e8 a7 5b 01 00       	call   c00273f8 <LinkedList<UnixFile>::LinkedList()>
c0011851:	83 c4 10             	add    esp,0x10
c0011854:	83 ec 04             	sub    esp,0x4
c0011857:	68 b0 bc 02 c0       	push   0xc002bcb0
c001185c:	68 f8 ce 02 c0       	push   0xc002cef8
c0011861:	68 f6 73 02 c0       	push   0xc00273f6
c0011866:	e8 04 0f 00 00       	call   c001276f <__cxa_atexit>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	90                   	nop
c001186f:	83 c4 0c             	add    esp,0xc
c0011872:	c3                   	ret    

c0011873 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011873:	83 ec 0c             	sub    esp,0xc
c0011876:	83 ec 08             	sub    esp,0x8
c0011879:	68 ff ff 00 00       	push   0xffff
c001187e:	6a 01                	push   0x1
c0011880:	e8 ab ff ff ff       	call   c0011830 <__static_initialization_and_destruction_0(int, int)>
c0011885:	83 c4 10             	add    esp,0x10
c0011888:	83 c4 0c             	add    esp,0xc
c001188b:	c3                   	ret    

c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001188c:	53                   	push   ebx
c001188d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011891:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011895:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001189b:	89 c8                	mov    eax,ecx
c001189d:	d1 e8                	shr    eax,1
c001189f:	03 05 28 bd 02 c0    	add    eax,DWORD PTR ds:0xc002bd28
c00118a5:	83 e1 01             	and    ecx,0x1
c00118a8:	8a 10                	mov    dl,BYTE PTR [eax]
c00118aa:	75 09                	jne    c00118b5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00118ac:	83 e2 f0             	and    edx,0xfffffff0
c00118af:	09 da                	or     edx,ebx
c00118b1:	88 10                	mov    BYTE PTR [eax],dl
c00118b3:	5b                   	pop    ebx
c00118b4:	c3                   	ret    
c00118b5:	c1 e3 04             	shl    ebx,0x4
c00118b8:	83 e2 0f             	and    edx,0xf
c00118bb:	09 da                	or     edx,ebx
c00118bd:	88 10                	mov    BYTE PTR [eax],dl
c00118bf:	5b                   	pop    ebx
c00118c0:	c3                   	ret    

c00118c1 <Virt::getPageState(unsigned long)>:
c00118c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118c5:	8b 0d 28 bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bd28
c00118cb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00118d1:	89 d0                	mov    eax,edx
c00118d3:	d1 e8                	shr    eax,1
c00118d5:	83 e2 01             	and    edx,0x1
c00118d8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00118db:	75 04                	jne    c00118e1 <Virt::getPageState(unsigned long)+0x20>
c00118dd:	83 e0 0f             	and    eax,0xf
c00118e0:	c3                   	ret    
c00118e1:	c0 e8 04             	shr    al,0x4
c00118e4:	c3                   	ret    

c00118e5 <Virt::allocateKernelVirtualPages(int)>:
c00118e5:	55                   	push   ebp
c00118e6:	31 ed                	xor    ebp,ebp
c00118e8:	57                   	push   edi
c00118e9:	56                   	push   esi
c00118ea:	53                   	push   ebx
c00118eb:	31 db                	xor    ebx,ebx
c00118ed:	83 ec 1c             	sub    esp,0x1c
c00118f0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00118f4:	8b 3d 24 bd 02 c0    	mov    edi,DWORD PTR ds:0xc002bd24
c00118fa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00118ff:	57                   	push   edi
c0011900:	e8 bc ff ff ff       	call   c00118c1 <Virt::getPageState(unsigned long)>
c0011905:	5a                   	pop    edx
c0011906:	84 c0                	test   al,al
c0011908:	75 3a                	jne    c0011944 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001190a:	85 db                	test   ebx,ebx
c001190c:	75 02                	jne    c0011910 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001190e:	89 fd                	mov    ebp,edi
c0011910:	43                   	inc    ebx
c0011911:	39 f3                	cmp    ebx,esi
c0011913:	74 5a                	je     c001196f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011915:	47                   	inc    edi
c0011916:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001191c:	76 31                	jbe    c001194f <Virt::allocateKernelVirtualPages(int)+0x6a>
c001191e:	c7 05 24 bd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002bd24,0xc8000
c0011928:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001192d:	75 28                	jne    c0011957 <Virt::allocateKernelVirtualPages(int)+0x72>
c001192f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011934:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011939:	57                   	push   edi
c001193a:	e8 82 ff ff ff       	call   c00118c1 <Virt::getPageState(unsigned long)>
c001193f:	5a                   	pop    edx
c0011940:	84 c0                	test   al,al
c0011942:	74 c6                	je     c001190a <Virt::allocateKernelVirtualPages(int)+0x25>
c0011944:	31 db                	xor    ebx,ebx
c0011946:	47                   	inc    edi
c0011947:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001194d:	77 cf                	ja     c001191e <Virt::allocateKernelVirtualPages(int)+0x39>
c001194f:	89 3d 24 bd 02 c0    	mov    DWORD PTR ds:0xc002bd24,edi
c0011955:	eb a8                	jmp    c00118ff <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011957:	83 ec 0c             	sub    esp,0xc
c001195a:	68 14 92 02 c0       	push   0xc0029214
c001195f:	e8 5f 81 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0011964:	8b 3d 24 bd 02 c0    	mov    edi,DWORD PTR ds:0xc002bd24
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	eb 90                	jmp    c00118ff <Virt::allocateKernelVirtualPages(int)+0x1a>
c001196f:	89 2d 24 bd 02 c0    	mov    DWORD PTR ds:0xc002bd24,ebp
c0011975:	4b                   	dec    ebx
c0011976:	74 5f                	je     c00119d7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011978:	85 f6                	test   esi,esi
c001197a:	74 3d                	je     c00119b9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001197c:	89 e8                	mov    eax,ebp
c001197e:	31 db                	xor    ebx,ebx
c0011980:	8d 7e ff             	lea    edi,[esi-0x1]
c0011983:	eb 14                	jmp    c0011999 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011985:	6a 01                	push   0x1
c0011987:	43                   	inc    ebx
c0011988:	50                   	push   eax
c0011989:	e8 fe fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001198e:	58                   	pop    eax
c001198f:	39 f3                	cmp    ebx,esi
c0011991:	5a                   	pop    edx
c0011992:	74 25                	je     c00119b9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011994:	a1 24 bd 02 c0       	mov    eax,ds:0xc002bd24
c0011999:	8d 50 01             	lea    edx,[eax+0x1]
c001199c:	85 db                	test   ebx,ebx
c001199e:	89 15 24 bd 02 c0    	mov    DWORD PTR ds:0xc002bd24,edx
c00119a4:	74 20                	je     c00119c6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00119a6:	39 df                	cmp    edi,ebx
c00119a8:	75 db                	jne    c0011985 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00119aa:	6a 03                	push   0x3
c00119ac:	43                   	inc    ebx
c00119ad:	50                   	push   eax
c00119ae:	e8 d9 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119b3:	59                   	pop    ecx
c00119b4:	39 f3                	cmp    ebx,esi
c00119b6:	58                   	pop    eax
c00119b7:	75 db                	jne    c0011994 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119b9:	83 c4 1c             	add    esp,0x1c
c00119bc:	89 e8                	mov    eax,ebp
c00119be:	5b                   	pop    ebx
c00119bf:	c1 e0 0c             	shl    eax,0xc
c00119c2:	5e                   	pop    esi
c00119c3:	5f                   	pop    edi
c00119c4:	5d                   	pop    ebp
c00119c5:	c3                   	ret    
c00119c6:	6a 02                	push   0x2
c00119c8:	bb 01 00 00 00       	mov    ebx,0x1
c00119cd:	50                   	push   eax
c00119ce:	e8 b9 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119d3:	58                   	pop    eax
c00119d4:	5a                   	pop    edx
c00119d5:	eb bd                	jmp    c0011994 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119d7:	6a 04                	push   0x4
c00119d9:	8d 45 01             	lea    eax,[ebp+0x1]
c00119dc:	55                   	push   ebp
c00119dd:	a3 24 bd 02 c0       	mov    ds:0xc002bd24,eax
c00119e2:	e8 a5 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119e7:	59                   	pop    ecx
c00119e8:	89 e8                	mov    eax,ebp
c00119ea:	5b                   	pop    ebx
c00119eb:	c1 e0 0c             	shl    eax,0xc
c00119ee:	83 c4 1c             	add    esp,0x1c
c00119f1:	5b                   	pop    ebx
c00119f2:	5e                   	pop    esi
c00119f3:	5f                   	pop    edi
c00119f4:	5d                   	pop    ebp
c00119f5:	c3                   	ret    

c00119f6 <Virt::virtualMemorySetup()>:
c00119f6:	53                   	push   ebx
c00119f7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00119fc:	83 ec 08             	sub    esp,0x8
c00119ff:	6a 0f                	push   0xf
c0011a01:	53                   	push   ebx
c0011a02:	43                   	inc    ebx
c0011a03:	e8 84 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a08:	59                   	pop    ecx
c0011a09:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a0f:	58                   	pop    eax
c0011a10:	75 ed                	jne    c00119ff <Virt::virtualMemorySetup()+0x9>
c0011a12:	83 ec 08             	sub    esp,0x8
c0011a15:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a1a:	68 00 00 00 c8       	push   0xc8000000
c0011a1f:	68 9b 93 02 c0       	push   0xc002939b
c0011a24:	e8 ac 0e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011a29:	58                   	pop    eax
c0011a2a:	5a                   	pop    edx
c0011a2b:	68 00 f0 ff ef       	push   0xeffff000
c0011a30:	68 af 93 02 c0       	push   0xc00293af
c0011a35:	e8 9b 0e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011a3a:	83 c4 10             	add    esp,0x10
c0011a3d:	83 ec 08             	sub    esp,0x8
c0011a40:	6a 00                	push   0x0
c0011a42:	53                   	push   ebx
c0011a43:	43                   	inc    ebx
c0011a44:	e8 43 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a49:	83 c4 10             	add    esp,0x10
c0011a4c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a52:	75 e9                	jne    c0011a3d <Virt::virtualMemorySetup()+0x47>
c0011a54:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011a59:	83 ec 08             	sub    esp,0x8
c0011a5c:	6a 0f                	push   0xf
c0011a5e:	53                   	push   ebx
c0011a5f:	43                   	inc    ebx
c0011a60:	e8 27 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a65:	83 c4 10             	add    esp,0x10
c0011a68:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011a6e:	75 e9                	jne    c0011a59 <Virt::virtualMemorySetup()+0x63>
c0011a70:	83 c4 08             	add    esp,0x8
c0011a73:	5b                   	pop    ebx
c0011a74:	c3                   	ret    

c0011a75 <Virt::getAKernelVAS()>:
c0011a75:	a1 04 cf 02 c0       	mov    eax,ds:0xc002cf04
c0011a7a:	c3                   	ret    

c0011a7b <Virt::setupPageSwapping(int)>:
c0011a7b:	57                   	push   edi
c0011a7c:	56                   	push   esi
c0011a7d:	53                   	push   ebx
c0011a7e:	83 ec 1c             	sub    esp,0x1c
c0011a81:	68 14 01 00 00       	push   0x114
c0011a86:	e8 99 db ff ff       	call   c000f624 <malloc>
c0011a8b:	83 c4 0c             	add    esp,0xc
c0011a8e:	89 c6                	mov    esi,eax
c0011a90:	ff 35 d4 e2 02 c0    	push   DWORD PTR ds:0xc002e2d4
c0011a96:	68 c3 93 02 c0       	push   0xc00293c3
c0011a9b:	50                   	push   eax
c0011a9c:	e8 8d 13 00 00       	call   c0012e2e <File::File(char const*, Process*)>
c0011aa1:	89 34 24             	mov    DWORD PTR [esp],esi
c0011aa4:	e8 61 15 00 00       	call   c001300a <File::unlink()>
c0011aa9:	58                   	pop    eax
c0011aaa:	5a                   	pop    edx
c0011aab:	6a 12                	push   0x12
c0011aad:	56                   	push   esi
c0011aae:	e8 df 13 00 00       	call   c0012e92 <File::open(FileOpenMode)>
c0011ab3:	83 c4 10             	add    esp,0x10
c0011ab6:	85 c0                	test   eax,eax
c0011ab8:	0f 85 ca 00 00 00    	jne    c0011b88 <Virt::setupPageSwapping(int)+0x10d>
c0011abe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ac2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011aca:	c1 e3 08             	shl    ebx,0x8
c0011acd:	83 ec 0c             	sub    esp,0xc
c0011ad0:	68 00 00 01 00       	push   0x10000
c0011ad5:	e8 4a db ff ff       	call   c000f624 <malloc>
c0011ada:	83 c4 0c             	add    esp,0xc
c0011add:	89 c7                	mov    edi,eax
c0011adf:	68 00 00 01 00       	push   0x10000
c0011ae4:	6a 00                	push   0x0
c0011ae6:	50                   	push   eax
c0011ae7:	e8 d8 eb fe ff       	call   c00006c4 <memset>
c0011aec:	83 c4 10             	add    esp,0x10
c0011aef:	85 db                	test   ebx,ebx
c0011af1:	79 03                	jns    c0011af6 <Virt::setupPageSwapping(int)+0x7b>
c0011af3:	83 c3 0f             	add    ebx,0xf
c0011af6:	c1 fb 04             	sar    ebx,0x4
c0011af9:	4b                   	dec    ebx
c0011afa:	83 fb ff             	cmp    ebx,0xffffffff
c0011afd:	74 4b                	je     c0011b4a <Virt::setupPageSwapping(int)+0xcf>
c0011aff:	83 ec 0c             	sub    esp,0xc
c0011b02:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b04:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b08:	52                   	push   edx
c0011b09:	57                   	push   edi
c0011b0a:	6a 00                	push   0x0
c0011b0c:	68 00 00 01 00       	push   0x10000
c0011b11:	56                   	push   esi
c0011b12:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b15:	83 c4 20             	add    esp,0x20
c0011b18:	85 c0                	test   eax,eax
c0011b1a:	75 59                	jne    c0011b75 <Virt::setupPageSwapping(int)+0xfa>
c0011b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b20:	3d 00 00 01 00       	cmp    eax,0x10000
c0011b25:	74 d2                	je     c0011af9 <Virt::setupPageSwapping(int)+0x7e>
c0011b27:	83 ec 08             	sub    esp,0x8
c0011b2a:	4b                   	dec    ebx
c0011b2b:	50                   	push   eax
c0011b2c:	68 16 94 02 c0       	push   0xc0029416
c0011b31:	e8 9f 0d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011b36:	c7 04 24 1f 94 02 c0 	mov    DWORD PTR [esp],0xc002941f
c0011b3d:	e8 81 7f 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0011b42:	83 c4 10             	add    esp,0x10
c0011b45:	83 fb ff             	cmp    ebx,0xffffffff
c0011b48:	75 b5                	jne    c0011aff <Virt::setupPageSwapping(int)+0x84>
c0011b4a:	83 ec 0c             	sub    esp,0xc
c0011b4d:	56                   	push   esi
c0011b4e:	e8 9d 13 00 00       	call   c0012ef0 <File::close()>
c0011b53:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b56:	e8 e9 da ff ff       	call   c000f644 <rfree>
c0011b5b:	83 c4 10             	add    esp,0x10
c0011b5e:	85 f6                	test   esi,esi
c0011b60:	74 0c                	je     c0011b6e <Virt::setupPageSwapping(int)+0xf3>
c0011b62:	83 ec 0c             	sub    esp,0xc
c0011b65:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b67:	56                   	push   esi
c0011b68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b6b:	83 c4 10             	add    esp,0x10
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	5b                   	pop    ebx
c0011b72:	5e                   	pop    esi
c0011b73:	5f                   	pop    edi
c0011b74:	c3                   	ret    
c0011b75:	83 ec 08             	sub    esp,0x8
c0011b78:	50                   	push   eax
c0011b79:	68 fe 93 02 c0       	push   0xc00293fe
c0011b7e:	e8 52 0d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011b83:	83 c4 10             	add    esp,0x10
c0011b86:	eb 94                	jmp    c0011b1c <Virt::setupPageSwapping(int)+0xa1>
c0011b88:	83 ec 08             	sub    esp,0x8
c0011b8b:	50                   	push   eax
c0011b8c:	68 da 93 02 c0       	push   0xc00293da
c0011b91:	e8 3f 0d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011b96:	c7 04 24 e3 93 02 c0 	mov    DWORD PTR [esp],0xc00293e3
c0011b9d:	e8 21 7f 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0011ba2:	83 c4 10             	add    esp,0x10
c0011ba5:	e9 14 ff ff ff       	jmp    c0011abe <Virt::setupPageSwapping(int)+0x43>

c0011baa <VAS::VAS()>:
c0011baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb9:	a3 04 cf 02 c0       	mov    ds:0xc002cf04,eax
c0011bbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc2:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011bc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bca:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011bcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd1:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011bd8:	90                   	nop
c0011bd9:	c3                   	ret    

c0011bda <VAS::VAS(VAS*)>:
c0011bda:	83 ec 0c             	sub    esp,0xc
c0011bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011be1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011be8:	83 ec 0c             	sub    esp,0xc
c0011beb:	68 34 92 02 c0       	push   0xc0029234
c0011bf0:	e8 ce 7e 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0011bf5:	83 c4 10             	add    esp,0x10
c0011bf8:	90                   	nop
c0011bf9:	83 c4 0c             	add    esp,0xc
c0011bfc:	c3                   	ret    
c0011bfd:	90                   	nop

c0011bfe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c02:	89 c2                	mov    edx,eax
c0011c04:	c1 e8 0a             	shr    eax,0xa
c0011c07:	c1 ea 16             	shr    edx,0x16
c0011c0a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c0f:	19 c9                	sbb    ecx,ecx
c0011c11:	c1 e2 0c             	shl    edx,0xc
c0011c14:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011c1a:	25 fc 0f 00 00       	and    eax,0xffc
c0011c1f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011c26:	01 d0                	add    eax,edx
c0011c28:	c3                   	ret    
c0011c29:	90                   	nop

c0011c2a <VAS::getPageTableEntry(unsigned long)>:
c0011c2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c2e:	89 ca                	mov    edx,ecx
c0011c30:	c1 e9 0a             	shr    ecx,0xa
c0011c33:	c1 ea 16             	shr    edx,0x16
c0011c36:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011c3c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011c42:	c1 e0 0c             	shl    eax,0xc
c0011c45:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c48:	c3                   	ret    

c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c49:	57                   	push   edi
c0011c4a:	56                   	push   esi
c0011c4b:	be 01 00 00 00       	mov    esi,0x1
c0011c50:	53                   	push   ebx
c0011c51:	83 ec 10             	sub    esp,0x10
c0011c54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c58:	c1 eb 0c             	shr    ebx,0xc
c0011c5b:	eb 3f                	jmp    c0011c9c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011c5d:	e8 13 fe ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0011c62:	83 ec 08             	sub    esp,0x8
c0011c65:	57                   	push   edi
c0011c66:	50                   	push   eax
c0011c67:	e8 be ff ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c0011c6c:	83 c4 10             	add    esp,0x10
c0011c6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c71:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c75:	f6 c4 04             	test   ah,0x4
c0011c78:	75 5f                	jne    c0011cd9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c7a:	80 fa 04             	cmp    dl,0x4
c0011c7d:	74 78                	je     c0011cf7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c7f:	80 fa 02             	cmp    dl,0x2
c0011c82:	0f 84 88 00 00 00    	je     c0011d10 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011c88:	80 fa 03             	cmp    dl,0x3
c0011c8b:	0f 84 ad 00 00 00    	je     c0011d3e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011c91:	fe ca                	dec    dl
c0011c93:	0f 84 92 00 00 00    	je     c0011d2b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011c99:	43                   	inc    ebx
c0011c9a:	31 f6                	xor    esi,esi
c0011c9c:	53                   	push   ebx
c0011c9d:	e8 1f fc ff ff       	call   c00118c1 <Virt::getPageState(unsigned long)>
c0011ca2:	5f                   	pop    edi
c0011ca3:	89 df                	mov    edi,ebx
c0011ca5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ca9:	c1 e7 0c             	shl    edi,0xc
c0011cac:	84 c0                	test   al,al
c0011cae:	75 ad                	jne    c0011c5d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011cb0:	83 ec 0c             	sub    esp,0xc
c0011cb3:	68 25 94 02 c0       	push   0xc0029425
c0011cb8:	e8 06 7e 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0011cbd:	e8 b3 fd ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0011cc2:	5a                   	pop    edx
c0011cc3:	59                   	pop    ecx
c0011cc4:	57                   	push   edi
c0011cc5:	50                   	push   eax
c0011cc6:	e8 5f ff ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c0011ccb:	83 c4 10             	add    esp,0x10
c0011cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cd4:	f6 c4 04             	test   ah,0x4
c0011cd7:	74 c0                	je     c0011c99 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cd9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011cdd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ce2:	83 ec 0c             	sub    esp,0xc
c0011ce5:	50                   	push   eax
c0011ce6:	e8 2e df ff ff       	call   c000fc19 <Phys::freePage(unsigned long)>
c0011ceb:	83 c4 10             	add    esp,0x10
c0011cee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cf2:	80 fa 04             	cmp    dl,0x4
c0011cf5:	75 88                	jne    c0011c7f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011cf7:	89 f0                	mov    eax,esi
c0011cf9:	84 c0                	test   al,al
c0011cfb:	75 47                	jne    c0011d44 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011cfd:	c7 44 24 20 58 92 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029258
c0011d05:	83 c4 10             	add    esp,0x10
c0011d08:	5b                   	pop    ebx
c0011d09:	5e                   	pop    esi
c0011d0a:	5f                   	pop    edi
c0011d0b:	e9 b3 7d 00 00       	jmp    c0019ac3 <Krnl::panic(char const*)>
c0011d10:	89 f0                	mov    eax,esi
c0011d12:	84 c0                	test   al,al
c0011d14:	75 15                	jne    c0011d2b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011d16:	83 ec 0c             	sub    esp,0xc
c0011d19:	68 41 94 02 c0       	push   0xc0029441
c0011d1e:	e8 a0 7d 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	e9 6e ff ff ff       	jmp    c0011c99 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d2b:	83 ec 08             	sub    esp,0x8
c0011d2e:	6a 00                	push   0x0
c0011d30:	53                   	push   ebx
c0011d31:	e8 56 fb ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d36:	83 c4 10             	add    esp,0x10
c0011d39:	e9 5b ff ff ff       	jmp    c0011c99 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d3e:	89 f0                	mov    eax,esi
c0011d40:	84 c0                	test   al,al
c0011d42:	75 15                	jne    c0011d59 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011d44:	83 ec 08             	sub    esp,0x8
c0011d47:	6a 00                	push   0x0
c0011d49:	53                   	push   ebx
c0011d4a:	e8 3d fb ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d4f:	83 c4 10             	add    esp,0x10
c0011d52:	83 c4 10             	add    esp,0x10
c0011d55:	5b                   	pop    ebx
c0011d56:	5e                   	pop    esi
c0011d57:	5f                   	pop    edi
c0011d58:	c3                   	ret    
c0011d59:	c7 44 24 20 5d 94 02 c0 	mov    DWORD PTR [esp+0x20],0xc002945d
c0011d61:	83 c4 10             	add    esp,0x10
c0011d64:	5b                   	pop    ebx
c0011d65:	5e                   	pop    esi
c0011d66:	5f                   	pop    edi
c0011d67:	e9 57 7d 00 00       	jmp    c0019ac3 <Krnl::panic(char const*)>

c0011d6c <VAS::freeAllocatedPages(unsigned long)>:
c0011d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d74:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d78:	74 09                	je     c0011d83 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d7a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d7e:	e9 c6 fe ff ff       	jmp    c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d83:	c7 44 24 04 7c 92 02 c0 	mov    DWORD PTR [esp+0x4],0xc002927c
c0011d8b:	e9 45 0b 00 00       	jmp    c00128d5 <Dbg::kprintf(char const*, ...)>

c0011d90 <VAS::virtualToPhysical(unsigned long)>:
c0011d90:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d94:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d98:	e8 8d fe ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c0011d9d:	5a                   	pop    edx
c0011d9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da0:	59                   	pop    ecx
c0011da1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011da6:	c3                   	ret    
c0011da7:	90                   	nop

c0011da8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011da8:	55                   	push   ebp
c0011da9:	57                   	push   edi
c0011daa:	56                   	push   esi
c0011dab:	53                   	push   ebx
c0011dac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011db0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011db4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011db8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011dbc:	85 db                	test   ebx,ebx
c0011dbe:	7e 22                	jle    c0011de2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011dc0:	c1 e3 0c             	shl    ebx,0xc
c0011dc3:	01 f3                	add    ebx,esi
c0011dc5:	56                   	push   esi
c0011dc6:	81 c6 00 10 00 00    	add    esi,0x1000
c0011dcc:	55                   	push   ebp
c0011dcd:	e8 58 fe ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c0011dd2:	5a                   	pop    edx
c0011dd3:	59                   	pop    ecx
c0011dd4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011dd6:	21 f9                	and    ecx,edi
c0011dd8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011ddc:	39 f3                	cmp    ebx,esi
c0011dde:	89 08                	mov    DWORD PTR [eax],ecx
c0011de0:	75 e3                	jne    c0011dc5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011de2:	5b                   	pop    ebx
c0011de3:	5e                   	pop    esi
c0011de4:	5f                   	pop    edi
c0011de5:	5d                   	pop    ebp
c0011de6:	c3                   	ret    
c0011de7:	90                   	nop

c0011de8 <VAS::setToWriteCombining(unsigned long, int)>:
c0011de8:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0011ded:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011df3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011dfa:	75 01                	jne    c0011dfd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011dfc:	c3                   	ret    
c0011dfd:	68 80 00 00 00       	push   0x80
c0011e02:	6a ff                	push   0xffffffff
c0011e04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e10:	e8 93 ff ff ff       	call   c0011da8 <VAS::reflagRange(unsigned long, int, int, int)>
c0011e15:	83 c4 14             	add    esp,0x14
c0011e18:	c3                   	ret    
c0011e19:	90                   	nop

c0011e1a <VAS::mapOtherVASIn(bool, VAS*)>:
c0011e1a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e23:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e2a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011e2d:	19 c0                	sbb    eax,eax
c0011e2f:	83 ca 03             	or     edx,0x3
c0011e32:	83 e0 fc             	and    eax,0xfffffffc
c0011e35:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011e3c:	0f 20 d8             	mov    eax,cr3
c0011e3f:	0f 22 d8             	mov    cr3,eax
c0011e42:	c3                   	ret    
c0011e43:	90                   	nop

c0011e44 <VAS::~VAS()>:
c0011e44:	83 ec 2c             	sub    esp,0x2c
c0011e47:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e4f:	e8 1e b2 00 00       	call   c001d072 <lockScheduler()>
c0011e54:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e5e:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e64:	83 ec 04             	sub    esp,0x4
c0011e67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e6b:	6a 01                	push   0x1
c0011e6d:	50                   	push   eax
c0011e6e:	e8 a7 ff ff ff       	call   c0011e1a <VAS::mapOtherVASIn(bool, VAS*)>
c0011e73:	83 c4 10             	add    esp,0x10
c0011e76:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e7e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011e86:	0f 8f d7 00 00 00    	jg     c0011f63 <VAS::~VAS()+0x11f>
c0011e8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e90:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e97:	c1 e2 02             	shl    edx,0x2
c0011e9a:	01 d0                	add    eax,edx
c0011e9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea6:	83 e0 01             	and    eax,0x1
c0011ea9:	0f 84 ab 00 00 00    	je     c0011f5a <VAS::~VAS()+0x116>
c0011eaf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011eb7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011ebf:	7f 75                	jg     c0011f36 <VAS::~VAS()+0xf2>
c0011ec1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ec5:	c1 e0 0a             	shl    eax,0xa
c0011ec8:	89 c2                	mov    edx,eax
c0011eca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ece:	01 d0                	add    eax,edx
c0011ed0:	c1 e0 0c             	shl    eax,0xc
c0011ed3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ed7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011edc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ede:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ee1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011ee7:	83 ec 04             	sub    esp,0x4
c0011eea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011eee:	6a 01                	push   0x1
c0011ef0:	50                   	push   eax
c0011ef1:	e8 08 fd ff ff       	call   c0011bfe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011ef6:	83 c4 10             	add    esp,0x10
c0011ef9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011efd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f0b:	25 01 04 00 00       	and    eax,0x401
c0011f10:	3d 01 04 00 00       	cmp    eax,0x401
c0011f15:	75 19                	jne    c0011f30 <VAS::~VAS()+0xec>
c0011f17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f1b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f20:	83 ec 0c             	sub    esp,0xc
c0011f23:	50                   	push   eax
c0011f24:	e8 f0 dc ff ff       	call   c000fc19 <Phys::freePage(unsigned long)>
c0011f29:	83 c4 10             	add    esp,0x10
c0011f2c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f30:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011f34:	eb 81                	jmp    c0011eb7 <VAS::~VAS()+0x73>
c0011f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f3a:	25 00 04 00 00       	and    eax,0x400
c0011f3f:	74 19                	je     c0011f5a <VAS::~VAS()+0x116>
c0011f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f4a:	83 ec 0c             	sub    esp,0xc
c0011f4d:	50                   	push   eax
c0011f4e:	e8 c6 dc ff ff       	call   c000fc19 <Phys::freePage(unsigned long)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f5a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f5e:	e9 1b ff ff ff       	jmp    c0011e7e <VAS::~VAS()+0x3a>
c0011f63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f6a:	83 ec 0c             	sub    esp,0xc
c0011f6d:	50                   	push   eax
c0011f6e:	e8 d6 fc ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f7d:	83 ec 0c             	sub    esp,0xc
c0011f80:	50                   	push   eax
c0011f81:	e8 93 dc ff ff       	call   c000fc19 <Phys::freePage(unsigned long)>
c0011f86:	83 c4 10             	add    esp,0x10
c0011f89:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f91:	c1 e0 02             	shl    eax,0x2
c0011f94:	83 ec 08             	sub    esp,0x8
c0011f97:	50                   	push   eax
c0011f98:	68 a0 92 02 c0       	push   0xc00292a0
c0011f9d:	e8 33 09 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	e8 ca b0 00 00       	call   c001d074 <unlockScheduler()>
c0011faa:	90                   	nop
c0011fab:	83 c4 2c             	add    esp,0x2c
c0011fae:	c3                   	ret    
c0011faf:	90                   	nop

c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011fb0:	55                   	push   ebp
c0011fb1:	57                   	push   edi
c0011fb2:	56                   	push   esi
c0011fb3:	53                   	push   ebx
c0011fb4:	83 ec 1c             	sub    esp,0x1c
c0011fb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011fbb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fbf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011fc5:	77 08                	ja     c0011fcf <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011fc7:	0f 20 d8             	mov    eax,cr3
c0011fca:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011fcd:	75 47                	jne    c0012016 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011fcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fd3:	09 d8                	or     eax,ebx
c0011fd5:	a9 ff 0f 00 00       	test   eax,0xfff
c0011fda:	75 57                	jne    c0012033 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011fdc:	89 de                	mov    esi,ebx
c0011fde:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011fe1:	c1 ee 16             	shr    esi,0x16
c0011fe4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011feb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011fef:	74 54                	je     c0012045 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ff1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ff5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011ffb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011fff:	c1 e6 0c             	shl    esi,0xc
c0012002:	c1 eb 0a             	shr    ebx,0xa
c0012005:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001200b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001200e:	83 c4 1c             	add    esp,0x1c
c0012011:	5b                   	pop    ebx
c0012012:	5e                   	pop    esi
c0012013:	5f                   	pop    edi
c0012014:	5d                   	pop    ebp
c0012015:	c3                   	ret    
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	68 c0 92 02 c0       	push   0xc00292c0
c001201e:	e8 b2 08 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0012023:	83 c4 10             	add    esp,0x10
c0012026:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001202a:	09 d8                	or     eax,ebx
c001202c:	a9 ff 0f 00 00       	test   eax,0xfff
c0012031:	74 a9                	je     c0011fdc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012033:	83 ec 0c             	sub    esp,0xc
c0012036:	68 28 93 02 c0       	push   0xc0029328
c001203b:	e8 83 7a 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0012040:	83 c4 10             	add    esp,0x10
c0012043:	eb 97                	jmp    c0011fdc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012045:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012049:	e8 55 dc ff ff       	call   c000fca3 <Phys::allocatePage()>
c001204e:	89 c5                	mov    ebp,eax
c0012050:	e8 20 fa ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0012055:	83 ec 0c             	sub    esp,0xc
c0012058:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001205c:	6a 01                	push   0x1
c001205e:	e8 82 f8 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c0012063:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001206a:	6a 01                	push   0x1
c001206c:	50                   	push   eax
c001206d:	55                   	push   ebp
c001206e:	81 cd 07 04 00 00    	or     ebp,0x407
c0012074:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012078:	51                   	push   ecx
c0012079:	e8 26 02 00 00       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001207e:	83 c4 1c             	add    esp,0x1c
c0012081:	68 00 10 00 00       	push   0x1000
c0012086:	6a 00                	push   0x0
c0012088:	50                   	push   eax
c0012089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001208d:	e8 32 e6 fe ff       	call   c00006c4 <memset>
c0012092:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012096:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012099:	e8 ab fb ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c001209e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120a5:	83 c4 10             	add    esp,0x10
c00120a8:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00120ab:	e9 41 ff ff ff       	jmp    c0011ff1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00120b0 <VAS::allocatePages(int, int)>:
c00120b0:	55                   	push   ebp
c00120b1:	57                   	push   edi
c00120b2:	56                   	push   esi
c00120b3:	53                   	push   ebx
c00120b4:	83 ec 1c             	sub    esp,0x1c
c00120b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120bb:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c00120c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120c6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120cc:	83 e0 01             	and    eax,0x1
c00120cf:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00120d3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120d7:	0f 85 cc 00 00 00    	jne    c00121a9 <VAS::allocatePages(int, int)+0xf9>
c00120dd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120e4:	85 c0                	test   eax,eax
c00120e6:	0f 84 a1 00 00 00    	je     c001218d <VAS::allocatePages(int, int)+0xdd>
c00120ec:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00120f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120f4:	c1 e6 0c             	shl    esi,0xc
c00120f7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00120fb:	85 c0                	test   eax,eax
c00120fd:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012100:	7e 33                	jle    c0012135 <VAS::allocatePages(int, int)+0x85>
c0012102:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012106:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001210a:	81 cd 00 04 00 00    	or     ebp,0x400
c0012110:	e8 8e db ff ff       	call   c000fca3 <Phys::allocatePage()>
c0012115:	55                   	push   ebp
c0012116:	53                   	push   ebx
c0012117:	50                   	push   eax
c0012118:	57                   	push   edi
c0012119:	e8 92 fe ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001211e:	83 c4 10             	add    esp,0x10
c0012121:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012126:	74 03                	je     c001212b <VAS::allocatePages(int, int)+0x7b>
c0012128:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001212b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012131:	39 de                	cmp    esi,ebx
c0012133:	75 db                	jne    c0012110 <VAS::allocatePages(int, int)+0x60>
c0012135:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001213a:	75 12                	jne    c001214e <VAS::allocatePages(int, int)+0x9e>
c001213c:	0f 20 d8             	mov    eax,cr3
c001213f:	0f 22 d8             	mov    cr3,eax
c0012142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012146:	83 c4 1c             	add    esp,0x1c
c0012149:	5b                   	pop    ebx
c001214a:	5e                   	pop    esi
c001214b:	5f                   	pop    edi
c001214c:	5d                   	pop    ebp
c001214d:	c3                   	ret    
c001214e:	c1 ee 0a             	shr    esi,0xa
c0012151:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012155:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001215b:	c1 eb 0a             	shr    ebx,0xa
c001215e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012164:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001216a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012170:	39 c3                	cmp    ebx,eax
c0012172:	77 ce                	ja     c0012142 <VAS::allocatePages(int, int)+0x92>
c0012174:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012177:	81 c3 00 10 00 00    	add    ebx,0x1000
c001217d:	39 d8                	cmp    eax,ebx
c001217f:	73 f3                	jae    c0012174 <VAS::allocatePages(int, int)+0xc4>
c0012181:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012185:	83 c4 1c             	add    esp,0x1c
c0012188:	5b                   	pop    ebx
c0012189:	5e                   	pop    esi
c001218a:	5f                   	pop    edi
c001218b:	5d                   	pop    ebp
c001218c:	c3                   	ret    
c001218d:	83 ec 0c             	sub    esp,0xc
c0012190:	68 4c 93 02 c0       	push   0xc002934c
c0012195:	e8 29 79 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c001219a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001219d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	e9 43 ff ff ff       	jmp    c00120ec <VAS::allocatePages(int, int)+0x3c>
c00121a9:	83 ec 0c             	sub    esp,0xc
c00121ac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00121b0:	e8 30 f7 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c00121b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121b9:	83 c4 10             	add    esp,0x10
c00121bc:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00121c1:	0f 87 9b 00 00 00    	ja     c0012262 <VAS::allocatePages(int, int)+0x1b2>
c00121c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121cb:	85 d2                	test   edx,edx
c00121cd:	7e 3c                	jle    c001220b <VAS::allocatePages(int, int)+0x15b>
c00121cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121d3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121db:	c1 e5 0c             	shl    ebp,0xc
c00121de:	81 ce 00 04 00 00    	or     esi,0x400
c00121e4:	01 dd                	add    ebp,ebx
c00121e6:	e8 b8 da ff ff       	call   c000fca3 <Phys::allocatePage()>
c00121eb:	56                   	push   esi
c00121ec:	53                   	push   ebx
c00121ed:	50                   	push   eax
c00121ee:	57                   	push   edi
c00121ef:	e8 bc fd ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00121f4:	83 c4 10             	add    esp,0x10
c00121f7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121fc:	74 03                	je     c0012201 <VAS::allocatePages(int, int)+0x151>
c00121fe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012201:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012207:	39 dd                	cmp    ebp,ebx
c0012209:	75 db                	jne    c00121e6 <VAS::allocatePages(int, int)+0x136>
c001220b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012210:	0f 84 26 ff ff ff    	je     c001213c <VAS::allocatePages(int, int)+0x8c>
c0012216:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001221a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001221e:	89 d3                	mov    ebx,edx
c0012220:	c1 e0 0c             	shl    eax,0xc
c0012223:	c1 eb 0a             	shr    ebx,0xa
c0012226:	01 d0                	add    eax,edx
c0012228:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001222e:	c1 e8 0a             	shr    eax,0xa
c0012231:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012237:	25 00 f0 ff ff       	and    eax,0xfffff000
c001223c:	2d 00 00 40 00       	sub    eax,0x400000
c0012241:	39 c3                	cmp    ebx,eax
c0012243:	0f 87 f9 fe ff ff    	ja     c0012142 <VAS::allocatePages(int, int)+0x92>
c0012249:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001224c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012252:	39 d8                	cmp    eax,ebx
c0012254:	73 f3                	jae    c0012249 <VAS::allocatePages(int, int)+0x199>
c0012256:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001225a:	83 c4 1c             	add    esp,0x1c
c001225d:	5b                   	pop    ebx
c001225e:	5e                   	pop    esi
c001225f:	5f                   	pop    edi
c0012260:	5d                   	pop    ebp
c0012261:	c3                   	ret    
c0012262:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0012267:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001226d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012274:	0f 84 4d ff ff ff    	je     c00121c7 <VAS::allocatePages(int, int)+0x117>
c001227a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012282:	e9 40 ff ff ff       	jmp    c00121c7 <VAS::allocatePages(int, int)+0x117>
c0012287:	90                   	nop

c0012288 <VAS::setCPUSpecific(unsigned long)>:
c0012288:	83 ec 0c             	sub    esp,0xc
c001228b:	6a 05                	push   0x5
c001228d:	68 00 00 40 c2       	push   0xc2400000
c0012292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001229a:	e8 11 fd ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001229f:	83 c4 1c             	add    esp,0x1c
c00122a2:	c3                   	ret    
c00122a3:	90                   	nop

c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00122a4:	55                   	push   ebp
c00122a5:	57                   	push   edi
c00122a6:	56                   	push   esi
c00122a7:	53                   	push   ebx
c00122a8:	83 ec 1c             	sub    esp,0x1c
c00122ab:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c00122b0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122ba:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00122be:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00122c4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00122c8:	83 e0 01             	and    eax,0x1
c00122cb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00122cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122d3:	85 c0                	test   eax,eax
c00122d5:	7e 39                	jle    c0012310 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00122d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122db:	89 f3                	mov    ebx,esi
c00122dd:	c1 e0 0c             	shl    eax,0xc
c00122e0:	01 f0                	add    eax,esi
c00122e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122e6:	55                   	push   ebp
c00122e7:	53                   	push   ebx
c00122e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122ec:	29 f0                	sub    eax,esi
c00122ee:	01 d8                	add    eax,ebx
c00122f0:	50                   	push   eax
c00122f1:	57                   	push   edi
c00122f2:	e8 b9 fc ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00122f7:	83 c4 10             	add    esp,0x10
c00122fa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00122ff:	74 03                	je     c0012304 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012301:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012304:	81 c3 00 10 00 00    	add    ebx,0x1000
c001230a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001230e:	75 d6                	jne    c00122e6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012310:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012315:	75 10                	jne    c0012327 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012317:	0f 20 d8             	mov    eax,cr3
c001231a:	0f 22 d8             	mov    cr3,eax
c001231d:	83 c4 1c             	add    esp,0x1c
c0012320:	89 f0                	mov    eax,esi
c0012322:	5b                   	pop    ebx
c0012323:	5e                   	pop    esi
c0012324:	5f                   	pop    edi
c0012325:	5d                   	pop    ebp
c0012326:	c3                   	ret    
c0012327:	89 f3                	mov    ebx,esi
c0012329:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001232d:	c1 eb 0a             	shr    ebx,0xa
c0012330:	c1 e0 0c             	shl    eax,0xc
c0012333:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012339:	01 f0                	add    eax,esi
c001233b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012341:	c1 e8 0a             	shr    eax,0xa
c0012344:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012349:	2d 00 00 40 00       	sub    eax,0x400000
c001234e:	39 c3                	cmp    ebx,eax
c0012350:	77 cb                	ja     c001231d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012352:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012355:	81 c3 00 10 00 00    	add    ebx,0x1000
c001235b:	39 d8                	cmp    eax,ebx
c001235d:	73 f3                	jae    c0012352 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001235f:	83 c4 1c             	add    esp,0x1c
c0012362:	89 f0                	mov    eax,esi
c0012364:	5b                   	pop    ebx
c0012365:	5e                   	pop    esi
c0012366:	5f                   	pop    edi
c0012367:	5d                   	pop    ebp
c0012368:	c3                   	ret    
c0012369:	90                   	nop

c001236a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001236a:	55                   	push   ebp
c001236b:	57                   	push   edi
c001236c:	56                   	push   esi
c001236d:	53                   	push   ebx
c001236e:	83 ec 1c             	sub    esp,0x1c
c0012371:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012375:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012379:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001237d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012381:	a9 ff 0f 00 00       	test   eax,0xfff
c0012386:	75 4a                	jne    c00123d2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012388:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001238c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001238f:	c1 eb 16             	shr    ebx,0x16
c0012392:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012399:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001239d:	74 4d                	je     c00123ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001239f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123a3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00123a7:	c1 e8 0a             	shr    eax,0xa
c00123aa:	80 fa 01             	cmp    dl,0x1
c00123ad:	19 d2                	sbb    edx,edx
c00123af:	c1 e3 0c             	shl    ebx,0xc
c00123b2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00123b6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00123bc:	25 fc 0f 00 00       	and    eax,0xffc
c00123c1:	01 d8                	add    eax,ebx
c00123c3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00123ca:	83 c4 1c             	add    esp,0x1c
c00123cd:	5b                   	pop    ebx
c00123ce:	5e                   	pop    esi
c00123cf:	5f                   	pop    edi
c00123d0:	5d                   	pop    ebp
c00123d1:	c3                   	ret    
c00123d2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00123d6:	83 ec 0c             	sub    esp,0xc
c00123d9:	68 78 93 02 c0       	push   0xc0029378
c00123de:	e8 e0 76 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c00123e3:	83 c4 10             	add    esp,0x10
c00123e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123ea:	eb 9c                	jmp    c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00123ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123f0:	e8 ae d8 ff ff       	call   c000fca3 <Phys::allocatePage()>
c00123f5:	89 c5                	mov    ebp,eax
c00123f7:	e8 79 f6 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c00123fc:	83 ec 0c             	sub    esp,0xc
c00123ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012403:	6a 01                	push   0x1
c0012405:	e8 db f4 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c001240a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012411:	6a 01                	push   0x1
c0012413:	50                   	push   eax
c0012414:	55                   	push   ebp
c0012415:	81 cd 07 04 00 00    	or     ebp,0x407
c001241b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001241f:	51                   	push   ecx
c0012420:	e8 7f fe ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012425:	83 c4 1c             	add    esp,0x1c
c0012428:	68 00 10 00 00       	push   0x1000
c001242d:	6a 00                	push   0x0
c001242f:	50                   	push   eax
c0012430:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012434:	e8 8b e2 fe ff       	call   c00006c4 <memset>
c0012439:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001243d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012440:	e8 04 f8 ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c0012445:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012448:	83 c4 10             	add    esp,0x10
c001244b:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001244e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012452:	e9 48 ff ff ff       	jmp    c001239f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012457:	90                   	nop

c0012458 <VAS::VAS(bool)>:
c0012458:	53                   	push   ebx
c0012459:	83 ec 28             	sub    esp,0x28
c001245c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012460:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012464:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012468:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001246f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012473:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012477:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001247a:	e8 24 d8 ff ff       	call   c000fca3 <Phys::allocatePage()>
c001247f:	89 c2                	mov    edx,eax
c0012481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012485:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012488:	e8 e8 f5 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c001248d:	89 c3                	mov    ebx,eax
c001248f:	83 ec 0c             	sub    esp,0xc
c0012492:	6a 01                	push   0x1
c0012494:	e8 4c f4 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c0012499:	83 c4 10             	add    esp,0x10
c001249c:	89 c2                	mov    edx,eax
c001249e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124a5:	83 ec 0c             	sub    esp,0xc
c00124a8:	6a 03                	push   0x3
c00124aa:	6a 01                	push   0x1
c00124ac:	52                   	push   edx
c00124ad:	50                   	push   eax
c00124ae:	53                   	push   ebx
c00124af:	e8 f0 fd ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124b4:	83 c4 20             	add    esp,0x20
c00124b7:	89 c2                	mov    edx,eax
c00124b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124bd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124c0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124c8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00124d0:	7f 1c                	jg     c00124ee <VAS::VAS(bool)+0x96>
c00124d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124dd:	c1 e2 02             	shl    edx,0x2
c00124e0:	01 d0                	add    eax,edx
c00124e2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00124e8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00124ec:	eb da                	jmp    c00124c8 <VAS::VAS(bool)+0x70>
c00124ee:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00124f6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00124fe:	7f 7a                	jg     c001257a <VAS::VAS(bool)+0x122>
c0012500:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012504:	2d 00 02 00 00       	sub    eax,0x200
c0012509:	c1 e0 0c             	shl    eax,0xc
c001250c:	83 c8 03             	or     eax,0x3
c001250f:	89 c2                	mov    edx,eax
c0012511:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0012516:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001251c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012522:	83 e0 10             	and    eax,0x10
c0012525:	84 c0                	test   al,al
c0012527:	74 07                	je     c0012530 <VAS::VAS(bool)+0xd8>
c0012529:	b8 00 01 00 00       	mov    eax,0x100
c001252e:	eb 05                	jmp    c0012535 <VAS::VAS(bool)+0xdd>
c0012530:	b8 00 00 00 00       	mov    eax,0x0
c0012535:	09 d0                	or     eax,edx
c0012537:	89 c1                	mov    ecx,eax
c0012539:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001253d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012544:	c1 e2 02             	shl    edx,0x2
c0012547:	01 d0                	add    eax,edx
c0012549:	89 ca                	mov    edx,ecx
c001254b:	89 10                	mov    DWORD PTR [eax],edx
c001254d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012551:	2d 40 03 00 00       	sub    eax,0x340
c0012556:	83 f8 7f             	cmp    eax,0x7f
c0012559:	77 16                	ja     c0012571 <VAS::VAS(bool)+0x119>
c001255b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001255f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012562:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012566:	c1 e2 02             	shl    edx,0x2
c0012569:	01 d0                	add    eax,edx
c001256b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012571:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012575:	e9 7c ff ff ff       	jmp    c00124f6 <VAS::VAS(bool)+0x9e>
c001257a:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001257f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012585:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001258b:	83 e0 10             	and    eax,0x10
c001258e:	84 c0                	test   al,al
c0012590:	74 07                	je     c0012599 <VAS::VAS(bool)+0x141>
c0012592:	b8 03 41 00 00       	mov    eax,0x4103
c0012597:	eb 05                	jmp    c001259e <VAS::VAS(bool)+0x146>
c0012599:	b8 03 40 00 00       	mov    eax,0x4003
c001259e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125a2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00125a5:	81 c2 20 0c 00 00    	add    edx,0xc20
c00125ab:	89 02                	mov    DWORD PTR [edx],eax
c00125ad:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c00125b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125b8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00125be:	83 ec 08             	sub    esp,0x8
c00125c1:	50                   	push   eax
c00125c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125c6:	e8 bd fc ff ff       	call   c0012288 <VAS::setCPUSpecific(unsigned long)>
c00125cb:	83 c4 10             	add    esp,0x10
c00125ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125d2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125d5:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c00125da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125e0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125e6:	83 e0 10             	and    eax,0x10
c00125e9:	84 c0                	test   al,al
c00125eb:	74 07                	je     c00125f4 <VAS::VAS(bool)+0x19c>
c00125ed:	b8 00 01 00 00       	mov    eax,0x100
c00125f2:	eb 05                	jmp    c00125f9 <VAS::VAS(bool)+0x1a1>
c00125f4:	b8 00 00 00 00       	mov    eax,0x0
c00125f9:	09 c2                	or     edx,eax
c00125fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012602:	05 fc 0f 00 00       	add    eax,0xffc
c0012607:	83 ca 03             	or     edx,0x3
c001260a:	89 10                	mov    DWORD PTR [eax],edx
c001260c:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0012611:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012617:	83 ec 0c             	sub    esp,0xc
c001261a:	50                   	push   eax
c001261b:	e8 c8 19 00 00       	call   c0013fe8 <Device::getName()>
c0012620:	83 c4 10             	add    esp,0x10
c0012623:	83 ec 08             	sub    esp,0x8
c0012626:	68 77 94 02 c0       	push   0xc0029477
c001262b:	50                   	push   eax
c001262c:	e8 83 e1 fe ff       	call   c00007b4 <strcmp>
c0012631:	83 c4 10             	add    esp,0x10
c0012634:	85 c0                	test   eax,eax
c0012636:	0f 94 c0             	sete   al
c0012639:	84 c0                	test   al,al
c001263b:	74 70                	je     c00126ad <VAS::VAS(bool)+0x255>
c001263d:	e8 13 aa 00 00       	call   c001d055 <disableIRQs()>
c0012642:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0012647:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001264d:	05 7c 09 00 00       	add    eax,0x97c
c0012652:	83 ec 0c             	sub    esp,0xc
c0012655:	50                   	push   eax
c0012656:	e8 45 ca ff ff       	call   c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012663:	89 c3                	mov    ebx,eax
c0012665:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001266a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012670:	05 7c 09 00 00       	add    eax,0x97c
c0012675:	83 ec 0c             	sub    esp,0xc
c0012678:	50                   	push   eax
c0012679:	e8 22 ca ff ff       	call   c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001267e:	83 c4 10             	add    esp,0x10
c0012681:	83 ec 08             	sub    esp,0x8
c0012684:	50                   	push   eax
c0012685:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012689:	e8 9c f5 ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c001268e:	83 c4 10             	add    esp,0x10
c0012691:	8b 00                	mov    eax,DWORD PTR [eax]
c0012693:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012698:	6a 11                	push   0x11
c001269a:	53                   	push   ebx
c001269b:	50                   	push   eax
c001269c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126a0:	e8 0b f9 ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a5:	83 c4 10             	add    esp,0x10
c00126a8:	e8 b6 a9 00 00       	call   c001d063 <enableIRQs()>
c00126ad:	90                   	nop
c00126ae:	83 c4 28             	add    esp,0x28
c00126b1:	5b                   	pop    ebx
c00126b2:	c3                   	ret    

c00126b3 <mapVASFirstTime>:
c00126b3:	55                   	push   ebp
c00126b4:	57                   	push   edi
c00126b5:	56                   	push   esi
c00126b6:	53                   	push   ebx
c00126b7:	83 ec 0c             	sub    esp,0xc
c00126ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126bf:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126c2:	4a                   	dec    edx
c00126c3:	0f 84 8e 00 00 00    	je     c0012757 <mapVASFirstTime+0xa4>
c00126c9:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126cc:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126cf:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126d4:	c1 e5 15             	shl    ebp,0x15
c00126d7:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126dc:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00126e2:	29 eb                	sub    ebx,ebp
c00126e4:	29 ee                	sub    esi,ebp
c00126e6:	e8 b8 d5 ff ff       	call   c000fca3 <Phys::allocatePage()>
c00126eb:	83 ec 0c             	sub    esp,0xc
c00126ee:	68 03 04 00 00       	push   0x403
c00126f3:	6a 01                	push   0x1
c00126f5:	53                   	push   ebx
c00126f6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00126fc:	50                   	push   eax
c00126fd:	57                   	push   edi
c00126fe:	e8 a1 fb ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012703:	83 c4 20             	add    esp,0x20
c0012706:	39 f3                	cmp    ebx,esi
c0012708:	75 dc                	jne    c00126e6 <mapVASFirstTime+0x33>
c001270a:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001270f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012714:	29 ee                	sub    esi,ebp
c0012716:	29 e8                	sub    eax,ebp
c0012718:	89 c5                	mov    ebp,eax
c001271a:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001271e:	19 db                	sbb    ebx,ebx
c0012720:	e8 7e d5 ff ff       	call   c000fca3 <Phys::allocatePage()>
c0012725:	83 e3 04             	and    ebx,0x4
c0012728:	83 ec 0c             	sub    esp,0xc
c001272b:	81 c3 03 04 00 00    	add    ebx,0x403
c0012731:	53                   	push   ebx
c0012732:	6a 01                	push   0x1
c0012734:	56                   	push   esi
c0012735:	81 ee 00 10 00 00    	sub    esi,0x1000
c001273b:	50                   	push   eax
c001273c:	57                   	push   edi
c001273d:	e8 62 fb ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012742:	83 c4 20             	add    esp,0x20
c0012745:	39 f5                	cmp    ebp,esi
c0012747:	75 d1                	jne    c001271a <mapVASFirstTime+0x67>
c0012749:	0f 20 d8             	mov    eax,cr3
c001274c:	0f 22 d8             	mov    cr3,eax
c001274f:	83 c4 0c             	add    esp,0xc
c0012752:	5b                   	pop    ebx
c0012753:	5e                   	pop    esi
c0012754:	5f                   	pop    edi
c0012755:	5d                   	pop    ebp
c0012756:	c3                   	ret    
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	68 85 94 02 c0       	push   0xc0029485
c001275f:	e8 71 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0012764:	83 c4 10             	add    esp,0x10
c0012767:	83 c4 0c             	add    esp,0xc
c001276a:	5b                   	pop    ebx
c001276b:	5e                   	pop    esi
c001276c:	5f                   	pop    edi
c001276d:	5d                   	pop    ebp
c001276e:	c3                   	ret    

c001276f <__cxa_atexit>:
c001276f:	31 c0                	xor    eax,eax
c0012771:	c3                   	ret    

c0012772 <__cxa_finalize>:
c0012772:	c3                   	ret    

c0012773 <__stack_chk_fail>:
c0012773:	55                   	push   ebp
c0012774:	89 e5                	mov    ebp,esp
c0012776:	83 ec 14             	sub    esp,0x14
c0012779:	68 9e 94 02 c0       	push   0xc002949e
c001277e:	e8 52 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0012783:	58                   	pop    eax
c0012784:	5a                   	pop    edx
c0012785:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012788:	68 ee 94 02 c0       	push   0xc00294ee
c001278d:	e8 43 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0012792:	59                   	pop    ecx
c0012793:	58                   	pop    eax
c0012794:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012797:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001279a:	68 ee 94 02 c0       	push   0xc00294ee
c001279f:	e8 31 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00127a4:	5a                   	pop    edx
c00127a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127a8:	59                   	pop    ecx
c00127a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00127ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127ae:	68 ee 94 02 c0       	push   0xc00294ee
c00127b3:	e8 1d 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00127b8:	5a                   	pop    edx
c00127b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127bc:	59                   	pop    ecx
c00127bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00127bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127c4:	68 ee 94 02 c0       	push   0xc00294ee
c00127c9:	e8 07 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00127ce:	c7 04 24 f6 94 02 c0 	mov    DWORD PTR [esp],0xc00294f6
c00127d5:	e8 e9 72 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c00127da:	83 c4 10             	add    esp,0x10
c00127dd:	c9                   	leave  
c00127de:	c3                   	ret    

c00127df <__cxa_pure_virtual>:
c00127df:	83 ec 18             	sub    esp,0x18
c00127e2:	68 0e 95 02 c0       	push   0xc002950e
c00127e7:	e8 d7 72 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c00127ec:	83 c4 1c             	add    esp,0x1c
c00127ef:	c3                   	ret    

c00127f0 <operator new[](unsigned long)>:
c00127f0:	e9 2f ce ff ff       	jmp    c000f624 <malloc>

c00127f5 <operator delete(void*, unsigned long)>:
c00127f5:	e9 4a ce ff ff       	jmp    c000f644 <rfree>

c00127fa <operator delete[](void*)>:
c00127fa:	e9 45 ce ff ff       	jmp    c000f644 <rfree>

c00127ff <operator delete[](void*, unsigned long)>:
c00127ff:	e9 40 ce ff ff       	jmp    c000f644 <rfree>

c0012804 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012804:	57                   	push   edi
c0012805:	b9 3f 00 00 00       	mov    ecx,0x3f
c001280a:	56                   	push   esi
c001280b:	be 24 95 02 c0       	mov    esi,0xc0029524
c0012810:	53                   	push   ebx
c0012811:	83 ec 40             	sub    esp,0x40
c0012814:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012818:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001281c:	fc                   	cld    
c001281d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001281f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012823:	83 f9 3e             	cmp    ecx,0x3e
c0012826:	7e 05                	jle    c001282d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012828:	b9 3e 00 00 00       	mov    ecx,0x3e
c001282d:	89 df                	mov    edi,ebx
c001282f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012833:	eb 02                	jmp    c0012837 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012835:	89 c7                	mov    edi,eax
c0012837:	31 d2                	xor    edx,edx
c0012839:	46                   	inc    esi
c001283a:	89 f8                	mov    eax,edi
c001283c:	f7 f1                	div    ecx
c001283e:	39 cf                	cmp    edi,ecx
c0012840:	73 f3                	jae    c0012835 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012842:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012845:	eb 02                	jmp    c0012849 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012847:	89 c3                	mov    ebx,eax
c0012849:	31 d2                	xor    edx,edx
c001284b:	4e                   	dec    esi
c001284c:	89 d8                	mov    eax,ebx
c001284e:	f7 f1                	div    ecx
c0012850:	39 cb                	cmp    ebx,ecx
c0012852:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012856:	88 16                	mov    BYTE PTR [esi],dl
c0012858:	73 ed                	jae    c0012847 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c001285a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001285e:	83 c4 40             	add    esp,0x40
c0012861:	5b                   	pop    ebx
c0012862:	5e                   	pop    esi
c0012863:	5f                   	pop    edi
c0012864:	c3                   	ret    

c0012865 <Dbg::logc(char)>:
c0012865:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012869:	ba fd 03 00 00       	mov    edx,0x3fd
c001286e:	ec                   	in     al,dx
c001286f:	a8 20                	test   al,0x20
c0012871:	74 fb                	je     c001286e <Dbg::logc(char)+0x9>
c0012873:	ba f8 03 00 00       	mov    edx,0x3f8
c0012878:	88 c8                	mov    al,cl
c001287a:	ee                   	out    dx,al
c001287b:	c3                   	ret    

c001287c <Dbg::logs(char*)>:
c001287c:	53                   	push   ebx
c001287d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012881:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012884:	84 c0                	test   al,al
c0012886:	74 0f                	je     c0012897 <Dbg::logs(char*)+0x1b>
c0012888:	50                   	push   eax
c0012889:	43                   	inc    ebx
c001288a:	e8 d6 ff ff ff       	call   c0012865 <Dbg::logc(char)>
c001288f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012892:	5a                   	pop    edx
c0012893:	84 c0                	test   al,al
c0012895:	75 f1                	jne    c0012888 <Dbg::logs(char*)+0xc>
c0012897:	5b                   	pop    ebx
c0012898:	c3                   	ret    

c0012899 <Dbg::logWriteInt(unsigned int)>:
c0012899:	83 ec 10             	sub    esp,0x10
c001289c:	6a 0a                	push   0xa
c001289e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128a2:	50                   	push   eax
c00128a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a7:	e8 58 ff ff ff       	call   c0012804 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128ac:	50                   	push   eax
c00128ad:	e8 ca ff ff ff       	call   c001287c <Dbg::logs(char*)>
c00128b2:	83 c4 20             	add    esp,0x20
c00128b5:	c3                   	ret    

c00128b6 <Dbg::logWriteIntBase(unsigned int, int)>:
c00128b6:	83 ec 10             	sub    esp,0x10
c00128b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128c1:	50                   	push   eax
c00128c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c6:	e8 39 ff ff ff       	call   c0012804 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128cb:	50                   	push   eax
c00128cc:	e8 ab ff ff ff       	call   c001287c <Dbg::logs(char*)>
c00128d1:	83 c4 20             	add    esp,0x20
c00128d4:	c3                   	ret    

c00128d5 <Dbg::kprintf(char const*, ...)>:
c00128d5:	55                   	push   ebp
c00128d6:	57                   	push   edi
c00128d7:	56                   	push   esi
c00128d8:	53                   	push   ebx
c00128d9:	83 ec 0c             	sub    esp,0xc
c00128dc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128e0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128e8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128eb:	84 c0                	test   al,al
c00128ed:	74 4a                	je     c0012939 <Dbg::kprintf(char const*, ...)+0x64>
c00128ef:	31 db                	xor    ebx,ebx
c00128f1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128f4:	3c 25                	cmp    al,0x25
c00128f6:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128f9:	0f 85 e4 00 00 00    	jne    c00129e3 <Dbg::kprintf(char const*, ...)+0x10e>
c00128ff:	83 c3 02             	add    ebx,0x2
c0012902:	8a 07                	mov    al,BYTE PTR [edi]
c0012904:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012907:	83 e8 25             	sub    eax,0x25
c001290a:	3c 53                	cmp    al,0x53
c001290c:	0f 87 ba 00 00 00    	ja     c00129cc <Dbg::kprintf(char const*, ...)+0xf7>
c0012912:	0f b6 c0             	movzx  eax,al
c0012915:	ff 24 85 64 95 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6a9c]
c001291c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012920:	89 c8                	mov    eax,ecx
c0012922:	83 c1 04             	add    ecx,0x4
c0012925:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012929:	ff 30                	push   DWORD PTR [eax]
c001292b:	e8 4c ff ff ff       	call   c001287c <Dbg::logs(char*)>
c0012930:	58                   	pop    eax
c0012931:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012935:	84 c0                	test   al,al
c0012937:	75 b8                	jne    c00128f1 <Dbg::kprintf(char const*, ...)+0x1c>
c0012939:	83 c4 0c             	add    esp,0xc
c001293c:	5b                   	pop    ebx
c001293d:	5e                   	pop    esi
c001293e:	5f                   	pop    edi
c001293f:	5d                   	pop    ebp
c0012940:	c3                   	ret    
c0012941:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012945:	89 d0                	mov    eax,edx
c0012947:	83 c2 04             	add    edx,0x4
c001294a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001294e:	ff 30                	push   DWORD PTR [eax]
c0012950:	e8 44 ff ff ff       	call   c0012899 <Dbg::logWriteInt(unsigned int)>
c0012955:	58                   	pop    eax
c0012956:	eb d9                	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c0012958:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001295c:	89 d0                	mov    eax,edx
c001295e:	83 c2 04             	add    edx,0x4
c0012961:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012964:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012968:	50                   	push   eax
c0012969:	e8 f7 fe ff ff       	call   c0012865 <Dbg::logc(char)>
c001296e:	58                   	pop    eax
c001296f:	eb c0                	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c0012971:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012975:	89 c8                	mov    eax,ecx
c0012977:	83 c1 04             	add    ecx,0x4
c001297a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001297e:	ff 30                	push   DWORD PTR [eax]
c0012980:	e8 14 ff ff ff       	call   c0012899 <Dbg::logWriteInt(unsigned int)>
c0012985:	5f                   	pop    edi
c0012986:	eb a9                	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c0012988:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001298c:	89 c8                	mov    eax,ecx
c001298e:	83 c1 04             	add    ecx,0x4
c0012991:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012995:	6a 10                	push   0x10
c0012997:	ff 30                	push   DWORD PTR [eax]
c0012999:	e8 18 ff ff ff       	call   c00128b6 <Dbg::logWriteIntBase(unsigned int, int)>
c001299e:	59                   	pop    ecx
c001299f:	5f                   	pop    edi
c00129a0:	eb 8f                	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c00129a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129a6:	89 d0                	mov    eax,edx
c00129a8:	83 c2 08             	add    edx,0x8
c00129ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129af:	6a 10                	push   0x10
c00129b1:	ff 30                	push   DWORD PTR [eax]
c00129b3:	e8 fe fe ff ff       	call   c00128b6 <Dbg::logWriteIntBase(unsigned int, int)>
c00129b8:	58                   	pop    eax
c00129b9:	5a                   	pop    edx
c00129ba:	e9 72 ff ff ff       	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c00129bf:	6a 25                	push   0x25
c00129c1:	e8 9f fe ff ff       	call   c0012865 <Dbg::logc(char)>
c00129c6:	58                   	pop    eax
c00129c7:	e9 65 ff ff ff       	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c00129cc:	6a 25                	push   0x25
c00129ce:	e8 92 fe ff ff       	call   c0012865 <Dbg::logc(char)>
c00129d3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129d6:	50                   	push   eax
c00129d7:	e8 89 fe ff ff       	call   c0012865 <Dbg::logc(char)>
c00129dc:	5a                   	pop    edx
c00129dd:	59                   	pop    ecx
c00129de:	e9 4e ff ff ff       	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c00129e3:	50                   	push   eax
c00129e4:	89 eb                	mov    ebx,ebp
c00129e6:	e8 7a fe ff ff       	call   c0012865 <Dbg::logc(char)>
c00129eb:	89 fd                	mov    ebp,edi
c00129ed:	58                   	pop    eax
c00129ee:	e9 3e ff ff ff       	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c00129f3:	90                   	nop

c00129f4 <File::read(unsigned long long, void*, int*)>:
c00129f4:	53                   	push   ebx
c00129f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a04:	3c 19                	cmp    al,0x19
c0012a06:	77 35                	ja     c0012a3d <File::read(unsigned long long, void*, int*)+0x49>
c0012a08:	8b 04 85 a0 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2c60]
c0012a0f:	85 c0                	test   eax,eax
c0012a11:	74 2a                	je     c0012a3d <File::read(unsigned long long, void*, int*)+0x49>
c0012a13:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a19:	85 c0                	test   eax,eax
c0012a1b:	74 20                	je     c0012a3d <File::read(unsigned long long, void*, int*)+0x49>
c0012a1d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a21:	74 21                	je     c0012a44 <File::read(unsigned long long, void*, int*)+0x50>
c0012a23:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a25:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a29:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a37:	5b                   	pop    ebx
c0012a38:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a3b:	ff e0                	jmp    eax
c0012a3d:	b8 0b 00 00 00       	mov    eax,0xb
c0012a42:	eb 05                	jmp    c0012a49 <File::read(unsigned long long, void*, int*)+0x55>
c0012a44:	b8 05 00 00 00       	mov    eax,0x5
c0012a49:	5b                   	pop    ebx
c0012a4a:	c3                   	ret    
c0012a4b:	90                   	nop

c0012a4c <File::write(unsigned long long, void*, int*)>:
c0012a4c:	53                   	push   ebx
c0012a4d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a55:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a5c:	3c 19                	cmp    al,0x19
c0012a5e:	77 35                	ja     c0012a95 <File::write(unsigned long long, void*, int*)+0x49>
c0012a60:	8b 04 85 a0 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2c60]
c0012a67:	85 c0                	test   eax,eax
c0012a69:	74 2a                	je     c0012a95 <File::write(unsigned long long, void*, int*)+0x49>
c0012a6b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a71:	85 c0                	test   eax,eax
c0012a73:	74 20                	je     c0012a95 <File::write(unsigned long long, void*, int*)+0x49>
c0012a75:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a79:	74 21                	je     c0012a9c <File::write(unsigned long long, void*, int*)+0x50>
c0012a7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a7d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a81:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a8f:	5b                   	pop    ebx
c0012a90:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a93:	ff e0                	jmp    eax
c0012a95:	b8 0b 00 00 00       	mov    eax,0xb
c0012a9a:	eb 05                	jmp    c0012aa1 <File::write(unsigned long long, void*, int*)+0x55>
c0012a9c:	b8 05 00 00 00       	mov    eax,0x5
c0012aa1:	5b                   	pop    ebx
c0012aa2:	c3                   	ret    
c0012aa3:	90                   	nop

c0012aa4 <Directory::read(unsigned long long, void*, int*)>:
c0012aa4:	53                   	push   ebx
c0012aa5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012aa9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012aad:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ab4:	3c 19                	cmp    al,0x19
c0012ab6:	77 35                	ja     c0012aed <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ab8:	8b 04 85 a0 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2c60]
c0012abf:	85 c0                	test   eax,eax
c0012ac1:	74 2a                	je     c0012aed <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ac3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ac9:	85 c0                	test   eax,eax
c0012acb:	74 20                	je     c0012aed <Directory::read(unsigned long long, void*, int*)+0x49>
c0012acd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ad1:	74 21                	je     c0012af4 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012ad3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ad5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ad9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012adf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ae3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ae7:	5b                   	pop    ebx
c0012ae8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012aeb:	ff e0                	jmp    eax
c0012aed:	b8 0b 00 00 00       	mov    eax,0xb
c0012af2:	eb 05                	jmp    c0012af9 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012af4:	b8 05 00 00 00       	mov    eax,0x5
c0012af9:	5b                   	pop    ebx
c0012afa:	c3                   	ret    
c0012afb:	90                   	nop

c0012afc <Directory::write(unsigned long long, void*, int*)>:
c0012afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b00:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b07:	b8 0b 00 00 00       	mov    eax,0xb
c0012b0c:	80 fa 19             	cmp    dl,0x19
c0012b0f:	77 18                	ja     c0012b29 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b11:	8b 14 95 a0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c60]
c0012b18:	85 d2                	test   edx,edx
c0012b1a:	74 0d                	je     c0012b29 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b1c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b23:	19 c0                	sbb    eax,eax
c0012b25:	83 e0 0a             	and    eax,0xa
c0012b28:	40                   	inc    eax
c0012b29:	c3                   	ret    

c0012b2a <File::isAtty()>:
c0012b2a:	31 c0                	xor    eax,eax
c0012b2c:	c3                   	ret    
c0012b2d:	90                   	nop

c0012b2e <Directory::isAtty()>:
c0012b2e:	31 c0                	xor    eax,eax
c0012b30:	c3                   	ret    
c0012b31:	90                   	nop

c0012b32 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b32:	b8 0a 00 00 00       	mov    eax,0xa
c0012b37:	c3                   	ret    

c0012b38 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b38:	b8 0a 00 00 00       	mov    eax,0xa
c0012b3d:	c3                   	ret    

c0012b3e <File::~File()>:
c0012b3e:	83 ec 0c             	sub    esp,0xc
c0012b41:	ba 20 97 02 c0       	mov    edx,0xc0029720
c0012b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b4a:	89 10                	mov    DWORD PTR [eax],edx
c0012b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b50:	83 ec 0c             	sub    esp,0xc
c0012b53:	50                   	push   eax
c0012b54:	e8 2b eb ff ff       	call   c0011684 <UnixFile::~UnixFile()>
c0012b59:	83 c4 10             	add    esp,0x10
c0012b5c:	90                   	nop
c0012b5d:	83 c4 0c             	add    esp,0xc
c0012b60:	c3                   	ret    
c0012b61:	90                   	nop

c0012b62 <File::~File()>:
c0012b62:	83 ec 0c             	sub    esp,0xc
c0012b65:	83 ec 0c             	sub    esp,0xc
c0012b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b6c:	e8 cd ff ff ff       	call   c0012b3e <File::~File()>
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	83 ec 08             	sub    esp,0x8
c0012b77:	68 14 01 00 00       	push   0x114
c0012b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b80:	e8 70 fc ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0012b85:	83 c4 10             	add    esp,0x10
c0012b88:	83 c4 0c             	add    esp,0xc
c0012b8b:	c3                   	ret    

c0012b8c <Directory::~Directory()>:
c0012b8c:	83 ec 0c             	sub    esp,0xc
c0012b8f:	ba 3c 97 02 c0       	mov    edx,0xc002973c
c0012b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b98:	89 10                	mov    DWORD PTR [eax],edx
c0012b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9e:	83 ec 0c             	sub    esp,0xc
c0012ba1:	50                   	push   eax
c0012ba2:	e8 dd ea ff ff       	call   c0011684 <UnixFile::~UnixFile()>
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	90                   	nop
c0012bab:	83 c4 0c             	add    esp,0xc
c0012bae:	c3                   	ret    
c0012baf:	90                   	nop

c0012bb0 <Directory::~Directory()>:
c0012bb0:	83 ec 0c             	sub    esp,0xc
c0012bb3:	83 ec 0c             	sub    esp,0xc
c0012bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bba:	e8 cd ff ff ff       	call   c0012b8c <Directory::~Directory()>
c0012bbf:	83 c4 10             	add    esp,0x10
c0012bc2:	83 ec 08             	sub    esp,0x8
c0012bc5:	68 14 01 00 00       	push   0x114
c0012bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bce:	e8 22 fc ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0012bd3:	83 c4 10             	add    esp,0x10
c0012bd6:	83 c4 0c             	add    esp,0xc
c0012bd9:	c3                   	ret    

c0012bda <Filesystem::Filesystem()>:
c0012bda:	ba bc 96 02 c0       	mov    edx,0xc00296bc
c0012bdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be3:	89 10                	mov    DWORD PTR [eax],edx
c0012be5:	8b 15 08 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf08
c0012beb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf6:	a3 08 cf 02 c0       	mov    ds:0xc002cf08,eax
c0012bfb:	90                   	nop
c0012bfc:	c3                   	ret    
c0012bfd:	90                   	nop

c0012bfe <Filesystem::~Filesystem()>:
c0012bfe:	ba bc 96 02 c0       	mov    edx,0xc00296bc
c0012c03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c07:	89 10                	mov    DWORD PTR [eax],edx
c0012c09:	90                   	nop
c0012c0a:	c3                   	ret    
c0012c0b:	90                   	nop

c0012c0c <Filesystem::~Filesystem()>:
c0012c0c:	83 ec 0c             	sub    esp,0xc
c0012c0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c13:	e8 e6 ff ff ff       	call   c0012bfe <Filesystem::~Filesystem()>
c0012c18:	83 c4 04             	add    esp,0x4
c0012c1b:	83 ec 08             	sub    esp,0x8
c0012c1e:	6a 08                	push   0x8
c0012c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c24:	e8 cc fb ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0012c29:	83 c4 10             	add    esp,0x10
c0012c2c:	83 c4 0c             	add    esp,0xc
c0012c2f:	c3                   	ret    

c0012c30 <Fs::getcwd(Process*, char*, int)>:
c0012c30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c34:	31 c0                	xor    eax,eax
c0012c36:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c39:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c3d:	7d 15                	jge    c0012c54 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c43:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c4a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c4d:	84 c9                	test   cl,cl
c0012c4f:	74 06                	je     c0012c57 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c51:	40                   	inc    eax
c0012c52:	eb e2                	jmp    c0012c36 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c54:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c57:	31 c0                	xor    eax,eax
c0012c59:	c3                   	ret    

c0012c5a <Fs::initVFS()>:
c0012c5a:	83 ec 18             	sub    esp,0x18
c0012c5d:	6a 08                	push   0x8
c0012c5f:	e8 c0 c9 ff ff       	call   c000f624 <malloc>
c0012c64:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c67:	e8 7a d5 00 00       	call   c00201e6 <FAT::FAT()>
c0012c6c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c73:	e8 ac c9 ff ff       	call   c000f624 <malloc>
c0012c78:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c7b:	e8 be e7 00 00       	call   c002143e <ISO9660::ISO9660()>
c0012c80:	83 c4 1c             	add    esp,0x1c
c0012c83:	c3                   	ret    

c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c84:	55                   	push   ebp
c0012c85:	57                   	push   edi
c0012c86:	56                   	push   esi
c0012c87:	53                   	push   ebx
c0012c88:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c8e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c95:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c9c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ca3:	68 00 04 00 00       	push   0x400
c0012ca8:	6a 00                	push   0x0
c0012caa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cae:	56                   	push   esi
c0012caf:	e8 10 da fe ff       	call   c00006c4 <memset>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cbb:	75 0b                	jne    c0012cc8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cbd:	50                   	push   eax
c0012cbe:	50                   	push   eax
c0012cbf:	57                   	push   edi
c0012cc0:	56                   	push   esi
c0012cc1:	e8 9d da fe ff       	call   c0000763 <strcpy>
c0012cc6:	eb 41                	jmp    c0012d09 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012cc8:	8a 07                	mov    al,BYTE PTR [edi]
c0012cca:	3c 5c                	cmp    al,0x5c
c0012ccc:	74 04                	je     c0012cd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cce:	3c 2f                	cmp    al,0x2f
c0012cd0:	75 18                	jne    c0012cea <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cd2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cd5:	3c 60                	cmp    al,0x60
c0012cd7:	7e 03                	jle    c0012cdc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cd9:	83 e8 20             	sub    eax,0x20
c0012cdc:	88 04 24             	mov    BYTE PTR [esp],al
c0012cdf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ce6:	50                   	push   eax
c0012ce7:	50                   	push   eax
c0012ce8:	eb 18                	jmp    c0012d02 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012cea:	50                   	push   eax
c0012ceb:	50                   	push   eax
c0012cec:	55                   	push   ebp
c0012ced:	56                   	push   esi
c0012cee:	e8 70 da fe ff       	call   c0000763 <strcpy>
c0012cf3:	5a                   	pop    edx
c0012cf4:	59                   	pop    ecx
c0012cf5:	68 bc ab 02 c0       	push   0xc002abbc
c0012cfa:	56                   	push   esi
c0012cfb:	e8 1a db fe ff       	call   c000081a <strcat>
c0012d00:	5d                   	pop    ebp
c0012d01:	58                   	pop    eax
c0012d02:	57                   	push   edi
c0012d03:	56                   	push   esi
c0012d04:	e8 11 db fe ff       	call   c000081a <strcat>
c0012d09:	83 c4 10             	add    esp,0x10
c0012d0c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d0f:	3c 60                	cmp    al,0x60
c0012d11:	7e 03                	jle    c0012d16 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d13:	83 e8 20             	sub    eax,0x20
c0012d16:	88 04 24             	mov    BYTE PTR [esp],al
c0012d19:	88 03                	mov    BYTE PTR [ebx],al
c0012d1b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d22:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d28:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d2c:	bf 03 00 00 00       	mov    edi,0x3
c0012d31:	b8 03 00 00 00       	mov    eax,0x3
c0012d36:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d39:	84 d2                	test   dl,dl
c0012d3b:	0f 84 91 00 00 00    	je     c0012dd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d41:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d44:	80 fa 5c             	cmp    dl,0x5c
c0012d47:	74 05                	je     c0012d4e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d49:	80 fa 2f             	cmp    dl,0x2f
c0012d4c:	75 12                	jne    c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d4e:	89 c5                	mov    ebp,eax
c0012d50:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d55:	74 09                	je     c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d57:	40                   	inc    eax
c0012d58:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d5c:	89 cf                	mov    edi,ecx
c0012d5e:	eb d6                	jmp    c0012d36 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d60:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d65:	75 5b                	jne    c0012dc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d67:	80 fa 2e             	cmp    dl,0x2e
c0012d6a:	75 56                	jne    c0012dc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d6c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d70:	74 19                	je     c0012d8b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d72:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d77:	74 53                	je     c0012dcc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d79:	89 f9                	mov    ecx,edi
c0012d7b:	41                   	inc    ecx
c0012d7c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d7f:	80 fa 2f             	cmp    dl,0x2f
c0012d82:	74 f7                	je     c0012d7b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d84:	80 fa 5c             	cmp    dl,0x5c
c0012d87:	74 f2                	je     c0012d7b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d89:	eb d1                	jmp    c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d8b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d90:	74 3a                	je     c0012dcc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d92:	83 f8 03             	cmp    eax,0x3
c0012d95:	74 c5                	je     c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d97:	41                   	inc    ecx
c0012d98:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d9b:	80 fa 2f             	cmp    dl,0x2f
c0012d9e:	74 f7                	je     c0012d97 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012da0:	80 fa 5c             	cmp    dl,0x5c
c0012da3:	74 f2                	je     c0012d97 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012da5:	48                   	dec    eax
c0012da6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012daa:	75 06                	jne    c0012db2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012db0:	eb f3                	jmp    c0012da5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012db2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012db6:	74 07                	je     c0012dbf <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012db8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dbc:	48                   	dec    eax
c0012dbd:	eb f3                	jmp    c0012db2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dbf:	40                   	inc    eax
c0012dc0:	eb 9a                	jmp    c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc2:	80 fa 2f             	cmp    dl,0x2f
c0012dc5:	74 95                	je     c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc7:	80 fa 5c             	cmp    dl,0x5c
c0012dca:	74 90                	je     c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dcc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012dcf:	40                   	inc    eax
c0012dd0:	eb 8a                	jmp    c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dd6:	83 ec 0c             	sub    esp,0xc
c0012dd9:	53                   	push   ebx
c0012dda:	e8 02 d9 fe ff       	call   c00006e1 <strlen>
c0012ddf:	83 c4 10             	add    esp,0x10
c0012de2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012de7:	75 26                	jne    c0012e0f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012de9:	83 ec 0c             	sub    esp,0xc
c0012dec:	53                   	push   ebx
c0012ded:	e8 ef d8 fe ff       	call   c00006e1 <strlen>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012dfa:	74 26                	je     c0012e22 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012dfc:	83 ec 0c             	sub    esp,0xc
c0012dff:	53                   	push   ebx
c0012e00:	e8 dc d8 fe ff       	call   c00006e1 <strlen>
c0012e05:	83 c4 10             	add    esp,0x10
c0012e08:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e0d:	eb c7                	jmp    c0012dd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e0f:	83 ec 0c             	sub    esp,0xc
c0012e12:	53                   	push   ebx
c0012e13:	e8 c9 d8 fe ff       	call   c00006e1 <strlen>
c0012e18:	83 c4 10             	add    esp,0x10
c0012e1b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e20:	74 c7                	je     c0012de9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e22:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e28:	5b                   	pop    ebx
c0012e29:	5e                   	pop    esi
c0012e2a:	5f                   	pop    edi
c0012e2b:	5d                   	pop    ebp
c0012e2c:	c3                   	ret    
c0012e2d:	90                   	nop

c0012e2e <File::File(char const*, Process*)>:
c0012e2e:	83 ec 0c             	sub    esp,0xc
c0012e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e35:	83 ec 08             	sub    esp,0x8
c0012e38:	6a 00                	push   0x0
c0012e3a:	50                   	push   eax
c0012e3b:	e8 62 e6 ff ff       	call   c00114a2 <UnixFile::UnixFile(int)>
c0012e40:	83 c4 10             	add    esp,0x10
c0012e43:	ba 20 97 02 c0       	mov    edx,0xc0029720
c0012e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e4c:	89 10                	mov    DWORD PTR [eax],edx
c0012e4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e52:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e5c:	83 c0 0d             	add    eax,0xd
c0012e5f:	83 ec 04             	sub    esp,0x4
c0012e62:	52                   	push   edx
c0012e63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e67:	50                   	push   eax
c0012e68:	e8 17 fe ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e6d:	83 c4 10             	add    esp,0x10
c0012e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e74:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e77:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e88:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e8c:	90                   	nop
c0012e8d:	83 c4 0c             	add    esp,0xc
c0012e90:	c3                   	ret    
c0012e91:	90                   	nop

c0012e92 <File::open(FileOpenMode)>:
c0012e92:	53                   	push   ebx
c0012e93:	b8 0b 00 00 00       	mov    eax,0xb
c0012e98:	83 ec 08             	sub    esp,0x8
c0012e9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e9f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ea6:	80 fa 19             	cmp    dl,0x19
c0012ea9:	77 40                	ja     c0012eeb <File::open(FileOpenMode)+0x59>
c0012eab:	8b 14 95 a0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c60]
c0012eb2:	85 d2                	test   edx,edx
c0012eb4:	74 35                	je     c0012eeb <File::open(FileOpenMode)+0x59>
c0012eb6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ebc:	85 d2                	test   edx,edx
c0012ebe:	74 2b                	je     c0012eeb <File::open(FileOpenMode)+0x59>
c0012ec0:	b8 06 00 00 00       	mov    eax,0x6
c0012ec5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ec9:	75 20                	jne    c0012eeb <File::open(FileOpenMode)+0x59>
c0012ecb:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ecd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ed3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ed7:	51                   	push   ecx
c0012ed8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012edb:	51                   	push   ecx
c0012edc:	52                   	push   edx
c0012edd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ee0:	83 c4 10             	add    esp,0x10
c0012ee3:	85 c0                	test   eax,eax
c0012ee5:	75 04                	jne    c0012eeb <File::open(FileOpenMode)+0x59>
c0012ee7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012eeb:	83 c4 08             	add    esp,0x8
c0012eee:	5b                   	pop    ebx
c0012eef:	c3                   	ret    

c0012ef0 <File::close()>:
c0012ef0:	53                   	push   ebx
c0012ef1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ef6:	83 ec 08             	sub    esp,0x8
c0012ef9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012efd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f04:	80 fa 19             	cmp    dl,0x19
c0012f07:	77 41                	ja     c0012f4a <File::close()+0x5a>
c0012f09:	8b 1c 95 a0 d3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2c60]
c0012f10:	85 db                	test   ebx,ebx
c0012f12:	74 36                	je     c0012f4a <File::close()+0x5a>
c0012f14:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f1b:	74 2d                	je     c0012f4a <File::close()+0x5a>
c0012f1d:	b8 05 00 00 00       	mov    eax,0x5
c0012f22:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f26:	74 22                	je     c0012f4a <File::close()+0x5a>
c0012f28:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f2c:	8b 04 95 a0 d3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2c60]
c0012f33:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f39:	53                   	push   ebx
c0012f3a:	53                   	push   ebx
c0012f3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f3d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f43:	50                   	push   eax
c0012f44:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	83 c4 08             	add    esp,0x8
c0012f4d:	5b                   	pop    ebx
c0012f4e:	c3                   	ret    
c0012f4f:	90                   	nop

c0012f50 <File::seek(unsigned long long)>:
c0012f50:	56                   	push   esi
c0012f51:	53                   	push   ebx
c0012f52:	b8 0b 00 00 00       	mov    eax,0xb
c0012f57:	51                   	push   ecx
c0012f58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f60:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f6b:	80 fa 19             	cmp    dl,0x19
c0012f6e:	77 31                	ja     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f70:	8b 14 95 a0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c60]
c0012f77:	85 d2                	test   edx,edx
c0012f79:	74 26                	je     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f7b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f81:	85 d2                	test   edx,edx
c0012f83:	74 1c                	je     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f85:	b8 05 00 00 00       	mov    eax,0x5
c0012f8a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f8e:	74 11                	je     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f90:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f92:	53                   	push   ebx
c0012f93:	51                   	push   ecx
c0012f94:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f9a:	52                   	push   edx
c0012f9b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f9e:	83 c4 10             	add    esp,0x10
c0012fa1:	5a                   	pop    edx
c0012fa2:	5b                   	pop    ebx
c0012fa3:	5e                   	pop    esi
c0012fa4:	c3                   	ret    
c0012fa5:	90                   	nop

c0012fa6 <File::tell(unsigned long long*)>:
c0012fa6:	83 ec 0c             	sub    esp,0xc
c0012fa9:	b8 0b 00 00 00       	mov    eax,0xb
c0012fae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fb2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fb9:	80 fa 19             	cmp    dl,0x19
c0012fbc:	77 34                	ja     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fbe:	8b 14 95 a0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c60]
c0012fc5:	85 d2                	test   edx,edx
c0012fc7:	74 29                	je     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fc9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fcf:	85 d2                	test   edx,edx
c0012fd1:	74 1f                	je     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fd3:	b8 05 00 00 00       	mov    eax,0x5
c0012fd8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012fdc:	74 14                	je     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fde:	50                   	push   eax
c0012fdf:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fe1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fe5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012feb:	52                   	push   edx
c0012fec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	83 c4 0c             	add    esp,0xc
c0012ff5:	c3                   	ret    

c0012ff6 <File::rewind()>:
c0012ff6:	83 ec 10             	sub    esp,0x10
c0012ff9:	6a 00                	push   0x0
c0012ffb:	6a 00                	push   0x0
c0012ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013001:	e8 4a ff ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c0013006:	83 c4 1c             	add    esp,0x1c
c0013009:	c3                   	ret    

c001300a <File::unlink()>:
c001300a:	83 ec 0c             	sub    esp,0xc
c001300d:	b8 0b 00 00 00       	mov    eax,0xb
c0013012:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013016:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001301d:	80 f9 19             	cmp    cl,0x19
c0013020:	77 2f                	ja     c0013051 <File::unlink()+0x47>
c0013022:	8b 0c 8d a0 d3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2c60]
c0013029:	85 c9                	test   ecx,ecx
c001302b:	74 24                	je     c0013051 <File::unlink()+0x47>
c001302d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013033:	85 c9                	test   ecx,ecx
c0013035:	74 1a                	je     c0013051 <File::unlink()+0x47>
c0013037:	b8 06 00 00 00       	mov    eax,0x6
c001303c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013040:	75 0f                	jne    c0013051 <File::unlink()+0x47>
c0013042:	83 c2 0d             	add    edx,0xd
c0013045:	50                   	push   eax
c0013046:	50                   	push   eax
c0013047:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013049:	52                   	push   edx
c001304a:	51                   	push   ecx
c001304b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001304e:	83 c4 10             	add    esp,0x10
c0013051:	83 c4 0c             	add    esp,0xc
c0013054:	c3                   	ret    
c0013055:	90                   	nop

c0013056 <File::rename(char const*)>:
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	b8 0b 00 00 00       	mov    eax,0xb
c001305e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013062:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013069:	80 f9 19             	cmp    cl,0x19
c001306c:	77 32                	ja     c00130a0 <File::rename(char const*)+0x4a>
c001306e:	8b 0c 8d a0 d3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2c60]
c0013075:	85 c9                	test   ecx,ecx
c0013077:	74 27                	je     c00130a0 <File::rename(char const*)+0x4a>
c0013079:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001307f:	85 c9                	test   ecx,ecx
c0013081:	74 1d                	je     c00130a0 <File::rename(char const*)+0x4a>
c0013083:	b8 06 00 00 00       	mov    eax,0x6
c0013088:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001308c:	75 12                	jne    c00130a0 <File::rename(char const*)+0x4a>
c001308e:	83 c2 0d             	add    edx,0xd
c0013091:	50                   	push   eax
c0013092:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013094:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013098:	52                   	push   edx
c0013099:	51                   	push   ecx
c001309a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001309d:	83 c4 10             	add    esp,0x10
c00130a0:	83 c4 0c             	add    esp,0xc
c00130a3:	c3                   	ret    

c00130a4 <File::chfatattr(unsigned char, unsigned char)>:
c00130a4:	57                   	push   edi
c00130a5:	b8 0b 00 00 00       	mov    eax,0xb
c00130aa:	56                   	push   esi
c00130ab:	53                   	push   ebx
c00130ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130bf:	80 f9 19             	cmp    cl,0x19
c00130c2:	77 37                	ja     c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130c4:	8b 0c 8d a0 d3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2c60]
c00130cb:	85 c9                	test   ecx,ecx
c00130cd:	74 2c                	je     c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130d5:	85 c9                	test   ecx,ecx
c00130d7:	74 22                	je     c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130d9:	b8 06 00 00 00       	mov    eax,0x6
c00130de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130e2:	75 17                	jne    c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00130e6:	89 f0                	mov    eax,esi
c00130e8:	83 c2 0d             	add    edx,0xd
c00130eb:	0f b6 f0             	movzx  esi,al
c00130ee:	0f b6 db             	movzx  ebx,bl
c00130f1:	56                   	push   esi
c00130f2:	53                   	push   ebx
c00130f3:	52                   	push   edx
c00130f4:	51                   	push   ecx
c00130f5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130f8:	83 c4 10             	add    esp,0x10
c00130fb:	5b                   	pop    ebx
c00130fc:	5e                   	pop    esi
c00130fd:	5f                   	pop    edi
c00130fe:	c3                   	ret    
c00130ff:	90                   	nop

c0013100 <File::exists()>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	31 c0                	xor    eax,eax
c0013105:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013109:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013110:	80 f9 19             	cmp    cl,0x19
c0013113:	77 24                	ja     c0013139 <File::exists()+0x39>
c0013115:	8b 0c 8d a0 d3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2c60]
c001311c:	85 c9                	test   ecx,ecx
c001311e:	74 19                	je     c0013139 <File::exists()+0x39>
c0013120:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013126:	85 c9                	test   ecx,ecx
c0013128:	74 0f                	je     c0013139 <File::exists()+0x39>
c001312a:	83 c2 0d             	add    edx,0xd
c001312d:	50                   	push   eax
c001312e:	50                   	push   eax
c001312f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013131:	52                   	push   edx
c0013132:	51                   	push   ecx
c0013133:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013136:	83 c4 10             	add    esp,0x10
c0013139:	83 c4 0c             	add    esp,0xc
c001313c:	c3                   	ret    
c001313d:	90                   	nop

c001313e <File::stat(unsigned long long*, bool*)>:
c001313e:	56                   	push   esi
c001313f:	53                   	push   ebx
c0013140:	50                   	push   eax
c0013141:	b8 0b 00 00 00       	mov    eax,0xb
c0013146:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001314a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001314e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013155:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013159:	80 f9 19             	cmp    cl,0x19
c001315c:	77 3d                	ja     c001319b <File::stat(unsigned long long*, bool*)+0x5d>
c001315e:	8b 0c 8d a0 d3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2c60]
c0013165:	85 c9                	test   ecx,ecx
c0013167:	74 32                	je     c001319b <File::stat(unsigned long long*, bool*)+0x5d>
c0013169:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001316f:	85 c9                	test   ecx,ecx
c0013171:	74 28                	je     c001319b <File::stat(unsigned long long*, bool*)+0x5d>
c0013173:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013175:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013179:	74 13                	je     c001318e <File::stat(unsigned long long*, bool*)+0x50>
c001317b:	83 ec 04             	sub    esp,0x4
c001317e:	56                   	push   esi
c001317f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013185:	51                   	push   ecx
c0013186:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013189:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001318c:	eb 0a                	jmp    c0013198 <File::stat(unsigned long long*, bool*)+0x5a>
c001318e:	53                   	push   ebx
c001318f:	83 c2 0d             	add    edx,0xd
c0013192:	56                   	push   esi
c0013193:	52                   	push   edx
c0013194:	51                   	push   ecx
c0013195:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	5a                   	pop    edx
c001319c:	5b                   	pop    ebx
c001319d:	5e                   	pop    esi
c001319e:	c3                   	ret    

c001319f <Fs::setcwd(Process*, char*)>:
c001319f:	55                   	push   ebp
c00131a0:	57                   	push   edi
c00131a1:	56                   	push   esi
c00131a2:	53                   	push   ebx
c00131a3:	81 ec 20 02 00 00    	sub    esp,0x220
c00131a9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131b0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131b6:	57                   	push   edi
c00131b7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131be:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131c2:	56                   	push   esi
c00131c3:	e8 bc fa ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00131cb:	e8 11 d5 fe ff       	call   c00006e1 <strlen>
c00131d0:	83 c4 10             	add    esp,0x10
c00131d3:	83 f8 02             	cmp    eax,0x2
c00131d6:	77 17                	ja     c00131ef <Fs::setcwd(Process*, char*)+0x50>
c00131d8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131dd:	83 e8 41             	sub    eax,0x41
c00131e0:	83 f8 19             	cmp    eax,0x19
c00131e3:	76 24                	jbe    c0013209 <Fs::setcwd(Process*, char*)+0x6a>
c00131e5:	b8 03 00 00 00       	mov    eax,0x3
c00131ea:	e9 e0 00 00 00       	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c00131ef:	83 ec 0c             	sub    esp,0xc
c00131f2:	56                   	push   esi
c00131f3:	e8 e9 d4 fe ff       	call   c00006e1 <strlen>
c00131f8:	83 c4 10             	add    esp,0x10
c00131fb:	83 f8 03             	cmp    eax,0x3
c00131fe:	75 34                	jne    c0013234 <Fs::setcwd(Process*, char*)+0x95>
c0013200:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013205:	75 2d                	jne    c0013234 <Fs::setcwd(Process*, char*)+0x95>
c0013207:	eb cf                	jmp    c00131d8 <Fs::setcwd(Process*, char*)+0x39>
c0013209:	8b 14 85 a0 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c60]
c0013210:	b8 05 00 00 00       	mov    eax,0x5
c0013215:	85 d2                	test   edx,edx
c0013217:	0f 84 b2 00 00 00    	je     c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001321d:	b8 06 00 00 00       	mov    eax,0x6
c0013222:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013229:	0f 85 92 00 00 00    	jne    c00132c1 <Fs::setcwd(Process*, char*)+0x122>
c001322f:	e9 9b 00 00 00       	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c0013234:	83 ec 0c             	sub    esp,0xc
c0013237:	68 14 01 00 00       	push   0x114
c001323c:	e8 e3 c3 ff ff       	call   c000f624 <malloc>
c0013241:	83 c4 0c             	add    esp,0xc
c0013244:	89 c3                	mov    ebx,eax
c0013246:	55                   	push   ebp
c0013247:	56                   	push   esi
c0013248:	50                   	push   eax
c0013249:	e8 e0 fb ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001324e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013253:	83 c4 0c             	add    esp,0xc
c0013256:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001325a:	50                   	push   eax
c001325b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001325f:	50                   	push   eax
c0013260:	53                   	push   ebx
c0013261:	e8 d8 fe ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c0013266:	83 c4 10             	add    esp,0x10
c0013269:	83 f8 02             	cmp    eax,0x2
c001326c:	74 04                	je     c0013272 <Fs::setcwd(Process*, char*)+0xd3>
c001326e:	85 c0                	test   eax,eax
c0013270:	74 1c                	je     c001328e <Fs::setcwd(Process*, char*)+0xef>
c0013272:	b8 01 00 00 00       	mov    eax,0x1
c0013277:	85 db                	test   ebx,ebx
c0013279:	74 54                	je     c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001327b:	83 ec 0c             	sub    esp,0xc
c001327e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013280:	53                   	push   ebx
c0013281:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	b8 01 00 00 00       	mov    eax,0x1
c001328c:	eb 41                	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001328e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013293:	75 1c                	jne    c00132b1 <Fs::setcwd(Process*, char*)+0x112>
c0013295:	b8 02 00 00 00       	mov    eax,0x2
c001329a:	85 db                	test   ebx,ebx
c001329c:	74 31                	je     c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001329e:	83 ec 0c             	sub    esp,0xc
c00132a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132a3:	53                   	push   ebx
c00132a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132a7:	83 c4 10             	add    esp,0x10
c00132aa:	b8 02 00 00 00       	mov    eax,0x2
c00132af:	eb 1e                	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c00132b1:	85 db                	test   ebx,ebx
c00132b3:	74 0c                	je     c00132c1 <Fs::setcwd(Process*, char*)+0x122>
c00132b5:	83 ec 0c             	sub    esp,0xc
c00132b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132ba:	53                   	push   ebx
c00132bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	50                   	push   eax
c00132c2:	50                   	push   eax
c00132c3:	56                   	push   esi
c00132c4:	57                   	push   edi
c00132c5:	e8 99 d4 fe ff       	call   c0000763 <strcpy>
c00132ca:	83 c4 10             	add    esp,0x10
c00132cd:	31 c0                	xor    eax,eax
c00132cf:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132d5:	5b                   	pop    ebx
c00132d6:	5e                   	pop    esi
c00132d7:	5f                   	pop    edi
c00132d8:	5d                   	pop    ebp
c00132d9:	c3                   	ret    

c00132da <Directory::Directory(char const*, Process*)>:
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e1:	83 ec 08             	sub    esp,0x8
c00132e4:	6a 00                	push   0x0
c00132e6:	50                   	push   eax
c00132e7:	e8 b6 e1 ff ff       	call   c00114a2 <UnixFile::UnixFile(int)>
c00132ec:	83 c4 10             	add    esp,0x10
c00132ef:	ba 3c 97 02 c0       	mov    edx,0xc002973c
c00132f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f8:	89 10                	mov    DWORD PTR [eax],edx
c00132fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132fe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013308:	83 c0 0d             	add    eax,0xd
c001330b:	83 ec 04             	sub    esp,0x4
c001330e:	52                   	push   edx
c001330f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013313:	50                   	push   eax
c0013314:	e8 6b f9 ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013319:	83 c4 10             	add    esp,0x10
c001331c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013320:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013323:	8d 50 bf             	lea    edx,[eax-0x41]
c0013326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013334:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013338:	90                   	nop
c0013339:	83 c4 0c             	add    esp,0xc
c001333c:	c3                   	ret    
c001333d:	90                   	nop

c001333e <Directory::open()>:
c001333e:	53                   	push   ebx
c001333f:	b8 0b 00 00 00       	mov    eax,0xb
c0013344:	83 ec 08             	sub    esp,0x8
c0013347:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001334b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013352:	80 fa 19             	cmp    dl,0x19
c0013355:	77 3d                	ja     c0013394 <Directory::open()+0x56>
c0013357:	8b 14 95 a0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c60]
c001335e:	85 d2                	test   edx,edx
c0013360:	74 32                	je     c0013394 <Directory::open()+0x56>
c0013362:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013368:	85 d2                	test   edx,edx
c001336a:	74 28                	je     c0013394 <Directory::open()+0x56>
c001336c:	b8 06 00 00 00       	mov    eax,0x6
c0013371:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013375:	75 1d                	jne    c0013394 <Directory::open()+0x56>
c0013377:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001337d:	50                   	push   eax
c001337e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013380:	51                   	push   ecx
c0013381:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013384:	51                   	push   ecx
c0013385:	52                   	push   edx
c0013386:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	85 c0                	test   eax,eax
c001338e:	75 04                	jne    c0013394 <Directory::open()+0x56>
c0013390:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013394:	83 c4 08             	add    esp,0x8
c0013397:	5b                   	pop    ebx
c0013398:	c3                   	ret    
c0013399:	90                   	nop

c001339a <Directory::close()>:
c001339a:	53                   	push   ebx
c001339b:	b8 0b 00 00 00       	mov    eax,0xb
c00133a0:	83 ec 08             	sub    esp,0x8
c00133a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133a7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133ae:	80 fa 19             	cmp    dl,0x19
c00133b1:	77 41                	ja     c00133f4 <Directory::close()+0x5a>
c00133b3:	8b 1c 95 a0 d3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2c60]
c00133ba:	85 db                	test   ebx,ebx
c00133bc:	74 36                	je     c00133f4 <Directory::close()+0x5a>
c00133be:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133c5:	74 2d                	je     c00133f4 <Directory::close()+0x5a>
c00133c7:	b8 05 00 00 00       	mov    eax,0x5
c00133cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133d0:	74 22                	je     c00133f4 <Directory::close()+0x5a>
c00133d2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133d6:	8b 04 95 a0 d3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2c60]
c00133dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133e3:	53                   	push   ebx
c00133e4:	53                   	push   ebx
c00133e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00133e7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133ed:	50                   	push   eax
c00133ee:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00133f1:	83 c4 10             	add    esp,0x10
c00133f4:	83 c4 08             	add    esp,0x8
c00133f7:	5b                   	pop    ebx
c00133f8:	c3                   	ret    
c00133f9:	90                   	nop

c00133fa <Directory::unlink()>:
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013402:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013406:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001340d:	80 f9 19             	cmp    cl,0x19
c0013410:	77 2f                	ja     c0013441 <Directory::unlink()+0x47>
c0013412:	8b 0c 8d a0 d3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2c60]
c0013419:	85 c9                	test   ecx,ecx
c001341b:	74 24                	je     c0013441 <Directory::unlink()+0x47>
c001341d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013423:	85 c9                	test   ecx,ecx
c0013425:	74 1a                	je     c0013441 <Directory::unlink()+0x47>
c0013427:	b8 06 00 00 00       	mov    eax,0x6
c001342c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013430:	75 0f                	jne    c0013441 <Directory::unlink()+0x47>
c0013432:	83 c2 0d             	add    edx,0xd
c0013435:	50                   	push   eax
c0013436:	50                   	push   eax
c0013437:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013439:	52                   	push   edx
c001343a:	51                   	push   ecx
c001343b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001343e:	83 c4 10             	add    esp,0x10
c0013441:	83 c4 0c             	add    esp,0xc
c0013444:	c3                   	ret    
c0013445:	90                   	nop

c0013446 <Directory::rename(char const*)>:
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	b8 0b 00 00 00       	mov    eax,0xb
c001344e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013452:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013459:	80 f9 19             	cmp    cl,0x19
c001345c:	77 32                	ja     c0013490 <Directory::rename(char const*)+0x4a>
c001345e:	8b 0c 8d a0 d3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2c60]
c0013465:	85 c9                	test   ecx,ecx
c0013467:	74 27                	je     c0013490 <Directory::rename(char const*)+0x4a>
c0013469:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001346f:	85 c9                	test   ecx,ecx
c0013471:	74 1d                	je     c0013490 <Directory::rename(char const*)+0x4a>
c0013473:	b8 06 00 00 00       	mov    eax,0x6
c0013478:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001347c:	75 12                	jne    c0013490 <Directory::rename(char const*)+0x4a>
c001347e:	83 c2 0d             	add    edx,0xd
c0013481:	50                   	push   eax
c0013482:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013488:	52                   	push   edx
c0013489:	51                   	push   ecx
c001348a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	83 c4 0c             	add    esp,0xc
c0013493:	c3                   	ret    

c0013494 <Directory::exists()>:
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	31 c0                	xor    eax,eax
c0013499:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001349d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134a4:	80 f9 19             	cmp    cl,0x19
c00134a7:	77 24                	ja     c00134cd <Directory::exists()+0x39>
c00134a9:	8b 0c 8d a0 d3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2c60]
c00134b0:	85 c9                	test   ecx,ecx
c00134b2:	74 19                	je     c00134cd <Directory::exists()+0x39>
c00134b4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134ba:	85 c9                	test   ecx,ecx
c00134bc:	74 0f                	je     c00134cd <Directory::exists()+0x39>
c00134be:	83 c2 0d             	add    edx,0xd
c00134c1:	50                   	push   eax
c00134c2:	50                   	push   eax
c00134c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134c5:	52                   	push   edx
c00134c6:	51                   	push   ecx
c00134c7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134ca:	83 c4 10             	add    esp,0x10
c00134cd:	83 c4 0c             	add    esp,0xc
c00134d0:	c3                   	ret    
c00134d1:	90                   	nop

c00134d2 <Directory::read(dirent*)>:
c00134d2:	83 ec 1c             	sub    esp,0x1c
c00134d5:	b8 0b 00 00 00       	mov    eax,0xb
c00134da:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134de:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134e5:	80 fa 19             	cmp    dl,0x19
c00134e8:	77 30                	ja     c001351a <Directory::read(dirent*)+0x48>
c00134ea:	8b 14 95 a0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c60]
c00134f1:	85 d2                	test   edx,edx
c00134f3:	74 25                	je     c001351a <Directory::read(dirent*)+0x48>
c00134f5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00134fc:	74 1c                	je     c001351a <Directory::read(dirent*)+0x48>
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013503:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013507:	52                   	push   edx
c0013508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001350c:	6a 00                	push   0x0
c001350e:	68 10 01 00 00       	push   0x110
c0013513:	51                   	push   ecx
c0013514:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013517:	83 c4 20             	add    esp,0x20
c001351a:	83 c4 1c             	add    esp,0x1c
c001351d:	c3                   	ret    

c001351e <Directory::create()>:
c001351e:	83 ec 0c             	sub    esp,0xc
c0013521:	b8 0b 00 00 00       	mov    eax,0xb
c0013526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001352a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013531:	80 f9 19             	cmp    cl,0x19
c0013534:	77 2f                	ja     c0013565 <Directory::create()+0x47>
c0013536:	8b 0c 8d a0 d3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2c60]
c001353d:	85 c9                	test   ecx,ecx
c001353f:	74 24                	je     c0013565 <Directory::create()+0x47>
c0013541:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013547:	85 c9                	test   ecx,ecx
c0013549:	74 1a                	je     c0013565 <Directory::create()+0x47>
c001354b:	b8 06 00 00 00       	mov    eax,0x6
c0013550:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013554:	75 0f                	jne    c0013565 <Directory::create()+0x47>
c0013556:	83 c2 0d             	add    edx,0xd
c0013559:	50                   	push   eax
c001355a:	50                   	push   eax
c001355b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001355d:	52                   	push   edx
c001355e:	51                   	push   ecx
c001355f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013562:	83 c4 10             	add    esp,0x10
c0013565:	83 c4 0c             	add    esp,0xc
c0013568:	c3                   	ret    
c0013569:	90                   	nop

c001356a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001356a:	b8 0a 00 00 00       	mov    eax,0xa
c001356f:	c3                   	ret    

c0013570 <Bus::Bus(char const*)>:
c0013570:	83 ec 0c             	sub    esp,0xc
c0013573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013577:	83 ec 08             	sub    esp,0x8
c001357a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001357e:	50                   	push   eax
c001357f:	e8 68 09 00 00       	call   c0013eec <Device::Device(char const*)>
c0013584:	83 c4 10             	add    esp,0x10
c0013587:	ba 58 97 02 c0       	mov    edx,0xc0029758
c001358c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013590:	89 10                	mov    DWORD PTR [eax],edx
c0013592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013596:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135a0:	90                   	nop
c00135a1:	83 c4 0c             	add    esp,0xc
c00135a4:	c3                   	ret    
c00135a5:	90                   	nop

c00135a6 <Bus::~Bus()>:
c00135a6:	83 ec 0c             	sub    esp,0xc
c00135a9:	ba 58 97 02 c0       	mov    edx,0xc0029758
c00135ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b2:	89 10                	mov    DWORD PTR [eax],edx
c00135b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b8:	83 ec 0c             	sub    esp,0xc
c00135bb:	50                   	push   eax
c00135bc:	e8 0d 06 00 00       	call   c0013bce <Device::~Device()>
c00135c1:	83 c4 10             	add    esp,0x10
c00135c4:	90                   	nop
c00135c5:	83 c4 0c             	add    esp,0xc
c00135c8:	c3                   	ret    
c00135c9:	90                   	nop

c00135ca <Bus::~Bus()>:
c00135ca:	83 ec 0c             	sub    esp,0xc
c00135cd:	83 ec 0c             	sub    esp,0xc
c00135d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d4:	e8 cd ff ff ff       	call   c00135a6 <Bus::~Bus()>
c00135d9:	83 c4 10             	add    esp,0x10
c00135dc:	83 ec 08             	sub    esp,0x8
c00135df:	68 58 01 00 00       	push   0x158
c00135e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e8:	e8 08 f2 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00135ed:	83 c4 10             	add    esp,0x10
c00135f0:	83 c4 0c             	add    esp,0xc
c00135f3:	c3                   	ret    

c00135f4 <Buzzer::Buzzer(char const*)>:
c00135f4:	83 ec 0c             	sub    esp,0xc
c00135f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fb:	83 ec 08             	sub    esp,0x8
c00135fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013602:	50                   	push   eax
c0013603:	e8 e4 08 00 00       	call   c0013eec <Device::Device(char const*)>
c0013608:	83 c4 10             	add    esp,0x10
c001360b:	ba 84 97 02 c0       	mov    edx,0xc0029784
c0013610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013614:	89 10                	mov    DWORD PTR [eax],edx
c0013616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013628:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013632:	90                   	nop
c0013633:	83 c4 0c             	add    esp,0xc
c0013636:	c3                   	ret    
c0013637:	90                   	nop

c0013638 <Buzzer::~Buzzer()>:
c0013638:	83 ec 0c             	sub    esp,0xc
c001363b:	ba 84 97 02 c0       	mov    edx,0xc0029784
c0013640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013644:	89 10                	mov    DWORD PTR [eax],edx
c0013646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001364a:	83 ec 0c             	sub    esp,0xc
c001364d:	50                   	push   eax
c001364e:	e8 7b 05 00 00       	call   c0013bce <Device::~Device()>
c0013653:	83 c4 10             	add    esp,0x10
c0013656:	90                   	nop
c0013657:	83 c4 0c             	add    esp,0xc
c001365a:	c3                   	ret    
c001365b:	90                   	nop

c001365c <Buzzer::~Buzzer()>:
c001365c:	83 ec 0c             	sub    esp,0xc
c001365f:	83 ec 0c             	sub    esp,0xc
c0013662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013666:	e8 cd ff ff ff       	call   c0013638 <Buzzer::~Buzzer()>
c001366b:	83 c4 10             	add    esp,0x10
c001366e:	83 ec 08             	sub    esp,0x8
c0013671:	68 5c 01 00 00       	push   0x15c
c0013676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001367a:	e8 76 f1 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c001367f:	83 c4 10             	add    esp,0x10
c0013682:	83 c4 0c             	add    esp,0xc
c0013685:	c3                   	ret    

c0013686 <Buzzer::stop()>:
c0013686:	83 ec 14             	sub    esp,0x14
c0013689:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001368d:	8b 10                	mov    edx,DWORD PTR [eax]
c001368f:	6a 00                	push   0x0
c0013691:	50                   	push   eax
c0013692:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013695:	83 c4 1c             	add    esp,0x1c
c0013698:	c3                   	ret    

c0013699 <beepThread(void*)>:
c0013699:	53                   	push   ebx
c001369a:	83 ec 08             	sub    esp,0x8
c001369d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136a1:	e8 ce 99 00 00       	call   c001d074 <unlockScheduler()>
c00136a6:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136ab:	52                   	push   edx
c00136ac:	52                   	push   edx
c00136ad:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136b3:	52                   	push   edx
c00136b4:	50                   	push   eax
c00136b5:	e8 08 9f 00 00       	call   c001d5c2 <nanoSleep(unsigned long long)>
c00136ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136bd:	e8 c4 ff ff ff       	call   c0013686 <Buzzer::stop()>
c00136c2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136ca:	83 c4 18             	add    esp,0x18
c00136cd:	5b                   	pop    ebx
c00136ce:	e9 35 9e 00 00       	jmp    c001d508 <blockTask(TaskState)>
c00136d3:	90                   	nop

c00136d4 <Buzzer::beep(int, int, bool)>:
c00136d4:	57                   	push   edi
c00136d5:	56                   	push   esi
c00136d6:	53                   	push   ebx
c00136d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136db:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136e3:	52                   	push   edx
c00136e4:	52                   	push   edx
c00136e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00136e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136eb:	56                   	push   esi
c00136ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136ef:	83 c4 10             	add    esp,0x10
c00136f2:	89 f8                	mov    eax,edi
c00136f4:	84 c0                	test   al,al
c00136f6:	74 1f                	je     c0013717 <Buzzer::beep(int, int, bool)+0x43>
c00136f8:	50                   	push   eax
c00136f9:	50                   	push   eax
c00136fa:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013700:	99                   	cdq    
c0013701:	52                   	push   edx
c0013702:	50                   	push   eax
c0013703:	e8 ba 9e 00 00       	call   c001d5c2 <nanoSleep(unsigned long long)>
c0013708:	83 c4 10             	add    esp,0x10
c001370b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001370f:	5b                   	pop    ebx
c0013710:	5e                   	pop    esi
c0013711:	5f                   	pop    edi
c0013712:	e9 6f ff ff ff       	jmp    c0013686 <Buzzer::stop()>
c0013717:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001371d:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0013722:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001372a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001372e:	c7 44 24 14 99 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013699
c0013736:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001373a:	5b                   	pop    ebx
c001373b:	5e                   	pop    esi
c001373c:	5f                   	pop    edi
c001373d:	e9 62 9a 00 00       	jmp    c001d1a4 <Process::createThread(void (*)(void*), void*, int)>

c0013742 <User::loadClockSettings(int)>:
c0013742:	53                   	push   ebx
c0013743:	83 ec 14             	sub    esp,0x14
c0013746:	68 14 01 00 00       	push   0x114
c001374b:	e8 d4 be ff ff       	call   c000f624 <malloc>
c0013750:	83 c4 0c             	add    esp,0xc
c0013753:	89 c3                	mov    ebx,eax
c0013755:	ff 35 d4 e2 02 c0    	push   DWORD PTR ds:0xc002e2d4
c001375b:	68 ac 97 02 c0       	push   0xc00297ac
c0013760:	50                   	push   eax
c0013761:	e8 c8 f6 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c0013766:	58                   	pop    eax
c0013767:	5a                   	pop    edx
c0013768:	6a 01                	push   0x1
c001376a:	53                   	push   ebx
c001376b:	e8 22 f7 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c0013770:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013773:	e8 78 f7 ff ff       	call   c0012ef0 <File::close()>
c0013778:	83 c4 10             	add    esp,0x10
c001377b:	85 db                	test   ebx,ebx
c001377d:	74 0f                	je     c001378e <User::loadClockSettings(int)+0x4c>
c001377f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013781:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013785:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013788:	83 c4 08             	add    esp,0x8
c001378b:	5b                   	pop    ebx
c001378c:	ff e0                	jmp    eax
c001378e:	83 c4 08             	add    esp,0x8
c0013791:	5b                   	pop    ebx
c0013792:	c3                   	ret    
c0013793:	90                   	nop

c0013794 <Clock::Clock(char const*)>:
c0013794:	83 ec 0c             	sub    esp,0xc
c0013797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379b:	83 ec 08             	sub    esp,0x8
c001379e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137a2:	50                   	push   eax
c00137a3:	e8 44 07 00 00       	call   c0013eec <Device::Device(char const*)>
c00137a8:	83 c4 10             	add    esp,0x10
c00137ab:	ba d4 97 02 c0       	mov    edx,0xc00297d4
c00137b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b4:	89 10                	mov    DWORD PTR [eax],edx
c00137b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ba:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137c4:	90                   	nop
c00137c5:	83 c4 0c             	add    esp,0xc
c00137c8:	c3                   	ret    
c00137c9:	90                   	nop

c00137ca <Clock::~Clock()>:
c00137ca:	83 ec 0c             	sub    esp,0xc
c00137cd:	ba d4 97 02 c0       	mov    edx,0xc00297d4
c00137d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d6:	89 10                	mov    DWORD PTR [eax],edx
c00137d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137dc:	83 ec 0c             	sub    esp,0xc
c00137df:	50                   	push   eax
c00137e0:	e8 e9 03 00 00       	call   c0013bce <Device::~Device()>
c00137e5:	83 c4 10             	add    esp,0x10
c00137e8:	90                   	nop
c00137e9:	83 c4 0c             	add    esp,0xc
c00137ec:	c3                   	ret    
c00137ed:	90                   	nop

c00137ee <Clock::~Clock()>:
c00137ee:	83 ec 0c             	sub    esp,0xc
c00137f1:	83 ec 0c             	sub    esp,0xc
c00137f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137f8:	e8 cd ff ff ff       	call   c00137ca <Clock::~Clock()>
c00137fd:	83 c4 10             	add    esp,0x10
c0013800:	83 ec 08             	sub    esp,0x8
c0013803:	68 58 01 00 00       	push   0x158
c0013808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001380c:	e8 e4 ef ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0013811:	83 c4 10             	add    esp,0x10
c0013814:	83 c4 0c             	add    esp,0xc
c0013817:	c3                   	ret    

c0013818 <Clock::timeInSecondsLocal()>:
c0013818:	53                   	push   ebx
c0013819:	83 ec 14             	sub    esp,0x14
c001381c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013820:	8b 10                	mov    edx,DWORD PTR [eax]
c0013822:	50                   	push   eax
c0013823:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013826:	0f b6 0d 10 cf 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cf10
c001382d:	03 0d 14 cf 02 c0    	add    ecx,DWORD PTR ds:0xc002cf14
c0013833:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013839:	89 cb                	mov    ebx,ecx
c001383b:	c1 fb 1f             	sar    ebx,0x1f
c001383e:	01 c8                	add    eax,ecx
c0013840:	11 da                	adc    edx,ebx
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	31 c9                	xor    ecx,ecx
c0013847:	80 3d 11 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf11,0x0
c001384e:	74 05                	je     c0013855 <Clock::timeInSecondsLocal()+0x3d>
c0013850:	b9 08 07 00 00       	mov    ecx,0x708
c0013855:	31 db                	xor    ebx,ebx
c0013857:	01 c8                	add    eax,ecx
c0013859:	11 da                	adc    edx,ebx
c001385b:	83 c4 08             	add    esp,0x8
c001385e:	5b                   	pop    ebx
c001385f:	c3                   	ret    

c0013860 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013860:	57                   	push   edi
c0013861:	56                   	push   esi
c0013862:	53                   	push   ebx
c0013863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013867:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001386b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001386d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013871:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013874:	0f b6 05 10 cf 02 c0 	movzx  eax,BYTE PTR ds:0xc002cf10
c001387b:	03 05 14 cf 02 c0    	add    eax,DWORD PTR ds:0xc002cf14
c0013881:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013887:	99                   	cdq    
c0013888:	29 c6                	sub    esi,eax
c001388a:	19 d7                	sbb    edi,edx
c001388c:	89 f0                	mov    eax,esi
c001388e:	89 fa                	mov    edx,edi
c0013890:	31 f6                	xor    esi,esi
c0013892:	80 3d 11 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf11,0x0
c0013899:	74 05                	je     c00138a0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001389b:	be 08 07 00 00       	mov    esi,0x708
c00138a0:	31 ff                	xor    edi,edi
c00138a2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138a6:	29 f0                	sub    eax,esi
c00138a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138ac:	19 fa                	sbb    edx,edi
c00138ae:	89 d8                	mov    eax,ebx
c00138b0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138b4:	5b                   	pop    ebx
c00138b5:	5e                   	pop    esi
c00138b6:	5f                   	pop    edi
c00138b7:	ff e0                	jmp    eax

c00138b9 <datetimeToSeconds(datetime_t)>:
c00138b9:	55                   	push   ebp
c00138ba:	57                   	push   edi
c00138bb:	56                   	push   esi
c00138bc:	53                   	push   ebx
c00138bd:	83 ec 14             	sub    esp,0x14
c00138c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138c4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138c8:	89 d3                	mov    ebx,edx
c00138ca:	0f b6 c6             	movzx  eax,dh
c00138cd:	c1 eb 10             	shr    ebx,0x10
c00138d0:	48                   	dec    eax
c00138d1:	66 81 eb 6c 07       	sub    bx,0x76c
c00138d6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138da:	0f b6 f5             	movzx  esi,ch
c00138dd:	89 cf                	mov    edi,ecx
c00138df:	6b f6 3c             	imul   esi,esi,0x3c
c00138e2:	c1 ef 10             	shr    edi,0x10
c00138e5:	0f b6 c9             	movzx  ecx,cl
c00138e8:	89 f8                	mov    eax,edi
c00138ea:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138f0:	0f b6 f8             	movzx  edi,al
c00138f3:	0f b6 d2             	movzx  edx,dl
c00138f6:	01 fe                	add    esi,edi
c00138f8:	01 f1                	add    ecx,esi
c00138fa:	0f b7 f3             	movzx  esi,bx
c00138fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013901:	c1 f9 1f             	sar    ecx,0x1f
c0013904:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013909:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001390d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013912:	8b 0c 8d 20 98 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd67e0]
c0013919:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001391d:	76 29                	jbe    c0013948 <datetimeToSeconds(datetime_t)+0x8f>
c001391f:	f6 c3 03             	test   bl,0x3
c0013922:	75 24                	jne    c0013948 <datetimeToSeconds(datetime_t)+0x8f>
c0013924:	31 d2                	xor    edx,edx
c0013926:	bf 64 00 00 00       	mov    edi,0x64
c001392b:	89 d8                	mov    eax,ebx
c001392d:	66 f7 f7             	div    di
c0013930:	66 85 d2             	test   dx,dx
c0013933:	75 12                	jne    c0013947 <datetimeToSeconds(datetime_t)+0x8e>
c0013935:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001393b:	bf 90 01 00 00       	mov    edi,0x190
c0013940:	99                   	cdq    
c0013941:	f7 ff                	idiv   edi
c0013943:	85 d2                	test   edx,edx
c0013945:	75 01                	jne    c0013948 <datetimeToSeconds(datetime_t)+0x8f>
c0013947:	41                   	inc    ecx
c0013948:	66 83 fb 46          	cmp    bx,0x46
c001394c:	76 45                	jbe    c0013993 <datetimeToSeconds(datetime_t)+0xda>
c001394e:	bb 46 00 00 00       	mov    ebx,0x46
c0013953:	bf 64 00 00 00       	mov    edi,0x64
c0013958:	bd 90 01 00 00       	mov    ebp,0x190
c001395d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013962:	f6 c3 03             	test   bl,0x3
c0013965:	75 23                	jne    c001398a <datetimeToSeconds(datetime_t)+0xd1>
c0013967:	89 d8                	mov    eax,ebx
c0013969:	99                   	cdq    
c001396a:	f7 ff                	idiv   edi
c001396c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013971:	85 d2                	test   edx,edx
c0013973:	75 15                	jne    c001398a <datetimeToSeconds(datetime_t)+0xd1>
c0013975:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001397b:	99                   	cdq    
c001397c:	f7 fd                	idiv   ebp
c001397e:	83 fa 01             	cmp    edx,0x1
c0013981:	19 c0                	sbb    eax,eax
c0013983:	f7 d0                	not    eax
c0013985:	05 6e 01 00 00       	add    eax,0x16e
c001398a:	01 c1                	add    ecx,eax
c001398c:	43                   	inc    ebx
c001398d:	39 f3                	cmp    ebx,esi
c001398f:	7c cc                	jl     c001395d <datetimeToSeconds(datetime_t)+0xa4>
c0013991:	eb 35                	jmp    c00139c8 <datetimeToSeconds(datetime_t)+0x10f>
c0013993:	74 33                	je     c00139c8 <datetimeToSeconds(datetime_t)+0x10f>
c0013995:	b8 45 00 00 00       	mov    eax,0x45
c001399a:	89 c2                	mov    edx,eax
c001399c:	83 e2 03             	and    edx,0x3
c001399f:	39 f0                	cmp    eax,esi
c00139a1:	7e 0f                	jle    c00139b2 <datetimeToSeconds(datetime_t)+0xf9>
c00139a3:	83 fa 01             	cmp    edx,0x1
c00139a6:	19 d2                	sbb    edx,edx
c00139a8:	48                   	dec    eax
c00139a9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139b0:	eb e8                	jmp    c001399a <datetimeToSeconds(datetime_t)+0xe1>
c00139b2:	b8 6d 01 00 00       	mov    eax,0x16d
c00139b7:	85 d2                	test   edx,edx
c00139b9:	75 0b                	jne    c00139c6 <datetimeToSeconds(datetime_t)+0x10d>
c00139bb:	66 83 fb 01          	cmp    bx,0x1
c00139bf:	19 c0                	sbb    eax,eax
c00139c1:	05 6e 01 00 00       	add    eax,0x16e
c00139c6:	29 c1                	sub    ecx,eax
c00139c8:	b8 80 51 01 00       	mov    eax,0x15180
c00139cd:	f7 e9                	imul   ecx
c00139cf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139d3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139d7:	83 c4 14             	add    esp,0x14
c00139da:	5b                   	pop    ebx
c00139db:	5e                   	pop    esi
c00139dc:	5f                   	pop    edi
c00139dd:	5d                   	pop    ebp
c00139de:	c3                   	ret    
c00139df:	90                   	nop

c00139e0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139e0:	57                   	push   edi
c00139e1:	56                   	push   esi
c00139e2:	53                   	push   ebx
c00139e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00139e9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f4:	e8 c0 fe ff ff       	call   c00138b9 <datetimeToSeconds(datetime_t)>
c00139f9:	59                   	pop    ecx
c00139fa:	0f b6 0d 10 cf 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cf10
c0013a01:	5b                   	pop    ebx
c0013a02:	03 0d 14 cf 02 c0    	add    ecx,DWORD PTR ds:0xc002cf14
c0013a08:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a0e:	89 cb                	mov    ebx,ecx
c0013a10:	c1 fb 1f             	sar    ebx,0x1f
c0013a13:	29 c8                	sub    eax,ecx
c0013a15:	19 da                	sbb    edx,ebx
c0013a17:	31 c9                	xor    ecx,ecx
c0013a19:	80 3d 11 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf11,0x0
c0013a20:	74 05                	je     c0013a27 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a22:	b9 08 07 00 00       	mov    ecx,0x708
c0013a27:	31 db                	xor    ebx,ebx
c0013a29:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a2d:	29 c8                	sub    eax,ecx
c0013a2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a33:	19 da                	sbb    edx,ebx
c0013a35:	89 f8                	mov    eax,edi
c0013a37:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a3b:	5b                   	pop    ebx
c0013a3c:	5e                   	pop    esi
c0013a3d:	5f                   	pop    edi
c0013a3e:	ff e0                	jmp    eax

c0013a40 <secondsToDatetime(unsigned long long)>:
c0013a40:	55                   	push   ebp
c0013a41:	57                   	push   edi
c0013a42:	56                   	push   esi
c0013a43:	53                   	push   ebx
c0013a44:	83 ec 1c             	sub    esp,0x1c
c0013a47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a4b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a4f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a53:	6a 00                	push   0x0
c0013a55:	68 80 51 01 00       	push   0x15180
c0013a5a:	55                   	push   ebp
c0013a5b:	57                   	push   edi
c0013a5c:	e8 7b 1c 01 00       	call   c00256dc <__udivdi3>
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a6e:	6a 00                	push   0x0
c0013a70:	68 80 51 01 00       	push   0x15180
c0013a75:	55                   	push   ebp
c0013a76:	57                   	push   edi
c0013a77:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a7c:	e8 5b 1d 01 00       	call   c00257dc <__umoddi3>
c0013a81:	83 c4 10             	add    esp,0x10
c0013a84:	99                   	cdq    
c0013a85:	f7 ff                	idiv   edi
c0013a87:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a8c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a8f:	89 d0                	mov    eax,edx
c0013a91:	99                   	cdq    
c0013a92:	f7 ff                	idiv   edi
c0013a94:	85 db                	test   ebx,ebx
c0013a96:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a99:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013a9c:	79 11                	jns    c0013aaf <secondsToDatetime(unsigned long long)+0x6f>
c0013a9e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013aa2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013aa8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013aad:	eb 07                	jmp    c0013ab6 <secondsToDatetime(unsigned long long)+0x76>
c0013aaf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ab4:	89 d8                	mov    eax,ebx
c0013ab6:	bf b4 05 00 00       	mov    edi,0x5b4
c0013abb:	99                   	cdq    
c0013abc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013ac1:	f7 f9                	idiv   ecx
c0013ac3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ac8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013acc:	31 d2                	xor    edx,edx
c0013ace:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013ad6:	01 c3                	add    ebx,eax
c0013ad8:	89 d8                	mov    eax,ebx
c0013ada:	f7 f1                	div    ecx
c0013adc:	31 d2                	xor    edx,edx
c0013ade:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013ae1:	89 d8                	mov    eax,ebx
c0013ae3:	f7 f7                	div    edi
c0013ae5:	31 d2                	xor    edx,edx
c0013ae7:	29 c1                	sub    ecx,eax
c0013ae9:	89 d8                	mov    eax,ebx
c0013aeb:	f7 f5                	div    ebp
c0013aed:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013af2:	29 c1                	sub    ecx,eax
c0013af4:	31 d2                	xor    edx,edx
c0013af6:	89 c8                	mov    eax,ecx
c0013af8:	f7 f5                	div    ebp
c0013afa:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013aff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b03:	31 d2                	xor    edx,edx
c0013b05:	89 c8                	mov    eax,ecx
c0013b07:	f7 f5                	div    ebp
c0013b09:	31 d2                	xor    edx,edx
c0013b0b:	01 c3                	add    ebx,eax
c0013b0d:	89 c8                	mov    eax,ecx
c0013b0f:	f7 f7                	div    edi
c0013b11:	bf 99 00 00 00       	mov    edi,0x99
c0013b16:	29 c3                	sub    ebx,eax
c0013b18:	31 d2                	xor    edx,edx
c0013b1a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b22:	29 c3                	sub    ebx,eax
c0013b24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b27:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b2a:	bb 05 00 00 00       	mov    ebx,0x5
c0013b2f:	83 c1 02             	add    ecx,0x2
c0013b32:	89 c8                	mov    eax,ecx
c0013b34:	f7 f7                	div    edi
c0013b36:	31 d2                	xor    edx,edx
c0013b38:	89 c7                	mov    edi,eax
c0013b3a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b40:	83 c0 02             	add    eax,0x2
c0013b43:	f7 f3                	div    ebx
c0013b45:	89 eb                	mov    ebx,ebp
c0013b47:	29 c3                	sub    ebx,eax
c0013b49:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b4f:	88 1e                	mov    BYTE PTR [esi],bl
c0013b51:	19 c0                	sbb    eax,eax
c0013b53:	31 d2                	xor    edx,edx
c0013b55:	83 e0 0c             	and    eax,0xc
c0013b58:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b5c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b64:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b68:	83 f9 01             	cmp    ecx,0x1
c0013b6b:	0f 96 c2             	setbe  dl
c0013b6e:	41                   	inc    ecx
c0013b6f:	01 d0                	add    eax,edx
c0013b71:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b74:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b78:	83 c4 1c             	add    esp,0x1c
c0013b7b:	89 f0                	mov    eax,esi
c0013b7d:	5b                   	pop    ebx
c0013b7e:	5e                   	pop    esi
c0013b7f:	5f                   	pop    edi
c0013b80:	5d                   	pop    ebp
c0013b81:	c2 04 00             	ret    0x4

c0013b84 <Clock::timeInDatetimeLocal()>:
c0013b84:	53                   	push   ebx
c0013b85:	83 ec 14             	sub    esp,0x14
c0013b88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b90:	e8 83 fc ff ff       	call   c0013818 <Clock::timeInSecondsLocal()>
c0013b95:	83 c4 0c             	add    esp,0xc
c0013b98:	52                   	push   edx
c0013b99:	50                   	push   eax
c0013b9a:	53                   	push   ebx
c0013b9b:	e8 a0 fe ff ff       	call   c0013a40 <secondsToDatetime(unsigned long long)>
c0013ba0:	89 d8                	mov    eax,ebx
c0013ba2:	83 c4 14             	add    esp,0x14
c0013ba5:	5b                   	pop    ebx
c0013ba6:	c2 04 00             	ret    0x4
c0013ba9:	90                   	nop

c0013baa <Device::hibernate()>:
c0013baa:	c3                   	ret    
c0013bab:	90                   	nop

c0013bac <Device::wake()>:
c0013bac:	c3                   	ret    
c0013bad:	90                   	nop

c0013bae <Device::detect()>:
c0013bae:	c3                   	ret    
c0013baf:	90                   	nop

c0013bb0 <Device::disableLegacy()>:
c0013bb0:	c3                   	ret    
c0013bb1:	90                   	nop

c0013bb2 <Device::powerSaving(PowerSavingLevel)>:
c0013bb2:	c3                   	ret    
c0013bb3:	90                   	nop

c0013bb4 <DriverlessDevice::close(int, int, void*)>:
c0013bb4:	31 c0                	xor    eax,eax
c0013bb6:	c3                   	ret    
c0013bb7:	90                   	nop

c0013bb8 <DriverlessDevice::detect()>:
c0013bb8:	c3                   	ret    
c0013bb9:	90                   	nop

c0013bba <DriverlessDevice::open(int, int, void*)>:
c0013bba:	83 ec 18             	sub    esp,0x18
c0013bbd:	68 50 98 02 c0       	push   0xc0029850
c0013bc2:	e8 fc 5e 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0013bc7:	83 c8 ff             	or     eax,0xffffffff
c0013bca:	83 c4 1c             	add    esp,0x1c
c0013bcd:	c3                   	ret    

c0013bce <Device::~Device()>:
c0013bce:	ba 78 98 02 c0       	mov    edx,0xc0029878
c0013bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bd7:	89 10                	mov    DWORD PTR [eax],edx
c0013bd9:	90                   	nop
c0013bda:	c3                   	ret    
c0013bdb:	90                   	nop

c0013bdc <Device::~Device()>:
c0013bdc:	83 ec 0c             	sub    esp,0xc
c0013bdf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013be3:	e8 e6 ff ff ff       	call   c0013bce <Device::~Device()>
c0013be8:	83 c4 04             	add    esp,0x4
c0013beb:	83 ec 08             	sub    esp,0x8
c0013bee:	68 58 01 00 00       	push   0x158
c0013bf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf7:	e8 f9 eb ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0013bfc:	83 c4 10             	add    esp,0x10
c0013bff:	83 c4 0c             	add    esp,0xc
c0013c02:	c3                   	ret    
c0013c03:	90                   	nop

c0013c04 <Device::findAndLoadDriver()>:
c0013c04:	c3                   	ret    
c0013c05:	90                   	nop

c0013c06 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c06:	57                   	push   edi
c0013c07:	b9 09 00 00 00       	mov    ecx,0x9
c0013c0c:	56                   	push   esi
c0013c0d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c11:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c15:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c1f:	81 c7 18 01 00 00    	add    edi,0x118
c0013c25:	fc                   	cld    
c0013c26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c28:	5e                   	pop    esi
c0013c29:	5f                   	pop    edi
c0013c2a:	c3                   	ret    
c0013c2b:	90                   	nop

c0013c2c <Device::preOpenACPI(void*, char*, char*)>:
c0013c2c:	56                   	push   esi
c0013c2d:	53                   	push   ebx
c0013c2e:	83 ec 08             	sub    esp,0x8
c0013c31:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c35:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c39:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013c43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c47:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013c4d:	6a 1e                	push   0x1e
c0013c4f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013c55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c59:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013c5f:	50                   	push   eax
c0013c60:	e8 3b ca fe ff       	call   c00006a0 <memcpy>
c0013c65:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013c69:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c6d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013c75:	83 c4 14             	add    esp,0x14
c0013c78:	5b                   	pop    ebx
c0013c79:	5e                   	pop    esi
c0013c7a:	e9 21 ca fe ff       	jmp    c00006a0 <memcpy>
c0013c7f:	90                   	nop

c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c84:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c89:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c90:	75 0b                	jne    c0013c9d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c94:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c98:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c9b:	eb 1e                	jmp    c0013cbb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c9d:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0013ca2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ca8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cae:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cb0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cb8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cbb:	ff e0                	jmp    eax
c0013cbd:	90                   	nop

c0013cbe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cc2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cc7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cce:	75 0b                	jne    c0013cdb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cd2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cd6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013cd9:	eb 1e                	jmp    c0013cf9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013cdb:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0013ce0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ce6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cec:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cf2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cf6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013cf9:	ff e0                	jmp    eax
c0013cfb:	90                   	nop

c0013cfc <Device::addChild(Device*)>:
c0013cfc:	53                   	push   ebx
c0013cfd:	83 ec 08             	sub    esp,0x8
c0013d00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d08:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d0e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d14:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d16:	85 d2                	test   edx,edx
c0013d18:	74 04                	je     c0013d1e <Device::addChild(Device*)+0x22>
c0013d1a:	89 d3                	mov    ebx,edx
c0013d1c:	eb f6                	jmp    c0013d14 <Device::addChild(Device*)+0x18>
c0013d1e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d21:	83 ec 0c             	sub    esp,0xc
c0013d24:	6a 08                	push   0x8
c0013d26:	e8 f9 b8 ff ff       	call   c000f624 <malloc>
c0013d2b:	89 03                	mov    DWORD PTR [ebx],eax
c0013d2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d3a:	83 c4 18             	add    esp,0x18
c0013d3d:	5b                   	pop    ebx
c0013d3e:	c3                   	ret    
c0013d3f:	90                   	nop

c0013d40 <Device::removeAllChildren()>:
c0013d40:	56                   	push   esi
c0013d41:	53                   	push   ebx
c0013d42:	52                   	push   edx
c0013d43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d47:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d50:	74 17                	je     c0013d69 <Device::removeAllChildren()+0x29>
c0013d52:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d55:	85 c0                	test   eax,eax
c0013d57:	74 0c                	je     c0013d65 <Device::removeAllChildren()+0x25>
c0013d59:	83 ec 0c             	sub    esp,0xc
c0013d5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d5e:	50                   	push   eax
c0013d5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d62:	83 c4 10             	add    esp,0x10
c0013d65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d67:	eb e4                	jmp    c0013d4d <Device::removeAllChildren()+0xd>
c0013d69:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d75:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d82:	58                   	pop    eax
c0013d83:	5b                   	pop    ebx
c0013d84:	5e                   	pop    esi
c0013d85:	c3                   	ret    

c0013d86 <Device::hibernateAll()>:
c0013d86:	53                   	push   ebx
c0013d87:	83 ec 14             	sub    esp,0x14
c0013d8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d90:	53                   	push   ebx
c0013d91:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d94:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d9a:	83 c4 10             	add    esp,0x10
c0013d9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013da0:	74 0f                	je     c0013db1 <Device::hibernateAll()+0x2b>
c0013da2:	83 ec 0c             	sub    esp,0xc
c0013da5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013da8:	e8 d9 ff ff ff       	call   c0013d86 <Device::hibernateAll()>
c0013dad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013daf:	eb e9                	jmp    c0013d9a <Device::hibernateAll()+0x14>
c0013db1:	83 c4 08             	add    esp,0x8
c0013db4:	5b                   	pop    ebx
c0013db5:	c3                   	ret    

c0013db6 <Device::wakeAll()>:
c0013db6:	53                   	push   ebx
c0013db7:	83 ec 14             	sub    esp,0x14
c0013dba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dc0:	53                   	push   ebx
c0013dc1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013dc4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dca:	83 c4 10             	add    esp,0x10
c0013dcd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dd0:	74 0f                	je     c0013de1 <Device::wakeAll()+0x2b>
c0013dd2:	83 ec 0c             	sub    esp,0xc
c0013dd5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dd8:	e8 d9 ff ff ff       	call   c0013db6 <Device::wakeAll()>
c0013ddd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ddf:	eb e9                	jmp    c0013dca <Device::wakeAll()+0x14>
c0013de1:	83 c4 08             	add    esp,0x8
c0013de4:	5b                   	pop    ebx
c0013de5:	c3                   	ret    

c0013de6 <Device::detectAll()>:
c0013de6:	53                   	push   ebx
c0013de7:	83 ec 14             	sub    esp,0x14
c0013dea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df0:	53                   	push   ebx
c0013df1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013df4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dfa:	83 c4 10             	add    esp,0x10
c0013dfd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e00:	74 0f                	je     c0013e11 <Device::detectAll()+0x2b>
c0013e02:	83 ec 0c             	sub    esp,0xc
c0013e05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e08:	e8 d9 ff ff ff       	call   c0013de6 <Device::detectAll()>
c0013e0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e0f:	eb e9                	jmp    c0013dfa <Device::detectAll()+0x14>
c0013e11:	83 c4 08             	add    esp,0x8
c0013e14:	5b                   	pop    ebx
c0013e15:	c3                   	ret    

c0013e16 <Device::disableLegacyAll()>:
c0013e16:	53                   	push   ebx
c0013e17:	83 ec 14             	sub    esp,0x14
c0013e1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e20:	53                   	push   ebx
c0013e21:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e24:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e2a:	83 c4 10             	add    esp,0x10
c0013e2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e30:	74 0f                	je     c0013e41 <Device::disableLegacyAll()+0x2b>
c0013e32:	83 ec 0c             	sub    esp,0xc
c0013e35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e38:	e8 d9 ff ff ff       	call   c0013e16 <Device::disableLegacyAll()>
c0013e3d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e3f:	eb e9                	jmp    c0013e2a <Device::disableLegacyAll()+0x14>
c0013e41:	83 c4 08             	add    esp,0x8
c0013e44:	5b                   	pop    ebx
c0013e45:	c3                   	ret    

c0013e46 <Device::loadDriversForAll()>:
c0013e46:	53                   	push   ebx
c0013e47:	83 ec 08             	sub    esp,0x8
c0013e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4e:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e54:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013e56:	85 db                	test   ebx,ebx
c0013e58:	74 12                	je     c0013e6c <Device::loadDriversForAll()+0x26>
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013e60:	e8 e1 ff ff ff       	call   c0013e46 <Device::loadDriversForAll()>
c0013e65:	83 c4 10             	add    esp,0x10
c0013e68:	89 d8                	mov    eax,ebx
c0013e6a:	eb e8                	jmp    c0013e54 <Device::loadDriversForAll()+0xe>
c0013e6c:	83 c4 08             	add    esp,0x8
c0013e6f:	5b                   	pop    ebx
c0013e70:	c3                   	ret    
c0013e71:	90                   	nop

c0013e72 <Device::closeAll()>:
c0013e72:	53                   	push   ebx
c0013e73:	83 ec 08             	sub    esp,0x8
c0013e76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e7c:	6a 00                	push   0x0
c0013e7e:	6a 00                	push   0x0
c0013e80:	6a 00                	push   0x0
c0013e82:	53                   	push   ebx
c0013e83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e8c:	83 c4 10             	add    esp,0x10
c0013e8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e92:	74 0f                	je     c0013ea3 <Device::closeAll()+0x31>
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e9a:	e8 d3 ff ff ff       	call   c0013e72 <Device::closeAll()>
c0013e9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ea1:	eb e9                	jmp    c0013e8c <Device::closeAll()+0x1a>
c0013ea3:	83 c4 08             	add    esp,0x8
c0013ea6:	5b                   	pop    ebx
c0013ea7:	c3                   	ret    

c0013ea8 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ea8:	56                   	push   esi
c0013ea9:	53                   	push   ebx
c0013eaa:	83 ec 0c             	sub    esp,0xc
c0013ead:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013eb1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013eb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013eb7:	56                   	push   esi
c0013eb8:	53                   	push   ebx
c0013eb9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ebc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ec2:	83 c4 10             	add    esp,0x10
c0013ec5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ec8:	74 0f                	je     c0013ed9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013eca:	52                   	push   edx
c0013ecb:	52                   	push   edx
c0013ecc:	56                   	push   esi
c0013ecd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ed0:	e8 d3 ff ff ff       	call   c0013ea8 <Device::powerSavingAll(PowerSavingLevel)>
c0013ed5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ed7:	eb e9                	jmp    c0013ec2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013ed9:	58                   	pop    eax
c0013eda:	5b                   	pop    ebx
c0013edb:	5e                   	pop    esi
c0013edc:	c3                   	ret    
c0013edd:	90                   	nop

c0013ede <Device::setName(char const*)>:
c0013ede:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ee6:	e9 78 c8 fe ff       	jmp    c0000763 <strcpy>
c0013eeb:	90                   	nop

c0013eec <Device::Device(char const*)>:
c0013eec:	83 ec 1c             	sub    esp,0x1c
c0013eef:	ba 78 98 02 c0       	mov    edx,0xc0029878
c0013ef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef8:	89 10                	mov    DWORD PTR [eax],edx
c0013efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013efe:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f0c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f32:	83 ec 08             	sub    esp,0x8
c0013f35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f3d:	e8 9c ff ff ff       	call   c0013ede <Device::setName(char const*)>
c0013f42:	83 c4 10             	add    esp,0x10
c0013f45:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f4d:	83 ec 0c             	sub    esp,0xc
c0013f50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f54:	e8 cb b6 ff ff       	call   c000f624 <malloc>
c0013f59:	83 c4 10             	add    esp,0x10
c0013f5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f6d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f77:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f87:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f98:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013f9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fae:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013fe2:	90                   	nop
c0013fe3:	83 c4 1c             	add    esp,0x1c
c0013fe6:	c3                   	ret    
c0013fe7:	90                   	nop

c0013fe8 <Device::getName()>:
c0013fe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fec:	05 d0 00 00 00       	add    eax,0xd0
c0013ff1:	c3                   	ret    

c0013ff2 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013ff2:	83 ec 0c             	sub    esp,0xc
c0013ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff9:	83 ec 08             	sub    esp,0x8
c0013ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014000:	50                   	push   eax
c0014001:	e8 e6 fe ff ff       	call   c0013eec <Device::Device(char const*)>
c0014006:	83 c4 10             	add    esp,0x10
c0014009:	ba a4 98 02 c0       	mov    edx,0xc00298a4
c001400e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014012:	89 10                	mov    DWORD PTR [eax],edx
c0014014:	90                   	nop
c0014015:	83 c4 0c             	add    esp,0xc
c0014018:	c3                   	ret    
c0014019:	90                   	nop

c001401a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001401a:	57                   	push   edi
c001401b:	56                   	push   esi
c001401c:	53                   	push   ebx
c001401d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014021:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014025:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014029:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001402f:	75 0c                	jne    c001403d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014031:	52                   	push   edx
c0014032:	52                   	push   edx
c0014033:	53                   	push   ebx
c0014034:	56                   	push   esi
c0014035:	e8 e0 35 01 00       	call   c002761a <LinkedList<Device>::addElement(Device*)>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014043:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014046:	74 12                	je     c001405a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014048:	50                   	push   eax
c0014049:	57                   	push   edi
c001404a:	56                   	push   esi
c001404b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001404e:	e8 c7 ff ff ff       	call   c001401a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014053:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014055:	83 c4 10             	add    esp,0x10
c0014058:	eb e9                	jmp    c0014043 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001405a:	5b                   	pop    ebx
c001405b:	5e                   	pop    esi
c001405c:	5f                   	pop    edi
c001405d:	c3                   	ret    

c001405e <getDevicesOfType(DeviceType)>:
c001405e:	53                   	push   ebx
c001405f:	83 ec 14             	sub    esp,0x14
c0014062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014066:	53                   	push   ebx
c0014067:	e8 8a 36 01 00       	call   c00276f6 <LinkedList<Device>::LinkedList()>
c001406c:	83 c4 0c             	add    esp,0xc
c001406f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014073:	53                   	push   ebx
c0014074:	ff 35 88 cd 02 c0    	push   DWORD PTR ds:0xc002cd88
c001407a:	e8 9b ff ff ff       	call   c001401a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001407f:	89 d8                	mov    eax,ebx
c0014081:	83 c4 18             	add    esp,0x18
c0014084:	5b                   	pop    ebx
c0014085:	c2 04 00             	ret    0x4

c0014088 <HardDiskController::HardDiskController(char const*)>:
c0014088:	83 ec 0c             	sub    esp,0xc
c001408b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408f:	83 ec 08             	sub    esp,0x8
c0014092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014096:	50                   	push   eax
c0014097:	e8 50 fe ff ff       	call   c0013eec <Device::Device(char const*)>
c001409c:	83 c4 10             	add    esp,0x10
c001409f:	ba d0 98 02 c0       	mov    edx,0xc00298d0
c00140a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a8:	89 10                	mov    DWORD PTR [eax],edx
c00140aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ae:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140b8:	90                   	nop
c00140b9:	83 c4 0c             	add    esp,0xc
c00140bc:	c3                   	ret    
c00140bd:	90                   	nop

c00140be <HardDiskController::~HardDiskController()>:
c00140be:	83 ec 0c             	sub    esp,0xc
c00140c1:	ba d0 98 02 c0       	mov    edx,0xc00298d0
c00140c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ca:	89 10                	mov    DWORD PTR [eax],edx
c00140cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	50                   	push   eax
c00140d4:	e8 f5 fa ff ff       	call   c0013bce <Device::~Device()>
c00140d9:	83 c4 10             	add    esp,0x10
c00140dc:	90                   	nop
c00140dd:	83 c4 0c             	add    esp,0xc
c00140e0:	c3                   	ret    
c00140e1:	90                   	nop

c00140e2 <HardDiskController::~HardDiskController()>:
c00140e2:	83 ec 0c             	sub    esp,0xc
c00140e5:	83 ec 0c             	sub    esp,0xc
c00140e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ec:	e8 cd ff ff ff       	call   c00140be <HardDiskController::~HardDiskController()>
c00140f1:	83 c4 10             	add    esp,0x10
c00140f4:	83 ec 08             	sub    esp,0x8
c00140f7:	68 58 01 00 00       	push   0x158
c00140fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014100:	e8 f0 e6 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0014105:	83 c4 10             	add    esp,0x10
c0014108:	83 c4 0c             	add    esp,0xc
c001410b:	c3                   	ret    

c001410c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001410c:	83 ec 0c             	sub    esp,0xc
c001410f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014113:	83 ec 08             	sub    esp,0x8
c0014116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001411a:	50                   	push   eax
c001411b:	e8 cc fd ff ff       	call   c0013eec <Device::Device(char const*)>
c0014120:	83 c4 10             	add    esp,0x10
c0014123:	ba fc 98 02 c0       	mov    edx,0xc00298fc
c0014128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412c:	89 10                	mov    DWORD PTR [eax],edx
c001412e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014132:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001413d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014148:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014156:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001415a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014164:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001416e:	90                   	nop
c001416f:	83 c4 0c             	add    esp,0xc
c0014172:	c3                   	ret    
c0014173:	90                   	nop

c0014174 <PhysicalDisk::startCache()>:
c0014174:	56                   	push   esi
c0014175:	53                   	push   ebx
c0014176:	83 ec 10             	sub    esp,0x10
c0014179:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001417d:	6a 30                	push   0x30
c001417f:	e8 a0 b4 ff ff       	call   c000f624 <malloc>
c0014184:	89 c6                	mov    esi,eax
c0014186:	58                   	pop    eax
c0014187:	5a                   	pop    edx
c0014188:	53                   	push   ebx
c0014189:	56                   	push   esi
c001418a:	e8 dd 25 00 00       	call   c001676c <VCache::VCache(PhysicalDisk*)>
c001418f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014195:	83 c4 14             	add    esp,0x14
c0014198:	5b                   	pop    ebx
c0014199:	5e                   	pop    esi
c001419a:	c3                   	ret    
c001419b:	90                   	nop

c001419c <PhysicalDisk::~PhysicalDisk()>:
c001419c:	83 ec 0c             	sub    esp,0xc
c001419f:	ba fc 98 02 c0       	mov    edx,0xc00298fc
c00141a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a8:	89 10                	mov    DWORD PTR [eax],edx
c00141aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ae:	83 ec 0c             	sub    esp,0xc
c00141b1:	50                   	push   eax
c00141b2:	e8 17 fa ff ff       	call   c0013bce <Device::~Device()>
c00141b7:	83 c4 10             	add    esp,0x10
c00141ba:	90                   	nop
c00141bb:	83 c4 0c             	add    esp,0xc
c00141be:	c3                   	ret    
c00141bf:	90                   	nop

c00141c0 <PhysicalDisk::~PhysicalDisk()>:
c00141c0:	83 ec 0c             	sub    esp,0xc
c00141c3:	83 ec 0c             	sub    esp,0xc
c00141c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141ca:	e8 cd ff ff ff       	call   c001419c <PhysicalDisk::~PhysicalDisk()>
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	83 ec 08             	sub    esp,0x8
c00141d5:	68 6c 01 00 00       	push   0x16c
c00141da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141de:	e8 12 e6 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00141e3:	83 c4 10             	add    esp,0x10
c00141e6:	83 c4 0c             	add    esp,0xc
c00141e9:	c3                   	ret    

c00141ea <FPU::FPU(char const*)>:
c00141ea:	83 ec 0c             	sub    esp,0xc
c00141ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f1:	83 ec 08             	sub    esp,0x8
c00141f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f8:	50                   	push   eax
c00141f9:	e8 ee fc ff ff       	call   c0013eec <Device::Device(char const*)>
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	ba 3c 99 02 c0       	mov    edx,0xc002993c
c0014206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001420a:	89 10                	mov    DWORD PTR [eax],edx
c001420c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014210:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001421a:	90                   	nop
c001421b:	83 c4 0c             	add    esp,0xc
c001421e:	c3                   	ret    
c001421f:	90                   	nop

c0014220 <FPU::~FPU()>:
c0014220:	83 ec 0c             	sub    esp,0xc
c0014223:	ba 3c 99 02 c0       	mov    edx,0xc002993c
c0014228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001422c:	89 10                	mov    DWORD PTR [eax],edx
c001422e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014232:	83 ec 0c             	sub    esp,0xc
c0014235:	50                   	push   eax
c0014236:	e8 93 f9 ff ff       	call   c0013bce <Device::~Device()>
c001423b:	83 c4 10             	add    esp,0x10
c001423e:	90                   	nop
c001423f:	83 c4 0c             	add    esp,0xc
c0014242:	c3                   	ret    
c0014243:	90                   	nop

c0014244 <FPU::~FPU()>:
c0014244:	83 ec 0c             	sub    esp,0xc
c0014247:	83 ec 0c             	sub    esp,0xc
c001424a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001424e:	e8 cd ff ff ff       	call   c0014220 <FPU::~FPU()>
c0014253:	83 c4 10             	add    esp,0x10
c0014256:	83 ec 08             	sub    esp,0x8
c0014259:	68 58 01 00 00       	push   0x158
c001425e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014262:	e8 8e e5 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0014267:	83 c4 10             	add    esp,0x10
c001426a:	83 c4 0c             	add    esp,0xc
c001426d:	c3                   	ret    

c001426e <setupFPU()>:
c001426e:	53                   	push   ebx
c001426f:	83 ec 08             	sub    esp,0x8
c0014272:	8b 15 88 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd88
c0014278:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001427f:	74 19                	je     c001429a <setupFPU()+0x2c>
c0014281:	83 ec 0c             	sub    esp,0xc
c0014284:	68 58 01 00 00       	push   0x158
c0014289:	e8 96 b3 ff ff       	call   c000f624 <malloc>
c001428e:	89 c3                	mov    ebx,eax
c0014290:	89 04 24             	mov    DWORD PTR [esp],eax
c0014293:	e8 ce ff 00 00       	call   c0024266 <AVX::AVX()>
c0014298:	eb 5b                	jmp    c00142f5 <setupFPU()+0x87>
c001429a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142a0:	84 c0                	test   al,al
c00142a2:	79 19                	jns    c00142bd <setupFPU()+0x4f>
c00142a4:	83 ec 0c             	sub    esp,0xc
c00142a7:	68 58 01 00 00       	push   0x158
c00142ac:	e8 73 b3 ff ff       	call   c000f624 <malloc>
c00142b1:	89 c3                	mov    ebx,eax
c00142b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00142b6:	e8 d1 00 01 00       	call   c002438c <SSE::SSE()>
c00142bb:	eb 38                	jmp    c00142f5 <setupFPU()+0x87>
c00142bd:	a8 20                	test   al,0x20
c00142bf:	74 19                	je     c00142da <setupFPU()+0x6c>
c00142c1:	83 ec 0c             	sub    esp,0xc
c00142c4:	68 58 01 00 00       	push   0x158
c00142c9:	e8 56 b3 ff ff       	call   c000f624 <malloc>
c00142ce:	89 c3                	mov    ebx,eax
c00142d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00142d3:	e8 1e 00 01 00       	call   c00242f6 <MMX::MMX()>
c00142d8:	eb 1b                	jmp    c00142f5 <setupFPU()+0x87>
c00142da:	a8 10                	test   al,0x10
c00142dc:	74 1c                	je     c00142fa <setupFPU()+0x8c>
c00142de:	83 ec 0c             	sub    esp,0xc
c00142e1:	68 58 01 00 00       	push   0x158
c00142e6:	e8 39 b3 ff ff       	call   c000f624 <malloc>
c00142eb:	89 c3                	mov    ebx,eax
c00142ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00142f0:	e8 25 01 01 00       	call   c002441a <x87::x87()>
c00142f5:	83 c4 10             	add    esp,0x10
c00142f8:	eb 24                	jmp    c001431e <setupFPU()+0xb0>
c00142fa:	83 e0 ef             	and    eax,0xffffffef
c00142fd:	83 ec 0c             	sub    esp,0xc
c0014300:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014306:	68 28 99 02 c0       	push   0xc0029928
c001430b:	e8 c5 e5 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014310:	0f 20 c0             	mov    eax,cr0
c0014313:	83 c8 04             	or     eax,0x4
c0014316:	0f 22 c0             	mov    cr0,eax
c0014319:	31 db                	xor    ebx,ebx
c001431b:	83 c4 10             	add    esp,0x10
c001431e:	89 d8                	mov    eax,ebx
c0014320:	83 c4 08             	add    esp,0x8
c0014323:	5b                   	pop    ebx
c0014324:	c3                   	ret    
c0014325:	90                   	nop

c0014326 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014326:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001432a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001432e:	c1 e0 04             	shl    eax,0x4
c0014331:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014335:	8d 50 10             	lea    edx,[eax+0x10]
c0014338:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001433e:	74 08                	je     c0014348 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014340:	83 c0 04             	add    eax,0x4
c0014343:	39 d0                	cmp    eax,edx
c0014345:	75 f1                	jne    c0014338 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014347:	c3                   	ret    
c0014348:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014352:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001435c:	eb e2                	jmp    c0014340 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001435e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001435e:	57                   	push   edi
c001435f:	31 c0                	xor    eax,eax
c0014361:	56                   	push   esi
c0014362:	53                   	push   ebx
c0014363:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014367:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001436b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001436f:	89 da                	mov    edx,ebx
c0014371:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014375:	c1 e2 04             	shl    edx,0x4
c0014378:	01 ca                	add    edx,ecx
c001437a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014382:	74 16                	je     c001439a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014384:	40                   	inc    eax
c0014385:	83 f8 04             	cmp    eax,0x4
c0014388:	75 f0                	jne    c001437a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001438a:	c7 44 24 10 6c 99 02 c0 	mov    DWORD PTR [esp+0x10],0xc002996c
c0014392:	5b                   	pop    ebx
c0014393:	5e                   	pop    esi
c0014394:	5f                   	pop    edi
c0014395:	e9 29 57 00 00       	jmp    c0019ac3 <Krnl::panic(char const*)>
c001439a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001439d:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143a0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143a6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143ac:	5b                   	pop    ebx
c00143ad:	5e                   	pop    esi
c00143ae:	5f                   	pop    edi
c00143af:	c3                   	ret    

c00143b0 <doubleFault(regs*, void*)>:
c00143b0:	55                   	push   ebp
c00143b1:	89 e5                	mov    ebp,esp
c00143b3:	83 ec 08             	sub    esp,0x8
c00143b6:	83 ec 0c             	sub    esp,0xc
c00143b9:	68 a7 99 02 c0       	push   0xc00299a7
c00143be:	e8 00 57 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c00143c3:	83 c4 10             	add    esp,0x10
c00143c6:	90                   	nop
c00143c7:	c9                   	leave  
c00143c8:	c3                   	ret    
c00143c9:	90                   	nop

c00143ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143ca:	56                   	push   esi
c00143cb:	53                   	push   ebx
c00143cc:	50                   	push   eax
c00143cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143d5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143da:	75 35                	jne    c0014411 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00143dc:	8d 43 20             	lea    eax,[ebx+0x20]
c00143df:	31 d2                	xor    edx,edx
c00143e1:	89 c1                	mov    ecx,eax
c00143e3:	c1 e1 04             	shl    ecx,0x4
c00143e6:	01 f1                	add    ecx,esi
c00143e8:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00143f0:	74 3e                	je     c0014430 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00143f2:	42                   	inc    edx
c00143f3:	83 fa 04             	cmp    edx,0x4
c00143f6:	75 f0                	jne    c00143e8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00143f8:	83 ec 0c             	sub    esp,0xc
c00143fb:	68 ec 99 02 c0       	push   0xc00299ec
c0014400:	e8 be 56 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001440d:	5a                   	pop    edx
c001440e:	5b                   	pop    ebx
c001440f:	5e                   	pop    esi
c0014410:	c3                   	ret    
c0014411:	83 ec 0c             	sub    esp,0xc
c0014414:	56                   	push   esi
c0014415:	e8 ce fb ff ff       	call   c0013fe8 <Device::getName()>
c001441a:	83 c4 10             	add    esp,0x10
c001441d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014420:	75 ba                	jne    c00143dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014422:	83 fb 0f             	cmp    ebx,0xf
c0014425:	7f 29                	jg     c0014450 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014427:	0f b6 9b e0 bf 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4020]
c001442e:	eb ac                	jmp    c00143dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014430:	8d 04 82             	lea    eax,[edx+eax*4]
c0014433:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014437:	8d 04 86             	lea    eax,[esi+eax*4]
c001443a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014440:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014444:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001444a:	89 d8                	mov    eax,ebx
c001444c:	5a                   	pop    edx
c001444d:	5b                   	pop    ebx
c001444e:	5e                   	pop    esi
c001444f:	c3                   	ret    
c0014450:	83 ec 0c             	sub    esp,0xc
c0014453:	68 b4 99 02 c0       	push   0xc00299b4
c0014458:	e8 66 56 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c001445d:	83 c4 10             	add    esp,0x10
c0014460:	e9 77 ff ff ff       	jmp    c00143dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014465:	90                   	nop

c0014466 <InterruptController::clearAllHandlers(int, bool)>:
c0014466:	56                   	push   esi
c0014467:	53                   	push   ebx
c0014468:	52                   	push   edx
c0014469:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001446d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014471:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014476:	75 61                	jne    c00144d9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014478:	8d 46 20             	lea    eax,[esi+0x20]
c001447b:	c1 e6 04             	shl    esi,0x4
c001447e:	c1 e0 04             	shl    eax,0x4
c0014481:	01 de                	add    esi,ebx
c0014483:	01 d8                	add    eax,ebx
c0014485:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001448f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014499:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144a3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144ad:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144b7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144c1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144cb:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144d5:	58                   	pop    eax
c00144d6:	5b                   	pop    ebx
c00144d7:	5e                   	pop    esi
c00144d8:	c3                   	ret    
c00144d9:	83 ec 0c             	sub    esp,0xc
c00144dc:	53                   	push   ebx
c00144dd:	e8 06 fb ff ff       	call   c0013fe8 <Device::getName()>
c00144e2:	83 c4 10             	add    esp,0x10
c00144e5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144e8:	75 8e                	jne    c0014478 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144ea:	83 fe 0f             	cmp    esi,0xf
c00144ed:	7f 09                	jg     c00144f8 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00144ef:	0f b6 b6 e0 bf 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4020]
c00144f6:	eb 80                	jmp    c0014478 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144f8:	83 ec 0c             	sub    esp,0xc
c00144fb:	68 28 9a 02 c0       	push   0xc0029a28
c0014500:	e8 be 55 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0014505:	83 c4 10             	add    esp,0x10
c0014508:	e9 6b ff ff ff       	jmp    c0014478 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001450d:	90                   	nop

c001450e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001450e:	56                   	push   esi
c001450f:	53                   	push   ebx
c0014510:	52                   	push   edx
c0014511:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014515:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014519:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001451e:	75 3a                	jne    c001455a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014520:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014524:	8d 50 20             	lea    edx,[eax+0x20]
c0014527:	c1 e2 04             	shl    edx,0x4
c001452a:	8d 04 16             	lea    eax,[esi+edx*1]
c001452d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014531:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014537:	74 0b                	je     c0014544 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014539:	83 c0 04             	add    eax,0x4
c001453c:	39 d0                	cmp    eax,edx
c001453e:	75 f1                	jne    c0014531 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014540:	58                   	pop    eax
c0014541:	5b                   	pop    ebx
c0014542:	5e                   	pop    esi
c0014543:	c3                   	ret    
c0014544:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001454e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014558:	eb df                	jmp    c0014539 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001455a:	83 ec 0c             	sub    esp,0xc
c001455d:	56                   	push   esi
c001455e:	e8 85 fa ff ff       	call   c0013fe8 <Device::getName()>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014569:	75 b5                	jne    c0014520 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001456b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014570:	7f 11                	jg     c0014583 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014572:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014576:	0f b6 80 e0 bf 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4020]
c001457d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014581:	eb 9d                	jmp    c0014520 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014583:	83 ec 0c             	sub    esp,0xc
c0014586:	68 28 9a 02 c0       	push   0xc0029a28
c001458b:	e8 33 55 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0014590:	83 c4 10             	add    esp,0x10
c0014593:	eb 8b                	jmp    c0014520 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014595 <nmiHandler(regs*, void*)>:
c0014595:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001459a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001459e:	e9 cd a7 ff ff       	jmp    c000ed70 <Computer::handleNMI()>

c00145a3 <int_handler>:
c00145a3:	55                   	push   ebp
c00145a4:	57                   	push   edi
c00145a5:	56                   	push   esi
c00145a6:	53                   	push   ebx
c00145a7:	83 ec 0c             	sub    esp,0xc
c00145aa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145ae:	80 3d c0 d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8c0,0x0
c00145b5:	74 0b                	je     c00145c2 <int_handler+0x1f>
c00145b7:	fa                   	cli    
c00145b8:	f4                   	hlt    
c00145b9:	80 3d c0 d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8c0,0x0
c00145c0:	75 f5                	jne    c00145b7 <int_handler+0x14>
c00145c2:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c00145c7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145d0:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00145d6:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145d9:	83 f8 17             	cmp    eax,0x17
c00145dc:	77 13                	ja     c00145f1 <int_handler+0x4e>
c00145de:	83 ec 08             	sub    esp,0x8
c00145e1:	8b 17                	mov    edx,DWORD PTR [edi]
c00145e3:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145e6:	0f b6 c0             	movzx  eax,al
c00145e9:	50                   	push   eax
c00145ea:	57                   	push   edi
c00145eb:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00145ee:	83 c4 10             	add    esp,0x10
c00145f1:	83 c3 15             	add    ebx,0x15
c00145f4:	c1 e3 04             	shl    ebx,0x4
c00145f7:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00145fb:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014602:	31 db                	xor    ebx,ebx
c0014604:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014608:	85 c0                	test   eax,eax
c001460a:	74 13                	je     c001461f <int_handler+0x7c>
c001460c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001460f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014613:	74 1c                	je     c0014631 <int_handler+0x8e>
c0014615:	83 ec 08             	sub    esp,0x8
c0014618:	52                   	push   edx
c0014619:	56                   	push   esi
c001461a:	ff d0                	call   eax
c001461c:	83 c4 10             	add    esp,0x10
c001461f:	43                   	inc    ebx
c0014620:	83 fb 04             	cmp    ebx,0x4
c0014623:	75 df                	jne    c0014604 <int_handler+0x61>
c0014625:	83 c4 0c             	add    esp,0xc
c0014628:	31 c0                	xor    eax,eax
c001462a:	5b                   	pop    ebx
c001462b:	31 d2                	xor    edx,edx
c001462d:	5e                   	pop    esi
c001462e:	5f                   	pop    edi
c001462f:	5d                   	pop    ebp
c0014630:	c3                   	ret    
c0014631:	83 ec 08             	sub    esp,0x8
c0014634:	52                   	push   edx
c0014635:	56                   	push   esi
c0014636:	ff d0                	call   eax
c0014638:	83 c4 10             	add    esp,0x10
c001463b:	83 c4 0c             	add    esp,0xc
c001463e:	5b                   	pop    ebx
c001463f:	5e                   	pop    esi
c0014640:	5f                   	pop    edi
c0014641:	5d                   	pop    ebp
c0014642:	c3                   	ret    
c0014643:	90                   	nop

c0014644 <InterruptController::InterruptController(char const*)>:
c0014644:	83 ec 1c             	sub    esp,0x1c
c0014647:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464b:	83 ec 08             	sub    esp,0x8
c001464e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014652:	50                   	push   eax
c0014653:	e8 94 f8 ff ff       	call   c0013eec <Device::Device(char const*)>
c0014658:	83 c4 10             	add    esp,0x10
c001465b:	ba 5c 9c 02 c0       	mov    edx,0xc0029c5c
c0014660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014664:	89 10                	mov    DWORD PTR [eax],edx
c0014666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001466a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014674:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001467c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014684:	7f 5e                	jg     c00146e4 <InterruptController::InterruptController(char const*)+0xa0>
c0014686:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001468e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014693:	7f 49                	jg     c00146de <InterruptController::InterruptController(char const*)+0x9a>
c0014695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014699:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001469d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146a8:	01 ca                	add    edx,ecx
c00146aa:	83 c2 54             	add    edx,0x54
c00146ad:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146bd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146c8:	01 ca                	add    edx,ecx
c00146ca:	81 c2 54 04 00 00    	add    edx,0x454
c00146d0:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146d8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00146dc:	eb b0                	jmp    c001468e <InterruptController::InterruptController(char const*)+0x4a>
c00146de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00146e2:	eb 98                	jmp    c001467c <InterruptController::InterruptController(char const*)+0x38>
c00146e4:	90                   	nop
c00146e5:	83 c4 1c             	add    esp,0x1c
c00146e8:	c3                   	ret    
c00146e9:	90                   	nop

c00146ea <InterruptController::~InterruptController()>:
c00146ea:	83 ec 0c             	sub    esp,0xc
c00146ed:	ba 5c 9c 02 c0       	mov    edx,0xc0029c5c
c00146f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f6:	89 10                	mov    DWORD PTR [eax],edx
c00146f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fc:	83 ec 0c             	sub    esp,0xc
c00146ff:	50                   	push   eax
c0014700:	e8 c9 f4 ff ff       	call   c0013bce <Device::~Device()>
c0014705:	83 c4 10             	add    esp,0x10
c0014708:	90                   	nop
c0014709:	83 c4 0c             	add    esp,0xc
c001470c:	c3                   	ret    
c001470d:	90                   	nop

c001470e <InterruptController::~InterruptController()>:
c001470e:	83 ec 0c             	sub    esp,0xc
c0014711:	83 ec 0c             	sub    esp,0xc
c0014714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014718:	e8 cd ff ff ff       	call   c00146ea <InterruptController::~InterruptController()>
c001471d:	83 c4 10             	add    esp,0x10
c0014720:	83 ec 08             	sub    esp,0x8
c0014723:	68 58 21 00 00       	push   0x2158
c0014728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001472c:	e8 c4 e0 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0014731:	83 c4 10             	add    esp,0x10
c0014734:	83 c4 0c             	add    esp,0xc
c0014737:	c3                   	ret    

c0014738 <displayDebugInfo(regs*)>:
c0014738:	55                   	push   ebp
c0014739:	57                   	push   edi
c001473a:	56                   	push   esi
c001473b:	53                   	push   ebx
c001473c:	83 ec 24             	sub    esp,0x24
c001473f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014743:	0f 20 c2             	mov    edx,cr0
c0014746:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001474a:	0f 20 d7             	mov    edi,cr2
c001474d:	0f 20 de             	mov    esi,cr3
c0014750:	0f 20 e5             	mov    ebp,cr4
c0014753:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014756:	68 62 9a 02 c0       	push   0xc0029a62
c001475b:	e8 75 e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014760:	58                   	pop    eax
c0014761:	5a                   	pop    edx
c0014762:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014765:	68 6d 9a 02 c0       	push   0xc0029a6d
c001476a:	e8 66 e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001476f:	59                   	pop    ecx
c0014770:	58                   	pop    eax
c0014771:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014774:	68 78 9a 02 c0       	push   0xc0029a78
c0014779:	e8 57 e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001477e:	58                   	pop    eax
c001477f:	5a                   	pop    edx
c0014780:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014783:	68 83 9a 02 c0       	push   0xc0029a83
c0014788:	e8 48 e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001478d:	59                   	pop    ecx
c001478e:	58                   	pop    eax
c001478f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014792:	68 8e 9a 02 c0       	push   0xc0029a8e
c0014797:	e8 39 e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001479c:	58                   	pop    eax
c001479d:	5a                   	pop    edx
c001479e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147a1:	68 99 9a 02 c0       	push   0xc0029a99
c00147a6:	e8 2a e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147ab:	59                   	pop    ecx
c00147ac:	58                   	pop    eax
c00147ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147b0:	68 a4 9a 02 c0       	push   0xc0029aa4
c00147b5:	e8 1b e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147ba:	58                   	pop    eax
c00147bb:	5a                   	pop    edx
c00147bc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147bf:	68 af 9a 02 c0       	push   0xc0029aaf
c00147c4:	e8 0c e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147c9:	59                   	pop    ecx
c00147ca:	58                   	pop    eax
c00147cb:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147ce:	68 ba 9a 02 c0       	push   0xc0029aba
c00147d3:	e8 fd e0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147d8:	58                   	pop    eax
c00147d9:	5a                   	pop    edx
c00147da:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147dd:	68 c9 9a 02 c0       	push   0xc0029ac9
c00147e2:	e8 ee e0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147e7:	59                   	pop    ecx
c00147e8:	58                   	pop    eax
c00147e9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147ec:	68 d4 9a 02 c0       	push   0xc0029ad4
c00147f1:	e8 df e0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147f6:	58                   	pop    eax
c00147f7:	5a                   	pop    edx
c00147f8:	57                   	push   edi
c00147f9:	68 df 9a 02 c0       	push   0xc0029adf
c00147fe:	e8 d2 e0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014803:	59                   	pop    ecx
c0014804:	58                   	pop    eax
c0014805:	56                   	push   esi
c0014806:	68 ea 9a 02 c0       	push   0xc0029aea
c001480b:	e8 c5 e0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014810:	58                   	pop    eax
c0014811:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014816:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001481c:	e8 76 c2 ff ff       	call   c0010a97 <setActiveTerminal(VgaText*)>
c0014821:	58                   	pop    eax
c0014822:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014825:	5a                   	pop    edx
c0014826:	c1 e0 05             	shl    eax,0x5
c0014829:	05 40 bd 02 c0       	add    eax,0xc002bd40
c001482e:	50                   	push   eax
c001482f:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014834:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483a:	e8 77 c6 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c001483f:	59                   	pop    ecx
c0014840:	58                   	pop    eax
c0014841:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014846:	68 f5 9a 02 c0       	push   0xc0029af5
c001484b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014851:	e8 60 c6 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014856:	58                   	pop    eax
c0014857:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001485c:	5a                   	pop    edx
c001485d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014860:	83 c0 0c             	add    eax,0xc
c0014863:	50                   	push   eax
c0014864:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014869:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486f:	e8 42 c6 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014874:	59                   	pop    ecx
c0014875:	58                   	pop    eax
c0014876:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c001487b:	68 fe 9a 02 c0       	push   0xc0029afe
c0014880:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014886:	e8 2b c6 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c001488b:	58                   	pop    eax
c001488c:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014891:	5a                   	pop    edx
c0014892:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014895:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489b:	e8 3c c6 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00148a0:	59                   	pop    ecx
c00148a1:	58                   	pop    eax
c00148a2:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c00148a7:	68 06 9b 02 c0       	push   0xc0029b06
c00148ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b2:	e8 ff c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c00148b7:	58                   	pop    eax
c00148b8:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c00148bd:	5a                   	pop    edx
c00148be:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c7:	e8 10 c6 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00148cc:	59                   	pop    ecx
c00148cd:	58                   	pop    eax
c00148ce:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c00148d3:	68 0e 9b 02 c0       	push   0xc0029b0e
c00148d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148de:	e8 d3 c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c00148e3:	58                   	pop    eax
c00148e4:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c00148e9:	5a                   	pop    edx
c00148ea:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f3:	e8 e4 c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00148f8:	59                   	pop    ecx
c00148f9:	58                   	pop    eax
c00148fa:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c00148ff:	68 16 9b 02 c0       	push   0xc0029b16
c0014904:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001490a:	e8 a7 c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c001490f:	58                   	pop    eax
c0014910:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014915:	5a                   	pop    edx
c0014916:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014919:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491f:	e8 b8 c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014924:	59                   	pop    ecx
c0014925:	58                   	pop    eax
c0014926:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c001492b:	68 1e 9b 02 c0       	push   0xc0029b1e
c0014930:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014936:	e8 7b c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c001493b:	58                   	pop    eax
c001493c:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014941:	5a                   	pop    edx
c0014942:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014945:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494b:	e8 8c c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014950:	59                   	pop    ecx
c0014951:	58                   	pop    eax
c0014952:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014957:	68 26 9b 02 c0       	push   0xc0029b26
c001495c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014962:	e8 4f c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014967:	58                   	pop    eax
c0014968:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c001496d:	5a                   	pop    edx
c001496e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014971:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014977:	e8 60 c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c001497c:	59                   	pop    ecx
c001497d:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014982:	5b                   	pop    ebx
c0014983:	68 2e 9b 02 c0       	push   0xc0029b2e
c0014988:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498e:	e8 23 c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014993:	58                   	pop    eax
c0014994:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014999:	5a                   	pop    edx
c001499a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001499e:	52                   	push   edx
c001499f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a5:	e8 32 c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00149aa:	59                   	pop    ecx
c00149ab:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c00149b0:	5b                   	pop    ebx
c00149b1:	68 37 9b 02 c0       	push   0xc0029b37
c00149b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bc:	e8 f5 c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c00149c1:	58                   	pop    eax
c00149c2:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c00149c7:	5a                   	pop    edx
c00149c8:	57                   	push   edi
c00149c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149cf:	e8 08 c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00149d4:	59                   	pop    ecx
c00149d5:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c00149da:	5b                   	pop    ebx
c00149db:	68 3f 9b 02 c0       	push   0xc0029b3f
c00149e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e6:	e8 cb c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c00149eb:	5f                   	pop    edi
c00149ec:	58                   	pop    eax
c00149ed:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c00149f2:	56                   	push   esi
c00149f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f9:	e8 de c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00149fe:	58                   	pop    eax
c00149ff:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014a04:	5a                   	pop    edx
c0014a05:	68 47 9b 02 c0       	push   0xc0029b47
c0014a0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a10:	e8 a1 c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014a15:	59                   	pop    ecx
c0014a16:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014a1b:	5b                   	pop    ebx
c0014a1c:	55                   	push   ebp
c0014a1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a23:	e8 b4 c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014a28:	5e                   	pop    esi
c0014a29:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014a2e:	5f                   	pop    edi
c0014a2f:	68 4f 9b 02 c0       	push   0xc0029b4f
c0014a34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3a:	e8 77 c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014a3f:	0f 21 c0             	mov    eax,db0
c0014a42:	5d                   	pop    ebp
c0014a43:	5a                   	pop    edx
c0014a44:	50                   	push   eax
c0014a45:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014a4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a50:	e8 87 c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014a55:	59                   	pop    ecx
c0014a56:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014a5b:	5b                   	pop    ebx
c0014a5c:	68 58 9b 02 c0       	push   0xc0029b58
c0014a61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a67:	e8 4a c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014a6c:	0f 21 c8             	mov    eax,db1
c0014a6f:	5e                   	pop    esi
c0014a70:	5f                   	pop    edi
c0014a71:	50                   	push   eax
c0014a72:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014a77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7d:	e8 5a c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014a82:	5d                   	pop    ebp
c0014a83:	58                   	pop    eax
c0014a84:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014a89:	68 60 9b 02 c0       	push   0xc0029b60
c0014a8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a94:	e8 1d c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014a99:	0f 21 d0             	mov    eax,db2
c0014a9c:	5a                   	pop    edx
c0014a9d:	59                   	pop    ecx
c0014a9e:	50                   	push   eax
c0014a9f:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014aa4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aaa:	e8 2d c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014aaf:	5b                   	pop    ebx
c0014ab0:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014ab5:	5e                   	pop    esi
c0014ab6:	68 68 9b 02 c0       	push   0xc0029b68
c0014abb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac1:	e8 f0 c3 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014ac6:	0f 21 d8             	mov    eax,db3
c0014ac9:	5f                   	pop    edi
c0014aca:	5d                   	pop    ebp
c0014acb:	50                   	push   eax
c0014acc:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014ad1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad7:	e8 00 c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014adc:	58                   	pop    eax
c0014add:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014ae2:	5a                   	pop    edx
c0014ae3:	68 70 9b 02 c0       	push   0xc0029b70
c0014ae8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aee:	e8 c3 c3 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014af3:	0f 21 f0             	mov    eax,db6
c0014af6:	59                   	pop    ecx
c0014af7:	5b                   	pop    ebx
c0014af8:	50                   	push   eax
c0014af9:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014afe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b04:	e8 d3 c3 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014b09:	5e                   	pop    esi
c0014b0a:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014b0f:	5f                   	pop    edi
c0014b10:	68 78 9b 02 c0       	push   0xc0029b78
c0014b15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1b:	e8 96 c3 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014b20:	0f 21 f8             	mov    eax,db7
c0014b23:	5d                   	pop    ebp
c0014b24:	5a                   	pop    edx
c0014b25:	50                   	push   eax
c0014b26:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0014b2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b31:	e8 a6 c3 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014b36:	fa                   	cli    
c0014b37:	f4                   	hlt    
c0014b38:	83 c4 10             	add    esp,0x10
c0014b3b:	eb fe                	jmp    c0014b3b <displayDebugInfo(regs*)+0x403>

c0014b3d <x87EmulHandler(regs*, void*)>:
c0014b3d:	53                   	push   ebx
c0014b3e:	83 ec 14             	sub    esp,0x14
c0014b41:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b45:	53                   	push   ebx
c0014b46:	e8 bb a1 00 00       	call   c001ed06 <Vm::x87Handler(regs*)>
c0014b4b:	83 c4 10             	add    esp,0x10
c0014b4e:	84 c0                	test   al,al
c0014b50:	74 05                	je     c0014b57 <x87EmulHandler(regs*, void*)+0x1a>
c0014b52:	83 c4 08             	add    esp,0x8
c0014b55:	5b                   	pop    ebx
c0014b56:	c3                   	ret    
c0014b57:	83 ec 0c             	sub    esp,0xc
c0014b5a:	68 80 9b 02 c0       	push   0xc0029b80
c0014b5f:	e8 71 dd ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014b64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b67:	e8 cc fb ff ff       	call   c0014738 <displayDebugInfo(regs*)>

c0014b6c <gpFault(regs*, void*)>:
c0014b6c:	53                   	push   ebx
c0014b6d:	83 ec 14             	sub    esp,0x14
c0014b70:	c7 05 30 cf 02 c0 83 e0 01 c0 	mov    DWORD PTR ds:0xc002cf30,0xc001e083
c0014b7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b7e:	53                   	push   ebx
c0014b7f:	e8 ff 94 00 00       	call   c001e083 <Vm::faultHandler(regs*)>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	84 c0                	test   al,al
c0014b89:	74 05                	je     c0014b90 <gpFault(regs*, void*)+0x24>
c0014b8b:	83 c4 08             	add    esp,0x8
c0014b8e:	5b                   	pop    ebx
c0014b8f:	c3                   	ret    
c0014b90:	83 ec 0c             	sub    esp,0xc
c0014b93:	68 96 9b 02 c0       	push   0xc0029b96
c0014b98:	e8 38 dd ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014b9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ba0:	e8 93 fb ff ff       	call   c0014738 <displayDebugInfo(regs*)>

c0014ba5 <pgFault(regs*, void*)>:
c0014ba5:	83 ec 18             	sub    esp,0x18
c0014ba8:	68 b1 9b 02 c0       	push   0xc0029bb1
c0014bad:	e8 23 dd ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014bb2:	58                   	pop    eax
c0014bb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bb7:	e8 7c fb ff ff       	call   c0014738 <displayDebugInfo(regs*)>

c0014bbc <otherISRHandler(regs*, void*)>:
c0014bbc:	53                   	push   ebx
c0014bbd:	83 ec 0c             	sub    esp,0xc
c0014bc0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014bc4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014bc7:	50                   	push   eax
c0014bc8:	50                   	push   eax
c0014bc9:	68 be 9b 02 c0       	push   0xc0029bbe
c0014bce:	e8 02 dd ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014bd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bd6:	e8 5d fb ff ff       	call   c0014738 <displayDebugInfo(regs*)>

c0014bdb <opcodeFault(regs*, void*)>:
c0014bdb:	55                   	push   ebp
c0014bdc:	89 e5                	mov    ebp,esp
c0014bde:	56                   	push   esi
c0014bdf:	53                   	push   ebx
c0014be0:	83 ec 40             	sub    esp,0x40
c0014be3:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0014be8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bee:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014bf4:	84 c0                	test   al,al
c0014bf6:	74 24                	je     c0014c1c <opcodeFault(regs*, void*)+0x41>
c0014bf8:	83 ec 0c             	sub    esp,0xc
c0014bfb:	68 dc 9b 02 c0       	push   0xc0029bdc
c0014c00:	e8 d0 dc ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c0e:	8d 50 19             	lea    edx,[eax+0x19]
c0014c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c14:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c17:	e9 77 05 00 00       	jmp    c0015193 <opcodeFault(regs*, void*)+0x5b8>
c0014c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c22:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014c25:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014c29:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c30:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c33:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014c36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c39:	8a 00                	mov    al,BYTE PTR [eax]
c0014c3b:	3c f0                	cmp    al,0xf0
c0014c3d:	75 17                	jne    c0014c56 <opcodeFault(regs*, void*)+0x7b>
c0014c3f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c45:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c48:	8d 50 01             	lea    edx,[eax+0x1]
c0014c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c51:	e9 da 00 00 00       	jmp    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014c56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c59:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5b:	3c f2                	cmp    al,0xf2
c0014c5d:	74 09                	je     c0014c68 <opcodeFault(regs*, void*)+0x8d>
c0014c5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c62:	8a 00                	mov    al,BYTE PTR [eax]
c0014c64:	3c f3                	cmp    al,0xf3
c0014c66:	75 1b                	jne    c0014c83 <opcodeFault(regs*, void*)+0xa8>
c0014c68:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c6c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c75:	8d 50 01             	lea    edx,[eax+0x1]
c0014c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c7e:	e9 ad 00 00 00       	jmp    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014c83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c86:	8a 00                	mov    al,BYTE PTR [eax]
c0014c88:	3c 66                	cmp    al,0x66
c0014c8a:	75 1f                	jne    c0014cab <opcodeFault(regs*, void*)+0xd0>
c0014c8c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c90:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014c94:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c9d:	8d 50 01             	lea    edx,[eax+0x1]
c0014ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ca6:	e9 85 00 00 00       	jmp    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014cab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cae:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb0:	3c 67                	cmp    al,0x67
c0014cb2:	75 18                	jne    c0014ccc <opcodeFault(regs*, void*)+0xf1>
c0014cb4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cb8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc1:	8d 50 01             	lea    edx,[eax+0x1]
c0014cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cca:	eb 64                	jmp    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014ccc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd1:	3c 2e                	cmp    al,0x2e
c0014cd3:	74 09                	je     c0014cde <opcodeFault(regs*, void*)+0x103>
c0014cd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0014cda:	3c 3e                	cmp    al,0x3e
c0014cdc:	75 18                	jne    c0014cf6 <opcodeFault(regs*, void*)+0x11b>
c0014cde:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ce2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ceb:	8d 50 01             	lea    edx,[eax+0x1]
c0014cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf4:	eb 3a                	jmp    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014cf6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf9:	8a 00                	mov    al,BYTE PTR [eax]
c0014cfb:	3c 36                	cmp    al,0x36
c0014cfd:	74 1b                	je     c0014d1a <opcodeFault(regs*, void*)+0x13f>
c0014cff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d02:	8a 00                	mov    al,BYTE PTR [eax]
c0014d04:	3c 26                	cmp    al,0x26
c0014d06:	74 12                	je     c0014d1a <opcodeFault(regs*, void*)+0x13f>
c0014d08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0d:	3c 64                	cmp    al,0x64
c0014d0f:	74 09                	je     c0014d1a <opcodeFault(regs*, void*)+0x13f>
c0014d11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d14:	8a 00                	mov    al,BYTE PTR [eax]
c0014d16:	3c 65                	cmp    al,0x65
c0014d18:	75 16                	jne    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014d1a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d1e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d27:	8d 50 01             	lea    edx,[eax+0x1]
c0014d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d33:	8a 00                	mov    al,BYTE PTR [eax]
c0014d35:	3c 0f                	cmp    al,0xf
c0014d37:	0f 85 ad 00 00 00    	jne    c0014dea <opcodeFault(regs*, void*)+0x20f>
c0014d3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d40:	40                   	inc    eax
c0014d41:	8a 00                	mov    al,BYTE PTR [eax]
c0014d43:	3c c2                	cmp    al,0xc2
c0014d45:	74 0e                	je     c0014d55 <opcodeFault(regs*, void*)+0x17a>
c0014d47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4a:	40                   	inc    eax
c0014d4b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4d:	3c c3                	cmp    al,0xc3
c0014d4f:	0f 85 95 00 00 00    	jne    c0014dea <opcodeFault(regs*, void*)+0x20f>
c0014d55:	83 ec 0c             	sub    esp,0xc
c0014d58:	68 ff 9b 02 c0       	push   0xc0029bff
c0014d5d:	e8 73 db ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d68:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d6b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d71:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d74:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d7a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d7c:	8d 50 fe             	lea    edx,[eax-0x2]
c0014d7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d82:	88 10                	mov    BYTE PTR [eax],dl
c0014d84:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014d87:	50                   	push   eax
c0014d88:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014d8b:	50                   	push   eax
c0014d8c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014d8f:	50                   	push   eax
c0014d90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d93:	e8 5c 45 00 00       	call   c00192f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d98:	83 c4 10             	add    esp,0x10
c0014d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da1:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014da4:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014da7:	01 d0                	add    eax,edx
c0014da9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014dac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014daf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014db5:	48                   	dec    eax
c0014db6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014dbf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc5:	83 ec 04             	sub    esp,0x4
c0014dc8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014dcb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014dce:	50                   	push   eax
c0014dcf:	e8 e0 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014dd4:	83 c4 10             	add    esp,0x10
c0014dd7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014dda:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ddd:	01 c2                	add    edx,eax
c0014ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014de5:	e9 a9 03 00 00       	jmp    c0015193 <opcodeFault(regs*, void*)+0x5b8>
c0014dea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ded:	8a 00                	mov    al,BYTE PTR [eax]
c0014def:	3c 0f                	cmp    al,0xf
c0014df1:	0f 85 8b 01 00 00    	jne    c0014f82 <opcodeFault(regs*, void*)+0x3a7>
c0014df7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfa:	40                   	inc    eax
c0014dfb:	8a 00                	mov    al,BYTE PTR [eax]
c0014dfd:	3c c7                	cmp    al,0xc7
c0014dff:	0f 86 7d 01 00 00    	jbe    c0014f82 <opcodeFault(regs*, void*)+0x3a7>
c0014e05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e08:	40                   	inc    eax
c0014e09:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0b:	3c cf                	cmp    al,0xcf
c0014e0d:	0f 87 6f 01 00 00    	ja     c0014f82 <opcodeFault(regs*, void*)+0x3a7>
c0014e13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e16:	40                   	inc    eax
c0014e17:	8a 00                	mov    al,BYTE PTR [eax]
c0014e19:	83 c0 38             	add    eax,0x38
c0014e1c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014e1f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e23:	75 0b                	jne    c0014e30 <opcodeFault(regs*, void*)+0x255>
c0014e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e28:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e2b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e2e:	eb 75                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e30:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e34:	75 0b                	jne    c0014e41 <opcodeFault(regs*, void*)+0x266>
c0014e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e39:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e3c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e3f:	eb 64                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e41:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e45:	75 0b                	jne    c0014e52 <opcodeFault(regs*, void*)+0x277>
c0014e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e50:	eb 53                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e52:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e56:	75 0b                	jne    c0014e63 <opcodeFault(regs*, void*)+0x288>
c0014e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e5e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e61:	eb 42                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e63:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e67:	75 0b                	jne    c0014e74 <opcodeFault(regs*, void*)+0x299>
c0014e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014e6f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e72:	eb 31                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e74:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e78:	75 0b                	jne    c0014e85 <opcodeFault(regs*, void*)+0x2aa>
c0014e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014e80:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e83:	eb 20                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e85:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e89:	75 0b                	jne    c0014e96 <opcodeFault(regs*, void*)+0x2bb>
c0014e8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014e91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e94:	eb 0f                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e96:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e9a:	75 09                	jne    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014ea2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ea5:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014ea9:	74 10                	je     c0014ebb <opcodeFault(regs*, void*)+0x2e0>
c0014eab:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014eb2:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014eb9:	eb 2d                	jmp    c0014ee8 <opcodeFault(regs*, void*)+0x30d>
c0014ebb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ebe:	c1 e0 18             	shl    eax,0x18
c0014ec1:	89 c2                	mov    edx,eax
c0014ec3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ec6:	c1 e0 08             	shl    eax,0x8
c0014ec9:	25 00 00 ff 00       	and    eax,0xff0000
c0014ece:	09 c2                	or     edx,eax
c0014ed0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ed3:	c1 e8 08             	shr    eax,0x8
c0014ed6:	25 00 ff 00 00       	and    eax,0xff00
c0014edb:	09 c2                	or     edx,eax
c0014edd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ee0:	c1 e8 18             	shr    eax,0x18
c0014ee3:	09 d0                	or     eax,edx
c0014ee5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ee8:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014eec:	75 0b                	jne    c0014ef9 <opcodeFault(regs*, void*)+0x31e>
c0014eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ef4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014ef7:	eb 75                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014ef9:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014efd:	75 0b                	jne    c0014f0a <opcodeFault(regs*, void*)+0x32f>
c0014eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f05:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014f08:	eb 64                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f0a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f0e:	75 0b                	jne    c0014f1b <opcodeFault(regs*, void*)+0x340>
c0014f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f13:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f16:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f19:	eb 53                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f1b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f1f:	75 0b                	jne    c0014f2c <opcodeFault(regs*, void*)+0x351>
c0014f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f24:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f27:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014f2a:	eb 42                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f2c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f30:	75 0b                	jne    c0014f3d <opcodeFault(regs*, void*)+0x362>
c0014f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f35:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f38:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014f3b:	eb 31                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f3d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f41:	75 0b                	jne    c0014f4e <opcodeFault(regs*, void*)+0x373>
c0014f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f46:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f49:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014f4c:	eb 20                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f4e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f52:	75 0b                	jne    c0014f5f <opcodeFault(regs*, void*)+0x384>
c0014f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f57:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f5a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014f5d:	eb 0f                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f5f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f63:	75 09                	jne    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f68:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f6b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f71:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f74:	8d 50 02             	lea    edx,[eax+0x2]
c0014f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f7d:	e9 11 02 00 00       	jmp    c0015193 <opcodeFault(regs*, void*)+0x5b8>
c0014f82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f85:	8a 00                	mov    al,BYTE PTR [eax]
c0014f87:	3c 0f                	cmp    al,0xf
c0014f89:	0f 85 76 01 00 00    	jne    c0015105 <opcodeFault(regs*, void*)+0x52a>
c0014f8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f92:	40                   	inc    eax
c0014f93:	8a 00                	mov    al,BYTE PTR [eax]
c0014f95:	3c c7                	cmp    al,0xc7
c0014f97:	0f 85 68 01 00 00    	jne    c0015105 <opcodeFault(regs*, void*)+0x52a>
c0014f9d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fa6:	8d 50 01             	lea    edx,[eax+0x1]
c0014fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014faf:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014fb2:	50                   	push   eax
c0014fb3:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014fb6:	50                   	push   eax
c0014fb7:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014fba:	50                   	push   eax
c0014fbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fbe:	e8 31 43 00 00       	call   c00192f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014fc3:	83 c4 10             	add    esp,0x10
c0014fc6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014fc9:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014fcc:	83 f0 01             	xor    eax,0x1
c0014fcf:	84 c0                	test   al,al
c0014fd1:	0f 84 2e 01 00 00    	je     c0015105 <opcodeFault(regs*, void*)+0x52a>
c0014fd7:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014fda:	3c 01                	cmp    al,0x1
c0014fdc:	0f 85 23 01 00 00    	jne    c0015105 <opcodeFault(regs*, void*)+0x52a>
c0014fe2:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014fe5:	83 f0 01             	xor    eax,0x1
c0014fe8:	84 c0                	test   al,al
c0014fea:	0f 84 15 01 00 00    	je     c0015105 <opcodeFault(regs*, void*)+0x52a>
c0014ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ff6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ff9:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015000:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015003:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015006:	89 c2                	mov    edx,eax
c0015008:	b8 00 00 00 00       	mov    eax,0x0
c001500d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015010:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015016:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015019:	ba 00 00 00 00       	mov    edx,0x0
c001501e:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015021:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015027:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001502a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001502d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015034:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015037:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001503a:	89 c2                	mov    edx,eax
c001503c:	b8 00 00 00 00       	mov    eax,0x0
c0015041:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015044:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001504d:	ba 00 00 00 00       	mov    edx,0x0
c0015052:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015055:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015058:	e8 15 80 00 00       	call   c001d072 <lockScheduler()>
c001505d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015060:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015063:	8b 00                	mov    eax,DWORD PTR [eax]
c0015065:	89 c1                	mov    ecx,eax
c0015067:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001506a:	89 cb                	mov    ebx,ecx
c001506c:	89 d0                	mov    eax,edx
c001506e:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015071:	89 c6                	mov    esi,eax
c0015073:	89 f0                	mov    eax,esi
c0015075:	09 d8                	or     eax,ebx
c0015077:	85 c0                	test   eax,eax
c0015079:	75 21                	jne    c001509c <opcodeFault(regs*, void*)+0x4c1>
c001507b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001507e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015081:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015084:	89 01                	mov    DWORD PTR [ecx],eax
c0015086:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001508f:	83 c8 40             	or     eax,0x40
c0015092:	89 c2                	mov    edx,eax
c0015094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015097:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001509a:	eb 3e                	jmp    c00150da <opcodeFault(regs*, void*)+0x4ff>
c001509c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001509f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00150a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150a4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150a7:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150aa:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00150ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00150b3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150b6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150b9:	89 d0                	mov    eax,edx
c00150bb:	31 d2                	xor    edx,edx
c00150bd:	89 c3                	mov    ebx,eax
c00150bf:	89 d6                	mov    esi,edx
c00150c1:	89 da                	mov    edx,ebx
c00150c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00150c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150cf:	83 e0 bf             	and    eax,0xffffffbf
c00150d2:	89 c2                	mov    edx,eax
c00150d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150da:	e8 95 7f 00 00       	call   c001d074 <unlockScheduler()>
c00150df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150e5:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00150e8:	01 c2                	add    edx,eax
c00150ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150f0:	83 ec 0c             	sub    esp,0xc
c00150f3:	68 0e 9c 02 c0       	push   0xc0029c0e
c00150f8:	e8 d8 d7 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	e9 8e 00 00 00       	jmp    c0015193 <opcodeFault(regs*, void*)+0x5b8>
c0015105:	83 ec 0c             	sub    esp,0xc
c0015108:	68 21 9c 02 c0       	push   0xc0029c21
c001510d:	e8 c3 d7 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0015112:	83 c4 10             	add    esp,0x10
c0015115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015118:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001511b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015121:	c1 e0 04             	shl    eax,0x4
c0015124:	01 d0                	add    eax,edx
c0015126:	83 c0 03             	add    eax,0x3
c0015129:	8a 00                	mov    al,BYTE PTR [eax]
c001512b:	0f b6 d8             	movzx  ebx,al
c001512e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015131:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015137:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001513a:	c1 e0 04             	shl    eax,0x4
c001513d:	01 d0                	add    eax,edx
c001513f:	83 c0 02             	add    eax,0x2
c0015142:	8a 00                	mov    al,BYTE PTR [eax]
c0015144:	0f b6 c8             	movzx  ecx,al
c0015147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001514d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015150:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015153:	c1 e0 04             	shl    eax,0x4
c0015156:	01 d0                	add    eax,edx
c0015158:	40                   	inc    eax
c0015159:	8a 00                	mov    al,BYTE PTR [eax]
c001515b:	0f b6 d0             	movzx  edx,al
c001515e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015161:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015167:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001516a:	c1 e0 04             	shl    eax,0x4
c001516d:	01 f0                	add    eax,esi
c001516f:	8a 00                	mov    al,BYTE PTR [eax]
c0015171:	0f b6 c0             	movzx  eax,al
c0015174:	83 ec 0c             	sub    esp,0xc
c0015177:	53                   	push   ebx
c0015178:	51                   	push   ecx
c0015179:	52                   	push   edx
c001517a:	50                   	push   eax
c001517b:	68 34 9c 02 c0       	push   0xc0029c34
c0015180:	e8 50 d7 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0015185:	83 c4 20             	add    esp,0x20
c0015188:	83 ec 0c             	sub    esp,0xc
c001518b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001518e:	e8 a5 f5 ff ff       	call   c0014738 <displayDebugInfo(regs*)>
c0015193:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015196:	5b                   	pop    ebx
c0015197:	5e                   	pop    esi
c0015198:	5d                   	pop    ebp
c0015199:	c3                   	ret    

c001519a <displayProgramFault(char const*)>:
c001519a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001519f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151a2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00151a8:	85 c0                	test   eax,eax
c00151aa:	74 15                	je     c00151c1 <displayProgramFault(char const*)+0x27>
c00151ac:	83 ec 0c             	sub    esp,0xc
c00151af:	6a 04                	push   0x4
c00151b1:	6a 0f                	push   0xf
c00151b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151b7:	50                   	push   eax
c00151b8:	e8 bb b9 ff ff       	call   c0010b78 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00151bd:	83 c4 1c             	add    esp,0x1c
c00151c0:	c3                   	ret    
c00151c1:	c3                   	ret    

c00151c2 <setupInterruptController()>:
c00151c2:	55                   	push   ebp
c00151c3:	89 e5                	mov    ebp,esp
c00151c5:	53                   	push   ebx
c00151c6:	83 ec 24             	sub    esp,0x24
c00151c9:	b8 00 00 00 00       	mov    eax,0x0
c00151ce:	85 c0                	test   eax,eax
c00151d0:	0f 95 c0             	setne  al
c00151d3:	84 c0                	test   al,al
c00151d5:	74 5b                	je     c0015232 <setupInterruptController()+0x70>
c00151d7:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00151de:	83 ec 0c             	sub    esp,0xc
c00151e1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00151e4:	e8 3b a4 ff ff       	call   c000f624 <malloc>
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	89 c3                	mov    ebx,eax
c00151ee:	83 ec 0c             	sub    esp,0xc
c00151f1:	53                   	push   ebx
c00151f2:	e8 61 f4 00 00       	call   c0024658 <APIC::APIC()>
c00151f7:	83 c4 10             	add    esp,0x10
c00151fa:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00151fd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015200:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015203:	8b 00                	mov    eax,DWORD PTR [eax]
c0015205:	83 c0 08             	add    eax,0x8
c0015208:	8b 00                	mov    eax,DWORD PTR [eax]
c001520a:	6a 00                	push   0x0
c001520c:	6a 00                	push   0x0
c001520e:	6a 00                	push   0x0
c0015210:	52                   	push   edx
c0015211:	ff d0                	call   eax
c0015213:	83 c4 10             	add    esp,0x10
c0015216:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001521b:	83 ec 08             	sub    esp,0x8
c001521e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015221:	50                   	push   eax
c0015222:	e8 d5 ea ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001522d:	e9 52 03 00 00       	jmp    c0015584 <setupInterruptController()+0x3c2>
c0015232:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0015237:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001523d:	83 e0 01             	and    eax,0x1
c0015240:	84 c0                	test   al,al
c0015242:	0f 95 c0             	setne  al
c0015245:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015248:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001524f:	83 ec 0c             	sub    esp,0xc
c0015252:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015255:	e8 ca a3 ff ff       	call   c000f624 <malloc>
c001525a:	83 c4 10             	add    esp,0x10
c001525d:	89 c3                	mov    ebx,eax
c001525f:	83 ec 0c             	sub    esp,0xc
c0015262:	53                   	push   ebx
c0015263:	e8 48 f9 00 00       	call   c0024bb0 <PIC::PIC()>
c0015268:	83 c4 10             	add    esp,0x10
c001526b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001526e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015271:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015274:	8b 00                	mov    eax,DWORD PTR [eax]
c0015276:	83 c0 08             	add    eax,0x8
c0015279:	8b 00                	mov    eax,DWORD PTR [eax]
c001527b:	6a 00                	push   0x0
c001527d:	6a 00                	push   0x0
c001527f:	6a 00                	push   0x0
c0015281:	52                   	push   edx
c0015282:	ff d0                	call   eax
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001528b:	74 73                	je     c0015300 <setupInterruptController()+0x13e>
c001528d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015290:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015293:	8b 00                	mov    eax,DWORD PTR [eax]
c0015295:	83 c0 0c             	add    eax,0xc
c0015298:	8b 00                	mov    eax,DWORD PTR [eax]
c001529a:	6a 00                	push   0x0
c001529c:	6a 00                	push   0x0
c001529e:	6a 00                	push   0x0
c00152a0:	52                   	push   edx
c00152a1:	ff d0                	call   eax
c00152a3:	83 c4 10             	add    esp,0x10
c00152a6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00152aa:	74 15                	je     c00152c1 <setupInterruptController()+0xff>
c00152ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152af:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b1:	83 c0 04             	add    eax,0x4
c00152b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b6:	83 ec 0c             	sub    esp,0xc
c00152b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152bc:	ff d0                	call   eax
c00152be:	83 c4 10             	add    esp,0x10
c00152c1:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00152c8:	83 ec 0c             	sub    esp,0xc
c00152cb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00152ce:	e8 51 a3 ff ff       	call   c000f624 <malloc>
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	89 c3                	mov    ebx,eax
c00152d8:	83 ec 0c             	sub    esp,0xc
c00152db:	53                   	push   ebx
c00152dc:	e8 77 f3 00 00       	call   c0024658 <APIC::APIC()>
c00152e1:	83 c4 10             	add    esp,0x10
c00152e4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152e7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ef:	83 c0 08             	add    eax,0x8
c00152f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f4:	6a 00                	push   0x0
c00152f6:	6a 00                	push   0x0
c00152f8:	6a 00                	push   0x0
c00152fa:	52                   	push   edx
c00152fb:	ff d0                	call   eax
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0015305:	83 ec 08             	sub    esp,0x8
c0015308:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001530b:	50                   	push   eax
c001530c:	e8 eb e9 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0015311:	83 c4 10             	add    esp,0x10
c0015314:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015317:	8b 00                	mov    eax,DWORD PTR [eax]
c0015319:	83 c0 24             	add    eax,0x24
c001531c:	8b 00                	mov    eax,DWORD PTR [eax]
c001531e:	6a 00                	push   0x0
c0015320:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015325:	6a 00                	push   0x0
c0015327:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532a:	ff d0                	call   eax
c001532c:	83 c4 10             	add    esp,0x10
c001532f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015332:	8b 00                	mov    eax,DWORD PTR [eax]
c0015334:	83 c0 24             	add    eax,0x24
c0015337:	8b 00                	mov    eax,DWORD PTR [eax]
c0015339:	6a 00                	push   0x0
c001533b:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015340:	6a 01                	push   0x1
c0015342:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015345:	ff d0                	call   eax
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534d:	8b 00                	mov    eax,DWORD PTR [eax]
c001534f:	83 c0 24             	add    eax,0x24
c0015352:	8b 00                	mov    eax,DWORD PTR [eax]
c0015354:	6a 00                	push   0x0
c0015356:	68 95 45 01 c0       	push   0xc0014595
c001535b:	6a 02                	push   0x2
c001535d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015360:	ff d0                	call   eax
c0015362:	83 c4 10             	add    esp,0x10
c0015365:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015368:	8b 00                	mov    eax,DWORD PTR [eax]
c001536a:	83 c0 24             	add    eax,0x24
c001536d:	8b 00                	mov    eax,DWORD PTR [eax]
c001536f:	6a 00                	push   0x0
c0015371:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015376:	6a 03                	push   0x3
c0015378:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537b:	ff d0                	call   eax
c001537d:	83 c4 10             	add    esp,0x10
c0015380:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015383:	8b 00                	mov    eax,DWORD PTR [eax]
c0015385:	83 c0 24             	add    eax,0x24
c0015388:	8b 00                	mov    eax,DWORD PTR [eax]
c001538a:	6a 00                	push   0x0
c001538c:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015391:	6a 04                	push   0x4
c0015393:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015396:	ff d0                	call   eax
c0015398:	83 c4 10             	add    esp,0x10
c001539b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539e:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a0:	83 c0 24             	add    eax,0x24
c00153a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a5:	6a 00                	push   0x0
c00153a7:	68 bc 4b 01 c0       	push   0xc0014bbc
c00153ac:	6a 05                	push   0x5
c00153ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b1:	ff d0                	call   eax
c00153b3:	83 c4 10             	add    esp,0x10
c00153b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bb:	83 c0 24             	add    eax,0x24
c00153be:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c0:	6a 00                	push   0x0
c00153c2:	68 db 4b 01 c0       	push   0xc0014bdb
c00153c7:	6a 06                	push   0x6
c00153c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153cc:	ff d0                	call   eax
c00153ce:	83 c4 10             	add    esp,0x10
c00153d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d6:	83 c0 24             	add    eax,0x24
c00153d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153db:	6a 00                	push   0x0
c00153dd:	68 3d 4b 01 c0       	push   0xc0014b3d
c00153e2:	6a 07                	push   0x7
c00153e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153e7:	ff d0                	call   eax
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f1:	83 c0 24             	add    eax,0x24
c00153f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f6:	6a 00                	push   0x0
c00153f8:	68 b0 43 01 c0       	push   0xc00143b0
c00153fd:	6a 08                	push   0x8
c00153ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015402:	ff d0                	call   eax
c0015404:	83 c4 10             	add    esp,0x10
c0015407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540a:	8b 00                	mov    eax,DWORD PTR [eax]
c001540c:	83 c0 24             	add    eax,0x24
c001540f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015411:	6a 00                	push   0x0
c0015413:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015418:	6a 09                	push   0x9
c001541a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001541d:	ff d0                	call   eax
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015425:	8b 00                	mov    eax,DWORD PTR [eax]
c0015427:	83 c0 24             	add    eax,0x24
c001542a:	8b 00                	mov    eax,DWORD PTR [eax]
c001542c:	6a 00                	push   0x0
c001542e:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015433:	6a 0a                	push   0xa
c0015435:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015438:	ff d0                	call   eax
c001543a:	83 c4 10             	add    esp,0x10
c001543d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015440:	8b 00                	mov    eax,DWORD PTR [eax]
c0015442:	83 c0 24             	add    eax,0x24
c0015445:	8b 00                	mov    eax,DWORD PTR [eax]
c0015447:	6a 00                	push   0x0
c0015449:	68 bc 4b 01 c0       	push   0xc0014bbc
c001544e:	6a 0b                	push   0xb
c0015450:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015453:	ff d0                	call   eax
c0015455:	83 c4 10             	add    esp,0x10
c0015458:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545b:	8b 00                	mov    eax,DWORD PTR [eax]
c001545d:	83 c0 24             	add    eax,0x24
c0015460:	8b 00                	mov    eax,DWORD PTR [eax]
c0015462:	6a 00                	push   0x0
c0015464:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015469:	6a 0c                	push   0xc
c001546b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001546e:	ff d0                	call   eax
c0015470:	83 c4 10             	add    esp,0x10
c0015473:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015476:	8b 00                	mov    eax,DWORD PTR [eax]
c0015478:	83 c0 24             	add    eax,0x24
c001547b:	8b 00                	mov    eax,DWORD PTR [eax]
c001547d:	6a 00                	push   0x0
c001547f:	68 6c 4b 01 c0       	push   0xc0014b6c
c0015484:	6a 0d                	push   0xd
c0015486:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015489:	ff d0                	call   eax
c001548b:	83 c4 10             	add    esp,0x10
c001548e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015491:	8b 00                	mov    eax,DWORD PTR [eax]
c0015493:	83 c0 24             	add    eax,0x24
c0015496:	8b 00                	mov    eax,DWORD PTR [eax]
c0015498:	6a 00                	push   0x0
c001549a:	68 a5 4b 01 c0       	push   0xc0014ba5
c001549f:	6a 0e                	push   0xe
c00154a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a4:	ff d0                	call   eax
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ae:	83 c0 24             	add    eax,0x24
c00154b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b3:	6a 00                	push   0x0
c00154b5:	68 bc 4b 01 c0       	push   0xc0014bbc
c00154ba:	6a 0f                	push   0xf
c00154bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154bf:	ff d0                	call   eax
c00154c1:	83 c4 10             	add    esp,0x10
c00154c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c9:	83 c0 24             	add    eax,0x24
c00154cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ce:	6a 00                	push   0x0
c00154d0:	68 bc 4b 01 c0       	push   0xc0014bbc
c00154d5:	6a 10                	push   0x10
c00154d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154da:	ff d0                	call   eax
c00154dc:	83 c4 10             	add    esp,0x10
c00154df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e4:	83 c0 24             	add    eax,0x24
c00154e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e9:	6a 00                	push   0x0
c00154eb:	68 bc 4b 01 c0       	push   0xc0014bbc
c00154f0:	6a 11                	push   0x11
c00154f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f5:	ff d0                	call   eax
c00154f7:	83 c4 10             	add    esp,0x10
c00154fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ff:	83 c0 24             	add    eax,0x24
c0015502:	8b 00                	mov    eax,DWORD PTR [eax]
c0015504:	6a 00                	push   0x0
c0015506:	68 bc 4b 01 c0       	push   0xc0014bbc
c001550b:	6a 12                	push   0x12
c001550d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015510:	ff d0                	call   eax
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015518:	8b 00                	mov    eax,DWORD PTR [eax]
c001551a:	83 c0 24             	add    eax,0x24
c001551d:	8b 00                	mov    eax,DWORD PTR [eax]
c001551f:	6a 00                	push   0x0
c0015521:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015526:	6a 13                	push   0x13
c0015528:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552b:	ff d0                	call   eax
c001552d:	83 c4 10             	add    esp,0x10
c0015530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015533:	8b 00                	mov    eax,DWORD PTR [eax]
c0015535:	83 c0 24             	add    eax,0x24
c0015538:	8b 00                	mov    eax,DWORD PTR [eax]
c001553a:	6a 00                	push   0x0
c001553c:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015541:	6a 14                	push   0x14
c0015543:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015546:	ff d0                	call   eax
c0015548:	83 c4 10             	add    esp,0x10
c001554b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001554e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015550:	83 c0 24             	add    eax,0x24
c0015553:	8b 00                	mov    eax,DWORD PTR [eax]
c0015555:	6a 00                	push   0x0
c0015557:	68 bc 4b 01 c0       	push   0xc0014bbc
c001555c:	6a 1e                	push   0x1e
c001555e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015561:	ff d0                	call   eax
c0015563:	83 c4 10             	add    esp,0x10
c0015566:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015569:	8b 00                	mov    eax,DWORD PTR [eax]
c001556b:	83 c0 24             	add    eax,0x24
c001556e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015570:	6a 00                	push   0x0
c0015572:	68 6d ba 01 c0       	push   0xc001ba6d
c0015577:	6a 60                	push   0x60
c0015579:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001557c:	ff d0                	call   eax
c001557e:	83 c4 10             	add    esp,0x10
c0015581:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015584:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015587:	c9                   	leave  
c0015588:	c3                   	ret    
c0015589:	90                   	nop

c001558a <InterruptController::convertLegacyIRQNumber(int)>:
c001558a:	55                   	push   ebp
c001558b:	89 e5                	mov    ebp,esp
c001558d:	83 ec 08             	sub    esp,0x8
c0015590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015593:	83 ec 0c             	sub    esp,0xc
c0015596:	50                   	push   eax
c0015597:	e8 4c ea ff ff       	call   c0013fe8 <Device::getName()>
c001559c:	83 c4 10             	add    esp,0x10
c001559f:	8a 00                	mov    al,BYTE PTR [eax]
c00155a1:	3c 41                	cmp    al,0x41
c00155a3:	0f 94 c0             	sete   al
c00155a6:	84 c0                	test   al,al
c00155a8:	74 28                	je     c00155d2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155aa:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00155ae:	7f 12                	jg     c00155c2 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00155b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155b3:	05 e0 bf 02 c0       	add    eax,0xc002bfe0
c00155b8:	8a 00                	mov    al,BYTE PTR [eax]
c00155ba:	0f b6 c0             	movzx  eax,al
c00155bd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00155c0:	eb 10                	jmp    c00155d2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155c2:	83 ec 0c             	sub    esp,0xc
c00155c5:	68 b4 99 02 c0       	push   0xc00299b4
c00155ca:	e8 f4 44 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c00155cf:	83 c4 10             	add    esp,0x10
c00155d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155d5:	c9                   	leave  
c00155d6:	c3                   	ret    
c00155d7:	90                   	nop

c00155d8 <startGUI(void*)>:
c00155d8:	55                   	push   ebp
c00155d9:	89 e5                	mov    ebp,esp
c00155db:	53                   	push   ebx
c00155dc:	83 ec 04             	sub    esp,0x4
c00155df:	e8 90 7a 00 00       	call   c001d074 <unlockScheduler()>
c00155e4:	8b 1d 88 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd88
c00155ea:	83 ec 08             	sub    esp,0x8
c00155ed:	6a 01                	push   0x1
c00155ef:	68 9c 9c 02 c0       	push   0xc0029c9c
c00155f4:	e8 06 74 00 00       	call   c001c9ff <Thr::loadDLL(char const*, bool)>
c00155f9:	83 c4 10             	add    esp,0x10
c00155fc:	83 ec 08             	sub    esp,0x8
c00155ff:	53                   	push   ebx
c0015600:	50                   	push   eax
c0015601:	e8 08 76 00 00       	call   c001cc0e <Thr::executeDLL(unsigned long, void*)>
c0015606:	83 c4 10             	add    esp,0x10
c0015609:	8b 1d 88 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd88
c001560f:	83 ec 08             	sub    esp,0x8
c0015612:	6a 01                	push   0x1
c0015614:	68 b6 9c 02 c0       	push   0xc0029cb6
c0015619:	e8 e1 73 00 00       	call   c001c9ff <Thr::loadDLL(char const*, bool)>
c001561e:	83 c4 10             	add    esp,0x10
c0015621:	83 ec 08             	sub    esp,0x8
c0015624:	53                   	push   ebx
c0015625:	50                   	push   eax
c0015626:	e8 e3 75 00 00       	call   c001cc0e <Thr::executeDLL(unsigned long, void*)>
c001562b:	83 c4 10             	add    esp,0x10
c001562e:	90                   	nop
c001562f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015632:	c9                   	leave  
c0015633:	c3                   	ret    

c0015634 <startGUIVESA(void*)>:
c0015634:	55                   	push   ebp
c0015635:	89 e5                	mov    ebp,esp
c0015637:	53                   	push   ebx
c0015638:	83 ec 04             	sub    esp,0x4
c001563b:	e8 34 7a 00 00       	call   c001d074 <unlockScheduler()>
c0015640:	8b 1d 88 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd88
c0015646:	83 ec 08             	sub    esp,0x8
c0015649:	6a 01                	push   0x1
c001564b:	68 d0 9c 02 c0       	push   0xc0029cd0
c0015650:	e8 aa 73 00 00       	call   c001c9ff <Thr::loadDLL(char const*, bool)>
c0015655:	83 c4 10             	add    esp,0x10
c0015658:	83 ec 08             	sub    esp,0x8
c001565b:	53                   	push   ebx
c001565c:	50                   	push   eax
c001565d:	e8 ac 75 00 00       	call   c001cc0e <Thr::executeDLL(unsigned long, void*)>
c0015662:	83 c4 10             	add    esp,0x10
c0015665:	8b 1d 88 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd88
c001566b:	83 ec 08             	sub    esp,0x8
c001566e:	6a 01                	push   0x1
c0015670:	68 b6 9c 02 c0       	push   0xc0029cb6
c0015675:	e8 85 73 00 00       	call   c001c9ff <Thr::loadDLL(char const*, bool)>
c001567a:	83 c4 10             	add    esp,0x10
c001567d:	83 ec 08             	sub    esp,0x8
c0015680:	53                   	push   ebx
c0015681:	50                   	push   eax
c0015682:	e8 87 75 00 00       	call   c001cc0e <Thr::executeDLL(unsigned long, void*)>
c0015687:	83 c4 10             	add    esp,0x10
c001568a:	90                   	nop
c001568b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001568e:	c9                   	leave  
c001568f:	c3                   	ret    

c0015690 <sendKeyToTerminal(unsigned char)>:
c0015690:	55                   	push   ebp
c0015691:	89 e5                	mov    ebp,esp
c0015693:	83 ec 28             	sub    esp,0x28
c0015696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015699:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001569c:	a1 64 ce 02 c0       	mov    eax,ds:0xc002ce64
c00156a1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00156a5:	83 ec 08             	sub    esp,0x8
c00156a8:	52                   	push   edx
c00156a9:	50                   	push   eax
c00156aa:	e8 05 ba ff ff       	call   c00110b4 <VgaText::receiveKey(unsigned char)>
c00156af:	83 c4 10             	add    esp,0x10
c00156b2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00156b6:	75 41                	jne    c00156f9 <sendKeyToTerminal(unsigned char)+0x69>
c00156b8:	e8 dc 79 00 00       	call   c001d099 <lockStuff()>
c00156bd:	a1 40 cf 02 c0       	mov    eax,ds:0xc002cf40
c00156c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156c5:	c7 05 40 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf40,0x0
c00156cf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156d3:	74 1f                	je     c00156f4 <sendKeyToTerminal(unsigned char)+0x64>
c00156d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156e4:	83 ec 0c             	sub    esp,0xc
c00156e7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156ea:	e8 9b 7f 00 00       	call   c001d68a <unblockTask(ThreadControlBlock*)>
c00156ef:	83 c4 10             	add    esp,0x10
c00156f2:	eb db                	jmp    c00156cf <sendKeyToTerminal(unsigned char)+0x3f>
c00156f4:	e8 3a 7d 00 00       	call   c001d433 <unlockStuff()>
c00156f9:	90                   	nop
c00156fa:	c9                   	leave  
c00156fb:	c3                   	ret    

c00156fc <sendKeyboardToken(KeyboardToken)>:
c00156fc:	55                   	push   ebp
c00156fd:	89 e5                	mov    ebp,esp
c00156ff:	83 ec 18             	sub    esp,0x18
c0015702:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015708:	0f b7 c0             	movzx  eax,ax
c001570b:	83 f2 01             	xor    edx,0x1
c001570e:	88 90 60 cf 02 c0    	mov    BYTE PTR [eax-0x3ffd30a0],dl
c0015714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015717:	66 3d 03 02          	cmp    ax,0x203
c001571b:	75 07                	jne    c0015724 <sendKeyboardToken(KeyboardToken)+0x28>
c001571d:	a0 60 d0 02 c0       	mov    al,ds:0xc002d060
c0015722:	84 c0                	test   al,al
c0015724:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015728:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001572b:	a0 68 d3 02 c0       	mov    al,ds:0xc002d368
c0015730:	38 c2                	cmp    dl,al
c0015732:	74 1c                	je     c0015750 <sendKeyboardToken(KeyboardToken)+0x54>
c0015734:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015737:	a2 68 d3 02 c0       	mov    ds:0xc002d368,al
c001573c:	a0 68 d3 02 c0       	mov    al,ds:0xc002d368
c0015741:	0f b6 c0             	movzx  eax,al
c0015744:	83 ec 0c             	sub    esp,0xc
c0015747:	50                   	push   eax
c0015748:	e8 c7 ab ff ff       	call   c0010314 <setTerminalScrollLock(bool)>
c001574d:	83 c4 10             	add    esp,0x10
c0015750:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015753:	84 c0                	test   al,al
c0015755:	0f 84 ae 00 00 00    	je     c0015809 <sendKeyboardToken(KeyboardToken)+0x10d>
c001575b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575e:	66 3d 10 03          	cmp    ax,0x310
c0015762:	75 06                	jne    c001576a <sendKeyboardToken(KeyboardToken)+0x6e>
c0015764:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001576a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576d:	66 3d 11 03          	cmp    ax,0x311
c0015771:	75 06                	jne    c0015779 <sendKeyboardToken(KeyboardToken)+0x7d>
c0015773:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577c:	66 3d 12 03          	cmp    ax,0x312
c0015780:	75 06                	jne    c0015788 <sendKeyboardToken(KeyboardToken)+0x8c>
c0015782:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578b:	66 3d 13 03          	cmp    ax,0x313
c001578f:	75 06                	jne    c0015797 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015791:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579a:	66 3d 14 03          	cmp    ax,0x314
c001579e:	75 06                	jne    c00157a6 <sendKeyboardToken(KeyboardToken)+0xaa>
c00157a0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a9:	66 3d 15 03          	cmp    ax,0x315
c00157ad:	75 06                	jne    c00157b5 <sendKeyboardToken(KeyboardToken)+0xb9>
c00157af:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b8:	66 3d 16 03          	cmp    ax,0x316
c00157bc:	75 06                	jne    c00157c4 <sendKeyboardToken(KeyboardToken)+0xc8>
c00157be:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00157c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c7:	66 3d 17 03          	cmp    ax,0x317
c00157cb:	75 06                	jne    c00157d3 <sendKeyboardToken(KeyboardToken)+0xd7>
c00157cd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00157d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d6:	66 3d 18 03          	cmp    ax,0x318
c00157da:	75 06                	jne    c00157e2 <sendKeyboardToken(KeyboardToken)+0xe6>
c00157dc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00157e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e5:	66 3d 19 03          	cmp    ax,0x319
c00157e9:	75 06                	jne    c00157f1 <sendKeyboardToken(KeyboardToken)+0xf5>
c00157eb:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00157f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f4:	66 3d 1a 03          	cmp    ax,0x31a
c00157f8:	0f 85 c9 00 00 00    	jne    c00158c7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00157fe:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015804:	e9 be 00 00 00       	jmp    c00158c7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580c:	66 3d 10 03          	cmp    ax,0x310
c0015810:	75 0a                	jne    c001581c <sendKeyboardToken(KeyboardToken)+0x120>
c0015812:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015818:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001581c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581f:	66 3d 11 03          	cmp    ax,0x311
c0015823:	75 0a                	jne    c001582f <sendKeyboardToken(KeyboardToken)+0x133>
c0015825:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001582b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015832:	66 3d 12 03          	cmp    ax,0x312
c0015836:	75 0a                	jne    c0015842 <sendKeyboardToken(KeyboardToken)+0x146>
c0015838:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001583e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015845:	66 3d 13 03          	cmp    ax,0x313
c0015849:	75 0a                	jne    c0015855 <sendKeyboardToken(KeyboardToken)+0x159>
c001584b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015851:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015858:	66 3d 14 03          	cmp    ax,0x314
c001585c:	75 0a                	jne    c0015868 <sendKeyboardToken(KeyboardToken)+0x16c>
c001585e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015864:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586b:	66 3d 15 03          	cmp    ax,0x315
c001586f:	75 0a                	jne    c001587b <sendKeyboardToken(KeyboardToken)+0x17f>
c0015871:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015877:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001587b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587e:	66 3d 16 03          	cmp    ax,0x316
c0015882:	75 0a                	jne    c001588e <sendKeyboardToken(KeyboardToken)+0x192>
c0015884:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001588a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	66 3d 17 03          	cmp    ax,0x317
c0015895:	75 0a                	jne    c00158a1 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015897:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001589d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a4:	66 3d 18 03          	cmp    ax,0x318
c00158a8:	75 0a                	jne    c00158b4 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00158aa:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00158b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b7:	66 3d 19 03          	cmp    ax,0x319
c00158bb:	75 0a                	jne    c00158c7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158bd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00158c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ca:	66 3d 00 02          	cmp    ax,0x200
c00158ce:	75 2c                	jne    c00158fc <sendKeyboardToken(KeyboardToken)+0x200>
c00158d0:	a0 60 d3 02 c0       	mov    al,ds:0xc002d360
c00158d5:	83 f0 01             	xor    eax,0x1
c00158d8:	84 c0                	test   al,al
c00158da:	74 20                	je     c00158fc <sendKeyboardToken(KeyboardToken)+0x200>
c00158dc:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c00158e1:	6a 01                	push   0x1
c00158e3:	6a 00                	push   0x0
c00158e5:	68 d8 55 01 c0       	push   0xc00155d8
c00158ea:	50                   	push   eax
c00158eb:	e8 b4 78 00 00       	call   c001d1a4 <Process::createThread(void (*)(void*), void*, int)>
c00158f0:	83 c4 10             	add    esp,0x10
c00158f3:	c6 05 60 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d360,0x1
c00158fa:	eb 33                	jmp    c001592f <sendKeyboardToken(KeyboardToken)+0x233>
c00158fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ff:	66 3d 01 02          	cmp    ax,0x201
c0015903:	75 2a                	jne    c001592f <sendKeyboardToken(KeyboardToken)+0x233>
c0015905:	a0 60 d3 02 c0       	mov    al,ds:0xc002d360
c001590a:	83 f0 01             	xor    eax,0x1
c001590d:	84 c0                	test   al,al
c001590f:	74 1e                	je     c001592f <sendKeyboardToken(KeyboardToken)+0x233>
c0015911:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0015916:	6a 01                	push   0x1
c0015918:	6a 00                	push   0x0
c001591a:	68 34 56 01 c0       	push   0xc0015634
c001591f:	50                   	push   eax
c0015920:	e8 7f 78 00 00       	call   c001d1a4 <Process::createThread(void (*)(void*), void*, int)>
c0015925:	83 c4 10             	add    esp,0x10
c0015928:	c6 05 60 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d360,0x1
c001592f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015932:	66 3d 1d 03          	cmp    ax,0x31d
c0015936:	75 06                	jne    c001593e <sendKeyboardToken(KeyboardToken)+0x242>
c0015938:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001593e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015941:	66 3d 1c 03          	cmp    ax,0x31c
c0015945:	75 06                	jne    c001594d <sendKeyboardToken(KeyboardToken)+0x251>
c0015947:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001594d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015950:	66 3d 1b 03          	cmp    ax,0x31b
c0015954:	75 06                	jne    c001595c <sendKeyboardToken(KeyboardToken)+0x260>
c0015956:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001595c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595f:	66 3d 1e 03          	cmp    ax,0x31e
c0015963:	75 06                	jne    c001596b <sendKeyboardToken(KeyboardToken)+0x26f>
c0015965:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001596b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596e:	66 3d 1f 03          	cmp    ax,0x31f
c0015972:	75 06                	jne    c001597a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015974:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001597a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597d:	66 3d 1a 03          	cmp    ax,0x31a
c0015981:	75 06                	jne    c0015989 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015983:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015989:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001598d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015990:	83 f0 01             	xor    eax,0x1
c0015993:	84 c0                	test   al,al
c0015995:	74 77                	je     c0015a0e <sendKeyboardToken(KeyboardToken)+0x312>
c0015997:	a0 61 d0 02 c0       	mov    al,ds:0xc002d061
c001599c:	84 c0                	test   al,al
c001599e:	74 41                	je     c00159e1 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00159a0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159a4:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159a8:	74 2b                	je     c00159d5 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00159aa:	8b 15 64 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d364
c00159b0:	89 d0                	mov    eax,edx
c00159b2:	c1 e0 02             	shl    eax,0x2
c00159b5:	01 d0                	add    eax,edx
c00159b7:	01 c0                	add    eax,eax
c00159b9:	a3 64 d3 02 c0       	mov    ds:0xc002d364,eax
c00159be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c1:	0f b7 c0             	movzx  eax,ax
c00159c4:	8d 50 d0             	lea    edx,[eax-0x30]
c00159c7:	a1 64 d3 02 c0       	mov    eax,ds:0xc002d364
c00159cc:	01 d0                	add    eax,edx
c00159ce:	a3 64 d3 02 c0       	mov    ds:0xc002d364,eax
c00159d3:	eb 6d                	jmp    c0015a42 <sendKeyboardToken(KeyboardToken)+0x346>
c00159d5:	c7 05 64 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d364,0x0
c00159df:	eb 61                	jmp    c0015a42 <sendKeyboardToken(KeyboardToken)+0x346>
c00159e1:	a1 64 d3 02 c0       	mov    eax,ds:0xc002d364
c00159e6:	85 c0                	test   eax,eax
c00159e8:	74 18                	je     c0015a02 <sendKeyboardToken(KeyboardToken)+0x306>
c00159ea:	a1 64 d3 02 c0       	mov    eax,ds:0xc002d364
c00159ef:	0f b6 c0             	movzx  eax,al
c00159f2:	83 ec 0c             	sub    esp,0xc
c00159f5:	50                   	push   eax
c00159f6:	e8 95 fc ff ff       	call   c0015690 <sendKeyToTerminal(unsigned char)>
c00159fb:	83 c4 10             	add    esp,0x10
c00159fe:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a02:	c7 05 64 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d364,0x0
c0015a0c:	eb 34                	jmp    c0015a42 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a11:	66 3d 01 01          	cmp    ax,0x101
c0015a15:	75 2b                	jne    c0015a42 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a17:	a1 64 d3 02 c0       	mov    eax,ds:0xc002d364
c0015a1c:	85 c0                	test   eax,eax
c0015a1e:	74 18                	je     c0015a38 <sendKeyboardToken(KeyboardToken)+0x33c>
c0015a20:	a1 64 d3 02 c0       	mov    eax,ds:0xc002d364
c0015a25:	0f b6 c0             	movzx  eax,al
c0015a28:	83 ec 0c             	sub    esp,0xc
c0015a2b:	50                   	push   eax
c0015a2c:	e8 5f fc ff ff       	call   c0015690 <sendKeyToTerminal(unsigned char)>
c0015a31:	83 c4 10             	add    esp,0x10
c0015a34:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a38:	c7 05 64 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d364,0x0
c0015a42:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a45:	83 f0 01             	xor    eax,0x1
c0015a48:	84 c0                	test   al,al
c0015a4a:	74 4c                	je     c0015a98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a4c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a4f:	83 f0 01             	xor    eax,0x1
c0015a52:	84 c0                	test   al,al
c0015a54:	74 42                	je     c0015a98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a56:	a0 60 d0 02 c0       	mov    al,ds:0xc002d060
c0015a5b:	83 f0 01             	xor    eax,0x1
c0015a5e:	84 c0                	test   al,al
c0015a60:	74 36                	je     c0015a98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a65:	66 83 f8 1f          	cmp    ax,0x1f
c0015a69:	76 09                	jbe    c0015a74 <sendKeyboardToken(KeyboardToken)+0x378>
c0015a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6e:	66 83 f8 7e          	cmp    ax,0x7e
c0015a72:	76 12                	jbe    c0015a86 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a77:	66 83 f8 0a          	cmp    ax,0xa
c0015a7b:	74 09                	je     c0015a86 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a80:	66 83 f8 08          	cmp    ax,0x8
c0015a84:	75 12                	jne    c0015a98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a89:	0f b6 c0             	movzx  eax,al
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	50                   	push   eax
c0015a90:	e8 fb fb ff ff       	call   c0015690 <sendKeyToTerminal(unsigned char)>
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a9b:	83 f0 01             	xor    eax,0x1
c0015a9e:	84 c0                	test   al,al
c0015aa0:	74 4f                	je     c0015af1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015aa2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015aa5:	83 f0 01             	xor    eax,0x1
c0015aa8:	84 c0                	test   al,al
c0015aaa:	74 45                	je     c0015af1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015aac:	a0 60 d0 02 c0       	mov    al,ds:0xc002d060
c0015ab1:	84 c0                	test   al,al
c0015ab3:	74 3c                	je     c0015af1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab8:	66 83 f8 3f          	cmp    ax,0x3f
c0015abc:	76 33                	jbe    c0015af1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac1:	66 83 f8 7f          	cmp    ax,0x7f
c0015ac5:	77 2a                	ja     c0015af1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aca:	88 c2                	mov    dl,al
c0015acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acf:	66 83 f8 5f          	cmp    ax,0x5f
c0015ad3:	76 04                	jbe    c0015ad9 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015ad5:	b0 20                	mov    al,0x20
c0015ad7:	eb 02                	jmp    c0015adb <sendKeyboardToken(KeyboardToken)+0x3df>
c0015ad9:	b0 00                	mov    al,0x0
c0015adb:	29 c2                	sub    edx,eax
c0015add:	88 d0                	mov    al,dl
c0015adf:	83 e8 40             	sub    eax,0x40
c0015ae2:	0f b6 c0             	movzx  eax,al
c0015ae5:	83 ec 0c             	sub    esp,0xc
c0015ae8:	50                   	push   eax
c0015ae9:	e8 a2 fb ff ff       	call   c0015690 <sendKeyToTerminal(unsigned char)>
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af4:	66 3d 00 03          	cmp    ax,0x300
c0015af8:	75 0f                	jne    c0015b09 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015afa:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015afd:	83 f0 01             	xor    eax,0x1
c0015b00:	84 c0                	test   al,al
c0015b02:	74 05                	je     c0015b09 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015b04:	e8 40 b0 ff ff       	call   c0010b49 <doTerminalCycle()>
c0015b09:	90                   	nop
c0015b0a:	c9                   	leave  
c0015b0b:	c3                   	ret    

c0015b0c <clearInternalKeybuffer(VgaText*)>:
c0015b0c:	55                   	push   ebp
c0015b0d:	89 e5                	mov    ebp,esp
c0015b0f:	83 ec 08             	sub    esp,0x8
c0015b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b15:	05 34 11 00 00       	add    eax,0x1134
c0015b1a:	83 ec 0c             	sub    esp,0xc
c0015b1d:	50                   	push   eax
c0015b1e:	e8 be ab fe ff       	call   c00006e1 <strlen>
c0015b23:	83 c4 10             	add    esp,0x10
c0015b26:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b29:	81 c2 34 11 00 00    	add    edx,0x1134
c0015b2f:	83 ec 04             	sub    esp,0x4
c0015b32:	50                   	push   eax
c0015b33:	6a 00                	push   0x0
c0015b35:	52                   	push   edx
c0015b36:	e8 89 ab fe ff       	call   c00006c4 <memset>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	90                   	nop
c0015b3f:	c9                   	leave  
c0015b40:	c3                   	ret    

c0015b41 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b41:	55                   	push   ebp
c0015b42:	89 e5                	mov    ebp,esp
c0015b44:	83 ec 18             	sub    esp,0x18
c0015b47:	fb                   	sti    
c0015b48:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015b4f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015b53:	0f 84 8a 00 00 00    	je     c0015be3 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5c:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015b62:	84 c0                	test   al,al
c0015b64:	75 11                	jne    c0015b77 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015b66:	e8 07 75 00 00       	call   c001d072 <lockScheduler()>
c0015b6b:	e8 3e 78 00 00       	call   c001d3ae <schedule()>
c0015b70:	e8 ff 74 00 00       	call   c001d074 <unlockScheduler()>
c0015b75:	eb e2                	jmp    c0015b59 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015b77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b7a:	8d 50 01             	lea    edx,[eax+0x1]
c0015b7d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015b80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b83:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015b89:	88 10                	mov    BYTE PTR [eax],dl
c0015b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015b94:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015b97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9a:	05 34 11 00 00       	add    eax,0x1134
c0015b9f:	83 ec 0c             	sub    esp,0xc
c0015ba2:	50                   	push   eax
c0015ba3:	e8 39 ab fe ff       	call   c00006e1 <strlen>
c0015ba8:	83 c4 10             	add    esp,0x10
c0015bab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bae:	81 c2 34 11 00 00    	add    edx,0x1134
c0015bb4:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015bb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bba:	81 c2 34 11 00 00    	add    edx,0x1134
c0015bc0:	83 ec 04             	sub    esp,0x4
c0015bc3:	50                   	push   eax
c0015bc4:	51                   	push   ecx
c0015bc5:	52                   	push   edx
c0015bc6:	e8 9d aa fe ff       	call   c0000668 <memmove>
c0015bcb:	83 c4 10             	add    esp,0x10
c0015bce:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015bd1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015bd4:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015bd8:	0f 85 71 ff ff ff    	jne    c0015b4f <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015bde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be1:	eb 03                	jmp    c0015be6 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015be3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be6:	c9                   	leave  
c0015be7:	c3                   	ret    

c0015be8 <Keyboard::Keyboard(char const*)>:
c0015be8:	83 ec 0c             	sub    esp,0xc
c0015beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bef:	83 ec 08             	sub    esp,0x8
c0015bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bf6:	50                   	push   eax
c0015bf7:	e8 f0 e2 ff ff       	call   c0013eec <Device::Device(char const*)>
c0015bfc:	83 c4 10             	add    esp,0x10
c0015bff:	ba f4 9c 02 c0       	mov    edx,0xc0029cf4
c0015c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c08:	89 10                	mov    DWORD PTR [eax],edx
c0015c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c0e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015c18:	c6 05 44 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf44,0x1
c0015c1f:	90                   	nop
c0015c20:	83 c4 0c             	add    esp,0xc
c0015c23:	c3                   	ret    

c0015c24 <Keyboard::~Keyboard()>:
c0015c24:	83 ec 0c             	sub    esp,0xc
c0015c27:	ba f4 9c 02 c0       	mov    edx,0xc0029cf4
c0015c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c30:	89 10                	mov    DWORD PTR [eax],edx
c0015c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c36:	83 ec 0c             	sub    esp,0xc
c0015c39:	50                   	push   eax
c0015c3a:	e8 8f df ff ff       	call   c0013bce <Device::~Device()>
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	90                   	nop
c0015c43:	83 c4 0c             	add    esp,0xc
c0015c46:	c3                   	ret    
c0015c47:	90                   	nop

c0015c48 <Keyboard::~Keyboard()>:
c0015c48:	83 ec 0c             	sub    esp,0xc
c0015c4b:	83 ec 0c             	sub    esp,0xc
c0015c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c52:	e8 cd ff ff ff       	call   c0015c24 <Keyboard::~Keyboard()>
c0015c57:	83 c4 10             	add    esp,0x10
c0015c5a:	83 ec 08             	sub    esp,0x8
c0015c5d:	68 5c 01 00 00       	push   0x15c
c0015c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c66:	e8 8a cb ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0015c6b:	83 c4 10             	add    esp,0x10
c0015c6e:	83 c4 0c             	add    esp,0xc
c0015c71:	c3                   	ret    

c0015c72 <LogicalDisk::close(int, int, void*)>:
c0015c72:	83 c8 ff             	or     eax,0xffffffff
c0015c75:	c3                   	ret    

c0015c76 <LogicalDisk::~LogicalDisk()>:
c0015c76:	83 ec 0c             	sub    esp,0xc
c0015c79:	ba a4 9d 02 c0       	mov    edx,0xc0029da4
c0015c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c82:	89 10                	mov    DWORD PTR [eax],edx
c0015c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c88:	83 ec 0c             	sub    esp,0xc
c0015c8b:	50                   	push   eax
c0015c8c:	e8 3d df ff ff       	call   c0013bce <Device::~Device()>
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	90                   	nop
c0015c95:	83 c4 0c             	add    esp,0xc
c0015c98:	c3                   	ret    
c0015c99:	90                   	nop

c0015c9a <LogicalDisk::~LogicalDisk()>:
c0015c9a:	83 ec 0c             	sub    esp,0xc
c0015c9d:	83 ec 0c             	sub    esp,0xc
c0015ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ca4:	e8 cd ff ff ff       	call   c0015c76 <LogicalDisk::~LogicalDisk()>
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	83 ec 08             	sub    esp,0x8
c0015caf:	68 74 01 00 00       	push   0x174
c0015cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cb8:	e8 38 cb ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0015cbd:	83 c4 10             	add    esp,0x10
c0015cc0:	83 c4 0c             	add    esp,0xc
c0015cc3:	c3                   	ret    

c0015cc4 <LogicalDisk::open(int, int, void*)>:
c0015cc4:	83 ec 18             	sub    esp,0x18
c0015cc7:	68 20 9d 02 c0       	push   0xc0029d20
c0015ccc:	e8 f2 3d 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0015cd1:	83 c8 ff             	or     eax,0xffffffff
c0015cd4:	83 c4 1c             	add    esp,0x1c
c0015cd7:	c3                   	ret    

c0015cd8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015cd8:	53                   	push   ebx
c0015cd9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015cdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ce1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ce5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015ceb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015cf1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015cf7:	77 10                	ja     c0015d09 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015cf9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015cff:	89 d3                	mov    ebx,edx
c0015d01:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015d07:	72 05                	jb     c0015d0e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015d09:	83 c8 ff             	or     eax,0xffffffff
c0015d0c:	89 c2                	mov    edx,eax
c0015d0e:	5b                   	pop    ebx
c0015d0f:	c3                   	ret    

c0015d10 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015d10:	56                   	push   esi
c0015d11:	83 c8 ff             	or     eax,0xffffffff
c0015d14:	53                   	push   ebx
c0015d15:	89 c2                	mov    edx,eax
c0015d17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015d1b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015d23:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d29:	77 27                	ja     c0015d52 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d2b:	89 d8                	mov    eax,ebx
c0015d2d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015d33:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015d39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d3e:	89 c2                	mov    edx,eax
c0015d40:	73 10                	jae    c0015d52 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d42:	89 c8                	mov    eax,ecx
c0015d44:	89 da                	mov    edx,ebx
c0015d46:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015d4c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015d52:	5b                   	pop    ebx
c0015d53:	5e                   	pop    esi
c0015d54:	c3                   	ret    
c0015d55:	90                   	nop

c0015d56 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015d56:	83 ec 1c             	sub    esp,0x1c
c0015d59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d7c:	83 ec 08             	sub    esp,0x8
c0015d7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d83:	50                   	push   eax
c0015d84:	e8 63 e1 ff ff       	call   c0013eec <Device::Device(char const*)>
c0015d89:	83 c4 10             	add    esp,0x10
c0015d8c:	ba a4 9d 02 c0       	mov    edx,0xc0029da4
c0015d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d95:	89 10                	mov    DWORD PTR [eax],edx
c0015d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d9b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015da2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015da6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015dad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015db1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015dbb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015dbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dc7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015dcd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015dd3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015dd7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015dda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dde:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015de4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015df2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dfc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e06:	90                   	nop
c0015e07:	83 c4 1c             	add    esp,0x1c
c0015e0a:	c3                   	ret    
c0015e0b:	90                   	nop

c0015e0c <LogicalDisk::assignDriveLetter()>:
c0015e0c:	55                   	push   ebp
c0015e0d:	57                   	push   edi
c0015e0e:	56                   	push   esi
c0015e0f:	53                   	push   ebx
c0015e10:	83 ec 14             	sub    esp,0x14
c0015e13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e17:	8b 3d 80 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d380
c0015e1d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015e23:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015e27:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015e2d:	8b 3d 84 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d384
c0015e33:	3c 01                	cmp    al,0x1
c0015e35:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015e39:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015e3d:	19 c0                	sbb    eax,eax
c0015e3f:	83 e0 02             	and    eax,0x2
c0015e42:	83 c0 41             	add    eax,0x41
c0015e45:	0f be e8             	movsx  ebp,al
c0015e48:	3c 43                	cmp    al,0x43
c0015e4a:	75 10                	jne    c0015e5c <LogicalDisk::assignDriveLetter()+0x50>
c0015e4c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015e53:	75 5d                	jne    c0015eb2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e55:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015e5a:	75 56                	jne    c0015eb2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e5c:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015e5f:	ba 01 00 00 00       	mov    edx,0x1
c0015e64:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015e68:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015e6c:	d3 e2                	shl    edx,cl
c0015e6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e72:	89 d7                	mov    edi,edx
c0015e74:	89 d6                	mov    esi,edx
c0015e76:	c1 ff 1f             	sar    edi,0x1f
c0015e79:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015e7d:	21 f9                	and    ecx,edi
c0015e7f:	09 d1                	or     ecx,edx
c0015e81:	75 2f                	jne    c0015eb2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e83:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015e87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e8b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015e91:	09 f2                	or     edx,esi
c0015e93:	89 15 80 d3 02 c0    	mov    DWORD PTR ds:0xc002d380,edx
c0015e99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e9d:	09 fa                	or     edx,edi
c0015e9f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015ea3:	89 15 84 d3 02 c0    	mov    DWORD PTR ds:0xc002d384,edx
c0015ea9:	89 1c bd a0 d3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2c60],ebx
c0015eb0:	eb 08                	jmp    c0015eba <LogicalDisk::assignDriveLetter()+0xae>
c0015eb2:	45                   	inc    ebp
c0015eb3:	40                   	inc    eax
c0015eb4:	3c 5b                	cmp    al,0x5b
c0015eb6:	75 90                	jne    c0015e48 <LogicalDisk::assignDriveLetter()+0x3c>
c0015eb8:	31 c0                	xor    eax,eax
c0015eba:	83 c4 14             	add    esp,0x14
c0015ebd:	5b                   	pop    ebx
c0015ebe:	5e                   	pop    esi
c0015ebf:	5f                   	pop    edi
c0015ec0:	5d                   	pop    ebp
c0015ec1:	c3                   	ret    

c0015ec2 <LogicalDisk::mount()>:
c0015ec2:	56                   	push   esi
c0015ec3:	53                   	push   ebx
c0015ec4:	51                   	push   ecx
c0015ec5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ec9:	8b 1d 08 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf08
c0015ecf:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015ed9:	85 db                	test   ebx,ebx
c0015edb:	74 50                	je     c0015f2d <LogicalDisk::mount()+0x6b>
c0015edd:	e8 7b 71 00 00       	call   c001d05d <getIRQNestingLevel()>
c0015ee2:	52                   	push   edx
c0015ee3:	52                   	push   edx
c0015ee4:	50                   	push   eax
c0015ee5:	68 44 9d 02 c0       	push   0xc0029d44
c0015eea:	e8 e6 c9 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0015eef:	83 c4 0c             	add    esp,0xc
c0015ef2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015ef9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015efb:	83 e8 41             	sub    eax,0x41
c0015efe:	50                   	push   eax
c0015eff:	56                   	push   esi
c0015f00:	53                   	push   ebx
c0015f01:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	84 c0                	test   al,al
c0015f09:	74 08                	je     c0015f13 <LogicalDisk::mount()+0x51>
c0015f0b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f11:	eb 1c                	jmp    c0015f2f <LogicalDisk::mount()+0x6d>
c0015f13:	e8 45 71 00 00       	call   c001d05d <getIRQNestingLevel()>
c0015f18:	51                   	push   ecx
c0015f19:	51                   	push   ecx
c0015f1a:	50                   	push   eax
c0015f1b:	68 5f 9d 02 c0       	push   0xc0029d5f
c0015f20:	e8 b0 c9 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0015f25:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015f28:	83 c4 10             	add    esp,0x10
c0015f2b:	eb ac                	jmp    c0015ed9 <LogicalDisk::mount()+0x17>
c0015f2d:	31 c0                	xor    eax,eax
c0015f2f:	5a                   	pop    edx
c0015f30:	5b                   	pop    ebx
c0015f31:	5e                   	pop    esi
c0015f32:	c3                   	ret    
c0015f33:	90                   	nop

c0015f34 <LogicalDisk::unmount()>:
c0015f34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f38:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f42:	c3                   	ret    
c0015f43:	90                   	nop

c0015f44 <LogicalDisk::unassignDriveLetter()>:
c0015f44:	57                   	push   edi
c0015f45:	56                   	push   esi
c0015f46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f4a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015f51:	84 c9                	test   cl,cl
c0015f53:	75 0f                	jne    c0015f64 <LogicalDisk::unassignDriveLetter()+0x20>
c0015f55:	c7 44 24 0c 7a 9d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029d7a
c0015f5d:	5e                   	pop    esi
c0015f5e:	5f                   	pop    edi
c0015f5f:	e9 5f 3b 00 00       	jmp    c0019ac3 <Krnl::panic(char const*)>
c0015f64:	83 e9 41             	sub    ecx,0x41
c0015f67:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015f6e:	b8 01 00 00 00       	mov    eax,0x1
c0015f73:	c7 04 8d a0 d3 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2c60],0x0
c0015f7e:	d3 e0                	shl    eax,cl
c0015f80:	89 c7                	mov    edi,eax
c0015f82:	f7 d0                	not    eax
c0015f84:	c1 ff 1f             	sar    edi,0x1f
c0015f87:	21 05 80 d3 02 c0    	and    DWORD PTR ds:0xc002d380,eax
c0015f8d:	89 fe                	mov    esi,edi
c0015f8f:	f7 d6                	not    esi
c0015f91:	21 35 84 d3 02 c0    	and    DWORD PTR ds:0xc002d384,esi
c0015f97:	5e                   	pop    esi
c0015f98:	5f                   	pop    edi
c0015f99:	c3                   	ret    

c0015f9a <LogicalDisk::read(unsigned long long, int, void*)>:
c0015f9a:	57                   	push   edi
c0015f9b:	56                   	push   esi
c0015f9c:	53                   	push   ebx
c0015f9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015fa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fa5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015fa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fb3:	77 41                	ja     c0015ff6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015fb5:	99                   	cdq    
c0015fb6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015fbc:	01 c8                	add    eax,ecx
c0015fbe:	11 da                	adc    edx,ebx
c0015fc0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015fc6:	19 d7                	sbb    edi,edx
c0015fc8:	72 33                	jb     c0015ffd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015fca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015fd0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015fd6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015fda:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015fde:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015fe4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015fea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015fee:	5b                   	pop    ebx
c0015fef:	5e                   	pop    esi
c0015ff0:	5f                   	pop    edi
c0015ff1:	e9 f8 09 00 00       	jmp    c00169ee <VCache::read(unsigned long long, int, void*)>
c0015ff6:	b8 05 00 00 00       	mov    eax,0x5
c0015ffb:	eb 05                	jmp    c0016002 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015ffd:	b8 07 00 00 00       	mov    eax,0x7
c0016002:	5b                   	pop    ebx
c0016003:	5e                   	pop    esi
c0016004:	5f                   	pop    edi
c0016005:	c3                   	ret    

c0016006 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016006:	57                   	push   edi
c0016007:	56                   	push   esi
c0016008:	53                   	push   ebx
c0016009:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001600d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016011:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016019:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001601f:	77 41                	ja     c0016062 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016021:	99                   	cdq    
c0016022:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016028:	01 c8                	add    eax,ecx
c001602a:	11 da                	adc    edx,ebx
c001602c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016032:	19 d7                	sbb    edi,edx
c0016034:	72 33                	jb     c0016069 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016036:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001603c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016042:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016046:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001604a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016050:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016056:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001605a:	5b                   	pop    ebx
c001605b:	5e                   	pop    esi
c001605c:	5f                   	pop    edi
c001605d:	e9 a8 08 00 00       	jmp    c001690a <VCache::write(unsigned long long, int, void*)>
c0016062:	b8 05 00 00 00       	mov    eax,0x5
c0016067:	eb 05                	jmp    c001606e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016069:	b8 07 00 00 00       	mov    eax,0x7
c001606e:	5b                   	pop    ebx
c001606f:	5e                   	pop    esi
c0016070:	5f                   	pop    edi
c0016071:	c3                   	ret    

c0016072 <Mouse::Mouse(char const*)>:
c0016072:	83 ec 0c             	sub    esp,0xc
c0016075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016079:	83 ec 08             	sub    esp,0x8
c001607c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016080:	50                   	push   eax
c0016081:	e8 66 de ff ff       	call   c0013eec <Device::Device(char const*)>
c0016086:	83 c4 10             	add    esp,0x10
c0016089:	ba d0 9d 02 c0       	mov    edx,0xc0029dd0
c001608e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016092:	89 10                	mov    DWORD PTR [eax],edx
c0016094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016098:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00160a2:	90                   	nop
c00160a3:	83 c4 0c             	add    esp,0xc
c00160a6:	c3                   	ret    
c00160a7:	90                   	nop

c00160a8 <Mouse::~Mouse()>:
c00160a8:	83 ec 0c             	sub    esp,0xc
c00160ab:	ba d0 9d 02 c0       	mov    edx,0xc0029dd0
c00160b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b4:	89 10                	mov    DWORD PTR [eax],edx
c00160b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160ba:	83 ec 0c             	sub    esp,0xc
c00160bd:	50                   	push   eax
c00160be:	e8 0b db ff ff       	call   c0013bce <Device::~Device()>
c00160c3:	83 c4 10             	add    esp,0x10
c00160c6:	90                   	nop
c00160c7:	83 c4 0c             	add    esp,0xc
c00160ca:	c3                   	ret    
c00160cb:	90                   	nop

c00160cc <Mouse::~Mouse()>:
c00160cc:	83 ec 0c             	sub    esp,0xc
c00160cf:	83 ec 0c             	sub    esp,0xc
c00160d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160d6:	e8 cd ff ff ff       	call   c00160a8 <Mouse::~Mouse()>
c00160db:	83 c4 10             	add    esp,0x10
c00160de:	83 ec 08             	sub    esp,0x8
c00160e1:	68 58 01 00 00       	push   0x158
c00160e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ea:	e8 06 c7 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00160ef:	83 c4 10             	add    esp,0x10
c00160f2:	83 c4 0c             	add    esp,0xc
c00160f5:	c3                   	ret    

c00160f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00160f6:	55                   	push   ebp
c00160f7:	57                   	push   edi
c00160f8:	56                   	push   esi
c00160f9:	53                   	push   ebx
c00160fa:	81 ec 28 01 00 00    	sub    esp,0x128
c0016100:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016107:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001610e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016115:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001611c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016120:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016124:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001612b:	e8 b8 de ff ff       	call   c0013fe8 <Device::getName()>
c0016130:	5a                   	pop    edx
c0016131:	59                   	pop    ecx
c0016132:	50                   	push   eax
c0016133:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016137:	55                   	push   ebp
c0016138:	e8 26 a6 fe ff       	call   c0000763 <strcpy>
c001613d:	5b                   	pop    ebx
c001613e:	58                   	pop    eax
c001613f:	68 f4 9d 02 c0       	push   0xc0029df4
c0016144:	55                   	push   ebp
c0016145:	e8 d0 a6 fe ff       	call   c000081a <strcat>
c001614a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016151:	e8 ce 94 ff ff       	call   c000f624 <malloc>
c0016156:	83 c4 0c             	add    esp,0xc
c0016159:	89 c3                	mov    ebx,eax
c001615b:	57                   	push   edi
c001615c:	56                   	push   esi
c001615d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016161:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016165:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001616c:	55                   	push   ebp
c001616d:	50                   	push   eax
c001616e:	e8 e3 fb ff ff       	call   c0015d56 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016173:	83 c4 14             	add    esp,0x14
c0016176:	53                   	push   ebx
c0016177:	e8 90 fc ff ff       	call   c0015e0c <LogicalDisk::assignDriveLetter()>
c001617c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001617f:	e8 3e fd ff ff       	call   c0015ec2 <LogicalDisk::mount()>
c0016184:	58                   	pop    eax
c0016185:	5a                   	pop    edx
c0016186:	53                   	push   ebx
c0016187:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001618e:	e8 69 db ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0016193:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016199:	5b                   	pop    ebx
c001619a:	5e                   	pop    esi
c001619b:	5f                   	pop    edi
c001619c:	5d                   	pop    ebp
c001619d:	c3                   	ret    

c001619e <createPartitionsForDisk(PhysicalDisk*)>:
c001619e:	55                   	push   ebp
c001619f:	57                   	push   edi
c00161a0:	56                   	push   esi
c00161a1:	53                   	push   ebx
c00161a2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00161a8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00161af:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00161b5:	3d 00 02 00 00       	cmp    eax,0x200
c00161ba:	74 27                	je     c00161e3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00161bc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00161c2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00161c8:	83 ec 10             	sub    esp,0x10
c00161cb:	0f a4 f7 0a          	shld   edi,esi,0xa
c00161cf:	99                   	cdq    
c00161d0:	c1 e6 0a             	shl    esi,0xa
c00161d3:	52                   	push   edx
c00161d4:	89 fd                	mov    ebp,edi
c00161d6:	50                   	push   eax
c00161d7:	55                   	push   ebp
c00161d8:	56                   	push   esi
c00161d9:	e8 fe f4 00 00       	call   c00256dc <__udivdi3>
c00161de:	e9 b1 00 00 00       	jmp    c0016294 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00161e3:	83 ec 0c             	sub    esp,0xc
c00161e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161e8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00161ec:	56                   	push   esi
c00161ed:	6a 01                	push   0x1
c00161ef:	6a 00                	push   0x0
c00161f1:	6a 00                	push   0x0
c00161f3:	53                   	push   ebx
c00161f4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00161f7:	83 c4 20             	add    esp,0x20
c00161fa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016202:	75 0a                	jne    c001620e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016204:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001620c:	74 2c                	je     c001623a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001620e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016214:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001621a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016220:	83 ec 10             	sub    esp,0x10
c0016223:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016227:	89 f7                	mov    edi,esi
c0016229:	c1 e0 0a             	shl    eax,0xa
c001622c:	c1 ff 1f             	sar    edi,0x1f
c001622f:	57                   	push   edi
c0016230:	56                   	push   esi
c0016231:	52                   	push   edx
c0016232:	50                   	push   eax
c0016233:	e8 a4 f4 00 00       	call   c00256dc <__udivdi3>
c0016238:	eb 5a                	jmp    c0016294 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001623a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016241:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016248:	83 e1 7f             	and    ecx,0x7f
c001624b:	83 e0 7f             	and    eax,0x7f
c001624e:	01 c1                	add    ecx,eax
c0016250:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016257:	83 e0 7f             	and    eax,0x7f
c001625a:	01 c1                	add    ecx,eax
c001625c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016263:	83 e0 7f             	and    eax,0x7f
c0016266:	00 c1                	add    cl,al
c0016268:	74 41                	je     c00162ab <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001626a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016270:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016276:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001627c:	83 ec 10             	sub    esp,0x10
c001627f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016283:	89 f7                	mov    edi,esi
c0016285:	c1 e0 0a             	shl    eax,0xa
c0016288:	c1 ff 1f             	sar    edi,0x1f
c001628b:	57                   	push   edi
c001628c:	56                   	push   esi
c001628d:	52                   	push   edx
c001628e:	50                   	push   eax
c001628f:	e8 48 f4 00 00       	call   c00256dc <__udivdi3>
c0016294:	83 c4 14             	add    esp,0x14
c0016297:	52                   	push   edx
c0016298:	50                   	push   eax
c0016299:	6a 00                	push   0x0
c001629b:	6a 00                	push   0x0
c001629d:	53                   	push   ebx
c001629e:	e8 53 fe ff ff       	call   c00160f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162a3:	83 c4 20             	add    esp,0x20
c00162a6:	e9 79 01 00 00       	jmp    c0016424 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00162ab:	89 f0                	mov    eax,esi
c00162ad:	31 f6                	xor    esi,esi
c00162af:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00162b6:	75 02                	jne    c00162ba <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00162b8:	89 f1                	mov    ecx,esi
c00162ba:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00162c1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00162c8:	c1 e2 08             	shl    edx,0x8
c00162cb:	c1 e7 10             	shl    edi,0x10
c00162ce:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00162d6:	09 fa                	or     edx,edi
c00162d8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00162e0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00162e7:	83 c0 10             	add    eax,0x10
c00162ea:	09 fa                	or     edx,edi
c00162ec:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00162f3:	c1 e7 18             	shl    edi,0x18
c00162f6:	09 fa                	or     edx,edi
c00162f8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00162ff:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016303:	c1 e7 10             	shl    edi,0x10
c0016306:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001630d:	c1 e2 08             	shl    edx,0x8
c0016310:	09 fa                	or     edx,edi
c0016312:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016319:	09 fa                	or     edx,edi
c001631b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016322:	c1 e7 18             	shl    edi,0x18
c0016325:	09 fa                	or     edx,edi
c0016327:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001632b:	46                   	inc    esi
c001632c:	83 fe 04             	cmp    esi,0x4
c001632f:	0f 85 7a ff ff ff    	jne    c00162af <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016339:	83 f0 01             	xor    eax,0x1
c001633c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016340:	75 57                	jne    c0016399 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016346:	83 f0 01             	xor    eax,0x1
c0016349:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001634d:	75 4a                	jne    c0016399 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001634f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016353:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001635b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016363:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016369:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001636f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016375:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016379:	89 f7                	mov    edi,esi
c001637b:	c1 e0 0a             	shl    eax,0xa
c001637e:	c1 ff 1f             	sar    edi,0x1f
c0016381:	57                   	push   edi
c0016382:	56                   	push   esi
c0016383:	52                   	push   edx
c0016384:	50                   	push   eax
c0016385:	e8 52 f3 00 00       	call   c00256dc <__udivdi3>
c001638a:	83 c4 10             	add    esp,0x10
c001638d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016391:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016395:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016399:	84 c9                	test   cl,cl
c001639b:	74 53                	je     c00163f0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001639d:	0f b6 c9             	movzx  ecx,cl
c00163a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00163ac:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00163b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00163b8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00163bc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00163c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00163c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163d0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00163d4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00163d8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00163dc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00163e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00163e4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163e8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00163ec:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00163f0:	31 ed                	xor    ebp,ebp
c00163f2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00163f6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00163fa:	89 f8                	mov    eax,edi
c00163fc:	09 f0                	or     eax,esi
c00163fe:	74 1e                	je     c001641e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016400:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016404:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016408:	89 d1                	mov    ecx,edx
c001640a:	09 c1                	or     ecx,eax
c001640c:	74 10                	je     c001641e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001640e:	83 ec 0c             	sub    esp,0xc
c0016411:	57                   	push   edi
c0016412:	56                   	push   esi
c0016413:	52                   	push   edx
c0016414:	50                   	push   eax
c0016415:	53                   	push   ebx
c0016416:	e8 db fc ff ff       	call   c00160f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001641b:	83 c4 20             	add    esp,0x20
c001641e:	45                   	inc    ebp
c001641f:	83 fd 04             	cmp    ebp,0x4
c0016422:	75 ce                	jne    c00163f2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016424:	81 c4 5c 02 00 00    	add    esp,0x25c
c001642a:	5b                   	pop    ebx
c001642b:	5e                   	pop    esi
c001642c:	5f                   	pop    edi
c001642d:	5d                   	pop    ebp
c001642e:	c3                   	ret    
c001642f:	90                   	nop

c0016430 <Serial::Serial(char const*)>:
c0016430:	83 ec 0c             	sub    esp,0xc
c0016433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016437:	83 ec 08             	sub    esp,0x8
c001643a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001643e:	50                   	push   eax
c001643f:	e8 a8 da ff ff       	call   c0013eec <Device::Device(char const*)>
c0016444:	83 c4 10             	add    esp,0x10
c0016447:	ba 08 9e 02 c0       	mov    edx,0xc0029e08
c001644c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016450:	89 10                	mov    DWORD PTR [eax],edx
c0016452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016456:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016460:	90                   	nop
c0016461:	83 c4 0c             	add    esp,0xc
c0016464:	c3                   	ret    
c0016465:	90                   	nop

c0016466 <Serial::~Serial()>:
c0016466:	83 ec 0c             	sub    esp,0xc
c0016469:	ba 08 9e 02 c0       	mov    edx,0xc0029e08
c001646e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016472:	89 10                	mov    DWORD PTR [eax],edx
c0016474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	50                   	push   eax
c001647c:	e8 4d d7 ff ff       	call   c0013bce <Device::~Device()>
c0016481:	83 c4 10             	add    esp,0x10
c0016484:	90                   	nop
c0016485:	83 c4 0c             	add    esp,0xc
c0016488:	c3                   	ret    
c0016489:	90                   	nop

c001648a <Serial::~Serial()>:
c001648a:	83 ec 0c             	sub    esp,0xc
c001648d:	83 ec 0c             	sub    esp,0xc
c0016490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016494:	e8 cd ff ff ff       	call   c0016466 <Serial::~Serial()>
c0016499:	83 c4 10             	add    esp,0x10
c001649c:	83 ec 08             	sub    esp,0x8
c001649f:	68 58 01 00 00       	push   0x158
c00164a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a8:	e8 48 c3 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00164ad:	83 c4 10             	add    esp,0x10
c00164b0:	83 c4 0c             	add    esp,0xc
c00164b3:	c3                   	ret    

c00164b4 <Timer::Timer(char const*)>:
c00164b4:	83 ec 0c             	sub    esp,0xc
c00164b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164bb:	83 ec 08             	sub    esp,0x8
c00164be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c2:	50                   	push   eax
c00164c3:	e8 24 da ff ff       	call   c0013eec <Device::Device(char const*)>
c00164c8:	83 c4 10             	add    esp,0x10
c00164cb:	ba 4c 9e 02 c0       	mov    edx,0xc0029e4c
c00164d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d4:	89 10                	mov    DWORD PTR [eax],edx
c00164d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164da:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00164e4:	90                   	nop
c00164e5:	83 c4 0c             	add    esp,0xc
c00164e8:	c3                   	ret    
c00164e9:	90                   	nop

c00164ea <Timer::~Timer()>:
c00164ea:	83 ec 0c             	sub    esp,0xc
c00164ed:	ba 4c 9e 02 c0       	mov    edx,0xc0029e4c
c00164f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f6:	89 10                	mov    DWORD PTR [eax],edx
c00164f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	50                   	push   eax
c0016500:	e8 c9 d6 ff ff       	call   c0013bce <Device::~Device()>
c0016505:	83 c4 10             	add    esp,0x10
c0016508:	90                   	nop
c0016509:	83 c4 0c             	add    esp,0xc
c001650c:	c3                   	ret    
c001650d:	90                   	nop

c001650e <Timer::~Timer()>:
c001650e:	83 ec 0c             	sub    esp,0xc
c0016511:	83 ec 0c             	sub    esp,0xc
c0016514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016518:	e8 cd ff ff ff       	call   c00164ea <Timer::~Timer()>
c001651d:	83 c4 10             	add    esp,0x10
c0016520:	83 ec 08             	sub    esp,0x8
c0016523:	68 5c 01 00 00       	push   0x15c
c0016528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001652c:	e8 c4 c2 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0016531:	83 c4 10             	add    esp,0x10
c0016534:	83 c4 0c             	add    esp,0xc
c0016537:	c3                   	ret    

c0016538 <Timer::read()>:
c0016538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001653c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016542:	c3                   	ret    

c0016543 <timerHandler(unsigned long long)>:
c0016543:	55                   	push   ebp
c0016544:	57                   	push   edi
c0016545:	56                   	push   esi
c0016546:	53                   	push   ebx
c0016547:	83 ec 0c             	sub    esp,0xc
c001654a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001654e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016552:	01 35 10 d4 02 c0    	add    DWORD PTR ds:0xc002d410,esi
c0016558:	11 3d 14 d4 02 c0    	adc    DWORD PTR ds:0xc002d414,edi
c001655e:	80 3d 8d cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd8d,0x0
c0016565:	0f 84 07 01 00 00    	je     c0016672 <timerHandler(unsigned long long)+0x12f>
c001656b:	e8 29 6b 00 00       	call   c001d099 <lockStuff()>
c0016570:	83 ec 0c             	sub    esp,0xc
c0016573:	68 bc e2 02 c0       	push   0xc002e2bc
c0016578:	e8 d1 11 01 00       	call   c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001657d:	c7 04 24 bc e2 02 c0 	mov    DWORD PTR [esp],0xc002e2bc
c0016584:	89 c3                	mov    ebx,eax
c0016586:	e8 cb 11 01 00       	call   c0027756 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	84 c0                	test   al,al
c0016590:	74 60                	je     c00165f2 <timerHandler(unsigned long long)+0xaf>
c0016592:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016598:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001659b:	85 c0                	test   eax,eax
c001659d:	0f 85 91 00 00 00    	jne    c0016634 <timerHandler(unsigned long long)+0xf1>
c00165a3:	e9 be 00 00 00       	jmp    c0016666 <timerHandler(unsigned long long)+0x123>
c00165a8:	83 ec 0c             	sub    esp,0xc
c00165ab:	55                   	push   ebp
c00165ac:	e8 d9 70 00 00       	call   c001d68a <unblockTask(ThreadControlBlock*)>
c00165b1:	83 c4 10             	add    esp,0x10
c00165b4:	39 eb                	cmp    ebx,ebp
c00165b6:	75 12                	jne    c00165ca <timerHandler(unsigned long long)+0x87>
c00165b8:	83 ec 0c             	sub    esp,0xc
c00165bb:	68 bc e2 02 c0       	push   0xc002e2bc
c00165c0:	e8 89 11 01 00       	call   c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165c5:	89 c3                	mov    ebx,eax
c00165c7:	83 c4 10             	add    esp,0x10
c00165ca:	83 ec 0c             	sub    esp,0xc
c00165cd:	68 bc e2 02 c0       	push   0xc002e2bc
c00165d2:	e8 7f 11 01 00       	call   c0027756 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165d7:	83 c4 10             	add    esp,0x10
c00165da:	84 c0                	test   al,al
c00165dc:	75 b4                	jne    c0016592 <timerHandler(unsigned long long)+0x4f>
c00165de:	83 ec 0c             	sub    esp,0xc
c00165e1:	68 bc e2 02 c0       	push   0xc002e2bc
c00165e6:	e8 63 11 01 00       	call   c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	39 d8                	cmp    eax,ebx
c00165f0:	74 a0                	je     c0016592 <timerHandler(unsigned long long)+0x4f>
c00165f2:	83 ec 0c             	sub    esp,0xc
c00165f5:	68 bc e2 02 c0       	push   0xc002e2bc
c00165fa:	e8 4f 11 01 00       	call   c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165ff:	c7 04 24 bc e2 02 c0 	mov    DWORD PTR [esp],0xc002e2bc
c0016606:	89 c5                	mov    ebp,eax
c0016608:	e8 65 11 01 00       	call   c0027772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001660d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016610:	83 c4 10             	add    esp,0x10
c0016613:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016616:	39 15 10 d4 02 c0    	cmp    DWORD PTR ds:0xc002d410,edx
c001661c:	a1 14 d4 02 c0       	mov    eax,ds:0xc002d414
c0016621:	19 c8                	sbb    eax,ecx
c0016623:	73 83                	jae    c00165a8 <timerHandler(unsigned long long)+0x65>
c0016625:	50                   	push   eax
c0016626:	50                   	push   eax
c0016627:	55                   	push   ebp
c0016628:	68 bc e2 02 c0       	push   0xc002e2bc
c001662d:	e8 ee 11 01 00       	call   c0027820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016632:	eb 93                	jmp    c00165c7 <timerHandler(unsigned long long)+0x84>
c0016634:	80 3d 8c cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd8c,0x0
c001663b:	74 29                	je     c0016666 <timerHandler(unsigned long long)+0x123>
c001663d:	39 c6                	cmp    esi,eax
c001663f:	bb 00 00 00 00       	mov    ebx,0x0
c0016644:	19 df                	sbb    edi,ebx
c0016646:	72 19                	jb     c0016661 <timerHandler(unsigned long long)+0x11e>
c0016648:	e8 25 6a 00 00       	call   c001d072 <lockScheduler()>
c001664d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016652:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016655:	e8 54 6d 00 00       	call   c001d3ae <schedule()>
c001665a:	e8 15 6a 00 00       	call   c001d074 <unlockScheduler()>
c001665f:	eb 05                	jmp    c0016666 <timerHandler(unsigned long long)+0x123>
c0016661:	29 f0                	sub    eax,esi
c0016663:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016666:	83 c4 0c             	add    esp,0xc
c0016669:	5b                   	pop    ebx
c001666a:	5e                   	pop    esi
c001666b:	5f                   	pop    edi
c001666c:	5d                   	pop    ebp
c001666d:	e9 c1 6d 00 00       	jmp    c001d433 <unlockStuff()>
c0016672:	83 c4 0c             	add    esp,0xc
c0016675:	5b                   	pop    ebx
c0016676:	5e                   	pop    esi
c0016677:	5f                   	pop    edi
c0016678:	5d                   	pop    ebp
c0016679:	c3                   	ret    

c001667a <setupTimer(int)>:
c001667a:	57                   	push   edi
c001667b:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0016680:	56                   	push   esi
c0016681:	53                   	push   ebx
c0016682:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016686:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016695:	e8 4e d9 ff ff       	call   c0013fe8 <Device::getName()>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00166a0:	0f 85 8d 00 00 00    	jne    c0016733 <setupTimer(int)+0xb9>
c00166a6:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c00166ab:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00166b2:	74 7f                	je     c0016733 <setupTimer(int)+0xb9>
c00166b4:	83 ec 0c             	sub    esp,0xc
c00166b7:	68 5c 01 00 00       	push   0x15c
c00166bc:	e8 63 8f ff ff       	call   c000f624 <malloc>
c00166c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00166c4:	89 c3                	mov    ebx,eax
c00166c6:	e8 ef eb 00 00       	call   c00252ba <PIT::PIT()>
c00166cb:	59                   	pop    ecx
c00166cc:	5f                   	pop    edi
c00166cd:	53                   	push   ebx
c00166ce:	ff 35 88 cd 02 c0    	push   DWORD PTR ds:0xc002cd88
c00166d4:	e8 23 d6 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c00166d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166db:	6a 00                	push   0x0
c00166dd:	6a 00                	push   0x0
c00166df:	56                   	push   esi
c00166e0:	53                   	push   ebx
c00166e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166e4:	83 c4 14             	add    esp,0x14
c00166e7:	68 60 01 00 00       	push   0x160
c00166ec:	e8 33 8f ff ff       	call   c000f624 <malloc>
c00166f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00166f4:	89 c7                	mov    edi,eax
c00166f6:	e8 6f ea 00 00       	call   c002516a <APICTimer::APICTimer()>
c00166fb:	6a 00                	push   0x0
c00166fd:	6a 00                	push   0x0
c00166ff:	56                   	push   esi
c0016700:	57                   	push   edi
c0016701:	e8 66 e9 00 00       	call   c002506c <APICTimer::open(int, int, void*)>
c0016706:	83 c4 20             	add    esp,0x20
c0016709:	8b 03                	mov    eax,DWORD PTR [ebx]
c001670b:	6a 00                	push   0x0
c001670d:	6a 00                	push   0x0
c001670f:	6a 00                	push   0x0
c0016711:	53                   	push   ebx
c0016712:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016715:	58                   	pop    eax
c0016716:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001671b:	5a                   	pop    edx
c001671c:	57                   	push   edi
c001671d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016723:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016729:	e8 ce d5 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c001672e:	83 c4 10             	add    esp,0x10
c0016731:	eb 33                	jmp    c0016766 <setupTimer(int)+0xec>
c0016733:	83 ec 0c             	sub    esp,0xc
c0016736:	68 5c 01 00 00       	push   0x15c
c001673b:	e8 e4 8e ff ff       	call   c000f624 <malloc>
c0016740:	89 04 24             	mov    DWORD PTR [esp],eax
c0016743:	89 c3                	mov    ebx,eax
c0016745:	e8 70 eb 00 00       	call   c00252ba <PIT::PIT()>
c001674a:	58                   	pop    eax
c001674b:	5a                   	pop    edx
c001674c:	53                   	push   ebx
c001674d:	ff 35 88 cd 02 c0    	push   DWORD PTR ds:0xc002cd88
c0016753:	e8 a4 d5 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0016758:	8b 03                	mov    eax,DWORD PTR [ebx]
c001675a:	6a 00                	push   0x0
c001675c:	6a 00                	push   0x0
c001675e:	56                   	push   esi
c001675f:	53                   	push   ebx
c0016760:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016763:	83 c4 20             	add    esp,0x20
c0016766:	89 d8                	mov    eax,ebx
c0016768:	5b                   	pop    ebx
c0016769:	5e                   	pop    esi
c001676a:	5f                   	pop    edi
c001676b:	c3                   	ret    

c001676c <VCache::VCache(PhysicalDisk*)>:
c001676c:	53                   	push   ebx
c001676d:	83 ec 18             	sub    esp,0x18
c0016770:	ba 7c 9e 02 c0       	mov    edx,0xc0029e7c
c0016775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016779:	89 10                	mov    DWORD PTR [eax],edx
c001677b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001677f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001678a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016791:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016795:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001679c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00167a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167a7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00167ae:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00167b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00167c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167c4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00167c8:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167d7:	e8 48 8e ff ff       	call   c000f624 <malloc>
c00167dc:	83 c4 10             	add    esp,0x10
c00167df:	89 c3                	mov    ebx,eax
c00167e1:	83 ec 0c             	sub    esp,0xc
c00167e4:	53                   	push   ebx
c00167e5:	e8 a8 69 00 00       	call   c001d192 <Mutex::Mutex()>
c00167ea:	83 c4 10             	add    esp,0x10
c00167ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00167f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00167fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00167ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016803:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001680a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001680e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016818:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001681b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001681f:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016825:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001682b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001682f:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016832:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016839:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001683d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016841:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016847:	c1 e0 06             	shl    eax,0x6
c001684a:	83 ec 0c             	sub    esp,0xc
c001684d:	50                   	push   eax
c001684e:	e8 d1 8d ff ff       	call   c000f624 <malloc>
c0016853:	83 c4 10             	add    esp,0x10
c0016856:	89 c2                	mov    edx,eax
c0016858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001685c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001685f:	90                   	nop
c0016860:	83 c4 18             	add    esp,0x18
c0016863:	5b                   	pop    ebx
c0016864:	c3                   	ret    
c0016865:	90                   	nop

c0016866 <VCache::writeWriteBuffer()>:
c0016866:	53                   	push   ebx
c0016867:	83 ec 14             	sub    esp,0x14
c001686a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001686e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016871:	8b 10                	mov    edx,DWORD PTR [eax]
c0016873:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016876:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016879:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001687c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001687f:	50                   	push   eax
c0016880:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016883:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001688a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016891:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016895:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001689c:	83 c4 28             	add    esp,0x28
c001689f:	5b                   	pop    ebx
c00168a0:	c3                   	ret    
c00168a1:	90                   	nop

c00168a2 <VCache::~VCache()>:
c00168a2:	83 ec 0c             	sub    esp,0xc
c00168a5:	ba 7c 9e 02 c0       	mov    edx,0xc0029e7c
c00168aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ae:	89 10                	mov    DWORD PTR [eax],edx
c00168b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00168b7:	84 c0                	test   al,al
c00168b9:	74 0f                	je     c00168ca <VCache::~VCache()+0x28>
c00168bb:	83 ec 0c             	sub    esp,0xc
c00168be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c2:	e8 9f ff ff ff       	call   c0016866 <VCache::writeWriteBuffer()>
c00168c7:	83 c4 10             	add    esp,0x10
c00168ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ce:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00168d1:	83 ec 0c             	sub    esp,0xc
c00168d4:	50                   	push   eax
c00168d5:	e8 5a 8d ff ff       	call   c000f634 <free>
c00168da:	83 c4 10             	add    esp,0x10
c00168dd:	90                   	nop
c00168de:	83 c4 0c             	add    esp,0xc
c00168e1:	c3                   	ret    

c00168e2 <VCache::~VCache()>:
c00168e2:	83 ec 0c             	sub    esp,0xc
c00168e5:	83 ec 0c             	sub    esp,0xc
c00168e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ec:	e8 b1 ff ff ff       	call   c00168a2 <VCache::~VCache()>
c00168f1:	83 c4 10             	add    esp,0x10
c00168f4:	83 ec 08             	sub    esp,0x8
c00168f7:	6a 30                	push   0x30
c00168f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168fd:	e8 f3 be ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0016902:	83 c4 10             	add    esp,0x10
c0016905:	83 c4 0c             	add    esp,0xc
c0016908:	c3                   	ret    
c0016909:	90                   	nop

c001690a <VCache::write(unsigned long long, int, void*)>:
c001690a:	55                   	push   ebp
c001690b:	57                   	push   edi
c001690c:	56                   	push   esi
c001690d:	53                   	push   ebx
c001690e:	83 ec 28             	sub    esp,0x28
c0016911:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016915:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016919:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001691d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016921:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016924:	e8 cb 6c 00 00       	call   c001d5f4 <Semaphore::acquire()>
c0016929:	83 c4 10             	add    esp,0x10
c001692c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016930:	74 66                	je     c0016998 <VCache::write(unsigned long long, int, void*)+0x8e>
c0016932:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016935:	99                   	cdq    
c0016936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001693a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001693d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016940:	89 c1                	mov    ecx,eax
c0016942:	89 d0                	mov    eax,edx
c0016944:	31 f1                	xor    ecx,esi
c0016946:	31 f8                	xor    eax,edi
c0016948:	89 ca                	mov    edx,ecx
c001694a:	09 c2                	or     edx,eax
c001694c:	75 3e                	jne    c001698c <VCache::write(unsigned long long, int, void*)+0x82>
c001694e:	83 fd 01             	cmp    ebp,0x1
c0016951:	75 39                	jne    c001698c <VCache::write(unsigned long long, int, void*)+0x82>
c0016953:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016956:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001695c:	51                   	push   ecx
c001695d:	50                   	push   eax
c001695e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016962:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016966:	0f af c8             	imul   ecx,eax
c0016969:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001696c:	51                   	push   ecx
c001696d:	e8 2e 9d fe ff       	call   c00006a0 <memcpy>
c0016972:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016975:	83 c4 10             	add    esp,0x10
c0016978:	40                   	inc    eax
c0016979:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001697c:	83 f8 40             	cmp    eax,0x40
c001697f:	75 57                	jne    c00169d8 <VCache::write(unsigned long long, int, void*)+0xce>
c0016981:	83 ec 0c             	sub    esp,0xc
c0016984:	53                   	push   ebx
c0016985:	e8 dc fe ff ff       	call   c0016866 <VCache::writeWriteBuffer()>
c001698a:	eb 34                	jmp    c00169c0 <VCache::write(unsigned long long, int, void*)+0xb6>
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	53                   	push   ebx
c0016990:	e8 d1 fe ff ff       	call   c0016866 <VCache::writeWriteBuffer()>
c0016995:	83 c4 10             	add    esp,0x10
c0016998:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001699b:	83 fd 3f             	cmp    ebp,0x3f
c001699e:	7f 25                	jg     c00169c5 <VCache::write(unsigned long long, int, void*)+0xbb>
c00169a0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00169a3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00169a6:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00169a9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00169ad:	52                   	push   edx
c00169ae:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00169b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00169b8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169bb:	e8 e0 9c fe ff       	call   c00006a0 <memcpy>
c00169c0:	83 c4 10             	add    esp,0x10
c00169c3:	eb 13                	jmp    c00169d8 <VCache::write(unsigned long long, int, void*)+0xce>
c00169c5:	83 ec 0c             	sub    esp,0xc
c00169c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00169ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00169ce:	55                   	push   ebp
c00169cf:	57                   	push   edi
c00169d0:	56                   	push   esi
c00169d1:	50                   	push   eax
c00169d2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00169d5:	83 c4 20             	add    esp,0x20
c00169d8:	83 ec 0c             	sub    esp,0xc
c00169db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00169de:	e8 bf 71 00 00       	call   c001dba2 <Semaphore::release()>
c00169e3:	83 c4 2c             	add    esp,0x2c
c00169e6:	31 c0                	xor    eax,eax
c00169e8:	5b                   	pop    ebx
c00169e9:	5e                   	pop    esi
c00169ea:	5f                   	pop    edi
c00169eb:	5d                   	pop    ebp
c00169ec:	c3                   	ret    
c00169ed:	90                   	nop

c00169ee <VCache::read(unsigned long long, int, void*)>:
c00169ee:	57                   	push   edi
c00169ef:	56                   	push   esi
c00169f0:	53                   	push   ebx
c00169f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00169f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00169fd:	83 ec 0c             	sub    esp,0xc
c0016a00:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a03:	e8 ec 6b 00 00       	call   c001d5f4 <Semaphore::acquire()>
c0016a08:	83 c4 10             	add    esp,0x10
c0016a0b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a0f:	74 0c                	je     c0016a1d <VCache::read(unsigned long long, int, void*)+0x2f>
c0016a11:	83 ec 0c             	sub    esp,0xc
c0016a14:	53                   	push   ebx
c0016a15:	e8 4c fe ff ff       	call   c0016866 <VCache::writeWriteBuffer()>
c0016a1a:	83 c4 10             	add    esp,0x10
c0016a1d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a20:	83 ec 0c             	sub    esp,0xc
c0016a23:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a2d:	57                   	push   edi
c0016a2e:	56                   	push   esi
c0016a2f:	50                   	push   eax
c0016a30:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a33:	83 c4 14             	add    esp,0x14
c0016a36:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a39:	e8 64 71 00 00       	call   c001dba2 <Semaphore::release()>
c0016a3e:	83 c4 10             	add    esp,0x10
c0016a41:	31 c0                	xor    eax,eax
c0016a43:	5b                   	pop    ebx
c0016a44:	5e                   	pop    esi
c0016a45:	5f                   	pop    edi
c0016a46:	c3                   	ret    
c0016a47:	90                   	nop

c0016a48 <Video::putrect(int, int, int, int, unsigned int)>:
c0016a48:	55                   	push   ebp
c0016a49:	57                   	push   edi
c0016a4a:	56                   	push   esi
c0016a4b:	53                   	push   ebx
c0016a4c:	83 ec 1c             	sub    esp,0x1c
c0016a4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016a53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a57:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a5b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016a5f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a67:	01 df                	add    edi,ebx
c0016a69:	39 fb                	cmp    ebx,edi
c0016a6b:	7d 1f                	jge    c0016a8c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016a6d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016a71:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016a75:	7d 12                	jge    c0016a89 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016a77:	8b 16                	mov    edx,DWORD PTR [esi]
c0016a79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016a7d:	53                   	push   ebx
c0016a7e:	55                   	push   ebp
c0016a7f:	45                   	inc    ebp
c0016a80:	56                   	push   esi
c0016a81:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a84:	83 c4 10             	add    esp,0x10
c0016a87:	eb e8                	jmp    c0016a71 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016a89:	43                   	inc    ebx
c0016a8a:	eb dd                	jmp    c0016a69 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016a8c:	83 c4 1c             	add    esp,0x1c
c0016a8f:	5b                   	pop    ebx
c0016a90:	5e                   	pop    esi
c0016a91:	5f                   	pop    edi
c0016a92:	5d                   	pop    ebp
c0016a93:	c3                   	ret    

c0016a94 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016a94:	55                   	push   ebp
c0016a95:	57                   	push   edi
c0016a96:	31 ff                	xor    edi,edi
c0016a98:	56                   	push   esi
c0016a99:	53                   	push   ebx
c0016a9a:	83 ec 1c             	sub    esp,0x1c
c0016a9d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016aa1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016aa5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016aac:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ab1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ab5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ab9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016abd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ac0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016ac4:	01 f9                	add    ecx,edi
c0016ac6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016aca:	7d 2f                	jge    c0016afb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016acc:	31 f6                	xor    esi,esi
c0016ace:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ad2:	01 f2                	add    edx,esi
c0016ad4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016ad8:	7d 1a                	jge    c0016af4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ada:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016add:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ae0:	46                   	inc    esi
c0016ae1:	51                   	push   ecx
c0016ae2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016ae6:	52                   	push   edx
c0016ae7:	55                   	push   ebp
c0016ae8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016af2:	eb da                	jmp    c0016ace <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016af4:	47                   	inc    edi
c0016af5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016af9:	eb c5                	jmp    c0016ac0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016afb:	83 c4 1c             	add    esp,0x1c
c0016afe:	5b                   	pop    ebx
c0016aff:	5e                   	pop    esi
c0016b00:	5f                   	pop    edi
c0016b01:	5d                   	pop    ebp
c0016b02:	c3                   	ret    
c0016b03:	90                   	nop

c0016b04 <Video::blit(unsigned int*, int, int, int, int)>:
c0016b04:	55                   	push   ebp
c0016b05:	57                   	push   edi
c0016b06:	56                   	push   esi
c0016b07:	53                   	push   ebx
c0016b08:	83 ec 1c             	sub    esp,0x1c
c0016b0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b13:	85 c0                	test   eax,eax
c0016b15:	79 02                	jns    c0016b19 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016b17:	31 c0                	xor    eax,eax
c0016b19:	c1 e0 02             	shl    eax,0x2
c0016b1c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b24:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b28:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016b2c:	39 d8                	cmp    eax,ebx
c0016b2e:	7e 49                	jle    c0016b79 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b30:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b36:	7c 41                	jl     c0016b79 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b38:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016b3c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b40:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b44:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016b48:	39 f9                	cmp    ecx,edi
c0016b4a:	7e 22                	jle    c0016b6e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016b4c:	83 c5 04             	add    ebp,0x4
c0016b4f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b55:	7c 14                	jl     c0016b6b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016b57:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016b59:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016b5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b64:	56                   	push   esi
c0016b65:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016b68:	83 c4 10             	add    esp,0x10
c0016b6b:	47                   	inc    edi
c0016b6c:	eb d2                	jmp    c0016b40 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b72:	43                   	inc    ebx
c0016b73:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016b77:	eb ab                	jmp    c0016b24 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016b79:	83 c4 1c             	add    esp,0x1c
c0016b7c:	5b                   	pop    ebx
c0016b7d:	5e                   	pop    esi
c0016b7e:	5f                   	pop    edi
c0016b7f:	5d                   	pop    ebp
c0016b80:	c3                   	ret    
c0016b81:	90                   	nop

c0016b82 <Video::clearScreen(unsigned int)>:
c0016b82:	57                   	push   edi
c0016b83:	56                   	push   esi
c0016b84:	53                   	push   ebx
c0016b85:	31 db                	xor    ebx,ebx
c0016b87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b8b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b91:	7e 1f                	jle    c0016bb2 <Video::clearScreen(unsigned int)+0x30>
c0016b93:	31 ff                	xor    edi,edi
c0016b95:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b9b:	7e 12                	jle    c0016baf <Video::clearScreen(unsigned int)+0x2d>
c0016b9d:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ba3:	53                   	push   ebx
c0016ba4:	57                   	push   edi
c0016ba5:	47                   	inc    edi
c0016ba6:	56                   	push   esi
c0016ba7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016baa:	83 c4 10             	add    esp,0x10
c0016bad:	eb e6                	jmp    c0016b95 <Video::clearScreen(unsigned int)+0x13>
c0016baf:	43                   	inc    ebx
c0016bb0:	eb d9                	jmp    c0016b8b <Video::clearScreen(unsigned int)+0x9>
c0016bb2:	5b                   	pop    ebx
c0016bb3:	5e                   	pop    esi
c0016bb4:	5f                   	pop    edi
c0016bb5:	c3                   	ret    

c0016bb6 <Video::putpixel(int, int, unsigned int)>:
c0016bb6:	c7 44 24 04 84 9e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029e84
c0016bbe:	e9 00 2f 00 00       	jmp    c0019ac3 <Krnl::panic(char const*)>
c0016bc3:	90                   	nop

c0016bc4 <Video::Video(char const*)>:
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bcb:	83 ec 08             	sub    esp,0x8
c0016bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bd2:	50                   	push   eax
c0016bd3:	e8 14 d3 ff ff       	call   c0013eec <Device::Device(char const*)>
c0016bd8:	83 c4 10             	add    esp,0x10
c0016bdb:	ba 08 9f 02 c0       	mov    edx,0xc0029f08
c0016be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be4:	89 10                	mov    DWORD PTR [eax],edx
c0016be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bea:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016bf4:	90                   	nop
c0016bf5:	83 c4 0c             	add    esp,0xc
c0016bf8:	c3                   	ret    
c0016bf9:	90                   	nop

c0016bfa <Video::~Video()>:
c0016bfa:	83 ec 0c             	sub    esp,0xc
c0016bfd:	ba 08 9f 02 c0       	mov    edx,0xc0029f08
c0016c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c06:	89 10                	mov    DWORD PTR [eax],edx
c0016c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0c:	83 ec 0c             	sub    esp,0xc
c0016c0f:	50                   	push   eax
c0016c10:	e8 b9 cf ff ff       	call   c0013bce <Device::~Device()>
c0016c15:	83 c4 10             	add    esp,0x10
c0016c18:	90                   	nop
c0016c19:	83 c4 0c             	add    esp,0xc
c0016c1c:	c3                   	ret    
c0016c1d:	90                   	nop

c0016c1e <Video::~Video()>:
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	83 ec 0c             	sub    esp,0xc
c0016c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c28:	e8 cd ff ff ff       	call   c0016bfa <Video::~Video()>
c0016c2d:	83 c4 10             	add    esp,0x10
c0016c30:	83 ec 08             	sub    esp,0x8
c0016c33:	68 64 01 00 00       	push   0x164
c0016c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c3c:	e8 b4 bb ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0016c41:	83 c4 10             	add    esp,0x10
c0016c44:	83 c4 0c             	add    esp,0xc
c0016c47:	c3                   	ret    

c0016c48 <Video::isMonochrome()>:
c0016c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c4c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016c52:	c3                   	ret    
c0016c53:	90                   	nop

c0016c54 <Video::getWidth()>:
c0016c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c58:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c5e:	c3                   	ret    
c0016c5f:	90                   	nop

c0016c60 <Video::getHeight()>:
c0016c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c64:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c6a:	c3                   	ret    
c0016c6b:	90                   	nop

c0016c6c <Video::drawCursor(int, int, unsigned char*, int)>:
c0016c6c:	55                   	push   ebp
c0016c6d:	57                   	push   edi
c0016c6e:	56                   	push   esi
c0016c6f:	53                   	push   ebx
c0016c70:	83 ec 2c             	sub    esp,0x2c
c0016c73:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c77:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c7b:	83 f8 01             	cmp    eax,0x1
c0016c7e:	19 c9                	sbb    ecx,ecx
c0016c80:	31 db                	xor    ebx,ebx
c0016c82:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016c86:	89 cd                	mov    ebp,ecx
c0016c88:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016c90:	f7 d5                	not    ebp
c0016c92:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016c98:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016c9c:	01 d8                	add    eax,ebx
c0016c9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ca2:	56                   	push   esi
c0016ca3:	e8 b8 ff ff ff       	call   c0016c60 <Video::getHeight()>
c0016ca8:	59                   	pop    ecx
c0016ca9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016cad:	7e 70                	jle    c0016d1f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016caf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016cb3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016cb7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016cba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cbe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016cc2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016cc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ccd:	89 f8                	mov    eax,edi
c0016ccf:	83 c0 20             	add    eax,0x20
c0016cd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cd6:	56                   	push   esi
c0016cd7:	e8 78 ff ff ff       	call   c0016c54 <Video::getWidth()>
c0016cdc:	5a                   	pop    edx
c0016cdd:	39 c7                	cmp    edi,eax
c0016cdf:	7d 34                	jge    c0016d15 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ce1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016ce6:	74 05                	je     c0016ced <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016ce8:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cea:	55                   	push   ebp
c0016ceb:	eb 0d                	jmp    c0016cfa <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ced:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016cf2:	74 12                	je     c0016d06 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016cf4:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016cfa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016cfe:	57                   	push   edi
c0016cff:	56                   	push   esi
c0016d00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016d0a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016d0e:	47                   	inc    edi
c0016d0f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d13:	75 c1                	jne    c0016cd6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016d15:	43                   	inc    ebx
c0016d16:	83 fb 20             	cmp    ebx,0x20
c0016d19:	0f 85 79 ff ff ff    	jne    c0016c98 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016d1f:	83 c4 2c             	add    esp,0x2c
c0016d22:	5b                   	pop    ebx
c0016d23:	5e                   	pop    esi
c0016d24:	5f                   	pop    edi
c0016d25:	5d                   	pop    ebp
c0016d26:	c3                   	ret    
c0016d27:	90                   	nop

c0016d28 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016d28:	55                   	push   ebp
c0016d29:	57                   	push   edi
c0016d2a:	56                   	push   esi
c0016d2b:	53                   	push   ebx
c0016d2c:	83 ec 28             	sub    esp,0x28
c0016d2f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d33:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016d37:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016d3b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016d3f:	c1 e7 08             	shl    edi,0x8
c0016d42:	01 c7                	add    edi,eax
c0016d44:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016d48:	c1 e0 08             	shl    eax,0x8
c0016d4b:	01 d0                	add    eax,edx
c0016d4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d55:	0f af c7             	imul   eax,edi
c0016d58:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016d5f:	50                   	push   eax
c0016d60:	e8 bf 88 ff ff       	call   c000f624 <malloc>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	89 c5                	mov    ebp,eax
c0016d6a:	85 c0                	test   eax,eax
c0016d6c:	75 15                	jne    c0016d83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016d6e:	83 ec 0c             	sub    esp,0xc
c0016d71:	68 a5 9e 02 c0       	push   0xc0029ea5
c0016d76:	e8 5a bb ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	e9 1c 01 00 00       	jmp    c0016e9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016d83:	be 12 00 00 00       	mov    esi,0x12
c0016d88:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016d8c:	74 11                	je     c0016d9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016d8e:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016d92:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016d96:	c1 fe 03             	sar    esi,0x3
c0016d99:	0f af f0             	imul   esi,eax
c0016d9c:	83 c6 12             	add    esi,0x12
c0016d9f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016da3:	74 04                	je     c0016da9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016da5:	85 ff                	test   edi,edi
c0016da7:	75 12                	jne    c0016dbb <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016da9:	83 ec 0c             	sub    esp,0xc
c0016dac:	68 bc 9e 02 c0       	push   0xc0029ebc
c0016db1:	e8 1f bb ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0016db6:	e9 ce 00 00 00       	jmp    c0016e89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016dbb:	52                   	push   edx
c0016dbc:	52                   	push   edx
c0016dbd:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016dc1:	50                   	push   eax
c0016dc2:	68 d1 9e 02 c0       	push   0xc0029ed1
c0016dc7:	e8 09 bb ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0016dcc:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016dd0:	83 c4 10             	add    esp,0x10
c0016dd3:	80 fa 02             	cmp    dl,0x2
c0016dd6:	0f 85 98 00 00 00    	jne    c0016e74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016ddc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016de1:	75 10                	jne    c0016df3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016de3:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016de7:	75 0a                	jne    c0016df3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016de9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016dec:	83 e8 18             	sub    eax,0x18
c0016def:	a8 f7                	test   al,0xf7
c0016df1:	74 0a                	je     c0016dfd <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016df3:	83 ec 0c             	sub    esp,0xc
c0016df6:	68 de 9e 02 c0       	push   0xc0029ede
c0016dfb:	eb 7f                	jmp    c0016e7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016dfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016e05:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016e0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016e11:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e19:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016e1d:	75 0c                	jne    c0016e2b <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016e1f:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016e24:	c1 e0 18             	shl    eax,0x18
c0016e27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e2b:	41                   	inc    ecx
c0016e2c:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016e31:	c1 e2 10             	shl    edx,0x10
c0016e34:	89 d0                	mov    eax,edx
c0016e36:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016e3b:	c1 e2 08             	shl    edx,0x8
c0016e3e:	09 c2                	or     edx,eax
c0016e40:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016e44:	09 c2                	or     edx,eax
c0016e46:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016e4a:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016e4e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016e52:	c1 f8 03             	sar    eax,0x3
c0016e55:	01 c6                	add    esi,eax
c0016e57:	89 c8                	mov    eax,ecx
c0016e59:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016e5d:	39 c7                	cmp    edi,eax
c0016e5f:	7f b0                	jg     c0016e11 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016e61:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016e65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e69:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016e6c:	7e 22                	jle    c0016e90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016e6e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016e72:	eb 99                	jmp    c0016e0d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016e74:	50                   	push   eax
c0016e75:	50                   	push   eax
c0016e76:	52                   	push   edx
c0016e77:	68 ec 9e 02 c0       	push   0xc0029eec
c0016e7c:	e8 54 ba ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0016e81:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e84:	e8 ab 87 ff ff       	call   c000f634 <free>
c0016e89:	83 c4 10             	add    esp,0x10
c0016e8c:	31 ed                	xor    ebp,ebp
c0016e8e:	eb 0f                	jmp    c0016e9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016e90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e94:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016e97:	89 38                	mov    DWORD PTR [eax],edi
c0016e99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e9d:	89 08                	mov    DWORD PTR [eax],ecx
c0016e9f:	83 c4 1c             	add    esp,0x1c
c0016ea2:	89 e8                	mov    eax,ebp
c0016ea4:	5b                   	pop    ebx
c0016ea5:	5e                   	pop    esi
c0016ea6:	5f                   	pop    edi
c0016ea7:	5d                   	pop    ebp
c0016ea8:	c3                   	ret    
c0016ea9:	90                   	nop

c0016eaa <Video::putTGA(int, int, unsigned char*, int)>:
c0016eaa:	55                   	push   ebp
c0016eab:	57                   	push   edi
c0016eac:	56                   	push   esi
c0016ead:	53                   	push   ebx
c0016eae:	83 ec 28             	sub    esp,0x28
c0016eb1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016eb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016eb9:	50                   	push   eax
c0016eba:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ebe:	50                   	push   eax
c0016ebf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ec3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ec7:	56                   	push   esi
c0016ec8:	e8 5b fe ff ff       	call   c0016d28 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016ecd:	83 c4 20             	add    esp,0x20
c0016ed0:	85 c0                	test   eax,eax
c0016ed2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016ed6:	74 35                	je     c0016f0d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ed8:	89 c7                	mov    edi,eax
c0016eda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ede:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016ee2:	39 d8                	cmp    eax,ebx
c0016ee4:	7e 27                	jle    c0016f0d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ee6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016eea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016ef2:	39 e8                	cmp    eax,ebp
c0016ef4:	7e 14                	jle    c0016f0a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016ef6:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ef8:	83 c7 04             	add    edi,0x4
c0016efb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016efe:	53                   	push   ebx
c0016eff:	55                   	push   ebp
c0016f00:	45                   	inc    ebp
c0016f01:	56                   	push   esi
c0016f02:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f05:	83 c4 10             	add    esp,0x10
c0016f08:	eb e0                	jmp    c0016eea <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016f0a:	43                   	inc    ebx
c0016f0b:	eb cd                	jmp    c0016eda <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016f0d:	83 c4 1c             	add    esp,0x1c
c0016f10:	5b                   	pop    ebx
c0016f11:	5e                   	pop    esi
c0016f12:	5f                   	pop    edi
c0016f13:	5d                   	pop    ebp
c0016f14:	c3                   	ret    
c0016f15:	90                   	nop

c0016f16 <ACPI::close(int, int, void*)>:
c0016f16:	83 ec 1c             	sub    esp,0x1c
c0016f19:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016f21:	74 0a                	je     c0016f2d <ACPI::close(int, int, void*)+0x17>
c0016f23:	b8 00 00 00 00       	mov    eax,0x0
c0016f28:	e9 9a 00 00 00       	jmp    c0016fc7 <ACPI::close(int, int, void*)+0xb1>
c0016f2d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f32:	75 37                	jne    c0016f6b <ACPI::close(int, int, void*)+0x55>
c0016f34:	83 ec 0c             	sub    esp,0xc
c0016f37:	68 48 9f 02 c0       	push   0xc0029f48
c0016f3c:	e8 94 b9 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0016f41:	83 c4 10             	add    esp,0x10
c0016f44:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c0016f49:	85 c0                	test   eax,eax
c0016f4b:	74 07                	je     c0016f54 <ACPI::close(int, int, void*)+0x3e>
c0016f4d:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c0016f52:	ff d0                	call   eax
c0016f54:	83 ec 0c             	sub    esp,0xc
c0016f57:	68 50 a0 02 c0       	push   0xc002a050
c0016f5c:	e8 62 2b 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0016f61:	83 c4 10             	add    esp,0x10
c0016f64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f69:	eb 5c                	jmp    c0016fc7 <ACPI::close(int, int, void*)+0xb1>
c0016f6b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016f70:	75 50                	jne    c0016fc2 <ACPI::close(int, int, void*)+0xac>
c0016f72:	a1 24 d4 02 c0       	mov    eax,ds:0xc002d424
c0016f77:	85 c0                	test   eax,eax
c0016f79:	74 07                	je     c0016f82 <ACPI::close(int, int, void*)+0x6c>
c0016f7b:	a1 24 d4 02 c0       	mov    eax,ds:0xc002d424
c0016f80:	ff d0                	call   eax
c0016f82:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016f87:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016f8c:	83 e0 02             	and    eax,0x2
c0016f8f:	74 1c                	je     c0016fad <ACPI::close(int, int, void*)+0x97>
c0016f91:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016f98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f9c:	89 c2                	mov    edx,eax
c0016f9e:	ec                   	in     al,dx
c0016f9f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016fa3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016fa7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016fab:	eb da                	jmp    c0016f87 <ACPI::close(int, int, void*)+0x71>
c0016fad:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016fb4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016fb9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016fbd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fc1:	ee                   	out    dx,al
c0016fc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016fc7:	83 c4 1c             	add    esp,0x1c
c0016fca:	c3                   	ret    

c0016fcb <findRSDP()>:
c0016fcb:	83 ec 1c             	sub    esp,0x1c
c0016fce:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0016fd3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016fd9:	83 e0 04             	and    eax,0x4
c0016fdc:	84 c0                	test   al,al
c0016fde:	75 07                	jne    c0016fe7 <findRSDP()+0x1c>
c0016fe0:	b8 00 00 00 00       	mov    eax,0x0
c0016fe5:	eb 6a                	jmp    c0017051 <findRSDP()+0x86>
c0016fe7:	a1 d0 cd 02 c0       	mov    eax,ds:0xc002cdd0
c0016fec:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016ff1:	7f 1b                	jg     c001700e <findRSDP()+0x43>
c0016ff3:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0016ff8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ffe:	83 e2 fb             	and    edx,0xfffffffb
c0017001:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017007:	b8 00 00 00 00       	mov    eax,0x0
c001700c:	eb 43                	jmp    c0017051 <findRSDP()+0x86>
c001700e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017016:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001701e:	77 2c                	ja     c001704c <findRSDP()+0x81>
c0017020:	83 ec 04             	sub    esp,0x4
c0017023:	6a 08                	push   0x8
c0017025:	68 55 9f 02 c0       	push   0xc0029f55
c001702a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001702e:	e8 0a 96 fe ff       	call   c000063d <memcmp>
c0017033:	83 c4 10             	add    esp,0x10
c0017036:	85 c0                	test   eax,eax
c0017038:	0f 94 c0             	sete   al
c001703b:	84 c0                	test   al,al
c001703d:	74 06                	je     c0017045 <findRSDP()+0x7a>
c001703f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017043:	eb 0c                	jmp    c0017051 <findRSDP()+0x86>
c0017045:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001704a:	eb ca                	jmp    c0017016 <findRSDP()+0x4b>
c001704c:	b8 00 00 00 00       	mov    eax,0x0
c0017051:	83 c4 1c             	add    esp,0x1c
c0017054:	c3                   	ret    

c0017055 <loadACPITables(unsigned char*)>:
c0017055:	56                   	push   esi
c0017056:	53                   	push   ebx
c0017057:	83 ec 44             	sub    esp,0x44
c001705a:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001705f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017065:	83 e0 04             	and    eax,0x4
c0017068:	84 c0                	test   al,al
c001706a:	0f 84 05 02 00 00    	je     c0017275 <loadACPITables(unsigned char*)+0x220>
c0017070:	a0 40 d6 02 c0       	mov    al,ds:0xc002d640
c0017075:	84 c0                	test   al,al
c0017077:	74 75                	je     c00170ee <loadACPITables(unsigned char*)+0x99>
c0017079:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001707d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017081:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017085:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017088:	83 e8 24             	sub    eax,0x24
c001708b:	c1 e8 03             	shr    eax,0x3
c001708e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017092:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001709a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001709e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00170a2:	0f 8d b2 00 00 00    	jge    c001715a <loadACPITables(unsigned char*)+0x105>
c00170a8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170ac:	83 c0 24             	add    eax,0x24
c00170af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00170bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00170bf:	c1 e0 03             	shl    eax,0x3
c00170c2:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00170c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00170cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00170cf:	89 c1                	mov    ecx,eax
c00170d1:	a1 2c d4 02 c0       	mov    eax,ds:0xc002d42c
c00170d6:	8d 50 01             	lea    edx,[eax+0x1]
c00170d9:	89 15 2c d4 02 c0    	mov    DWORD PTR ds:0xc002d42c,edx
c00170df:	89 ca                	mov    edx,ecx
c00170e1:	89 14 c5 44 d4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2bbc],edx
c00170e8:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00170ec:	eb ac                	jmp    c001709a <loadACPITables(unsigned char*)+0x45>
c00170ee:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00170f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00170fd:	83 e8 24             	sub    eax,0x24
c0017100:	c1 e8 02             	shr    eax,0x2
c0017103:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017107:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001710f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017113:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017117:	7d 41                	jge    c001715a <loadACPITables(unsigned char*)+0x105>
c0017119:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001711d:	83 c0 24             	add    eax,0x24
c0017120:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017124:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017128:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001712c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017130:	c1 e0 02             	shl    eax,0x2
c0017133:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017137:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001713b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001713d:	a1 2c d4 02 c0       	mov    eax,ds:0xc002d42c
c0017142:	8d 50 01             	lea    edx,[eax+0x1]
c0017145:	89 15 2c d4 02 c0    	mov    DWORD PTR ds:0xc002d42c,edx
c001714b:	89 ca                	mov    edx,ecx
c001714d:	89 14 c5 44 d4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2bbc],edx
c0017154:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017158:	eb b5                	jmp    c001710f <loadACPITables(unsigned char*)+0xba>
c001715a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017162:	a1 2c d4 02 c0       	mov    eax,ds:0xc002d42c
c0017167:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001716b:	0f 8d 05 01 00 00    	jge    c0017276 <loadACPITables(unsigned char*)+0x221>
c0017171:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017175:	8b 04 c5 44 d4 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2bbc]
c001717c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017184:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001718c:	25 ff 0f 00 00       	and    eax,0xfff
c0017191:	89 c6                	mov    esi,eax
c0017193:	e8 dd a8 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0017198:	89 c3                	mov    ebx,eax
c001719a:	83 ec 0c             	sub    esp,0xc
c001719d:	6a 01                	push   0x1
c001719f:	e8 41 a7 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00171ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171b1:	83 ec 0c             	sub    esp,0xc
c00171b4:	6a 01                	push   0x1
c00171b6:	6a 01                	push   0x1
c00171b8:	50                   	push   eax
c00171b9:	52                   	push   edx
c00171ba:	53                   	push   ebx
c00171bb:	e8 e4 b0 ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171c0:	83 c4 20             	add    esp,0x20
c00171c3:	09 f0                	or     eax,esi
c00171c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171cd:	c1 e0 03             	shl    eax,0x3
c00171d0:	05 40 d4 02 c0       	add    eax,0xc002d440
c00171d5:	83 ec 04             	sub    esp,0x4
c00171d8:	6a 04                	push   0x4
c00171da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171de:	50                   	push   eax
c00171df:	e8 bc 94 fe ff       	call   c00006a0 <memcpy>
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171f6:	05 00 10 00 00       	add    eax,0x1000
c00171fb:	c1 e8 0c             	shr    eax,0xc
c00171fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017206:	89 04 24             	mov    DWORD PTR [esp],eax
c0017209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001720d:	25 ff 0f 00 00       	and    eax,0xfff
c0017212:	89 c6                	mov    esi,eax
c0017214:	e8 5c a8 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0017219:	89 c3                	mov    ebx,eax
c001721b:	83 ec 0c             	sub    esp,0xc
c001721e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017222:	e8 be a6 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001722e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017234:	83 ec 0c             	sub    esp,0xc
c0017237:	6a 01                	push   0x1
c0017239:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001723d:	50                   	push   eax
c001723e:	52                   	push   edx
c001723f:	53                   	push   ebx
c0017240:	e8 5f b0 ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017245:	83 c4 20             	add    esp,0x20
c0017248:	09 f0                	or     eax,esi
c001724a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001724e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017251:	83 ec 0c             	sub    esp,0xc
c0017254:	50                   	push   eax
c0017255:	e8 ef a9 ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c001725a:	83 c4 10             	add    esp,0x10
c001725d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017261:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017265:	89 14 c5 44 d4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2bbc],edx
c001726c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017270:	e9 ed fe ff ff       	jmp    c0017162 <loadACPITables(unsigned char*)+0x10d>
c0017275:	90                   	nop
c0017276:	83 c4 44             	add    esp,0x44
c0017279:	5b                   	pop    ebx
c001727a:	5e                   	pop    esi
c001727b:	c3                   	ret    

c001727c <findRSDT(unsigned char*)>:
c001727c:	56                   	push   esi
c001727d:	53                   	push   ebx
c001727e:	83 ec 44             	sub    esp,0x44
c0017281:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0017286:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001728c:	83 e0 04             	and    eax,0x4
c001728f:	84 c0                	test   al,al
c0017291:	75 0a                	jne    c001729d <findRSDT(unsigned char*)+0x21>
c0017293:	b8 00 00 00 00       	mov    eax,0x0
c0017298:	e9 f7 00 00 00       	jmp    c0017394 <findRSDT(unsigned char*)+0x118>
c001729d:	83 ec 04             	sub    esp,0x4
c00172a0:	6a 24                	push   0x24
c00172a2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00172a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172aa:	50                   	push   eax
c00172ab:	e8 f0 93 fe ff       	call   c00006a0 <memcpy>
c00172b0:	83 c4 10             	add    esp,0x10
c00172b3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00172b7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00172bb:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00172c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00172c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172cb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172db:	25 ff 0f 00 00       	and    eax,0xfff
c00172e0:	89 c6                	mov    esi,eax
c00172e2:	e8 8e a7 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c00172e7:	89 c3                	mov    ebx,eax
c00172e9:	83 ec 0c             	sub    esp,0xc
c00172ec:	6a 02                	push   0x2
c00172ee:	e8 f2 a5 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c00172f3:	83 c4 10             	add    esp,0x10
c00172f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00172fa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017300:	83 ec 0c             	sub    esp,0xc
c0017303:	6a 01                	push   0x1
c0017305:	6a 02                	push   0x2
c0017307:	50                   	push   eax
c0017308:	52                   	push   edx
c0017309:	53                   	push   ebx
c001730a:	e8 95 af ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001730f:	83 c4 20             	add    esp,0x20
c0017312:	09 f0                	or     eax,esi
c0017314:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017318:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001731c:	25 ff 0f 00 00       	and    eax,0xfff
c0017321:	89 c6                	mov    esi,eax
c0017323:	e8 4d a7 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0017328:	89 c3                	mov    ebx,eax
c001732a:	83 ec 0c             	sub    esp,0xc
c001732d:	6a 02                	push   0x2
c001732f:	e8 b1 a5 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c0017334:	83 c4 10             	add    esp,0x10
c0017337:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001733b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017341:	83 ec 0c             	sub    esp,0xc
c0017344:	6a 01                	push   0x1
c0017346:	6a 02                	push   0x2
c0017348:	50                   	push   eax
c0017349:	52                   	push   edx
c001734a:	53                   	push   ebx
c001734b:	e8 54 af ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017350:	83 c4 20             	add    esp,0x20
c0017353:	09 f0                	or     eax,esi
c0017355:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017359:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001735e:	75 11                	jne    c0017371 <findRSDT(unsigned char*)+0xf5>
c0017360:	c6 05 40 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d640,0x0
c0017367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001736b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001736f:	eb 1f                	jmp    c0017390 <findRSDT(unsigned char*)+0x114>
c0017371:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017376:	75 11                	jne    c0017389 <findRSDT(unsigned char*)+0x10d>
c0017378:	c6 05 40 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d640,0x1
c001737f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017383:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017387:	eb 07                	jmp    c0017390 <findRSDT(unsigned char*)+0x114>
c0017389:	b8 00 00 00 00       	mov    eax,0x0
c001738e:	eb 04                	jmp    c0017394 <findRSDT(unsigned char*)+0x118>
c0017390:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017394:	83 c4 44             	add    esp,0x44
c0017397:	5b                   	pop    ebx
c0017398:	5e                   	pop    esi
c0017399:	c3                   	ret    

c001739a <findDataTable(unsigned char*, char*)>:
c001739a:	83 ec 1c             	sub    esp,0x1c
c001739d:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c00173a2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173a8:	83 e0 04             	and    eax,0x4
c00173ab:	84 c0                	test   al,al
c00173ad:	75 07                	jne    c00173b6 <findDataTable(unsigned char*, char*)+0x1c>
c00173af:	b8 00 00 00 00       	mov    eax,0x0
c00173b4:	eb 7c                	jmp    c0017432 <findDataTable(unsigned char*, char*)+0x98>
c00173b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00173be:	a1 2c d4 02 c0       	mov    eax,ds:0xc002d42c
c00173c3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00173c7:	7d 3a                	jge    c0017403 <findDataTable(unsigned char*, char*)+0x69>
c00173c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173cd:	c1 e0 03             	shl    eax,0x3
c00173d0:	05 40 d4 02 c0       	add    eax,0xc002d440
c00173d5:	83 ec 04             	sub    esp,0x4
c00173d8:	6a 04                	push   0x4
c00173da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00173de:	50                   	push   eax
c00173df:	e8 59 92 fe ff       	call   c000063d <memcmp>
c00173e4:	83 c4 10             	add    esp,0x10
c00173e7:	85 c0                	test   eax,eax
c00173e9:	0f 94 c0             	sete   al
c00173ec:	84 c0                	test   al,al
c00173ee:	74 0d                	je     c00173fd <findDataTable(unsigned char*, char*)+0x63>
c00173f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173f4:	8b 04 c5 44 d4 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2bbc]
c00173fb:	eb 35                	jmp    c0017432 <findDataTable(unsigned char*, char*)+0x98>
c00173fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017401:	eb bb                	jmp    c00173be <findDataTable(unsigned char*, char*)+0x24>
c0017403:	a0 40 d6 02 c0       	mov    al,ds:0xc002d640
c0017408:	84 c0                	test   al,al
c001740a:	74 07                	je     c0017413 <findDataTable(unsigned char*, char*)+0x79>
c001740c:	b8 58 00 00 00       	mov    eax,0x58
c0017411:	eb 05                	jmp    c0017418 <findDataTable(unsigned char*, char*)+0x7e>
c0017413:	b8 52 00 00 00       	mov    eax,0x52
c0017418:	83 ec 04             	sub    esp,0x4
c001741b:	50                   	push   eax
c001741c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017420:	68 74 a0 02 c0       	push   0xc002a074
c0017425:	e8 ab b4 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001742a:	83 c4 10             	add    esp,0x10
c001742d:	b8 00 00 00 00       	mov    eax,0x0
c0017432:	83 c4 1c             	add    esp,0x1c
c0017435:	c3                   	ret    

c0017436 <scanMADT()>:
c0017436:	53                   	push   ebx
c0017437:	83 ec 38             	sub    esp,0x38
c001743a:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001743f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017445:	83 e0 04             	and    eax,0x4
c0017448:	84 c0                	test   al,al
c001744a:	0f 84 63 04 00 00    	je     c00178b3 <scanMADT()+0x47d>
c0017450:	e8 76 fb ff ff       	call   c0016fcb <findRSDP()>
c0017455:	a3 4c d6 02 c0       	mov    ds:0xc002d64c,eax
c001745a:	a1 4c d6 02 c0       	mov    eax,ds:0xc002d64c
c001745f:	85 c0                	test   eax,eax
c0017461:	75 19                	jne    c001747c <scanMADT()+0x46>
c0017463:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0017468:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001746e:	83 e2 fb             	and    edx,0xfffffffb
c0017471:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017477:	e9 3b 04 00 00       	jmp    c00178b7 <scanMADT()+0x481>
c001747c:	a1 4c d6 02 c0       	mov    eax,ds:0xc002d64c
c0017481:	83 ec 0c             	sub    esp,0xc
c0017484:	50                   	push   eax
c0017485:	e8 f2 fd ff ff       	call   c001727c <findRSDT(unsigned char*)>
c001748a:	83 c4 10             	add    esp,0x10
c001748d:	a3 48 d6 02 c0       	mov    ds:0xc002d648,eax
c0017492:	a1 48 d6 02 c0       	mov    eax,ds:0xc002d648
c0017497:	85 c0                	test   eax,eax
c0017499:	75 19                	jne    c00174b4 <scanMADT()+0x7e>
c001749b:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c00174a0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174a6:	83 e2 fb             	and    edx,0xfffffffb
c00174a9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174af:	e9 03 04 00 00       	jmp    c00178b7 <scanMADT()+0x481>
c00174b4:	a1 48 d6 02 c0       	mov    eax,ds:0xc002d648
c00174b9:	83 ec 0c             	sub    esp,0xc
c00174bc:	50                   	push   eax
c00174bd:	e8 93 fb ff ff       	call   c0017055 <loadACPITables(unsigned char*)>
c00174c2:	83 c4 10             	add    esp,0x10
c00174c5:	a1 48 d6 02 c0       	mov    eax,ds:0xc002d648
c00174ca:	83 ec 08             	sub    esp,0x8
c00174cd:	68 5e 9f 02 c0       	push   0xc0029f5e
c00174d2:	50                   	push   eax
c00174d3:	e8 c2 fe ff ff       	call   c001739a <findDataTable(unsigned char*, char*)>
c00174d8:	83 c4 10             	add    esp,0x10
c00174db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00174df:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00174e4:	75 19                	jne    c00174ff <scanMADT()+0xc9>
c00174e6:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c00174eb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174f1:	83 e2 fe             	and    edx,0xfffffffe
c00174f4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174fa:	e9 b8 03 00 00       	jmp    c00178b7 <scanMADT()+0x481>
c00174ff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017507:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001750b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001750e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017512:	0f 87 9f 03 00 00    	ja     c00178b7 <scanMADT()+0x481>
c0017518:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017520:	0f 87 91 03 00 00    	ja     c00178b7 <scanMADT()+0x481>
c0017526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001752a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001752e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017532:	8d 50 01             	lea    edx,[eax+0x1]
c0017535:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017539:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001753d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017541:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017545:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017549:	8d 50 01             	lea    edx,[eax+0x1]
c001754c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017550:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017554:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017558:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001755c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017561:	0f 86 4f 03 00 00    	jbe    c00178b6 <scanMADT()+0x480>
c0017567:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001756c:	75 57                	jne    c00175c5 <scanMADT()+0x18f>
c001756e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017572:	8d 50 01             	lea    edx,[eax+0x1]
c0017575:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017579:	8a 15 40 d8 02 c0    	mov    dl,BYTE PTR ds:0xc002d840
c001757f:	0f b6 d2             	movzx  edx,dl
c0017582:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017586:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001758a:	88 82 80 d8 02 c0    	mov    BYTE PTR [edx-0x3ffd2780],al
c0017590:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017594:	8d 50 01             	lea    edx,[eax+0x1]
c0017597:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001759b:	8a 15 40 d8 02 c0    	mov    dl,BYTE PTR ds:0xc002d840
c00175a1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00175a4:	88 0d 40 d8 02 c0    	mov    BYTE PTR ds:0xc002d840,cl
c00175aa:	0f b6 d2             	movzx  edx,dl
c00175ad:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175b1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175b5:	88 82 60 d8 02 c0    	mov    BYTE PTR [edx-0x3ffd27a0],al
c00175bb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175c0:	e9 da 02 00 00       	jmp    c001789f <scanMADT()+0x469>
c00175c5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00175ca:	0f 85 14 01 00 00    	jne    c00176e4 <scanMADT()+0x2ae>
c00175d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175d4:	8d 50 01             	lea    edx,[eax+0x1]
c00175d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175db:	8a 15 00 d7 02 c0    	mov    dl,BYTE PTR ds:0xc002d700
c00175e1:	0f b6 d2             	movzx  edx,dl
c00175e4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175e8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175ec:	88 82 20 d7 02 c0    	mov    BYTE PTR [edx-0x3ffd28e0],al
c00175f2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00175f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175fe:	01 d0                	add    eax,edx
c0017600:	83 c0 2c             	add    eax,0x2c
c0017603:	8a 00                	mov    al,BYTE PTR [eax]
c0017605:	0f b6 d0             	movzx  edx,al
c0017608:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001760c:	8d 48 01             	lea    ecx,[eax+0x1]
c001760f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017613:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017617:	0f b6 c0             	movzx  eax,al
c001761a:	c1 e0 08             	shl    eax,0x8
c001761d:	89 d1                	mov    ecx,edx
c001761f:	09 c1                	or     ecx,eax
c0017621:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017625:	8d 50 02             	lea    edx,[eax+0x2]
c0017628:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001762c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017630:	0f b6 c0             	movzx  eax,al
c0017633:	c1 e0 10             	shl    eax,0x10
c0017636:	09 c1                	or     ecx,eax
c0017638:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001763c:	8d 50 03             	lea    edx,[eax+0x3]
c001763f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017643:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017647:	0f b6 c0             	movzx  eax,al
c001764a:	c1 e0 18             	shl    eax,0x18
c001764d:	09 c1                	or     ecx,eax
c001764f:	89 ca                	mov    edx,ecx
c0017651:	a0 00 d7 02 c0       	mov    al,ds:0xc002d700
c0017656:	0f b6 c0             	movzx  eax,al
c0017659:	89 14 85 40 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd28c0],edx
c0017660:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017665:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017669:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001766d:	01 d0                	add    eax,edx
c001766f:	83 c0 2c             	add    eax,0x2c
c0017672:	8a 00                	mov    al,BYTE PTR [eax]
c0017674:	0f b6 d0             	movzx  edx,al
c0017677:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001767b:	8d 48 01             	lea    ecx,[eax+0x1]
c001767e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017682:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017686:	0f b6 c0             	movzx  eax,al
c0017689:	c1 e0 08             	shl    eax,0x8
c001768c:	89 d1                	mov    ecx,edx
c001768e:	09 c1                	or     ecx,eax
c0017690:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017694:	8d 50 02             	lea    edx,[eax+0x2]
c0017697:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001769b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001769f:	0f b6 c0             	movzx  eax,al
c00176a2:	c1 e0 10             	shl    eax,0x10
c00176a5:	09 c1                	or     ecx,eax
c00176a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ab:	8d 50 03             	lea    edx,[eax+0x3]
c00176ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176b6:	0f b6 c0             	movzx  eax,al
c00176b9:	c1 e0 18             	shl    eax,0x18
c00176bc:	09 c1                	or     ecx,eax
c00176be:	89 ca                	mov    edx,ecx
c00176c0:	a0 00 d7 02 c0       	mov    al,ds:0xc002d700
c00176c5:	0f b6 c0             	movzx  eax,al
c00176c8:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c00176cf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176d4:	a0 00 d7 02 c0       	mov    al,ds:0xc002d700
c00176d9:	40                   	inc    eax
c00176da:	a2 00 d7 02 c0       	mov    ds:0xc002d700,al
c00176df:	e9 bb 01 00 00       	jmp    c001789f <scanMADT()+0x469>
c00176e4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00176e9:	0f 85 e9 00 00 00    	jne    c00177d8 <scanMADT()+0x3a2>
c00176ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176f3:	8d 50 01             	lea    edx,[eax+0x1]
c00176f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017702:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017706:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001770a:	8d 50 01             	lea    edx,[eax+0x1]
c001770d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017711:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017715:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017719:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001771d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017721:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017725:	01 d0                	add    eax,edx
c0017727:	83 c0 2c             	add    eax,0x2c
c001772a:	8a 00                	mov    al,BYTE PTR [eax]
c001772c:	0f b6 d0             	movzx  edx,al
c001772f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017733:	8d 48 01             	lea    ecx,[eax+0x1]
c0017736:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001773a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001773e:	0f b6 c0             	movzx  eax,al
c0017741:	c1 e0 08             	shl    eax,0x8
c0017744:	89 d1                	mov    ecx,edx
c0017746:	09 c1                	or     ecx,eax
c0017748:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001774c:	8d 50 02             	lea    edx,[eax+0x2]
c001774f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017753:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017757:	0f b6 c0             	movzx  eax,al
c001775a:	c1 e0 10             	shl    eax,0x10
c001775d:	09 c1                	or     ecx,eax
c001775f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017763:	8d 50 03             	lea    edx,[eax+0x3]
c0017766:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001776a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001776e:	0f b6 c0             	movzx  eax,al
c0017771:	c1 e0 18             	shl    eax,0x18
c0017774:	09 c8                	or     eax,ecx
c0017776:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001777a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001777f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017783:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017787:	01 d0                	add    eax,edx
c0017789:	83 c0 2c             	add    eax,0x2c
c001778c:	8a 00                	mov    al,BYTE PTR [eax]
c001778e:	0f b6 c0             	movzx  eax,al
c0017791:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017795:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017798:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001779c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00177a0:	0f b6 d2             	movzx  edx,dl
c00177a3:	c1 e2 08             	shl    edx,0x8
c00177a6:	09 d0                	or     eax,edx
c00177a8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00177ad:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00177b2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00177b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177bb:	88 90 e0 bf 02 c0    	mov    BYTE PTR [eax-0x3ffd4020],dl
c00177c1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00177c6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00177cb:	66 89 84 12 e0 d6 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2920],ax
c00177d3:	e9 c7 00 00 00       	jmp    c001789f <scanMADT()+0x469>
c00177d8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00177dd:	0f 85 b0 00 00 00    	jne    c0017893 <scanMADT()+0x45d>
c00177e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177e7:	8d 50 01             	lea    edx,[eax+0x1]
c00177ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177f6:	0f b6 c0             	movzx  eax,al
c00177f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00177fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017801:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017805:	01 d0                	add    eax,edx
c0017807:	83 c0 2c             	add    eax,0x2c
c001780a:	8a 00                	mov    al,BYTE PTR [eax]
c001780c:	0f b6 d0             	movzx  edx,al
c001780f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017813:	8d 48 01             	lea    ecx,[eax+0x1]
c0017816:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001781a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001781e:	0f b6 c0             	movzx  eax,al
c0017821:	c1 e0 08             	shl    eax,0x8
c0017824:	09 d0                	or     eax,edx
c0017826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001782a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001782f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017833:	8d 50 01             	lea    edx,[eax+0x1]
c0017836:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001783a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001783e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017842:	0f b6 c0             	movzx  eax,al
c0017845:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001784d:	c1 e0 08             	shl    eax,0x8
c0017850:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017854:	89 c1                	mov    ecx,eax
c0017856:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001785a:	c1 e0 18             	shl    eax,0x18
c001785d:	89 c3                	mov    ebx,eax
c001785f:	a1 50 d6 02 c0       	mov    eax,ds:0xc002d650
c0017864:	8d 50 01             	lea    edx,[eax+0x1]
c0017867:	89 15 50 d6 02 c0    	mov    DWORD PTR ds:0xc002d650,edx
c001786d:	09 d9                	or     ecx,ebx
c001786f:	89 ca                	mov    edx,ecx
c0017871:	89 14 85 60 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd29a0],edx
c0017878:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001787c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017884:	68 a4 a0 02 c0       	push   0xc002a0a4
c0017889:	e8 47 b0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001788e:	83 c4 10             	add    esp,0x10
c0017891:	eb 0c                	jmp    c001789f <scanMADT()+0x469>
c0017893:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017898:	75 05                	jne    c001789f <scanMADT()+0x469>
c001789a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001789f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00178a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178a8:	01 d0                	add    eax,edx
c00178aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00178ae:	e9 54 fc ff ff       	jmp    c0017507 <scanMADT()+0xd1>
c00178b3:	90                   	nop
c00178b4:	eb 01                	jmp    c00178b7 <scanMADT()+0x481>
c00178b6:	90                   	nop
c00178b7:	83 c4 38             	add    esp,0x38
c00178ba:	5b                   	pop    ebx
c00178bb:	c3                   	ret    

c00178bc <ACPI::ACPI()>:
c00178bc:	83 ec 0c             	sub    esp,0xc
c00178bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c3:	83 ec 08             	sub    esp,0x8
c00178c6:	68 63 9f 02 c0       	push   0xc0029f63
c00178cb:	50                   	push   eax
c00178cc:	e8 1b c6 ff ff       	call   c0013eec <Device::Device(char const*)>
c00178d1:	83 c4 10             	add    esp,0x10
c00178d4:	ba 18 a1 02 c0       	mov    edx,0xc002a118
c00178d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178dd:	89 10                	mov    DWORD PTR [eax],edx
c00178df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00178ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ee:	c7 80 5c 09 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x95c],0x0
c00178f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178fc:	c7 80 60 0a 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa60],0x0
c0017906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001790a:	c6 80 64 0a 00 00 00 	mov    BYTE PTR [eax+0xa64],0x0
c0017911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017915:	c6 80 65 0a 00 00 00 	mov    BYTE PTR [eax+0xa65],0x0
c001791c:	e8 15 fb ff ff       	call   c0017436 <scanMADT()>
c0017921:	90                   	nop
c0017922:	83 c4 0c             	add    esp,0xc
c0017925:	c3                   	ret    

c0017926 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017926:	83 ec 2c             	sub    esp,0x2c
c0017929:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001792d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017931:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017935:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017939:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001793e:	88 d0                	mov    al,dl
c0017940:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017944:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017949:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017951:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017955:	8b 80 5c 09 00 00    	mov    eax,DWORD PTR [eax+0x95c]
c001795b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001795f:	0f 8d 97 00 00 00    	jge    c00179fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017965:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017969:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001796d:	83 c2 2a             	add    edx,0x2a
c0017970:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017974:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017979:	75 78                	jne    c00179f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001797b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001797f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017983:	83 c2 2a             	add    edx,0x2a
c0017986:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001798a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001798e:	75 63                	jne    c00179f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017990:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017995:	74 3a                	je     c00179d1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017997:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001799b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001799f:	83 c2 2a             	add    edx,0x2a
c00179a2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00179a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ad:	39 c2                	cmp    edx,eax
c00179af:	74 10                	je     c00179c1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00179b1:	83 ec 0c             	sub    esp,0xc
c00179b4:	68 e0 a0 02 c0       	push   0xc002a0e0
c00179b9:	e8 05 21 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c00179be:	83 c4 10             	add    esp,0x10
c00179c1:	83 ec 0c             	sub    esp,0xc
c00179c4:	68 68 9f 02 c0       	push   0xc0029f68
c00179c9:	e8 f5 20 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c00179ce:	83 c4 10             	add    esp,0x10
c00179d1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00179d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179dd:	83 c2 2a             	add    edx,0x2a
c00179e0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00179e4:	8b 02                	mov    eax,DWORD PTR [edx]
c00179e6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00179e9:	89 01                	mov    DWORD PTR [ecx],eax
c00179eb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00179ee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00179f3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00179f7:	e9 55 ff ff ff       	jmp    c0017951 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00179fc:	90                   	nop
c00179fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a01:	83 c4 2c             	add    esp,0x2c
c0017a04:	c2 04 00             	ret    0x4
c0017a07:	90                   	nop

c0017a08 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017a08:	83 ec 0c             	sub    esp,0xc
c0017a0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a0f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a17:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017a1c:	88 c8                	mov    al,cl
c0017a1e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a22:	88 d0                	mov    al,dl
c0017a24:	88 04 24             	mov    BYTE PTR [esp],al
c0017a27:	90                   	nop
c0017a28:	83 c4 0c             	add    esp,0xc
c0017a2b:	c3                   	ret    

c0017a2c <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017a2c:	b8 00 00 00 00       	mov    eax,0x0
c0017a31:	c3                   	ret    

c0017a32 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017a32:	83 ec 1c             	sub    esp,0x1c
c0017a35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a39:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017a3c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a40:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0017a45:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017a4a:	83 ec 08             	sub    esp,0x8
c0017a4d:	52                   	push   edx
c0017a4e:	50                   	push   eax
c0017a4f:	e8 e8 71 ff ff       	call   c000ec3c <Computer::readCMOS(unsigned char)>
c0017a54:	83 c4 10             	add    esp,0x10
c0017a57:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017a5b:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0017a60:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017a65:	83 ec 04             	sub    esp,0x4
c0017a68:	6a 01                	push   0x1
c0017a6a:	52                   	push   edx
c0017a6b:	50                   	push   eax
c0017a6c:	e8 e1 72 ff ff       	call   c000ed52 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	90                   	nop
c0017a75:	83 c4 1c             	add    esp,0x1c
c0017a78:	c3                   	ret    
c0017a79:	90                   	nop

c0017a7a <ACPI::open(int, int, void*)>:
c0017a7a:	53                   	push   ebx
c0017a7b:	83 ec 28             	sub    esp,0x28
c0017a7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a82:	c6 80 64 0a 00 00 00 	mov    BYTE PTR [eax+0xa64],0x0
c0017a89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a8d:	c6 80 65 0a 00 00 00 	mov    BYTE PTR [eax+0xa65],0x0
c0017a94:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0017a99:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a9f:	83 e0 04             	and    eax,0x4
c0017aa2:	84 c0                	test   al,al
c0017aa4:	74 47                	je     c0017aed <ACPI::open(int, int, void*)+0x73>
c0017aa6:	a1 48 d6 02 c0       	mov    eax,ds:0xc002d648
c0017aab:	83 ec 08             	sub    esp,0x8
c0017aae:	68 77 9f 02 c0       	push   0xc0029f77
c0017ab3:	50                   	push   eax
c0017ab4:	e8 e1 f8 ff ff       	call   c001739a <findDataTable(unsigned char*, char*)>
c0017ab9:	83 c4 10             	add    esp,0x10
c0017abc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ac0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017ac5:	74 26                	je     c0017aed <ACPI::open(int, int, void*)+0x73>
c0017ac7:	83 ec 0c             	sub    esp,0xc
c0017aca:	68 7c 9f 02 c0       	push   0xc0029f7c
c0017acf:	e8 01 ae ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017ad4:	83 c4 10             	add    esp,0x10
c0017ad7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017adb:	c6 80 64 0a 00 00 01 	mov    BYTE PTR [eax+0xa64],0x1
c0017ae2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ae6:	c6 80 65 0a 00 00 01 	mov    BYTE PTR [eax+0xa65],0x1
c0017aed:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0017af5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017af9:	8a 00                	mov    al,BYTE PTR [eax]
c0017afb:	3c 01                	cmp    al,0x1
c0017afd:	75 28                	jne    c0017b27 <ACPI::open(int, int, void*)+0xad>
c0017aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b03:	c6 80 64 0a 00 00 01 	mov    BYTE PTR [eax+0xa64],0x1
c0017b0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b0e:	c6 80 65 0a 00 00 01 	mov    BYTE PTR [eax+0xa65],0x1
c0017b15:	83 ec 0c             	sub    esp,0xc
c0017b18:	68 8d 9f 02 c0       	push   0xc0029f8d
c0017b1d:	e8 b3 ad ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	eb 25                	jmp    c0017b4c <ACPI::open(int, int, void*)+0xd2>
c0017b27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b2b:	8a 00                	mov    al,BYTE PTR [eax]
c0017b2d:	3c 02                	cmp    al,0x2
c0017b2f:	75 1b                	jne    c0017b4c <ACPI::open(int, int, void*)+0xd2>
c0017b31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b35:	c6 80 64 0a 00 00 01 	mov    BYTE PTR [eax+0xa64],0x1
c0017b3c:	83 ec 0c             	sub    esp,0xc
c0017b3f:	68 95 9f 02 c0       	push   0xc0029f95
c0017b44:	e8 8c ad ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b50:	8a 80 64 0a 00 00    	mov    al,BYTE PTR [eax+0xa64]
c0017b56:	83 f0 01             	xor    eax,0x1
c0017b59:	84 c0                	test   al,al
c0017b5b:	74 6a                	je     c0017bc7 <ACPI::open(int, int, void*)+0x14d>
c0017b5d:	83 ec 0c             	sub    esp,0xc
c0017b60:	68 9d 9f 02 c0       	push   0xc0029f9d
c0017b65:	e8 6b ad ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017b6a:	83 c4 10             	add    esp,0x10
c0017b6d:	e8 de 85 fe ff       	call   c0000150 <manualPCIProbe>
c0017b72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b76:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0017b7b:	75 28                	jne    c0017ba5 <ACPI::open(int, int, void*)+0x12b>
c0017b7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b81:	c6 80 64 0a 00 00 01 	mov    BYTE PTR [eax+0xa64],0x1
c0017b88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8c:	c6 80 65 0a 00 00 01 	mov    BYTE PTR [eax+0xa65],0x1
c0017b93:	83 ec 0c             	sub    esp,0xc
c0017b96:	68 ab 9f 02 c0       	push   0xc0029fab
c0017b9b:	e8 35 ad ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017ba0:	83 c4 10             	add    esp,0x10
c0017ba3:	eb 22                	jmp    c0017bc7 <ACPI::open(int, int, void*)+0x14d>
c0017ba5:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0017baa:	75 1b                	jne    c0017bc7 <ACPI::open(int, int, void*)+0x14d>
c0017bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb0:	c6 80 64 0a 00 00 01 	mov    BYTE PTR [eax+0xa64],0x1
c0017bb7:	83 ec 0c             	sub    esp,0xc
c0017bba:	68 b5 9f 02 c0       	push   0xc0029fb5
c0017bbf:	e8 11 ad ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017bc4:	83 c4 10             	add    esp,0x10
c0017bc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bcb:	8a 80 64 0a 00 00    	mov    al,BYTE PTR [eax+0xa64]
c0017bd1:	84 c0                	test   al,al
c0017bd3:	74 13                	je     c0017be8 <ACPI::open(int, int, void*)+0x16e>
c0017bd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bd9:	8a 80 65 0a 00 00    	mov    al,BYTE PTR [eax+0xa65]
c0017bdf:	83 f0 01             	xor    eax,0x1
c0017be2:	0f b6 c0             	movzx  eax,al
c0017be5:	40                   	inc    eax
c0017be6:	eb 05                	jmp    c0017bed <ACPI::open(int, int, void*)+0x173>
c0017be8:	b8 00 00 00 00       	mov    eax,0x0
c0017bed:	83 ec 08             	sub    esp,0x8
c0017bf0:	50                   	push   eax
c0017bf1:	68 bf 9f 02 c0       	push   0xc0029fbf
c0017bf6:	e8 da ac ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017bfb:	83 c4 10             	add    esp,0x10
c0017bfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c02:	8a 80 64 0a 00 00    	mov    al,BYTE PTR [eax+0xa64]
c0017c08:	84 c0                	test   al,al
c0017c0a:	74 67                	je     c0017c73 <ACPI::open(int, int, void*)+0x1f9>
c0017c0c:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0017c14:	83 ec 0c             	sub    esp,0xc
c0017c17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c1b:	e8 04 7a ff ff       	call   c000f624 <malloc>
c0017c20:	83 c4 10             	add    esp,0x10
c0017c23:	89 c3                	mov    ebx,eax
c0017c25:	83 ec 0c             	sub    esp,0xc
c0017c28:	53                   	push   ebx
c0017c29:	e8 48 9f 00 00       	call   c0021b76 <PCI::PCI()>
c0017c2e:	83 c4 10             	add    esp,0x10
c0017c31:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017c35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c39:	83 ec 08             	sub    esp,0x8
c0017c3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c40:	50                   	push   eax
c0017c41:	e8 b6 c0 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0017c46:	83 c4 10             	add    esp,0x10
c0017c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c4f:	83 c0 08             	add    eax,0x8
c0017c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c54:	6a 00                	push   0x0
c0017c56:	6a 00                	push   0x0
c0017c58:	6a 00                	push   0x0
c0017c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c5e:	ff d0                	call   eax
c0017c60:	83 c4 10             	add    esp,0x10
c0017c63:	83 ec 0c             	sub    esp,0xc
c0017c66:	68 c8 9f 02 c0       	push   0xc0029fc8
c0017c6b:	e8 65 ac ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017c70:	83 c4 10             	add    esp,0x10
c0017c73:	83 ec 0c             	sub    esp,0xc
c0017c76:	68 d3 9f 02 c0       	push   0xc0029fd3
c0017c7b:	e8 24 43 00 00       	call   c001bfa4 <Thr::loadKernelSymbolTable(char const*)>
c0017c80:	83 c4 10             	add    esp,0x10
c0017c83:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0017c88:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c8e:	83 e0 04             	and    eax,0x4
c0017c91:	84 c0                	test   al,al
c0017c93:	0f 84 d5 00 00 00    	je     c0017d6e <ACPI::open(int, int, void*)+0x2f4>
c0017c99:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017ca0:	83 ec 0c             	sub    esp,0xc
c0017ca3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ca7:	e8 78 79 ff ff       	call   c000f624 <malloc>
c0017cac:	83 c4 10             	add    esp,0x10
c0017caf:	89 c3                	mov    ebx,eax
c0017cb1:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0017cb6:	83 ec 04             	sub    esp,0x4
c0017cb9:	50                   	push   eax
c0017cba:	68 f1 9f 02 c0       	push   0xc0029ff1
c0017cbf:	53                   	push   ebx
c0017cc0:	e8 69 b1 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c0017cc5:	83 c4 10             	add    esp,0x10
c0017cc8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017ccc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017cd1:	74 17                	je     c0017cea <ACPI::open(int, int, void*)+0x270>
c0017cd3:	83 ec 0c             	sub    esp,0xc
c0017cd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017cda:	e8 21 b4 ff ff       	call   c0013100 <File::exists()>
c0017cdf:	83 c4 10             	add    esp,0x10
c0017ce2:	84 c0                	test   al,al
c0017ce4:	74 04                	je     c0017cea <ACPI::open(int, int, void*)+0x270>
c0017ce6:	b0 01                	mov    al,0x1
c0017ce8:	eb 02                	jmp    c0017cec <ACPI::open(int, int, void*)+0x272>
c0017cea:	b0 00                	mov    al,0x0
c0017cec:	84 c0                	test   al,al
c0017cee:	74 25                	je     c0017d15 <ACPI::open(int, int, void*)+0x29b>
c0017cf0:	8b 1d 88 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd88
c0017cf6:	83 ec 08             	sub    esp,0x8
c0017cf9:	6a 01                	push   0x1
c0017cfb:	68 f1 9f 02 c0       	push   0xc0029ff1
c0017d00:	e8 fa 4c 00 00       	call   c001c9ff <Thr::loadDLL(char const*, bool)>
c0017d05:	83 c4 10             	add    esp,0x10
c0017d08:	83 ec 08             	sub    esp,0x8
c0017d0b:	53                   	push   ebx
c0017d0c:	50                   	push   eax
c0017d0d:	e8 fc 4e 00 00       	call   c001cc0e <Thr::executeDLL(unsigned long, void*)>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017d1a:	74 1e                	je     c0017d3a <ACPI::open(int, int, void*)+0x2c0>
c0017d1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017d21:	74 17                	je     c0017d3a <ACPI::open(int, int, void*)+0x2c0>
c0017d23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d27:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d29:	83 c0 08             	add    eax,0x8
c0017d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d2e:	83 ec 0c             	sub    esp,0xc
c0017d31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d35:	ff d0                	call   eax
c0017d37:	83 c4 10             	add    esp,0x10
c0017d3a:	a1 48 d6 02 c0       	mov    eax,ds:0xc002d648
c0017d3f:	83 ec 08             	sub    esp,0x8
c0017d42:	68 0e a0 02 c0       	push   0xc002a00e
c0017d47:	50                   	push   eax
c0017d48:	e8 4d f6 ff ff       	call   c001739a <findDataTable(unsigned char*, char*)>
c0017d4d:	83 c4 10             	add    esp,0x10
c0017d50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d54:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017d59:	74 13                	je     c0017d6e <ACPI::open(int, int, void*)+0x2f4>
c0017d5b:	83 ec 08             	sub    esp,0x8
c0017d5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017d66:	e8 c7 fc ff ff       	call   c0017a32 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017d6b:	83 c4 10             	add    esp,0x10
c0017d6e:	8b 1d 88 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd88
c0017d74:	83 ec 08             	sub    esp,0x8
c0017d77:	6a 01                	push   0x1
c0017d79:	68 13 a0 02 c0       	push   0xc002a013
c0017d7e:	e8 7c 4c 00 00       	call   c001c9ff <Thr::loadDLL(char const*, bool)>
c0017d83:	83 c4 10             	add    esp,0x10
c0017d86:	83 ec 08             	sub    esp,0x8
c0017d89:	53                   	push   ebx
c0017d8a:	50                   	push   eax
c0017d8b:	e8 7e 4e 00 00       	call   c001cc0e <Thr::executeDLL(unsigned long, void*)>
c0017d90:	83 c4 10             	add    esp,0x10
c0017d93:	8b 1d 88 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd88
c0017d99:	83 ec 08             	sub    esp,0x8
c0017d9c:	6a 01                	push   0x1
c0017d9e:	68 30 a0 02 c0       	push   0xc002a030
c0017da3:	e8 57 4c 00 00       	call   c001c9ff <Thr::loadDLL(char const*, bool)>
c0017da8:	83 c4 10             	add    esp,0x10
c0017dab:	83 ec 08             	sub    esp,0x8
c0017dae:	53                   	push   ebx
c0017daf:	50                   	push   eax
c0017db0:	e8 59 4e 00 00       	call   c001cc0e <Thr::executeDLL(unsigned long, void*)>
c0017db5:	83 c4 10             	add    esp,0x10
c0017db8:	b8 00 00 00 00       	mov    eax,0x0
c0017dbd:	83 c4 28             	add    esp,0x28
c0017dc0:	5b                   	pop    ebx
c0017dc1:	c3                   	ret    

c0017dc2 <ACPI::sleep()>:
c0017dc2:	83 ec 0c             	sub    esp,0xc
c0017dc5:	a1 20 d4 02 c0       	mov    eax,ds:0xc002d420
c0017dca:	85 c0                	test   eax,eax
c0017dcc:	74 07                	je     c0017dd5 <ACPI::sleep()+0x13>
c0017dce:	a1 20 d4 02 c0       	mov    eax,ds:0xc002d420
c0017dd3:	ff d0                	call   eax
c0017dd5:	90                   	nop
c0017dd6:	83 c4 0c             	add    esp,0xc
c0017dd9:	c3                   	ret    

c0017dda <CPU::close(int, int, void*)>:
c0017dda:	31 c0                	xor    eax,eax
c0017ddc:	c3                   	ret    
c0017ddd:	90                   	nop

c0017dde <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017dde:	55                   	push   ebp
c0017ddf:	57                   	push   edi
c0017de0:	56                   	push   esi
c0017de1:	53                   	push   ebx
c0017de2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017de6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dea:	89 ce                	mov    esi,ecx
c0017dec:	89 d5                	mov    ebp,edx
c0017dee:	80 f9 04             	cmp    cl,0x4
c0017df1:	75 28                	jne    c0017e1b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017df3:	8d 42 f9             	lea    eax,[edx-0x7]
c0017df6:	3c 03                	cmp    al,0x3
c0017df8:	0f 86 63 01 00 00    	jbe    c0017f61 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017dfe:	80 fa 03             	cmp    dl,0x3
c0017e01:	0f 84 5a 01 00 00    	je     c0017f61 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017e07:	8d 7a f2             	lea    edi,[edx-0xe]
c0017e0a:	b8 b0 c1 02 c0       	mov    eax,0xc002c1b0
c0017e0f:	89 fb                	mov    ebx,edi
c0017e11:	80 fb 01             	cmp    bl,0x1
c0017e14:	77 4e                	ja     c0017e64 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017e16:	e9 52 01 00 00       	jmp    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e1b:	80 f9 05             	cmp    cl,0x5
c0017e1e:	75 4d                	jne    c0017e6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017e20:	b8 c0 c1 02 c0       	mov    eax,0xc002c1c0
c0017e25:	80 fa 03             	cmp    dl,0x3
c0017e28:	0f 86 3f 01 00 00    	jbe    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e2e:	8d 7a fa             	lea    edi,[edx-0x6]
c0017e31:	b8 d0 c1 02 c0       	mov    eax,0xc002c1d0
c0017e36:	89 fb                	mov    ebx,edi
c0017e38:	80 fb 01             	cmp    bl,0x1
c0017e3b:	0f 86 2c 01 00 00    	jbe    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e41:	b8 e0 c1 02 c0       	mov    eax,0xc002c1e0
c0017e46:	80 fa 08             	cmp    dl,0x8
c0017e49:	0f 84 1e 01 00 00    	je     c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e4f:	89 d7                	mov    edi,edx
c0017e51:	b8 f0 c1 02 c0       	mov    eax,0xc002c1f0
c0017e56:	83 e7 fb             	and    edi,0xfffffffb
c0017e59:	89 fb                	mov    ebx,edi
c0017e5b:	80 fb 09             	cmp    bl,0x9
c0017e5e:	0f 84 09 01 00 00    	je     c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e64:	31 c0                	xor    eax,eax
c0017e66:	89 eb                	mov    ebx,ebp
c0017e68:	0f b6 fb             	movzx  edi,bl
c0017e6b:	eb 30                	jmp    c0017e9d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017e6d:	31 c0                	xor    eax,eax
c0017e6f:	80 f9 06             	cmp    cl,0x6
c0017e72:	75 f2                	jne    c0017e66 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017e74:	80 fa 0a             	cmp    dl,0xa
c0017e77:	77 ed                	ja     c0017e66 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017e79:	bf de 05 00 00       	mov    edi,0x5de
c0017e7e:	0f a3 d7             	bt     edi,edx
c0017e81:	73 e3                	jae    c0017e66 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017e83:	b8 00 c2 02 c0       	mov    eax,0xc002c200
c0017e88:	e9 e0 00 00 00       	jmp    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e8d:	39 c7                	cmp    edi,eax
c0017e8f:	0f 84 d3 00 00 00    	je     c0017f68 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017e95:	40                   	inc    eax
c0017e96:	3d d0 00 00 00       	cmp    eax,0xd0
c0017e9b:	74 09                	je     c0017ea6 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017e9d:	89 f3                	mov    ebx,esi
c0017e9f:	80 fb 0f             	cmp    bl,0xf
c0017ea2:	75 f1                	jne    c0017e95 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017ea4:	eb e7                	jmp    c0017e8d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017ea6:	80 f9 10             	cmp    cl,0x10
c0017ea9:	75 14                	jne    c0017ebf <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017eab:	8d 42 fc             	lea    eax,[edx-0x4]
c0017eae:	83 e0 fb             	and    eax,0xfffffffb
c0017eb1:	3c 02                	cmp    al,0x2
c0017eb3:	76 34                	jbe    c0017ee9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017eb5:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c0017eba:	80 fa 02             	cmp    dl,0x2
c0017ebd:	eb 24                	jmp    c0017ee3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017ebf:	80 f9 11             	cmp    cl,0x11
c0017ec2:	75 13                	jne    c0017ed7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017ec4:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c0017ec9:	80 fa 03             	cmp    dl,0x3
c0017ecc:	0f 85 9b 00 00 00    	jne    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ed2:	e9 91 00 00 00       	jmp    c0017f68 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017ed7:	80 f9 12             	cmp    cl,0x12
c0017eda:	75 14                	jne    c0017ef0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017edc:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c0017ee1:	fe ca                	dec    dl
c0017ee3:	0f 85 84 00 00 00    	jne    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ee9:	b8 20 c2 02 c0       	mov    eax,0xc002c220
c0017eee:	eb 7d                	jmp    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ef0:	80 f9 14             	cmp    cl,0x14
c0017ef3:	75 12                	jne    c0017f07 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017ef5:	4a                   	dec    edx
c0017ef6:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c0017efb:	80 fa 01             	cmp    dl,0x1
c0017efe:	77 6d                	ja     c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f00:	b8 30 c2 02 c0       	mov    eax,0xc002c230
c0017f05:	eb 66                	jmp    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f07:	80 f9 15             	cmp    cl,0x15
c0017f0a:	75 31                	jne    c0017f3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017f0c:	b8 40 c2 02 c0       	mov    eax,0xc002c240
c0017f11:	80 fa 01             	cmp    dl,0x1
c0017f14:	74 57                	je     c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f16:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c0017f1b:	80 fa 13             	cmp    dl,0x13
c0017f1e:	76 0c                	jbe    c0017f2c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017f20:	80 fa 30             	cmp    dl,0x30
c0017f23:	75 48                	jne    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f25:	b8 60 c2 02 c0       	mov    eax,0xc002c260
c0017f2a:	eb 41                	jmp    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f2c:	b9 04 00 09 00       	mov    ecx,0x90004
c0017f31:	0f a3 d1             	bt     ecx,edx
c0017f34:	73 37                	jae    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f36:	b8 50 c2 02 c0       	mov    eax,0xc002c250
c0017f3b:	eb 30                	jmp    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f3d:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c0017f42:	80 f9 16             	cmp    cl,0x16
c0017f45:	75 26                	jne    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f47:	b8 70 c2 02 c0       	mov    eax,0xc002c270
c0017f4c:	84 d2                	test   dl,dl
c0017f4e:	74 1d                	je     c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f50:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c0017f55:	80 fa 30             	cmp    dl,0x30
c0017f58:	75 13                	jne    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f5a:	b8 80 c2 02 c0       	mov    eax,0xc002c280
c0017f5f:	eb 0c                	jmp    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f61:	b8 a0 c1 02 c0       	mov    eax,0xc002c1a0
c0017f66:	eb 05                	jmp    c0017f6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f68:	b8 10 c2 02 c0       	mov    eax,0xc002c210
c0017f6d:	5b                   	pop    ebx
c0017f6e:	5e                   	pop    esi
c0017f6f:	5f                   	pop    edi
c0017f70:	5d                   	pop    ebp
c0017f71:	c3                   	ret    

c0017f72 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017f72:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f7a:	80 f9 04             	cmp    cl,0x4
c0017f7d:	75 6b                	jne    c0017fea <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017f7f:	b8 00 c0 02 c0       	mov    eax,0xc002c000
c0017f84:	80 fa 01             	cmp    dl,0x1
c0017f87:	0f 86 92 02 00 00    	jbe    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f8d:	b8 10 c0 02 c0       	mov    eax,0xc002c010
c0017f92:	80 fa 02             	cmp    dl,0x2
c0017f95:	0f 84 84 02 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f9b:	b8 20 c0 02 c0       	mov    eax,0xc002c020
c0017fa0:	80 fa 03             	cmp    dl,0x3
c0017fa3:	0f 84 76 02 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fa9:	b8 30 c0 02 c0       	mov    eax,0xc002c030
c0017fae:	80 fa 04             	cmp    dl,0x4
c0017fb1:	0f 84 68 02 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fb7:	b8 40 c0 02 c0       	mov    eax,0xc002c040
c0017fbc:	80 fa 05             	cmp    dl,0x5
c0017fbf:	0f 84 5a 02 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fc5:	b8 20 c0 02 c0       	mov    eax,0xc002c020
c0017fca:	80 fa 07             	cmp    dl,0x7
c0017fcd:	0f 84 4c 02 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fd3:	83 ea 08             	sub    edx,0x8
c0017fd6:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c0017fdb:	80 fa 01             	cmp    dl,0x1
c0017fde:	0f 87 3b 02 00 00    	ja     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fe4:	b8 50 c0 02 c0       	mov    eax,0xc002c050
c0017fe9:	c3                   	ret    
c0017fea:	80 f9 05             	cmp    cl,0x5
c0017fed:	75 45                	jne    c0018034 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017fef:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017ff2:	b8 60 c0 02 c0       	mov    eax,0xc002c060
c0017ff7:	80 f9 02             	cmp    cl,0x2
c0017ffa:	0f 86 1f 02 00 00    	jbe    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018000:	80 fa 04             	cmp    dl,0x4
c0018003:	0f 84 f3 01 00 00    	je     c00181fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018009:	80 fa 07             	cmp    dl,0x7
c001800c:	0f 84 0d 02 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018012:	b8 70 c0 02 c0       	mov    eax,0xc002c070
c0018017:	80 fa 08             	cmp    dl,0x8
c001801a:	0f 84 ff 01 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018020:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c0018025:	80 fa 09             	cmp    dl,0x9
c0018028:	0f 85 f1 01 00 00    	jne    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001802e:	b8 80 c0 02 c0       	mov    eax,0xc002c080
c0018033:	c3                   	ret    
c0018034:	80 f9 06             	cmp    cl,0x6
c0018037:	0f 85 85 01 00 00    	jne    c00181c2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001803d:	b8 90 c0 02 c0       	mov    eax,0xc002c090
c0018042:	80 fa 01             	cmp    dl,0x1
c0018045:	0f 84 d4 01 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001804b:	8d 42 fb             	lea    eax,[edx-0x5]
c001804e:	3c 01                	cmp    al,0x1
c0018050:	0f 86 ac 01 00 00    	jbe    c0018202 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018056:	80 fa 03             	cmp    dl,0x3
c0018059:	0f 84 a3 01 00 00    	je     c0018202 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001805f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018062:	b8 b0 c0 02 c0       	mov    eax,0xc002c0b0
c0018067:	80 f9 01             	cmp    cl,0x1
c001806a:	0f 86 af 01 00 00    	jbe    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018070:	80 fa 09             	cmp    dl,0x9
c0018073:	0f 84 8f 01 00 00    	je     c0018208 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018079:	8d 4a f6             	lea    ecx,[edx-0xa]
c001807c:	80 f9 01             	cmp    cl,0x1
c001807f:	0f 86 9a 01 00 00    	jbe    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018085:	b8 c0 c0 02 c0       	mov    eax,0xc002c0c0
c001808a:	80 fa 0d             	cmp    dl,0xd
c001808d:	0f 84 8c 01 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018093:	b8 d0 c0 02 c0       	mov    eax,0xc002c0d0
c0018098:	80 fa 0e             	cmp    dl,0xe
c001809b:	0f 84 7e 01 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180a1:	b8 e0 c0 02 c0       	mov    eax,0xc002c0e0
c00180a6:	80 fa 0f             	cmp    dl,0xf
c00180a9:	0f 84 70 01 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180af:	b8 c0 c0 02 c0       	mov    eax,0xc002c0c0
c00180b4:	80 fa 15             	cmp    dl,0x15
c00180b7:	0f 84 62 01 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180bd:	8d 4a ea             	lea    ecx,[edx-0x16]
c00180c0:	b8 e0 c0 02 c0       	mov    eax,0xc002c0e0
c00180c5:	80 f9 01             	cmp    cl,0x1
c00180c8:	0f 86 51 01 00 00    	jbe    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180ce:	80 fa 1a             	cmp    dl,0x1a
c00180d1:	0f 84 37 01 00 00    	je     c001820e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00180d7:	80 fa 1c             	cmp    dl,0x1c
c00180da:	0f 84 34 01 00 00    	je     c0018214 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00180e0:	80 fa 1d             	cmp    dl,0x1d
c00180e3:	0f 84 36 01 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180e9:	b8 10 c1 02 c0       	mov    eax,0xc002c110
c00180ee:	80 fa 25             	cmp    dl,0x25
c00180f1:	0f 84 28 01 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180f7:	8d 4a da             	lea    ecx,[edx-0x26]
c00180fa:	b8 00 c1 02 c0       	mov    eax,0xc002c100
c00180ff:	80 f9 01             	cmp    cl,0x1
c0018102:	0f 86 17 01 00 00    	jbe    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018108:	b8 20 c1 02 c0       	mov    eax,0xc002c120
c001810d:	80 fa 2a             	cmp    dl,0x2a
c0018110:	0f 84 09 01 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018116:	b8 10 c1 02 c0       	mov    eax,0xc002c110
c001811b:	80 fa 2c             	cmp    dl,0x2c
c001811e:	0f 84 fb 00 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018124:	b8 20 c1 02 c0       	mov    eax,0xc002c120
c0018129:	80 fa 2d             	cmp    dl,0x2d
c001812c:	0f 84 ed 00 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018132:	b8 f0 c0 02 c0       	mov    eax,0xc002c0f0
c0018137:	80 fa 2e             	cmp    dl,0x2e
c001813a:	0f 84 df 00 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018140:	b8 10 c1 02 c0       	mov    eax,0xc002c110
c0018145:	80 fa 2f             	cmp    dl,0x2f
c0018148:	0f 84 d1 00 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001814e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018151:	b8 00 c1 02 c0       	mov    eax,0xc002c100
c0018156:	80 f9 01             	cmp    cl,0x1
c0018159:	0f 86 c0 00 00 00    	jbe    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001815f:	b8 30 c1 02 c0       	mov    eax,0xc002c130
c0018164:	80 fa 37             	cmp    dl,0x37
c0018167:	0f 84 b2 00 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001816d:	b8 40 c1 02 c0       	mov    eax,0xc002c140
c0018172:	80 fa 3a             	cmp    dl,0x3a
c0018175:	0f 84 a4 00 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001817b:	b8 50 c1 02 c0       	mov    eax,0xc002c150
c0018180:	80 fa 3c             	cmp    dl,0x3c
c0018183:	0f 84 96 00 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018189:	b8 60 c1 02 c0       	mov    eax,0xc002c160
c001818e:	80 fa 3d             	cmp    dl,0x3d
c0018191:	0f 84 88 00 00 00    	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018197:	b8 40 c1 02 c0       	mov    eax,0xc002c140
c001819c:	80 fa 3e             	cmp    dl,0x3e
c001819f:	74 7e                	je     c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181a1:	8d 42 bb             	lea    eax,[edx-0x45]
c00181a4:	3c 01                	cmp    al,0x1
c00181a6:	76 72                	jbe    c001821a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00181a8:	80 fa 3f             	cmp    dl,0x3f
c00181ab:	74 6d                	je     c001821a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00181ad:	80 fa 4a             	cmp    dl,0x4a
c00181b0:	74 0a                	je     c00181bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00181b2:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c00181b7:	80 fa 4d             	cmp    dl,0x4d
c00181ba:	75 63                	jne    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181bc:	b8 30 c1 02 c0       	mov    eax,0xc002c130
c00181c1:	c3                   	ret    
c00181c2:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c00181c7:	80 f9 0b             	cmp    cl,0xb
c00181ca:	75 0a                	jne    c00181d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00181cc:	fe ca                	dec    dl
c00181ce:	75 4f                	jne    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181d0:	b8 70 c1 02 c0       	mov    eax,0xc002c170
c00181d5:	c3                   	ret    
c00181d6:	80 f9 0f             	cmp    cl,0xf
c00181d9:	75 44                	jne    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181db:	b8 80 c1 02 c0       	mov    eax,0xc002c180
c00181e0:	80 fa 02             	cmp    dl,0x2
c00181e3:	76 3a                	jbe    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181e5:	8d 42 fd             	lea    eax,[edx-0x3]
c00181e8:	3c 01                	cmp    al,0x1
c00181ea:	76 0a                	jbe    c00181f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00181ec:	b8 2e a4 02 c0       	mov    eax,0xc002a42e
c00181f1:	80 fa 06             	cmp    dl,0x6
c00181f4:	75 29                	jne    c001821f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181f6:	b8 90 c1 02 c0       	mov    eax,0xc002c190
c00181fb:	c3                   	ret    
c00181fc:	b8 70 c0 02 c0       	mov    eax,0xc002c070
c0018201:	c3                   	ret    
c0018202:	b8 a0 c0 02 c0       	mov    eax,0xc002c0a0
c0018207:	c3                   	ret    
c0018208:	b8 c0 c0 02 c0       	mov    eax,0xc002c0c0
c001820d:	c3                   	ret    
c001820e:	b8 f0 c0 02 c0       	mov    eax,0xc002c0f0
c0018213:	c3                   	ret    
c0018214:	b8 00 c1 02 c0       	mov    eax,0xc002c100
c0018219:	c3                   	ret    
c001821a:	b8 50 c1 02 c0       	mov    eax,0xc002c150
c001821f:	c3                   	ret    

c0018220 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018220:	60                   	pusha  
c0018221:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018225:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018229:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001822d:	9c                   	pushf  
c001822e:	fa                   	cli    
c001822f:	0f 09                	wbinvd 
c0018231:	0f 30                	wrmsr  
c0018233:	9d                   	popf   
c0018234:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018238:	89 02                	mov    DWORD PTR [edx],eax
c001823a:	61                   	popa   
c001823b:	c3                   	ret    

c001823c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001823c:	60                   	pusha  
c001823d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018241:	9c                   	pushf  
c0018242:	fa                   	cli    
c0018243:	0f 09                	wbinvd 
c0018245:	31 c0                	xor    eax,eax
c0018247:	31 d2                	xor    edx,edx
c0018249:	0f 32                	rdmsr  
c001824b:	9d                   	popf   
c001824c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018250:	89 02                	mov    DWORD PTR [edx],eax
c0018252:	61                   	popa   
c0018253:	c3                   	ret    

c0018254 <CPU::AMD_K6_writeback(int, int, int)>:
c0018254:	56                   	push   esi
c0018255:	53                   	push   ebx
c0018256:	83 ec 10             	sub    esp,0x10
c0018259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001825d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018262:	75 5d                	jne    c00182c1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018264:	83 f8 08             	cmp    eax,0x8
c0018267:	75 09                	jne    c0018272 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018269:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001826e:	7e 13                	jle    c0018283 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018270:	eb 30                	jmp    c00182a2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018272:	83 f8 06             	cmp    eax,0x6
c0018275:	7c 4a                	jl     c00182c1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018277:	83 f8 07             	cmp    eax,0x7
c001827a:	7e 07                	jle    c0018283 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001827c:	83 f8 09             	cmp    eax,0x9
c001827f:	74 21                	je     c00182a2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018281:	eb 3e                	jmp    c00182c1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018283:	89 e6                	mov    esi,esp
c0018285:	8b 1d c4 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cdc4
c001828b:	56                   	push   esi
c001828c:	c1 eb 15             	shr    ebx,0x15
c001828f:	68 82 00 00 c0       	push   0xc0000082
c0018294:	83 e3 7e             	and    ebx,0x7e
c0018297:	e8 a0 ff ff ff       	call   c001823c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001829c:	56                   	push   esi
c001829d:	6a 00                	push   0x0
c001829f:	53                   	push   ebx
c00182a0:	eb 12                	jmp    c00182b4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00182a2:	89 e3                	mov    ebx,esp
c00182a4:	53                   	push   ebx
c00182a5:	68 82 00 00 c0       	push   0xc0000082
c00182aa:	e8 8d ff ff ff       	call   c001823c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00182af:	53                   	push   ebx
c00182b0:	6a 00                	push   0x0
c00182b2:	6a 00                	push   0x0
c00182b4:	68 82 00 00 c0       	push   0xc0000082
c00182b9:	e8 62 ff ff ff       	call   c0018220 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00182be:	83 c4 18             	add    esp,0x18
c00182c1:	83 c4 10             	add    esp,0x10
c00182c4:	5b                   	pop    ebx
c00182c5:	5e                   	pop    esi
c00182c6:	c3                   	ret    
c00182c7:	90                   	nop

c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00182c8:	55                   	push   ebp
c00182c9:	57                   	push   edi
c00182ca:	56                   	push   esi
c00182cb:	53                   	push   ebx
c00182cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00182d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00182d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00182d8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00182dc:	39 05 a0 c2 02 c0    	cmp    DWORD PTR ds:0xc002c2a0,eax
c00182e2:	75 23                	jne    c0018307 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00182e4:	a1 ac d8 02 c0       	mov    eax,ds:0xc002d8ac
c00182e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00182ed:	89 06                	mov    DWORD PTR [esi],eax
c00182ef:	a1 a8 d8 02 c0       	mov    eax,ds:0xc002d8a8
c00182f4:	89 07                	mov    DWORD PTR [edi],eax
c00182f6:	a1 a4 d8 02 c0       	mov    eax,ds:0xc002d8a4
c00182fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00182fe:	a1 a0 d8 02 c0       	mov    eax,ds:0xc002d8a0
c0018303:	89 02                	mov    DWORD PTR [edx],eax
c0018305:	eb 3f                	jmp    c0018346 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018307:	31 c9                	xor    ecx,ecx
c0018309:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001830d:	0f a2                	cpuid  
c001830f:	89 06                	mov    DWORD PTR [esi],eax
c0018311:	89 1f                	mov    DWORD PTR [edi],ebx
c0018313:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018317:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001831a:	89 10                	mov    DWORD PTR [eax],edx
c001831c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018320:	a3 a0 c2 02 c0       	mov    ds:0xc002c2a0,eax
c0018325:	8b 06                	mov    eax,DWORD PTR [esi]
c0018327:	a3 ac d8 02 c0       	mov    ds:0xc002d8ac,eax
c001832c:	8b 07                	mov    eax,DWORD PTR [edi]
c001832e:	a3 a8 d8 02 c0       	mov    ds:0xc002d8a8,eax
c0018333:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018336:	a3 a4 d8 02 c0       	mov    ds:0xc002d8a4,eax
c001833b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001833f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018341:	a3 a0 d8 02 c0       	mov    ds:0xc002d8a0,eax
c0018346:	5b                   	pop    ebx
c0018347:	5e                   	pop    esi
c0018348:	5f                   	pop    edi
c0018349:	5d                   	pop    ebp
c001834a:	c3                   	ret    
c001834b:	90                   	nop

c001834c <CPU::cpuidCheckEDX(unsigned int)>:
c001834c:	83 ec 10             	sub    esp,0x10
c001834f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018353:	50                   	push   eax
c0018354:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018358:	50                   	push   eax
c0018359:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001835d:	50                   	push   eax
c001835e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018362:	50                   	push   eax
c0018363:	6a 01                	push   0x1
c0018365:	e8 5e ff ff ff       	call   c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001836a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001836e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018372:	0f 95 c0             	setne  al
c0018375:	83 c4 24             	add    esp,0x24
c0018378:	c3                   	ret    
c0018379:	90                   	nop

c001837a <CPU::cpuidCheckECX(unsigned int)>:
c001837a:	83 ec 10             	sub    esp,0x10
c001837d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018381:	50                   	push   eax
c0018382:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018386:	50                   	push   eax
c0018387:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001838b:	50                   	push   eax
c001838c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018390:	50                   	push   eax
c0018391:	6a 01                	push   0x1
c0018393:	e8 30 ff ff ff       	call   c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018398:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001839c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00183a0:	0f 95 c0             	setne  al
c00183a3:	83 c4 24             	add    esp,0x24
c00183a6:	c3                   	ret    
c00183a7:	90                   	nop

c00183a8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00183a8:	83 ec 10             	sub    esp,0x10
c00183ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00183af:	50                   	push   eax
c00183b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00183b4:	50                   	push   eax
c00183b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00183b9:	50                   	push   eax
c00183ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00183be:	50                   	push   eax
c00183bf:	6a 07                	push   0x7
c00183c1:	e8 02 ff ff ff       	call   c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00183c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183ca:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00183ce:	0f 95 c0             	setne  al
c00183d1:	83 c4 24             	add    esp,0x24
c00183d4:	c3                   	ret    
c00183d5:	90                   	nop

c00183d6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00183d6:	83 ec 10             	sub    esp,0x10
c00183d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00183dd:	50                   	push   eax
c00183de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00183e2:	50                   	push   eax
c00183e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00183e7:	50                   	push   eax
c00183e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00183ec:	50                   	push   eax
c00183ed:	6a 07                	push   0x7
c00183ef:	e8 d4 fe ff ff       	call   c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00183f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183f8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00183fc:	0f 95 c0             	setne  al
c00183ff:	83 c4 24             	add    esp,0x24
c0018402:	c3                   	ret    
c0018403:	90                   	nop

c0018404 <CPU::CPU()>:
c0018404:	83 ec 0c             	sub    esp,0xc
c0018407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001840b:	83 ec 08             	sub    esp,0x8
c001840e:	68 2e a4 02 c0       	push   0xc002a42e
c0018413:	50                   	push   eax
c0018414:	e8 d3 ba ff ff       	call   c0013eec <Device::Device(char const*)>
c0018419:	83 c4 10             	add    esp,0x10
c001841c:	ba 08 a5 02 c0       	mov    edx,0xc002a508
c0018421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018425:	89 10                	mov    DWORD PTR [eax],edx
c0018427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001842b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018439:	05 78 01 00 00       	add    eax,0x178
c001843e:	83 ec 0c             	sub    esp,0xc
c0018441:	50                   	push   eax
c0018442:	e8 f5 69 ff ff       	call   c000ee3c <GDT::GDT()>
c0018447:	83 c4 10             	add    esp,0x10
c001844a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001844e:	05 7c 09 00 00       	add    eax,0x97c
c0018453:	83 ec 0c             	sub    esp,0xc
c0018456:	50                   	push   eax
c0018457:	e8 42 6c ff ff       	call   c000f09e <IDT::IDT()>
c001845c:	83 c4 10             	add    esp,0x10
c001845f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018463:	05 7c 11 00 00       	add    eax,0x117c
c0018468:	83 ec 0c             	sub    esp,0xc
c001846b:	50                   	push   eax
c001846c:	e8 a5 8d ff ff       	call   c0011216 <TSS::TSS()>
c0018471:	83 c4 10             	add    esp,0x10
c0018474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018478:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001847f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018483:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001848d:	90                   	nop
c001848e:	83 c4 0c             	add    esp,0xc
c0018491:	c3                   	ret    

c0018492 <CPU::displayFeatures()>:
c0018492:	53                   	push   ebx
c0018493:	83 ec 10             	sub    esp,0x10
c0018496:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001849a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00184a0:	68 3c a1 02 c0       	push   0xc002a13c
c00184a5:	e8 2b a4 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00184aa:	59                   	pop    ecx
c00184ab:	58                   	pop    eax
c00184ac:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00184b2:	50                   	push   eax
c00184b3:	68 4d a1 02 c0       	push   0xc002a14d
c00184b8:	e8 18 a4 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00184bd:	58                   	pop    eax
c00184be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00184c4:	5a                   	pop    edx
c00184c5:	c1 e8 0e             	shr    eax,0xe
c00184c8:	0f b6 c0             	movzx  eax,al
c00184cb:	50                   	push   eax
c00184cc:	68 5e a1 02 c0       	push   0xc002a15e
c00184d1:	e8 ff a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00184d6:	59                   	pop    ecx
c00184d7:	58                   	pop    eax
c00184d8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00184de:	66 c1 e8 06          	shr    ax,0x6
c00184e2:	0f b6 c0             	movzx  eax,al
c00184e5:	50                   	push   eax
c00184e6:	68 6f a1 02 c0       	push   0xc002a16f
c00184eb:	e8 e5 a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00184f0:	c7 04 24 0b a6 02 c0 	mov    DWORD PTR [esp],0xc002a60b
c00184f7:	e8 d9 a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00184fc:	83 c4 10             	add    esp,0x10
c00184ff:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c0018504:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001850b:	74 05                	je     c0018512 <CPU::displayFeatures()+0x80>
c001850d:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c0018512:	52                   	push   edx
c0018513:	52                   	push   edx
c0018514:	50                   	push   eax
c0018515:	68 80 a1 02 c0       	push   0xc002a180
c001851a:	e8 b6 a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001851f:	83 c4 10             	add    esp,0x10
c0018522:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c0018527:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001852e:	78 05                	js     c0018535 <CPU::displayFeatures()+0xa3>
c0018530:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c0018535:	51                   	push   ecx
c0018536:	51                   	push   ecx
c0018537:	50                   	push   eax
c0018538:	68 97 a1 02 c0       	push   0xc002a197
c001853d:	e8 93 a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018542:	83 c4 10             	add    esp,0x10
c0018545:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c001854a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018551:	75 05                	jne    c0018558 <CPU::displayFeatures()+0xc6>
c0018553:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c0018558:	52                   	push   edx
c0018559:	52                   	push   edx
c001855a:	50                   	push   eax
c001855b:	68 ae a1 02 c0       	push   0xc002a1ae
c0018560:	e8 70 a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018565:	83 c4 10             	add    esp,0x10
c0018568:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c001856d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018574:	75 05                	jne    c001857b <CPU::displayFeatures()+0xe9>
c0018576:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c001857b:	51                   	push   ecx
c001857c:	51                   	push   ecx
c001857d:	50                   	push   eax
c001857e:	68 c5 a1 02 c0       	push   0xc002a1c5
c0018583:	e8 4d a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018588:	83 c4 10             	add    esp,0x10
c001858b:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c0018590:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018597:	75 05                	jne    c001859e <CPU::displayFeatures()+0x10c>
c0018599:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c001859e:	52                   	push   edx
c001859f:	52                   	push   edx
c00185a0:	50                   	push   eax
c00185a1:	68 dc a1 02 c0       	push   0xc002a1dc
c00185a6:	e8 2a a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00185ab:	83 c4 10             	add    esp,0x10
c00185ae:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c00185b3:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00185ba:	75 05                	jne    c00185c1 <CPU::displayFeatures()+0x12f>
c00185bc:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c00185c1:	51                   	push   ecx
c00185c2:	51                   	push   ecx
c00185c3:	50                   	push   eax
c00185c4:	68 f3 a1 02 c0       	push   0xc002a1f3
c00185c9:	e8 07 a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c00185d6:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00185dd:	75 05                	jne    c00185e4 <CPU::displayFeatures()+0x152>
c00185df:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c00185e4:	52                   	push   edx
c00185e5:	52                   	push   edx
c00185e6:	50                   	push   eax
c00185e7:	68 0a a2 02 c0       	push   0xc002a20a
c00185ec:	e8 e4 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00185f1:	83 c4 10             	add    esp,0x10
c00185f4:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c00185f9:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018600:	75 05                	jne    c0018607 <CPU::displayFeatures()+0x175>
c0018602:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c0018607:	51                   	push   ecx
c0018608:	51                   	push   ecx
c0018609:	50                   	push   eax
c001860a:	68 21 a2 02 c0       	push   0xc002a221
c001860f:	e8 c1 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018614:	83 c4 10             	add    esp,0x10
c0018617:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c001861c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018623:	75 05                	jne    c001862a <CPU::displayFeatures()+0x198>
c0018625:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c001862a:	52                   	push   edx
c001862b:	52                   	push   edx
c001862c:	50                   	push   eax
c001862d:	68 38 a2 02 c0       	push   0xc002a238
c0018632:	e8 9e a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018637:	83 c4 10             	add    esp,0x10
c001863a:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c001863f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018646:	75 05                	jne    c001864d <CPU::displayFeatures()+0x1bb>
c0018648:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c001864d:	51                   	push   ecx
c001864e:	51                   	push   ecx
c001864f:	50                   	push   eax
c0018650:	68 4f a2 02 c0       	push   0xc002a24f
c0018655:	e8 7b a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001865a:	83 c4 10             	add    esp,0x10
c001865d:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c0018662:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018669:	75 05                	jne    c0018670 <CPU::displayFeatures()+0x1de>
c001866b:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c0018670:	52                   	push   edx
c0018671:	52                   	push   edx
c0018672:	50                   	push   eax
c0018673:	68 66 a2 02 c0       	push   0xc002a266
c0018678:	e8 58 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001867d:	83 c4 10             	add    esp,0x10
c0018680:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c0018685:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001868c:	75 05                	jne    c0018693 <CPU::displayFeatures()+0x201>
c001868e:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c0018693:	51                   	push   ecx
c0018694:	51                   	push   ecx
c0018695:	50                   	push   eax
c0018696:	68 7d a2 02 c0       	push   0xc002a27d
c001869b:	e8 35 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00186a0:	83 c4 10             	add    esp,0x10
c00186a3:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c00186a8:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00186af:	75 05                	jne    c00186b6 <CPU::displayFeatures()+0x224>
c00186b1:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c00186b6:	52                   	push   edx
c00186b7:	52                   	push   edx
c00186b8:	50                   	push   eax
c00186b9:	68 94 a2 02 c0       	push   0xc002a294
c00186be:	e8 12 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00186c3:	83 c4 10             	add    esp,0x10
c00186c6:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c00186cb:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00186d2:	78 05                	js     c00186d9 <CPU::displayFeatures()+0x247>
c00186d4:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c00186d9:	51                   	push   ecx
c00186da:	51                   	push   ecx
c00186db:	50                   	push   eax
c00186dc:	68 ab a2 02 c0       	push   0xc002a2ab
c00186e1:	e8 ef a1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00186e6:	83 c4 10             	add    esp,0x10
c00186e9:	b8 f2 8c 02 c0       	mov    eax,0xc0028cf2
c00186ee:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00186f5:	75 05                	jne    c00186fc <CPU::displayFeatures()+0x26a>
c00186f7:	b8 f6 8c 02 c0       	mov    eax,0xc0028cf6
c00186fc:	52                   	push   edx
c00186fd:	52                   	push   edx
c00186fe:	50                   	push   eax
c00186ff:	68 c2 a2 02 c0       	push   0xc002a2c2
c0018704:	e8 cc a1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018709:	83 c4 18             	add    esp,0x18
c001870c:	5b                   	pop    ebx
c001870d:	c3                   	ret    

c001870e <CPU::detectFeatures()>:
c001870e:	55                   	push   ebp
c001870f:	57                   	push   edi
c0018710:	56                   	push   esi
c0018711:	53                   	push   ebx
c0018712:	83 ec 50             	sub    esp,0x50
c0018715:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018719:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018723:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001872a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018730:	6a 0d                	push   0xd
c0018732:	6a 00                	push   0x0
c0018734:	57                   	push   edi
c0018735:	e8 8a 7f fe ff       	call   c00006c4 <memset>
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0018742:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018749:	0f 84 20 09 00 00    	je     c001906f <CPU::detectFeatures()+0x961>
c001874f:	83 ec 0c             	sub    esp,0xc
c0018752:	6a 10                	push   0x10
c0018754:	e8 f3 fb ff ff       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c0018759:	83 e0 01             	and    eax,0x1
c001875c:	8d 14 00             	lea    edx,[eax+eax*1]
c001875f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018765:	83 e0 fd             	and    eax,0xfffffffd
c0018768:	09 d0                	or     eax,edx
c001876a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018770:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018777:	e8 d0 fb ff ff       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c001877c:	83 e0 01             	and    eax,0x1
c001877f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018786:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001878c:	83 e0 fb             	and    eax,0xfffffffb
c001878f:	09 d0                	or     eax,edx
c0018791:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018797:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001879e:	e8 a9 fb ff ff       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c00187a3:	83 e0 01             	and    eax,0x1
c00187a6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00187ad:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187b3:	83 e0 f7             	and    eax,0xfffffff7
c00187b6:	09 d0                	or     eax,edx
c00187b8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00187be:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00187c5:	e8 82 fb ff ff       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c00187ca:	83 e0 01             	and    eax,0x1
c00187cd:	c1 e0 04             	shl    eax,0x4
c00187d0:	88 c2                	mov    dl,al
c00187d2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187d8:	83 e0 ef             	and    eax,0xffffffef
c00187db:	09 d0                	or     eax,edx
c00187dd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00187e3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00187ea:	e8 5d fb ff ff       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c00187ef:	83 e0 01             	and    eax,0x1
c00187f2:	c1 e0 05             	shl    eax,0x5
c00187f5:	88 c2                	mov    dl,al
c00187f7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187fd:	83 e0 df             	and    eax,0xffffffdf
c0018800:	09 d0                	or     eax,edx
c0018802:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018808:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001880f:	e8 38 fb ff ff       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c0018814:	83 e0 01             	and    eax,0x1
c0018817:	8d 14 00             	lea    edx,[eax+eax*1]
c001881a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018820:	83 e0 fd             	and    eax,0xfffffffd
c0018823:	09 d0                	or     eax,edx
c0018825:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001882b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018832:	e8 15 fb ff ff       	call   c001834c <CPU::cpuidCheckEDX(unsigned int)>
c0018837:	83 e0 01             	and    eax,0x1
c001883a:	c1 e0 06             	shl    eax,0x6
c001883d:	88 c2                	mov    dl,al
c001883f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018845:	83 e0 bf             	and    eax,0xffffffbf
c0018848:	09 d0                	or     eax,edx
c001884a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018850:	58                   	pop    eax
c0018851:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018855:	56                   	push   esi
c0018856:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001885a:	55                   	push   ebp
c001885b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001885f:	50                   	push   eax
c0018860:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018864:	52                   	push   edx
c0018865:	6a 00                	push   0x0
c0018867:	e8 5c fa ff ff       	call   c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001886c:	83 c4 1c             	add    esp,0x1c
c001886f:	6a 04                	push   0x4
c0018871:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018875:	50                   	push   eax
c0018876:	57                   	push   edi
c0018877:	e8 24 7e fe ff       	call   c00006a0 <memcpy>
c001887c:	83 c4 0c             	add    esp,0xc
c001887f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018885:	6a 04                	push   0x4
c0018887:	56                   	push   esi
c0018888:	50                   	push   eax
c0018889:	e8 12 7e fe ff       	call   c00006a0 <memcpy>
c001888e:	83 c4 0c             	add    esp,0xc
c0018891:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018897:	6a 04                	push   0x4
c0018899:	55                   	push   ebp
c001889a:	50                   	push   eax
c001889b:	e8 00 7e fe ff       	call   c00006a0 <memcpy>
c00188a0:	58                   	pop    eax
c00188a1:	5a                   	pop    edx
c00188a2:	68 d9 a2 02 c0       	push   0xc002a2d9
c00188a7:	57                   	push   edi
c00188a8:	e8 07 7f fe ff       	call   c00007b4 <strcmp>
c00188ad:	83 c4 10             	add    esp,0x10
c00188b0:	85 c0                	test   eax,eax
c00188b2:	75 0f                	jne    c00188c3 <CPU::detectFeatures()+0x1b5>
c00188b4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00188be:	e9 22 02 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c00188c3:	50                   	push   eax
c00188c4:	50                   	push   eax
c00188c5:	68 e6 a2 02 c0       	push   0xc002a2e6
c00188ca:	57                   	push   edi
c00188cb:	e8 e4 7e fe ff       	call   c00007b4 <strcmp>
c00188d0:	83 c4 10             	add    esp,0x10
c00188d3:	85 c0                	test   eax,eax
c00188d5:	74 dd                	je     c00188b4 <CPU::detectFeatures()+0x1a6>
c00188d7:	51                   	push   ecx
c00188d8:	51                   	push   ecx
c00188d9:	68 f3 a2 02 c0       	push   0xc002a2f3
c00188de:	57                   	push   edi
c00188df:	e8 d0 7e fe ff       	call   c00007b4 <strcmp>
c00188e4:	83 c4 10             	add    esp,0x10
c00188e7:	85 c0                	test   eax,eax
c00188e9:	74 2a                	je     c0018915 <CPU::detectFeatures()+0x207>
c00188eb:	52                   	push   edx
c00188ec:	52                   	push   edx
c00188ed:	68 00 a3 02 c0       	push   0xc002a300
c00188f2:	57                   	push   edi
c00188f3:	e8 bc 7e fe ff       	call   c00007b4 <strcmp>
c00188f8:	83 c4 10             	add    esp,0x10
c00188fb:	85 c0                	test   eax,eax
c00188fd:	74 16                	je     c0018915 <CPU::detectFeatures()+0x207>
c00188ff:	50                   	push   eax
c0018900:	50                   	push   eax
c0018901:	68 0d a3 02 c0       	push   0xc002a30d
c0018906:	57                   	push   edi
c0018907:	e8 a8 7e fe ff       	call   c00007b4 <strcmp>
c001890c:	83 c4 10             	add    esp,0x10
c001890f:	85 c0                	test   eax,eax
c0018911:	74 48                	je     c001895b <CPU::detectFeatures()+0x24d>
c0018913:	eb 0f                	jmp    c0018924 <CPU::detectFeatures()+0x216>
c0018915:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001891f:	e9 c1 01 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c0018924:	50                   	push   eax
c0018925:	50                   	push   eax
c0018926:	68 1a a3 02 c0       	push   0xc002a31a
c001892b:	57                   	push   edi
c001892c:	e8 83 7e fe ff       	call   c00007b4 <strcmp>
c0018931:	83 c4 10             	add    esp,0x10
c0018934:	85 c0                	test   eax,eax
c0018936:	74 23                	je     c001895b <CPU::detectFeatures()+0x24d>
c0018938:	50                   	push   eax
c0018939:	50                   	push   eax
c001893a:	68 27 a3 02 c0       	push   0xc002a327
c001893f:	57                   	push   edi
c0018940:	e8 6f 7e fe ff       	call   c00007b4 <strcmp>
c0018945:	83 c4 10             	add    esp,0x10
c0018948:	85 c0                	test   eax,eax
c001894a:	75 1e                	jne    c001896a <CPU::detectFeatures()+0x25c>
c001894c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018956:	e9 8a 01 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c001895b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018965:	e9 7b 01 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c001896a:	50                   	push   eax
c001896b:	50                   	push   eax
c001896c:	68 34 a3 02 c0       	push   0xc002a334
c0018971:	57                   	push   edi
c0018972:	e8 3d 7e fe ff       	call   c00007b4 <strcmp>
c0018977:	83 c4 10             	add    esp,0x10
c001897a:	85 c0                	test   eax,eax
c001897c:	75 0f                	jne    c001898d <CPU::detectFeatures()+0x27f>
c001897e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018988:	e9 58 01 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c001898d:	50                   	push   eax
c001898e:	50                   	push   eax
c001898f:	68 f3 a2 02 c0       	push   0xc002a2f3
c0018994:	57                   	push   edi
c0018995:	e8 1a 7e fe ff       	call   c00007b4 <strcmp>
c001899a:	83 c4 10             	add    esp,0x10
c001899d:	85 c0                	test   eax,eax
c001899f:	75 0f                	jne    c00189b0 <CPU::detectFeatures()+0x2a2>
c00189a1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00189ab:	e9 35 01 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c00189b0:	50                   	push   eax
c00189b1:	50                   	push   eax
c00189b2:	68 41 a3 02 c0       	push   0xc002a341
c00189b7:	57                   	push   edi
c00189b8:	e8 f7 7d fe ff       	call   c00007b4 <strcmp>
c00189bd:	83 c4 10             	add    esp,0x10
c00189c0:	85 c0                	test   eax,eax
c00189c2:	75 0f                	jne    c00189d3 <CPU::detectFeatures()+0x2c5>
c00189c4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00189ce:	e9 12 01 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c00189d3:	51                   	push   ecx
c00189d4:	51                   	push   ecx
c00189d5:	68 4e a3 02 c0       	push   0xc002a34e
c00189da:	57                   	push   edi
c00189db:	e8 d4 7d fe ff       	call   c00007b4 <strcmp>
c00189e0:	83 c4 10             	add    esp,0x10
c00189e3:	85 c0                	test   eax,eax
c00189e5:	75 0f                	jne    c00189f6 <CPU::detectFeatures()+0x2e8>
c00189e7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00189f1:	e9 ef 00 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c00189f6:	52                   	push   edx
c00189f7:	52                   	push   edx
c00189f8:	68 5b a3 02 c0       	push   0xc002a35b
c00189fd:	57                   	push   edi
c00189fe:	e8 b1 7d fe ff       	call   c00007b4 <strcmp>
c0018a03:	83 c4 10             	add    esp,0x10
c0018a06:	85 c0                	test   eax,eax
c0018a08:	75 0f                	jne    c0018a19 <CPU::detectFeatures()+0x30b>
c0018a0a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018a14:	e9 cc 00 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c0018a19:	50                   	push   eax
c0018a1a:	50                   	push   eax
c0018a1b:	68 68 a3 02 c0       	push   0xc002a368
c0018a20:	57                   	push   edi
c0018a21:	e8 8e 7d fe ff       	call   c00007b4 <strcmp>
c0018a26:	83 c4 10             	add    esp,0x10
c0018a29:	85 c0                	test   eax,eax
c0018a2b:	75 0f                	jne    c0018a3c <CPU::detectFeatures()+0x32e>
c0018a2d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018a37:	e9 a9 00 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c0018a3c:	50                   	push   eax
c0018a3d:	50                   	push   eax
c0018a3e:	68 75 a3 02 c0       	push   0xc002a375
c0018a43:	57                   	push   edi
c0018a44:	e8 6b 7d fe ff       	call   c00007b4 <strcmp>
c0018a49:	83 c4 10             	add    esp,0x10
c0018a4c:	85 c0                	test   eax,eax
c0018a4e:	75 0f                	jne    c0018a5f <CPU::detectFeatures()+0x351>
c0018a50:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018a5a:	e9 86 00 00 00       	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c0018a5f:	50                   	push   eax
c0018a60:	50                   	push   eax
c0018a61:	68 82 a3 02 c0       	push   0xc002a382
c0018a66:	57                   	push   edi
c0018a67:	e8 48 7d fe ff       	call   c00007b4 <strcmp>
c0018a6c:	83 c4 10             	add    esp,0x10
c0018a6f:	85 c0                	test   eax,eax
c0018a71:	75 0c                	jne    c0018a7f <CPU::detectFeatures()+0x371>
c0018a73:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018a7d:	eb 66                	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c0018a7f:	50                   	push   eax
c0018a80:	50                   	push   eax
c0018a81:	68 8f a3 02 c0       	push   0xc002a38f
c0018a86:	57                   	push   edi
c0018a87:	e8 28 7d fe ff       	call   c00007b4 <strcmp>
c0018a8c:	83 c4 10             	add    esp,0x10
c0018a8f:	85 c0                	test   eax,eax
c0018a91:	75 0c                	jne    c0018a9f <CPU::detectFeatures()+0x391>
c0018a93:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018a9d:	eb 46                	jmp    c0018ae5 <CPU::detectFeatures()+0x3d7>
c0018a9f:	50                   	push   eax
c0018aa0:	50                   	push   eax
c0018aa1:	68 9c a3 02 c0       	push   0xc002a39c
c0018aa6:	57                   	push   edi
c0018aa7:	e8 08 7d fe ff       	call   c00007b4 <strcmp>
c0018aac:	83 c4 10             	add    esp,0x10
c0018aaf:	85 c0                	test   eax,eax
c0018ab1:	74 e0                	je     c0018a93 <CPU::detectFeatures()+0x385>
c0018ab3:	50                   	push   eax
c0018ab4:	50                   	push   eax
c0018ab5:	68 a9 a3 02 c0       	push   0xc002a3a9
c0018aba:	57                   	push   edi
c0018abb:	e8 f4 7c fe ff       	call   c00007b4 <strcmp>
c0018ac0:	83 c4 10             	add    esp,0x10
c0018ac3:	85 c0                	test   eax,eax
c0018ac5:	74 cc                	je     c0018a93 <CPU::detectFeatures()+0x385>
c0018ac7:	51                   	push   ecx
c0018ac8:	51                   	push   ecx
c0018ac9:	68 b6 a3 02 c0       	push   0xc002a3b6
c0018ace:	57                   	push   edi
c0018acf:	e8 e0 7c fe ff       	call   c00007b4 <strcmp>
c0018ad4:	83 c4 10             	add    esp,0x10
c0018ad7:	85 c0                	test   eax,eax
c0018ad9:	74 b8                	je     c0018a93 <CPU::detectFeatures()+0x385>
c0018adb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018ae5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018aea:	0f 86 be 00 00 00    	jbe    c0018bae <CPU::detectFeatures()+0x4a0>
c0018af0:	83 ec 0c             	sub    esp,0xc
c0018af3:	68 80 00 00 00       	push   0x80
c0018af8:	e8 ab f8 ff ff       	call   c00183a8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018afd:	83 e0 01             	and    eax,0x1
c0018b00:	c1 e0 06             	shl    eax,0x6
c0018b03:	88 c2                	mov    dl,al
c0018b05:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b0b:	83 e0 bf             	and    eax,0xffffffbf
c0018b0e:	09 d0                	or     eax,edx
c0018b10:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b16:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018b1d:	e8 86 f8 ff ff       	call   c00183a8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018b22:	83 e0 01             	and    eax,0x1
c0018b25:	c1 e0 04             	shl    eax,0x4
c0018b28:	88 c2                	mov    dl,al
c0018b2a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018b30:	83 e0 ef             	and    eax,0xffffffef
c0018b33:	09 d0                	or     eax,edx
c0018b35:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018b3b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018b42:	e8 61 f8 ff ff       	call   c00183a8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018b47:	c1 e0 07             	shl    eax,0x7
c0018b4a:	88 c2                	mov    dl,al
c0018b4c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b52:	83 e0 7f             	and    eax,0x7f
c0018b55:	09 d0                	or     eax,edx
c0018b57:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b5d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018b64:	e8 6d f8 ff ff       	call   c00183d6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018b69:	83 e0 01             	and    eax,0x1
c0018b6c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018b73:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018b79:	83 e0 f7             	and    eax,0xfffffff7
c0018b7c:	09 d0                	or     eax,edx
c0018b7e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018b84:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018b8b:	e8 46 f8 ff ff       	call   c00183d6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018b90:	83 c4 10             	add    esp,0x10
c0018b93:	83 e0 01             	and    eax,0x1
c0018b96:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018b9d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ba3:	83 e0 fb             	and    eax,0xfffffffb
c0018ba6:	09 d0                	or     eax,edx
c0018ba8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018bae:	83 ec 0c             	sub    esp,0xc
c0018bb1:	56                   	push   esi
c0018bb2:	55                   	push   ebp
c0018bb3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018bb7:	57                   	push   edi
c0018bb8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018bbc:	50                   	push   eax
c0018bbd:	6a 01                	push   0x1
c0018bbf:	e8 04 f7 ff ff       	call   c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bc4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018bc8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018bce:	88 ca                	mov    dl,cl
c0018bd0:	83 e0 f0             	and    eax,0xfffffff0
c0018bd3:	83 e2 0f             	and    edx,0xf
c0018bd6:	09 d0                	or     eax,edx
c0018bd8:	88 ca                	mov    dl,cl
c0018bda:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018be0:	c0 ea 04             	shr    dl,0x4
c0018be3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018be7:	0f b6 c2             	movzx  eax,dl
c0018bea:	83 c4 20             	add    esp,0x20
c0018bed:	c1 e0 06             	shl    eax,0x6
c0018bf0:	89 c5                	mov    ebp,eax
c0018bf2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bf8:	66 25 3f c0          	and    ax,0xc03f
c0018bfc:	09 e8                	or     eax,ebp
c0018bfe:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018c05:	89 c8                	mov    eax,ecx
c0018c07:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018c0d:	c1 e8 08             	shr    eax,0x8
c0018c10:	83 e2 3f             	and    edx,0x3f
c0018c13:	83 e0 0f             	and    eax,0xf
c0018c16:	89 c5                	mov    ebp,eax
c0018c18:	c1 e5 06             	shl    ebp,0x6
c0018c1b:	09 d5                	or     ebp,edx
c0018c1d:	89 ea                	mov    edx,ebp
c0018c1f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018c25:	88 c2                	mov    dl,al
c0018c27:	c0 ea 02             	shr    dl,0x2
c0018c2a:	89 d5                	mov    ebp,edx
c0018c2c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018c32:	83 e2 c0             	and    edx,0xffffffc0
c0018c35:	09 d5                	or     ebp,edx
c0018c37:	89 ea                	mov    edx,ebp
c0018c39:	89 cd                	mov    ebp,ecx
c0018c3b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018c41:	c1 ed 0c             	shr    ebp,0xc
c0018c44:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018c4a:	83 e5 03             	and    ebp,0x3
c0018c4d:	83 e2 cf             	and    edx,0xffffffcf
c0018c50:	c1 e5 04             	shl    ebp,0x4
c0018c53:	09 d5                	or     ebp,edx
c0018c55:	3c 06                	cmp    al,0x6
c0018c57:	89 ea                	mov    edx,ebp
c0018c59:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018c5f:	74 04                	je     c0018c65 <CPU::detectFeatures()+0x557>
c0018c61:	3c 0f                	cmp    al,0xf
c0018c63:	75 5c                	jne    c0018cc1 <CPU::detectFeatures()+0x5b3>
c0018c65:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018c69:	89 cd                	mov    ebp,ecx
c0018c6b:	c1 ed 10             	shr    ebp,0x10
c0018c6e:	c1 e5 04             	shl    ebp,0x4
c0018c71:	09 ea                	or     edx,ebp
c0018c73:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018c79:	0f b6 d2             	movzx  edx,dl
c0018c7c:	66 81 e5 3f c0       	and    bp,0xc03f
c0018c81:	c1 e2 06             	shl    edx,0x6
c0018c84:	09 ea                	or     edx,ebp
c0018c86:	3c 0f                	cmp    al,0xf
c0018c88:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018c8f:	75 30                	jne    c0018cc1 <CPU::detectFeatures()+0x5b3>
c0018c91:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018c97:	c1 e9 14             	shr    ecx,0x14
c0018c9a:	83 e0 3f             	and    eax,0x3f
c0018c9d:	83 c1 0f             	add    ecx,0xf
c0018ca0:	88 ca                	mov    dl,cl
c0018ca2:	c0 e9 02             	shr    cl,0x2
c0018ca5:	c1 e2 06             	shl    edx,0x6
c0018ca8:	09 d0                	or     eax,edx
c0018caa:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018cb0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018cb6:	83 e0 c0             	and    eax,0xffffffc0
c0018cb9:	09 c1                	or     ecx,eax
c0018cbb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018cc1:	83 ec 0c             	sub    esp,0xc
c0018cc4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018ccb:	56                   	push   esi
c0018ccc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cd0:	50                   	push   eax
c0018cd1:	57                   	push   edi
c0018cd2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018cd6:	55                   	push   ebp
c0018cd7:	68 00 00 00 80       	push   0x80000000
c0018cdc:	e8 e7 f5 ff ff       	call   c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ce1:	83 c4 20             	add    esp,0x20
c0018ce4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018cec:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cf0:	76 1e                	jbe    c0018d10 <CPU::detectFeatures()+0x602>
c0018cf2:	83 ec 0c             	sub    esp,0xc
c0018cf5:	56                   	push   esi
c0018cf6:	50                   	push   eax
c0018cf7:	57                   	push   edi
c0018cf8:	55                   	push   ebp
c0018cf9:	68 01 00 00 80       	push   0x80000001
c0018cfe:	e8 c5 f5 ff ff       	call   c00182c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d03:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018d0d:	83 c4 20             	add    esp,0x20
c0018d10:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018d16:	83 f8 01             	cmp    eax,0x1
c0018d19:	75 6f                	jne    c0018d8a <CPU::detectFeatures()+0x67c>
c0018d1b:	51                   	push   ecx
c0018d1c:	51                   	push   ecx
c0018d1d:	68 c2 a3 02 c0       	push   0xc002a3c2
c0018d22:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018d26:	56                   	push   esi
c0018d27:	e8 37 7a fe ff       	call   c0000763 <strcpy>
c0018d2c:	5f                   	pop    edi
c0018d2d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d33:	5d                   	pop    ebp
c0018d34:	66 c1 e8 06          	shr    ax,0x6
c0018d38:	0f b6 c0             	movzx  eax,al
c0018d3b:	50                   	push   eax
c0018d3c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d42:	c1 e8 0e             	shr    eax,0xe
c0018d45:	0f b6 c0             	movzx  eax,al
c0018d48:	50                   	push   eax
c0018d49:	e8 24 f2 ff ff       	call   c0017f72 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018d4e:	5a                   	pop    edx
c0018d4f:	59                   	pop    ecx
c0018d50:	50                   	push   eax
c0018d51:	56                   	push   esi
c0018d52:	e8 c3 7a fe ff       	call   c000081a <strcat>
c0018d57:	5f                   	pop    edi
c0018d58:	5d                   	pop    ebp
c0018d59:	56                   	push   esi
c0018d5a:	53                   	push   ebx
c0018d5b:	e8 7e b1 ff ff       	call   c0013ede <Device::setName(char const*)>
c0018d60:	58                   	pop    eax
c0018d61:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018d67:	5a                   	pop    edx
c0018d68:	68 c9 a3 02 c0       	push   0xc002a3c9
c0018d6d:	50                   	push   eax
c0018d6e:	e8 41 7a fe ff       	call   c00007b4 <strcmp>
c0018d73:	83 c4 10             	add    esp,0x10
c0018d76:	85 c0                	test   eax,eax
c0018d78:	0f 85 71 03 00 00    	jne    c00190ef <CPU::detectFeatures()+0x9e1>
c0018d7e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018d85:	e9 65 03 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x9e1>
c0018d8a:	83 f8 02             	cmp    eax,0x2
c0018d8d:	0f 85 b5 00 00 00    	jne    c0018e48 <CPU::detectFeatures()+0x73a>
c0018d93:	57                   	push   edi
c0018d94:	57                   	push   edi
c0018d95:	68 db a3 02 c0       	push   0xc002a3db
c0018d9a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018d9e:	56                   	push   esi
c0018d9f:	e8 bf 79 fe ff       	call   c0000763 <strcpy>
c0018da4:	5d                   	pop    ebp
c0018da5:	58                   	pop    eax
c0018da6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018dac:	66 c1 e8 06          	shr    ax,0x6
c0018db0:	0f b6 c0             	movzx  eax,al
c0018db3:	50                   	push   eax
c0018db4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018dba:	c1 e8 0e             	shr    eax,0xe
c0018dbd:	0f b6 c0             	movzx  eax,al
c0018dc0:	50                   	push   eax
c0018dc1:	e8 18 f0 ff ff       	call   c0017dde <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018dc6:	5a                   	pop    edx
c0018dc7:	59                   	pop    ecx
c0018dc8:	50                   	push   eax
c0018dc9:	56                   	push   esi
c0018dca:	e8 4b 7a fe ff       	call   c000081a <strcat>
c0018dcf:	5f                   	pop    edi
c0018dd0:	5d                   	pop    ebp
c0018dd1:	56                   	push   esi
c0018dd2:	53                   	push   ebx
c0018dd3:	e8 06 b1 ff ff       	call   c0013ede <Device::setName(char const*)>
c0018dd8:	58                   	pop    eax
c0018dd9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ddf:	5a                   	pop    edx
c0018de0:	68 e0 a3 02 c0       	push   0xc002a3e0
c0018de5:	50                   	push   eax
c0018de6:	e8 c9 79 fe ff       	call   c00007b4 <strcmp>
c0018deb:	83 c4 10             	add    esp,0x10
c0018dee:	85 c0                	test   eax,eax
c0018df0:	75 20                	jne    c0018e12 <CPU::detectFeatures()+0x704>
c0018df2:	8b 15 88 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd88
c0018df8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018dfe:	a8 01                	test   al,0x1
c0018e00:	74 10                	je     c0018e12 <CPU::detectFeatures()+0x704>
c0018e02:	83 e0 fe             	and    eax,0xfffffffe
c0018e05:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018e0b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018e12:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e18:	c1 e8 0e             	shr    eax,0xe
c0018e1b:	3c 05                	cmp    al,0x5
c0018e1d:	0f 85 cc 02 00 00    	jne    c00190ef <CPU::detectFeatures()+0x9e1>
c0018e23:	56                   	push   esi
c0018e24:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e2a:	83 e0 0f             	and    eax,0xf
c0018e2d:	50                   	push   eax
c0018e2e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e34:	66 c1 e8 06          	shr    ax,0x6
c0018e38:	0f b6 c0             	movzx  eax,al
c0018e3b:	50                   	push   eax
c0018e3c:	6a 05                	push   0x5
c0018e3e:	e8 11 f4 ff ff       	call   c0018254 <CPU::AMD_K6_writeback(int, int, int)>
c0018e43:	e9 1f 02 00 00       	jmp    c0019067 <CPU::detectFeatures()+0x959>
c0018e48:	8d 50 fd             	lea    edx,[eax-0x3]
c0018e4b:	83 fa 01             	cmp    edx,0x1
c0018e4e:	76 09                	jbe    c0018e59 <CPU::detectFeatures()+0x74b>
c0018e50:	83 f8 06             	cmp    eax,0x6
c0018e53:	0f 85 91 01 00 00    	jne    c0018fea <CPU::detectFeatures()+0x8dc>
c0018e59:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018e5f:	c1 ea 0e             	shr    edx,0xe
c0018e62:	80 fa 05             	cmp    dl,0x5
c0018e65:	75 7b                	jne    c0018ee2 <CPU::detectFeatures()+0x7d4>
c0018e67:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018e6d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018e72:	66 81 fa 00 01       	cmp    dx,0x100
c0018e77:	75 0c                	jne    c0018e85 <CPU::detectFeatures()+0x777>
c0018e79:	51                   	push   ecx
c0018e7a:	51                   	push   ecx
c0018e7b:	68 e7 a3 02 c0       	push   0xc002a3e7
c0018e80:	e9 dc 01 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018e85:	66 81 fa 00 02       	cmp    dx,0x200
c0018e8a:	75 0c                	jne    c0018e98 <CPU::detectFeatures()+0x78a>
c0018e8c:	52                   	push   edx
c0018e8d:	52                   	push   edx
c0018e8e:	68 fa a3 02 c0       	push   0xc002a3fa
c0018e93:	e9 c9 01 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018e98:	66 81 fa 40 02       	cmp    dx,0x240
c0018e9d:	75 0c                	jne    c0018eab <CPU::detectFeatures()+0x79d>
c0018e9f:	50                   	push   eax
c0018ea0:	50                   	push   eax
c0018ea1:	68 0c a4 02 c0       	push   0xc002a40c
c0018ea6:	e9 b6 01 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018eab:	83 f8 06             	cmp    eax,0x6
c0018eae:	75 0c                	jne    c0018ebc <CPU::detectFeatures()+0x7ae>
c0018eb0:	50                   	push   eax
c0018eb1:	50                   	push   eax
c0018eb2:	68 1e a4 02 c0       	push   0xc002a41e
c0018eb7:	e9 a5 01 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018ebc:	83 f8 04             	cmp    eax,0x4
c0018ebf:	75 0c                	jne    c0018ecd <CPU::detectFeatures()+0x7bf>
c0018ec1:	50                   	push   eax
c0018ec2:	50                   	push   eax
c0018ec3:	68 2a a4 02 c0       	push   0xc002a42a
c0018ec8:	e9 94 01 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018ecd:	83 f8 03             	cmp    eax,0x3
c0018ed0:	0f 85 19 02 00 00    	jne    c00190ef <CPU::detectFeatures()+0x9e1>
c0018ed6:	50                   	push   eax
c0018ed7:	50                   	push   eax
c0018ed8:	68 32 a4 02 c0       	push   0xc002a432
c0018edd:	e9 7f 01 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018ee2:	80 fa 06             	cmp    dl,0x6
c0018ee5:	0f 85 db 00 00 00    	jne    c0018fc6 <CPU::detectFeatures()+0x8b8>
c0018eeb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ef1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018ef6:	66 81 fa 80 01       	cmp    dx,0x180
c0018efb:	75 0c                	jne    c0018f09 <CPU::detectFeatures()+0x7fb>
c0018efd:	50                   	push   eax
c0018efe:	50                   	push   eax
c0018eff:	68 3d a4 02 c0       	push   0xc002a43d
c0018f04:	e9 58 01 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018f09:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018f0f:	66 f7 c1 80 ff       	test   cx,0xff80
c0018f14:	75 0c                	jne    c0018f22 <CPU::detectFeatures()+0x814>
c0018f16:	50                   	push   eax
c0018f17:	50                   	push   eax
c0018f18:	68 4d a4 02 c0       	push   0xc002a44d
c0018f1d:	e9 3f 01 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018f22:	66 81 fa 40 02       	cmp    dx,0x240
c0018f27:	75 0c                	jne    c0018f35 <CPU::detectFeatures()+0x827>
c0018f29:	55                   	push   ebp
c0018f2a:	55                   	push   ebp
c0018f2b:	68 54 a4 02 c0       	push   0xc002a454
c0018f30:	e9 2c 01 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018f35:	66 81 fa 80 02       	cmp    dx,0x280
c0018f3a:	75 0c                	jne    c0018f48 <CPU::detectFeatures()+0x83a>
c0018f3c:	57                   	push   edi
c0018f3d:	57                   	push   edi
c0018f3e:	68 5d a4 02 c0       	push   0xc002a45d
c0018f43:	e9 19 01 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018f48:	66 81 fa 40 03       	cmp    dx,0x340
c0018f4d:	74 ed                	je     c0018f3c <CPU::detectFeatures()+0x82e>
c0018f4f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018f54:	75 0c                	jne    c0018f62 <CPU::detectFeatures()+0x854>
c0018f56:	56                   	push   esi
c0018f57:	56                   	push   esi
c0018f58:	68 64 a4 02 c0       	push   0xc002a464
c0018f5d:	e9 ff 00 00 00       	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018f62:	83 f8 06             	cmp    eax,0x6
c0018f65:	0f 84 45 ff ff ff    	je     c0018eb0 <CPU::detectFeatures()+0x7a2>
c0018f6b:	83 f8 04             	cmp    eax,0x4
c0018f6e:	0f 84 4d ff ff ff    	je     c0018ec1 <CPU::detectFeatures()+0x7b3>
c0018f74:	83 f8 03             	cmp    eax,0x3
c0018f77:	0f 85 72 01 00 00    	jne    c00190ef <CPU::detectFeatures()+0x9e1>
c0018f7d:	51                   	push   ecx
c0018f7e:	51                   	push   ecx
c0018f7f:	68 6d a4 02 c0       	push   0xc002a46d
c0018f84:	53                   	push   ebx
c0018f85:	e8 54 af ff ff       	call   c0013ede <Device::setName(char const*)>
c0018f8a:	b1 c1                	mov    cl,0xc1
c0018f8c:	88 c8                	mov    al,cl
c0018f8e:	e6 22                	out    0x22,al
c0018f90:	e4 23                	in     al,0x23
c0018f92:	88 c2                	mov    dl,al
c0018f94:	88 c8                	mov    al,cl
c0018f96:	e6 22                	out    0x22,al
c0018f98:	88 d0                	mov    al,dl
c0018f9a:	83 c8 10             	or     eax,0x10
c0018f9d:	e6 23                	out    0x23,al
c0018f9f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018fa6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018fa9:	89 d0                	mov    eax,edx
c0018fab:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018fb1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018fb5:	40                   	inc    eax
c0018fb6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018fbc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018fc1:	e9 a1 00 00 00       	jmp    c0019067 <CPU::detectFeatures()+0x959>
c0018fc6:	83 f8 06             	cmp    eax,0x6
c0018fc9:	0f 84 e1 fe ff ff    	je     c0018eb0 <CPU::detectFeatures()+0x7a2>
c0018fcf:	83 f8 04             	cmp    eax,0x4
c0018fd2:	0f 84 e9 fe ff ff    	je     c0018ec1 <CPU::detectFeatures()+0x7b3>
c0018fd8:	83 f8 03             	cmp    eax,0x3
c0018fdb:	0f 85 0e 01 00 00    	jne    c00190ef <CPU::detectFeatures()+0x9e1>
c0018fe1:	52                   	push   edx
c0018fe2:	52                   	push   edx
c0018fe3:	68 78 a4 02 c0       	push   0xc002a478
c0018fe8:	eb 77                	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018fea:	83 f8 07             	cmp    eax,0x7
c0018fed:	75 09                	jne    c0018ff8 <CPU::detectFeatures()+0x8ea>
c0018fef:	50                   	push   eax
c0018ff0:	50                   	push   eax
c0018ff1:	68 82 a4 02 c0       	push   0xc002a482
c0018ff6:	eb 69                	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0018ff8:	83 f8 0a             	cmp    eax,0xa
c0018ffb:	75 09                	jne    c0019006 <CPU::detectFeatures()+0x8f8>
c0018ffd:	50                   	push   eax
c0018ffe:	50                   	push   eax
c0018fff:	68 8d a4 02 c0       	push   0xc002a48d
c0019004:	eb 5b                	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0019006:	83 f8 0b             	cmp    eax,0xb
c0019009:	75 09                	jne    c0019014 <CPU::detectFeatures()+0x906>
c001900b:	50                   	push   eax
c001900c:	50                   	push   eax
c001900d:	68 95 a4 02 c0       	push   0xc002a495
c0019012:	eb 4d                	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0019014:	83 f8 08             	cmp    eax,0x8
c0019017:	75 09                	jne    c0019022 <CPU::detectFeatures()+0x914>
c0019019:	50                   	push   eax
c001901a:	50                   	push   eax
c001901b:	68 9e a4 02 c0       	push   0xc002a49e
c0019020:	eb 3f                	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0019022:	83 f8 09             	cmp    eax,0x9
c0019025:	75 09                	jne    c0019030 <CPU::detectFeatures()+0x922>
c0019027:	50                   	push   eax
c0019028:	50                   	push   eax
c0019029:	68 a6 a4 02 c0       	push   0xc002a4a6
c001902e:	eb 31                	jmp    c0019061 <CPU::detectFeatures()+0x953>
c0019030:	83 f8 05             	cmp    eax,0x5
c0019033:	75 09                	jne    c001903e <CPU::detectFeatures()+0x930>
c0019035:	50                   	push   eax
c0019036:	50                   	push   eax
c0019037:	68 ae a4 02 c0       	push   0xc002a4ae
c001903c:	eb 23                	jmp    c0019061 <CPU::detectFeatures()+0x953>
c001903e:	83 f8 0c             	cmp    eax,0xc
c0019041:	75 09                	jne    c001904c <CPU::detectFeatures()+0x93e>
c0019043:	55                   	push   ebp
c0019044:	55                   	push   ebp
c0019045:	68 bc a4 02 c0       	push   0xc002a4bc
c001904a:	eb 15                	jmp    c0019061 <CPU::detectFeatures()+0x953>
c001904c:	83 f8 0d             	cmp    eax,0xd
c001904f:	75 09                	jne    c001905a <CPU::detectFeatures()+0x94c>
c0019051:	57                   	push   edi
c0019052:	57                   	push   edi
c0019053:	68 c7 a4 02 c0       	push   0xc002a4c7
c0019058:	eb 07                	jmp    c0019061 <CPU::detectFeatures()+0x953>
c001905a:	56                   	push   esi
c001905b:	56                   	push   esi
c001905c:	68 db a4 02 c0       	push   0xc002a4db
c0019061:	53                   	push   ebx
c0019062:	e8 77 ae ff ff       	call   c0013ede <Device::setName(char const*)>
c0019067:	83 c4 10             	add    esp,0x10
c001906a:	e9 80 00 00 00       	jmp    c00190ef <CPU::detectFeatures()+0x9e1>
c001906f:	51                   	push   ecx
c0019070:	51                   	push   ecx
c0019071:	68 27 a3 02 c0       	push   0xc002a327
c0019076:	57                   	push   edi
c0019077:	e8 e7 76 fe ff       	call   c0000763 <strcpy>
c001907c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019086:	e8 23 72 fe ff       	call   c00002ae <is486>
c001908b:	83 c4 10             	add    esp,0x10
c001908e:	85 c0                	test   eax,eax
c0019090:	74 2b                	je     c00190bd <CPU::detectFeatures()+0x9af>
c0019092:	52                   	push   edx
c0019093:	52                   	push   edx
c0019094:	68 e7 a4 02 c0       	push   0xc002a4e7
c0019099:	53                   	push   ebx
c001909a:	e8 3f ae ff ff       	call   c0013ede <Device::setName(char const*)>
c001909f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00190a6:	0f 20 c0             	mov    eax,cr0
c00190a9:	83 e0 14             	and    eax,0x14
c00190ac:	83 c4 10             	add    esp,0x10
c00190af:	83 f8 04             	cmp    eax,0x4
c00190b2:	75 1f                	jne    c00190d3 <CPU::detectFeatures()+0x9c5>
c00190b4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00190bb:	eb 32                	jmp    c00190ef <CPU::detectFeatures()+0x9e1>
c00190bd:	50                   	push   eax
c00190be:	50                   	push   eax
c00190bf:	68 f2 a4 02 c0       	push   0xc002a4f2
c00190c4:	53                   	push   ebx
c00190c5:	e8 14 ae ff ff       	call   c0013ede <Device::setName(char const*)>
c00190ca:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00190d1:	eb d3                	jmp    c00190a6 <CPU::detectFeatures()+0x998>
c00190d3:	e8 b1 71 fe ff       	call   c0000289 <hasLegacyFPU>
c00190d8:	83 e0 01             	and    eax,0x1
c00190db:	8d 14 00             	lea    edx,[eax+eax*1]
c00190de:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00190e4:	83 e0 fd             	and    eax,0xfffffffd
c00190e7:	09 d0                	or     eax,edx
c00190e9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00190ef:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00190f6:	83 c4 4c             	add    esp,0x4c
c00190f9:	5b                   	pop    ebx
c00190fa:	5e                   	pop    esi
c00190fb:	5f                   	pop    edi
c00190fc:	5d                   	pop    ebp
c00190fd:	c3                   	ret    

c00190fe <CPU::setupSMEP()>:
c00190fe:	0f 20 e0             	mov    eax,cr4
c0019101:	0d 00 00 10 00       	or     eax,0x100000
c0019106:	0f 22 e0             	mov    cr4,eax
c0019109:	c3                   	ret    

c001910a <CPU::setupUMIP()>:
c001910a:	0f 20 e0             	mov    eax,cr4
c001910d:	80 cc 08             	or     ah,0x8
c0019110:	0f 22 e0             	mov    cr4,eax
c0019113:	c3                   	ret    

c0019114 <CPU::setupTSC()>:
c0019114:	0f 20 e0             	mov    eax,cr4
c0019117:	83 c8 04             	or     eax,0x4
c001911a:	0f 22 e0             	mov    cr4,eax
c001911d:	c3                   	ret    

c001911e <CPU::setupLargePages()>:
c001911e:	0f 20 e0             	mov    eax,cr4
c0019121:	83 c8 10             	or     eax,0x10
c0019124:	0f 22 e0             	mov    cr4,eax
c0019127:	c3                   	ret    

c0019128 <CPU::setupPAT()>:
c0019128:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001912d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019134:	74 2c                	je     c0019162 <CPU::setupPAT()+0x3a>
c0019136:	53                   	push   ebx
c0019137:	83 ec 10             	sub    esp,0x10
c001913a:	68 77 02 00 00       	push   0x277
c001913f:	50                   	push   eax
c0019140:	e8 87 5a ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c0019145:	83 e2 f8             	and    edx,0xfffffff8
c0019148:	83 ca 01             	or     edx,0x1
c001914b:	52                   	push   edx
c001914c:	50                   	push   eax
c001914d:	68 77 02 00 00       	push   0x277
c0019152:	ff 35 88 cd 02 c0    	push   DWORD PTR ds:0xc002cd88
c0019158:	e8 9b 5a ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001915d:	83 c4 28             	add    esp,0x28
c0019160:	5b                   	pop    ebx
c0019161:	c3                   	ret    
c0019162:	c3                   	ret    
c0019163:	90                   	nop

c0019164 <CPU::setupMTRR()>:
c0019164:	c3                   	ret    
c0019165:	90                   	nop

c0019166 <CPU::setupGlobalPages()>:
c0019166:	0f 20 e0             	mov    eax,cr4
c0019169:	0c 80                	or     al,0x80
c001916b:	0f 22 e0             	mov    cr4,eax
c001916e:	c3                   	ret    
c001916f:	90                   	nop

c0019170 <CPU::allowUsermodeDataAccess()>:
c0019170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019174:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001917b:	74 03                	je     c0019180 <CPU::allowUsermodeDataAccess()+0x10>
c001917d:	0f 01 cb             	stac   
c0019180:	c3                   	ret    
c0019181:	90                   	nop

c0019182 <CPU::prohibitUsermodeDataAccess()>:
c0019182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019186:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001918d:	74 03                	je     c0019192 <CPU::prohibitUsermodeDataAccess()+0x10>
c001918f:	0f 01 ca             	clac   
c0019192:	c3                   	ret    
c0019193:	90                   	nop

c0019194 <CPU::setupSMAP()>:
c0019194:	0f 20 e0             	mov    eax,cr4
c0019197:	0d 00 00 20 00       	or     eax,0x200000
c001919c:	0f 22 e0             	mov    cr4,eax
c001919f:	eb e1                	jmp    c0019182 <CPU::prohibitUsermodeDataAccess()>
c00191a1:	90                   	nop

c00191a2 <CPU::setupFeatures()>:
c00191a2:	83 ec 0c             	sub    esp,0xc
c00191a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00191a9:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00191b0:	74 07                	je     c00191b9 <CPU::setupFeatures()+0x17>
c00191b2:	52                   	push   edx
c00191b3:	e8 46 ff ff ff       	call   c00190fe <CPU::setupSMEP()>
c00191b8:	58                   	pop    eax
c00191b9:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00191c0:	74 07                	je     c00191c9 <CPU::setupFeatures()+0x27>
c00191c2:	52                   	push   edx
c00191c3:	e8 cc ff ff ff       	call   c0019194 <CPU::setupSMAP()>
c00191c8:	58                   	pop    eax
c00191c9:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00191d0:	74 07                	je     c00191d9 <CPU::setupFeatures()+0x37>
c00191d2:	52                   	push   edx
c00191d3:	e8 32 ff ff ff       	call   c001910a <CPU::setupUMIP()>
c00191d8:	58                   	pop    eax
c00191d9:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00191e0:	74 07                	je     c00191e9 <CPU::setupFeatures()+0x47>
c00191e2:	52                   	push   edx
c00191e3:	e8 2c ff ff ff       	call   c0019114 <CPU::setupTSC()>
c00191e8:	58                   	pop    eax
c00191e9:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00191f0:	74 07                	je     c00191f9 <CPU::setupFeatures()+0x57>
c00191f2:	52                   	push   edx
c00191f3:	e8 26 ff ff ff       	call   c001911e <CPU::setupLargePages()>
c00191f8:	59                   	pop    ecx
c00191f9:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019200:	74 07                	je     c0019209 <CPU::setupFeatures()+0x67>
c0019202:	52                   	push   edx
c0019203:	e8 5e ff ff ff       	call   c0019166 <CPU::setupGlobalPages()>
c0019208:	58                   	pop    eax
c0019209:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019210:	74 0c                	je     c001921e <CPU::setupFeatures()+0x7c>
c0019212:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019216:	83 c4 0c             	add    esp,0xc
c0019219:	e9 0a ff ff ff       	jmp    c0019128 <CPU::setupPAT()>
c001921e:	83 c4 0c             	add    esp,0xc
c0019221:	c3                   	ret    

c0019222 <CPU::open(int, int, void*)>:
c0019222:	57                   	push   edi
c0019223:	56                   	push   esi
c0019224:	53                   	push   ebx
c0019225:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019229:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001922d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019233:	83 ec 0c             	sub    esp,0xc
c0019236:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001923c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019242:	50                   	push   eax
c0019243:	e8 70 5c ff ff       	call   c000eeb8 <GDT::setup()>
c0019248:	83 c4 0c             	add    esp,0xc
c001924b:	6a 00                	push   0x0
c001924d:	68 ef be ad de       	push   0xdeadbeef
c0019252:	57                   	push   edi
c0019253:	e8 fe 7f ff ff       	call   c0011256 <TSS::setup(unsigned long, unsigned long)>
c0019258:	89 3c 24             	mov    DWORD PTR [esp],edi
c001925b:	e8 d6 7f ff ff       	call   c0011236 <TSS::flush()>
c0019260:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019266:	89 04 24             	mov    DWORD PTR [esp],eax
c0019269:	e8 a6 5e ff ff       	call   c000f114 <IDT::setup()>
c001926e:	b8 00 04 00 00       	mov    eax,0x400
c0019273:	0f 23 f8             	mov    db7,eax
c0019276:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019280:	e8 1e 6a ff ff       	call   c000fca3 <Phys::allocatePage()>
c0019285:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001928b:	89 30                	mov    DWORD PTR [eax],esi
c001928d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019293:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019296:	58                   	pop    eax
c0019297:	5a                   	pop    edx
c0019298:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001929e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00192a2:	e8 e1 8f ff ff       	call   c0012288 <VAS::setCPUSpecific(unsigned long)>
c00192a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00192aa:	e8 5f f4 ff ff       	call   c001870e <CPU::detectFeatures()>
c00192af:	e8 0e bf ff ff       	call   c00151c2 <setupInterruptController()>
c00192b4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00192ba:	a1 a0 cd 02 c0       	mov    eax,ds:0xc002cda0
c00192bf:	83 e0 10             	and    eax,0x10
c00192c2:	83 f8 01             	cmp    eax,0x1
c00192c5:	19 c0                	sbb    eax,eax
c00192c7:	83 e0 46             	and    eax,0x46
c00192ca:	83 c0 1e             	add    eax,0x1e
c00192cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00192d0:	e8 a5 d3 ff ff       	call   c001667a <setupTimer(int)>
c00192d5:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00192db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00192de:	e8 bf fe ff ff       	call   c00191a2 <CPU::setupFeatures()>
c00192e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00192e6:	e8 a7 f1 ff ff       	call   c0018492 <CPU::displayFeatures()>
c00192eb:	83 c4 10             	add    esp,0x10
c00192ee:	31 c0                	xor    eax,eax
c00192f0:	5b                   	pop    ebx
c00192f1:	5e                   	pop    esi
c00192f2:	5f                   	pop    edi
c00192f3:	c3                   	ret    

c00192f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00192f4:	57                   	push   edi
c00192f5:	56                   	push   esi
c00192f6:	53                   	push   ebx
c00192f7:	51                   	push   ecx
c00192f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00192fc:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00192ff:	0f 02 c0             	lar    eax,ax
c0019302:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019305:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019309:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001930c:	88 ca                	mov    dl,cl
c001930e:	c0 ea 06             	shr    dl,0x6
c0019311:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019315:	89 ca                	mov    edx,ecx
c0019317:	66 c1 ea 03          	shr    dx,0x3
c001931b:	83 e2 07             	and    edx,0x7
c001931e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019323:	88 17                	mov    BYTE PTR [edi],dl
c0019325:	0f 84 a6 01 00 00    	je     c00194d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001932b:	83 e1 07             	and    ecx,0x7
c001932e:	80 f9 04             	cmp    cl,0x4
c0019331:	0f 84 98 00 00 00    	je     c00193cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019337:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001933c:	0f 95 c0             	setne  al
c001933f:	80 f9 05             	cmp    cl,0x5
c0019342:	0f 95 c2             	setne  dl
c0019345:	08 c2                	or     dl,al
c0019347:	74 79                	je     c00193c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019349:	84 c9                	test   cl,cl
c001934b:	75 05                	jne    c0019352 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001934d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019350:	eb 3c                	jmp    c001938e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019352:	80 f9 01             	cmp    cl,0x1
c0019355:	75 05                	jne    c001935c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019357:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001935a:	eb 32                	jmp    c001938e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001935c:	80 f9 02             	cmp    cl,0x2
c001935f:	75 05                	jne    c0019366 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019361:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019364:	eb 28                	jmp    c001938e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019366:	31 c0                	xor    eax,eax
c0019368:	80 f9 03             	cmp    cl,0x3
c001936b:	75 05                	jne    c0019372 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001936d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019370:	eb 1c                	jmp    c001938e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019372:	80 f9 05             	cmp    cl,0x5
c0019375:	75 05                	jne    c001937c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019377:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001937a:	eb 12                	jmp    c001938e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001937c:	80 f9 06             	cmp    cl,0x6
c001937f:	75 05                	jne    c0019386 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019381:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019384:	eb 08                	jmp    c001938e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019386:	80 f9 07             	cmp    cl,0x7
c0019389:	75 03                	jne    c001938e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001938b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001938e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019393:	75 10                	jne    c00193a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019395:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019399:	b9 03 00 00 00       	mov    ecx,0x3
c001939e:	01 d0                	add    eax,edx
c00193a0:	e9 37 01 00 00       	jmp    c00194dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00193a5:	b9 02 00 00 00       	mov    ecx,0x2
c00193aa:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00193af:	0f 85 27 01 00 00    	jne    c00194dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00193b5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00193b8:	b9 06 00 00 00       	mov    ecx,0x6
c00193bd:	e9 1a 01 00 00       	jmp    c00194dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00193c2:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00193c5:	b9 06 00 00 00       	mov    ecx,0x6
c00193ca:	e9 0f 01 00 00       	jmp    c00194de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00193cf:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00193d2:	88 ca                	mov    dl,cl
c00193d4:	c0 ea 06             	shr    dl,0x6
c00193d7:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00193db:	89 ca                	mov    edx,ecx
c00193dd:	66 c1 ea 03          	shr    dx,0x3
c00193e1:	83 e2 07             	and    edx,0x7
c00193e4:	80 e1 07             	and    cl,0x7
c00193e7:	75 05                	jne    c00193ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00193e9:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00193ec:	eb 4c                	jmp    c001943a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00193ee:	80 f9 01             	cmp    cl,0x1
c00193f1:	75 05                	jne    c00193f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00193f3:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00193f6:	eb 42                	jmp    c001943a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00193f8:	80 f9 02             	cmp    cl,0x2
c00193fb:	75 05                	jne    c0019402 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00193fd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019400:	eb 38                	jmp    c001943a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019402:	80 f9 03             	cmp    cl,0x3
c0019405:	75 05                	jne    c001940c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019407:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001940a:	eb 2e                	jmp    c001943a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001940c:	80 f9 04             	cmp    cl,0x4
c001940f:	75 12                	jne    c0019423 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019411:	f6 c4 60             	test   ah,0x60
c0019414:	75 08                	jne    c001941e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019416:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019419:	8d 78 14             	lea    edi,[eax+0x14]
c001941c:	eb 1c                	jmp    c001943a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001941e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019421:	eb 17                	jmp    c001943a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019423:	80 f9 05             	cmp    cl,0x5
c0019426:	75 05                	jne    c001942d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019428:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001942b:	eb 0d                	jmp    c001943a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001942d:	80 f9 06             	cmp    cl,0x6
c0019430:	75 05                	jne    c0019437 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019432:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019435:	eb 03                	jmp    c001943a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019437:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001943a:	84 d2                	test   dl,dl
c001943c:	75 05                	jne    c0019443 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001943e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019441:	eb 3c                	jmp    c001947f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019443:	80 fa 01             	cmp    dl,0x1
c0019446:	75 05                	jne    c001944d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019448:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001944b:	eb 32                	jmp    c001947f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001944d:	80 fa 02             	cmp    dl,0x2
c0019450:	75 05                	jne    c0019457 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019452:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019455:	eb 28                	jmp    c001947f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019457:	80 fa 03             	cmp    dl,0x3
c001945a:	75 05                	jne    c0019461 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001945c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001945f:	eb 1e                	jmp    c001947f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019461:	31 c0                	xor    eax,eax
c0019463:	80 fa 04             	cmp    dl,0x4
c0019466:	74 17                	je     c001947f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019468:	80 fa 05             	cmp    dl,0x5
c001946b:	75 05                	jne    c0019472 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001946d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019470:	eb 0d                	jmp    c001947f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019472:	80 fa 06             	cmp    dl,0x6
c0019475:	75 05                	jne    c001947c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019477:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001947a:	eb 03                	jmp    c001947f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001947c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001947f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019484:	0f 94 c2             	sete   dl
c0019487:	80 f9 05             	cmp    cl,0x5
c001948a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001948e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019493:	d3 e0                	shl    eax,cl
c0019495:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019499:	74 0a                	je     c00194a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001949b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001949e:	b9 07 00 00 00       	mov    ecx,0x7
c00194a3:	eb 37                	jmp    c00194dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00194a5:	01 f8                	add    eax,edi
c00194a7:	b9 03 00 00 00       	mov    ecx,0x3
c00194ac:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00194b1:	74 2b                	je     c00194de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00194b3:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00194b8:	75 0d                	jne    c00194c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00194ba:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00194be:	01 c8                	add    eax,ecx
c00194c0:	b9 04 00 00 00       	mov    ecx,0x4
c00194c5:	eb 17                	jmp    c00194de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00194c7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00194ca:	b9 07 00 00 00       	mov    ecx,0x7
c00194cf:	eb 0d                	jmp    c00194de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00194d1:	b9 02 00 00 00       	mov    ecx,0x2
c00194d6:	b2 01                	mov    dl,0x1
c00194d8:	31 c0                	xor    eax,eax
c00194da:	eb 02                	jmp    c00194de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00194dc:	31 d2                	xor    edx,edx
c00194de:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00194e2:	89 0b                	mov    DWORD PTR [ebx],ecx
c00194e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00194e8:	88 11                	mov    BYTE PTR [ecx],dl
c00194ea:	5a                   	pop    edx
c00194eb:	5b                   	pop    ebx
c00194ec:	5e                   	pop    esi
c00194ed:	5f                   	pop    edi
c00194ee:	c3                   	ret    
c00194ef:	90                   	nop

c00194f0 <EnvVarContainer::getEnv(char const*)>:
c00194f0:	57                   	push   edi
c00194f1:	56                   	push   esi
c00194f2:	53                   	push   ebx
c00194f3:	31 db                	xor    ebx,ebx
c00194f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00194f9:	39 1e                	cmp    DWORD PTR [esi],ebx
c00194fb:	7e 2b                	jle    c0019528 <EnvVarContainer::getEnv(char const*)+0x38>
c00194fd:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019504:	50                   	push   eax
c0019505:	50                   	push   eax
c0019506:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019509:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001950c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019510:	e8 9f 72 fe ff       	call   c00007b4 <strcmp>
c0019515:	83 c4 10             	add    esp,0x10
c0019518:	85 c0                	test   eax,eax
c001951a:	75 09                	jne    c0019525 <EnvVarContainer::getEnv(char const*)+0x35>
c001951c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001951f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019523:	eb 05                	jmp    c001952a <EnvVarContainer::getEnv(char const*)+0x3a>
c0019525:	43                   	inc    ebx
c0019526:	eb d1                	jmp    c00194f9 <EnvVarContainer::getEnv(char const*)+0x9>
c0019528:	31 c0                	xor    eax,eax
c001952a:	5b                   	pop    ebx
c001952b:	5e                   	pop    esi
c001952c:	5f                   	pop    edi
c001952d:	c3                   	ret    

c001952e <EnvVarContainer::setEnv(char const*, char const*)>:
c001952e:	57                   	push   edi
c001952f:	56                   	push   esi
c0019530:	53                   	push   ebx
c0019531:	83 ec 1c             	sub    esp,0x1c
c0019534:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019538:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001953c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019540:	57                   	push   edi
c0019541:	e8 9b 71 fe ff       	call   c00006e1 <strlen>
c0019546:	40                   	inc    eax
c0019547:	89 04 24             	mov    DWORD PTR [esp],eax
c001954a:	e8 d5 60 ff ff       	call   c000f624 <malloc>
c001954f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019552:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019556:	e8 86 71 fe ff       	call   c00006e1 <strlen>
c001955b:	40                   	inc    eax
c001955c:	89 04 24             	mov    DWORD PTR [esp],eax
c001955f:	e8 c0 60 ff ff       	call   c000f624 <malloc>
c0019564:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001956b:	e8 71 71 fe ff       	call   c00006e1 <strlen>
c0019570:	83 c4 0c             	add    esp,0xc
c0019573:	40                   	inc    eax
c0019574:	50                   	push   eax
c0019575:	6a 00                	push   0x0
c0019577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001957b:	e8 44 71 fe ff       	call   c00006c4 <memset>
c0019580:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019583:	e8 59 71 fe ff       	call   c00006e1 <strlen>
c0019588:	83 c4 0c             	add    esp,0xc
c001958b:	40                   	inc    eax
c001958c:	50                   	push   eax
c001958d:	57                   	push   edi
c001958e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019592:	e8 09 71 fe ff       	call   c00006a0 <memcpy>
c0019597:	89 34 24             	mov    DWORD PTR [esp],esi
c001959a:	e8 42 71 fe ff       	call   c00006e1 <strlen>
c001959f:	83 c4 0c             	add    esp,0xc
c00195a2:	40                   	inc    eax
c00195a3:	50                   	push   eax
c00195a4:	6a 00                	push   0x0
c00195a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195aa:	e8 15 71 fe ff       	call   c00006c4 <memset>
c00195af:	89 34 24             	mov    DWORD PTR [esp],esi
c00195b2:	e8 2a 71 fe ff       	call   c00006e1 <strlen>
c00195b7:	83 c4 0c             	add    esp,0xc
c00195ba:	40                   	inc    eax
c00195bb:	50                   	push   eax
c00195bc:	56                   	push   esi
c00195bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195c1:	e8 da 70 fe ff       	call   c00006a0 <memcpy>
c00195c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195c8:	40                   	inc    eax
c00195c9:	89 03                	mov    DWORD PTR [ebx],eax
c00195cb:	c1 e0 03             	shl    eax,0x3
c00195ce:	5a                   	pop    edx
c00195cf:	59                   	pop    ecx
c00195d0:	50                   	push   eax
c00195d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00195d4:	e8 37 60 ff ff       	call   c000f610 <realloc>
c00195d9:	83 c4 0c             	add    esp,0xc
c00195dc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00195df:	6a 08                	push   0x8
c00195e1:	8d 54 24 10          	lea    edx,[esp+0x10]
c00195e5:	52                   	push   edx
c00195e6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00195e8:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00195ec:	50                   	push   eax
c00195ed:	e8 ae 70 fe ff       	call   c00006a0 <memcpy>
c00195f2:	83 c4 20             	add    esp,0x20
c00195f5:	5b                   	pop    ebx
c00195f6:	5e                   	pop    esi
c00195f7:	5f                   	pop    edi
c00195f8:	c3                   	ret    
c00195f9:	90                   	nop

c00195fa <EnvVarContainer::deleteEnv(char const*)>:
c00195fa:	c3                   	ret    
c00195fb:	90                   	nop

c00195fc <EnvVarContainer::loadFrom(char const*, char const*)>:
c00195fc:	55                   	push   ebp
c00195fd:	57                   	push   edi
c00195fe:	56                   	push   esi
c00195ff:	53                   	push   ebx
c0019600:	81 ec 38 01 00 00    	sub    esp,0x138
c0019606:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001960d:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019614:	68 14 01 00 00       	push   0x114
c0019619:	e8 06 60 ff ff       	call   c000f624 <malloc>
c001961e:	83 c4 0c             	add    esp,0xc
c0019621:	89 c7                	mov    edi,eax
c0019623:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019626:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001962d:	50                   	push   eax
c001962e:	e8 fb 97 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c0019633:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019636:	e8 c5 9a ff ff       	call   c0013100 <File::exists()>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	84 c0                	test   al,al
c0019640:	75 31                	jne    c0019673 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019642:	51                   	push   ecx
c0019643:	51                   	push   ecx
c0019644:	6a 12                	push   0x12
c0019646:	57                   	push   edi
c0019647:	e8 46 98 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001964c:	8b 07                	mov    eax,DWORD PTR [edi]
c001964e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019651:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019654:	e8 88 70 fe ff       	call   c00006e1 <strlen>
c0019659:	5a                   	pop    edx
c001965a:	31 d2                	xor    edx,edx
c001965c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019660:	51                   	push   ecx
c0019661:	55                   	push   ebp
c0019662:	52                   	push   edx
c0019663:	50                   	push   eax
c0019664:	57                   	push   edi
c0019665:	ff d3                	call   ebx
c0019667:	83 c4 14             	add    esp,0x14
c001966a:	57                   	push   edi
c001966b:	e8 80 98 ff ff       	call   c0012ef0 <File::close()>
c0019670:	83 c4 10             	add    esp,0x10
c0019673:	31 db                	xor    ebx,ebx
c0019675:	50                   	push   eax
c0019676:	31 ed                	xor    ebp,ebp
c0019678:	68 00 01 00 00       	push   0x100
c001967d:	6a 00                	push   0x0
c001967f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019683:	50                   	push   eax
c0019684:	e8 3b 70 fe ff       	call   c00006c4 <memset>
c0019689:	58                   	pop    eax
c001968a:	5a                   	pop    edx
c001968b:	6a 01                	push   0x1
c001968d:	57                   	push   edi
c001968e:	e8 ff 97 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c0019693:	83 c4 10             	add    esp,0x10
c0019696:	83 ec 0c             	sub    esp,0xc
c0019699:	8b 07                	mov    eax,DWORD PTR [edi]
c001969b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001969f:	51                   	push   ecx
c00196a0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00196a4:	52                   	push   edx
c00196a5:	6a 00                	push   0x0
c00196a7:	6a 01                	push   0x1
c00196a9:	57                   	push   edi
c00196aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00196ad:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00196b1:	83 c4 20             	add    esp,0x20
c00196b4:	3c 0d                	cmp    al,0xd
c00196b6:	0f 84 12 01 00 00    	je     c00197ce <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00196bc:	85 db                	test   ebx,ebx
c00196be:	0f 84 fd 00 00 00    	je     c00197c1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00196c4:	3c 0a                	cmp    al,0xa
c00196c6:	74 13                	je     c00196db <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00196c8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00196cd:	74 0c                	je     c00196db <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00196cf:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00196d5:	0f 8e e6 00 00 00    	jle    c00197c1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00196db:	83 ec 0c             	sub    esp,0xc
c00196de:	8d 53 01             	lea    edx,[ebx+0x1]
c00196e1:	29 dd                	sub    ebp,ebx
c00196e3:	52                   	push   edx
c00196e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00196e8:	e8 37 5f ff ff       	call   c000f624 <malloc>
c00196ed:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00196f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00196f4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00196f7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00196fb:	e8 24 5f ff ff       	call   c000f624 <malloc>
c0019700:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019704:	83 c4 0c             	add    esp,0xc
c0019707:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001970b:	52                   	push   edx
c001970c:	6a 00                	push   0x0
c001970e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019712:	e8 ad 6f fe ff       	call   c00006c4 <memset>
c0019717:	83 c4 0c             	add    esp,0xc
c001971a:	53                   	push   ebx
c001971b:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001971f:	55                   	push   ebp
c0019720:	01 eb                	add    ebx,ebp
c0019722:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019726:	e8 75 6f fe ff       	call   c00006a0 <memcpy>
c001972b:	83 c4 0c             	add    esp,0xc
c001972e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019732:	51                   	push   ecx
c0019733:	6a 00                	push   0x0
c0019735:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019739:	e8 86 6f fe ff       	call   c00006c4 <memset>
c001973e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019741:	e8 9b 6f fe ff       	call   c00006e1 <strlen>
c0019746:	83 c4 0c             	add    esp,0xc
c0019749:	50                   	push   eax
c001974a:	53                   	push   ebx
c001974b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001974f:	e8 4c 6f fe ff       	call   c00006a0 <memcpy>
c0019754:	5b                   	pop    ebx
c0019755:	58                   	pop    eax
c0019756:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001975a:	68 2c a5 02 c0       	push   0xc002a52c
c001975f:	e8 71 91 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019764:	8b 06                	mov    eax,DWORD PTR [esi]
c0019766:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019769:	40                   	inc    eax
c001976a:	83 c4 10             	add    esp,0x10
c001976d:	89 06                	mov    DWORD PTR [esi],eax
c001976f:	85 d2                	test   edx,edx
c0019771:	75 0c                	jne    c001977f <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019773:	83 ec 0c             	sub    esp,0xc
c0019776:	6a 08                	push   0x8
c0019778:	e8 a7 5e ff ff       	call   c000f624 <malloc>
c001977d:	eb 0c                	jmp    c001978b <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001977f:	c1 e0 03             	shl    eax,0x3
c0019782:	51                   	push   ecx
c0019783:	51                   	push   ecx
c0019784:	50                   	push   eax
c0019785:	52                   	push   edx
c0019786:	e8 85 5e ff ff       	call   c000f610 <realloc>
c001978b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001978e:	83 c4 10             	add    esp,0x10
c0019791:	31 db                	xor    ebx,ebx
c0019793:	52                   	push   edx
c0019794:	6a 08                	push   0x8
c0019796:	8d 44 24 20          	lea    eax,[esp+0x20]
c001979a:	50                   	push   eax
c001979b:	8b 16                	mov    edx,DWORD PTR [esi]
c001979d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00197a0:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00197a4:	50                   	push   eax
c00197a5:	e8 f6 6e fe ff       	call   c00006a0 <memcpy>
c00197aa:	83 c4 0c             	add    esp,0xc
c00197ad:	68 00 01 00 00       	push   0x100
c00197b2:	6a 00                	push   0x0
c00197b4:	55                   	push   ebp
c00197b5:	31 ed                	xor    ebp,ebp
c00197b7:	e8 08 6f fe ff       	call   c00006c4 <memset>
c00197bc:	83 c4 10             	add    esp,0x10
c00197bf:	eb 0d                	jmp    c00197ce <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00197c1:	3c 3d                	cmp    al,0x3d
c00197c3:	74 07                	je     c00197cc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00197c5:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00197c9:	45                   	inc    ebp
c00197ca:	eb 02                	jmp    c00197ce <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00197cc:	89 eb                	mov    ebx,ebp
c00197ce:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00197d3:	0f 85 bd fe ff ff    	jne    c0019696 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00197d9:	50                   	push   eax
c00197da:	50                   	push   eax
c00197db:	ff 36                	push   DWORD PTR [esi]
c00197dd:	68 3a a5 02 c0       	push   0xc002a53a
c00197e2:	e8 ee 90 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00197e7:	81 c4 3c 01 00 00    	add    esp,0x13c
c00197ed:	5b                   	pop    ebx
c00197ee:	5e                   	pop    esi
c00197ef:	5f                   	pop    edi
c00197f0:	5d                   	pop    ebp
c00197f1:	c3                   	ret    

c00197f2 <EnvVarContainer::__loadSystem()>:
c00197f2:	83 ec 10             	sub    esp,0x10
c00197f5:	68 c0 c2 02 c0       	push   0xc002c2c0
c00197fa:	68 65 a5 02 c0       	push   0xc002a565
c00197ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019803:	e8 f4 fd ff ff       	call   c00195fc <EnvVarContainer::loadFrom(char const*, char const*)>
c0019808:	83 c4 1c             	add    esp,0x1c
c001980b:	c3                   	ret    

c001980c <EnvVarContainer::__loadUser()>:
c001980c:	c3                   	ret    
c001980d:	90                   	nop

c001980e <EnvVarContainer::EnvVarContainer(Process*)>:
c001980e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019812:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001981c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019820:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019827:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001982e:	90                   	nop
c001982f:	c3                   	ret    

c0019830 <EnvVarContainer::~EnvVarContainer()>:
c0019830:	83 ec 0c             	sub    esp,0xc
c0019833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019837:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001983a:	85 c0                	test   eax,eax
c001983c:	74 1d                	je     c001985b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001983e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019842:	8b 00                	mov    eax,DWORD PTR [eax]
c0019844:	85 c0                	test   eax,eax
c0019846:	74 13                	je     c001985b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001984c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001984f:	83 ec 0c             	sub    esp,0xc
c0019852:	50                   	push   eax
c0019853:	e8 dc 5d ff ff       	call   c000f634 <free>
c0019858:	83 c4 10             	add    esp,0x10
c001985b:	90                   	nop
c001985c:	83 c4 0c             	add    esp,0xc
c001985f:	c3                   	ret    

c0019860 <Krnl::getEnv(Process*, char const*)>:
c0019860:	53                   	push   ebx
c0019861:	83 ec 08             	sub    esp,0x8
c0019864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019868:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001986c:	39 05 d4 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2d4,eax
c0019872:	74 04                	je     c0019878 <Krnl::getEnv(Process*, char const*)+0x18>
c0019874:	85 c0                	test   eax,eax
c0019876:	75 0b                	jne    c0019883 <Krnl::getEnv(Process*, char const*)+0x23>
c0019878:	a1 b0 d8 02 c0       	mov    eax,ds:0xc002d8b0
c001987d:	85 c0                	test   eax,eax
c001987f:	75 19                	jne    c001989a <Krnl::getEnv(Process*, char const*)+0x3a>
c0019881:	eb 27                	jmp    c00198aa <Krnl::getEnv(Process*, char const*)+0x4a>
c0019883:	52                   	push   edx
c0019884:	52                   	push   edx
c0019885:	53                   	push   ebx
c0019886:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001988c:	e8 5f fc ff ff       	call   c00194f0 <EnvVarContainer::getEnv(char const*)>
c0019891:	83 c4 10             	add    esp,0x10
c0019894:	85 c0                	test   eax,eax
c0019896:	75 28                	jne    c00198c0 <Krnl::getEnv(Process*, char const*)+0x60>
c0019898:	eb de                	jmp    c0019878 <Krnl::getEnv(Process*, char const*)+0x18>
c001989a:	52                   	push   edx
c001989b:	52                   	push   edx
c001989c:	53                   	push   ebx
c001989d:	50                   	push   eax
c001989e:	e8 4d fc ff ff       	call   c00194f0 <EnvVarContainer::getEnv(char const*)>
c00198a3:	83 c4 10             	add    esp,0x10
c00198a6:	85 c0                	test   eax,eax
c00198a8:	75 16                	jne    c00198c0 <Krnl::getEnv(Process*, char const*)+0x60>
c00198aa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00198ae:	a1 b4 d8 02 c0       	mov    eax,ds:0xc002d8b4
c00198b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00198b7:	83 c4 08             	add    esp,0x8
c00198ba:	5b                   	pop    ebx
c00198bb:	e9 30 fc ff ff       	jmp    c00194f0 <EnvVarContainer::getEnv(char const*)>
c00198c0:	83 c4 08             	add    esp,0x8
c00198c3:	5b                   	pop    ebx
c00198c4:	c3                   	ret    

c00198c5 <Krnl::setEnvSystem(char const*, char const*)>:
c00198c5:	83 ec 10             	sub    esp,0x10
c00198c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00198cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00198d0:	ff 35 b4 d8 02 c0    	push   DWORD PTR ds:0xc002d8b4
c00198d6:	e8 53 fc ff ff       	call   c001952e <EnvVarContainer::setEnv(char const*, char const*)>
c00198db:	83 c4 1c             	add    esp,0x1c
c00198de:	c3                   	ret    

c00198df <Krnl::setEnvUser(char const*, char const*)>:
c00198df:	a1 b0 d8 02 c0       	mov    eax,ds:0xc002d8b0
c00198e4:	85 c0                	test   eax,eax
c00198e6:	74 15                	je     c00198fd <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00198e8:	83 ec 10             	sub    esp,0x10
c00198eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00198ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00198f3:	50                   	push   eax
c00198f4:	e8 35 fc ff ff       	call   c001952e <EnvVarContainer::setEnv(char const*, char const*)>
c00198f9:	83 c4 1c             	add    esp,0x1c
c00198fc:	c3                   	ret    
c00198fd:	c3                   	ret    

c00198fe <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00198fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019902:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019908:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001990c:	e9 1d fc ff ff       	jmp    c001952e <EnvVarContainer::setEnv(char const*, char const*)>

c0019911 <Krnl::deleteEnvSystem(char const*)>:
c0019911:	c3                   	ret    

c0019912 <Krnl::deleteEnvUser(char const*)>:
c0019912:	c3                   	ret    

c0019913 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019913:	c3                   	ret    

c0019914 <Krnl::newProcessEnv(Process*)>:
c0019914:	83 ec 28             	sub    esp,0x28
c0019917:	6a 0c                	push   0xc
c0019919:	e8 06 5d ff ff       	call   c000f624 <malloc>
c001991e:	5a                   	pop    edx
c001991f:	59                   	pop    ecx
c0019920:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019924:	50                   	push   eax
c0019925:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019929:	e8 e0 fe ff ff       	call   c001980e <EnvVarContainer::EnvVarContainer(Process*)>
c001992e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019932:	83 c4 2c             	add    esp,0x2c
c0019935:	c3                   	ret    

c0019936 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019936:	56                   	push   esi
c0019937:	53                   	push   ebx
c0019938:	83 ec 10             	sub    esp,0x10
c001993b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001993f:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019945:	6a 0c                	push   0xc
c0019947:	e8 d8 5c ff ff       	call   c000f624 <malloc>
c001994c:	89 c3                	mov    ebx,eax
c001994e:	58                   	pop    eax
c001994f:	5a                   	pop    edx
c0019950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019954:	53                   	push   ebx
c0019955:	e8 b4 fe ff ff       	call   c001980e <EnvVarContainer::EnvVarContainer(Process*)>
c001995a:	8b 06                	mov    eax,DWORD PTR [esi]
c001995c:	89 03                	mov    DWORD PTR [ebx],eax
c001995e:	c1 e0 03             	shl    eax,0x3
c0019961:	89 04 24             	mov    DWORD PTR [esp],eax
c0019964:	e8 bb 5c ff ff       	call   c000f624 <malloc>
c0019969:	83 c4 0c             	add    esp,0xc
c001996c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001996f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019971:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019978:	52                   	push   edx
c0019979:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001997c:	50                   	push   eax
c001997d:	e8 1e 6d fe ff       	call   c00006a0 <memcpy>
c0019982:	89 d8                	mov    eax,ebx
c0019984:	83 c4 14             	add    esp,0x14
c0019987:	5b                   	pop    ebx
c0019988:	5e                   	pop    esi
c0019989:	c3                   	ret    

c001998a <Krnl::loadSystemEnv()>:
c001998a:	53                   	push   ebx
c001998b:	83 ec 14             	sub    esp,0x14
c001998e:	6a 0c                	push   0xc
c0019990:	e8 8f 5c ff ff       	call   c000f624 <malloc>
c0019995:	89 c3                	mov    ebx,eax
c0019997:	58                   	pop    eax
c0019998:	5a                   	pop    edx
c0019999:	ff 35 d4 e2 02 c0    	push   DWORD PTR ds:0xc002e2d4
c001999f:	53                   	push   ebx
c00199a0:	e8 69 fe ff ff       	call   c001980e <EnvVarContainer::EnvVarContainer(Process*)>
c00199a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199a8:	89 1d b4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8b4,ebx
c00199ae:	e8 3f fe ff ff       	call   c00197f2 <EnvVarContainer::__loadSystem()>
c00199b3:	83 c4 18             	add    esp,0x18
c00199b6:	5b                   	pop    ebx
c00199b7:	c3                   	ret    

c00199b8 <Krnl::loadUserEnv()>:
c00199b8:	53                   	push   ebx
c00199b9:	83 ec 14             	sub    esp,0x14
c00199bc:	6a 0c                	push   0xc
c00199be:	e8 61 5c ff ff       	call   c000f624 <malloc>
c00199c3:	89 c3                	mov    ebx,eax
c00199c5:	58                   	pop    eax
c00199c6:	5a                   	pop    edx
c00199c7:	ff 35 d4 e2 02 c0    	push   DWORD PTR ds:0xc002e2d4
c00199cd:	53                   	push   ebx
c00199ce:	e8 3b fe ff ff       	call   c001980e <EnvVarContainer::EnvVarContainer(Process*)>
c00199d3:	89 1d b0 d8 02 c0    	mov    DWORD PTR ds:0xc002d8b0,ebx
c00199d9:	83 c4 18             	add    esp,0x18
c00199dc:	5b                   	pop    ebx
c00199dd:	c3                   	ret    

c00199de <Krnl::flushEnv()>:
c00199de:	c3                   	ret    

c00199df <Krnl::getProcessTotalEnvCount(Process*)>:
c00199df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199e3:	8b 15 b0 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8b0
c00199e9:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c00199ef:	a1 b4 d8 02 c0       	mov    eax,ds:0xc002d8b4
c00199f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00199f6:	03 01                	add    eax,DWORD PTR [ecx]
c00199f8:	85 d2                	test   edx,edx
c00199fa:	74 02                	je     c00199fe <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00199fc:	03 02                	add    eax,DWORD PTR [edx]
c00199fe:	c3                   	ret    

c00199ff <Krnl::getProcessEnvPair(Process*, int)>:
c00199ff:	57                   	push   edi
c0019a00:	8b 0d b0 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8b0
c0019a06:	56                   	push   esi
c0019a07:	85 c9                	test   ecx,ecx
c0019a09:	53                   	push   ebx
c0019a0a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019a0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a12:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019a18:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019a1c:	8b 02                	mov    eax,DWORD PTR [edx]
c0019a1e:	75 47                	jne    c0019a67 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019a20:	39 c3                	cmp    ebx,eax
c0019a22:	7c 47                	jl     c0019a6b <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019a24:	8b 15 b4 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8b4
c0019a2a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019a2c:	01 c1                	add    ecx,eax
c0019a2e:	39 d9                	cmp    ecx,ebx
c0019a30:	7e 6c                	jle    c0019a9e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019a32:	51                   	push   ecx
c0019a33:	89 d9                	mov    ecx,ebx
c0019a35:	29 c1                	sub    ecx,eax
c0019a37:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019a3a:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019a3e:	53                   	push   ebx
c0019a3f:	68 87 a5 02 c0       	push   0xc002a587
c0019a44:	e8 8c 8e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019a49:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019a4f:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019a51:	a1 b4 d8 02 c0       	mov    eax,ds:0xc002d8b4
c0019a56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a59:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019a5d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019a60:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019a63:	89 06                	mov    DWORD PTR [esi],eax
c0019a65:	eb 51                	jmp    c0019ab8 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019a67:	39 c3                	cmp    ebx,eax
c0019a69:	7d 05                	jge    c0019a70 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019a6b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019a6e:	eb 20                	jmp    c0019a90 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019a70:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019a72:	8d 14 07             	lea    edx,[edi+eax*1]
c0019a75:	39 da                	cmp    edx,ebx
c0019a77:	7e 04                	jle    c0019a7d <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019a79:	29 c3                	sub    ebx,eax
c0019a7b:	eb 10                	jmp    c0019a8d <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019a7d:	8b 0d b4 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8b4
c0019a83:	03 11                	add    edx,DWORD PTR [ecx]
c0019a85:	39 da                	cmp    edx,ebx
c0019a87:	7e 15                	jle    c0019a9e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019a89:	29 c3                	sub    ebx,eax
c0019a8b:	29 fb                	sub    ebx,edi
c0019a8d:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019a90:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019a94:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019a97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019a9a:	89 06                	mov    DWORD PTR [esi],eax
c0019a9c:	eb 1d                	jmp    c0019abb <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019a9e:	83 ec 0c             	sub    esp,0xc
c0019aa1:	68 9b a5 02 c0       	push   0xc002a59b
c0019aa6:	e8 18 00 00 00       	call   c0019ac3 <Krnl::panic(char const*)>
c0019aab:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019ab1:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	89 f0                	mov    eax,esi
c0019abd:	5b                   	pop    ebx
c0019abe:	5e                   	pop    esi
c0019abf:	5f                   	pop    edi
c0019ac0:	c2 04 00             	ret    0x4

c0019ac3 <Krnl::panic(char const*)>:
c0019ac3:	55                   	push   ebp
c0019ac4:	89 e5                	mov    ebp,esp
c0019ac6:	53                   	push   ebx
c0019ac7:	50                   	push   eax
c0019ac8:	a1 bc d8 02 c0       	mov    eax,ds:0xc002d8bc
c0019acd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019ad0:	85 c0                	test   eax,eax
c0019ad2:	74 02                	je     c0019ad6 <Krnl::panic(char const*)+0x13>
c0019ad4:	ff d0                	call   eax
c0019ad6:	fa                   	cli    
c0019ad7:	c6 05 c0 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d8c0,0x1
c0019ade:	83 ec 08             	sub    esp,0x8
c0019ae1:	c6 05 c4 bc 02 c0 00 	mov    BYTE PTR ds:0xc002bcc4,0x0
c0019ae8:	53                   	push   ebx
c0019ae9:	68 b5 a5 02 c0       	push   0xc002a5b5
c0019aee:	e8 e2 8d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019af3:	58                   	pop    eax
c0019af4:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019af9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aff:	e8 93 6f ff ff       	call   c0010a97 <setActiveTerminal(VgaText*)>
c0019b04:	83 c4 0c             	add    esp,0xc
c0019b07:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019b0c:	6a 01                	push   0x1
c0019b0e:	6a 0f                	push   0xf
c0019b10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b16:	e8 ad 69 ff ff       	call   c00104c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019b1b:	5a                   	pop    edx
c0019b1c:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019b21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b27:	e8 0c 72 ff ff       	call   c0010d38 <VgaText::clearScreen()>
c0019b2c:	59                   	pop    ecx
c0019b2d:	58                   	pop    eax
c0019b2e:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019b33:	68 ce a5 02 c0       	push   0xc002a5ce
c0019b38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b3e:	e8 73 73 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019b43:	58                   	pop    eax
c0019b44:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019b49:	5a                   	pop    edx
c0019b4a:	68 74 a6 02 c0       	push   0xc002a674
c0019b4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b55:	e8 5c 73 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019b5a:	59                   	pop    ecx
c0019b5b:	58                   	pop    eax
c0019b5c:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019b61:	68 ea a5 02 c0       	push   0xc002a5ea
c0019b66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b6c:	e8 45 73 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019b71:	58                   	pop    eax
c0019b72:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019b77:	5a                   	pop    edx
c0019b78:	53                   	push   ebx
c0019b79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b7f:	e8 32 73 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019b84:	59                   	pop    ecx
c0019b85:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019b8a:	5b                   	pop    ebx
c0019b8b:	68 0a a6 02 c0       	push   0xc002a60a
c0019b90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b96:	e8 1b 73 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019b9b:	58                   	pop    eax
c0019b9c:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019ba1:	5a                   	pop    edx
c0019ba2:	68 b0 a6 02 c0       	push   0xc002a6b0
c0019ba7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bad:	e8 04 73 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019bb2:	59                   	pop    ecx
c0019bb3:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019bb8:	5b                   	pop    ebx
c0019bb9:	68 ea a5 02 c0       	push   0xc002a5ea
c0019bbe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bc4:	e8 ed 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019bc9:	58                   	pop    eax
c0019bca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bcf:	5a                   	pop    edx
c0019bd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019bd3:	83 c0 0c             	add    eax,0xc
c0019bd6:	50                   	push   eax
c0019bd7:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019bdc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019be2:	e8 cf 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019be7:	59                   	pop    ecx
c0019be8:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019bed:	5b                   	pop    ebx
c0019bee:	68 09 a6 02 c0       	push   0xc002a609
c0019bf3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bf9:	e8 b8 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019bfe:	58                   	pop    eax
c0019bff:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019c04:	5a                   	pop    edx
c0019c05:	68 dc a6 02 c0       	push   0xc002a6dc
c0019c0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c10:	e8 a1 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019c15:	59                   	pop    ecx
c0019c16:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019c1b:	5b                   	pop    ebx
c0019c1c:	68 1c a7 02 c0       	push   0xc002a71c
c0019c21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c27:	e8 8a 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019c2c:	58                   	pop    eax
c0019c2d:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019c32:	5a                   	pop    edx
c0019c33:	68 f5 a5 02 c0       	push   0xc002a5f5
c0019c38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c3e:	e8 73 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019c43:	59                   	pop    ecx
c0019c44:	5b                   	pop    ebx
c0019c45:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019c48:	68 0d a6 02 c0       	push   0xc002a60d
c0019c4d:	e8 83 8c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019c52:	58                   	pop    eax
c0019c53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019c56:	5a                   	pop    edx
c0019c57:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019c5a:	68 16 a6 02 c0       	push   0xc002a616
c0019c5f:	e8 71 8c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019c64:	59                   	pop    ecx
c0019c65:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019c68:	5b                   	pop    ebx
c0019c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c6b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019c6e:	68 1f a6 02 c0       	push   0xc002a61f
c0019c73:	e8 5d 8c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019c78:	58                   	pop    eax
c0019c79:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019c7e:	5a                   	pop    edx
c0019c7f:	68 60 a7 02 c0       	push   0xc002a760
c0019c84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c8a:	e8 27 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019c8f:	59                   	pop    ecx
c0019c90:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019c95:	5b                   	pop    ebx
c0019c96:	68 28 a6 02 c0       	push   0xc002a628
c0019c9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ca1:	e8 10 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019ca6:	0f 20 c0             	mov    eax,cr0
c0019ca9:	5a                   	pop    edx
c0019caa:	59                   	pop    ecx
c0019cab:	50                   	push   eax
c0019cac:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019cb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cb7:	e8 20 72 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019cbc:	5b                   	pop    ebx
c0019cbd:	58                   	pop    eax
c0019cbe:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019cc3:	68 32 a6 02 c0       	push   0xc002a632
c0019cc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cce:	e8 e3 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019cd3:	0f 20 d0             	mov    eax,cr2
c0019cd6:	5a                   	pop    edx
c0019cd7:	59                   	pop    ecx
c0019cd8:	50                   	push   eax
c0019cd9:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019cde:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ce4:	e8 f3 71 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019ce9:	5b                   	pop    ebx
c0019cea:	58                   	pop    eax
c0019ceb:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019cf0:	68 3c a6 02 c0       	push   0xc002a63c
c0019cf5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cfb:	e8 b6 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019d00:	0f 20 d8             	mov    eax,cr3
c0019d03:	5a                   	pop    edx
c0019d04:	59                   	pop    ecx
c0019d05:	50                   	push   eax
c0019d06:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019d0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d11:	e8 c6 71 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019d16:	5b                   	pop    ebx
c0019d17:	58                   	pop    eax
c0019d18:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019d1d:	68 4f a6 02 c0       	push   0xc002a64f
c0019d22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d28:	e8 89 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019d2d:	0f 20 e0             	mov    eax,cr4
c0019d30:	5a                   	pop    edx
c0019d31:	59                   	pop    ecx
c0019d32:	50                   	push   eax
c0019d33:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019d38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d3e:	e8 99 71 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019d43:	5b                   	pop    ebx
c0019d44:	58                   	pop    eax
c0019d45:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019d4a:	68 59 a6 02 c0       	push   0xc002a659
c0019d4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d55:	e8 5c 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019d5a:	5a                   	pop    edx
c0019d5b:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019d60:	59                   	pop    ecx
c0019d61:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019d67:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d6a:	50                   	push   eax
c0019d6b:	e8 6c 71 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019d70:	5b                   	pop    ebx
c0019d71:	58                   	pop    eax
c0019d72:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019d77:	68 70 a6 02 c0       	push   0xc002a670
c0019d7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d82:	e8 2f 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019d87:	5a                   	pop    edx
c0019d88:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019d8d:	59                   	pop    ecx
c0019d8e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019d94:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019d97:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019d9a:	50                   	push   eax
c0019d9b:	e8 3c 71 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019da0:	5b                   	pop    ebx
c0019da1:	58                   	pop    eax
c0019da2:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019da7:	68 70 a6 02 c0       	push   0xc002a670
c0019dac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019db2:	e8 ff 70 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019db7:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0019dbc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019dbf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019dc5:	8b 12                	mov    edx,DWORD PTR [edx]
c0019dc7:	59                   	pop    ecx
c0019dc8:	5b                   	pop    ebx
c0019dc9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019dcc:	50                   	push   eax
c0019dcd:	e8 0a 71 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019dd2:	83 c4 10             	add    esp,0x10
c0019dd5:	b2 fe                	mov    dl,0xfe
c0019dd7:	e4 60                	in     al,0x60
c0019dd9:	3c 1c                	cmp    al,0x1c
c0019ddb:	74 04                	je     c0019de1 <Krnl::panic(char const*)+0x31e>
c0019ddd:	3c 5a                	cmp    al,0x5a
c0019ddf:	75 f6                	jne    c0019dd7 <Krnl::panic(char const*)+0x314>
c0019de1:	e4 64                	in     al,0x64
c0019de3:	a8 02                	test   al,0x2
c0019de5:	75 fa                	jne    c0019de1 <Krnl::panic(char const*)+0x31e>
c0019de7:	88 d0                	mov    al,dl
c0019de9:	e6 64                	out    0x64,al
c0019deb:	fa                   	cli    
c0019dec:	f4                   	hlt    
c0019ded:	eb e8                	jmp    c0019dd7 <Krnl::panic(char const*)+0x314>

c0019def <Net::switchEndian16(unsigned short)>:
c0019def:	83 ec 04             	sub    esp,0x4
c0019df2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019df6:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019dfa:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019dfe:	c1 f8 08             	sar    eax,0x8
c0019e01:	89 c2                	mov    edx,eax
c0019e03:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019e07:	c1 e0 08             	shl    eax,0x8
c0019e0a:	09 d0                	or     eax,edx
c0019e0c:	83 c4 04             	add    esp,0x4
c0019e0f:	c3                   	ret    

c0019e10 <Net::switchEndian32(unsigned int)>:
c0019e10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e14:	c1 e8 18             	shr    eax,0x18
c0019e17:	89 c2                	mov    edx,eax
c0019e19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e1d:	c1 e0 08             	shl    eax,0x8
c0019e20:	25 00 00 ff 00       	and    eax,0xff0000
c0019e25:	09 c2                	or     edx,eax
c0019e27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e2b:	c1 e8 08             	shr    eax,0x8
c0019e2e:	25 00 ff 00 00       	and    eax,0xff00
c0019e33:	09 c2                	or     edx,eax
c0019e35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e39:	c1 e0 18             	shl    eax,0x18
c0019e3c:	09 d0                	or     eax,edx
c0019e3e:	c3                   	ret    

c0019e3f <Net::crc32Calc(unsigned char*, int)>:
c0019e3f:	83 ec 10             	sub    esp,0x10
c0019e42:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019e47:	75 07                	jne    c0019e50 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019e49:	b8 00 00 00 00       	mov    eax,0x0
c0019e4e:	eb 7c                	jmp    c0019ecc <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019e50:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019e55:	7f 07                	jg     c0019e5e <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019e57:	b8 00 00 00 00       	mov    eax,0x0
c0019e5c:	eb 6e                	jmp    c0019ecc <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019e5e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019e66:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019e6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e72:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019e76:	7d 4e                	jge    c0019ec6 <Net::crc32Calc(unsigned char*, int)+0x87>
c0019e78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e80:	01 d0                	add    eax,edx
c0019e82:	8a 00                	mov    al,BYTE PTR [eax]
c0019e84:	0f b6 c0             	movzx  eax,al
c0019e87:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019e8b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019e93:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019e98:	7f 26                	jg     c0019ec0 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e9e:	83 e0 01             	and    eax,0x1
c0019ea1:	74 0d                	je     c0019eb0 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019ea3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ea7:	d1 e8                	shr    eax,1
c0019ea9:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019eae:	eb 06                	jmp    c0019eb6 <Net::crc32Calc(unsigned char*, int)+0x77>
c0019eb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019eb4:	d1 e8                	shr    eax,1
c0019eb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019eba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019ebe:	eb d3                	jmp    c0019e93 <Net::crc32Calc(unsigned char*, int)+0x54>
c0019ec0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019ec4:	eb a8                	jmp    c0019e6e <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019ec6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019eca:	f7 d0                	not    eax
c0019ecc:	83 c4 10             	add    esp,0x10
c0019ecf:	c3                   	ret    

c0019ed0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019ed0:	83 ec 1c             	sub    esp,0x1c
c0019ed3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019edb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ee3:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019ee8:	7f 14                	jg     c0019efe <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019eea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019eee:	8d 50 01             	lea    edx,[eax+0x1]
c0019ef1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ef5:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019ef8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019efc:	eb e5                	jmp    c0019ee3 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019efe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f02:	8d 50 01             	lea    edx,[eax+0x1]
c0019f05:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019f09:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019f0c:	83 ec 04             	sub    esp,0x4
c0019f0f:	6a 06                	push   0x6
c0019f11:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019f15:	50                   	push   eax
c0019f16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019f1a:	e8 81 67 fe ff       	call   c00006a0 <memcpy>
c0019f1f:	83 c4 10             	add    esp,0x10
c0019f22:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019f27:	83 ec 04             	sub    esp,0x4
c0019f2a:	6a 06                	push   0x6
c0019f2c:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019f30:	50                   	push   eax
c0019f31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019f35:	e8 66 67 fe ff       	call   c00006a0 <memcpy>
c0019f3a:	83 c4 10             	add    esp,0x10
c0019f3d:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019f42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f46:	0f b7 c0             	movzx  eax,ax
c0019f49:	c1 f8 08             	sar    eax,0x8
c0019f4c:	89 c1                	mov    ecx,eax
c0019f4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f52:	8d 50 01             	lea    edx,[eax+0x1]
c0019f55:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019f59:	88 ca                	mov    dl,cl
c0019f5b:	88 10                	mov    BYTE PTR [eax],dl
c0019f5d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019f61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f65:	8d 48 01             	lea    ecx,[eax+0x1]
c0019f68:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019f6c:	88 10                	mov    BYTE PTR [eax],dl
c0019f6e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f76:	83 ec 04             	sub    esp,0x4
c0019f79:	52                   	push   edx
c0019f7a:	50                   	push   eax
c0019f7b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019f7f:	e8 1c 67 fe ff       	call   c00006a0 <memcpy>
c0019f84:	83 c4 10             	add    esp,0x10
c0019f87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019f8b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019f8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f93:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019f97:	83 ec 08             	sub    esp,0x8
c0019f9a:	50                   	push   eax
c0019f9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f9f:	e8 9b fe ff ff       	call   c0019e3f <Net::crc32Calc(unsigned char*, int)>
c0019fa4:	83 c4 10             	add    esp,0x10
c0019fa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019faf:	c1 e8 18             	shr    eax,0x18
c0019fb2:	89 c1                	mov    ecx,eax
c0019fb4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fb8:	8d 50 01             	lea    edx,[eax+0x1]
c0019fbb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019fbf:	88 ca                	mov    dl,cl
c0019fc1:	88 10                	mov    BYTE PTR [eax],dl
c0019fc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fc7:	c1 e8 10             	shr    eax,0x10
c0019fca:	89 c1                	mov    ecx,eax
c0019fcc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fd0:	8d 50 01             	lea    edx,[eax+0x1]
c0019fd3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019fd7:	88 ca                	mov    dl,cl
c0019fd9:	88 10                	mov    BYTE PTR [eax],dl
c0019fdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fdf:	c1 e8 08             	shr    eax,0x8
c0019fe2:	89 c1                	mov    ecx,eax
c0019fe4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fe8:	8d 50 01             	lea    edx,[eax+0x1]
c0019feb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019fef:	88 ca                	mov    dl,cl
c0019ff1:	88 10                	mov    BYTE PTR [eax],dl
c0019ff3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ff7:	8d 50 01             	lea    edx,[eax+0x1]
c0019ffa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ffe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a002:	88 10                	mov    BYTE PTR [eax],dl
c001a004:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a008:	83 c4 1c             	add    esp,0x1c
c001a00b:	c3                   	ret    

c001a00c <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a00c:	83 ec 2c             	sub    esp,0x2c
c001a00f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a013:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a017:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a01c:	83 ec 04             	sub    esp,0x4
c001a01f:	6a 06                	push   0x6
c001a021:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a025:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a029:	83 c0 0e             	add    eax,0xe
c001a02c:	50                   	push   eax
c001a02d:	e8 6e 66 fe ff       	call   c00006a0 <memcpy>
c001a032:	83 c4 10             	add    esp,0x10
c001a035:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a03a:	83 ec 04             	sub    esp,0x4
c001a03d:	6a 06                	push   0x6
c001a03f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a043:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a047:	83 c0 08             	add    eax,0x8
c001a04a:	50                   	push   eax
c001a04b:	e8 50 66 fe ff       	call   c00006a0 <memcpy>
c001a050:	83 c4 10             	add    esp,0x10
c001a053:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a058:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a05c:	8d 50 01             	lea    edx,[eax+0x1]
c001a05f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a063:	8a 00                	mov    al,BYTE PTR [eax]
c001a065:	0f b6 c0             	movzx  eax,al
c001a068:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a06d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a071:	8d 50 01             	lea    edx,[eax+0x1]
c001a074:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a078:	8a 00                	mov    al,BYTE PTR [eax]
c001a07a:	0f b6 c0             	movzx  eax,al
c001a07d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a082:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a087:	c1 e0 08             	shl    eax,0x8
c001a08a:	89 c2                	mov    edx,eax
c001a08c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a090:	09 d0                	or     eax,edx
c001a092:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a096:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a09a:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a09f:	75 3a                	jne    c001a0db <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a0a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0a5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a0a8:	66 3d dc 05          	cmp    ax,0x5dc
c001a0ac:	77 10                	ja     c001a0be <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a0ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0b2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a0b5:	0f b7 c0             	movzx  eax,ax
c001a0b8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a0bc:	eb 1d                	jmp    c001a0db <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a0be:	83 ec 0c             	sub    esp,0xc
c001a0c1:	68 88 a7 02 c0       	push   0xc002a788
c001a0c6:	e8 0a 88 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001a0cb:	83 c4 10             	add    esp,0x10
c001a0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0d2:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a0d6:	e9 c0 00 00 00       	jmp    c001a19b <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a0db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a0df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0e5:	83 ec 04             	sub    esp,0x4
c001a0e8:	52                   	push   edx
c001a0e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a0ed:	50                   	push   eax
c001a0ee:	e8 ad 65 fe ff       	call   c00006a0 <memcpy>
c001a0f3:	83 c4 10             	add    esp,0x10
c001a0f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0fa:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a0fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a102:	8d 50 01             	lea    edx,[eax+0x1]
c001a105:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a109:	8a 00                	mov    al,BYTE PTR [eax]
c001a10b:	0f b6 c0             	movzx  eax,al
c001a10e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a112:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a116:	8d 50 01             	lea    edx,[eax+0x1]
c001a119:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a11d:	8a 00                	mov    al,BYTE PTR [eax]
c001a11f:	0f b6 c0             	movzx  eax,al
c001a122:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a126:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a12a:	8d 50 01             	lea    edx,[eax+0x1]
c001a12d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a131:	8a 00                	mov    al,BYTE PTR [eax]
c001a133:	0f b6 c0             	movzx  eax,al
c001a136:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a13a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a13e:	8d 50 01             	lea    edx,[eax+0x1]
c001a141:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a145:	8a 00                	mov    al,BYTE PTR [eax]
c001a147:	0f b6 c0             	movzx  eax,al
c001a14a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a14e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a152:	c1 e0 18             	shl    eax,0x18
c001a155:	89 c2                	mov    edx,eax
c001a157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a15b:	c1 e0 10             	shl    eax,0x10
c001a15e:	09 c2                	or     edx,eax
c001a160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a164:	c1 e0 08             	shl    eax,0x8
c001a167:	09 d0                	or     eax,edx
c001a169:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a16d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a171:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a175:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a179:	83 e8 04             	sub    eax,0x4
c001a17c:	83 ec 08             	sub    esp,0x8
c001a17f:	50                   	push   eax
c001a180:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a184:	e8 b6 fc ff ff       	call   c0019e3f <Net::crc32Calc(unsigned char*, int)>
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a190:	0f 94 c2             	sete   dl
c001a193:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a197:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a19a:	90                   	nop
c001a19b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a19f:	83 c4 2c             	add    esp,0x2c
c001a1a2:	c2 04 00             	ret    0x4

c001a1a5 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a1a5:	55                   	push   ebp
c001a1a6:	57                   	push   edi
c001a1a7:	56                   	push   esi
c001a1a8:	53                   	push   ebx
c001a1a9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a1af:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a1b6:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a1b8:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a1bb:	80 fb 40             	cmp    bl,0x40
c001a1be:	75 1b                	jne    c001a1db <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a1c0:	8a 16                	mov    dl,BYTE PTR [esi]
c001a1c2:	84 d2                	test   dl,dl
c001a1c4:	0f 84 f1 00 00 00    	je     c001a2bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a1ca:	8d 46 01             	lea    eax,[esi+0x1]
c001a1cd:	80 fa 3a             	cmp    dl,0x3a
c001a1d0:	74 04                	je     c001a1d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a1d2:	89 c6                	mov    esi,eax
c001a1d4:	eb ea                	jmp    c001a1c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a1d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a1d9:	89 c6                	mov    esi,eax
c001a1db:	50                   	push   eax
c001a1dc:	6a 40                	push   0x40
c001a1de:	6a 00                	push   0x0
c001a1e0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1e4:	50                   	push   eax
c001a1e5:	e8 da 64 fe ff       	call   c00006c4 <memset>
c001a1ea:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a1f1:	31 c0                	xor    eax,eax
c001a1f3:	83 c4 10             	add    esp,0x10
c001a1f6:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a1f8:	84 c9                	test   cl,cl
c001a1fa:	0f 84 bb 00 00 00    	je     c001a2bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a200:	3d c7 00 00 00       	cmp    eax,0xc7
c001a205:	0f 8f b0 00 00 00    	jg     c001a2bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a20b:	80 f9 0a             	cmp    cl,0xa
c001a20e:	0f 85 98 00 00 00    	jne    c001a2ac <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a214:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a219:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a21d:	a8 df                	test   al,0xdf
c001a21f:	0f 94 c1             	sete   cl
c001a222:	3c 23                	cmp    al,0x23
c001a224:	0f 94 c2             	sete   dl
c001a227:	08 d1                	or     cl,dl
c001a229:	75 4a                	jne    c001a275 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a22b:	8d 50 f7             	lea    edx,[eax-0x9]
c001a22e:	80 fa 01             	cmp    dl,0x1
c001a231:	76 42                	jbe    c001a275 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a233:	3c 5b                	cmp    al,0x5b
c001a235:	75 42                	jne    c001a279 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a237:	80 fb 40             	cmp    bl,0x40
c001a23a:	75 39                	jne    c001a275 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a23c:	83 ec 0c             	sub    esp,0xc
c001a23f:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a243:	52                   	push   edx
c001a244:	e8 98 64 fe ff       	call   c00006e1 <strlen>
c001a249:	83 c4 10             	add    esp,0x10
c001a24c:	83 f8 3f             	cmp    eax,0x3f
c001a24f:	77 6a                	ja     c001a2bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a251:	50                   	push   eax
c001a252:	50                   	push   eax
c001a253:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a257:	52                   	push   edx
c001a258:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a25c:	52                   	push   edx
c001a25d:	e8 01 65 fe ff       	call   c0000763 <strcpy>
c001a262:	58                   	pop    eax
c001a263:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a267:	52                   	push   edx
c001a268:	e8 74 64 fe ff       	call   c00006e1 <strlen>
c001a26d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a272:	83 c4 10             	add    esp,0x10
c001a275:	31 d2                	xor    edx,edx
c001a277:	eb 3a                	jmp    c001a2b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a279:	80 fb 40             	cmp    bl,0x40
c001a27c:	74 06                	je     c001a284 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a27e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a282:	eb 20                	jmp    c001a2a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a284:	50                   	push   eax
c001a285:	50                   	push   eax
c001a286:	55                   	push   ebp
c001a287:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a28b:	50                   	push   eax
c001a28c:	e8 23 65 fe ff       	call   c00007b4 <strcmp>
c001a291:	83 c4 10             	add    esp,0x10
c001a294:	85 c0                	test   eax,eax
c001a296:	75 dd                	jne    c001a275 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a298:	eb e4                	jmp    c001a27e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a29a:	8d 50 01             	lea    edx,[eax+0x1]
c001a29d:	80 f9 3d             	cmp    cl,0x3d
c001a2a0:	74 1d                	je     c001a2bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a2a2:	89 d0                	mov    eax,edx
c001a2a4:	8a 08                	mov    cl,BYTE PTR [eax]
c001a2a6:	84 c9                	test   cl,cl
c001a2a8:	75 f0                	jne    c001a29a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a2aa:	eb 0f                	jmp    c001a2bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a2ac:	8d 50 01             	lea    edx,[eax+0x1]
c001a2af:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a2b3:	47                   	inc    edi
c001a2b4:	89 d0                	mov    eax,edx
c001a2b6:	e9 3b ff ff ff       	jmp    c001a1f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a2bb:	31 c0                	xor    eax,eax
c001a2bd:	eb 33                	jmp    c001a2f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a2bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a2c3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a2c6:	50                   	push   eax
c001a2c7:	50                   	push   eax
c001a2c8:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a2cc:	50                   	push   eax
c001a2cd:	56                   	push   esi
c001a2ce:	e8 e1 64 fe ff       	call   c00007b4 <strcmp>
c001a2d3:	83 c4 10             	add    esp,0x10
c001a2d6:	85 c0                	test   eax,eax
c001a2d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a2dc:	75 97                	jne    c001a275 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a2de:	51                   	push   ecx
c001a2df:	51                   	push   ecx
c001a2e0:	52                   	push   edx
c001a2e1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a2e8:	e8 76 64 fe ff       	call   c0000763 <strcpy>
c001a2ed:	83 c4 10             	add    esp,0x10
c001a2f0:	b0 01                	mov    al,0x1
c001a2f2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a2f8:	5b                   	pop    ebx
c001a2f9:	5e                   	pop    esi
c001a2fa:	5f                   	pop    edi
c001a2fb:	5d                   	pop    ebp
c001a2fc:	c3                   	ret    

c001a2fd <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a2fd:	57                   	push   edi
c001a2fe:	56                   	push   esi
c001a2ff:	53                   	push   ebx
c001a300:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a306:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a30d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a314:	53                   	push   ebx
c001a315:	e8 c7 63 fe ff       	call   c00006e1 <strlen>
c001a31a:	89 34 24             	mov    DWORD PTR [esp],esi
c001a31d:	89 c7                	mov    edi,eax
c001a31f:	e8 bd 63 fe ff       	call   c00006e1 <strlen>
c001a324:	83 c4 10             	add    esp,0x10
c001a327:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a32b:	3d ff 00 00 00       	cmp    eax,0xff
c001a330:	0f 87 d3 00 00 00    	ja     c001a409 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a336:	57                   	push   edi
c001a337:	57                   	push   edi
c001a338:	56                   	push   esi
c001a339:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a33d:	56                   	push   esi
c001a33e:	e8 20 64 fe ff       	call   c0000763 <strcpy>
c001a343:	58                   	pop    eax
c001a344:	5a                   	pop    edx
c001a345:	68 bc ab 02 c0       	push   0xc002abbc
c001a34a:	56                   	push   esi
c001a34b:	e8 ca 64 fe ff       	call   c000081a <strcat>
c001a350:	59                   	pop    ecx
c001a351:	5f                   	pop    edi
c001a352:	53                   	push   ebx
c001a353:	56                   	push   esi
c001a354:	e8 c1 64 fe ff       	call   c000081a <strcat>
c001a359:	58                   	pop    eax
c001a35a:	5a                   	pop    edx
c001a35b:	68 d4 a7 02 c0       	push   0xc002a7d4
c001a360:	56                   	push   esi
c001a361:	e8 b4 64 fe ff       	call   c000081a <strcat>
c001a366:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a36d:	e8 b2 52 ff ff       	call   c000f624 <malloc>
c001a372:	83 c4 0c             	add    esp,0xc
c001a375:	89 c3                	mov    ebx,eax
c001a377:	ff 35 d4 e2 02 c0    	push   DWORD PTR ds:0xc002e2d4
c001a37d:	56                   	push   esi
c001a37e:	50                   	push   eax
c001a37f:	e8 aa 8a ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001a384:	83 c4 10             	add    esp,0x10
c001a387:	85 db                	test   ebx,ebx
c001a389:	74 7e                	je     c001a409 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a38b:	51                   	push   ecx
c001a38c:	51                   	push   ecx
c001a38d:	6a 01                	push   0x1
c001a38f:	53                   	push   ebx
c001a390:	e8 fd 8a ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001a395:	83 c4 10             	add    esp,0x10
c001a398:	85 c0                	test   eax,eax
c001a39a:	74 08                	je     c001a3a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a39c:	83 ec 0c             	sub    esp,0xc
c001a39f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a3a1:	53                   	push   ebx
c001a3a2:	eb 5f                	jmp    c001a403 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a3a4:	52                   	push   edx
c001a3a5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a3a9:	50                   	push   eax
c001a3aa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a3ae:	50                   	push   eax
c001a3af:	53                   	push   ebx
c001a3b0:	e8 89 8d ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001a3b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a3b9:	83 c4 10             	add    esp,0x10
c001a3bc:	89 c1                	mov    ecx,eax
c001a3be:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a3c2:	74 31                	je     c001a3f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a3c4:	83 ec 0c             	sub    esp,0xc
c001a3c7:	50                   	push   eax
c001a3c8:	e8 57 52 ff ff       	call   c000f624 <malloc>
c001a3cd:	89 c6                	mov    esi,eax
c001a3cf:	58                   	pop    eax
c001a3d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a3d2:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a3d6:	52                   	push   edx
c001a3d7:	56                   	push   esi
c001a3d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a3dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a3e0:	53                   	push   ebx
c001a3e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a3e4:	83 c4 20             	add    esp,0x20
c001a3e7:	85 c0                	test   eax,eax
c001a3e9:	75 0a                	jne    c001a3f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a3eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3ef:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a3f3:	74 18                	je     c001a40d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a3f5:	83 ec 0c             	sub    esp,0xc
c001a3f8:	53                   	push   ebx
c001a3f9:	e8 f2 8a ff ff       	call   c0012ef0 <File::close()>
c001a3fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a400:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a403:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a406:	83 c4 10             	add    esp,0x10
c001a409:	31 c0                	xor    eax,eax
c001a40b:	eb 3b                	jmp    c001a448 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a40d:	83 ec 0c             	sub    esp,0xc
c001a410:	53                   	push   ebx
c001a411:	e8 da 8a ff ff       	call   c0012ef0 <File::close()>
c001a416:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a418:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a41b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a41e:	83 c4 0c             	add    esp,0xc
c001a421:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a428:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a42f:	56                   	push   esi
c001a430:	e8 70 fd ff ff       	call   c001a1a5 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a435:	89 34 24             	mov    DWORD PTR [esp],esi
c001a438:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a43c:	e8 f3 51 ff ff       	call   c000f634 <free>
c001a441:	83 c4 10             	add    esp,0x10
c001a444:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a448:	81 c4 20 01 00 00    	add    esp,0x120
c001a44e:	5b                   	pop    ebx
c001a44f:	5e                   	pop    esi
c001a450:	5f                   	pop    edi
c001a451:	c3                   	ret    

c001a452 <Reg::getLine(char*, char*, char*)>:
c001a452:	57                   	push   edi
c001a453:	56                   	push   esi
c001a454:	53                   	push   ebx
c001a455:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a459:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a45d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a461:	57                   	push   edi
c001a462:	56                   	push   esi
c001a463:	53                   	push   ebx
c001a464:	68 d9 a7 02 c0       	push   0xc002a7d9
c001a469:	e8 8f fe ff ff       	call   c001a2fd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a46e:	83 c4 10             	add    esp,0x10
c001a471:	84 c0                	test   al,al
c001a473:	75 10                	jne    c001a485 <Reg::getLine(char*, char*, char*)+0x33>
c001a475:	57                   	push   edi
c001a476:	56                   	push   esi
c001a477:	53                   	push   ebx
c001a478:	68 fe a7 02 c0       	push   0xc002a7fe
c001a47d:	e8 7b fe ff ff       	call   c001a2fd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a482:	83 c4 10             	add    esp,0x10
c001a485:	5b                   	pop    ebx
c001a486:	5e                   	pop    esi
c001a487:	5f                   	pop    edi
c001a488:	c3                   	ret    

c001a489 <Reg::readInt(char*, char*, int*)>:
c001a489:	55                   	push   ebp
c001a48a:	57                   	push   edi
c001a48b:	56                   	push   esi
c001a48c:	53                   	push   ebx
c001a48d:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a493:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a497:	57                   	push   edi
c001a498:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a49f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a4a6:	e8 a7 ff ff ff       	call   c001a452 <Reg::getLine(char*, char*, char*)>
c001a4ab:	83 c4 10             	add    esp,0x10
c001a4ae:	84 c0                	test   al,al
c001a4b0:	0f 84 b3 00 00 00    	je     c001a569 <Reg::readInt(char*, char*, int*)+0xe0>
c001a4b6:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a4ba:	80 fa 2b             	cmp    dl,0x2b
c001a4bd:	74 0c                	je     c001a4cb <Reg::readInt(char*, char*, int*)+0x42>
c001a4bf:	80 fa 2d             	cmp    dl,0x2d
c001a4c2:	75 0e                	jne    c001a4d2 <Reg::readInt(char*, char*, int*)+0x49>
c001a4c4:	ba 01 00 00 00       	mov    edx,0x1
c001a4c9:	eb 0b                	jmp    c001a4d6 <Reg::readInt(char*, char*, int*)+0x4d>
c001a4cb:	ba 01 00 00 00       	mov    edx,0x1
c001a4d0:	eb 02                	jmp    c001a4d4 <Reg::readInt(char*, char*, int*)+0x4b>
c001a4d2:	31 d2                	xor    edx,edx
c001a4d4:	31 c0                	xor    eax,eax
c001a4d6:	be 0a 00 00 00       	mov    esi,0xa
c001a4db:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a4e0:	75 20                	jne    c001a502 <Reg::readInt(char*, char*, int*)+0x79>
c001a4e2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a4e6:	80 f9 78             	cmp    cl,0x78
c001a4e9:	75 0a                	jne    c001a4f5 <Reg::readInt(char*, char*, int*)+0x6c>
c001a4eb:	83 c2 02             	add    edx,0x2
c001a4ee:	be 10 00 00 00       	mov    esi,0x10
c001a4f3:	eb 0d                	jmp    c001a502 <Reg::readInt(char*, char*, int*)+0x79>
c001a4f5:	80 f9 62             	cmp    cl,0x62
c001a4f8:	75 08                	jne    c001a502 <Reg::readInt(char*, char*, int*)+0x79>
c001a4fa:	83 c2 02             	add    edx,0x2
c001a4fd:	be 02 00 00 00       	mov    esi,0x2
c001a502:	01 d7                	add    edi,edx
c001a504:	31 d2                	xor    edx,edx
c001a506:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a508:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a50c:	80 fb 0d             	cmp    bl,0xd
c001a50f:	0f 94 c3             	sete   bl
c001a512:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a517:	0f 94 c1             	sete   cl
c001a51a:	08 cb                	or     bl,cl
c001a51c:	75 3a                	jne    c001a558 <Reg::readInt(char*, char*, int*)+0xcf>
c001a51e:	0f af d6             	imul   edx,esi
c001a521:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a526:	83 fe 10             	cmp    esi,0x10
c001a529:	75 26                	jne    c001a551 <Reg::readInt(char*, char*, int*)+0xc8>
c001a52b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a52f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a532:	89 e9                	mov    ecx,ebp
c001a534:	80 f9 05             	cmp    cl,0x5
c001a537:	77 06                	ja     c001a53f <Reg::readInt(char*, char*, int*)+0xb6>
c001a539:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a53d:	eb 16                	jmp    c001a555 <Reg::readInt(char*, char*, int*)+0xcc>
c001a53f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a543:	83 e9 61             	sub    ecx,0x61
c001a546:	80 f9 05             	cmp    cl,0x5
c001a549:	77 06                	ja     c001a551 <Reg::readInt(char*, char*, int*)+0xc8>
c001a54b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a54f:	eb 04                	jmp    c001a555 <Reg::readInt(char*, char*, int*)+0xcc>
c001a551:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a555:	47                   	inc    edi
c001a556:	eb ae                	jmp    c001a506 <Reg::readInt(char*, char*, int*)+0x7d>
c001a558:	84 c0                	test   al,al
c001a55a:	74 02                	je     c001a55e <Reg::readInt(char*, char*, int*)+0xd5>
c001a55c:	f7 da                	neg    edx
c001a55e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a565:	89 10                	mov    DWORD PTR [eax],edx
c001a567:	88 d8                	mov    al,bl
c001a569:	81 c4 ec 00 00 00    	add    esp,0xec
c001a56f:	5b                   	pop    ebx
c001a570:	5e                   	pop    esi
c001a571:	5f                   	pop    edi
c001a572:	5d                   	pop    ebp
c001a573:	c3                   	ret    

c001a574 <Reg::readString(char*, char*, char*, int)>:
c001a574:	57                   	push   edi
c001a575:	56                   	push   esi
c001a576:	53                   	push   ebx
c001a577:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a57d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a584:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a588:	57                   	push   edi
c001a589:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a590:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a597:	e8 b6 fe ff ff       	call   c001a452 <Reg::getLine(char*, char*, char*)>
c001a59c:	83 c4 10             	add    esp,0x10
c001a59f:	89 c6                	mov    esi,eax
c001a5a1:	84 c0                	test   al,al
c001a5a3:	74 44                	je     c001a5e9 <Reg::readString(char*, char*, char*, int)+0x75>
c001a5a5:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a5ac:	31 c0                	xor    eax,eax
c001a5ae:	4a                   	dec    edx
c001a5af:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a5b2:	84 c9                	test   cl,cl
c001a5b4:	74 0f                	je     c001a5c5 <Reg::readString(char*, char*, char*, int)+0x51>
c001a5b6:	39 c2                	cmp    edx,eax
c001a5b8:	7e 0b                	jle    c001a5c5 <Reg::readString(char*, char*, char*, int)+0x51>
c001a5ba:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a5bd:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a5c2:	40                   	inc    eax
c001a5c3:	eb ea                	jmp    c001a5af <Reg::readString(char*, char*, char*, int)+0x3b>
c001a5c5:	83 ec 0c             	sub    esp,0xc
c001a5c8:	53                   	push   ebx
c001a5c9:	e8 13 61 fe ff       	call   c00006e1 <strlen>
c001a5ce:	83 c4 10             	add    esp,0x10
c001a5d1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a5d6:	75 11                	jne    c001a5e9 <Reg::readString(char*, char*, char*, int)+0x75>
c001a5d8:	83 ec 0c             	sub    esp,0xc
c001a5db:	53                   	push   ebx
c001a5dc:	e8 00 61 fe ff       	call   c00006e1 <strlen>
c001a5e1:	83 c4 10             	add    esp,0x10
c001a5e4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a5e9:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a5ef:	89 f0                	mov    eax,esi
c001a5f1:	5b                   	pop    ebx
c001a5f2:	5e                   	pop    esi
c001a5f3:	5f                   	pop    edi
c001a5f4:	c3                   	ret    

c001a5f5 <Reg::readBool(char*, char*, bool*)>:
c001a5f5:	83 ec 20             	sub    esp,0x20
c001a5f8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a5fc:	50                   	push   eax
c001a5fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a601:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a605:	e8 7f fe ff ff       	call   c001a489 <Reg::readInt(char*, char*, int*)>
c001a60a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a60f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a613:	0f 95 02             	setne  BYTE PTR [edx]
c001a616:	83 c4 2c             	add    esp,0x2c
c001a619:	c3                   	ret    

c001a61a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a61a:	53                   	push   ebx
c001a61b:	83 ec 1c             	sub    esp,0x1c
c001a61e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a622:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a626:	50                   	push   eax
c001a627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a62f:	e8 c1 ff ff ff       	call   c001a5f5 <Reg::readBool(char*, char*, bool*)>
c001a634:	83 c4 10             	add    esp,0x10
c001a637:	84 c0                	test   al,al
c001a639:	74 04                	je     c001a63f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a63b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a63f:	88 d8                	mov    al,bl
c001a641:	83 c4 18             	add    esp,0x18
c001a644:	5b                   	pop    ebx
c001a645:	c3                   	ret    

c001a646 <Reg::readIntWithDefault(char*, char*, int)>:
c001a646:	53                   	push   ebx
c001a647:	83 ec 1c             	sub    esp,0x1c
c001a64a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a64e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a652:	50                   	push   eax
c001a653:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a657:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a65b:	e8 29 fe ff ff       	call   c001a489 <Reg::readInt(char*, char*, int*)>
c001a660:	83 c4 10             	add    esp,0x10
c001a663:	84 c0                	test   al,al
c001a665:	74 04                	je     c001a66b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a667:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a66b:	89 d8                	mov    eax,ebx
c001a66d:	83 c4 18             	add    esp,0x18
c001a670:	5b                   	pop    ebx
c001a671:	c3                   	ret    

c001a672 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a672:	57                   	push   edi
c001a673:	56                   	push   esi
c001a674:	53                   	push   ebx
c001a675:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a679:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a67d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a681:	56                   	push   esi
c001a682:	53                   	push   ebx
c001a683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a687:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a68b:	e8 e4 fe ff ff       	call   c001a574 <Reg::readString(char*, char*, char*, int)>
c001a690:	83 c4 10             	add    esp,0x10
c001a693:	84 c0                	test   al,al
c001a695:	75 1b                	jne    c001a6b2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a697:	50                   	push   eax
c001a698:	56                   	push   esi
c001a699:	4e                   	dec    esi
c001a69a:	6a 00                	push   0x0
c001a69c:	53                   	push   ebx
c001a69d:	e8 22 60 fe ff       	call   c00006c4 <memset>
c001a6a2:	83 c4 0c             	add    esp,0xc
c001a6a5:	56                   	push   esi
c001a6a6:	57                   	push   edi
c001a6a7:	53                   	push   ebx
c001a6a8:	89 fb                	mov    ebx,edi
c001a6aa:	e8 f1 5f fe ff       	call   c00006a0 <memcpy>
c001a6af:	83 c4 10             	add    esp,0x10
c001a6b2:	89 d8                	mov    eax,ebx
c001a6b4:	5b                   	pop    ebx
c001a6b5:	5e                   	pop    esi
c001a6b6:	5f                   	pop    edi
c001a6b7:	c3                   	ret    

c001a6b8 <Sys::exit(regs*)>:
c001a6b8:	83 ec 18             	sub    esp,0x18
c001a6bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6bf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a6c2:	e8 ee 33 00 00       	call   c001dab5 <terminateTask(int)>
c001a6c7:	83 c8 ff             	or     eax,0xffffffff
c001a6ca:	83 c4 1c             	add    esp,0x1c
c001a6cd:	89 c2                	mov    edx,eax
c001a6cf:	c3                   	ret    

c001a6d0 <Sys::getCwd(regs*)>:
c001a6d0:	83 ec 10             	sub    esp,0x10
c001a6d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6d7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a6da:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a6dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6e2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a6e5:	e8 46 85 ff ff       	call   c0012c30 <Fs::getcwd(Process*, char*, int)>
c001a6ea:	83 c4 1c             	add    esp,0x1c
c001a6ed:	99                   	cdq    
c001a6ee:	c3                   	ret    

c001a6ef <Sys::getPID(regs*)>:
c001a6ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6f9:	99                   	cdq    
c001a6fa:	c3                   	ret    

c001a6fb <Sys::loadDLL(regs*)>:
c001a6fb:	56                   	push   esi
c001a6fc:	53                   	push   ebx
c001a6fd:	31 d2                	xor    edx,edx
c001a6ff:	51                   	push   ecx
c001a700:	b8 01 00 00 00       	mov    eax,0x1
c001a705:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a709:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a70d:	0f 84 8c 00 00 00    	je     c001a79f <Sys::loadDLL(regs*)+0xa4>
c001a713:	83 ec 0c             	sub    esp,0xc
c001a716:	68 14 01 00 00       	push   0x114
c001a71b:	e8 04 4f ff ff       	call   c000f624 <malloc>
c001a720:	83 c4 0c             	add    esp,0xc
c001a723:	89 c3                	mov    ebx,eax
c001a725:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a72a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a72d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a730:	53                   	push   ebx
c001a731:	e8 f8 86 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001a736:	83 c4 10             	add    esp,0x10
c001a739:	31 d2                	xor    edx,edx
c001a73b:	b8 02 00 00 00       	mov    eax,0x2
c001a740:	85 db                	test   ebx,ebx
c001a742:	74 5b                	je     c001a79f <Sys::loadDLL(regs*)+0xa4>
c001a744:	83 ec 0c             	sub    esp,0xc
c001a747:	53                   	push   ebx
c001a748:	e8 b3 89 ff ff       	call   c0013100 <File::exists()>
c001a74d:	83 c4 10             	add    esp,0x10
c001a750:	84 c0                	test   al,al
c001a752:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a754:	75 11                	jne    c001a767 <Sys::loadDLL(regs*)+0x6c>
c001a756:	83 ec 0c             	sub    esp,0xc
c001a759:	53                   	push   ebx
c001a75a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a75d:	83 c4 10             	add    esp,0x10
c001a760:	b8 03 00 00 00       	mov    eax,0x3
c001a765:	eb 36                	jmp    c001a79d <Sys::loadDLL(regs*)+0xa2>
c001a767:	83 ec 0c             	sub    esp,0xc
c001a76a:	53                   	push   ebx
c001a76b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a76e:	58                   	pop    eax
c001a76f:	5a                   	pop    edx
c001a770:	6a 00                	push   0x0
c001a772:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a775:	e8 85 22 00 00       	call   c001c9ff <Thr::loadDLL(char const*, bool)>
c001a77a:	83 c4 10             	add    esp,0x10
c001a77d:	89 c1                	mov    ecx,eax
c001a77f:	31 d2                	xor    edx,edx
c001a781:	b8 04 00 00 00       	mov    eax,0x4
c001a786:	85 c9                	test   ecx,ecx
c001a788:	74 15                	je     c001a79f <Sys::loadDLL(regs*)+0xa4>
c001a78a:	53                   	push   ebx
c001a78b:	53                   	push   ebx
c001a78c:	ff 35 88 cd 02 c0    	push   DWORD PTR ds:0xc002cd88
c001a792:	51                   	push   ecx
c001a793:	e8 76 24 00 00       	call   c001cc0e <Thr::executeDLL(unsigned long, void*)>
c001a798:	83 c4 10             	add    esp,0x10
c001a79b:	31 c0                	xor    eax,eax
c001a79d:	31 d2                	xor    edx,edx
c001a79f:	59                   	pop    ecx
c001a7a0:	5b                   	pop    ebx
c001a7a1:	5e                   	pop    esi
c001a7a2:	c3                   	ret    

c001a7a3 <Sys::read(regs*)>:
c001a7a3:	57                   	push   edi
c001a7a4:	56                   	push   esi
c001a7a5:	53                   	push   ebx
c001a7a6:	83 ec 10             	sub    esp,0x10
c001a7a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a7ad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a7b0:	83 f8 02             	cmp    eax,0x2
c001a7b3:	77 10                	ja     c001a7c5 <Sys::read(regs*)+0x22>
c001a7b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a7bd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a7c3:	eb 0e                	jmp    c001a7d3 <Sys::read(regs*)+0x30>
c001a7c5:	83 ec 0c             	sub    esp,0xc
c001a7c8:	50                   	push   eax
c001a7c9:	e8 c1 6f ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001a7ce:	83 c4 10             	add    esp,0x10
c001a7d1:	89 c1                	mov    ecx,eax
c001a7d3:	83 c8 ff             	or     eax,0xffffffff
c001a7d6:	85 c9                	test   ecx,ecx
c001a7d8:	89 c2                	mov    edx,eax
c001a7da:	74 28                	je     c001a804 <Sys::read(regs*)+0x61>
c001a7dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7e4:	31 ff                	xor    edi,edi
c001a7e6:	83 ec 0c             	sub    esp,0xc
c001a7e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a7eb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a7ef:	52                   	push   edx
c001a7f0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a7f3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a7f6:	57                   	push   edi
c001a7f7:	56                   	push   esi
c001a7f8:	51                   	push   ecx
c001a7f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a7fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a800:	83 c4 20             	add    esp,0x20
c001a803:	99                   	cdq    
c001a804:	83 c4 10             	add    esp,0x10
c001a807:	5b                   	pop    ebx
c001a808:	5e                   	pop    esi
c001a809:	5f                   	pop    edi
c001a80a:	c3                   	ret    

c001a80b <Sys::sbrk(regs*)>:
c001a80b:	56                   	push   esi
c001a80c:	53                   	push   ebx
c001a80d:	50                   	push   eax
c001a80e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a813:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a817:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a81a:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a81d:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a823:	85 db                	test   ebx,ebx
c001a825:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a828:	74 02                	je     c001a82c <Sys::sbrk(regs*)+0x21>
c001a82a:	79 06                	jns    c001a832 <Sys::sbrk(regs*)+0x27>
c001a82c:	89 f0                	mov    eax,esi
c001a82e:	31 d2                	xor    edx,edx
c001a830:	eb 2a                	jmp    c001a85c <Sys::sbrk(regs*)+0x51>
c001a832:	83 c8 ff             	or     eax,0xffffffff
c001a835:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a83b:	89 c2                	mov    edx,eax
c001a83d:	77 1d                	ja     c001a85c <Sys::sbrk(regs*)+0x51>
c001a83f:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a845:	50                   	push   eax
c001a846:	c1 ea 0c             	shr    edx,0xc
c001a849:	68 07 04 00 00       	push   0x407
c001a84e:	52                   	push   edx
c001a84f:	51                   	push   ecx
c001a850:	e8 5b 78 ff ff       	call   c00120b0 <VAS::allocatePages(int, int)>
c001a855:	89 f0                	mov    eax,esi
c001a857:	31 d2                	xor    edx,edx
c001a859:	83 c4 10             	add    esp,0x10
c001a85c:	59                   	pop    ecx
c001a85d:	5b                   	pop    ebx
c001a85e:	5e                   	pop    esi
c001a85f:	c3                   	ret    

c001a860 <Sys::setCwd(regs*)>:
c001a860:	83 ec 14             	sub    esp,0x14
c001a863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a867:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a86a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a86f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a872:	e8 28 89 ff ff       	call   c001319f <Fs::setcwd(Process*, char*)>
c001a877:	83 c4 1c             	add    esp,0x1c
c001a87a:	99                   	cdq    
c001a87b:	c3                   	ret    

c001a87c <Sys::setTime(regs*)>:
c001a87c:	55                   	push   ebp
c001a87d:	31 d2                	xor    edx,edx
c001a87f:	57                   	push   edi
c001a880:	bf 18 00 00 00       	mov    edi,0x18
c001a885:	56                   	push   esi
c001a886:	53                   	push   ebx
c001a887:	bb 3c 00 00 00       	mov    ebx,0x3c
c001a88c:	83 ec 30             	sub    esp,0x30
c001a88f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001a893:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001a896:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001a899:	f7 f3                	div    ebx
c001a89b:	89 d6                	mov    esi,edx
c001a89d:	31 d2                	xor    edx,edx
c001a89f:	f7 f3                	div    ebx
c001a8a1:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001a8a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a8a8:	bb 10 0e 00 00       	mov    ebx,0xe10
c001a8ad:	31 d2                	xor    edx,edx
c001a8af:	f7 f3                	div    ebx
c001a8b1:	31 d2                	xor    edx,edx
c001a8b3:	bb 0c 00 00 00       	mov    ebx,0xc
c001a8b8:	f7 f7                	div    edi
c001a8ba:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001a8bd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a8c1:	0f b7 cd             	movzx  ecx,bp
c001a8c4:	56                   	push   esi
c001a8c5:	89 c7                	mov    edi,eax
c001a8c7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001a8cb:	c1 e6 10             	shl    esi,0x10
c001a8ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a8d2:	83 e7 1f             	and    edi,0x1f
c001a8d5:	51                   	push   ecx
c001a8d6:	47                   	inc    edi
c001a8d7:	c1 e8 05             	shr    eax,0x5
c001a8da:	31 d2                	xor    edx,edx
c001a8dc:	f7 f3                	div    ebx
c001a8de:	31 db                	xor    ebx,ebx
c001a8e0:	52                   	push   edx
c001a8e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001a8e5:	57                   	push   edi
c001a8e6:	68 19 a8 02 c0       	push   0xc002a819
c001a8eb:	e8 e5 7f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001a8f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a8f4:	89 f8                	mov    eax,edi
c001a8f6:	31 c9                	xor    ecx,ecx
c001a8f8:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a8fc:	88 c1                	mov    cl,al
c001a8fe:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001a904:	88 d5                	mov    ch,dl
c001a906:	c1 e0 10             	shl    eax,0x10
c001a909:	0f b7 d1             	movzx  edx,cx
c001a90c:	09 c2                	or     edx,eax
c001a90e:	89 d8                	mov    eax,ebx
c001a910:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001a915:	09 f0                	or     eax,esi
c001a917:	89 c3                	mov    ebx,eax
c001a919:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001a91d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a921:	83 c4 18             	add    esp,0x18
c001a924:	53                   	push   ebx
c001a925:	52                   	push   edx
c001a926:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a92a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001a92e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a932:	e8 82 8f ff ff       	call   c00138b9 <datetimeToSeconds(datetime_t)>
c001a937:	83 c4 0c             	add    esp,0xc
c001a93a:	52                   	push   edx
c001a93b:	50                   	push   eax
c001a93c:	56                   	push   esi
c001a93d:	e8 fe 90 ff ff       	call   c0013a40 <secondsToDatetime(unsigned long long)>
c001a942:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a946:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a94a:	51                   	push   ecx
c001a94b:	89 d6                	mov    esi,edx
c001a94d:	51                   	push   ecx
c001a94e:	c1 ee 10             	shr    esi,0x10
c001a951:	89 f3                	mov    ebx,esi
c001a953:	0f b6 f3             	movzx  esi,bl
c001a956:	56                   	push   esi
c001a957:	0f b6 f6             	movzx  esi,dh
c001a95a:	0f b6 d2             	movzx  edx,dl
c001a95d:	56                   	push   esi
c001a95e:	52                   	push   edx
c001a95f:	89 c2                	mov    edx,eax
c001a961:	c1 ea 10             	shr    edx,0x10
c001a964:	52                   	push   edx
c001a965:	0f b6 d4             	movzx  edx,ah
c001a968:	0f b6 c0             	movzx  eax,al
c001a96b:	52                   	push   edx
c001a96c:	50                   	push   eax
c001a96d:	68 35 a8 02 c0       	push   0xc002a835
c001a972:	e8 5e 7f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001a977:	83 c4 2c             	add    esp,0x2c
c001a97a:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001a97f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a983:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a987:	53                   	push   ebx
c001a988:	51                   	push   ecx
c001a989:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001a98f:	e8 4c 90 ff ff       	call   c00139e0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001a994:	83 f0 01             	xor    eax,0x1
c001a997:	31 d2                	xor    edx,edx
c001a999:	0f b6 c0             	movzx  eax,al
c001a99c:	83 c4 3c             	add    esp,0x3c
c001a99f:	5b                   	pop    ebx
c001a9a0:	5e                   	pop    esi
c001a9a1:	5f                   	pop    edi
c001a9a2:	5d                   	pop    ebp
c001a9a3:	c3                   	ret    

c001a9a4 <Sys::timezone(regs*)>:
c001a9a4:	53                   	push   ebx
c001a9a5:	83 ec 08             	sub    esp,0x8
c001a9a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9ac:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001a9b0:	75 17                	jne    c001a9c9 <Sys::timezone(regs*)+0x25>
c001a9b2:	83 ec 0c             	sub    esp,0xc
c001a9b5:	68 51 a8 02 c0       	push   0xc002a851
c001a9ba:	e8 16 7f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001a9bf:	83 c8 ff             	or     eax,0xffffffff
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	89 c2                	mov    edx,eax
c001a9c7:	eb 20                	jmp    c001a9e9 <Sys::timezone(regs*)+0x45>
c001a9c9:	83 ec 0c             	sub    esp,0xc
c001a9cc:	68 89 a8 02 c0       	push   0xc002a889
c001a9d1:	e8 ff 7e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001a9d6:	58                   	pop    eax
c001a9d7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001a9da:	e8 63 8d ff ff       	call   c0013742 <User::loadClockSettings(int)>
c001a9df:	83 c4 10             	add    esp,0x10
c001a9e2:	b8 01 00 00 00       	mov    eax,0x1
c001a9e7:	31 d2                	xor    edx,edx
c001a9e9:	83 c4 08             	add    esp,0x8
c001a9ec:	5b                   	pop    ebx
c001a9ed:	c3                   	ret    

c001a9ee <Sys::write(regs*)>:
c001a9ee:	57                   	push   edi
c001a9ef:	56                   	push   esi
c001a9f0:	53                   	push   ebx
c001a9f1:	83 ec 10             	sub    esp,0x10
c001a9f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a9f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a9fb:	83 f8 02             	cmp    eax,0x2
c001a9fe:	77 10                	ja     c001aa10 <Sys::write(regs*)+0x22>
c001aa00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa05:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa08:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001aa0e:	eb 0e                	jmp    c001aa1e <Sys::write(regs*)+0x30>
c001aa10:	83 ec 0c             	sub    esp,0xc
c001aa13:	50                   	push   eax
c001aa14:	e8 76 6d ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001aa19:	83 c4 10             	add    esp,0x10
c001aa1c:	89 c1                	mov    ecx,eax
c001aa1e:	83 c8 ff             	or     eax,0xffffffff
c001aa21:	85 c9                	test   ecx,ecx
c001aa23:	89 c2                	mov    edx,eax
c001aa25:	74 28                	je     c001aa4f <Sys::write(regs*)+0x61>
c001aa27:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa2f:	31 ff                	xor    edi,edi
c001aa31:	83 ec 0c             	sub    esp,0xc
c001aa34:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa36:	8d 54 24 18          	lea    edx,[esp+0x18]
c001aa3a:	52                   	push   edx
c001aa3b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aa3e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001aa41:	57                   	push   edi
c001aa42:	56                   	push   esi
c001aa43:	51                   	push   ecx
c001aa44:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001aa47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aa4b:	83 c4 20             	add    esp,0x20
c001aa4e:	99                   	cdq    
c001aa4f:	83 c4 10             	add    esp,0x10
c001aa52:	5b                   	pop    ebx
c001aa53:	5e                   	pop    esi
c001aa54:	5f                   	pop    edi
c001aa55:	c3                   	ret    

c001aa56 <Sys::yield(regs*)>:
c001aa56:	57                   	push   edi
c001aa57:	56                   	push   esi
c001aa58:	53                   	push   ebx
c001aa59:	e8 14 26 00 00       	call   c001d072 <lockScheduler()>
c001aa5e:	e8 4b 29 00 00       	call   c001d3ae <schedule()>
c001aa63:	e8 0c 26 00 00       	call   c001d074 <unlockScheduler()>
c001aa68:	8b 35 10 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d410
c001aa6e:	8b 3d 14 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d414
c001aa74:	89 f0                	mov    eax,esi
c001aa76:	89 fb                	mov    ebx,edi
c001aa78:	89 f1                	mov    ecx,esi
c001aa7a:	c1 e0 07             	shl    eax,0x7
c001aa7d:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001aa81:	25 80 30 0f 00       	and    eax,0xf3080
c001aa86:	c1 eb 17             	shr    ebx,0x17
c001aa89:	31 c8                	xor    eax,ecx
c001aa8b:	89 da                	mov    edx,ebx
c001aa8d:	5b                   	pop    ebx
c001aa8e:	5e                   	pop    esi
c001aa8f:	5f                   	pop    edi
c001aa90:	c3                   	ret    

c001aa91 <sysCallSeekDir(regs*)>:
c001aa91:	31 c0                	xor    eax,eax
c001aa93:	31 d2                	xor    edx,edx
c001aa95:	c3                   	ret    

c001aa96 <sysCallTellDir(regs*)>:
c001aa96:	31 c0                	xor    eax,eax
c001aa98:	31 d2                	xor    edx,edx
c001aa9a:	c3                   	ret    

c001aa9b <sysCallVerify(regs*)>:
c001aa9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa9f:	31 d2                	xor    edx,edx
c001aaa1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aaa4:	c3                   	ret    

c001aaa5 <sysCallGetArgc(regs*)>:
c001aaa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aaaa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aaad:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001aab3:	99                   	cdq    
c001aab4:	c3                   	ret    

c001aab5 <sysFormatDisk(regs*)>:
c001aab5:	56                   	push   esi
c001aab6:	53                   	push   ebx
c001aab7:	53                   	push   ebx
c001aab8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aabc:	8b 1d 08 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf08
c001aac2:	eb 25                	jmp    c001aae9 <sysFormatDisk(regs*)+0x34>
c001aac4:	83 ec 0c             	sub    esp,0xc
c001aac7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001aaca:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aacc:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001aacf:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001aad2:	50                   	push   eax
c001aad3:	ff 34 85 a0 d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2c60]
c001aada:	53                   	push   ebx
c001aadb:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001aade:	83 c4 20             	add    esp,0x20
c001aae1:	83 f8 08             	cmp    eax,0x8
c001aae4:	75 12                	jne    c001aaf8 <sysFormatDisk(regs*)+0x43>
c001aae6:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001aae9:	85 db                	test   ebx,ebx
c001aaeb:	75 d7                	jne    c001aac4 <sysFormatDisk(regs*)+0xf>
c001aaed:	59                   	pop    ecx
c001aaee:	b8 03 00 00 00       	mov    eax,0x3
c001aaf3:	31 d2                	xor    edx,edx
c001aaf5:	5b                   	pop    ebx
c001aaf6:	5e                   	pop    esi
c001aaf7:	c3                   	ret    
c001aaf8:	85 c0                	test   eax,eax
c001aafa:	74 1b                	je     c001ab17 <sysFormatDisk(regs*)+0x62>
c001aafc:	83 f8 09             	cmp    eax,0x9
c001aaff:	74 0b                	je     c001ab0c <sysFormatDisk(regs*)+0x57>
c001ab01:	59                   	pop    ecx
c001ab02:	b8 02 00 00 00       	mov    eax,0x2
c001ab07:	31 d2                	xor    edx,edx
c001ab09:	5b                   	pop    ebx
c001ab0a:	5e                   	pop    esi
c001ab0b:	c3                   	ret    
c001ab0c:	59                   	pop    ecx
c001ab0d:	b8 01 00 00 00       	mov    eax,0x1
c001ab12:	31 d2                	xor    edx,edx
c001ab14:	5b                   	pop    ebx
c001ab15:	5e                   	pop    esi
c001ab16:	c3                   	ret    
c001ab17:	59                   	pop    ecx
c001ab18:	31 c0                	xor    eax,eax
c001ab1a:	31 d2                	xor    edx,edx
c001ab1c:	5b                   	pop    ebx
c001ab1d:	5e                   	pop    esi
c001ab1e:	c3                   	ret    

c001ab1f <sysSetDiskVolumeLabel(regs*)>:
c001ab1f:	56                   	push   esi
c001ab20:	53                   	push   ebx
c001ab21:	53                   	push   ebx
c001ab22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab26:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ab29:	83 f8 19             	cmp    eax,0x19
c001ab2c:	77 29                	ja     c001ab57 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ab2e:	8b 0c 85 a0 d3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2c60]
c001ab35:	85 c9                	test   ecx,ecx
c001ab37:	74 1e                	je     c001ab57 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ab39:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001ab3c:	85 d2                	test   edx,edx
c001ab3e:	74 17                	je     c001ab57 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ab40:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001ab46:	8b 33                	mov    esi,DWORD PTR [ebx]
c001ab48:	52                   	push   edx
c001ab49:	50                   	push   eax
c001ab4a:	51                   	push   ecx
c001ab4b:	53                   	push   ebx
c001ab4c:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001ab4f:	83 c4 10             	add    esp,0x10
c001ab52:	99                   	cdq    
c001ab53:	59                   	pop    ecx
c001ab54:	5b                   	pop    ebx
c001ab55:	5e                   	pop    esi
c001ab56:	c3                   	ret    
c001ab57:	59                   	pop    ecx
c001ab58:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ab5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab62:	5b                   	pop    ebx
c001ab63:	5e                   	pop    esi
c001ab64:	c3                   	ret    

c001ab65 <sysGetDiskVolumeLabel(regs*)>:
c001ab65:	57                   	push   edi
c001ab66:	56                   	push   esi
c001ab67:	53                   	push   ebx
c001ab68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab6c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ab6f:	83 fa 19             	cmp    edx,0x19
c001ab72:	77 34                	ja     c001aba8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ab74:	8b 0c 95 a0 d3 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2c60]
c001ab7b:	85 c9                	test   ecx,ecx
c001ab7d:	74 29                	je     c001aba8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ab7f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ab82:	85 db                	test   ebx,ebx
c001ab84:	74 22                	je     c001aba8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ab86:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001ab89:	85 c0                	test   eax,eax
c001ab8b:	74 1b                	je     c001aba8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ab8d:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001ab93:	83 ec 0c             	sub    esp,0xc
c001ab96:	8b 3e                	mov    edi,DWORD PTR [esi]
c001ab98:	50                   	push   eax
c001ab99:	53                   	push   ebx
c001ab9a:	52                   	push   edx
c001ab9b:	51                   	push   ecx
c001ab9c:	56                   	push   esi
c001ab9d:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001aba0:	83 c4 20             	add    esp,0x20
c001aba3:	99                   	cdq    
c001aba4:	5b                   	pop    ebx
c001aba5:	5e                   	pop    esi
c001aba6:	5f                   	pop    edi
c001aba7:	c3                   	ret    
c001aba8:	5b                   	pop    ebx
c001aba9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001abae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abb3:	5e                   	pop    esi
c001abb4:	5f                   	pop    edi
c001abb5:	c3                   	ret    

c001abb6 <sysShutdown(regs*)>:
c001abb6:	83 ec 0c             	sub    esp,0xc
c001abb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001abc0:	85 c0                	test   eax,eax
c001abc2:	74 18                	je     c001abdc <sysShutdown(regs*)+0x26>
c001abc4:	83 f8 01             	cmp    eax,0x1
c001abc7:	74 38                	je     c001ac01 <sysShutdown(regs*)+0x4b>
c001abc9:	83 f8 02             	cmp    eax,0x2
c001abcc:	74 24                	je     c001abf2 <sysShutdown(regs*)+0x3c>
c001abce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abd8:	83 c4 0c             	add    esp,0xc
c001abdb:	c3                   	ret    
c001abdc:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001abe1:	8b 10                	mov    edx,DWORD PTR [eax]
c001abe3:	6a 00                	push   0x0
c001abe5:	6a 00                	push   0x0
c001abe7:	6a 00                	push   0x0
c001abe9:	50                   	push   eax
c001abea:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001abed:	83 c4 10             	add    esp,0x10
c001abf0:	eb dc                	jmp    c001abce <sysShutdown(regs*)+0x18>
c001abf2:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001abf7:	8b 10                	mov    edx,DWORD PTR [eax]
c001abf9:	6a 00                	push   0x0
c001abfb:	6a 00                	push   0x0
c001abfd:	6a 01                	push   0x1
c001abff:	eb e8                	jmp    c001abe9 <sysShutdown(regs*)+0x33>
c001ac01:	a1 20 d4 02 c0       	mov    eax,ds:0xc002d420
c001ac06:	85 c0                	test   eax,eax
c001ac08:	74 02                	je     c001ac0c <sysShutdown(regs*)+0x56>
c001ac0a:	ff d0                	call   eax
c001ac0c:	31 c0                	xor    eax,eax
c001ac0e:	31 d2                	xor    edx,edx
c001ac10:	83 c4 0c             	add    esp,0xc
c001ac13:	c3                   	ret    

c001ac14 <sysCallRealpath(regs*)>:
c001ac14:	83 ec 0c             	sub    esp,0xc
c001ac17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac1b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001ac1e:	85 d2                	test   edx,edx
c001ac20:	74 07                	je     c001ac29 <sysCallRealpath(regs*)+0x15>
c001ac22:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001ac25:	85 c0                	test   eax,eax
c001ac27:	75 0b                	jne    c001ac34 <sysCallRealpath(regs*)+0x20>
c001ac29:	b8 01 00 00 00       	mov    eax,0x1
c001ac2e:	31 d2                	xor    edx,edx
c001ac30:	83 c4 0c             	add    esp,0xc
c001ac33:	c3                   	ret    
c001ac34:	51                   	push   ecx
c001ac35:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ac3b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ac3e:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001ac44:	51                   	push   ecx
c001ac45:	52                   	push   edx
c001ac46:	50                   	push   eax
c001ac47:	e8 38 80 ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c001ac4c:	83 c4 10             	add    esp,0x10
c001ac4f:	31 c0                	xor    eax,eax
c001ac51:	31 d2                	xor    edx,edx
c001ac53:	83 c4 0c             	add    esp,0xc
c001ac56:	c3                   	ret    

c001ac57 <sysCallReadDir(regs*)>:
c001ac57:	53                   	push   ebx
c001ac58:	83 ec 18             	sub    esp,0x18
c001ac5b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac5f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ac62:	83 f8 02             	cmp    eax,0x2
c001ac65:	76 53                	jbe    c001acba <sysCallReadDir(regs*)+0x63>
c001ac67:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ac6a:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001ac70:	77 4f                	ja     c001acc1 <sysCallReadDir(regs*)+0x6a>
c001ac72:	83 ec 0c             	sub    esp,0xc
c001ac75:	50                   	push   eax
c001ac76:	e8 14 6b ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001ac7b:	83 c4 10             	add    esp,0x10
c001ac7e:	85 c0                	test   eax,eax
c001ac80:	74 50                	je     c001acd2 <sysCallReadDir(regs*)+0x7b>
c001ac82:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac8a:	83 ec 0c             	sub    esp,0xc
c001ac8d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ac8f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ac93:	51                   	push   ecx
c001ac94:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac97:	6a 00                	push   0x0
c001ac99:	68 10 01 00 00       	push   0x110
c001ac9e:	50                   	push   eax
c001ac9f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001aca2:	83 c4 20             	add    esp,0x20
c001aca5:	85 c0                	test   eax,eax
c001aca7:	74 38                	je     c001ace1 <sysCallReadDir(regs*)+0x8a>
c001aca9:	83 f8 07             	cmp    eax,0x7
c001acac:	74 0c                	je     c001acba <sysCallReadDir(regs*)+0x63>
c001acae:	b8 02 00 00 00       	mov    eax,0x2
c001acb3:	31 d2                	xor    edx,edx
c001acb5:	83 c4 18             	add    esp,0x18
c001acb8:	5b                   	pop    ebx
c001acb9:	c3                   	ret    
c001acba:	b8 01 00 00 00       	mov    eax,0x1
c001acbf:	eb f2                	jmp    c001acb3 <sysCallReadDir(regs*)+0x5c>
c001acc1:	83 ec 08             	sub    esp,0x8
c001acc4:	52                   	push   edx
c001acc5:	68 c8 a8 02 c0       	push   0xc002a8c8
c001acca:	e8 06 7c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001accf:	83 c4 10             	add    esp,0x10
c001acd2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acdc:	83 c4 18             	add    esp,0x18
c001acdf:	5b                   	pop    ebx
c001ace0:	c3                   	ret    
c001ace1:	31 c0                	xor    eax,eax
c001ace3:	eb ce                	jmp    c001acb3 <sysCallReadDir(regs*)+0x5c>

c001ace5 <sysCallIsATTY(regs*)>:
c001ace5:	83 ec 0c             	sub    esp,0xc
c001ace8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001acef:	83 f8 02             	cmp    eax,0x2
c001acf2:	76 07                	jbe    c001acfb <sysCallIsATTY(regs*)+0x16>
c001acf4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001acf9:	75 26                	jne    c001ad21 <sysCallIsATTY(regs*)+0x3c>
c001acfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad03:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ad09:	85 c0                	test   eax,eax
c001ad0b:	74 24                	je     c001ad31 <sysCallIsATTY(regs*)+0x4c>
c001ad0d:	83 ec 0c             	sub    esp,0xc
c001ad10:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad12:	50                   	push   eax
c001ad13:	ff 12                	call   DWORD PTR [edx]
c001ad15:	31 d2                	xor    edx,edx
c001ad17:	0f b6 c0             	movzx  eax,al
c001ad1a:	83 c4 10             	add    esp,0x10
c001ad1d:	83 c4 0c             	add    esp,0xc
c001ad20:	c3                   	ret    
c001ad21:	83 ec 0c             	sub    esp,0xc
c001ad24:	50                   	push   eax
c001ad25:	e8 65 6a ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001ad2a:	83 c4 10             	add    esp,0x10
c001ad2d:	85 c0                	test   eax,eax
c001ad2f:	75 dc                	jne    c001ad0d <sysCallIsATTY(regs*)+0x28>
c001ad31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad36:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad3b:	83 c4 0c             	add    esp,0xc
c001ad3e:	c3                   	ret    

c001ad3f <sysCallSeek(regs*)>:
c001ad3f:	53                   	push   ebx
c001ad40:	83 ec 08             	sub    esp,0x8
c001ad43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ad4a:	83 f8 02             	cmp    eax,0x2
c001ad4d:	76 4a                	jbe    c001ad99 <sysCallSeek(regs*)+0x5a>
c001ad4f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ad54:	77 32                	ja     c001ad88 <sysCallSeek(regs*)+0x49>
c001ad56:	83 ec 0c             	sub    esp,0xc
c001ad59:	50                   	push   eax
c001ad5a:	e8 30 6a ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001ad5f:	83 c4 0c             	add    esp,0xc
c001ad62:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ad65:	31 db                	xor    ebx,ebx
c001ad67:	53                   	push   ebx
c001ad68:	51                   	push   ecx
c001ad69:	50                   	push   eax
c001ad6a:	e8 e1 81 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001ad6f:	83 c4 10             	add    esp,0x10
c001ad72:	85 c0                	test   eax,eax
c001ad74:	0f 95 c0             	setne  al
c001ad77:	31 d2                	xor    edx,edx
c001ad79:	0f b6 c0             	movzx  eax,al
c001ad7c:	f7 d8                	neg    eax
c001ad7e:	83 d2 00             	adc    edx,0x0
c001ad81:	83 c4 08             	add    esp,0x8
c001ad84:	f7 da                	neg    edx
c001ad86:	5b                   	pop    ebx
c001ad87:	c3                   	ret    
c001ad88:	83 ec 08             	sub    esp,0x8
c001ad8b:	50                   	push   eax
c001ad8c:	68 37 a9 02 c0       	push   0xc002a937
c001ad91:	e8 3f 7b ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001ad96:	83 c4 10             	add    esp,0x10
c001ad99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad9e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ada3:	83 c4 08             	add    esp,0x8
c001ada6:	5b                   	pop    ebx
c001ada7:	c3                   	ret    

c001ada8 <sysCallTell(regs*)>:
c001ada8:	53                   	push   ebx
c001ada9:	83 ec 08             	sub    esp,0x8
c001adac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adb0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001adb3:	83 f8 02             	cmp    eax,0x2
c001adb6:	76 5e                	jbe    c001ae16 <sysCallTell(regs*)+0x6e>
c001adb8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001adbd:	77 2d                	ja     c001adec <sysCallTell(regs*)+0x44>
c001adbf:	83 ec 0c             	sub    esp,0xc
c001adc2:	50                   	push   eax
c001adc3:	e8 c7 69 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001adc8:	5a                   	pop    edx
c001adc9:	59                   	pop    ecx
c001adca:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001adcd:	50                   	push   eax
c001adce:	e8 d3 81 ff ff       	call   c0012fa6 <File::tell(unsigned long long*)>
c001add3:	83 c4 10             	add    esp,0x10
c001add6:	85 c0                	test   eax,eax
c001add8:	0f 95 c0             	setne  al
c001addb:	31 d2                	xor    edx,edx
c001addd:	0f b6 c0             	movzx  eax,al
c001ade0:	f7 d8                	neg    eax
c001ade2:	83 d2 00             	adc    edx,0x0
c001ade5:	83 c4 08             	add    esp,0x8
c001ade8:	f7 da                	neg    edx
c001adea:	5b                   	pop    ebx
c001adeb:	c3                   	ret    
c001adec:	83 ec 08             	sub    esp,0x8
c001adef:	50                   	push   eax
c001adf0:	68 51 a9 02 c0       	push   0xc002a951
c001adf5:	e8 db 7a ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001adfa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001adfd:	83 c4 10             	add    esp,0x10
c001ae00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ae06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ae0d:	31 d2                	xor    edx,edx
c001ae0f:	31 c0                	xor    eax,eax
c001ae11:	83 c4 08             	add    esp,0x8
c001ae14:	5b                   	pop    ebx
c001ae15:	c3                   	ret    
c001ae16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae20:	83 c4 08             	add    esp,0x8
c001ae23:	5b                   	pop    ebx
c001ae24:	c3                   	ret    

c001ae25 <sysCallSize(regs*)>:
c001ae25:	53                   	push   ebx
c001ae26:	83 ec 18             	sub    esp,0x18
c001ae29:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae2d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae30:	83 f8 02             	cmp    eax,0x2
c001ae33:	76 64                	jbe    c001ae99 <sysCallSize(regs*)+0x74>
c001ae35:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ae3a:	77 33                	ja     c001ae6f <sysCallSize(regs*)+0x4a>
c001ae3c:	83 ec 0c             	sub    esp,0xc
c001ae3f:	50                   	push   eax
c001ae40:	e8 4a 69 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001ae45:	83 c4 0c             	add    esp,0xc
c001ae48:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ae4c:	52                   	push   edx
c001ae4d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ae50:	50                   	push   eax
c001ae51:	e8 e8 82 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001ae56:	83 c4 10             	add    esp,0x10
c001ae59:	85 c0                	test   eax,eax
c001ae5b:	0f 95 c0             	setne  al
c001ae5e:	31 d2                	xor    edx,edx
c001ae60:	0f b6 c0             	movzx  eax,al
c001ae63:	f7 d8                	neg    eax
c001ae65:	83 d2 00             	adc    edx,0x0
c001ae68:	83 c4 18             	add    esp,0x18
c001ae6b:	f7 da                	neg    edx
c001ae6d:	5b                   	pop    ebx
c001ae6e:	c3                   	ret    
c001ae6f:	83 ec 08             	sub    esp,0x8
c001ae72:	50                   	push   eax
c001ae73:	68 6b a9 02 c0       	push   0xc002a96b
c001ae78:	e8 58 7a ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001ae7d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ae80:	83 c4 10             	add    esp,0x10
c001ae83:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ae89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ae90:	31 d2                	xor    edx,edx
c001ae92:	31 c0                	xor    eax,eax
c001ae94:	83 c4 18             	add    esp,0x18
c001ae97:	5b                   	pop    ebx
c001ae98:	c3                   	ret    
c001ae99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae9e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aea3:	83 c4 18             	add    esp,0x18
c001aea6:	5b                   	pop    ebx
c001aea7:	c3                   	ret    

c001aea8 <sysCallSizeFromFilename(regs*)>:
c001aea8:	57                   	push   edi
c001aea9:	56                   	push   esi
c001aeaa:	53                   	push   ebx
c001aeab:	83 ec 20             	sub    esp,0x20
c001aeae:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aeb2:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001aeb5:	83 fb 02             	cmp    ebx,0x2
c001aeb8:	0f 86 99 00 00 00    	jbe    c001af57 <sysCallSizeFromFilename(regs*)+0xaf>
c001aebe:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001aec4:	77 65                	ja     c001af2b <sysCallSizeFromFilename(regs*)+0x83>
c001aec6:	83 ec 0c             	sub    esp,0xc
c001aec9:	68 14 01 00 00       	push   0x114
c001aece:	e8 51 47 ff ff       	call   c000f624 <malloc>
c001aed3:	83 c4 0c             	add    esp,0xc
c001aed6:	89 c6                	mov    esi,eax
c001aed8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aedd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aee0:	53                   	push   ebx
c001aee1:	56                   	push   esi
c001aee2:	e8 47 7f ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001aee7:	83 c4 0c             	add    esp,0xc
c001aeea:	8d 44 24 23          	lea    eax,[esp+0x23]
c001aeee:	50                   	push   eax
c001aeef:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001aef2:	56                   	push   esi
c001aef3:	e8 46 82 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001aef8:	83 c4 10             	add    esp,0x10
c001aefb:	85 f6                	test   esi,esi
c001aefd:	74 14                	je     c001af13 <sysCallSizeFromFilename(regs*)+0x6b>
c001aeff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af03:	8b 16                	mov    edx,DWORD PTR [esi]
c001af05:	83 ec 0c             	sub    esp,0xc
c001af08:	56                   	push   esi
c001af09:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001af0c:	83 c4 10             	add    esp,0x10
c001af0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af13:	85 c0                	test   eax,eax
c001af15:	0f 95 c0             	setne  al
c001af18:	31 d2                	xor    edx,edx
c001af1a:	0f b6 c0             	movzx  eax,al
c001af1d:	f7 d8                	neg    eax
c001af1f:	83 d2 00             	adc    edx,0x0
c001af22:	83 c4 20             	add    esp,0x20
c001af25:	f7 da                	neg    edx
c001af27:	5b                   	pop    ebx
c001af28:	5e                   	pop    esi
c001af29:	5f                   	pop    edi
c001af2a:	c3                   	ret    
c001af2b:	83 ec 08             	sub    esp,0x8
c001af2e:	53                   	push   ebx
c001af2f:	68 6b a9 02 c0       	push   0xc002a96b
c001af34:	e8 9c 79 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001af39:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001af3c:	83 c4 10             	add    esp,0x10
c001af3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001af45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001af4c:	31 d2                	xor    edx,edx
c001af4e:	83 c4 20             	add    esp,0x20
c001af51:	31 c0                	xor    eax,eax
c001af53:	5b                   	pop    ebx
c001af54:	5e                   	pop    esi
c001af55:	5f                   	pop    edi
c001af56:	c3                   	ret    
c001af57:	83 c4 20             	add    esp,0x20
c001af5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af5f:	5b                   	pop    ebx
c001af60:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af65:	5e                   	pop    esi
c001af66:	5f                   	pop    edi
c001af67:	c3                   	ret    

c001af68 <sysCallClose(regs*)>:
c001af68:	53                   	push   ebx
c001af69:	83 ec 08             	sub    esp,0x8
c001af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001af73:	83 f8 02             	cmp    eax,0x2
c001af76:	76 50                	jbe    c001afc8 <sysCallClose(regs*)+0x60>
c001af78:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001af7d:	74 58                	je     c001afd7 <sysCallClose(regs*)+0x6f>
c001af7f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001af84:	74 60                	je     c001afe6 <sysCallClose(regs*)+0x7e>
c001af86:	77 2f                	ja     c001afb7 <sysCallClose(regs*)+0x4f>
c001af88:	83 ec 0c             	sub    esp,0xc
c001af8b:	50                   	push   eax
c001af8c:	e8 fe 67 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001af91:	89 c3                	mov    ebx,eax
c001af93:	89 04 24             	mov    DWORD PTR [esp],eax
c001af96:	e8 55 7f ff ff       	call   c0012ef0 <File::close()>
c001af9b:	83 c4 10             	add    esp,0x10
c001af9e:	85 db                	test   ebx,ebx
c001afa0:	74 0c                	je     c001afae <sysCallClose(regs*)+0x46>
c001afa2:	83 ec 0c             	sub    esp,0xc
c001afa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afa7:	53                   	push   ebx
c001afa8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afab:	83 c4 10             	add    esp,0x10
c001afae:	31 c0                	xor    eax,eax
c001afb0:	31 d2                	xor    edx,edx
c001afb2:	83 c4 08             	add    esp,0x8
c001afb5:	5b                   	pop    ebx
c001afb6:	c3                   	ret    
c001afb7:	83 ec 08             	sub    esp,0x8
c001afba:	50                   	push   eax
c001afbb:	68 ec a8 02 c0       	push   0xc002a8ec
c001afc0:	e8 10 79 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001afc5:	83 c4 10             	add    esp,0x10
c001afc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001afcd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afd2:	83 c4 08             	add    esp,0x8
c001afd5:	5b                   	pop    ebx
c001afd6:	c3                   	ret    
c001afd7:	83 ec 0c             	sub    esp,0xc
c001afda:	68 86 a9 02 c0       	push   0xc002a986
c001afdf:	e8 f1 78 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001afe4:	eb c5                	jmp    c001afab <sysCallClose(regs*)+0x43>
c001afe6:	83 ec 0c             	sub    esp,0xc
c001afe9:	68 94 a9 02 c0       	push   0xc002a994
c001afee:	eb ef                	jmp    c001afdf <sysCallClose(regs*)+0x77>

c001aff0 <sysCallOpenDir(regs*)>:
c001aff0:	56                   	push   esi
c001aff1:	53                   	push   ebx
c001aff2:	53                   	push   ebx
c001aff3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aff7:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001affa:	85 f6                	test   esi,esi
c001affc:	74 59                	je     c001b057 <sysCallOpenDir(regs*)+0x67>
c001affe:	83 ec 0c             	sub    esp,0xc
c001b001:	68 14 01 00 00       	push   0x114
c001b006:	e8 19 46 ff ff       	call   c000f624 <malloc>
c001b00b:	83 c4 0c             	add    esp,0xc
c001b00e:	89 c6                	mov    esi,eax
c001b010:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b015:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b018:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b01b:	56                   	push   esi
c001b01c:	e8 b9 82 ff ff       	call   c00132da <Directory::Directory(char const*, Process*)>
c001b021:	83 c4 10             	add    esp,0x10
c001b024:	85 f6                	test   esi,esi
c001b026:	74 2f                	je     c001b057 <sysCallOpenDir(regs*)+0x67>
c001b028:	83 ec 0c             	sub    esp,0xc
c001b02b:	56                   	push   esi
c001b02c:	e8 0d 83 ff ff       	call   c001333e <Directory::open()>
c001b031:	83 c4 10             	add    esp,0x10
c001b034:	85 c0                	test   eax,eax
c001b036:	75 1f                	jne    c001b057 <sysCallOpenDir(regs*)+0x67>
c001b038:	83 ec 0c             	sub    esp,0xc
c001b03b:	56                   	push   esi
c001b03c:	e8 59 64 ff ff       	call   c001149a <UnixFile::getFileDescriptor()>
c001b041:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b044:	83 c4 10             	add    esp,0x10
c001b047:	89 02                	mov    DWORD PTR [edx],eax
c001b049:	c1 f8 1f             	sar    eax,0x1f
c001b04c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b04f:	31 c0                	xor    eax,eax
c001b051:	59                   	pop    ecx
c001b052:	31 d2                	xor    edx,edx
c001b054:	5b                   	pop    ebx
c001b055:	5e                   	pop    esi
c001b056:	c3                   	ret    
c001b057:	59                   	pop    ecx
c001b058:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b05d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b062:	5b                   	pop    ebx
c001b063:	5e                   	pop    esi
c001b064:	c3                   	ret    

c001b065 <sysCallCloseDir(regs*)>:
c001b065:	53                   	push   ebx
c001b066:	83 ec 08             	sub    esp,0x8
c001b069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b06d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b070:	83 f8 02             	cmp    eax,0x2
c001b073:	76 47                	jbe    c001b0bc <sysCallCloseDir(regs*)+0x57>
c001b075:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b07a:	77 2f                	ja     c001b0ab <sysCallCloseDir(regs*)+0x46>
c001b07c:	83 ec 0c             	sub    esp,0xc
c001b07f:	50                   	push   eax
c001b080:	e8 0a 67 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001b085:	89 c3                	mov    ebx,eax
c001b087:	89 04 24             	mov    DWORD PTR [esp],eax
c001b08a:	e8 0b 83 ff ff       	call   c001339a <Directory::close()>
c001b08f:	83 c4 10             	add    esp,0x10
c001b092:	85 db                	test   ebx,ebx
c001b094:	74 0c                	je     c001b0a2 <sysCallCloseDir(regs*)+0x3d>
c001b096:	83 ec 0c             	sub    esp,0xc
c001b099:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b09b:	53                   	push   ebx
c001b09c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b09f:	83 c4 10             	add    esp,0x10
c001b0a2:	31 c0                	xor    eax,eax
c001b0a4:	31 d2                	xor    edx,edx
c001b0a6:	83 c4 08             	add    esp,0x8
c001b0a9:	5b                   	pop    ebx
c001b0aa:	c3                   	ret    
c001b0ab:	83 ec 08             	sub    esp,0x8
c001b0ae:	50                   	push   eax
c001b0af:	68 14 a9 02 c0       	push   0xc002a914
c001b0b4:	e8 1c 78 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001b0b9:	83 c4 10             	add    esp,0x10
c001b0bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b0c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0c6:	83 c4 08             	add    esp,0x8
c001b0c9:	5b                   	pop    ebx
c001b0ca:	c3                   	ret    

c001b0cb <sysCallMakeDir(regs*)>:
c001b0cb:	56                   	push   esi
c001b0cc:	53                   	push   ebx
c001b0cd:	83 ec 10             	sub    esp,0x10
c001b0d0:	68 14 01 00 00       	push   0x114
c001b0d5:	e8 4a 45 ff ff       	call   c000f624 <malloc>
c001b0da:	83 c4 0c             	add    esp,0xc
c001b0dd:	89 c3                	mov    ebx,eax
c001b0df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0eb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b0ee:	53                   	push   ebx
c001b0ef:	e8 e6 81 ff ff       	call   c00132da <Directory::Directory(char const*, Process*)>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	85 db                	test   ebx,ebx
c001b0f9:	74 32                	je     c001b12d <sysCallMakeDir(regs*)+0x62>
c001b0fb:	83 ec 0c             	sub    esp,0xc
c001b0fe:	53                   	push   ebx
c001b0ff:	e8 1a 84 ff ff       	call   c001351e <Directory::create()>
c001b104:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b107:	89 c6                	mov    esi,eax
c001b109:	e8 8c 82 ff ff       	call   c001339a <Directory::close()>
c001b10e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b110:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b113:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b116:	83 c4 10             	add    esp,0x10
c001b119:	31 c0                	xor    eax,eax
c001b11b:	59                   	pop    ecx
c001b11c:	85 f6                	test   esi,esi
c001b11e:	5b                   	pop    ebx
c001b11f:	0f 95 c0             	setne  al
c001b122:	5e                   	pop    esi
c001b123:	31 d2                	xor    edx,edx
c001b125:	f7 d8                	neg    eax
c001b127:	83 d2 00             	adc    edx,0x0
c001b12a:	f7 da                	neg    edx
c001b12c:	c3                   	ret    
c001b12d:	59                   	pop    ecx
c001b12e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b133:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b138:	5b                   	pop    ebx
c001b139:	5e                   	pop    esi
c001b13a:	c3                   	ret    

c001b13b <sysCallWait(regs*)>:
c001b13b:	83 ec 10             	sub    esp,0x10
c001b13e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b142:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b145:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b148:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b14b:	e8 d9 23 00 00       	call   c001d529 <waitTask(int, int*, int)>
c001b150:	83 c4 1c             	add    esp,0x1c
c001b153:	99                   	cdq    
c001b154:	c3                   	ret    

c001b155 <sysCallNotImpl(regs*)>:
c001b155:	83 ec 18             	sub    esp,0x18
c001b158:	68 a2 a9 02 c0       	push   0xc002a9a2
c001b15d:	e8 61 e9 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001b162:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b167:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b16c:	83 c4 1c             	add    esp,0x1c
c001b16f:	c3                   	ret    

c001b170 <sysPanic(regs*)>:
c001b170:	83 ec 18             	sub    esp,0x18
c001b173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b177:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b17a:	e8 44 e9 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001b17f:	c7 04 24 bc a9 02 c0 	mov    DWORD PTR [esp],0xc002a9bc
c001b186:	e8 38 e9 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001b18b:	b8 01 00 00 00       	mov    eax,0x1
c001b190:	31 d2                	xor    edx,edx
c001b192:	83 c4 1c             	add    esp,0x1c
c001b195:	c3                   	ret    

c001b196 <sysCallRmdir(regs*)>:
c001b196:	56                   	push   esi
c001b197:	53                   	push   ebx
c001b198:	83 ec 20             	sub    esp,0x20
c001b19b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b19f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b1a2:	68 14 01 00 00       	push   0x114
c001b1a7:	e8 78 44 ff ff       	call   c000f624 <malloc>
c001b1ac:	83 c4 0c             	add    esp,0xc
c001b1af:	89 c3                	mov    ebx,eax
c001b1b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1b6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1b9:	56                   	push   esi
c001b1ba:	53                   	push   ebx
c001b1bb:	e8 6e 7c ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001b1c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1c3:	e8 42 7e ff ff       	call   c001300a <File::unlink()>
c001b1c8:	83 c4 10             	add    esp,0x10
c001b1cb:	85 db                	test   ebx,ebx
c001b1cd:	74 14                	je     c001b1e3 <sysCallRmdir(regs*)+0x4d>
c001b1cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b1d5:	83 ec 0c             	sub    esp,0xc
c001b1d8:	53                   	push   ebx
c001b1d9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b1dc:	83 c4 10             	add    esp,0x10
c001b1df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1e3:	85 c0                	test   eax,eax
c001b1e5:	0f 95 c0             	setne  al
c001b1e8:	31 d2                	xor    edx,edx
c001b1ea:	0f b6 c0             	movzx  eax,al
c001b1ed:	f7 d8                	neg    eax
c001b1ef:	83 d2 00             	adc    edx,0x0
c001b1f2:	83 c4 14             	add    esp,0x14
c001b1f5:	f7 da                	neg    edx
c001b1f7:	5b                   	pop    ebx
c001b1f8:	5e                   	pop    esi
c001b1f9:	c3                   	ret    

c001b1fa <sysCallUnlink(regs*)>:
c001b1fa:	56                   	push   esi
c001b1fb:	53                   	push   ebx
c001b1fc:	83 ec 20             	sub    esp,0x20
c001b1ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b203:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b206:	68 14 01 00 00       	push   0x114
c001b20b:	e8 14 44 ff ff       	call   c000f624 <malloc>
c001b210:	83 c4 0c             	add    esp,0xc
c001b213:	89 c3                	mov    ebx,eax
c001b215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b21a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b21d:	56                   	push   esi
c001b21e:	53                   	push   ebx
c001b21f:	e8 0a 7c ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001b224:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b227:	e8 de 7d ff ff       	call   c001300a <File::unlink()>
c001b22c:	83 c4 10             	add    esp,0x10
c001b22f:	85 db                	test   ebx,ebx
c001b231:	74 14                	je     c001b247 <sysCallUnlink(regs*)+0x4d>
c001b233:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b237:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b239:	83 ec 0c             	sub    esp,0xc
c001b23c:	53                   	push   ebx
c001b23d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b240:	83 c4 10             	add    esp,0x10
c001b243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b247:	85 c0                	test   eax,eax
c001b249:	0f 95 c0             	setne  al
c001b24c:	31 d2                	xor    edx,edx
c001b24e:	0f b6 c0             	movzx  eax,al
c001b251:	f7 d8                	neg    eax
c001b253:	83 d2 00             	adc    edx,0x0
c001b256:	83 c4 14             	add    esp,0x14
c001b259:	f7 da                	neg    edx
c001b25b:	5b                   	pop    ebx
c001b25c:	5e                   	pop    esi
c001b25d:	c3                   	ret    

c001b25e <sysCallGetArgv(regs*)>:
c001b25e:	83 ec 0c             	sub    esp,0xc
c001b261:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b265:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b268:	85 c0                	test   eax,eax
c001b26a:	78 2b                	js     c001b297 <sysCallGetArgv(regs*)+0x39>
c001b26c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b272:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b275:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b27b:	7d 1a                	jge    c001b297 <sysCallGetArgv(regs*)+0x39>
c001b27d:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b284:	85 c0                	test   eax,eax
c001b286:	74 17                	je     c001b29f <sysCallGetArgv(regs*)+0x41>
c001b288:	83 ec 08             	sub    esp,0x8
c001b28b:	50                   	push   eax
c001b28c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b28f:	e8 cf 54 fe ff       	call   c0000763 <strcpy>
c001b294:	83 c4 10             	add    esp,0x10
c001b297:	31 c0                	xor    eax,eax
c001b299:	31 d2                	xor    edx,edx
c001b29b:	83 c4 0c             	add    esp,0xc
c001b29e:	c3                   	ret    
c001b29f:	b8 01 00 00 00       	mov    eax,0x1
c001b2a4:	31 d2                	xor    edx,edx
c001b2a6:	83 c4 0c             	add    esp,0xc
c001b2a9:	c3                   	ret    

c001b2aa <sysCallTTYName(regs*)>:
c001b2aa:	56                   	push   esi
c001b2ab:	53                   	push   ebx
c001b2ac:	53                   	push   ebx
c001b2ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2b1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b2b4:	85 c0                	test   eax,eax
c001b2b6:	74 5f                	je     c001b317 <sysCallTTYName(regs*)+0x6d>
c001b2b8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b2bb:	83 f8 02             	cmp    eax,0x2
c001b2be:	77 3e                	ja     c001b2fe <sysCallTTYName(regs*)+0x54>
c001b2c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2c8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b2ce:	85 db                	test   ebx,ebx
c001b2d0:	74 45                	je     c001b317 <sysCallTTYName(regs*)+0x6d>
c001b2d2:	83 ec 0c             	sub    esp,0xc
c001b2d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2d7:	53                   	push   ebx
c001b2d8:	ff 10                	call   DWORD PTR [eax]
c001b2da:	83 c4 10             	add    esp,0x10
c001b2dd:	84 c0                	test   al,al
c001b2df:	74 41                	je     c001b322 <sysCallTTYName(regs*)+0x78>
c001b2e1:	83 ec 08             	sub    esp,0x8
c001b2e4:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b2ea:	53                   	push   ebx
c001b2eb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b2ee:	e8 70 54 fe ff       	call   c0000763 <strcpy>
c001b2f3:	83 c4 10             	add    esp,0x10
c001b2f6:	31 c0                	xor    eax,eax
c001b2f8:	59                   	pop    ecx
c001b2f9:	31 d2                	xor    edx,edx
c001b2fb:	5b                   	pop    ebx
c001b2fc:	5e                   	pop    esi
c001b2fd:	c3                   	ret    
c001b2fe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b303:	74 bb                	je     c001b2c0 <sysCallTTYName(regs*)+0x16>
c001b305:	83 ec 0c             	sub    esp,0xc
c001b308:	50                   	push   eax
c001b309:	e8 81 64 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001b30e:	83 c4 10             	add    esp,0x10
c001b311:	89 c3                	mov    ebx,eax
c001b313:	85 db                	test   ebx,ebx
c001b315:	75 bb                	jne    c001b2d2 <sysCallTTYName(regs*)+0x28>
c001b317:	59                   	pop    ecx
c001b318:	b8 01 00 00 00       	mov    eax,0x1
c001b31d:	31 d2                	xor    edx,edx
c001b31f:	5b                   	pop    ebx
c001b320:	5e                   	pop    esi
c001b321:	c3                   	ret    
c001b322:	59                   	pop    ecx
c001b323:	b8 02 00 00 00       	mov    eax,0x2
c001b328:	31 d2                	xor    edx,edx
c001b32a:	5b                   	pop    ebx
c001b32b:	5e                   	pop    esi
c001b32c:	c3                   	ret    

c001b32d <sysCallUSleep(regs*)>:
c001b32d:	83 ec 14             	sub    esp,0x14
c001b330:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b335:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b339:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b340:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b343:	01 ca                	add    edx,ecx
c001b345:	52                   	push   edx
c001b346:	50                   	push   eax
c001b347:	e8 76 22 00 00       	call   c001d5c2 <nanoSleep(unsigned long long)>
c001b34c:	31 c0                	xor    eax,eax
c001b34e:	31 d2                	xor    edx,edx
c001b350:	83 c4 1c             	add    esp,0x1c
c001b353:	c3                   	ret    

c001b354 <sysCallSpawn(regs*)>:
c001b354:	56                   	push   esi
c001b355:	53                   	push   ebx
c001b356:	53                   	push   ebx
c001b357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b35b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b35e:	85 f6                	test   esi,esi
c001b360:	75 08                	jne    c001b36a <sysCallSpawn(regs*)+0x16>
c001b362:	59                   	pop    ecx
c001b363:	31 c0                	xor    eax,eax
c001b365:	31 d2                	xor    edx,edx
c001b367:	5b                   	pop    ebx
c001b368:	5e                   	pop    esi
c001b369:	c3                   	ret    
c001b36a:	83 ec 0c             	sub    esp,0xc
c001b36d:	68 3f 07 00 00       	push   0x73f
c001b372:	e8 ad 42 ff ff       	call   c000f624 <malloc>
c001b377:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b37a:	89 c6                	mov    esi,eax
c001b37c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b381:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b384:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b387:	56                   	push   esi
c001b388:	e8 35 19 00 00       	call   c001ccc2 <Process::Process(char const*, Process*, char**)>
c001b38d:	83 c4 20             	add    esp,0x20
c001b390:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b397:	75 c9                	jne    c001b362 <sysCallSpawn(regs*)+0xe>
c001b399:	83 ec 0c             	sub    esp,0xc
c001b39c:	56                   	push   esi
c001b39d:	e8 e6 1e 00 00       	call   c001d288 <Process::createUserThread()>
c001b3a2:	8b 06                	mov    eax,DWORD PTR [esi]
c001b3a4:	83 c4 10             	add    esp,0x10
c001b3a7:	99                   	cdq    
c001b3a8:	59                   	pop    ecx
c001b3a9:	5b                   	pop    ebx
c001b3aa:	5e                   	pop    esi
c001b3ab:	c3                   	ret    

c001b3ac <sysCallGetEnv(regs*)>:
c001b3ac:	57                   	push   edi
c001b3ad:	56                   	push   esi
c001b3ae:	53                   	push   ebx
c001b3af:	83 ec 1c             	sub    esp,0x1c
c001b3b2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b3b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3bb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b3be:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b3c1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3c4:	e8 16 e6 ff ff       	call   c00199df <Krnl::getProcessTotalEnvCount(Process*)>
c001b3c9:	83 c4 10             	add    esp,0x10
c001b3cc:	39 c7                	cmp    edi,eax
c001b3ce:	7c 14                	jl     c001b3e4 <sysCallGetEnv(regs*)+0x38>
c001b3d0:	85 f6                	test   esi,esi
c001b3d2:	75 0b                	jne    c001b3df <sysCallGetEnv(regs*)+0x33>
c001b3d4:	83 c4 10             	add    esp,0x10
c001b3d7:	31 c0                	xor    eax,eax
c001b3d9:	5b                   	pop    ebx
c001b3da:	31 d2                	xor    edx,edx
c001b3dc:	5e                   	pop    esi
c001b3dd:	5f                   	pop    edi
c001b3de:	c3                   	ret    
c001b3df:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b3e2:	eb f0                	jmp    c001b3d4 <sysCallGetEnv(regs*)+0x28>
c001b3e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b3e8:	52                   	push   edx
c001b3e9:	57                   	push   edi
c001b3ea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b3f0:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b3f3:	50                   	push   eax
c001b3f4:	e8 06 e6 ff ff       	call   c00199ff <Krnl::getProcessEnvPair(Process*, int)>
c001b3f9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b3fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b400:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b404:	83 c4 0c             	add    esp,0xc
c001b407:	85 c9                	test   ecx,ecx
c001b409:	75 23                	jne    c001b42e <sysCallGetEnv(regs*)+0x82>
c001b40b:	83 ec 0c             	sub    esp,0xc
c001b40e:	50                   	push   eax
c001b40f:	e8 cd 52 fe ff       	call   c00006e1 <strlen>
c001b414:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b417:	89 c3                	mov    ebx,eax
c001b419:	e8 c3 52 fe ff       	call   c00006e1 <strlen>
c001b41e:	83 c4 10             	add    esp,0x10
c001b421:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b425:	83 c4 10             	add    esp,0x10
c001b428:	31 d2                	xor    edx,edx
c001b42a:	5b                   	pop    ebx
c001b42b:	5e                   	pop    esi
c001b42c:	5f                   	pop    edi
c001b42d:	c3                   	ret    
c001b42e:	83 ec 08             	sub    esp,0x8
c001b431:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b434:	50                   	push   eax
c001b435:	56                   	push   esi
c001b436:	e8 28 53 fe ff       	call   c0000763 <strcpy>
c001b43b:	58                   	pop    eax
c001b43c:	5a                   	pop    edx
c001b43d:	68 cb a9 02 c0       	push   0xc002a9cb
c001b442:	56                   	push   esi
c001b443:	e8 d2 53 fe ff       	call   c000081a <strcat>
c001b448:	59                   	pop    ecx
c001b449:	5b                   	pop    ebx
c001b44a:	57                   	push   edi
c001b44b:	56                   	push   esi
c001b44c:	e8 c9 53 fe ff       	call   c000081a <strcat>
c001b451:	83 c4 10             	add    esp,0x10
c001b454:	e9 7b ff ff ff       	jmp    c001b3d4 <sysCallGetEnv(regs*)+0x28>

c001b459 <sysAppSettings(regs*)>:
c001b459:	53                   	push   ebx
c001b45a:	83 ec 08             	sub    esp,0x8
c001b45d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b461:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b464:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b46a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b46f:	66 3d c0 09          	cmp    ax,0x9c0
c001b473:	75 2f                	jne    c001b4a4 <sysAppSettings(regs*)+0x4b>
c001b475:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b47b:	83 e0 1f             	and    eax,0x1f
c001b47e:	3c 01                	cmp    al,0x1
c001b480:	74 2e                	je     c001b4b0 <sysAppSettings(regs*)+0x57>
c001b482:	3c 07                	cmp    al,0x7
c001b484:	0f 84 bd 00 00 00    	je     c001b547 <sysAppSettings(regs*)+0xee>
c001b48a:	84 c0                	test   al,al
c001b48c:	0f 84 dc 00 00 00    	je     c001b56e <sysAppSettings(regs*)+0x115>
c001b492:	3c 08                	cmp    al,0x8
c001b494:	74 6d                	je     c001b503 <sysAppSettings(regs*)+0xaa>
c001b496:	0f b6 c0             	movzx  eax,al
c001b499:	83 c4 08             	add    esp,0x8
c001b49c:	05 e8 03 00 00       	add    eax,0x3e8
c001b4a1:	5b                   	pop    ebx
c001b4a2:	99                   	cdq    
c001b4a3:	c3                   	ret    
c001b4a4:	b8 01 00 00 00       	mov    eax,0x1
c001b4a9:	31 d2                	xor    edx,edx
c001b4ab:	83 c4 08             	add    esp,0x8
c001b4ae:	5b                   	pop    ebx
c001b4af:	c3                   	ret    
c001b4b0:	51                   	push   ecx
c001b4b1:	68 00 01 00 00       	push   0x100
c001b4b6:	6a 00                	push   0x0
c001b4b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4c0:	83 c0 0c             	add    eax,0xc
c001b4c3:	50                   	push   eax
c001b4c4:	e8 fb 51 fe ff       	call   c00006c4 <memset>
c001b4c9:	83 c4 0c             	add    esp,0xc
c001b4cc:	68 ff 00 00 00       	push   0xff
c001b4d1:	53                   	push   ebx
c001b4d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4da:	83 c0 0c             	add    eax,0xc
c001b4dd:	50                   	push   eax
c001b4de:	e8 bd 51 fe ff       	call   c00006a0 <memcpy>
c001b4e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4e8:	5b                   	pop    ebx
c001b4e9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4ec:	5a                   	pop    edx
c001b4ed:	8d 50 0c             	lea    edx,[eax+0xc]
c001b4f0:	52                   	push   edx
c001b4f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b4f7:	e8 0e 54 ff ff       	call   c001090a <VgaText::setTitle(char*)>
c001b4fc:	83 c4 10             	add    esp,0x10
c001b4ff:	31 c0                	xor    eax,eax
c001b501:	eb a6                	jmp    c001b4a9 <sysAppSettings(regs*)+0x50>
c001b503:	83 ec 08             	sub    esp,0x8
c001b506:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b50c:	83 e0 0f             	and    eax,0xf
c001b50f:	50                   	push   eax
c001b510:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b515:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b518:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b51e:	e8 d7 53 ff ff       	call   c00108fa <VgaText::setTitleColour(VgaColour)>
c001b523:	58                   	pop    eax
c001b524:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b52a:	5a                   	pop    edx
c001b52b:	c1 e8 04             	shr    eax,0x4
c001b52e:	83 e0 0f             	and    eax,0xf
c001b531:	50                   	push   eax
c001b532:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b537:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b53a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b540:	e8 a5 53 ff ff       	call   c00108ea <VgaText::setTitleTextColour(VgaColour)>
c001b545:	eb b5                	jmp    c001b4fc <sysAppSettings(regs*)+0xa3>
c001b547:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b54c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b54f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b555:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b55b:	c0 e8 06             	shr    al,0x6
c001b55e:	83 e0 01             	and    eax,0x1
c001b561:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b567:	31 c0                	xor    eax,eax
c001b569:	e9 3b ff ff ff       	jmp    c001b4a9 <sysAppSettings(regs*)+0x50>
c001b56e:	b8 02 00 00 00       	mov    eax,0x2
c001b573:	e9 31 ff ff ff       	jmp    c001b4a9 <sysAppSettings(regs*)+0x50>

c001b578 <sysSetFatAttrib(regs*)>:
c001b578:	57                   	push   edi
c001b579:	56                   	push   esi
c001b57a:	53                   	push   ebx
c001b57b:	83 ec 1c             	sub    esp,0x1c
c001b57e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b582:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b585:	68 14 01 00 00       	push   0x114
c001b58a:	e8 95 40 ff ff       	call   c000f624 <malloc>
c001b58f:	83 c4 0c             	add    esp,0xc
c001b592:	89 c3                	mov    ebx,eax
c001b594:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b599:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b59c:	57                   	push   edi
c001b59d:	53                   	push   ebx
c001b59e:	e8 8b 78 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001b5a3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b5a6:	83 c4 0c             	add    esp,0xc
c001b5a9:	0f b6 d4             	movzx  edx,ah
c001b5ac:	0f b6 c0             	movzx  eax,al
c001b5af:	52                   	push   edx
c001b5b0:	50                   	push   eax
c001b5b1:	53                   	push   ebx
c001b5b2:	e8 ed 7a ff ff       	call   c00130a4 <File::chfatattr(unsigned char, unsigned char)>
c001b5b7:	83 c4 10             	add    esp,0x10
c001b5ba:	85 db                	test   ebx,ebx
c001b5bc:	74 14                	je     c001b5d2 <sysSetFatAttrib(regs*)+0x5a>
c001b5be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5c2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	53                   	push   ebx
c001b5c8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b5cb:	83 c4 10             	add    esp,0x10
c001b5ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5d2:	85 c0                	test   eax,eax
c001b5d4:	0f 95 c0             	setne  al
c001b5d7:	31 d2                	xor    edx,edx
c001b5d9:	0f b6 c0             	movzx  eax,al
c001b5dc:	f7 d8                	neg    eax
c001b5de:	83 d2 00             	adc    edx,0x0
c001b5e1:	83 c4 10             	add    esp,0x10
c001b5e4:	f7 da                	neg    edx
c001b5e6:	5b                   	pop    ebx
c001b5e7:	5e                   	pop    esi
c001b5e8:	5f                   	pop    edi
c001b5e9:	c3                   	ret    

c001b5ea <sysPipe(regs*)>:
c001b5ea:	57                   	push   edi
c001b5eb:	56                   	push   esi
c001b5ec:	53                   	push   ebx
c001b5ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f1:	83 ec 0c             	sub    esp,0xc
c001b5f4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b5f7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b5fa:	6a 20                	push   0x20
c001b5fc:	e8 23 40 ff ff       	call   c000f624 <malloc>
c001b601:	89 c3                	mov    ebx,eax
c001b603:	58                   	pop    eax
c001b604:	5a                   	pop    edx
c001b605:	68 00 50 00 00       	push   0x5000
c001b60a:	53                   	push   ebx
c001b60b:	e8 2a 4c ff ff       	call   c001023a <Pipe::Pipe(int)>
c001b610:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b613:	e8 82 5e ff ff       	call   c001149a <UnixFile::getFileDescriptor()>
c001b618:	89 07                	mov    DWORD PTR [edi],eax
c001b61a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b61d:	e8 78 5e ff ff       	call   c001149a <UnixFile::getFileDescriptor()>
c001b622:	83 c4 10             	add    esp,0x10
c001b625:	89 06                	mov    DWORD PTR [esi],eax
c001b627:	31 d2                	xor    edx,edx
c001b629:	5b                   	pop    ebx
c001b62a:	31 c0                	xor    eax,eax
c001b62c:	5e                   	pop    esi
c001b62d:	5f                   	pop    edi
c001b62e:	c3                   	ret    

c001b62f <sysGetUnixTime(regs*)>:
c001b62f:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001b634:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b63a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b63e:	e9 d5 81 ff ff       	jmp    c0013818 <Clock::timeInSecondsLocal()>

c001b643 <string_ends_with(char const*, char const*)>:
c001b643:	57                   	push   edi
c001b644:	56                   	push   esi
c001b645:	53                   	push   ebx
c001b646:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b64a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b64e:	83 ec 0c             	sub    esp,0xc
c001b651:	53                   	push   ebx
c001b652:	e8 8a 50 fe ff       	call   c00006e1 <strlen>
c001b657:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b65a:	89 c6                	mov    esi,eax
c001b65c:	e8 80 50 fe ff       	call   c00006e1 <strlen>
c001b661:	83 c4 10             	add    esp,0x10
c001b664:	39 c6                	cmp    esi,eax
c001b666:	7d 06                	jge    c001b66e <string_ends_with(char const*, char const*)+0x2b>
c001b668:	5b                   	pop    ebx
c001b669:	31 c0                	xor    eax,eax
c001b66b:	5e                   	pop    esi
c001b66c:	5f                   	pop    edi
c001b66d:	c3                   	ret    
c001b66e:	83 ec 08             	sub    esp,0x8
c001b671:	29 c6                	sub    esi,eax
c001b673:	57                   	push   edi
c001b674:	01 f3                	add    ebx,esi
c001b676:	53                   	push   ebx
c001b677:	e8 38 51 fe ff       	call   c00007b4 <strcmp>
c001b67c:	83 c4 10             	add    esp,0x10
c001b67f:	85 c0                	test   eax,eax
c001b681:	5b                   	pop    ebx
c001b682:	0f 94 c0             	sete   al
c001b685:	5e                   	pop    esi
c001b686:	0f b6 c0             	movzx  eax,al
c001b689:	5f                   	pop    edi
c001b68a:	c3                   	ret    

c001b68b <sysCallOpen(regs*)>:
c001b68b:	56                   	push   esi
c001b68c:	53                   	push   ebx
c001b68d:	81 ec 04 01 00 00    	sub    esp,0x104
c001b693:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b69a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b69d:	85 c9                	test   ecx,ecx
c001b69f:	0f 84 b3 00 00 00    	je     c001b758 <sysCallOpen(regs*)+0xcd>
c001b6a5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b6a8:	85 c0                	test   eax,eax
c001b6aa:	0f 84 a8 00 00 00    	je     c001b758 <sysCallOpen(regs*)+0xcd>
c001b6b0:	52                   	push   edx
c001b6b1:	68 cd a9 02 c0       	push   0xc002a9cd
c001b6b6:	50                   	push   eax
c001b6b7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b6bb:	56                   	push   esi
c001b6bc:	e8 c3 75 ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b6c1:	89 34 24             	mov    DWORD PTR [esp],esi
c001b6c4:	e8 18 50 fe ff       	call   c00006e1 <strlen>
c001b6c9:	83 c4 10             	add    esp,0x10
c001b6cc:	48                   	dec    eax
c001b6cd:	74 1d                	je     c001b6ec <sysCallOpen(regs*)+0x61>
c001b6cf:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b6d2:	eb 0f                	jmp    c001b6e3 <sysCallOpen(regs*)+0x58>
c001b6d4:	80 fa 3a             	cmp    dl,0x3a
c001b6d7:	74 0f                	je     c001b6e8 <sysCallOpen(regs*)+0x5d>
c001b6d9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b6dd:	48                   	dec    eax
c001b6de:	74 0c                	je     c001b6ec <sysCallOpen(regs*)+0x61>
c001b6e0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b6e3:	80 fa 2e             	cmp    dl,0x2e
c001b6e6:	75 ec                	jne    c001b6d4 <sysCallOpen(regs*)+0x49>
c001b6e8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b6ec:	83 ec 08             	sub    esp,0x8
c001b6ef:	68 d1 a9 02 c0       	push   0xc002a9d1
c001b6f4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6f7:	e8 47 ff ff ff       	call   c001b643 <string_ends_with(char const*, char const*)>
c001b6fc:	83 c4 10             	add    esp,0x10
c001b6ff:	85 c0                	test   eax,eax
c001b701:	75 17                	jne    c001b71a <sysCallOpen(regs*)+0x8f>
c001b703:	83 ec 08             	sub    esp,0x8
c001b706:	68 f2 a9 02 c0       	push   0xc002a9f2
c001b70b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b70e:	e8 30 ff ff ff       	call   c001b643 <string_ends_with(char const*, char const*)>
c001b713:	83 c4 10             	add    esp,0x10
c001b716:	85 c0                	test   eax,eax
c001b718:	74 51                	je     c001b76b <sysCallOpen(regs*)+0xe0>
c001b71a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b71d:	83 ec 08             	sub    esp,0x8
c001b720:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b726:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b72d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b730:	ff 30                	push   DWORD PTR [eax]
c001b732:	68 d6 a9 02 c0       	push   0xc002a9d6
c001b737:	e8 99 71 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001b73c:	c7 04 24 e5 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9e5
c001b743:	e8 8d 71 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001b748:	83 c4 10             	add    esp,0x10
c001b74b:	81 c4 04 01 00 00    	add    esp,0x104
c001b751:	31 c0                	xor    eax,eax
c001b753:	31 d2                	xor    edx,edx
c001b755:	5b                   	pop    ebx
c001b756:	5e                   	pop    esi
c001b757:	c3                   	ret    
c001b758:	81 c4 04 01 00 00    	add    esp,0x104
c001b75e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b763:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b768:	5b                   	pop    ebx
c001b769:	5e                   	pop    esi
c001b76a:	c3                   	ret    
c001b76b:	83 ec 08             	sub    esp,0x8
c001b76e:	68 d2 a9 02 c0       	push   0xc002a9d2
c001b773:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b776:	e8 39 50 fe ff       	call   c00007b4 <strcmp>
c001b77b:	83 c4 10             	add    esp,0x10
c001b77e:	85 c0                	test   eax,eax
c001b780:	74 98                	je     c001b71a <sysCallOpen(regs*)+0x8f>
c001b782:	83 ec 08             	sub    esp,0x8
c001b785:	68 d1 a9 02 c0       	push   0xc002a9d1
c001b78a:	56                   	push   esi
c001b78b:	e8 b3 fe ff ff       	call   c001b643 <string_ends_with(char const*, char const*)>
c001b790:	83 c4 10             	add    esp,0x10
c001b793:	85 c0                	test   eax,eax
c001b795:	75 83                	jne    c001b71a <sysCallOpen(regs*)+0x8f>
c001b797:	83 ec 08             	sub    esp,0x8
c001b79a:	68 f7 a9 02 c0       	push   0xc002a9f7
c001b79f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7a2:	e8 9c fe ff ff       	call   c001b643 <string_ends_with(char const*, char const*)>
c001b7a7:	83 c4 10             	add    esp,0x10
c001b7aa:	85 c0                	test   eax,eax
c001b7ac:	0f 85 d9 00 00 00    	jne    c001b88b <sysCallOpen(regs*)+0x200>
c001b7b2:	83 ec 08             	sub    esp,0x8
c001b7b5:	68 fc a9 02 c0       	push   0xc002a9fc
c001b7ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7bd:	e8 81 fe ff ff       	call   c001b643 <string_ends_with(char const*, char const*)>
c001b7c2:	83 c4 10             	add    esp,0x10
c001b7c5:	85 c0                	test   eax,eax
c001b7c7:	0f 85 be 00 00 00    	jne    c001b88b <sysCallOpen(regs*)+0x200>
c001b7cd:	83 ec 08             	sub    esp,0x8
c001b7d0:	68 f8 a9 02 c0       	push   0xc002a9f8
c001b7d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7d8:	e8 d7 4f fe ff       	call   c00007b4 <strcmp>
c001b7dd:	83 c4 10             	add    esp,0x10
c001b7e0:	85 c0                	test   eax,eax
c001b7e2:	0f 84 a3 00 00 00    	je     c001b88b <sysCallOpen(regs*)+0x200>
c001b7e8:	83 ec 08             	sub    esp,0x8
c001b7eb:	68 f7 a9 02 c0       	push   0xc002a9f7
c001b7f0:	56                   	push   esi
c001b7f1:	e8 4d fe ff ff       	call   c001b643 <string_ends_with(char const*, char const*)>
c001b7f6:	83 c4 10             	add    esp,0x10
c001b7f9:	85 c0                	test   eax,eax
c001b7fb:	0f 85 8a 00 00 00    	jne    c001b88b <sysCallOpen(regs*)+0x200>
c001b801:	83 ec 0c             	sub    esp,0xc
c001b804:	68 14 01 00 00       	push   0x114
c001b809:	e8 16 3e ff ff       	call   c000f624 <malloc>
c001b80e:	83 c4 0c             	add    esp,0xc
c001b811:	89 c6                	mov    esi,eax
c001b813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b818:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b81b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b81e:	56                   	push   esi
c001b81f:	e8 0a 76 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	85 f6                	test   esi,esi
c001b829:	0f 84 29 ff ff ff    	je     c001b758 <sysCallOpen(regs*)+0xcd>
c001b82f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b832:	0f b6 c2             	movzx  eax,dl
c001b835:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b838:	89 d0                	mov    eax,edx
c001b83a:	83 e0 01             	and    eax,0x1
c001b83d:	f6 c2 02             	test   dl,0x2
c001b840:	74 03                	je     c001b845 <sysCallOpen(regs*)+0x1ba>
c001b842:	83 c8 02             	or     eax,0x2
c001b845:	f6 c2 04             	test   dl,0x4
c001b848:	74 03                	je     c001b84d <sysCallOpen(regs*)+0x1c2>
c001b84a:	83 c8 04             	or     eax,0x4
c001b84d:	f6 c2 08             	test   dl,0x8
c001b850:	74 03                	je     c001b855 <sysCallOpen(regs*)+0x1ca>
c001b852:	83 c8 0a             	or     eax,0xa
c001b855:	83 e2 10             	and    edx,0x10
c001b858:	74 03                	je     c001b85d <sysCallOpen(regs*)+0x1d2>
c001b85a:	83 c8 12             	or     eax,0x12
c001b85d:	83 ec 08             	sub    esp,0x8
c001b860:	50                   	push   eax
c001b861:	56                   	push   esi
c001b862:	e8 2b 76 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001b867:	83 c4 10             	add    esp,0x10
c001b86a:	85 c0                	test   eax,eax
c001b86c:	0f 85 e6 fe ff ff    	jne    c001b758 <sysCallOpen(regs*)+0xcd>
c001b872:	83 ec 0c             	sub    esp,0xc
c001b875:	56                   	push   esi
c001b876:	e8 1f 5c ff ff       	call   c001149a <UnixFile::getFileDescriptor()>
c001b87b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b87e:	89 02                	mov    DWORD PTR [edx],eax
c001b880:	c1 f8 1f             	sar    eax,0x1f
c001b883:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b886:	e9 bd fe ff ff       	jmp    c001b748 <sysCallOpen(regs*)+0xbd>
c001b88b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b88e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b894:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b89b:	e9 ab fe ff ff       	jmp    c001b74b <sysCallOpen(regs*)+0xc0>

c001b8a0 <Sys::loadSyscalls()>:
c001b8a0:	c7 05 e0 d8 02 c0 56 aa 01 c0 	mov    DWORD PTR ds:0xc002d8e0,0xc001aa56
c001b8aa:	c7 05 e4 d8 02 c0 b8 a6 01 c0 	mov    DWORD PTR ds:0xc002d8e4,0xc001a6b8
c001b8b4:	c7 05 e8 d8 02 c0 0b a8 01 c0 	mov    DWORD PTR ds:0xc002d8e8,0xc001a80b
c001b8be:	c7 05 ec d8 02 c0 ee a9 01 c0 	mov    DWORD PTR ds:0xc002d8ec,0xc001a9ee
c001b8c8:	c7 05 f0 d8 02 c0 a3 a7 01 c0 	mov    DWORD PTR ds:0xc002d8f0,0xc001a7a3
c001b8d2:	c7 05 f4 d8 02 c0 ef a6 01 c0 	mov    DWORD PTR ds:0xc002d8f4,0xc001a6ef
c001b8dc:	c7 05 f8 d8 02 c0 d0 a6 01 c0 	mov    DWORD PTR ds:0xc002d8f8,0xc001a6d0
c001b8e6:	c7 05 fc d8 02 c0 60 a8 01 c0 	mov    DWORD PTR ds:0xc002d8fc,0xc001a860
c001b8f0:	c7 05 04 d9 02 c0 68 af 01 c0 	mov    DWORD PTR ds:0xc002d904,0xc001af68
c001b8fa:	c7 05 00 d9 02 c0 8b b6 01 c0 	mov    DWORD PTR ds:0xc002d900,0xc001b68b
c001b904:	c7 05 08 d9 02 c0 f0 af 01 c0 	mov    DWORD PTR ds:0xc002d908,0xc001aff0
c001b90e:	c7 05 0c d9 02 c0 57 ac 01 c0 	mov    DWORD PTR ds:0xc002d90c,0xc001ac57
c001b918:	c7 05 10 d9 02 c0 91 aa 01 c0 	mov    DWORD PTR ds:0xc002d910,0xc001aa91
c001b922:	c7 05 14 d9 02 c0 96 aa 01 c0 	mov    DWORD PTR ds:0xc002d914,0xc001aa96
c001b92c:	c7 05 18 d9 02 c0 cb b0 01 c0 	mov    DWORD PTR ds:0xc002d918,0xc001b0cb
c001b936:	c7 05 1c d9 02 c0 65 b0 01 c0 	mov    DWORD PTR ds:0xc002d91c,0xc001b065
c001b940:	c7 05 20 d9 02 c0 3f ad 01 c0 	mov    DWORD PTR ds:0xc002d920,0xc001ad3f
c001b94a:	c7 05 24 d9 02 c0 a8 ad 01 c0 	mov    DWORD PTR ds:0xc002d924,0xc001ada8
c001b954:	c7 05 28 d9 02 c0 25 ae 01 c0 	mov    DWORD PTR ds:0xc002d928,0xc001ae25
c001b95e:	c7 05 2c d9 02 c0 9b aa 01 c0 	mov    DWORD PTR ds:0xc002d92c,0xc001aa9b
c001b968:	c7 05 30 d9 02 c0 3b b1 01 c0 	mov    DWORD PTR ds:0xc002d930,0xc001b13b
c001b972:	c7 05 34 d9 02 c0 55 b1 01 c0 	mov    DWORD PTR ds:0xc002d934,0xc001b155
c001b97c:	c7 05 38 d9 02 c0 55 b1 01 c0 	mov    DWORD PTR ds:0xc002d938,0xc001b155
c001b986:	c7 05 3c d9 02 c0 96 b1 01 c0 	mov    DWORD PTR ds:0xc002d93c,0xc001b196
c001b990:	c7 05 40 d9 02 c0 fa b1 01 c0 	mov    DWORD PTR ds:0xc002d940,0xc001b1fa
c001b99a:	c7 05 44 d9 02 c0 a5 aa 01 c0 	mov    DWORD PTR ds:0xc002d944,0xc001aaa5
c001b9a4:	c7 05 48 d9 02 c0 5e b2 01 c0 	mov    DWORD PTR ds:0xc002d948,0xc001b25e
c001b9ae:	c7 05 4c d9 02 c0 14 ac 01 c0 	mov    DWORD PTR ds:0xc002d94c,0xc001ac14
c001b9b8:	c7 05 50 d9 02 c0 aa b2 01 c0 	mov    DWORD PTR ds:0xc002d950,0xc001b2aa
c001b9c2:	c7 05 54 d9 02 c0 e5 ac 01 c0 	mov    DWORD PTR ds:0xc002d954,0xc001ace5
c001b9cc:	c7 05 58 d9 02 c0 2d b3 01 c0 	mov    DWORD PTR ds:0xc002d958,0xc001b32d
c001b9d6:	c7 05 5c d9 02 c0 a8 ae 01 c0 	mov    DWORD PTR ds:0xc002d95c,0xc001aea8
c001b9e0:	c7 05 60 d9 02 c0 54 b3 01 c0 	mov    DWORD PTR ds:0xc002d960,0xc001b354
c001b9ea:	c7 05 64 d9 02 c0 ac b3 01 c0 	mov    DWORD PTR ds:0xc002d964,0xc001b3ac
c001b9f4:	c7 05 68 d9 02 c0 59 b4 01 c0 	mov    DWORD PTR ds:0xc002d968,0xc001b459
c001b9fe:	c7 05 6c d9 02 c0 b5 aa 01 c0 	mov    DWORD PTR ds:0xc002d96c,0xc001aab5
c001ba08:	c7 05 70 d9 02 c0 1f ab 01 c0 	mov    DWORD PTR ds:0xc002d970,0xc001ab1f
c001ba12:	c7 05 74 d9 02 c0 65 ab 01 c0 	mov    DWORD PTR ds:0xc002d974,0xc001ab65
c001ba1c:	c7 05 78 d9 02 c0 78 b5 01 c0 	mov    DWORD PTR ds:0xc002d978,0xc001b578
c001ba26:	c7 05 7c d9 02 c0 70 b1 01 c0 	mov    DWORD PTR ds:0xc002d97c,0xc001b170
c001ba30:	c7 05 80 d9 02 c0 b6 ab 01 c0 	mov    DWORD PTR ds:0xc002d980,0xc001abb6
c001ba3a:	c7 05 84 d9 02 c0 ea b5 01 c0 	mov    DWORD PTR ds:0xc002d984,0xc001b5ea
c001ba44:	c7 05 88 d9 02 c0 2f b6 01 c0 	mov    DWORD PTR ds:0xc002d988,0xc001b62f
c001ba4e:	c7 05 8c d9 02 c0 fb a6 01 c0 	mov    DWORD PTR ds:0xc002d98c,0xc001a6fb
c001ba58:	c7 05 90 d9 02 c0 7c a8 01 c0 	mov    DWORD PTR ds:0xc002d990,0xc001a87c
c001ba62:	c7 05 94 d9 02 c0 a4 a9 01 c0 	mov    DWORD PTR ds:0xc002d994,0xc001a9a4
c001ba6c:	c3                   	ret    

c001ba6d <Sys::systemCall(regs*, void*)>:
c001ba6d:	53                   	push   ebx
c001ba6e:	83 ec 08             	sub    esp,0x8
c001ba71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba75:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ba78:	83 f8 7f             	cmp    eax,0x7f
c001ba7b:	77 16                	ja     c001ba93 <Sys::systemCall(regs*, void*)+0x26>
c001ba7d:	8b 14 85 e0 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2720]
c001ba84:	85 d2                	test   edx,edx
c001ba86:	74 0b                	je     c001ba93 <Sys::systemCall(regs*, void*)+0x26>
c001ba88:	83 ec 0c             	sub    esp,0xc
c001ba8b:	53                   	push   ebx
c001ba8c:	ff d2                	call   edx
c001ba8e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ba91:	eb 0d                	jmp    c001baa0 <Sys::systemCall(regs*, void*)+0x33>
c001ba93:	52                   	push   edx
c001ba94:	52                   	push   edx
c001ba95:	50                   	push   eax
c001ba96:	68 01 aa 02 c0       	push   0xc002aa01
c001ba9b:	e8 35 6e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001baa0:	83 c4 10             	add    esp,0x10
c001baa3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001baa8:	31 d2                	xor    edx,edx
c001baaa:	83 c4 08             	add    esp,0x8
c001baad:	5b                   	pop    ebx
c001baae:	c3                   	ret    

c001baaf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001baaf:	55                   	push   ebp
c001bab0:	89 e5                	mov    ebp,esp
c001bab2:	57                   	push   edi
c001bab3:	56                   	push   esi
c001bab4:	53                   	push   ebx
c001bab5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001babb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001babe:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001bac1:	85 c0                	test   eax,eax
c001bac3:	0f 95 c1             	setne  cl
c001bac6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001baca:	0f 94 c2             	sete   dl
c001bacd:	84 d1                	test   cl,dl
c001bacf:	74 26                	je     c001baf7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bad1:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001bad8:	74 1d                	je     c001baf7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bada:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001badd:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001bae3:	89 d6                	mov    esi,edx
c001bae5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001baeb:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001baf1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001baf4:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001baf7:	83 ec 0c             	sub    esp,0xc
c001bafa:	05 ff 0f 00 00       	add    eax,0xfff
c001baff:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bb02:	6a 01                	push   0x1
c001bb04:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001bb0a:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001bb10:	e8 d0 5d ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c001bb15:	83 c4 10             	add    esp,0x10
c001bb18:	89 c6                	mov    esi,eax
c001bb1a:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001bb20:	0f 86 21 01 00 00    	jbe    c001bc47 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001bb26:	c1 eb 0c             	shr    ebx,0xc
c001bb29:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001bb33:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001bb39:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bb3c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bb3f:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001bb45:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001bb48:	29 d8                	sub    eax,ebx
c001bb4a:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001bb50:	0f 83 f4 00 00 00    	jae    c001bc4a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001bb56:	83 ec 0c             	sub    esp,0xc
c001bb59:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001bb5f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bb62:	3d 00 10 00 00       	cmp    eax,0x1000
c001bb67:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001bb69:	52                   	push   edx
c001bb6a:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001bb70:	52                   	push   edx
c001bb71:	76 05                	jbe    c001bb78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001bb73:	b8 00 10 00 00       	mov    eax,0x1000
c001bb78:	31 d2                	xor    edx,edx
c001bb7a:	52                   	push   edx
c001bb7b:	50                   	push   eax
c001bb7c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001bb7f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bb82:	83 c4 20             	add    esp,0x20
c001bb85:	85 c0                	test   eax,eax
c001bb87:	74 1f                	je     c001bba8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001bb89:	51                   	push   ecx
c001bb8a:	51                   	push   ecx
c001bb8b:	50                   	push   eax
c001bb8c:	68 15 aa 02 c0       	push   0xc002aa15
c001bb91:	e8 3f 6d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001bb96:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb99:	e8 ab 60 ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c001bb9e:	83 c4 10             	add    esp,0x10
c001bba1:	31 c0                	xor    eax,eax
c001bba3:	e9 7c 01 00 00       	jmp    c001bd24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001bba8:	e8 c5 14 00 00       	call   c001d072 <lockScheduler()>
c001bbad:	e8 f1 40 ff ff       	call   c000fca3 <Phys::allocatePage()>
c001bbb2:	6a 07                	push   0x7
c001bbb4:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001bbba:	56                   	push   esi
c001bbbb:	50                   	push   eax
c001bbbc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bbc2:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bbc5:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bbcb:	e8 e0 63 ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bbd0:	83 c4 0c             	add    esp,0xc
c001bbd3:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bbd9:	6a 00                	push   0x0
c001bbdb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bbe1:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bbe4:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bbea:	e8 2b 62 ff ff       	call   c0011e1a <VAS::mapOtherVASIn(bool, VAS*)>
c001bbef:	58                   	pop    eax
c001bbf0:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001bbf6:	5a                   	pop    edx
c001bbf7:	68 07 04 00 00       	push   0x407
c001bbfc:	53                   	push   ebx
c001bbfd:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bc03:	50                   	push   eax
c001bc04:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bc0a:	6a 00                	push   0x0
c001bc0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc14:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bc1a:	e8 4b 67 ff ff       	call   c001236a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bc1f:	83 c4 1c             	add    esp,0x1c
c001bc22:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001bc28:	68 00 10 00 00       	push   0x1000
c001bc2d:	50                   	push   eax
c001bc2e:	56                   	push   esi
c001bc2f:	e8 6c 4a fe ff       	call   c00006a0 <memcpy>
c001bc34:	e8 3b 14 00 00       	call   c001d074 <unlockScheduler()>
c001bc39:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001bc3f:	83 c4 10             	add    esp,0x10
c001bc42:	e9 f5 fe ff ff       	jmp    c001bb3c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001bc47:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bc4a:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001bc54:	0f 86 bc 00 00 00    	jbe    c001bd16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001bc5a:	e8 13 14 00 00       	call   c001d072 <lockScheduler()>
c001bc5f:	51                   	push   ecx
c001bc60:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bc66:	6a 00                	push   0x0
c001bc68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc70:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bc76:	e8 9f 61 ff ff       	call   c0011e1a <VAS::mapOtherVASIn(bool, VAS*)>
c001bc7b:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001bc81:	83 c4 10             	add    esp,0x10
c001bc84:	c1 e8 0c             	shr    eax,0xc
c001bc87:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001bc91:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001bc97:	e8 07 40 ff ff       	call   c000fca3 <Phys::allocatePage()>
c001bc9c:	6a 07                	push   0x7
c001bc9e:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001bca4:	56                   	push   esi
c001bca5:	50                   	push   eax
c001bca6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bcac:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bcaf:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001bcb5:	e8 f6 62 ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bcba:	58                   	pop    eax
c001bcbb:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001bcc1:	5a                   	pop    edx
c001bcc2:	68 07 04 00 00       	push   0x407
c001bcc7:	53                   	push   ebx
c001bcc8:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bcce:	50                   	push   eax
c001bccf:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bcd5:	6a 00                	push   0x0
c001bcd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcdc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcdf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bce5:	e8 80 66 ff ff       	call   c001236a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bcea:	83 c4 1c             	add    esp,0x1c
c001bced:	68 00 10 00 00       	push   0x1000
c001bcf2:	6a 00                	push   0x0
c001bcf4:	56                   	push   esi
c001bcf5:	e8 ca 49 fe ff       	call   c00006c4 <memset>
c001bcfa:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001bd00:	83 c4 10             	add    esp,0x10
c001bd03:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001bd09:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001bd0f:	77 86                	ja     c001bc97 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001bd11:	e8 5e 13 00 00       	call   c001d074 <unlockScheduler()>
c001bd16:	83 ec 0c             	sub    esp,0xc
c001bd19:	56                   	push   esi
c001bd1a:	e8 2a 5f ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c001bd1f:	83 c4 10             	add    esp,0x10
c001bd22:	b0 01                	mov    al,0x1
c001bd24:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bd27:	5b                   	pop    ebx
c001bd28:	5e                   	pop    esi
c001bd29:	5f                   	pop    edi
c001bd2a:	5d                   	pop    ebp
c001bd2b:	c3                   	ret    

c001bd2c <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001bd2c:	55                   	push   ebp
c001bd2d:	57                   	push   edi
c001bd2e:	56                   	push   esi
c001bd2f:	53                   	push   ebx
c001bd30:	83 ec 48             	sub    esp,0x48
c001bd33:	68 14 01 00 00       	push   0x114
c001bd38:	e8 e7 38 ff ff       	call   c000f624 <malloc>
c001bd3d:	83 c4 0c             	add    esp,0xc
c001bd40:	89 c6                	mov    esi,eax
c001bd42:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001bd46:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001bd4a:	50                   	push   eax
c001bd4b:	e8 de 70 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001bd50:	58                   	pop    eax
c001bd51:	5a                   	pop    edx
c001bd52:	6a 01                	push   0x1
c001bd54:	56                   	push   esi
c001bd55:	e8 38 71 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001bd5a:	83 c4 10             	add    esp,0x10
c001bd5d:	85 c0                	test   eax,eax
c001bd5f:	0f 85 47 01 00 00    	jne    c001beac <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bd65:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bd6d:	83 ec 0c             	sub    esp,0xc
c001bd70:	6a 34                	push   0x34
c001bd72:	e8 ad 38 ff ff       	call   c000f624 <malloc>
c001bd77:	89 c3                	mov    ebx,eax
c001bd79:	58                   	pop    eax
c001bd7a:	8b 06                	mov    eax,DWORD PTR [esi]
c001bd7c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001bd80:	57                   	push   edi
c001bd81:	53                   	push   ebx
c001bd82:	6a 00                	push   0x0
c001bd84:	6a 34                	push   0x34
c001bd86:	56                   	push   esi
c001bd87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd8a:	83 c4 20             	add    esp,0x20
c001bd8d:	85 c0                	test   eax,eax
c001bd8f:	0f 85 17 01 00 00    	jne    c001beac <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bd95:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001bd9b:	0f 85 0b 01 00 00    	jne    c001beac <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bda1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bda4:	85 c0                	test   eax,eax
c001bda6:	0f 84 00 01 00 00    	je     c001beac <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bdac:	31 d2                	xor    edx,edx
c001bdae:	55                   	push   ebp
c001bdaf:	52                   	push   edx
c001bdb0:	50                   	push   eax
c001bdb1:	56                   	push   esi
c001bdb2:	e8 99 71 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001bdb7:	83 c4 10             	add    esp,0x10
c001bdba:	85 c0                	test   eax,eax
c001bdbc:	0f 85 ea 00 00 00    	jne    c001beac <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bdc2:	83 ec 0c             	sub    esp,0xc
c001bdc5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bdc8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bdcc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bdd0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bdd4:	0f af c2             	imul   eax,edx
c001bdd7:	50                   	push   eax
c001bdd8:	e8 47 38 ff ff       	call   c000f624 <malloc>
c001bddd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bddf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bde3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bde6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bdea:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bdee:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bdf2:	0f af c2             	imul   eax,edx
c001bdf5:	99                   	cdq    
c001bdf6:	52                   	push   edx
c001bdf7:	50                   	push   eax
c001bdf8:	56                   	push   esi
c001bdf9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bdfc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bdff:	83 c4 20             	add    esp,0x20
c001be02:	85 c0                	test   eax,eax
c001be04:	0f 84 a2 00 00 00    	je     c001beac <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001be0a:	31 d2                	xor    edx,edx
c001be0c:	51                   	push   ecx
c001be0d:	52                   	push   edx
c001be0e:	50                   	push   eax
c001be0f:	56                   	push   esi
c001be10:	e8 3b 71 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001be15:	83 c4 10             	add    esp,0x10
c001be18:	85 c0                	test   eax,eax
c001be1a:	0f 85 8c 00 00 00    	jne    c001beac <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001be20:	83 ec 0c             	sub    esp,0xc
c001be23:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001be27:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001be2b:	31 ed                	xor    ebp,ebp
c001be2d:	0f af c2             	imul   eax,edx
c001be30:	50                   	push   eax
c001be31:	e8 ee 37 ff ff       	call   c000f624 <malloc>
c001be36:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001be38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be3c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001be3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be43:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001be47:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001be4b:	0f af c2             	imul   eax,edx
c001be4e:	99                   	cdq    
c001be4f:	52                   	push   edx
c001be50:	50                   	push   eax
c001be51:	56                   	push   esi
c001be52:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be55:	83 c4 20             	add    esp,0x20
c001be58:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001be60:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001be64:	0f 86 80 00 00 00    	jbe    c001beea <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001be6a:	0f b7 fd             	movzx  edi,bp
c001be6d:	c1 e7 05             	shl    edi,0x5
c001be70:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001be74:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001be77:	75 6b                	jne    c001bee4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001be79:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001be7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001be80:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001be83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001be87:	52                   	push   edx
c001be88:	31 d2                	xor    edx,edx
c001be8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001be8d:	52                   	push   edx
c001be8e:	50                   	push   eax
c001be8f:	56                   	push   esi
c001be90:	e8 bb 70 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001be95:	83 c4 10             	add    esp,0x10
c001be98:	85 c0                	test   eax,eax
c001be9a:	74 17                	je     c001beb3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001be9c:	83 ec 0c             	sub    esp,0xc
c001be9f:	68 40 aa 02 c0       	push   0xc002aa40
c001bea4:	e8 2c 6a ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001bea9:	83 c4 10             	add    esp,0x10
c001beac:	31 c0                	xor    eax,eax
c001beae:	e9 87 00 00 00       	jmp    c001bf3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001beb3:	83 ec 0c             	sub    esp,0xc
c001beb6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001beb9:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bebc:	50                   	push   eax
c001bebd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bec1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bec5:	56                   	push   esi
c001bec6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001beca:	e8 e0 fb ff ff       	call   c001baaf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001becf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bed3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bed7:	83 c4 20             	add    esp,0x20
c001beda:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bede:	73 04                	jae    c001bee4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bee0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bee4:	45                   	inc    ebp
c001bee5:	e9 76 ff ff ff       	jmp    c001be60 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001beea:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001beee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bef2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bef6:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001befc:	83 ec 0c             	sub    esp,0xc
c001beff:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bf05:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bf0a:	05 00 10 00 00       	add    eax,0x1000
c001bf0f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bf12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf16:	e8 19 37 ff ff       	call   c000f634 <free>
c001bf1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf1e:	e8 11 37 ff ff       	call   c000f634 <free>
c001bf23:	58                   	pop    eax
c001bf24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf28:	e8 07 37 ff ff       	call   c000f634 <free>
c001bf2d:	89 34 24             	mov    DWORD PTR [esp],esi
c001bf30:	e8 bb 6f ff ff       	call   c0012ef0 <File::close()>
c001bf35:	83 c4 10             	add    esp,0x10
c001bf38:	b0 01                	mov    al,0x1
c001bf3a:	83 c4 3c             	add    esp,0x3c
c001bf3d:	5b                   	pop    ebx
c001bf3e:	5e                   	pop    esi
c001bf3f:	5f                   	pop    edi
c001bf40:	5d                   	pop    ebp
c001bf41:	c3                   	ret    

c001bf42 <Thr::runtimeReferenceHelper()>:
c001bf42:	83 ec 18             	sub    esp,0x18
c001bf45:	68 48 aa 02 c0       	push   0xc002aa48
c001bf4a:	e8 86 69 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001bf4f:	fa                   	cli    
c001bf50:	83 c4 10             	add    esp,0x10
c001bf53:	eb fe                	jmp    c001bf53 <Thr::runtimeReferenceHelper()+0x11>

c001bf55 <Thr::getAddressOfKernelSymbol(char const*)>:
c001bf55:	57                   	push   edi
c001bf56:	56                   	push   esi
c001bf57:	53                   	push   ebx
c001bf58:	31 db                	xor    ebx,ebx
c001bf5a:	39 1d 80 e2 02 c0    	cmp    DWORD PTR ds:0xc002e280,ebx
c001bf60:	7e 3c                	jle    c001bf9e <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bf62:	8b 34 9d 00 e2 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1e00]
c001bf69:	31 ff                	xor    edi,edi
c001bf6b:	39 3c 9d 00 e1 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1f00],edi
c001bf72:	7e 27                	jle    c001bf9b <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bf74:	50                   	push   eax
c001bf75:	50                   	push   eax
c001bf76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf7a:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf7c:	03 04 9d 80 e1 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1e80]
c001bf83:	50                   	push   eax
c001bf84:	e8 2b 48 fe ff       	call   c00007b4 <strcmp>
c001bf89:	83 c4 10             	add    esp,0x10
c001bf8c:	85 c0                	test   eax,eax
c001bf8e:	75 05                	jne    c001bf95 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bf90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bf93:	eb 0b                	jmp    c001bfa0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bf95:	83 c6 10             	add    esi,0x10
c001bf98:	47                   	inc    edi
c001bf99:	eb d0                	jmp    c001bf6b <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bf9b:	43                   	inc    ebx
c001bf9c:	eb bc                	jmp    c001bf5a <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bf9e:	31 c0                	xor    eax,eax
c001bfa0:	5b                   	pop    ebx
c001bfa1:	5e                   	pop    esi
c001bfa2:	5f                   	pop    edi
c001bfa3:	c3                   	ret    

c001bfa4 <Thr::loadKernelSymbolTable(char const*)>:
c001bfa4:	55                   	push   ebp
c001bfa5:	57                   	push   edi
c001bfa6:	56                   	push   esi
c001bfa7:	53                   	push   ebx
c001bfa8:	83 ec 68             	sub    esp,0x68
c001bfab:	8b 35 d4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2d4
c001bfb1:	68 14 01 00 00       	push   0x114
c001bfb6:	e8 69 36 ff ff       	call   c000f624 <malloc>
c001bfbb:	83 c4 0c             	add    esp,0xc
c001bfbe:	89 c3                	mov    ebx,eax
c001bfc0:	56                   	push   esi
c001bfc1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bfc5:	50                   	push   eax
c001bfc6:	e8 63 6e ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001bfcb:	5e                   	pop    esi
c001bfcc:	5f                   	pop    edi
c001bfcd:	6a 01                	push   0x1
c001bfcf:	53                   	push   ebx
c001bfd0:	e8 bd 6e ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001bfd5:	83 c4 10             	add    esp,0x10
c001bfd8:	31 d2                	xor    edx,edx
c001bfda:	85 c0                	test   eax,eax
c001bfdc:	0f 85 74 02 00 00    	jne    c001c256 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bfe2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bfea:	83 ec 0c             	sub    esp,0xc
c001bfed:	6a 34                	push   0x34
c001bfef:	e8 30 36 ff ff       	call   c000f624 <malloc>
c001bff4:	59                   	pop    ecx
c001bff5:	89 c7                	mov    edi,eax
c001bff7:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bffb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bffd:	56                   	push   esi
c001bffe:	57                   	push   edi
c001bfff:	6a 00                	push   0x0
c001c001:	6a 34                	push   0x34
c001c003:	53                   	push   ebx
c001c004:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c007:	83 c4 20             	add    esp,0x20
c001c00a:	85 c0                	test   eax,eax
c001c00c:	74 17                	je     c001c025 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001c00e:	83 ec 0c             	sub    esp,0xc
c001c011:	68 6a aa 02 c0       	push   0xc002aa6a
c001c016:	e8 a8 da ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001c01b:	83 c4 10             	add    esp,0x10
c001c01e:	31 d2                	xor    edx,edx
c001c020:	e9 31 02 00 00       	jmp    c001c256 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001c025:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c02b:	75 e1                	jne    c001c00e <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c02d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c030:	85 c0                	test   eax,eax
c001c032:	74 da                	je     c001c00e <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c034:	52                   	push   edx
c001c035:	31 d2                	xor    edx,edx
c001c037:	52                   	push   edx
c001c038:	50                   	push   eax
c001c039:	53                   	push   ebx
c001c03a:	e8 11 6f ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c03f:	83 c4 10             	add    esp,0x10
c001c042:	85 c0                	test   eax,eax
c001c044:	75 c8                	jne    c001c00e <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c046:	83 ec 0c             	sub    esp,0xc
c001c049:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c04d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c051:	31 ed                	xor    ebp,ebp
c001c053:	0f af c2             	imul   eax,edx
c001c056:	50                   	push   eax
c001c057:	e8 c8 35 ff ff       	call   c000f624 <malloc>
c001c05c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c05e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c062:	89 34 24             	mov    DWORD PTR [esp],esi
c001c065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c069:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c06d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c071:	0f af c2             	imul   eax,edx
c001c074:	99                   	cdq    
c001c075:	52                   	push   edx
c001c076:	50                   	push   eax
c001c077:	53                   	push   ebx
c001c078:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c07b:	83 c4 20             	add    esp,0x20
c001c07e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c086:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c08e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c096:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c09e:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c0a2:	0f 86 aa 00 00 00    	jbe    c001c152 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001c0a8:	0f b7 f5             	movzx  esi,bp
c001c0ab:	6b f6 28             	imul   esi,esi,0x28
c001c0ae:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c0b2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c0b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0b9:	50                   	push   eax
c001c0ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c0be:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c0c2:	8b 16                	mov    edx,DWORD PTR [esi]
c001c0c4:	6b c0 28             	imul   eax,eax,0x28
c001c0c7:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c0cb:	89 d0                	mov    eax,edx
c001c0cd:	31 d2                	xor    edx,edx
c001c0cf:	52                   	push   edx
c001c0d0:	50                   	push   eax
c001c0d1:	53                   	push   ebx
c001c0d2:	e8 79 6e ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c0d7:	83 c4 0c             	add    esp,0xc
c001c0da:	6a 20                	push   0x20
c001c0dc:	6a 00                	push   0x0
c001c0de:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c0e2:	52                   	push   edx
c001c0e3:	e8 dc 45 fe ff       	call   c00006c4 <memset>
c001c0e8:	58                   	pop    eax
c001c0e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0eb:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c0ef:	51                   	push   ecx
c001c0f0:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c0f4:	52                   	push   edx
c001c0f5:	6a 00                	push   0x0
c001c0f7:	6a 1f                	push   0x1f
c001c0f9:	53                   	push   ebx
c001c0fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c0fd:	83 c4 18             	add    esp,0x18
c001c100:	68 81 aa 02 c0       	push   0xc002aa81
c001c105:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c109:	52                   	push   edx
c001c10a:	e8 a5 46 fe ff       	call   c00007b4 <strcmp>
c001c10f:	83 c4 10             	add    esp,0x10
c001c112:	85 c0                	test   eax,eax
c001c114:	75 0f                	jne    c001c125 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001c116:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c119:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c11d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c121:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c125:	50                   	push   eax
c001c126:	50                   	push   eax
c001c127:	68 89 aa 02 c0       	push   0xc002aa89
c001c12c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c130:	50                   	push   eax
c001c131:	e8 7e 46 fe ff       	call   c00007b4 <strcmp>
c001c136:	83 c4 10             	add    esp,0x10
c001c139:	85 c0                	test   eax,eax
c001c13b:	75 0f                	jne    c001c14c <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001c13d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c140:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c144:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c148:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c14c:	45                   	inc    ebp
c001c14d:	e9 4c ff ff ff       	jmp    c001c09e <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001c152:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c157:	75 10                	jne    c001c169 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001c159:	83 ec 0c             	sub    esp,0xc
c001c15c:	68 91 aa 02 c0       	push   0xc002aa91
c001c161:	e8 5d d9 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001c166:	83 c4 10             	add    esp,0x10
c001c169:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c16e:	75 10                	jne    c001c180 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001c170:	83 ec 0c             	sub    esp,0xc
c001c173:	68 91 aa 02 c0       	push   0xc002aa91
c001c178:	e8 46 d9 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001c17d:	83 c4 10             	add    esp,0x10
c001c180:	31 d2                	xor    edx,edx
c001c182:	50                   	push   eax
c001c183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c187:	52                   	push   edx
c001c188:	50                   	push   eax
c001c189:	53                   	push   ebx
c001c18a:	e8 c1 6d ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c18f:	5a                   	pop    edx
c001c190:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c194:	e8 8b 34 ff ff       	call   c000f624 <malloc>
c001c199:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c19d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c1a1:	31 c9                	xor    ecx,ecx
c001c1a3:	5e                   	pop    esi
c001c1a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1a6:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c1aa:	55                   	push   ebp
c001c1ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1af:	51                   	push   ecx
c001c1b0:	52                   	push   edx
c001c1b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c1b5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c1b9:	53                   	push   ebx
c001c1ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1bd:	83 c4 14             	add    esp,0x14
c001c1c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1c4:	e8 5b 34 ff ff       	call   c000f624 <malloc>
c001c1c9:	89 c6                	mov    esi,eax
c001c1cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1d0:	56                   	push   esi
c001c1d1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c1d5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c1d9:	51                   	push   ecx
c001c1da:	52                   	push   edx
c001c1db:	53                   	push   ebx
c001c1dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c1e3:	8b 15 80 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e280
c001c1e9:	83 c4 1c             	add    esp,0x1c
c001c1ec:	c1 e8 04             	shr    eax,0x4
c001c1ef:	89 04 95 00 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1f00],eax
c001c1f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c1fa:	31 d2                	xor    edx,edx
c001c1fc:	52                   	push   edx
c001c1fd:	50                   	push   eax
c001c1fe:	53                   	push   ebx
c001c1ff:	e8 4c 6d ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c204:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c206:	31 d2                	xor    edx,edx
c001c208:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c20b:	56                   	push   esi
c001c20c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c210:	52                   	push   edx
c001c211:	50                   	push   eax
c001c212:	53                   	push   ebx
c001c213:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c216:	83 c4 14             	add    esp,0x14
c001c219:	53                   	push   ebx
c001c21a:	e8 d1 6c ff ff       	call   c0012ef0 <File::close()>
c001c21f:	5d                   	pop    ebp
c001c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c224:	e8 0b 34 ff ff       	call   c000f634 <free>
c001c229:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c22c:	e8 03 34 ff ff       	call   c000f634 <free>
c001c231:	a1 80 e2 02 c0       	mov    eax,ds:0xc002e280
c001c236:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c23a:	8d 50 01             	lea    edx,[eax+0x1]
c001c23d:	89 0c 85 00 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e00],ecx
c001c244:	89 15 80 e2 02 c0    	mov    DWORD PTR ds:0xc002e280,edx
c001c24a:	89 34 85 80 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e80],esi
c001c251:	83 c4 10             	add    esp,0x10
c001c254:	b2 01                	mov    dl,0x1
c001c256:	83 c4 5c             	add    esp,0x5c
c001c259:	88 d0                	mov    al,dl
c001c25b:	5b                   	pop    ebx
c001c25c:	5e                   	pop    esi
c001c25d:	5f                   	pop    edi
c001c25e:	5d                   	pop    ebp
c001c25f:	c3                   	ret    

c001c260 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c260:	55                   	push   ebp
c001c261:	57                   	push   edi
c001c262:	56                   	push   esi
c001c263:	53                   	push   ebx
c001c264:	81 ec 68 03 00 00    	sub    esp,0x368
c001c26a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c271:	8b 1d d4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2d4
c001c277:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c27b:	68 14 01 00 00       	push   0x114
c001c280:	e8 9f 33 ff ff       	call   c000f624 <malloc>
c001c285:	83 c4 0c             	add    esp,0xc
c001c288:	89 c5                	mov    ebp,eax
c001c28a:	53                   	push   ebx
c001c28b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c292:	50                   	push   eax
c001c293:	e8 96 6b ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001c298:	5e                   	pop    esi
c001c299:	5f                   	pop    edi
c001c29a:	6a 01                	push   0x1
c001c29c:	55                   	push   ebp
c001c29d:	e8 f0 6b ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001c2a2:	83 c4 10             	add    esp,0x10
c001c2a5:	85 c0                	test   eax,eax
c001c2a7:	0f 85 8d 06 00 00    	jne    c001c93a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c2ad:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c2b5:	83 ec 0c             	sub    esp,0xc
c001c2b8:	6a 34                	push   0x34
c001c2ba:	e8 65 33 ff ff       	call   c000f624 <malloc>
c001c2bf:	5b                   	pop    ebx
c001c2c0:	89 c7                	mov    edi,eax
c001c2c2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c2c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c2c9:	53                   	push   ebx
c001c2ca:	57                   	push   edi
c001c2cb:	6a 00                	push   0x0
c001c2cd:	6a 34                	push   0x34
c001c2cf:	55                   	push   ebp
c001c2d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c2d3:	83 c4 20             	add    esp,0x20
c001c2d6:	85 c0                	test   eax,eax
c001c2d8:	0f 85 5c 06 00 00    	jne    c001c93a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c2de:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c2e4:	0f 85 50 06 00 00    	jne    c001c93a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c2ea:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c2ed:	85 c0                	test   eax,eax
c001c2ef:	0f 84 45 06 00 00    	je     c001c93a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c2f5:	31 d2                	xor    edx,edx
c001c2f7:	51                   	push   ecx
c001c2f8:	52                   	push   edx
c001c2f9:	50                   	push   eax
c001c2fa:	55                   	push   ebp
c001c2fb:	e8 50 6c ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c300:	83 c4 10             	add    esp,0x10
c001c303:	85 c0                	test   eax,eax
c001c305:	0f 85 2f 06 00 00    	jne    c001c93a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c30b:	83 ec 0c             	sub    esp,0xc
c001c30e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c311:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c315:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c319:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c31d:	0f af c2             	imul   eax,edx
c001c320:	50                   	push   eax
c001c321:	e8 fe 32 ff ff       	call   c000f624 <malloc>
c001c326:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c329:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c32d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c330:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c334:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c338:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c33c:	0f af c2             	imul   eax,edx
c001c33f:	99                   	cdq    
c001c340:	52                   	push   edx
c001c341:	50                   	push   eax
c001c342:	55                   	push   ebp
c001c343:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c346:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c349:	83 c4 20             	add    esp,0x20
c001c34c:	85 c0                	test   eax,eax
c001c34e:	0f 84 e6 05 00 00    	je     c001c93a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c354:	52                   	push   edx
c001c355:	31 d2                	xor    edx,edx
c001c357:	52                   	push   edx
c001c358:	50                   	push   eax
c001c359:	55                   	push   ebp
c001c35a:	e8 f1 6b ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c35f:	83 c4 10             	add    esp,0x10
c001c362:	85 c0                	test   eax,eax
c001c364:	0f 85 d0 05 00 00    	jne    c001c93a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c36a:	83 ec 0c             	sub    esp,0xc
c001c36d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c371:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c375:	31 f6                	xor    esi,esi
c001c377:	0f af c2             	imul   eax,edx
c001c37a:	50                   	push   eax
c001c37b:	e8 a4 32 ff ff       	call   c000f624 <malloc>
c001c380:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c383:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c387:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c38a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c38e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c392:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c396:	0f af c2             	imul   eax,edx
c001c399:	99                   	cdq    
c001c39a:	52                   	push   edx
c001c39b:	50                   	push   eax
c001c39c:	55                   	push   ebp
c001c39d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3a0:	83 c4 20             	add    esp,0x20
c001c3a3:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c3a7:	0f 86 8a 00 00 00    	jbe    c001c437 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c3ad:	0f b7 de             	movzx  ebx,si
c001c3b0:	c1 e3 05             	shl    ebx,0x5
c001c3b3:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c3b7:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c3ba:	75 75                	jne    c001c431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c3bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c3bf:	31 d2                	xor    edx,edx
c001c3c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c3c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3cc:	50                   	push   eax
c001c3cd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c3d0:	52                   	push   edx
c001c3d1:	50                   	push   eax
c001c3d2:	55                   	push   ebp
c001c3d3:	e8 78 6b ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c3d8:	83 c4 10             	add    esp,0x10
c001c3db:	85 c0                	test   eax,eax
c001c3dd:	0f 85 57 05 00 00    	jne    c001c93a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c3e3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c3ea:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c3ed:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c3f1:	31 d2                	xor    edx,edx
c001c3f3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c3f7:	83 ec 0c             	sub    esp,0xc
c001c3fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c3fe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c405:	50                   	push   eax
c001c406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c40a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c40e:	52                   	push   edx
c001c40f:	50                   	push   eax
c001c410:	55                   	push   ebp
c001c411:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c414:	83 c4 1c             	add    esp,0x1c
c001c417:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c41a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c41d:	50                   	push   eax
c001c41e:	6a 00                	push   0x0
c001c420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c424:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c428:	50                   	push   eax
c001c429:	e8 96 42 fe ff       	call   c00006c4 <memset>
c001c42e:	83 c4 10             	add    esp,0x10
c001c431:	46                   	inc    esi
c001c432:	e9 6c ff ff ff       	jmp    c001c3a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c437:	53                   	push   ebx
c001c438:	31 db                	xor    ebx,ebx
c001c43a:	68 00 01 00 00       	push   0x100
c001c43f:	6a 00                	push   0x0
c001c441:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c445:	50                   	push   eax
c001c446:	e8 79 42 fe ff       	call   c00006c4 <memset>
c001c44b:	83 c4 0c             	add    esp,0xc
c001c44e:	68 00 01 00 00       	push   0x100
c001c453:	6a 00                	push   0x0
c001c455:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c45c:	50                   	push   eax
c001c45d:	e8 62 42 fe ff       	call   c00006c4 <memset>
c001c462:	83 c4 10             	add    esp,0x10
c001c465:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c46d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c475:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c47d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c485:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c48d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c491:	0f 86 30 01 00 00    	jbe    c001c5c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c497:	0f b7 f3             	movzx  esi,bx
c001c49a:	6b f6 28             	imul   esi,esi,0x28
c001c49d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c4a1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c4a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4a8:	52                   	push   edx
c001c4a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c4ad:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c4b1:	8b 06                	mov    eax,DWORD PTR [esi]
c001c4b3:	6b d2 28             	imul   edx,edx,0x28
c001c4b6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c4ba:	31 d2                	xor    edx,edx
c001c4bc:	52                   	push   edx
c001c4bd:	50                   	push   eax
c001c4be:	55                   	push   ebp
c001c4bf:	e8 8c 6a ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c4c4:	83 c4 0c             	add    esp,0xc
c001c4c7:	6a 20                	push   0x20
c001c4c9:	6a 00                	push   0x0
c001c4cb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c4d2:	51                   	push   ecx
c001c4d3:	e8 ec 41 fe ff       	call   c00006c4 <memset>
c001c4d8:	59                   	pop    ecx
c001c4d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c4dc:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c4e0:	52                   	push   edx
c001c4e1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c4e8:	51                   	push   ecx
c001c4e9:	6a 00                	push   0x0
c001c4eb:	6a 1f                	push   0x1f
c001c4ed:	55                   	push   ebp
c001c4ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c4f1:	83 c4 1c             	add    esp,0x1c
c001c4f4:	6a 09                	push   0x9
c001c4f6:	68 ab aa 02 c0       	push   0xc002aaab
c001c4fb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c502:	51                   	push   ecx
c001c503:	e8 35 41 fe ff       	call   c000063d <memcmp>
c001c508:	83 c4 10             	add    esp,0x10
c001c50b:	85 c0                	test   eax,eax
c001c50d:	75 21                	jne    c001c530 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c50f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c517:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c51b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c51f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c522:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c529:	89 d0                	mov    eax,edx
c001c52b:	40                   	inc    eax
c001c52c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c530:	50                   	push   eax
c001c531:	6a 09                	push   0x9
c001c533:	68 b5 aa 02 c0       	push   0xc002aab5
c001c538:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c53f:	50                   	push   eax
c001c540:	e8 f8 40 fe ff       	call   c000063d <memcmp>
c001c545:	83 c4 10             	add    esp,0x10
c001c548:	85 c0                	test   eax,eax
c001c54a:	75 21                	jne    c001c56d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c54c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c550:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c554:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c558:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c55c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c55f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c566:	89 d0                	mov    eax,edx
c001c568:	40                   	inc    eax
c001c569:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c56d:	50                   	push   eax
c001c56e:	50                   	push   eax
c001c56f:	68 81 aa 02 c0       	push   0xc002aa81
c001c574:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c57b:	50                   	push   eax
c001c57c:	e8 33 42 fe ff       	call   c00007b4 <strcmp>
c001c581:	83 c4 10             	add    esp,0x10
c001c584:	85 c0                	test   eax,eax
c001c586:	75 0f                	jne    c001c597 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c58b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c58f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c593:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c597:	50                   	push   eax
c001c598:	50                   	push   eax
c001c599:	68 89 aa 02 c0       	push   0xc002aa89
c001c59e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c5a5:	50                   	push   eax
c001c5a6:	e8 09 42 fe ff       	call   c00007b4 <strcmp>
c001c5ab:	83 c4 10             	add    esp,0x10
c001c5ae:	85 c0                	test   eax,eax
c001c5b0:	75 0f                	jne    c001c5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c5b2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c5b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c5b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c5c1:	43                   	inc    ebx
c001c5c2:	e9 c6 fe ff ff       	jmp    c001c48d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c5c7:	31 d2                	xor    edx,edx
c001c5c9:	50                   	push   eax
c001c5ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c5ce:	52                   	push   edx
c001c5cf:	50                   	push   eax
c001c5d0:	55                   	push   ebp
c001c5d1:	e8 7a 69 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c5d6:	58                   	pop    eax
c001c5d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5db:	e8 44 30 ff ff       	call   c000f624 <malloc>
c001c5e0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c5e3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c5e7:	31 d2                	xor    edx,edx
c001c5e9:	58                   	pop    eax
c001c5ea:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c5ee:	53                   	push   ebx
c001c5ef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c5f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c5f7:	52                   	push   edx
c001c5f8:	50                   	push   eax
c001c5f9:	55                   	push   ebp
c001c5fa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c5fd:	83 c4 14             	add    esp,0x14
c001c600:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c604:	e8 1b 30 ff ff       	call   c000f624 <malloc>
c001c609:	31 d2                	xor    edx,edx
c001c60b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c60f:	83 c4 0c             	add    esp,0xc
c001c612:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c616:	52                   	push   edx
c001c617:	50                   	push   eax
c001c618:	55                   	push   ebp
c001c619:	e8 32 69 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c61e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c621:	31 d2                	xor    edx,edx
c001c623:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c626:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c62a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c62e:	52                   	push   edx
c001c62f:	50                   	push   eax
c001c630:	55                   	push   ebp
c001c631:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c634:	83 c4 20             	add    esp,0x20
c001c637:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c63f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c643:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001c647:	0f 84 f1 02 00 00    	je     c001c93e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001c64d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001c654:	31 d2                	xor    edx,edx
c001c656:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c65a:	c1 e8 03             	shr    eax,0x3
c001c65d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c661:	51                   	push   ecx
c001c662:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c666:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c66a:	52                   	push   edx
c001c66b:	50                   	push   eax
c001c66c:	55                   	push   ebp
c001c66d:	e8 de 68 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c672:	5b                   	pop    ebx
c001c673:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c677:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c67e:	e8 a1 2f ff ff       	call   c000f624 <malloc>
c001c683:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c686:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c68a:	31 d2                	xor    edx,edx
c001c68c:	5e                   	pop    esi
c001c68d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c691:	50                   	push   eax
c001c692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c696:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c69a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c6a1:	52                   	push   edx
c001c6a2:	50                   	push   eax
c001c6a3:	55                   	push   ebp
c001c6a4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6a7:	83 c4 20             	add    esp,0x20
c001c6aa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c6b2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c6b6:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001c6ba:	0f 8d 62 02 00 00    	jge    c001c922 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001c6c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c6c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6c8:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001c6cd:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001c6d0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c6d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6d8:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001c6dc:	89 d8                	mov    eax,ebx
c001c6de:	c1 e8 08             	shr    eax,0x8
c001c6e1:	89 c6                	mov    esi,eax
c001c6e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c6e7:	c1 e6 04             	shl    esi,0x4
c001c6ea:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001c6ee:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001c6f1:	85 d2                	test   edx,edx
c001c6f3:	0f 85 bf 00 00 00    	jne    c001c7b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c6f9:	83 ec 0c             	sub    esp,0xc
c001c6fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c700:	03 06                	add    eax,DWORD PTR [esi]
c001c702:	50                   	push   eax
c001c703:	e8 4d f8 ff ff       	call   c001bf55 <Thr::getAddressOfKernelSymbol(char const*)>
c001c708:	83 c4 10             	add    esp,0x10
c001c70b:	89 c2                	mov    edx,eax
c001c70d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001c712:	85 c0                	test   eax,eax
c001c714:	0f 85 9e 00 00 00    	jne    c001c7b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c71a:	83 ec 0c             	sub    esp,0xc
c001c71d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c721:	03 06                	add    eax,DWORD PTR [esi]
c001c723:	50                   	push   eax
c001c724:	e8 b5 1b ff ff       	call   c000e2de <Krnl::resolveCompatibilitySymbol(char*)>
c001c729:	83 c4 10             	add    esp,0x10
c001c72c:	89 c2                	mov    edx,eax
c001c72e:	85 c0                	test   eax,eax
c001c730:	0f 85 82 00 00 00    	jne    c001c7b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c736:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c73a:	50                   	push   eax
c001c73b:	50                   	push   eax
c001c73c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c740:	03 06                	add    eax,DWORD PTR [esi]
c001c742:	50                   	push   eax
c001c743:	68 bf aa 02 c0       	push   0xc002aabf
c001c748:	e8 88 61 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001c74d:	58                   	pop    eax
c001c74e:	5a                   	pop    edx
c001c74f:	68 d9 aa 02 c0       	push   0xc002aad9
c001c754:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c75b:	50                   	push   eax
c001c75c:	e8 02 40 fe ff       	call   c0000763 <strcpy>
c001c761:	59                   	pop    ecx
c001c762:	58                   	pop    eax
c001c763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c767:	03 06                	add    eax,DWORD PTR [esi]
c001c769:	50                   	push   eax
c001c76a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c771:	50                   	push   eax
c001c772:	e8 a3 40 fe ff       	call   c000081a <strcat>
c001c777:	58                   	pop    eax
c001c778:	5a                   	pop    edx
c001c779:	68 6f ab 02 c0       	push   0xc002ab6f
c001c77e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c785:	50                   	push   eax
c001c786:	e8 8f 40 fe ff       	call   c000081a <strcat>
c001c78b:	83 c4 10             	add    esp,0x10
c001c78e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c793:	0f 84 43 01 00 00    	je     c001c8dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c799:	83 ec 0c             	sub    esp,0xc
c001c79c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c7a3:	50                   	push   eax
c001c7a4:	e8 1a d3 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001c7a9:	83 c4 10             	add    esp,0x10
c001c7ac:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001c7b0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c7b4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c7b8:	80 fb 01             	cmp    bl,0x1
c001c7bb:	75 7d                	jne    c001c83a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001c7bd:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c7c4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c7c8:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001c7cc:	01 ce                	add    esi,ecx
c001c7ce:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c7d4:	0f 94 c0             	sete   al
c001c7d7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c7dd:	0f 94 c3             	sete   bl
c001c7e0:	09 c3                	or     ebx,eax
c001c7e2:	8b 06                	mov    eax,DWORD PTR [esi]
c001c7e4:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c7e9:	74 36                	je     c001c821 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001c7eb:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c7ee:	84 db                	test   bl,bl
c001c7f0:	75 0a                	jne    c001c7fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001c7f2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c7f6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c7fa:	76 37                	jbe    c001c833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c7fc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001c800:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c805:	0f 84 d1 00 00 00    	je     c001c8dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c80b:	83 ec 0c             	sub    esp,0xc
c001c80e:	68 f0 aa 02 c0       	push   0xc002aaf0
c001c813:	e8 ab d2 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001c818:	83 c4 10             	add    esp,0x10
c001c81b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c81f:	eb 12                	jmp    c001c833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c821:	01 c1                	add    ecx,eax
c001c823:	84 db                	test   bl,bl
c001c825:	75 0c                	jne    c001c833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c827:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c82b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c82f:	77 02                	ja     c001c833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c831:	01 d1                	add    ecx,edx
c001c833:	89 0e                	mov    DWORD PTR [esi],ecx
c001c835:	e9 df 00 00 00       	jmp    c001c919 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c83a:	80 fb 02             	cmp    bl,0x2
c001c83d:	75 71                	jne    c001c8b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001c83f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c846:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001c84a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001c84e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c854:	74 15                	je     c001c86b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001c856:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c85c:	74 0d                	je     c001c86b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001c85e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c862:	83 e8 04             	sub    eax,0x4
c001c865:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c869:	76 1f                	jbe    c001c88a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001c86b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001c86f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c874:	74 66                	je     c001c8dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c876:	83 ec 0c             	sub    esp,0xc
c001c879:	68 0c ab 02 c0       	push   0xc002ab0c
c001c87e:	e8 40 d2 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001c883:	83 c4 10             	add    esp,0x10
c001c886:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c88a:	8b 06                	mov    eax,DWORD PTR [esi]
c001c88c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c891:	74 13                	je     c001c8a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001c893:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c897:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001c89e:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c8a2:	01 c8                	add    eax,ecx
c001c8a4:	eb 04                	jmp    c001c8aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001c8a6:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c8aa:	01 c2                	add    edx,eax
c001c8ac:	89 16                	mov    DWORD PTR [esi],edx
c001c8ae:	eb 69                	jmp    c001c919 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c8b0:	0f b6 db             	movzx  ebx,bl
c001c8b3:	50                   	push   eax
c001c8b4:	50                   	push   eax
c001c8b5:	53                   	push   ebx
c001c8b6:	68 28 ab 02 c0       	push   0xc002ab28
c001c8bb:	e8 15 60 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001c8c0:	83 c4 10             	add    esp,0x10
c001c8c3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c8c8:	74 12                	je     c001c8dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c8ca:	83 ec 0c             	sub    esp,0xc
c001c8cd:	68 33 ab 02 c0       	push   0xc002ab33
c001c8d2:	e8 ec d1 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001c8d7:	83 c4 10             	add    esp,0x10
c001c8da:	eb 3d                	jmp    c001c919 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c8dc:	83 ec 0c             	sub    esp,0xc
c001c8df:	55                   	push   ebp
c001c8e0:	e8 0b 66 ff ff       	call   c0012ef0 <File::close()>
c001c8e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c8eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c8ee:	59                   	pop    ecx
c001c8ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c8f3:	e8 3c 2d ff ff       	call   c000f634 <free>
c001c8f8:	5b                   	pop    ebx
c001c8f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c8fd:	e8 32 2d ff ff       	call   c000f634 <free>
c001c902:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c905:	e8 2a 2d ff ff       	call   c000f634 <free>
c001c90a:	5e                   	pop    esi
c001c90b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c90f:	e8 20 2d ff ff       	call   c000f634 <free>
c001c914:	83 c4 10             	add    esp,0x10
c001c917:	eb 21                	jmp    c001c93a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c919:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001c91d:	e9 90 fd ff ff       	jmp    c001c6b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c922:	83 ec 0c             	sub    esp,0xc
c001c925:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c929:	e8 06 2d ff ff       	call   c000f634 <free>
c001c92e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001c932:	83 c4 10             	add    esp,0x10
c001c935:	e9 05 fd ff ff       	jmp    c001c63f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c93a:	31 c0                	xor    eax,eax
c001c93c:	eb 33                	jmp    c001c971 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001c93e:	83 ec 0c             	sub    esp,0xc
c001c941:	55                   	push   ebp
c001c942:	e8 a9 65 ff ff       	call   c0012ef0 <File::close()>
c001c947:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c94a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c94d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c950:	58                   	pop    eax
c001c951:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c955:	e8 da 2c ff ff       	call   c000f634 <free>
c001c95a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c95d:	e8 d2 2c ff ff       	call   c000f634 <free>
c001c962:	5a                   	pop    edx
c001c963:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c967:	e8 c8 2c ff ff       	call   c000f634 <free>
c001c96c:	83 c4 10             	add    esp,0x10
c001c96f:	b0 01                	mov    al,0x1
c001c971:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c977:	5b                   	pop    ebx
c001c978:	5e                   	pop    esi
c001c979:	5f                   	pop    edi
c001c97a:	5d                   	pop    ebp
c001c97b:	c3                   	ret    

c001c97c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c97c:	56                   	push   esi
c001c97d:	31 d2                	xor    edx,edx
c001c97f:	53                   	push   ebx
c001c980:	8b 1d e0 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dae0
c001c986:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c98a:	39 d3                	cmp    ebx,edx
c001c98c:	7e 1b                	jle    c001c9a9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c98e:	8b 04 95 00 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2300]
c001c995:	39 c8                	cmp    eax,ecx
c001c997:	77 0d                	ja     c001c9a6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c999:	8b 34 95 00 db 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2500]
c001c9a0:	01 c6                	add    esi,eax
c001c9a2:	39 ce                	cmp    esi,ecx
c001c9a4:	77 05                	ja     c001c9ab <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c9a6:	42                   	inc    edx
c001c9a7:	eb e1                	jmp    c001c98a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c9a9:	31 c0                	xor    eax,eax
c001c9ab:	5b                   	pop    ebx
c001c9ac:	5e                   	pop    esi
c001c9ad:	c3                   	ret    

c001c9ae <Thr::getDriverNameFromAddress(unsigned long)>:
c001c9ae:	53                   	push   ebx
c001c9af:	31 c0                	xor    eax,eax
c001c9b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c9b5:	8b 1d e0 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dae0
c001c9bb:	39 c3                	cmp    ebx,eax
c001c9bd:	7e 22                	jle    c001c9e1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c9bf:	8b 14 85 00 dd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2300]
c001c9c6:	39 ca                	cmp    edx,ecx
c001c9c8:	77 14                	ja     c001c9de <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c9ca:	03 14 85 00 db 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2500]
c001c9d1:	39 ca                	cmp    edx,ecx
c001c9d3:	76 09                	jbe    c001c9de <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c9d5:	8b 04 85 00 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2100]
c001c9dc:	eb 05                	jmp    c001c9e3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c9de:	40                   	inc    eax
c001c9df:	eb da                	jmp    c001c9bb <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c9e1:	31 c0                	xor    eax,eax
c001c9e3:	5b                   	pop    ebx
c001c9e4:	c3                   	ret    

c001c9e5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c9e5:	53                   	push   ebx
c001c9e6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c9ea:	53                   	push   ebx
c001c9eb:	e8 8c ff ff ff       	call   c001c97c <Thr::getDriverBaseFromAddress(unsigned long)>
c001c9f0:	5a                   	pop    edx
c001c9f1:	31 d2                	xor    edx,edx
c001c9f3:	85 c0                	test   eax,eax
c001c9f5:	74 04                	je     c001c9fb <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c9f7:	89 da                	mov    edx,ebx
c001c9f9:	29 c2                	sub    edx,eax
c001c9fb:	89 d0                	mov    eax,edx
c001c9fd:	5b                   	pop    ebx
c001c9fe:	c3                   	ret    

c001c9ff <Thr::loadDLL(char const*, bool)>:
c001c9ff:	55                   	push   ebp
c001ca00:	57                   	push   edi
c001ca01:	56                   	push   esi
c001ca02:	53                   	push   ebx
c001ca03:	81 ec 34 01 00 00    	sub    esp,0x134
c001ca09:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001ca10:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001ca17:	56                   	push   esi
c001ca18:	68 4b ab 02 c0       	push   0xc002ab4b
c001ca1d:	e8 b3 5e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001ca22:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ca29:	e8 f6 2b ff ff       	call   c000f624 <malloc>
c001ca2e:	83 c4 0c             	add    esp,0xc
c001ca31:	89 c3                	mov    ebx,eax
c001ca33:	ff 35 d4 e2 02 c0    	push   DWORD PTR ds:0xc002e2d4
c001ca39:	56                   	push   esi
c001ca3a:	50                   	push   eax
c001ca3b:	e8 ee 63 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001ca40:	83 c4 10             	add    esp,0x10
c001ca43:	85 db                	test   ebx,ebx
c001ca45:	75 3c                	jne    c001ca83 <Thr::loadDLL(char const*, bool)+0x84>
c001ca47:	89 e8                	mov    eax,ebp
c001ca49:	84 c0                	test   al,al
c001ca4b:	0f 84 b0 01 00 00    	je     c001cc01 <Thr::loadDLL(char const*, bool)+0x202>
c001ca51:	50                   	push   eax
c001ca52:	50                   	push   eax
c001ca53:	68 5c ab 02 c0       	push   0xc002ab5c
c001ca58:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001ca5c:	57                   	push   edi
c001ca5d:	e8 01 3d fe ff       	call   c0000763 <strcpy>
c001ca62:	58                   	pop    eax
c001ca63:	5a                   	pop    edx
c001ca64:	56                   	push   esi
c001ca65:	57                   	push   edi
c001ca66:	e8 af 3d fe ff       	call   c000081a <strcat>
c001ca6b:	59                   	pop    ecx
c001ca6c:	58                   	pop    eax
c001ca6d:	68 6f ab 02 c0       	push   0xc002ab6f
c001ca72:	57                   	push   edi
c001ca73:	e8 a2 3d fe ff       	call   c000081a <strcat>
c001ca78:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca7b:	e8 43 d0 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001ca80:	83 c4 10             	add    esp,0x10
c001ca83:	50                   	push   eax
c001ca84:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001ca88:	50                   	push   eax
c001ca89:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ca8d:	50                   	push   eax
c001ca8e:	53                   	push   ebx
c001ca8f:	e8 aa 66 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001ca94:	83 c4 10             	add    esp,0x10
c001ca97:	85 db                	test   ebx,ebx
c001ca99:	74 0c                	je     c001caa7 <Thr::loadDLL(char const*, bool)+0xa8>
c001ca9b:	83 ec 0c             	sub    esp,0xc
c001ca9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001caa0:	53                   	push   ebx
c001caa1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001caa4:	83 c4 10             	add    esp,0x10
c001caa7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001caac:	75 0a                	jne    c001cab8 <Thr::loadDLL(char const*, bool)+0xb9>
c001caae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cab2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cab6:	75 3c                	jne    c001caf4 <Thr::loadDLL(char const*, bool)+0xf5>
c001cab8:	89 e8                	mov    eax,ebp
c001caba:	84 c0                	test   al,al
c001cabc:	0f 84 3d 01 00 00    	je     c001cbff <Thr::loadDLL(char const*, bool)+0x200>
c001cac2:	50                   	push   eax
c001cac3:	50                   	push   eax
c001cac4:	68 5c ab 02 c0       	push   0xc002ab5c
c001cac9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cacd:	53                   	push   ebx
c001cace:	e8 90 3c fe ff       	call   c0000763 <strcpy>
c001cad3:	58                   	pop    eax
c001cad4:	5a                   	pop    edx
c001cad5:	56                   	push   esi
c001cad6:	53                   	push   ebx
c001cad7:	e8 3e 3d fe ff       	call   c000081a <strcat>
c001cadc:	59                   	pop    ecx
c001cadd:	5f                   	pop    edi
c001cade:	68 6f ab 02 c0       	push   0xc002ab6f
c001cae3:	53                   	push   ebx
c001cae4:	e8 31 3d fe ff       	call   c000081a <strcat>
c001cae9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001caec:	e8 d2 cf ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001caf1:	83 c4 10             	add    esp,0x10
c001caf4:	e8 7c 4f ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c001caf9:	51                   	push   ecx
c001cafa:	6a 03                	push   0x3
c001cafc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cb00:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cb04:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001cb0a:	83 d3 00             	adc    ebx,0x0
c001cb0d:	89 ca                	mov    edx,ecx
c001cb0f:	89 d1                	mov    ecx,edx
c001cb11:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001cb15:	51                   	push   ecx
c001cb16:	50                   	push   eax
c001cb17:	e8 94 55 ff ff       	call   c00120b0 <VAS::allocatePages(int, int)>
c001cb1c:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb1f:	89 c3                	mov    ebx,eax
c001cb21:	e8 bb 3b fe ff       	call   c00006e1 <strlen>
c001cb26:	8b 3d e0 da 02 c0    	mov    edi,DWORD PTR ds:0xc002dae0
c001cb2c:	40                   	inc    eax
c001cb2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb30:	e8 ef 2a ff ff       	call   c000f624 <malloc>
c001cb35:	89 04 bd 00 df 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2100],eax
c001cb3c:	5f                   	pop    edi
c001cb3d:	58                   	pop    eax
c001cb3e:	a1 e0 da 02 c0       	mov    eax,ds:0xc002dae0
c001cb43:	56                   	push   esi
c001cb44:	ff 34 85 00 df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2100]
c001cb4b:	e8 13 3c fe ff       	call   c0000763 <strcpy>
c001cb50:	a1 e0 da 02 c0       	mov    eax,ds:0xc002dae0
c001cb55:	8d 50 01             	lea    edx,[eax+0x1]
c001cb58:	89 1c 85 00 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2300],ebx
c001cb5f:	89 15 e0 da 02 c0    	mov    DWORD PTR ds:0xc002dae0,edx
c001cb65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cb69:	83 c4 0c             	add    esp,0xc
c001cb6c:	89 14 85 00 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2500],edx
c001cb73:	6a 01                	push   0x1
c001cb75:	53                   	push   ebx
c001cb76:	56                   	push   esi
c001cb77:	e8 e4 f6 ff ff       	call   c001c260 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cb7c:	83 c4 10             	add    esp,0x10
c001cb7f:	89 c7                	mov    edi,eax
c001cb81:	fe c8                	dec    al
c001cb83:	74 16                	je     c001cb9b <Thr::loadDLL(char const*, bool)+0x19c>
c001cb85:	89 e8                	mov    eax,ebp
c001cb87:	84 c0                	test   al,al
c001cb89:	74 10                	je     c001cb9b <Thr::loadDLL(char const*, bool)+0x19c>
c001cb8b:	83 ec 0c             	sub    esp,0xc
c001cb8e:	68 71 ab 02 c0       	push   0xc002ab71
c001cb93:	e8 2b cf ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001cb98:	83 c4 10             	add    esp,0x10
c001cb9b:	31 f6                	xor    esi,esi
c001cb9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cba1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cba5:	05 ff 0f 00 00       	add    eax,0xfff
c001cbaa:	83 d2 00             	adc    edx,0x0
c001cbad:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cbb1:	c1 ea 0c             	shr    edx,0xc
c001cbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cbbc:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001cbc0:	ba 00 00 00 00       	mov    edx,0x0
c001cbc5:	89 d0                	mov    eax,edx
c001cbc7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001cbcb:	73 2c                	jae    c001cbf9 <Thr::loadDLL(char const*, bool)+0x1fa>
c001cbcd:	e8 a3 4e ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c001cbd2:	89 f5                	mov    ebp,esi
c001cbd4:	c1 e5 0c             	shl    ebp,0xc
c001cbd7:	52                   	push   edx
c001cbd8:	01 dd                	add    ebp,ebx
c001cbda:	52                   	push   edx
c001cbdb:	55                   	push   ebp
c001cbdc:	50                   	push   eax
c001cbdd:	e8 48 50 ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c001cbe2:	83 c4 10             	add    esp,0x10
c001cbe5:	f6 00 60             	test   BYTE PTR [eax],0x60
c001cbe8:	75 0c                	jne    c001cbf6 <Thr::loadDLL(char const*, bool)+0x1f7>
c001cbea:	83 ec 0c             	sub    esp,0xc
c001cbed:	55                   	push   ebp
c001cbee:	e8 26 30 ff ff       	call   c000fc19 <Phys::freePage(unsigned long)>
c001cbf3:	83 c4 10             	add    esp,0x10
c001cbf6:	46                   	inc    esi
c001cbf7:	eb a4                	jmp    c001cb9d <Thr::loadDLL(char const*, bool)+0x19e>
c001cbf9:	89 f8                	mov    eax,edi
c001cbfb:	84 c0                	test   al,al
c001cbfd:	75 02                	jne    c001cc01 <Thr::loadDLL(char const*, bool)+0x202>
c001cbff:	31 db                	xor    ebx,ebx
c001cc01:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cc07:	89 d8                	mov    eax,ebx
c001cc09:	5b                   	pop    ebx
c001cc0a:	5e                   	pop    esi
c001cc0b:	5f                   	pop    edi
c001cc0c:	5d                   	pop    ebp
c001cc0d:	c3                   	ret    

c001cc0e <Thr::executeDLL(unsigned long, void*)>:
c001cc0e:	56                   	push   esi
c001cc0f:	53                   	push   ebx
c001cc10:	51                   	push   ecx
c001cc11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cc19:	85 db                	test   ebx,ebx
c001cc1b:	75 10                	jne    c001cc2d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001cc1d:	83 ec 0c             	sub    esp,0xc
c001cc20:	68 90 ab 02 c0       	push   0xc002ab90
c001cc25:	e8 99 ce ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001cc2a:	83 c4 10             	add    esp,0x10
c001cc2d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001cc31:	89 d8                	mov    eax,ebx
c001cc33:	5a                   	pop    edx
c001cc34:	5b                   	pop    ebx
c001cc35:	5e                   	pop    esi
c001cc36:	ff e0                	jmp    eax

c001cc38 <changeTSS>:
c001cc38:	83 ec 14             	sub    esp,0x14
c001cc3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc40:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001cc43:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001cc48:	c1 e2 15             	shl    edx,0x15
c001cc4b:	29 d0                	sub    eax,edx
c001cc4d:	50                   	push   eax
c001cc4e:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001cc53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cc59:	05 7c 11 00 00       	add    eax,0x117c
c001cc5e:	50                   	push   eax
c001cc5f:	e8 c0 45 ff ff       	call   c0011224 <TSS::setESP(unsigned long)>
c001cc64:	83 c4 1c             	add    esp,0x1c
c001cc67:	c3                   	ret    

c001cc68 <Process::addArgs(char**)>:
c001cc68:	57                   	push   edi
c001cc69:	56                   	push   esi
c001cc6a:	53                   	push   ebx
c001cc6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc6f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cc73:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001cc7d:	85 ff                	test   edi,edi
c001cc7f:	74 3d                	je     c001ccbe <Process::addArgs(char**)+0x56>
c001cc81:	8b 07                	mov    eax,DWORD PTR [edi]
c001cc83:	85 c0                	test   eax,eax
c001cc85:	74 37                	je     c001ccbe <Process::addArgs(char**)+0x56>
c001cc87:	31 db                	xor    ebx,ebx
c001cc89:	83 ec 0c             	sub    esp,0xc
c001cc8c:	50                   	push   eax
c001cc8d:	e8 4f 3a fe ff       	call   c00006e1 <strlen>
c001cc92:	40                   	inc    eax
c001cc93:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc96:	e8 89 29 ff ff       	call   c000f624 <malloc>
c001cc9b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001cca2:	5a                   	pop    edx
c001cca3:	59                   	pop    ecx
c001cca4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001cca7:	43                   	inc    ebx
c001cca8:	50                   	push   eax
c001cca9:	e8 b5 3a fe ff       	call   c0000763 <strcpy>
c001ccae:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001ccb4:	83 c4 10             	add    esp,0x10
c001ccb7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ccba:	85 c0                	test   eax,eax
c001ccbc:	75 cb                	jne    c001cc89 <Process::addArgs(char**)+0x21>
c001ccbe:	5b                   	pop    ebx
c001ccbf:	5e                   	pop    esi
c001ccc0:	5f                   	pop    edi
c001ccc1:	c3                   	ret    

c001ccc2 <Process::Process(char const*, Process*, char**)>:
c001ccc2:	56                   	push   esi
c001ccc3:	53                   	push   ebx
c001ccc4:	83 ec 14             	sub    esp,0x14
c001ccc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cccb:	05 0c 02 00 00       	add    eax,0x20c
c001ccd0:	bb 07 00 00 00       	mov    ebx,0x7
c001ccd5:	89 c6                	mov    esi,eax
c001ccd7:	85 db                	test   ebx,ebx
c001ccd9:	78 12                	js     c001cced <Process::Process(char const*, Process*, char**)+0x2b>
c001ccdb:	83 ec 0c             	sub    esp,0xc
c001ccde:	56                   	push   esi
c001ccdf:	e8 ae ac 00 00       	call   c0027992 <ThreadControlBlock::ThreadControlBlock()>
c001cce4:	83 c4 10             	add    esp,0x10
c001cce7:	83 c6 63             	add    esi,0x63
c001ccea:	4b                   	dec    ebx
c001cceb:	eb ea                	jmp    c001ccd7 <Process::Process(char const*, Process*, char**)+0x15>
c001cced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccf1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001ccf8:	83 ec 0c             	sub    esp,0xc
c001ccfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccff:	e8 10 cc ff ff       	call   c0019914 <Krnl::newProcessEnv(Process*)>
c001cd04:	83 c4 10             	add    esp,0x10
c001cd07:	89 c2                	mov    edx,eax
c001cd09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd0d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd17:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cd20:	a1 10 c3 02 c0       	mov    eax,ds:0xc002c310
c001cd25:	8d 50 01             	lea    edx,[eax+0x1]
c001cd28:	89 15 10 c3 02 c0    	mov    DWORD PTR ds:0xc002c310,edx
c001cd2e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cd32:	89 02                	mov    DWORD PTR [edx],eax
c001cd34:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001cd3c:	83 ec 0c             	sub    esp,0xc
c001cd3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd43:	e8 dc 28 ff ff       	call   c000f624 <malloc>
c001cd48:	83 c4 10             	add    esp,0x10
c001cd4b:	89 c3                	mov    ebx,eax
c001cd4d:	83 ec 08             	sub    esp,0x8
c001cd50:	6a 00                	push   0x0
c001cd52:	53                   	push   ebx
c001cd53:	e8 00 57 ff ff       	call   c0012458 <VAS::VAS(bool)>
c001cd58:	83 c4 10             	add    esp,0x10
c001cd5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd5f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cd65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd69:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cd73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd7b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cd81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd85:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cd8b:	85 c0                	test   eax,eax
c001cd8d:	74 42                	je     c001cdd1 <Process::Process(char const*, Process*, char**)+0x10f>
c001cd8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd93:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cd99:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cd9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cda3:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cda9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdad:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cdb3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cdb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdbd:	05 0c 01 00 00       	add    eax,0x10c
c001cdc2:	83 ec 08             	sub    esp,0x8
c001cdc5:	52                   	push   edx
c001cdc6:	50                   	push   eax
c001cdc7:	e8 97 39 fe ff       	call   c0000763 <strcpy>
c001cdcc:	83 c4 10             	add    esp,0x10
c001cdcf:	eb 63                	jmp    c001ce34 <Process::Process(char const*, Process*, char**)+0x172>
c001cdd1:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001cdd9:	83 ec 0c             	sub    esp,0xc
c001cddc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cde0:	e8 3f 28 ff ff       	call   c000f624 <malloc>
c001cde5:	83 c4 10             	add    esp,0x10
c001cde8:	89 c3                	mov    ebx,eax
c001cdea:	83 ec 08             	sub    esp,0x8
c001cded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdf1:	53                   	push   ebx
c001cdf2:	e8 2b 41 ff ff       	call   c0010f22 <VgaText::VgaText(char const*)>
c001cdf7:	83 c4 10             	add    esp,0x10
c001cdfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdfe:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ce04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce08:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ce0e:	83 ec 0c             	sub    esp,0xc
c001ce11:	50                   	push   eax
c001ce12:	e8 fe 34 ff ff       	call   c0010315 <addToTerminalCycle(VgaText*)>
c001ce17:	83 c4 10             	add    esp,0x10
c001ce1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce1e:	05 0c 01 00 00       	add    eax,0x10c
c001ce23:	83 ec 08             	sub    esp,0x8
c001ce26:	68 ba ab 02 c0       	push   0xc002abba
c001ce2b:	50                   	push   eax
c001ce2c:	e8 32 39 fe ff       	call   c0000763 <strcpy>
c001ce31:	83 c4 10             	add    esp,0x10
c001ce34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce38:	83 c0 0c             	add    eax,0xc
c001ce3b:	83 ec 08             	sub    esp,0x8
c001ce3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce42:	50                   	push   eax
c001ce43:	e8 1b 39 fe ff       	call   c0000763 <strcpy>
c001ce48:	83 c4 10             	add    esp,0x10
c001ce4b:	83 ec 08             	sub    esp,0x8
c001ce4e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce56:	e8 0d fe ff ff       	call   c001cc68 <Process::addArgs(char**)>
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	83 ec 08             	sub    esp,0x8
c001ce61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce69:	e8 be ee ff ff       	call   c001bd2c <Thr::loadProgramIntoMemory(Process*, char const*)>
c001ce6e:	83 c4 10             	add    esp,0x10
c001ce71:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce75:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ce79:	83 f0 01             	xor    eax,0x1
c001ce7c:	88 c2                	mov    dl,al
c001ce7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce82:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001ce88:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ce8d:	83 ec 08             	sub    esp,0x8
c001ce90:	50                   	push   eax
c001ce91:	68 b8 ac 02 c0       	push   0xc002acb8
c001ce96:	e8 3a 5a ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001ce9b:	83 c4 10             	add    esp,0x10
c001ce9e:	90                   	nop
c001ce9f:	83 c4 14             	add    esp,0x14
c001cea2:	5b                   	pop    ebx
c001cea3:	5e                   	pop    esi
c001cea4:	c3                   	ret    
c001cea5:	90                   	nop

c001cea6 <Process::Process(bool, char const*, Process*, char**)>:
c001cea6:	56                   	push   esi
c001cea7:	53                   	push   ebx
c001cea8:	83 ec 24             	sub    esp,0x24
c001ceab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ceaf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ceb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ceb7:	05 0c 02 00 00       	add    eax,0x20c
c001cebc:	bb 07 00 00 00       	mov    ebx,0x7
c001cec1:	89 c6                	mov    esi,eax
c001cec3:	85 db                	test   ebx,ebx
c001cec5:	78 12                	js     c001ced9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cec7:	83 ec 0c             	sub    esp,0xc
c001ceca:	56                   	push   esi
c001cecb:	e8 c2 aa 00 00       	call   c0027992 <ThreadControlBlock::ThreadControlBlock()>
c001ced0:	83 c4 10             	add    esp,0x10
c001ced3:	83 c6 63             	add    esi,0x63
c001ced6:	4b                   	dec    ebx
c001ced7:	eb ea                	jmp    c001cec3 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001ced9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cedd:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cee4:	83 ec 0c             	sub    esp,0xc
c001cee7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ceeb:	e8 24 ca ff ff       	call   c0019914 <Krnl::newProcessEnv(Process*)>
c001cef0:	83 c4 10             	add    esp,0x10
c001cef3:	89 c2                	mov    edx,eax
c001cef5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cef9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001ceff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf03:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cf0c:	a1 10 c3 02 c0       	mov    eax,ds:0xc002c310
c001cf11:	8d 50 01             	lea    edx,[eax+0x1]
c001cf14:	89 15 10 c3 02 c0    	mov    DWORD PTR ds:0xc002c310,edx
c001cf1a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cf1e:	89 02                	mov    DWORD PTR [edx],eax
c001cf20:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cf28:	83 ec 0c             	sub    esp,0xc
c001cf2b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cf2f:	e8 f0 26 ff ff       	call   c000f624 <malloc>
c001cf34:	83 c4 10             	add    esp,0x10
c001cf37:	89 c3                	mov    ebx,eax
c001cf39:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cf3e:	83 ec 08             	sub    esp,0x8
c001cf41:	50                   	push   eax
c001cf42:	53                   	push   ebx
c001cf43:	e8 10 55 ff ff       	call   c0012458 <VAS::VAS(bool)>
c001cf48:	83 c4 10             	add    esp,0x10
c001cf4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf4f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cf55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf59:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cf63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf67:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cf6b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cf71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf75:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cf7b:	85 c0                	test   eax,eax
c001cf7d:	74 42                	je     c001cfc1 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cf7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf83:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cf89:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cf8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf93:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cf99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf9d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cfa3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cfa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfad:	05 0c 01 00 00       	add    eax,0x10c
c001cfb2:	83 ec 08             	sub    esp,0x8
c001cfb5:	52                   	push   edx
c001cfb6:	50                   	push   eax
c001cfb7:	e8 a7 37 fe ff       	call   c0000763 <strcpy>
c001cfbc:	83 c4 10             	add    esp,0x10
c001cfbf:	eb 63                	jmp    c001d024 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cfc1:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cfc9:	83 ec 0c             	sub    esp,0xc
c001cfcc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cfd0:	e8 4f 26 ff ff       	call   c000f624 <malloc>
c001cfd5:	83 c4 10             	add    esp,0x10
c001cfd8:	89 c3                	mov    ebx,eax
c001cfda:	83 ec 08             	sub    esp,0x8
c001cfdd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cfe1:	53                   	push   ebx
c001cfe2:	e8 3b 3f ff ff       	call   c0010f22 <VgaText::VgaText(char const*)>
c001cfe7:	83 c4 10             	add    esp,0x10
c001cfea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfee:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cff4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cff8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cffe:	83 ec 0c             	sub    esp,0xc
c001d001:	50                   	push   eax
c001d002:	e8 0e 33 ff ff       	call   c0010315 <addToTerminalCycle(VgaText*)>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d00e:	05 0c 01 00 00       	add    eax,0x10c
c001d013:	83 ec 08             	sub    esp,0x8
c001d016:	68 ba ab 02 c0       	push   0xc002abba
c001d01b:	50                   	push   eax
c001d01c:	e8 42 37 fe ff       	call   c0000763 <strcpy>
c001d021:	83 c4 10             	add    esp,0x10
c001d024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d028:	83 c0 0c             	add    eax,0xc
c001d02b:	83 ec 08             	sub    esp,0x8
c001d02e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d032:	50                   	push   eax
c001d033:	e8 2b 37 fe ff       	call   c0000763 <strcpy>
c001d038:	83 c4 10             	add    esp,0x10
c001d03b:	83 ec 08             	sub    esp,0x8
c001d03e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d042:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d046:	e8 1d fc ff ff       	call   c001cc68 <Process::addArgs(char**)>
c001d04b:	83 c4 10             	add    esp,0x10
c001d04e:	90                   	nop
c001d04f:	83 c4 24             	add    esp,0x24
c001d052:	5b                   	pop    ebx
c001d053:	5e                   	pop    esi
c001d054:	c3                   	ret    

c001d055 <disableIRQs()>:
c001d055:	fa                   	cli    
c001d056:	ff 05 ac e2 02 c0    	inc    DWORD PTR ds:0xc002e2ac
c001d05c:	c3                   	ret    

c001d05d <getIRQNestingLevel()>:
c001d05d:	a1 ac e2 02 c0       	mov    eax,ds:0xc002e2ac
c001d062:	c3                   	ret    

c001d063 <enableIRQs()>:
c001d063:	a1 ac e2 02 c0       	mov    eax,ds:0xc002e2ac
c001d068:	48                   	dec    eax
c001d069:	a3 ac e2 02 c0       	mov    ds:0xc002e2ac,eax
c001d06e:	75 01                	jne    c001d071 <enableIRQs()+0xe>
c001d070:	fb                   	sti    
c001d071:	c3                   	ret    

c001d072 <lockScheduler()>:
c001d072:	eb e1                	jmp    c001d055 <disableIRQs()>

c001d074 <unlockScheduler()>:
c001d074:	eb ed                	jmp    c001d063 <enableIRQs()>

c001d076 <userModeEntryPoint(void*)>:
c001d076:	83 ec 0c             	sub    esp,0xc
c001d079:	e8 f6 ff ff ff       	call   c001d074 <unlockScheduler()>
c001d07e:	fb                   	sti    
c001d07f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d084:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d087:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d08d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d091:	83 c4 0c             	add    esp,0xc
c001d094:	e9 91 32 fe ff       	jmp    c000032a <goToUsermode>

c001d099 <lockStuff()>:
c001d099:	e8 b7 ff ff ff       	call   c001d055 <disableIRQs()>
c001d09e:	ff 05 a8 e2 02 c0    	inc    DWORD PTR ds:0xc002e2a8
c001d0a4:	c3                   	ret    

c001d0a5 <taskStartupFunction>:
c001d0a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0aa:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d0ad:	c3                   	ret    

c001d0ae <updateTimeUsed()>:
c001d0ae:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c001d0b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0b9:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d0c0:	74 50                	je     c001d112 <updateTimeUsed()+0x64>
c001d0c2:	57                   	push   edi
c001d0c3:	56                   	push   esi
c001d0c4:	53                   	push   ebx
c001d0c5:	0f 31                	rdtsc  
c001d0c7:	89 c1                	mov    ecx,eax
c001d0c9:	a3 e8 e2 02 c0       	mov    ds:0xc002e2e8,eax
c001d0ce:	2b 0d d8 e2 02 c0    	sub    ecx,DWORD PTR ds:0xc002e2d8
c001d0d4:	89 d3                	mov    ebx,edx
c001d0d6:	89 0d e0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e0,ecx
c001d0dc:	1b 1d dc e2 02 c0    	sbb    ebx,DWORD PTR ds:0xc002e2dc
c001d0e2:	a3 d8 e2 02 c0       	mov    ds:0xc002e2d8,eax
c001d0e7:	89 1d e4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e4,ebx
c001d0ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0f2:	89 15 ec e2 02 c0    	mov    DWORD PTR ds:0xc002e2ec,edx
c001d0f8:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d0fb:	89 15 dc e2 02 c0    	mov    DWORD PTR ds:0xc002e2dc,edx
c001d101:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d104:	01 f1                	add    ecx,esi
c001d106:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d109:	11 fb                	adc    ebx,edi
c001d10b:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d10e:	5b                   	pop    ebx
c001d10f:	5e                   	pop    esi
c001d110:	5f                   	pop    edi
c001d111:	c3                   	ret    
c001d112:	c3                   	ret    

c001d113 <switchToThread(ThreadControlBlock*)>:
c001d113:	53                   	push   ebx
c001d114:	83 ec 08             	sub    esp,0x8
c001d117:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001d11c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d120:	85 c0                	test   eax,eax
c001d122:	75 30                	jne    c001d154 <switchToThread(ThreadControlBlock*)+0x41>
c001d124:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d127:	3c ff                	cmp    al,0xff
c001d129:	74 25                	je     c001d150 <switchToThread(ThreadControlBlock*)+0x3d>
c001d12b:	0f b6 d0             	movzx  edx,al
c001d12e:	b8 84 03 00 00       	mov    eax,0x384
c001d133:	29 d0                	sub    eax,edx
c001d135:	c1 e0 10             	shl    eax,0x10
c001d138:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d13b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d13e:	e8 6b ff ff ff       	call   c001d0ae <updateTimeUsed()>
c001d143:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d147:	83 c4 08             	add    esp,0x8
c001d14a:	5b                   	pop    ebx
c001d14b:	e9 12 32 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d150:	31 c0                	xor    eax,eax
c001d152:	eb e7                	jmp    c001d13b <switchToThread(ThreadControlBlock*)+0x28>
c001d154:	c7 05 a4 e2 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e2a4,0x1
c001d15e:	83 c4 08             	add    esp,0x8
c001d161:	5b                   	pop    ebx
c001d162:	c3                   	ret    
c001d163:	90                   	nop

c001d164 <Semaphore::Semaphore(int)>:
c001d164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d168:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d16c:	89 10                	mov    DWORD PTR [eax],edx
c001d16e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d172:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d17d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d188:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d18f:	90                   	nop
c001d190:	c3                   	ret    
c001d191:	90                   	nop

c001d192 <Mutex::Mutex()>:
c001d192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d196:	6a 01                	push   0x1
c001d198:	50                   	push   eax
c001d199:	e8 c6 ff ff ff       	call   c001d164 <Semaphore::Semaphore(int)>
c001d19e:	83 c4 08             	add    esp,0x8
c001d1a1:	90                   	nop
c001d1a2:	c3                   	ret    
c001d1a3:	90                   	nop

c001d1a4 <Process::createThread(void (*)(void*), void*, int)>:
c001d1a4:	55                   	push   ebp
c001d1a5:	31 c9                	xor    ecx,ecx
c001d1a7:	57                   	push   edi
c001d1a8:	56                   	push   esi
c001d1a9:	53                   	push   ebx
c001d1aa:	83 ec 1c             	sub    esp,0x1c
c001d1ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d1b1:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d1b8:	89 f2                	mov    edx,esi
c001d1ba:	0f b7 c2             	movzx  eax,dx
c001d1bd:	83 e2 01             	and    edx,0x1
c001d1c0:	74 14                	je     c001d1d6 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d1c2:	d1 f8                	sar    eax,1
c001d1c4:	41                   	inc    ecx
c001d1c5:	89 c2                	mov    edx,eax
c001d1c7:	83 f9 10             	cmp    ecx,0x10
c001d1ca:	75 ee                	jne    c001d1ba <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d1cc:	83 c4 1c             	add    esp,0x1c
c001d1cf:	31 c0                	xor    eax,eax
c001d1d1:	5b                   	pop    ebx
c001d1d2:	5e                   	pop    esi
c001d1d3:	5f                   	pop    edi
c001d1d4:	5d                   	pop    ebp
c001d1d5:	c3                   	ret    
c001d1d6:	83 ec 08             	sub    esp,0x8
c001d1d9:	b8 01 00 00 00       	mov    eax,0x1
c001d1de:	d3 e0                	shl    eax,cl
c001d1e0:	09 c6                	or     esi,eax
c001d1e2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d1e8:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d1ef:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d1f2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d1f5:	01 ce                	add    esi,ecx
c001d1f7:	89 f0                	mov    eax,esi
c001d1f9:	c1 e0 05             	shl    eax,0x5
c001d1fc:	01 c6                	add    esi,eax
c001d1fe:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d201:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d207:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d20d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d211:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d217:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d21d:	89 ca                	mov    edx,ecx
c001d21f:	f7 da                	neg    edx
c001d221:	c1 e2 15             	shl    edx,0x15
c001d224:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d22a:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d230:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d234:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d23e:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d244:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d248:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d24e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d258:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d262:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d269:	50                   	push   eax
c001d26a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d26e:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d273:	e8 a8 a5 00 00       	call   c0027820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d278:	83 c4 10             	add    esp,0x10
c001d27b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d27f:	83 c4 1c             	add    esp,0x1c
c001d282:	5b                   	pop    ebx
c001d283:	5e                   	pop    esi
c001d284:	5f                   	pop    edi
c001d285:	5d                   	pop    ebp
c001d286:	c3                   	ret    
c001d287:	90                   	nop

c001d288 <Process::createUserThread()>:
c001d288:	83 ec 0c             	sub    esp,0xc
c001d28b:	68 80 00 00 00       	push   0x80
c001d290:	6a 00                	push   0x0
c001d292:	68 76 d0 01 c0       	push   0xc001d076
c001d297:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d29b:	e8 04 ff ff ff       	call   c001d1a4 <Process::createThread(void (*)(void*), void*, int)>
c001d2a0:	83 c4 1c             	add    esp,0x1c
c001d2a3:	c3                   	ret    

c001d2a4 <setupMultitasking(void (*)())>:
c001d2a4:	56                   	push   esi
c001d2a5:	53                   	push   ebx
c001d2a6:	53                   	push   ebx
c001d2a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d2ab:	eb 10                	jmp    c001d2bd <setupMultitasking(void (*)())+0x19>
c001d2ad:	83 ec 0c             	sub    esp,0xc
c001d2b0:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d2b5:	e8 b8 a4 00 00       	call   c0027772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d2ba:	83 c4 10             	add    esp,0x10
c001d2bd:	83 ec 0c             	sub    esp,0xc
c001d2c0:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d2c5:	e8 8c a4 00 00       	call   c0027756 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d2ca:	83 c4 10             	add    esp,0x10
c001d2cd:	84 c0                	test   al,al
c001d2cf:	74 dc                	je     c001d2ad <setupMultitasking(void (*)())+0x9>
c001d2d1:	83 ec 0c             	sub    esp,0xc
c001d2d4:	68 3f 07 00 00       	push   0x73f
c001d2d9:	e8 46 23 ff ff       	call   c000f624 <malloc>
c001d2de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d2e5:	89 c3                	mov    ebx,eax
c001d2e7:	6a 00                	push   0x0
c001d2e9:	68 be ab 02 c0       	push   0xc002abbe
c001d2ee:	6a 01                	push   0x1
c001d2f0:	50                   	push   eax
c001d2f1:	e8 b0 fb ff ff       	call   c001cea6 <Process::Process(bool, char const*, Process*, char**)>
c001d2f6:	83 c4 18             	add    esp,0x18
c001d2f9:	89 1d d4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2d4,ebx
c001d2ff:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d305:	68 e0 ac 02 c0       	push   0xc002ace0
c001d30a:	e8 c6 55 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d30f:	58                   	pop    eax
c001d310:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d316:	e8 7c 37 ff ff       	call   c0010a97 <setActiveTerminal(VgaText*)>
c001d31b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d323:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d329:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d32c:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d336:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d33c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d342:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d34c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d356:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d360:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d366:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d36c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d376:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d37c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d386:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d38c:	5a                   	pop    edx
c001d38d:	59                   	pop    ecx
c001d38e:	68 ba ab 02 c0       	push   0xc002abba
c001d393:	50                   	push   eax
c001d394:	e8 ca 33 fe ff       	call   c0000763 <strcpy>
c001d399:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d3a0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d3a4:	83 c4 14             	add    esp,0x14
c001d3a7:	5b                   	pop    ebx
c001d3a8:	5e                   	pop    esi
c001d3a9:	e9 a6 2f fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d3ae <schedule()>:
c001d3ae:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001d3b3:	85 c0                	test   eax,eax
c001d3b5:	74 0b                	je     c001d3c2 <schedule()+0x14>
c001d3b7:	c7 05 a4 e2 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e2a4,0x1
c001d3c1:	c3                   	ret    
c001d3c2:	53                   	push   ebx
c001d3c3:	83 ec 14             	sub    esp,0x14
c001d3c6:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d3cb:	e8 86 a3 00 00       	call   c0027756 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d3d0:	83 c4 10             	add    esp,0x10
c001d3d3:	84 c0                	test   al,al
c001d3d5:	75 38                	jne    c001d40f <schedule()+0x61>
c001d3d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d3dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3df:	4a                   	dec    edx
c001d3e0:	74 32                	je     c001d414 <schedule()+0x66>
c001d3e2:	83 ec 0c             	sub    esp,0xc
c001d3e5:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d3ea:	e8 5f a3 00 00       	call   c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d3ef:	c7 04 24 c8 e2 02 c0 	mov    DWORD PTR [esp],0xc002e2c8
c001d3f6:	89 c3                	mov    ebx,eax
c001d3f8:	e8 75 a3 00 00       	call   c0027772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d3fd:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d404:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d407:	e8 07 fd ff ff       	call   c001d113 <switchToThread(ThreadControlBlock*)>
c001d40c:	83 c4 10             	add    esp,0x10
c001d40f:	83 c4 08             	add    esp,0x8
c001d412:	5b                   	pop    ebx
c001d413:	c3                   	ret    
c001d414:	83 ec 08             	sub    esp,0x8
c001d417:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d41e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d424:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d429:	e8 f2 a3 00 00       	call   c0027820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d42e:	83 c4 10             	add    esp,0x10
c001d431:	eb af                	jmp    c001d3e2 <schedule()+0x34>

c001d433 <unlockStuff()>:
c001d433:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001d438:	48                   	dec    eax
c001d439:	a3 a8 e2 02 c0       	mov    ds:0xc002e2a8,eax
c001d43e:	75 09                	jne    c001d449 <unlockStuff()+0x16>
c001d440:	a1 a4 e2 02 c0       	mov    eax,ds:0xc002e2a4
c001d445:	85 c0                	test   eax,eax
c001d447:	75 05                	jne    c001d44e <unlockStuff()+0x1b>
c001d449:	e9 15 fc ff ff       	jmp    c001d063 <enableIRQs()>
c001d44e:	83 ec 0c             	sub    esp,0xc
c001d451:	c7 05 a4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2a4,0x0
c001d45b:	e8 4e ff ff ff       	call   c001d3ae <schedule()>
c001d460:	83 c4 0c             	add    esp,0xc
c001d463:	e9 fb fb ff ff       	jmp    c001d063 <enableIRQs()>

c001d468 <Semaphore::tryAcquire()>:
c001d468:	83 ec 0c             	sub    esp,0xc
c001d46b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d46f:	e8 25 fc ff ff       	call   c001d099 <lockStuff()>
c001d474:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d477:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d479:	7c 0b                	jl     c001d486 <Semaphore::tryAcquire()+0x1e>
c001d47b:	e8 b3 ff ff ff       	call   c001d433 <unlockStuff()>
c001d480:	31 c0                	xor    eax,eax
c001d482:	83 c4 0c             	add    esp,0xc
c001d485:	c3                   	ret    
c001d486:	42                   	inc    edx
c001d487:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d48a:	e8 a4 ff ff ff       	call   c001d433 <unlockStuff()>
c001d48f:	b0 01                	mov    al,0x1
c001d491:	83 c4 0c             	add    esp,0xc
c001d494:	c3                   	ret    
c001d495:	90                   	nop

c001d496 <Semaphore::assertLocked(char const*)>:
c001d496:	83 ec 0c             	sub    esp,0xc
c001d499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d49d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d4a1:	e8 f3 fb ff ff       	call   c001d099 <lockStuff()>
c001d4a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d4a8:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d4ab:	7c 05                	jl     c001d4b2 <Semaphore::assertLocked(char const*)+0x1c>
c001d4ad:	83 c4 0c             	add    esp,0xc
c001d4b0:	eb 81                	jmp    c001d433 <unlockStuff()>
c001d4b2:	83 ec 0c             	sub    esp,0xc
c001d4b5:	52                   	push   edx
c001d4b6:	e8 08 c6 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001d4bb:	83 c4 10             	add    esp,0x10
c001d4be:	83 c4 0c             	add    esp,0xc
c001d4c1:	e9 6d ff ff ff       	jmp    c001d433 <unlockStuff()>

c001d4c6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d4c6:	83 ec 0c             	sub    esp,0xc
c001d4c9:	e8 8f fb ff ff       	call   c001d05d <getIRQNestingLevel()>
c001d4ce:	83 ec 08             	sub    esp,0x8
c001d4d1:	50                   	push   eax
c001d4d2:	68 14 ad 02 c0       	push   0xc002ad14
c001d4d7:	e8 f9 53 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d4dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d4e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d4e5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4e8:	e8 c1 fe ff ff       	call   c001d3ae <schedule()>
c001d4ed:	e8 82 fb ff ff       	call   c001d074 <unlockScheduler()>
c001d4f2:	e8 66 fb ff ff       	call   c001d05d <getIRQNestingLevel()>
c001d4f7:	5a                   	pop    edx
c001d4f8:	59                   	pop    ecx
c001d4f9:	50                   	push   eax
c001d4fa:	68 48 ad 02 c0       	push   0xc002ad48
c001d4ff:	e8 d1 53 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d504:	83 c4 1c             	add    esp,0x1c
c001d507:	c3                   	ret    

c001d508 <blockTask(TaskState)>:
c001d508:	83 ec 0c             	sub    esp,0xc
c001d50b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d50f:	e8 5e fb ff ff       	call   c001d072 <lockScheduler()>
c001d514:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d519:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d51c:	e8 8d fe ff ff       	call   c001d3ae <schedule()>
c001d521:	83 c4 0c             	add    esp,0xc
c001d524:	e9 4b fb ff ff       	jmp    c001d074 <unlockScheduler()>

c001d529 <waitTask(int, int*, int)>:
c001d529:	83 ec 18             	sub    esp,0x18
c001d52c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d531:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d535:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d538:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d53c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d541:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d544:	6a 07                	push   0x7
c001d546:	e8 bd ff ff ff       	call   c001d508 <blockTask(TaskState)>
c001d54b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d550:	83 c4 10             	add    esp,0x10
c001d553:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d556:	85 d2                	test   edx,edx
c001d558:	74 0a                	je     c001d564 <waitTask(int, int*, int)+0x3b>
c001d55a:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d55d:	89 02                	mov    DWORD PTR [edx],eax
c001d55f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d564:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d567:	83 c4 0c             	add    esp,0xc
c001d56a:	c3                   	ret    

c001d56b <nanoSleepUntil(unsigned long long)>:
c001d56b:	83 ec 0c             	sub    esp,0xc
c001d56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d572:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d576:	3b 05 10 d4 02 c0    	cmp    eax,DWORD PTR ds:0xc002d410
c001d57c:	89 d1                	mov    ecx,edx
c001d57e:	1b 0d 14 d4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002d414
c001d584:	73 04                	jae    c001d58a <nanoSleepUntil(unsigned long long)+0x1f>
c001d586:	83 c4 0c             	add    esp,0xc
c001d589:	c3                   	ret    
c001d58a:	e8 0a fb ff ff       	call   c001d099 <lockStuff()>
c001d58f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d595:	83 ec 08             	sub    esp,0x8
c001d598:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d59b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d59e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d5a4:	68 bc e2 02 c0       	push   0xc002e2bc
c001d5a9:	e8 72 a2 00 00       	call   c0027820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d5ae:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d5b5:	e8 4e ff ff ff       	call   c001d508 <blockTask(TaskState)>
c001d5ba:	83 c4 1c             	add    esp,0x1c
c001d5bd:	e9 71 fe ff ff       	jmp    c001d433 <unlockStuff()>

c001d5c2 <nanoSleep(unsigned long long)>:
c001d5c2:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c001d5c7:	8b 15 14 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d414
c001d5cd:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d5d1:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d5d5:	eb 94                	jmp    c001d56b <nanoSleepUntil(unsigned long long)>

c001d5d7 <sleep(unsigned long long)>:
c001d5d7:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d5df:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d5e4:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d5e8:	01 ca                	add    edx,ecx
c001d5ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d5f2:	eb ce                	jmp    c001d5c2 <nanoSleep(unsigned long long)>

c001d5f4 <Semaphore::acquire()>:
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fb:	e8 99 fa ff ff       	call   c001d099 <lockStuff()>
c001d600:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d603:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d605:	7d 0c                	jge    c001d613 <Semaphore::acquire()+0x1f>
c001d607:	42                   	inc    edx
c001d608:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d60b:	83 c4 0c             	add    esp,0xc
c001d60e:	e9 20 fe ff ff       	jmp    c001d433 <unlockStuff()>
c001d613:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d619:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d620:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d623:	85 d2                	test   edx,edx
c001d625:	74 2a                	je     c001d651 <Semaphore::acquire()+0x5d>
c001d627:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d62a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d630:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d633:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d639:	83 ec 0c             	sub    esp,0xc
c001d63c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d63f:	6a 05                	push   0x5
c001d641:	e8 c2 fe ff ff       	call   c001d508 <blockTask(TaskState)>
c001d646:	83 c4 10             	add    esp,0x10
c001d649:	83 c4 0c             	add    esp,0xc
c001d64c:	e9 e2 fd ff ff       	jmp    c001d433 <unlockStuff()>
c001d651:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d657:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d65a:	eb d7                	jmp    c001d633 <Semaphore::acquire()+0x3f>

c001d65c <taskReturned>:
c001d65c:	83 ec 18             	sub    esp,0x18
c001d65f:	68 7c ad 02 c0       	push   0xc002ad7c
c001d664:	e8 5a c4 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001d669:	83 c4 10             	add    esp,0x10
c001d66c:	83 ec 0c             	sub    esp,0xc
c001d66f:	6a 02                	push   0x2
c001d671:	e8 92 fe ff ff       	call   c001d508 <blockTask(TaskState)>
c001d676:	e8 f7 f9 ff ff       	call   c001d072 <lockScheduler()>
c001d67b:	e8 2e fd ff ff       	call   c001d3ae <schedule()>
c001d680:	e8 ef f9 ff ff       	call   c001d074 <unlockScheduler()>
c001d685:	83 c4 10             	add    esp,0x10
c001d688:	eb e2                	jmp    c001d66c <taskReturned+0x10>

c001d68a <unblockTask(ThreadControlBlock*)>:
c001d68a:	53                   	push   ebx
c001d68b:	83 ec 08             	sub    esp,0x8
c001d68e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d692:	e8 db f9 ff ff       	call   c001d072 <lockScheduler()>
c001d697:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d69a:	85 c0                	test   eax,eax
c001d69c:	74 5c                	je     c001d6fa <unblockTask(ThreadControlBlock*)+0x70>
c001d69e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d6a1:	48                   	dec    eax
c001d6a2:	74 31                	je     c001d6d5 <unblockTask(ThreadControlBlock*)+0x4b>
c001d6a4:	83 ec 0c             	sub    esp,0xc
c001d6a7:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d6ac:	e8 9d a0 00 00       	call   c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d6b1:	83 c4 10             	add    esp,0x10
c001d6b4:	85 c0                	test   eax,eax
c001d6b6:	75 17                	jne    c001d6cf <unblockTask(ThreadControlBlock*)+0x45>
c001d6b8:	eb 65                	jmp    c001d71f <unblockTask(ThreadControlBlock*)+0x95>
c001d6ba:	83 ec 08             	sub    esp,0x8
c001d6bd:	50                   	push   eax
c001d6be:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d6c3:	e8 60 a3 00 00       	call   c0027a28 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d6c8:	83 c4 10             	add    esp,0x10
c001d6cb:	85 c0                	test   eax,eax
c001d6cd:	74 50                	je     c001d71f <unblockTask(ThreadControlBlock*)+0x95>
c001d6cf:	39 c3                	cmp    ebx,eax
c001d6d1:	75 e7                	jne    c001d6ba <unblockTask(ThreadControlBlock*)+0x30>
c001d6d3:	eb 1c                	jmp    c001d6f1 <unblockTask(ThreadControlBlock*)+0x67>
c001d6d5:	83 ec 0c             	sub    esp,0xc
c001d6d8:	68 6c ae 02 c0       	push   0xc002ae6c
c001d6dd:	e8 f3 51 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d6e2:	c7 04 24 f8 ad 02 c0 	mov    DWORD PTR [esp],0xc002adf8
c001d6e9:	e8 e7 51 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d6ee:	83 c4 10             	add    esp,0x10
c001d6f1:	83 c4 08             	add    esp,0x8
c001d6f4:	5b                   	pop    ebx
c001d6f5:	e9 7a f9 ff ff       	jmp    c001d074 <unlockScheduler()>
c001d6fa:	83 ec 0c             	sub    esp,0xc
c001d6fd:	68 b0 ad 02 c0       	push   0xc002adb0
c001d702:	e8 ce 51 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d707:	c7 04 24 f8 ad 02 c0 	mov    DWORD PTR [esp],0xc002adf8
c001d70e:	e8 c2 51 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d713:	83 c4 10             	add    esp,0x10
c001d716:	83 c4 08             	add    esp,0x8
c001d719:	5b                   	pop    ebx
c001d71a:	e9 55 f9 ff ff       	jmp    c001d074 <unlockScheduler()>
c001d71f:	83 ec 08             	sub    esp,0x8
c001d722:	53                   	push   ebx
c001d723:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d728:	e8 f3 a0 00 00       	call   c0027820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d72d:	83 c4 10             	add    esp,0x10
c001d730:	83 c4 08             	add    esp,0x8
c001d733:	5b                   	pop    ebx
c001d734:	e9 3b f9 ff ff       	jmp    c001d074 <unlockScheduler()>

c001d739 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d739:	55                   	push   ebp
c001d73a:	57                   	push   edi
c001d73b:	56                   	push   esi
c001d73c:	53                   	push   ebx
c001d73d:	83 ec 1c             	sub    esp,0x1c
c001d740:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d744:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d747:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d74d:	85 ff                	test   edi,edi
c001d74f:	7e 20                	jle    c001d771 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d751:	31 f6                	xor    esi,esi
c001d753:	83 ec 0c             	sub    esp,0xc
c001d756:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d75d:	46                   	inc    esi
c001d75e:	e8 d1 1e ff ff       	call   c000f634 <free>
c001d763:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d766:	83 c4 10             	add    esp,0x10
c001d769:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d76f:	7f e2                	jg     c001d753 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d771:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d77b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d780:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d783:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d786:	d3 c0                	rol    eax,cl
c001d788:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d78f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d792:	89 f7                	mov    edi,esi
c001d794:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d79c:	0f 85 74 01 00 00    	jne    c001d916 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d7a2:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d7a8:	85 ed                	test   ebp,ebp
c001d7aa:	74 1b                	je     c001d7c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d7ac:	83 ec 0c             	sub    esp,0xc
c001d7af:	55                   	push   ebp
c001d7b0:	e8 7b c0 ff ff       	call   c0019830 <EnvVarContainer::~EnvVarContainer()>
c001d7b5:	59                   	pop    ecx
c001d7b6:	5e                   	pop    esi
c001d7b7:	6a 0c                	push   0xc
c001d7b9:	55                   	push   ebp
c001d7ba:	e8 36 50 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c001d7bf:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d7c2:	83 c4 10             	add    esp,0x10
c001d7c5:	89 f7                	mov    edi,esi
c001d7c7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d7cd:	85 c0                	test   eax,eax
c001d7cf:	0f 84 aa 00 00 00    	je     c001d87f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d7d5:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d7d8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d7dc:	31 c9                	xor    ecx,ecx
c001d7de:	eb 10                	jmp    c001d7f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d7e0:	41                   	inc    ecx
c001d7e1:	83 f9 10             	cmp    ecx,0x10
c001d7e4:	0f 84 95 00 00 00    	je     c001d87f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d7ea:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d7f0:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d7f7:	d3 fa                	sar    edx,cl
c001d7f9:	83 e2 01             	and    edx,0x1
c001d7fc:	74 e2                	je     c001d7e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d7fe:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d801:	01 ca                	add    edx,ecx
c001d803:	89 d5                	mov    ebp,edx
c001d805:	c1 e5 05             	shl    ebp,0x5
c001d808:	01 ea                	add    edx,ebp
c001d80a:	01 d0                	add    eax,edx
c001d80c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d812:	83 fd 07             	cmp    ebp,0x7
c001d815:	75 c9                	jne    c001d7e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d817:	05 40 02 00 00       	add    eax,0x240
c001d81c:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d81f:	83 fd ff             	cmp    ebp,0xffffffff
c001d822:	0f 8c 08 01 00 00    	jl     c001d930 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d828:	0f 84 b9 01 00 00    	je     c001d9e7 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d82e:	85 ed                	test   ebp,ebp
c001d830:	0f 84 a0 01 00 00    	je     c001d9d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d836:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d838:	75 a6                	jne    c001d7e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d83a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d840:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d844:	01 d0                	add    eax,edx
c001d846:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d84a:	83 ec 0c             	sub    esp,0xc
c001d84d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d853:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d856:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d85c:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d863:	50                   	push   eax
c001d864:	e8 21 fe ff ff       	call   c001d68a <unblockTask(ThreadControlBlock*)>
c001d869:	83 c4 10             	add    esp,0x10
c001d86c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d86f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d873:	89 f7                	mov    edi,esi
c001d875:	41                   	inc    ecx
c001d876:	83 f9 10             	cmp    ecx,0x10
c001d879:	0f 85 6b ff ff ff    	jne    c001d7ea <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d87f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d885:	85 c0                	test   eax,eax
c001d887:	74 5d                	je     c001d8e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d889:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d88f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d895:	74 4f                	je     c001d8e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d897:	83 ec 0c             	sub    esp,0xc
c001d89a:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d89f:	e8 aa 9e 00 00       	call   c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d8a4:	c7 04 24 c8 e2 02 c0 	mov    DWORD PTR [esp],0xc002e2c8
c001d8ab:	89 c7                	mov    edi,eax
c001d8ad:	e8 a4 9e 00 00       	call   c0027756 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8b2:	83 c4 10             	add    esp,0x10
c001d8b5:	84 c0                	test   al,al
c001d8b7:	0f 84 e4 00 00 00    	je     c001d9a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d8bd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d8c0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d8c6:	85 d2                	test   edx,edx
c001d8c8:	74 0f                	je     c001d8d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d8ca:	83 ec 0c             	sub    esp,0xc
c001d8cd:	8b 02                	mov    eax,DWORD PTR [edx]
c001d8cf:	52                   	push   edx
c001d8d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d8d3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d8d6:	83 c4 10             	add    esp,0x10
c001d8d9:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d8e3:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d8e6:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d8ec:	85 db                	test   ebx,ebx
c001d8ee:	74 16                	je     c001d906 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d8f0:	83 ec 0c             	sub    esp,0xc
c001d8f3:	53                   	push   ebx
c001d8f4:	e8 4b 45 ff ff       	call   c0011e44 <VAS::~VAS()>
c001d8f9:	58                   	pop    eax
c001d8fa:	5a                   	pop    edx
c001d8fb:	6a 10                	push   0x10
c001d8fd:	53                   	push   ebx
c001d8fe:	e8 f2 4e ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c001d903:	83 c4 10             	add    esp,0x10
c001d906:	83 ec 0c             	sub    esp,0xc
c001d909:	68 c5 ab 02 c0       	push   0xc002abc5
c001d90e:	e8 c2 4f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d913:	83 c4 10             	add    esp,0x10
c001d916:	83 ec 08             	sub    esp,0x8
c001d919:	68 3f 07 00 00       	push   0x73f
c001d91e:	68 d3 ab 02 c0       	push   0xc002abd3
c001d923:	e8 ad 4f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d928:	83 c4 2c             	add    esp,0x2c
c001d92b:	5b                   	pop    ebx
c001d92c:	5e                   	pop    esi
c001d92d:	5f                   	pop    edi
c001d92e:	5d                   	pop    ebp
c001d92f:	c3                   	ret    
c001d930:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d934:	83 ec 0c             	sub    esp,0xc
c001d937:	68 b0 ae 02 c0       	push   0xc002aeb0
c001d93c:	e8 82 c1 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001d941:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d944:	83 c4 10             	add    esp,0x10
c001d947:	89 f7                	mov    edi,esi
c001d949:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d94d:	e9 8e fe ff ff       	jmp    c001d7e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d952:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d958:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d95e:	75 1c                	jne    c001d97c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d960:	83 ec 0c             	sub    esp,0xc
c001d963:	68 18 af 02 c0       	push   0xc002af18
c001d968:	e8 68 4f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d96d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d974:	e8 8f fb ff ff       	call   c001d508 <blockTask(TaskState)>
c001d979:	83 c4 10             	add    esp,0x10
c001d97c:	83 ec 08             	sub    esp,0x8
c001d97f:	56                   	push   esi
c001d980:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d985:	e8 96 9e 00 00       	call   c0027820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d98a:	c7 04 24 c8 e2 02 c0 	mov    DWORD PTR [esp],0xc002e2c8
c001d991:	e8 b8 9d 00 00       	call   c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d996:	83 c4 10             	add    esp,0x10
c001d999:	39 f8                	cmp    eax,edi
c001d99b:	0f 84 1c ff ff ff    	je     c001d8bd <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d9a1:	83 ec 0c             	sub    esp,0xc
c001d9a4:	68 c8 e2 02 c0       	push   0xc002e2c8
c001d9a9:	e8 a0 9d 00 00       	call   c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d9ae:	c7 04 24 c8 e2 02 c0 	mov    DWORD PTR [esp],0xc002e2c8
c001d9b5:	89 c6                	mov    esi,eax
c001d9b7:	e8 b6 9d 00 00       	call   c0027772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d9bc:	83 c4 10             	add    esp,0x10
c001d9bf:	39 f3                	cmp    ebx,esi
c001d9c1:	74 b9                	je     c001d97c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d9c3:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d9c6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d9c9:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d9cf:	75 ab                	jne    c001d97c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d9d1:	e9 7c ff ff ff       	jmp    c001d952 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d9d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d9da:	83 ec 0c             	sub    esp,0xc
c001d9dd:	68 e4 ae 02 c0       	push   0xc002aee4
c001d9e2:	e9 55 ff ff ff       	jmp    c001d93c <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d9e7:	8b 36                	mov    esi,DWORD PTR [esi]
c001d9e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d9ed:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d9f0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d9f3:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d9f9:	01 d7                	add    edi,edx
c001d9fb:	89 f8                	mov    eax,edi
c001d9fd:	e9 44 fe ff ff       	jmp    c001d846 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001da02 <cleanerTaskFunction(void*)>:
c001da02:	53                   	push   ebx
c001da03:	83 ec 08             	sub    esp,0x8
c001da06:	e8 69 f6 ff ff       	call   c001d074 <unlockScheduler()>
c001da0b:	e8 62 f6 ff ff       	call   c001d072 <lockScheduler()>
c001da10:	80 3d 8c e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e28c,0x0
c001da17:	0f 85 8e 00 00 00    	jne    c001daab <cleanerTaskFunction(void*)+0xa9>
c001da1d:	83 ec 0c             	sub    esp,0xc
c001da20:	6a 02                	push   0x2
c001da22:	e8 9f fa ff ff       	call   c001d4c6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001da27:	83 c4 10             	add    esp,0x10
c001da2a:	c6 05 8c e2 02 c0 00 	mov    BYTE PTR ds:0xc002e28c,0x0
c001da31:	e8 63 f6 ff ff       	call   c001d099 <lockStuff()>
c001da36:	e8 37 f6 ff ff       	call   c001d072 <lockScheduler()>
c001da3b:	83 ec 0c             	sub    esp,0xc
c001da3e:	68 b0 e2 02 c0       	push   0xc002e2b0
c001da43:	e8 0e 9d 00 00       	call   c0027756 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da48:	83 c4 10             	add    esp,0x10
c001da4b:	84 c0                	test   al,al
c001da4d:	75 40                	jne    c001da8f <cleanerTaskFunction(void*)+0x8d>
c001da4f:	83 ec 0c             	sub    esp,0xc
c001da52:	68 b0 e2 02 c0       	push   0xc002e2b0
c001da57:	e8 f2 9c 00 00       	call   c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da5c:	c7 04 24 b0 e2 02 c0 	mov    DWORD PTR [esp],0xc002e2b0
c001da63:	89 c3                	mov    ebx,eax
c001da65:	e8 08 9d 00 00       	call   c0027772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da6a:	c7 04 24 e9 ab 02 c0 	mov    DWORD PTR [esp],0xc002abe9
c001da71:	e8 5f 4e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001da76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da79:	e8 bb fc ff ff       	call   c001d739 <cleanupTerminatedTask(ThreadControlBlock*)>
c001da7e:	c7 04 24 02 ac 02 c0 	mov    DWORD PTR [esp],0xc002ac02
c001da85:	e8 4b 4e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001da8a:	83 c4 10             	add    esp,0x10
c001da8d:	eb ac                	jmp    c001da3b <cleanerTaskFunction(void*)+0x39>
c001da8f:	e8 e0 f5 ff ff       	call   c001d074 <unlockScheduler()>
c001da94:	e8 9a f9 ff ff       	call   c001d433 <unlockStuff()>
c001da99:	e8 d4 f5 ff ff       	call   c001d072 <lockScheduler()>
c001da9e:	80 3d 8c e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e28c,0x0
c001daa5:	0f 84 72 ff ff ff    	je     c001da1d <cleanerTaskFunction(void*)+0x1b>
c001daab:	e8 c4 f5 ff ff       	call   c001d074 <unlockScheduler()>
c001dab0:	e9 75 ff ff ff       	jmp    c001da2a <cleanerTaskFunction(void*)+0x28>

c001dab5 <terminateTask(int)>:
c001dab5:	83 ec 14             	sub    esp,0x14
c001dab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dabd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dac0:	83 c0 0c             	add    eax,0xc
c001dac3:	50                   	push   eax
c001dac4:	68 40 af 02 c0       	push   0xc002af40
c001dac9:	e8 07 4e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001dace:	e8 c6 f5 ff ff       	call   c001d099 <lockStuff()>
c001dad3:	e8 9a f5 ff ff       	call   c001d072 <lockScheduler()>
c001dad8:	c7 04 24 15 ac 02 c0 	mov    DWORD PTR [esp],0xc002ac15
c001dadf:	e8 f1 4d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001dae4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daed:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001daf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daf5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001daf8:	5a                   	pop    edx
c001daf9:	59                   	pop    ecx
c001dafa:	50                   	push   eax
c001dafb:	68 b0 e2 02 c0       	push   0xc002e2b0
c001db00:	e8 1b 9d 00 00       	call   c0027820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db0a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001db11:	c7 04 24 2f ac 02 c0 	mov    DWORD PTR [esp],0xc002ac2f
c001db18:	e8 b8 4d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001db1d:	83 c4 10             	add    esp,0x10
c001db20:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001db25:	85 c0                	test   eax,eax
c001db27:	74 5a                	je     c001db83 <terminateTask(int)+0xce>
c001db29:	83 ec 0c             	sub    esp,0xc
c001db2c:	68 49 ac 02 c0       	push   0xc002ac49
c001db31:	e8 9f 4d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001db36:	58                   	pop    eax
c001db37:	c6 05 8c e2 02 c0 01 	mov    BYTE PTR ds:0xc002e28c,0x1
c001db3e:	ff 35 88 e2 02 c0    	push   DWORD PTR ds:0xc002e288
c001db44:	e8 41 fb ff ff       	call   c001d68a <unblockTask(ThreadControlBlock*)>
c001db49:	c7 04 24 63 ac 02 c0 	mov    DWORD PTR [esp],0xc002ac63
c001db50:	e8 80 4d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001db55:	83 c4 10             	add    esp,0x10
c001db58:	e8 17 f5 ff ff       	call   c001d074 <unlockScheduler()>
c001db5d:	e8 d1 f8 ff ff       	call   c001d433 <unlockStuff()>
c001db62:	83 ec 0c             	sub    esp,0xc
c001db65:	68 9b ac 02 c0       	push   0xc002ac9b
c001db6a:	e8 66 4d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001db6f:	83 c4 10             	add    esp,0x10
c001db72:	e8 fb f4 ff ff       	call   c001d072 <lockScheduler()>
c001db77:	e8 32 f8 ff ff       	call   c001d3ae <schedule()>
c001db7c:	e8 f3 f4 ff ff       	call   c001d074 <unlockScheduler()>
c001db81:	eb ef                	jmp    c001db72 <terminateTask(int)+0xbd>
c001db83:	83 ec 0c             	sub    esp,0xc
c001db86:	68 7d ac 02 c0       	push   0xc002ac7d
c001db8b:	e8 45 4d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001db90:	83 c4 10             	add    esp,0x10
c001db93:	eb c3                	jmp    c001db58 <terminateTask(int)+0xa3>

c001db95 <Thr::terminateFromIRQ(int)>:
c001db95:	83 ec 18             	sub    esp,0x18
c001db98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db9c:	e8 14 ff ff ff       	call   c001dab5 <terminateTask(int)>
c001dba1:	90                   	nop

c001dba2 <Semaphore::release()>:
c001dba2:	83 ec 0c             	sub    esp,0xc
c001dba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dba9:	e8 eb f4 ff ff       	call   c001d099 <lockStuff()>
c001dbae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dbb1:	85 d2                	test   edx,edx
c001dbb3:	74 1a                	je     c001dbcf <Semaphore::release()+0x2d>
c001dbb5:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001dbb8:	83 ec 0c             	sub    esp,0xc
c001dbbb:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001dbbe:	52                   	push   edx
c001dbbf:	e8 c6 fa ff ff       	call   c001d68a <unblockTask(ThreadControlBlock*)>
c001dbc4:	83 c4 10             	add    esp,0x10
c001dbc7:	83 c4 0c             	add    esp,0xc
c001dbca:	e9 64 f8 ff ff       	jmp    c001d433 <unlockStuff()>
c001dbcf:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001dbd2:	83 c4 0c             	add    esp,0xc
c001dbd5:	e9 59 f8 ff ff       	jmp    c001d433 <unlockStuff()>

c001dbda <__static_initialization_and_destruction_0(int, int)>:
c001dbda:	83 ec 0c             	sub    esp,0xc
c001dbdd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dbe2:	0f 85 88 00 00 00    	jne    c001dc70 <__static_initialization_and_destruction_0(int, int)+0x96>
c001dbe8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dbf0:	75 7e                	jne    c001dc70 <__static_initialization_and_destruction_0(int, int)+0x96>
c001dbf2:	83 ec 0c             	sub    esp,0xc
c001dbf5:	68 c8 e2 02 c0       	push   0xc002e2c8
c001dbfa:	e8 d1 9d 00 00       	call   c00279d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dbff:	83 c4 10             	add    esp,0x10
c001dc02:	83 ec 04             	sub    esp,0x4
c001dc05:	68 b0 bc 02 c0       	push   0xc002bcb0
c001dc0a:	68 c8 e2 02 c0       	push   0xc002e2c8
c001dc0f:	68 90 79 02 c0       	push   0xc0027990
c001dc14:	e8 56 4b ff ff       	call   c001276f <__cxa_atexit>
c001dc19:	83 c4 10             	add    esp,0x10
c001dc1c:	83 ec 0c             	sub    esp,0xc
c001dc1f:	68 bc e2 02 c0       	push   0xc002e2bc
c001dc24:	e8 a7 9d 00 00       	call   c00279d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dc29:	83 c4 10             	add    esp,0x10
c001dc2c:	83 ec 04             	sub    esp,0x4
c001dc2f:	68 b0 bc 02 c0       	push   0xc002bcb0
c001dc34:	68 bc e2 02 c0       	push   0xc002e2bc
c001dc39:	68 90 79 02 c0       	push   0xc0027990
c001dc3e:	e8 2c 4b ff ff       	call   c001276f <__cxa_atexit>
c001dc43:	83 c4 10             	add    esp,0x10
c001dc46:	83 ec 0c             	sub    esp,0xc
c001dc49:	68 b0 e2 02 c0       	push   0xc002e2b0
c001dc4e:	e8 7d 9d 00 00       	call   c00279d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dc53:	83 c4 10             	add    esp,0x10
c001dc56:	83 ec 04             	sub    esp,0x4
c001dc59:	68 b0 bc 02 c0       	push   0xc002bcb0
c001dc5e:	68 b0 e2 02 c0       	push   0xc002e2b0
c001dc63:	68 90 79 02 c0       	push   0xc0027990
c001dc68:	e8 02 4b ff ff       	call   c001276f <__cxa_atexit>
c001dc6d:	83 c4 10             	add    esp,0x10
c001dc70:	90                   	nop
c001dc71:	83 c4 0c             	add    esp,0xc
c001dc74:	c3                   	ret    

c001dc75 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001dc75:	83 ec 0c             	sub    esp,0xc
c001dc78:	83 ec 08             	sub    esp,0x8
c001dc7b:	68 ff ff 00 00       	push   0xffff
c001dc80:	6a 01                	push   0x1
c001dc82:	e8 53 ff ff ff       	call   c001dbda <__static_initialization_and_destruction_0(int, int)>
c001dc87:	83 c4 10             	add    esp,0x10
c001dc8a:	83 c4 0c             	add    esp,0xc
c001dc8d:	c3                   	ret    

c001dc8e <Vm::inbv(unsigned short)>:
c001dc8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dc92:	66 81 fa fe fe       	cmp    dx,0xfefe
c001dc97:	75 06                	jne    c001dc9f <Vm::inbv(unsigned short)+0x11>
c001dc99:	a0 0c e3 02 c0       	mov    al,ds:0xc002e30c
c001dc9e:	c3                   	ret    
c001dc9f:	ec                   	in     al,dx
c001dca0:	c3                   	ret    

c001dca1 <Vm::outbv(unsigned short, unsigned char)>:
c001dca1:	53                   	push   ebx
c001dca2:	83 ec 08             	sub    esp,0x8
c001dca5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dca9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dcad:	66 81 fa fe fe       	cmp    dx,0xfefe
c001dcb2:	75 38                	jne    c001dcec <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001dcb4:	0f b6 c3             	movzx  eax,bl
c001dcb7:	51                   	push   ecx
c001dcb8:	51                   	push   ecx
c001dcb9:	50                   	push   eax
c001dcba:	68 5f af 02 c0       	push   0xc002af5f
c001dcbf:	e8 11 4c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001dcc4:	8b 15 0c e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e30c
c001dcca:	83 c4 10             	add    esp,0x10
c001dccd:	8d 42 01             	lea    eax,[edx+0x1]
c001dcd0:	88 9a 20 e3 02 c0    	mov    BYTE PTR [edx-0x3ffd1ce0],bl
c001dcd6:	a3 0c e3 02 c0       	mov    ds:0xc002e30c,eax
c001dcdb:	83 f8 20             	cmp    eax,0x20
c001dcde:	75 0f                	jne    c001dcef <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001dce0:	c7 05 0c e3 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002e30c,0x1f
c001dcea:	eb 03                	jmp    c001dcef <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001dcec:	88 d8                	mov    al,bl
c001dcee:	ee                   	out    dx,al
c001dcef:	83 c4 08             	add    esp,0x8
c001dcf2:	5b                   	pop    ebx
c001dcf3:	c3                   	ret    

c001dcf4 <Vm::realToLinear(unsigned short, unsigned short)>:
c001dcf4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcf9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcfe:	c1 e0 04             	shl    eax,0x4
c001dd01:	01 d0                	add    eax,edx
c001dd03:	c3                   	ret    

c001dd04 <Vm::getSegment(unsigned int)>:
c001dd04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd08:	c1 e8 10             	shr    eax,0x10
c001dd0b:	c3                   	ret    

c001dd0c <Vm::getOffset(unsigned int)>:
c001dd0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd10:	c3                   	ret    

c001dd11 <Vm::mainloop2()>:
c001dd11:	83 ec 0c             	sub    esp,0xc
c001dd14:	e8 59 f3 ff ff       	call   c001d072 <lockScheduler()>
c001dd19:	83 ec 0c             	sub    esp,0xc
c001dd1c:	c6 05 05 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e305,0x1
c001dd23:	6a 02                	push   0x2
c001dd25:	e8 9c f7 ff ff       	call   c001d4c6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dd2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd2f:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001dd33:	52                   	push   edx
c001dd34:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001dd38:	52                   	push   edx
c001dd39:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001dd3d:	52                   	push   edx
c001dd3e:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001dd42:	50                   	push   eax
c001dd43:	e8 b2 25 fe ff       	call   c00002fa <goToVM86>
c001dd48:	83 c4 2c             	add    esp,0x2c
c001dd4b:	c3                   	ret    

c001dd4c <Vm::mainVm8086Loop(void*)>:
c001dd4c:	83 ec 0c             	sub    esp,0xc
c001dd4f:	e8 20 f3 ff ff       	call   c001d074 <unlockScheduler()>
c001dd54:	83 c4 0c             	add    esp,0xc
c001dd57:	eb b8                	jmp    c001dd11 <Vm::mainloop2()>

c001dd59 <Vm::mainloop3(unsigned long)>:
c001dd59:	53                   	push   ebx
c001dd5a:	83 ec 08             	sub    esp,0x8
c001dd5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd61:	e8 0c f3 ff ff       	call   c001d072 <lockScheduler()>
c001dd66:	83 ec 0c             	sub    esp,0xc
c001dd69:	89 1d 00 e3 02 c0    	mov    DWORD PTR ds:0xc002e300,ebx
c001dd6f:	6a 02                	push   0x2
c001dd71:	c6 05 04 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e304,0x1
c001dd78:	e8 49 f7 ff ff       	call   c001d4c6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dd7d:	83 c4 18             	add    esp,0x18
c001dd80:	5b                   	pop    ebx
c001dd81:	eb 8e                	jmp    c001dd11 <Vm::mainloop2()>

c001dd83 <Vm::initialise8086()>:
c001dd83:	83 ec 0c             	sub    esp,0xc
c001dd86:	68 80 00 00 00       	push   0x80
c001dd8b:	6a 00                	push   0x0
c001dd8d:	68 4c dd 01 c0       	push   0xc001dd4c
c001dd92:	ff 35 d4 e2 02 c0    	push   DWORD PTR ds:0xc002e2d4
c001dd98:	e8 07 f4 ff ff       	call   c001d1a4 <Process::createThread(void (*)(void*), void*, int)>
c001dd9d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001dda4:	a3 08 e3 02 c0       	mov    ds:0xc002e308,eax
c001dda9:	68 00 01 00 00       	push   0x100
c001ddae:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c001ddb3:	6a 00                	push   0x0
c001ddb5:	6a 00                	push   0x0
c001ddb7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ddbd:	e8 e2 44 ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ddc2:	83 c4 2c             	add    esp,0x2c
c001ddc5:	c3                   	ret    

c001ddc6 <Vm::finish8086()>:
c001ddc6:	53                   	push   ebx
c001ddc7:	83 ec 08             	sub    esp,0x8
c001ddca:	e8 a3 f2 ff ff       	call   c001d072 <lockScheduler()>
c001ddcf:	80 3d 04 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e304,0x0
c001ddd6:	75 0c                	jne    c001dde4 <Vm::finish8086()+0x1e>
c001ddd8:	e8 d1 f5 ff ff       	call   c001d3ae <schedule()>
c001dddd:	e8 92 f2 ff ff       	call   c001d074 <unlockScheduler()>
c001dde2:	eb e6                	jmp    c001ddca <Vm::finish8086()+0x4>
c001dde4:	83 ec 0c             	sub    esp,0xc
c001dde7:	8b 1d 00 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e300
c001dded:	ff 35 08 e3 02 c0    	push   DWORD PTR ds:0xc002e308
c001ddf3:	c6 05 04 e3 02 c0 00 	mov    BYTE PTR ds:0xc002e304,0x0
c001ddfa:	e8 8b f8 ff ff       	call   c001d68a <unblockTask(ThreadControlBlock*)>
c001ddff:	e8 70 f2 ff ff       	call   c001d074 <unlockScheduler()>
c001de04:	89 d8                	mov    eax,ebx
c001de06:	83 c4 18             	add    esp,0x18
c001de09:	5b                   	pop    ebx
c001de0a:	c3                   	ret    

c001de0b <Vm::getOutput8086(unsigned char*)>:
c001de0b:	83 ec 10             	sub    esp,0x10
c001de0e:	ff 35 0c e3 02 c0    	push   DWORD PTR ds:0xc002e30c
c001de14:	68 20 e3 02 c0       	push   0xc002e320
c001de19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de1d:	e8 7e 28 fe ff       	call   c00006a0 <memcpy>
c001de22:	a1 0c e3 02 c0       	mov    eax,ds:0xc002e30c
c001de27:	c7 05 0c e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e30c,0x0
c001de31:	83 c4 1c             	add    esp,0x1c
c001de34:	c3                   	ret    

c001de35 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001de35:	55                   	push   ebp
c001de36:	57                   	push   edi
c001de37:	56                   	push   esi
c001de38:	53                   	push   ebx
c001de39:	83 ec 2c             	sub    esp,0x2c
c001de3c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001de40:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001de44:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001de48:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de4c:	e8 21 f2 ff ff       	call   c001d072 <lockScheduler()>
c001de51:	a0 05 e3 02 c0       	mov    al,ds:0xc002e305
c001de56:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001de5a:	84 c0                	test   al,al
c001de5c:	75 0c                	jne    c001de6a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001de5e:	e8 4b f5 ff ff       	call   c001d3ae <schedule()>
c001de63:	e8 0c f2 ff ff       	call   c001d074 <unlockScheduler()>
c001de68:	eb e2                	jmp    c001de4c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001de6a:	a1 08 e3 02 c0       	mov    eax,ds:0xc002e308
c001de6f:	c7 05 0c e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e30c,0x0
c001de79:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001de7d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001de81:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001de85:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001de89:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001de8d:	50                   	push   eax
c001de8e:	6a 20                	push   0x20
c001de90:	6a 00                	push   0x0
c001de92:	68 20 e3 02 c0       	push   0xc002e320
c001de97:	e8 28 28 fe ff       	call   c00006c4 <memset>
c001de9c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dea3:	e8 7c 17 ff ff       	call   c000f624 <malloc>
c001dea8:	83 c4 0c             	add    esp,0xc
c001deab:	89 c7                	mov    edi,eax
c001dead:	ff 35 d4 e2 02 c0    	push   DWORD PTR ds:0xc002e2d4
c001deb3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001deb7:	50                   	push   eax
c001deb8:	e8 71 4f ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001debd:	83 c4 10             	add    esp,0x10
c001dec0:	85 ff                	test   edi,edi
c001dec2:	75 0a                	jne    c001dece <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001dec4:	83 ec 0c             	sub    esp,0xc
c001dec7:	68 7b af 02 c0       	push   0xc002af7b
c001decc:	eb 27                	jmp    c001def5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001dece:	50                   	push   eax
c001decf:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ded3:	50                   	push   eax
c001ded4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ded8:	50                   	push   eax
c001ded9:	57                   	push   edi
c001deda:	e8 5f 52 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001dedf:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001dee4:	83 c4 10             	add    esp,0x10
c001dee7:	89 e8                	mov    eax,ebp
c001dee9:	84 c0                	test   al,al
c001deeb:	74 19                	je     c001df06 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001deed:	83 ec 0c             	sub    esp,0xc
c001def0:	68 8f af 02 c0       	push   0xc002af8f
c001def5:	e8 c9 bb ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001defa:	31 ed                	xor    ebp,ebp
c001defc:	e8 73 f1 ff ff       	call   c001d074 <unlockScheduler()>
c001df01:	83 c4 10             	add    esp,0x10
c001df04:	eb 75                	jmp    c001df7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001df06:	50                   	push   eax
c001df07:	50                   	push   eax
c001df08:	6a 01                	push   0x1
c001df0a:	57                   	push   edi
c001df0b:	e8 82 4f ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001df10:	83 c4 10             	add    esp,0x10
c001df13:	85 c0                	test   eax,eax
c001df15:	74 17                	je     c001df2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001df17:	83 ec 0c             	sub    esp,0xc
c001df1a:	68 a8 af 02 c0       	push   0xc002afa8
c001df1f:	e8 9f bb ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001df24:	e8 4b f1 ff ff       	call   c001d074 <unlockScheduler()>
c001df29:	83 c4 10             	add    esp,0x10
c001df2c:	eb 4d                	jmp    c001df7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001df2e:	0f b7 f6             	movzx  esi,si
c001df31:	50                   	push   eax
c001df32:	0f b7 db             	movzx  ebx,bx
c001df35:	50                   	push   eax
c001df36:	56                   	push   esi
c001df37:	53                   	push   ebx
c001df38:	e8 b7 fd ff ff       	call   c001dcf4 <Vm::realToLinear(unsigned short, unsigned short)>
c001df3d:	5a                   	pop    edx
c001df3e:	8b 17                	mov    edx,DWORD PTR [edi]
c001df40:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001df44:	51                   	push   ecx
c001df45:	50                   	push   eax
c001df46:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001df4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001df4e:	57                   	push   edi
c001df4f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001df52:	83 c4 14             	add    esp,0x14
c001df55:	57                   	push   edi
c001df56:	e8 95 4f ff ff       	call   c0012ef0 <File::close()>
c001df5b:	c6 05 05 e3 02 c0 00 	mov    BYTE PTR ds:0xc002e305,0x0
c001df62:	e8 0d f1 ff ff       	call   c001d074 <unlockScheduler()>
c001df67:	59                   	pop    ecx
c001df68:	ff 35 08 e3 02 c0    	push   DWORD PTR ds:0xc002e308
c001df6e:	e8 17 f7 ff ff       	call   c001d68a <unblockTask(ThreadControlBlock*)>
c001df73:	83 c4 10             	add    esp,0x10
c001df76:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001df7b:	83 c4 2c             	add    esp,0x2c
c001df7e:	89 e8                	mov    eax,ebp
c001df80:	5b                   	pop    ebx
c001df81:	5e                   	pop    esi
c001df82:	5f                   	pop    edi
c001df83:	5d                   	pop    ebp
c001df84:	c3                   	ret    

c001df85 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001df85:	57                   	push   edi
c001df86:	56                   	push   esi
c001df87:	53                   	push   ebx
c001df88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df90:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001df94:	83 e8 06             	sub    eax,0x6
c001df97:	0f b7 c0             	movzx  eax,ax
c001df9a:	50                   	push   eax
c001df9b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001dfa0:	50                   	push   eax
c001dfa1:	e8 4e fd ff ff       	call   c001dcf4 <Vm::realToLinear(unsigned short, unsigned short)>
c001dfa6:	5a                   	pop    edx
c001dfa7:	5e                   	pop    esi
c001dfa8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dfab:	8d 56 fa             	lea    edx,[esi-0x6]
c001dfae:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dfb4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001dfb7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001dfba:	83 c2 02             	add    edx,0x2
c001dfbd:	66 89 10             	mov    WORD PTR [eax],dx
c001dfc0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dfc3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dfc7:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dfca:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001dfce:	89 d6                	mov    esi,edx
c001dfd0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001dfd6:	66 81 e6 ff fd       	and    si,0xfdff
c001dfdb:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001dfdf:	74 07                	je     c001dfe8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001dfe1:	89 d6                	mov    esi,edx
c001dfe3:	66 81 ce 00 02       	or     si,0x200
c001dfe8:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dfec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dff1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dff5:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dffd:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e000:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e008:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e00b:	5b                   	pop    ebx
c001e00c:	5e                   	pop    esi
c001e00d:	5f                   	pop    edi
c001e00e:	c3                   	ret    

c001e00f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e00f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e014:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e019:	c1 e0 04             	shl    eax,0x4
c001e01c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e01f:	c3                   	ret    

c001e020 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e020:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e025:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e02a:	c1 e0 04             	shl    eax,0x4
c001e02d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e031:	c3                   	ret    

c001e032 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e032:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e037:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e03c:	c1 e0 04             	shl    eax,0x4
c001e03f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e042:	c3                   	ret    

c001e043 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e043:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e048:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e04d:	c1 e0 04             	shl    eax,0x4
c001e050:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e054:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e057:	c3                   	ret    

c001e058 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e058:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e05d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e062:	c1 e0 04             	shl    eax,0x4
c001e065:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e069:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e06d:	c3                   	ret    

c001e06e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e06e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e073:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e078:	c1 e0 04             	shl    eax,0x4
c001e07b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e07f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e082:	c3                   	ret    

c001e083 <Vm::faultHandler(regs*)>:
c001e083:	55                   	push   ebp
c001e084:	57                   	push   edi
c001e085:	56                   	push   esi
c001e086:	53                   	push   ebx
c001e087:	83 ec 1c             	sub    esp,0x1c
c001e08a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e08e:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e091:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e094:	0f b7 c1             	movzx  eax,cx
c001e097:	50                   	push   eax
c001e098:	0f b7 c3             	movzx  eax,bx
c001e09b:	c1 e3 04             	shl    ebx,0x4
c001e09e:	50                   	push   eax
c001e09f:	e8 50 fc ff ff       	call   c001dcf4 <Vm::realToLinear(unsigned short, unsigned short)>
c001e0a4:	5a                   	pop    edx
c001e0a5:	89 c5                	mov    ebp,eax
c001e0a7:	5e                   	pop    esi
c001e0a8:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e0ac:	50                   	push   eax
c001e0ad:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e0b1:	50                   	push   eax
c001e0b2:	e8 3d fc ff ff       	call   c001dcf4 <Vm::realToLinear(unsigned short, unsigned short)>
c001e0b7:	01 cb                	add    ebx,ecx
c001e0b9:	89 c6                	mov    esi,eax
c001e0bb:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e0bf:	50                   	push   eax
c001e0c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0c4:	50                   	push   eax
c001e0c5:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e0c9:	50                   	push   eax
c001e0ca:	55                   	push   ebp
c001e0cb:	53                   	push   ebx
c001e0cc:	b3 06                	mov    bl,0x6
c001e0ce:	68 c1 af 02 c0       	push   0xc002afc1
c001e0d3:	e8 fd 47 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e0d8:	83 c4 20             	add    esp,0x20
c001e0db:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e0e0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e0e5:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e0e9:	3c 9d                	cmp    al,0x9d
c001e0eb:	0f 84 d7 02 00 00    	je     c001e3c8 <Vm::faultHandler(regs*)+0x345>
c001e0f1:	0f 87 a3 00 00 00    	ja     c001e19a <Vm::faultHandler(regs*)+0x117>
c001e0f7:	3c 66                	cmp    al,0x66
c001e0f9:	0f 84 15 02 00 00    	je     c001e314 <Vm::faultHandler(regs*)+0x291>
c001e0ff:	77 5f                	ja     c001e160 <Vm::faultHandler(regs*)+0xdd>
c001e101:	3c 36                	cmp    al,0x36
c001e103:	0f 84 f1 01 00 00    	je     c001e2fa <Vm::faultHandler(regs*)+0x277>
c001e109:	77 28                	ja     c001e133 <Vm::faultHandler(regs*)+0xb0>
c001e10b:	3c 26                	cmp    al,0x26
c001e10d:	0f 84 99 01 00 00    	je     c001e2ac <Vm::faultHandler(regs*)+0x229>
c001e113:	3c 2e                	cmp    al,0x2e
c001e115:	0f 85 3b 07 00 00    	jne    c001e856 <Vm::faultHandler(regs*)+0x7d3>
c001e11b:	83 ec 0c             	sub    esp,0xc
c001e11e:	31 db                	xor    ebx,ebx
c001e120:	68 d6 af 02 c0       	push   0xc002afd6
c001e125:	e8 ab 47 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e12a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e12d:	83 c4 10             	add    esp,0x10
c001e130:	45                   	inc    ebp
c001e131:	eb b2                	jmp    c001e0e5 <Vm::faultHandler(regs*)+0x62>
c001e133:	3c 64                	cmp    al,0x64
c001e135:	0f 84 8b 01 00 00    	je     c001e2c6 <Vm::faultHandler(regs*)+0x243>
c001e13b:	0f 87 9f 01 00 00    	ja     c001e2e0 <Vm::faultHandler(regs*)+0x25d>
c001e141:	3c 3e                	cmp    al,0x3e
c001e143:	0f 85 0d 07 00 00    	jne    c001e856 <Vm::faultHandler(regs*)+0x7d3>
c001e149:	83 ec 0c             	sub    esp,0xc
c001e14c:	b3 01                	mov    bl,0x1
c001e14e:	68 da af 02 c0       	push   0xc002afda
c001e153:	e8 7d 47 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e158:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e15b:	83 c4 10             	add    esp,0x10
c001e15e:	eb d0                	jmp    c001e130 <Vm::faultHandler(regs*)+0xad>
c001e160:	3c 6d                	cmp    al,0x6d
c001e162:	0f 84 af 03 00 00    	je     c001e517 <Vm::faultHandler(regs*)+0x494>
c001e168:	77 15                	ja     c001e17f <Vm::faultHandler(regs*)+0xfc>
c001e16a:	3c 67                	cmp    al,0x67
c001e16c:	0f 84 bf 01 00 00    	je     c001e331 <Vm::faultHandler(regs*)+0x2ae>
c001e172:	3c 6c                	cmp    al,0x6c
c001e174:	0f 84 3f 03 00 00    	je     c001e4b9 <Vm::faultHandler(regs*)+0x436>
c001e17a:	e9 d7 06 00 00       	jmp    c001e856 <Vm::faultHandler(regs*)+0x7d3>
c001e17f:	3c 6f                	cmp    al,0x6f
c001e181:	0f 84 a4 04 00 00    	je     c001e62b <Vm::faultHandler(regs*)+0x5a8>
c001e187:	0f 82 11 04 00 00    	jb     c001e59e <Vm::faultHandler(regs*)+0x51b>
c001e18d:	3c 9c                	cmp    al,0x9c
c001e18f:	0f 84 ba 01 00 00    	je     c001e34f <Vm::faultHandler(regs*)+0x2cc>
c001e195:	e9 bc 06 00 00       	jmp    c001e856 <Vm::faultHandler(regs*)+0x7d3>
c001e19a:	3c ec                	cmp    al,0xec
c001e19c:	0f 84 24 06 00 00    	je     c001e7c6 <Vm::faultHandler(regs*)+0x743>
c001e1a2:	0f 87 93 00 00 00    	ja     c001e23b <Vm::faultHandler(regs*)+0x1b8>
c001e1a8:	3c e4                	cmp    al,0xe4
c001e1aa:	0f 84 5c 05 00 00    	je     c001e70c <Vm::faultHandler(regs*)+0x689>
c001e1b0:	77 6a                	ja     c001e21c <Vm::faultHandler(regs*)+0x199>
c001e1b2:	3c cd                	cmp    al,0xcd
c001e1b4:	0f 84 7e 02 00 00    	je     c001e438 <Vm::faultHandler(regs*)+0x3b5>
c001e1ba:	3c cf                	cmp    al,0xcf
c001e1bc:	0f 85 94 06 00 00    	jne    c001e856 <Vm::faultHandler(regs*)+0x7d3>
c001e1c2:	83 ec 0c             	sub    esp,0xc
c001e1c5:	68 1e b0 02 c0       	push   0xc002b01e
c001e1ca:	e8 06 47 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e1cf:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e1d2:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e1d5:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e1d9:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e1dc:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e1e0:	0d 00 02 02 00       	or     eax,0x20200
c001e1e5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e1e8:	56                   	push   esi
c001e1e9:	53                   	push   ebx
c001e1ea:	52                   	push   edx
c001e1eb:	68 24 b0 02 c0       	push   0xc002b024
c001e1f0:	e8 e0 46 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e1f5:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e1f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e1ff:	66 c1 e8 09          	shr    ax,0x9
c001e203:	83 e0 01             	and    eax,0x1
c001e206:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e209:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e20c:	83 c0 06             	add    eax,0x6
c001e20f:	25 ff ff 00 00       	and    eax,0xffff
c001e214:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e217:	e9 95 02 00 00       	jmp    c001e4b1 <Vm::faultHandler(regs*)+0x42e>
c001e21c:	3c e6                	cmp    al,0xe6
c001e21e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e222:	0f 84 4e 05 00 00    	je     c001e776 <Vm::faultHandler(regs*)+0x6f3>
c001e228:	0f 82 0a 05 00 00    	jb     c001e738 <Vm::faultHandler(regs*)+0x6b5>
c001e22e:	3c e7                	cmp    al,0xe7
c001e230:	0f 84 69 05 00 00    	je     c001e79f <Vm::faultHandler(regs*)+0x71c>
c001e236:	e9 1b 06 00 00       	jmp    c001e856 <Vm::faultHandler(regs*)+0x7d3>
c001e23b:	3c ef                	cmp    al,0xef
c001e23d:	0f 84 e6 05 00 00    	je     c001e829 <Vm::faultHandler(regs*)+0x7a6>
c001e243:	77 37                	ja     c001e27c <Vm::faultHandler(regs*)+0x1f9>
c001e245:	3c ed                	cmp    al,0xed
c001e247:	0f 84 a3 05 00 00    	je     c001e7f0 <Vm::faultHandler(regs*)+0x76d>
c001e24d:	3c ee                	cmp    al,0xee
c001e24f:	0f 85 01 06 00 00    	jne    c001e856 <Vm::faultHandler(regs*)+0x7d3>
c001e255:	52                   	push   edx
c001e256:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e259:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e25c:	68 bf b0 02 c0       	push   0xc002b0bf
c001e261:	e8 6f 46 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e266:	59                   	pop    ecx
c001e267:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e26b:	5b                   	pop    ebx
c001e26c:	50                   	push   eax
c001e26d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e271:	50                   	push   eax
c001e272:	e8 2a fa ff ff       	call   c001dca1 <Vm::outbv(unsigned short, unsigned char)>
c001e277:	e9 a5 05 00 00       	jmp    c001e821 <Vm::faultHandler(regs*)+0x79e>
c001e27c:	3c fa                	cmp    al,0xfa
c001e27e:	0f 84 f7 01 00 00    	je     c001e47b <Vm::faultHandler(regs*)+0x3f8>
c001e284:	3c fb                	cmp    al,0xfb
c001e286:	0f 84 0a 02 00 00    	je     c001e496 <Vm::faultHandler(regs*)+0x413>
c001e28c:	3c f3                	cmp    al,0xf3
c001e28e:	0f 85 c2 05 00 00    	jne    c001e856 <Vm::faultHandler(regs*)+0x7d3>
c001e294:	83 ec 0c             	sub    esp,0xc
c001e297:	68 f7 af 02 c0       	push   0xc002aff7
c001e29c:	e8 34 46 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e2a1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e2a4:	83 c4 10             	add    esp,0x10
c001e2a7:	e9 84 fe ff ff       	jmp    c001e130 <Vm::faultHandler(regs*)+0xad>
c001e2ac:	83 ec 0c             	sub    esp,0xc
c001e2af:	b3 02                	mov    bl,0x2
c001e2b1:	68 d2 af 02 c0       	push   0xc002afd2
c001e2b6:	e8 1a 46 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e2bb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e2be:	83 c4 10             	add    esp,0x10
c001e2c1:	e9 6a fe ff ff       	jmp    c001e130 <Vm::faultHandler(regs*)+0xad>
c001e2c6:	83 ec 0c             	sub    esp,0xc
c001e2c9:	b3 03                	mov    bl,0x3
c001e2cb:	68 de af 02 c0       	push   0xc002afde
c001e2d0:	e8 00 46 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e2d5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e2d8:	83 c4 10             	add    esp,0x10
c001e2db:	e9 50 fe ff ff       	jmp    c001e130 <Vm::faultHandler(regs*)+0xad>
c001e2e0:	83 ec 0c             	sub    esp,0xc
c001e2e3:	b3 04                	mov    bl,0x4
c001e2e5:	68 e2 af 02 c0       	push   0xc002afe2
c001e2ea:	e8 e6 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e2ef:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e2f2:	83 c4 10             	add    esp,0x10
c001e2f5:	e9 36 fe ff ff       	jmp    c001e130 <Vm::faultHandler(regs*)+0xad>
c001e2fa:	83 ec 0c             	sub    esp,0xc
c001e2fd:	b3 05                	mov    bl,0x5
c001e2ff:	68 e6 af 02 c0       	push   0xc002afe6
c001e304:	e8 cc 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e309:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e30c:	83 c4 10             	add    esp,0x10
c001e30f:	e9 1c fe ff ff       	jmp    c001e130 <Vm::faultHandler(regs*)+0xad>
c001e314:	83 ec 0c             	sub    esp,0xc
c001e317:	68 ea af 02 c0       	push   0xc002afea
c001e31c:	e8 b4 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e321:	83 c4 10             	add    esp,0x10
c001e324:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e327:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e32c:	e9 ff fd ff ff       	jmp    c001e130 <Vm::faultHandler(regs*)+0xad>
c001e331:	50                   	push   eax
c001e332:	50                   	push   eax
c001e333:	6a 01                	push   0x1
c001e335:	68 ef af 02 c0       	push   0xc002afef
c001e33a:	e8 96 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e33f:	83 c4 10             	add    esp,0x10
c001e342:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e345:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e34a:	e9 e1 fd ff ff       	jmp    c001e130 <Vm::faultHandler(regs*)+0xad>
c001e34f:	83 ec 0c             	sub    esp,0xc
c001e352:	68 fd af 02 c0       	push   0xc002affd
c001e357:	e8 79 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e35c:	83 c4 10             	add    esp,0x10
c001e35f:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e362:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e367:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e36a:	74 2f                	je     c001e39b <Vm::faultHandler(regs*)+0x318>
c001e36c:	83 ea 04             	sub    edx,0x4
c001e36f:	25 ff 0d 00 00       	and    eax,0xdff
c001e374:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e37a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e37d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e380:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e386:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e38a:	0f 84 bf 04 00 00    	je     c001e84f <Vm::faultHandler(regs*)+0x7cc>
c001e390:	80 cc 02             	or     ah,0x2
c001e393:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e396:	e9 b4 04 00 00       	jmp    c001e84f <Vm::faultHandler(regs*)+0x7cc>
c001e39b:	83 ea 02             	sub    edx,0x2
c001e39e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e3a4:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e3a7:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e3ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3b1:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e3b5:	74 05                	je     c001e3bc <Vm::faultHandler(regs*)+0x339>
c001e3b7:	80 cc 02             	or     ah,0x2
c001e3ba:	eb 03                	jmp    c001e3bf <Vm::faultHandler(regs*)+0x33c>
c001e3bc:	80 e4 fd             	and    ah,0xfd
c001e3bf:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e3c3:	e9 87 04 00 00       	jmp    c001e84f <Vm::faultHandler(regs*)+0x7cc>
c001e3c8:	83 ec 0c             	sub    esp,0xc
c001e3cb:	68 04 b0 02 c0       	push   0xc002b004
c001e3d0:	e8 00 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e3d5:	83 c4 10             	add    esp,0x10
c001e3d8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e3dd:	74 28                	je     c001e407 <Vm::faultHandler(regs*)+0x384>
c001e3df:	8b 06                	mov    eax,DWORD PTR [esi]
c001e3e1:	25 ff 0d 00 00       	and    eax,0xdff
c001e3e6:	0d 00 02 02 00       	or     eax,0x20200
c001e3eb:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e3ee:	8b 06                	mov    eax,DWORD PTR [esi]
c001e3f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3f6:	c1 e8 09             	shr    eax,0x9
c001e3f9:	83 e0 01             	and    eax,0x1
c001e3fc:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e3ff:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e402:	83 c0 04             	add    eax,0x4
c001e405:	eb 24                	jmp    c001e42b <Vm::faultHandler(regs*)+0x3a8>
c001e407:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e40a:	0d 00 02 02 00       	or     eax,0x20200
c001e40f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e412:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e415:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e41b:	66 c1 e8 09          	shr    ax,0x9
c001e41f:	83 e0 01             	and    eax,0x1
c001e422:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e425:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e428:	83 c0 02             	add    eax,0x2
c001e42b:	25 ff ff 00 00       	and    eax,0xffff
c001e430:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e433:	e9 17 04 00 00       	jmp    c001e84f <Vm::faultHandler(regs*)+0x7cc>
c001e438:	53                   	push   ebx
c001e439:	53                   	push   ebx
c001e43a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e43e:	50                   	push   eax
c001e43f:	68 0a b0 02 c0       	push   0xc002b00a
c001e444:	e8 8c 44 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e449:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e44d:	83 c4 10             	add    esp,0x10
c001e450:	3c ee                	cmp    al,0xee
c001e452:	75 10                	jne    c001e464 <Vm::faultHandler(regs*)+0x3e1>
c001e454:	83 ec 0c             	sub    esp,0xc
c001e457:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e45a:	e8 fa f8 ff ff       	call   c001dd59 <Vm::mainloop3(unsigned long)>
c001e45f:	e9 c0 03 00 00       	jmp    c001e824 <Vm::faultHandler(regs*)+0x7a1>
c001e464:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e468:	83 ec 0c             	sub    esp,0xc
c001e46b:	53                   	push   ebx
c001e46c:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e470:	53                   	push   ebx
c001e471:	55                   	push   ebp
c001e472:	50                   	push   eax
c001e473:	57                   	push   edi
c001e474:	e8 0c fb ff ff       	call   c001df85 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e479:	eb 36                	jmp    c001e4b1 <Vm::faultHandler(regs*)+0x42e>
c001e47b:	83 ec 0c             	sub    esp,0xc
c001e47e:	68 14 b0 02 c0       	push   0xc002b014
c001e483:	e8 4d 44 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e488:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e48d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e491:	e9 8b 03 00 00       	jmp    c001e821 <Vm::faultHandler(regs*)+0x79e>
c001e496:	83 ec 0c             	sub    esp,0xc
c001e499:	68 19 b0 02 c0       	push   0xc002b019
c001e49e:	e8 32 44 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e4a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4a8:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e4ac:	e9 70 03 00 00       	jmp    c001e821 <Vm::faultHandler(regs*)+0x79e>
c001e4b1:	83 c4 20             	add    esp,0x20
c001e4b4:	e9 99 03 00 00       	jmp    c001e852 <Vm::faultHandler(regs*)+0x7cf>
c001e4b9:	83 ec 0c             	sub    esp,0xc
c001e4bc:	68 57 b0 02 c0       	push   0xc002b057
c001e4c1:	e8 0f 44 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e4c6:	83 c4 10             	add    esp,0x10
c001e4c9:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e4cc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e4d1:	74 0d                	je     c001e4e0 <Vm::faultHandler(regs*)+0x45d>
c001e4d3:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e4da:	0f 87 9e 01 00 00    	ja     c001e67e <Vm::faultHandler(regs*)+0x5fb>
c001e4e0:	83 ec 0c             	sub    esp,0xc
c001e4e3:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e4e7:	0f b7 db             	movzx  ebx,bx
c001e4ea:	50                   	push   eax
c001e4eb:	e8 9e f7 ff ff       	call   c001dc8e <Vm::inbv(unsigned short)>
c001e4f0:	83 c4 0c             	add    esp,0xc
c001e4f3:	0f b6 c0             	movzx  eax,al
c001e4f6:	50                   	push   eax
c001e4f7:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e4fb:	50                   	push   eax
c001e4fc:	53                   	push   ebx
c001e4fd:	e8 41 fb ff ff       	call   c001e043 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e502:	83 c4 10             	add    esp,0x10
c001e505:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e508:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e50c:	74 03                	je     c001e511 <Vm::faultHandler(regs*)+0x48e>
c001e50e:	48                   	dec    eax
c001e50f:	eb 01                	jmp    c001e512 <Vm::faultHandler(regs*)+0x48f>
c001e511:	40                   	inc    eax
c001e512:	0f b7 c0             	movzx  eax,ax
c001e515:	eb 7f                	jmp    c001e596 <Vm::faultHandler(regs*)+0x513>
c001e517:	83 ec 0c             	sub    esp,0xc
c001e51a:	68 89 b0 02 c0       	push   0xc002b089
c001e51f:	e8 b1 43 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e524:	83 c4 10             	add    esp,0x10
c001e527:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e52a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e52f:	74 0d                	je     c001e53e <Vm::faultHandler(regs*)+0x4bb>
c001e531:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e538:	0f 87 40 01 00 00    	ja     c001e67e <Vm::faultHandler(regs*)+0x5fb>
c001e53e:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e541:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e545:	0f b7 db             	movzx  ebx,bx
c001e548:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e54d:	74 20                	je     c001e56f <Vm::faultHandler(regs*)+0x4ec>
c001e54f:	ed                   	in     eax,dx
c001e550:	51                   	push   ecx
c001e551:	50                   	push   eax
c001e552:	56                   	push   esi
c001e553:	53                   	push   ebx
c001e554:	e8 15 fb ff ff       	call   c001e06e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e559:	83 c4 10             	add    esp,0x10
c001e55c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e55f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e563:	74 05                	je     c001e56a <Vm::faultHandler(regs*)+0x4e7>
c001e565:	83 e8 04             	sub    eax,0x4
c001e568:	eb 27                	jmp    c001e591 <Vm::faultHandler(regs*)+0x50e>
c001e56a:	83 c0 04             	add    eax,0x4
c001e56d:	eb 22                	jmp    c001e591 <Vm::faultHandler(regs*)+0x50e>
c001e56f:	66 ed                	in     ax,dx
c001e571:	0f b7 c0             	movzx  eax,ax
c001e574:	52                   	push   edx
c001e575:	50                   	push   eax
c001e576:	56                   	push   esi
c001e577:	53                   	push   ebx
c001e578:	e8 db fa ff ff       	call   c001e058 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e57d:	83 c4 10             	add    esp,0x10
c001e580:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e583:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e587:	74 05                	je     c001e58e <Vm::faultHandler(regs*)+0x50b>
c001e589:	83 e8 02             	sub    eax,0x2
c001e58c:	eb 03                	jmp    c001e591 <Vm::faultHandler(regs*)+0x50e>
c001e58e:	83 c0 02             	add    eax,0x2
c001e591:	25 ff ff 00 00       	and    eax,0xffff
c001e596:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e599:	e9 b1 02 00 00       	jmp    c001e84f <Vm::faultHandler(regs*)+0x7cc>
c001e59e:	83 ec 0c             	sub    esp,0xc
c001e5a1:	4b                   	dec    ebx
c001e5a2:	68 8f b0 02 c0       	push   0xc002b08f
c001e5a7:	e8 29 43 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e5ac:	83 c4 10             	add    esp,0x10
c001e5af:	80 fb 05             	cmp    bl,0x5
c001e5b2:	77 0a                	ja     c001e5be <Vm::faultHandler(regs*)+0x53b>
c001e5b4:	0f b6 db             	movzx  ebx,bl
c001e5b7:	ff 24 9d 00 b1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4f00]
c001e5be:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e5c2:	eb 1b                	jmp    c001e5df <Vm::faultHandler(regs*)+0x55c>
c001e5c4:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e5c8:	eb 15                	jmp    c001e5df <Vm::faultHandler(regs*)+0x55c>
c001e5ca:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e5ce:	eb 0f                	jmp    c001e5df <Vm::faultHandler(regs*)+0x55c>
c001e5d0:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e5d4:	eb 09                	jmp    c001e5df <Vm::faultHandler(regs*)+0x55c>
c001e5d6:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e5d9:	eb 04                	jmp    c001e5df <Vm::faultHandler(regs*)+0x55c>
c001e5db:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e5df:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e5e4:	74 0d                	je     c001e5f3 <Vm::faultHandler(regs*)+0x570>
c001e5e6:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e5ed:	0f 87 8b 00 00 00    	ja     c001e67e <Vm::faultHandler(regs*)+0x5fb>
c001e5f3:	53                   	push   ebx
c001e5f4:	53                   	push   ebx
c001e5f5:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e5f9:	52                   	push   edx
c001e5fa:	50                   	push   eax
c001e5fb:	e8 0f fa ff ff       	call   c001e00f <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e600:	5e                   	pop    esi
c001e601:	0f b6 c0             	movzx  eax,al
c001e604:	5d                   	pop    ebp
c001e605:	50                   	push   eax
c001e606:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e60a:	50                   	push   eax
c001e60b:	e8 91 f6 ff ff       	call   c001dca1 <Vm::outbv(unsigned short, unsigned char)>
c001e610:	83 c4 10             	add    esp,0x10
c001e613:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e616:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e61a:	74 03                	je     c001e61f <Vm::faultHandler(regs*)+0x59c>
c001e61c:	48                   	dec    eax
c001e61d:	eb 01                	jmp    c001e620 <Vm::faultHandler(regs*)+0x59d>
c001e61f:	40                   	inc    eax
c001e620:	0f b7 c0             	movzx  eax,ax
c001e623:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e626:	e9 24 02 00 00       	jmp    c001e84f <Vm::faultHandler(regs*)+0x7cc>
c001e62b:	83 ec 0c             	sub    esp,0xc
c001e62e:	4b                   	dec    ebx
c001e62f:	68 8f b0 02 c0       	push   0xc002b08f
c001e634:	e8 9c 42 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e639:	83 c4 10             	add    esp,0x10
c001e63c:	80 fb 05             	cmp    bl,0x5
c001e63f:	77 0a                	ja     c001e64b <Vm::faultHandler(regs*)+0x5c8>
c001e641:	0f b6 db             	movzx  ebx,bl
c001e644:	ff 24 9d 18 b1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4ee8]
c001e64b:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e64f:	eb 1b                	jmp    c001e66c <Vm::faultHandler(regs*)+0x5e9>
c001e651:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e655:	eb 15                	jmp    c001e66c <Vm::faultHandler(regs*)+0x5e9>
c001e657:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e65b:	eb 0f                	jmp    c001e66c <Vm::faultHandler(regs*)+0x5e9>
c001e65d:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e661:	eb 09                	jmp    c001e66c <Vm::faultHandler(regs*)+0x5e9>
c001e663:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e666:	eb 04                	jmp    c001e66c <Vm::faultHandler(regs*)+0x5e9>
c001e668:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e66c:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e66f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e674:	74 39                	je     c001e6af <Vm::faultHandler(regs*)+0x62c>
c001e676:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e67c:	76 31                	jbe    c001e6af <Vm::faultHandler(regs*)+0x62c>
c001e67e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e682:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e686:	51                   	push   ecx
c001e687:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e68b:	51                   	push   ecx
c001e68c:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e690:	51                   	push   ecx
c001e691:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e695:	51                   	push   ecx
c001e696:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e69a:	52                   	push   edx
c001e69b:	50                   	push   eax
c001e69c:	50                   	push   eax
c001e69d:	68 5c b0 02 c0       	push   0xc002b05c
c001e6a2:	e8 2e 42 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e6a7:	83 c4 20             	add    esp,0x20
c001e6aa:	e9 fb 01 00 00       	jmp    c001e8aa <Vm::faultHandler(regs*)+0x827>
c001e6af:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e6b2:	0f b7 d3             	movzx  edx,bx
c001e6b5:	81 e6 00 04 00 00    	and    esi,0x400
c001e6bb:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e6be:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e6c3:	74 1d                	je     c001e6e2 <Vm::faultHandler(regs*)+0x65f>
c001e6c5:	51                   	push   ecx
c001e6c6:	51                   	push   ecx
c001e6c7:	52                   	push   edx
c001e6c8:	50                   	push   eax
c001e6c9:	e8 64 f9 ff ff       	call   c001e032 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e6ce:	83 c4 10             	add    esp,0x10
c001e6d1:	89 ea                	mov    edx,ebp
c001e6d3:	ef                   	out    dx,eax
c001e6d4:	85 f6                	test   esi,esi
c001e6d6:	74 05                	je     c001e6dd <Vm::faultHandler(regs*)+0x65a>
c001e6d8:	83 eb 04             	sub    ebx,0x4
c001e6db:	eb 21                	jmp    c001e6fe <Vm::faultHandler(regs*)+0x67b>
c001e6dd:	83 c3 04             	add    ebx,0x4
c001e6e0:	eb 1c                	jmp    c001e6fe <Vm::faultHandler(regs*)+0x67b>
c001e6e2:	51                   	push   ecx
c001e6e3:	51                   	push   ecx
c001e6e4:	52                   	push   edx
c001e6e5:	50                   	push   eax
c001e6e6:	e8 35 f9 ff ff       	call   c001e020 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e6eb:	83 c4 10             	add    esp,0x10
c001e6ee:	89 ea                	mov    edx,ebp
c001e6f0:	66 ef                	out    dx,ax
c001e6f2:	85 f6                	test   esi,esi
c001e6f4:	74 05                	je     c001e6fb <Vm::faultHandler(regs*)+0x678>
c001e6f6:	83 eb 02             	sub    ebx,0x2
c001e6f9:	eb 03                	jmp    c001e6fe <Vm::faultHandler(regs*)+0x67b>
c001e6fb:	83 c3 02             	add    ebx,0x2
c001e6fe:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e704:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e707:	e9 43 01 00 00       	jmp    c001e84f <Vm::faultHandler(regs*)+0x7cc>
c001e70c:	53                   	push   ebx
c001e70d:	53                   	push   ebx
c001e70e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e712:	50                   	push   eax
c001e713:	68 95 b0 02 c0       	push   0xc002b095
c001e718:	e8 b8 41 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e71d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e724:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e728:	89 04 24             	mov    DWORD PTR [esp],eax
c001e72b:	e8 5e f5 ff ff       	call   c001dc8e <Vm::inbv(unsigned short)>
c001e730:	0f b6 c0             	movzx  eax,al
c001e733:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e736:	eb 5e                	jmp    c001e796 <Vm::faultHandler(regs*)+0x713>
c001e738:	51                   	push   ecx
c001e739:	51                   	push   ecx
c001e73a:	53                   	push   ebx
c001e73b:	68 9b b0 02 c0       	push   0xc002b09b
c001e740:	e8 90 41 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e745:	83 c4 10             	add    esp,0x10
c001e748:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e74d:	74 07                	je     c001e756 <Vm::faultHandler(regs*)+0x6d3>
c001e74f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e753:	ed                   	in     eax,dx
c001e754:	eb 14                	jmp    c001e76a <Vm::faultHandler(regs*)+0x6e7>
c001e756:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e759:	66 31 db             	xor    bx,bx
c001e75c:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e75f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e763:	66 ed                	in     ax,dx
c001e765:	0f b7 c0             	movzx  eax,ax
c001e768:	09 d8                	or     eax,ebx
c001e76a:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e76d:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e771:	e9 dc 00 00 00       	jmp    c001e852 <Vm::faultHandler(regs*)+0x7cf>
c001e776:	50                   	push   eax
c001e777:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e77a:	53                   	push   ebx
c001e77b:	68 a1 b0 02 c0       	push   0xc002b0a1
c001e780:	e8 50 41 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e785:	58                   	pop    eax
c001e786:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e78a:	5a                   	pop    edx
c001e78b:	50                   	push   eax
c001e78c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e790:	50                   	push   eax
c001e791:	e8 0b f5 ff ff       	call   c001dca1 <Vm::outbv(unsigned short, unsigned char)>
c001e796:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e79a:	e9 85 00 00 00       	jmp    c001e824 <Vm::faultHandler(regs*)+0x7a1>
c001e79f:	50                   	push   eax
c001e7a0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e7a3:	53                   	push   ebx
c001e7a4:	68 aa b0 02 c0       	push   0xc002b0aa
c001e7a9:	e8 27 41 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e7ae:	83 c4 10             	add    esp,0x10
c001e7b1:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e7b5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e7ba:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e7bd:	74 03                	je     c001e7c2 <Vm::faultHandler(regs*)+0x73f>
c001e7bf:	ef                   	out    dx,eax
c001e7c0:	eb ab                	jmp    c001e76d <Vm::faultHandler(regs*)+0x6ea>
c001e7c2:	66 ef                	out    dx,ax
c001e7c4:	eb a7                	jmp    c001e76d <Vm::faultHandler(regs*)+0x6ea>
c001e7c6:	55                   	push   ebp
c001e7c7:	55                   	push   ebp
c001e7c8:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e7cb:	68 b3 b0 02 c0       	push   0xc002b0b3
c001e7d0:	e8 00 41 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e7d5:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e7dc:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e7e0:	89 04 24             	mov    DWORD PTR [esp],eax
c001e7e3:	e8 a6 f4 ff ff       	call   c001dc8e <Vm::inbv(unsigned short)>
c001e7e8:	0f b6 c0             	movzx  eax,al
c001e7eb:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e7ee:	eb 31                	jmp    c001e821 <Vm::faultHandler(regs*)+0x79e>
c001e7f0:	56                   	push   esi
c001e7f1:	56                   	push   esi
c001e7f2:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e7f5:	68 b9 b0 02 c0       	push   0xc002b0b9
c001e7fa:	e8 d6 40 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e7ff:	83 c4 10             	add    esp,0x10
c001e802:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e805:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e80a:	74 03                	je     c001e80f <Vm::faultHandler(regs*)+0x78c>
c001e80c:	ed                   	in     eax,dx
c001e80d:	eb 0d                	jmp    c001e81c <Vm::faultHandler(regs*)+0x799>
c001e80f:	66 ed                	in     ax,dx
c001e811:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e814:	0f b7 c0             	movzx  eax,ax
c001e817:	66 31 d2             	xor    dx,dx
c001e81a:	09 d0                	or     eax,edx
c001e81c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e81f:	eb 2e                	jmp    c001e84f <Vm::faultHandler(regs*)+0x7cc>
c001e821:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e824:	83 c4 10             	add    esp,0x10
c001e827:	eb 29                	jmp    c001e852 <Vm::faultHandler(regs*)+0x7cf>
c001e829:	50                   	push   eax
c001e82a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e82d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e830:	68 c8 b0 02 c0       	push   0xc002b0c8
c001e835:	e8 9b 40 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e83a:	83 c4 10             	add    esp,0x10
c001e83d:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e840:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e845:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e848:	74 03                	je     c001e84d <Vm::faultHandler(regs*)+0x7ca>
c001e84a:	ef                   	out    dx,eax
c001e84b:	eb 02                	jmp    c001e84f <Vm::faultHandler(regs*)+0x7cc>
c001e84d:	66 ef                	out    dx,ax
c001e84f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e852:	b0 01                	mov    al,0x1
c001e854:	eb 56                	jmp    c001e8ac <Vm::faultHandler(regs*)+0x829>
c001e856:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e85a:	51                   	push   ecx
c001e85b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e85f:	51                   	push   ecx
c001e860:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e864:	51                   	push   ecx
c001e865:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e869:	51                   	push   ecx
c001e86a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e86e:	52                   	push   edx
c001e86f:	50                   	push   eax
c001e870:	50                   	push   eax
c001e871:	68 d1 b0 02 c0       	push   0xc002b0d1
c001e876:	e8 5a 40 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e87b:	83 c4 20             	add    esp,0x20
c001e87e:	83 ec 0c             	sub    esp,0xc
c001e881:	6a 60                	push   0x60
c001e883:	e8 06 f4 ff ff       	call   c001dc8e <Vm::inbv(unsigned short)>
c001e888:	83 c4 10             	add    esp,0x10
c001e88b:	3c 1c                	cmp    al,0x1c
c001e88d:	74 04                	je     c001e893 <Vm::faultHandler(regs*)+0x810>
c001e88f:	3c 5a                	cmp    al,0x5a
c001e891:	75 eb                	jne    c001e87e <Vm::faultHandler(regs*)+0x7fb>
c001e893:	3c 1c                	cmp    al,0x1c
c001e895:	74 04                	je     c001e89b <Vm::faultHandler(regs*)+0x818>
c001e897:	3c 5a                	cmp    al,0x5a
c001e899:	75 0f                	jne    c001e8aa <Vm::faultHandler(regs*)+0x827>
c001e89b:	83 ec 0c             	sub    esp,0xc
c001e89e:	6a 60                	push   0x60
c001e8a0:	e8 e9 f3 ff ff       	call   c001dc8e <Vm::inbv(unsigned short)>
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	eb e9                	jmp    c001e893 <Vm::faultHandler(regs*)+0x810>
c001e8aa:	31 c0                	xor    eax,eax
c001e8ac:	83 c4 1c             	add    esp,0x1c
c001e8af:	5b                   	pop    ebx
c001e8b0:	5e                   	pop    esi
c001e8b1:	5f                   	pop    edi
c001e8b2:	5d                   	pop    ebp
c001e8b3:	c3                   	ret    

c001e8b4 <Vm::fpuInternalTo32(unsigned long long)>:
c001e8b4:	57                   	push   edi
c001e8b5:	56                   	push   esi
c001e8b6:	53                   	push   ebx
c001e8b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8bf:	89 d6                	mov    esi,edx
c001e8c1:	89 d7                	mov    edi,edx
c001e8c3:	89 c1                	mov    ecx,eax
c001e8c5:	c1 ef 14             	shr    edi,0x14
c001e8c8:	89 d3                	mov    ebx,edx
c001e8ca:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e8d0:	31 d2                	xor    edx,edx
c001e8d2:	89 f8                	mov    eax,edi
c001e8d4:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e8da:	bf ff 00 00 00       	mov    edi,0xff
c001e8df:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e8e4:	83 d2 ff             	adc    edx,0xffffffff
c001e8e7:	39 c7                	cmp    edi,eax
c001e8e9:	bf 00 00 00 00       	mov    edi,0x0
c001e8ee:	19 d7                	sbb    edi,edx
c001e8f0:	72 15                	jb     c001e907 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e8f2:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e8f6:	c1 e0 17             	shl    eax,0x17
c001e8f9:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e8ff:	09 f1                	or     ecx,esi
c001e901:	09 c1                	or     ecx,eax
c001e903:	89 cf                	mov    edi,ecx
c001e905:	eb 02                	jmp    c001e909 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e907:	31 ff                	xor    edi,edi
c001e909:	89 f8                	mov    eax,edi
c001e90b:	5b                   	pop    ebx
c001e90c:	5e                   	pop    esi
c001e90d:	5f                   	pop    edi
c001e90e:	c3                   	ret    

c001e90f <Vm::fpuInternalTo64(unsigned long long)>:
c001e90f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e913:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e917:	c3                   	ret    

c001e918 <Vm::fpu32ToInternal(unsigned int)>:
c001e918:	57                   	push   edi
c001e919:	31 ff                	xor    edi,edi
c001e91b:	56                   	push   esi
c001e91c:	53                   	push   ebx
c001e91d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e921:	89 cb                	mov    ebx,ecx
c001e923:	89 ce                	mov    esi,ecx
c001e925:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e92b:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e931:	c1 e9 17             	shr    ecx,0x17
c001e934:	89 f0                	mov    eax,esi
c001e936:	0f b6 d1             	movzx  edx,cl
c001e939:	81 c2 80 03 00 00    	add    edx,0x380
c001e93f:	89 d1                	mov    ecx,edx
c001e941:	89 fa                	mov    edx,edi
c001e943:	c1 e1 14             	shl    ecx,0x14
c001e946:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e94a:	c1 e0 1d             	shl    eax,0x1d
c001e94d:	89 d7                	mov    edi,edx
c001e94f:	89 c6                	mov    esi,eax
c001e951:	89 ca                	mov    edx,ecx
c001e953:	89 f0                	mov    eax,esi
c001e955:	09 fa                	or     edx,edi
c001e957:	09 da                	or     edx,ebx
c001e959:	5b                   	pop    ebx
c001e95a:	5e                   	pop    esi
c001e95b:	5f                   	pop    edi
c001e95c:	c3                   	ret    

c001e95d <Vm::fpu64ToInternal(unsigned long long)>:
c001e95d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e961:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e965:	c3                   	ret    

c001e966 <Vm::fpuFloatToLong(unsigned long long)>:
c001e966:	57                   	push   edi
c001e967:	31 c0                	xor    eax,eax
c001e969:	56                   	push   esi
c001e96a:	31 d2                	xor    edx,edx
c001e96c:	53                   	push   ebx
c001e96d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e971:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e975:	89 d9                	mov    ecx,ebx
c001e977:	c1 e9 14             	shr    ecx,0x14
c001e97a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e980:	89 cf                	mov    edi,ecx
c001e982:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e988:	78 33                	js     c001e9bd <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e98a:	89 d9                	mov    ecx,ebx
c001e98c:	89 f0                	mov    eax,esi
c001e98e:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e994:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e99a:	89 ca                	mov    edx,ecx
c001e99c:	b9 34 00 00 00       	mov    ecx,0x34
c001e9a1:	29 f9                	sub    ecx,edi
c001e9a3:	0f ad d0             	shrd   eax,edx,cl
c001e9a6:	d3 fa                	sar    edx,cl
c001e9a8:	f6 c1 20             	test   cl,0x20
c001e9ab:	74 05                	je     c001e9b2 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e9ad:	89 d0                	mov    eax,edx
c001e9af:	c1 fa 1f             	sar    edx,0x1f
c001e9b2:	85 db                	test   ebx,ebx
c001e9b4:	79 07                	jns    c001e9bd <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e9b6:	f7 d8                	neg    eax
c001e9b8:	83 d2 00             	adc    edx,0x0
c001e9bb:	f7 da                	neg    edx
c001e9bd:	5b                   	pop    ebx
c001e9be:	5e                   	pop    esi
c001e9bf:	5f                   	pop    edi
c001e9c0:	c3                   	ret    

c001e9c1 <Vm::fpuULongToFloat(unsigned long long)>:
c001e9c1:	57                   	push   edi
c001e9c2:	31 c9                	xor    ecx,ecx
c001e9c4:	56                   	push   esi
c001e9c5:	53                   	push   ebx
c001e9c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e9ca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e9ce:	0f ba e7 14          	bt     edi,0x14
c001e9d2:	72 07                	jb     c001e9db <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e9d4:	01 f6                	add    esi,esi
c001e9d6:	11 ff                	adc    edi,edi
c001e9d8:	41                   	inc    ecx
c001e9d9:	eb f3                	jmp    c001e9ce <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e9db:	89 fa                	mov    edx,edi
c001e9dd:	89 f0                	mov    eax,esi
c001e9df:	bb 33 04 00 00       	mov    ebx,0x433
c001e9e4:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e9ea:	29 cb                	sub    ebx,ecx
c001e9ec:	89 d9                	mov    ecx,ebx
c001e9ee:	5b                   	pop    ebx
c001e9ef:	c1 e1 14             	shl    ecx,0x14
c001e9f2:	5e                   	pop    esi
c001e9f3:	09 ca                	or     edx,ecx
c001e9f5:	5f                   	pop    edi
c001e9f6:	c3                   	ret    

c001e9f7 <Vm::fpuLongToFloat(long long)>:
c001e9f7:	56                   	push   esi
c001e9f8:	31 c0                	xor    eax,eax
c001e9fa:	53                   	push   ebx
c001e9fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea03:	39 c8                	cmp    eax,ecx
c001ea05:	19 d8                	sbb    eax,ebx
c001ea07:	7d 04                	jge    c001ea0d <Vm::fpuLongToFloat(long long)+0x16>
c001ea09:	31 f6                	xor    esi,esi
c001ea0b:	eb 0c                	jmp    c001ea19 <Vm::fpuLongToFloat(long long)+0x22>
c001ea0d:	f7 d9                	neg    ecx
c001ea0f:	be 01 00 00 00       	mov    esi,0x1
c001ea14:	83 d3 00             	adc    ebx,0x0
c001ea17:	f7 db                	neg    ebx
c001ea19:	31 c0                	xor    eax,eax
c001ea1b:	0f ba e3 14          	bt     ebx,0x14
c001ea1f:	72 07                	jb     c001ea28 <Vm::fpuLongToFloat(long long)+0x31>
c001ea21:	01 c9                	add    ecx,ecx
c001ea23:	11 db                	adc    ebx,ebx
c001ea25:	40                   	inc    eax
c001ea26:	eb f3                	jmp    c001ea1b <Vm::fpuLongToFloat(long long)+0x24>
c001ea28:	ba 33 04 00 00       	mov    edx,0x433
c001ea2d:	29 c2                	sub    edx,eax
c001ea2f:	89 c8                	mov    eax,ecx
c001ea31:	c1 e2 14             	shl    edx,0x14
c001ea34:	89 d9                	mov    ecx,ebx
c001ea36:	89 f3                	mov    ebx,esi
c001ea38:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ea3e:	09 ca                	or     edx,ecx
c001ea40:	84 db                	test   bl,bl
c001ea42:	74 06                	je     c001ea4a <Vm::fpuLongToFloat(long long)+0x53>
c001ea44:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ea4a:	5b                   	pop    ebx
c001ea4b:	5e                   	pop    esi
c001ea4c:	c3                   	ret    

c001ea4d <Vm::fpuGet0()>:
c001ea4d:	31 c0                	xor    eax,eax
c001ea4f:	31 d2                	xor    edx,edx
c001ea51:	c3                   	ret    

c001ea52 <Vm::fpuGet1()>:
c001ea52:	b8 01 00 00 00       	mov    eax,0x1
c001ea57:	31 d2                	xor    edx,edx
c001ea59:	c3                   	ret    

c001ea5a <Vm::fpuGetPi()>:
c001ea5a:	b8 03 00 00 00       	mov    eax,0x3
c001ea5f:	31 d2                	xor    edx,edx
c001ea61:	c3                   	ret    

c001ea62 <Vm::fpuGetLog2E()>:
c001ea62:	83 ec 18             	sub    esp,0x18
c001ea65:	68 30 b1 02 c0       	push   0xc002b130
c001ea6a:	e8 54 b0 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001ea6f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ea74:	31 d2                	xor    edx,edx
c001ea76:	83 c4 1c             	add    esp,0x1c
c001ea79:	c3                   	ret    

c001ea7a <Vm::fpuGetLogE2()>:
c001ea7a:	83 ec 18             	sub    esp,0x18
c001ea7d:	68 3c b1 02 c0       	push   0xc002b13c
c001ea82:	e8 3c b0 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001ea87:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ea8c:	31 d2                	xor    edx,edx
c001ea8e:	83 c4 1c             	add    esp,0x1c
c001ea91:	c3                   	ret    

c001ea92 <Vm::fpuGetLog210()>:
c001ea92:	83 ec 18             	sub    esp,0x18
c001ea95:	68 48 b1 02 c0       	push   0xc002b148
c001ea9a:	e8 24 b0 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001ea9f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eaa4:	31 d2                	xor    edx,edx
c001eaa6:	83 c4 1c             	add    esp,0x1c
c001eaa9:	c3                   	ret    

c001eaaa <Vm::fpuGetLog102()>:
c001eaaa:	83 ec 18             	sub    esp,0x18
c001eaad:	68 55 b1 02 c0       	push   0xc002b155
c001eab2:	e8 0c b0 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001eab7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eabc:	31 d2                	xor    edx,edx
c001eabe:	83 c4 1c             	add    esp,0x1c
c001eac1:	c3                   	ret    

c001eac2 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001eac2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eac6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001eaca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eace:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ead2:	0f 92 c0             	setb   al
c001ead5:	c3                   	ret    

c001ead6 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ead6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eade:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001eae2:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001eae6:	09 c2                	or     edx,eax
c001eae8:	0f 94 c0             	sete   al
c001eaeb:	c3                   	ret    

c001eaec <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001eaec:	57                   	push   edi
c001eaed:	56                   	push   esi
c001eaee:	53                   	push   ebx
c001eaef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eaf3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eaf7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001eafb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001eaff:	57                   	push   edi
c001eb00:	56                   	push   esi
c001eb01:	53                   	push   ebx
c001eb02:	51                   	push   ecx
c001eb03:	e8 ce ff ff ff       	call   c001ead6 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001eb08:	83 c4 10             	add    esp,0x10
c001eb0b:	88 c2                	mov    dl,al
c001eb0d:	31 c0                	xor    eax,eax
c001eb0f:	84 d2                	test   dl,dl
c001eb11:	75 0c                	jne    c001eb1f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001eb13:	57                   	push   edi
c001eb14:	56                   	push   esi
c001eb15:	53                   	push   ebx
c001eb16:	51                   	push   ecx
c001eb17:	e8 a6 ff ff ff       	call   c001eac2 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001eb1c:	83 c4 10             	add    esp,0x10
c001eb1f:	83 e0 01             	and    eax,0x1
c001eb22:	5b                   	pop    ebx
c001eb23:	88 c1                	mov    cl,al
c001eb25:	83 e2 01             	and    edx,0x1
c001eb28:	a0 41 e3 02 c0       	mov    al,ds:0xc002e341
c001eb2d:	c1 e2 06             	shl    edx,0x6
c001eb30:	83 e0 ba             	and    eax,0xffffffba
c001eb33:	5e                   	pop    esi
c001eb34:	09 c8                	or     eax,ecx
c001eb36:	5f                   	pop    edi
c001eb37:	09 d0                	or     eax,edx
c001eb39:	a2 41 e3 02 c0       	mov    ds:0xc002e341,al
c001eb3e:	c3                   	ret    

c001eb3f <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001eb3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001eb4b:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001eb4f:	c3                   	ret    

c001eb50 <Vm::fpuAbs(unsigned long long)>:
c001eb50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eb58:	c3                   	ret    

c001eb59 <Vm::fpuChs(unsigned long long)>:
c001eb59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb5d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eb61:	f7 d8                	neg    eax
c001eb63:	83 d2 00             	adc    edx,0x0
c001eb66:	f7 da                	neg    edx
c001eb68:	c3                   	ret    

c001eb69 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001eb69:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001eb6d:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001eb72:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001eb76:	eb c7                	jmp    c001eb3f <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001eb78 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001eb78:	53                   	push   ebx
c001eb79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb85:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb89:	0f af ca             	imul   ecx,edx
c001eb8c:	0f af d8             	imul   ebx,eax
c001eb8f:	f7 e2                	mul    edx
c001eb91:	01 d9                	add    ecx,ebx
c001eb93:	5b                   	pop    ebx
c001eb94:	01 ca                	add    edx,ecx
c001eb96:	c3                   	ret    

c001eb97 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001eb97:	83 ec 0c             	sub    esp,0xc
c001eb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebaa:	e8 2d 6b 00 00       	call   c00256dc <__udivdi3>
c001ebaf:	83 c4 1c             	add    esp,0x1c
c001ebb2:	c3                   	ret    

c001ebb3 <Vm::fpuSquare(unsigned long long)>:
c001ebb3:	50                   	push   eax
c001ebb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ebbc:	52                   	push   edx
c001ebbd:	50                   	push   eax
c001ebbe:	52                   	push   edx
c001ebbf:	50                   	push   eax
c001ebc0:	e8 b3 ff ff ff       	call   c001eb78 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ebc5:	83 c4 14             	add    esp,0x14
c001ebc8:	c3                   	ret    

c001ebc9 <Vm::fpuGetReg(int)>:
c001ebc9:	83 ec 0c             	sub    esp,0xc
c001ebcc:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ebd1:	76 10                	jbe    c001ebe3 <Vm::fpuGetReg(int)+0x1a>
c001ebd3:	83 ec 0c             	sub    esp,0xc
c001ebd6:	68 62 b1 02 c0       	push   0xc002b162
c001ebdb:	e8 e3 ae ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001ebe0:	83 c4 10             	add    esp,0x10
c001ebe3:	a0 41 e3 02 c0       	mov    al,ds:0xc002e341
c001ebe8:	b9 08 00 00 00       	mov    ecx,0x8
c001ebed:	c0 e8 03             	shr    al,0x3
c001ebf0:	83 e0 07             	and    eax,0x7
c001ebf3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ebf7:	99                   	cdq    
c001ebf8:	f7 f9                	idiv   ecx
c001ebfa:	8b 04 d5 44 e3 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd1cbc]
c001ec01:	8b 14 d5 48 e3 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd1cb8]
c001ec08:	83 c4 0c             	add    esp,0xc
c001ec0b:	c3                   	ret    

c001ec0c <Vm::fpuSetReg(int, unsigned long long)>:
c001ec0c:	57                   	push   edi
c001ec0d:	56                   	push   esi
c001ec0e:	52                   	push   edx
c001ec0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ec13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ec17:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ec1c:	76 10                	jbe    c001ec2e <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001ec1e:	83 ec 0c             	sub    esp,0xc
c001ec21:	68 75 b1 02 c0       	push   0xc002b175
c001ec26:	e8 98 ae ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001ec2b:	83 c4 10             	add    esp,0x10
c001ec2e:	a0 41 e3 02 c0       	mov    al,ds:0xc002e341
c001ec33:	b9 08 00 00 00       	mov    ecx,0x8
c001ec38:	c0 e8 03             	shr    al,0x3
c001ec3b:	83 e0 07             	and    eax,0x7
c001ec3e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ec42:	99                   	cdq    
c001ec43:	f7 f9                	idiv   ecx
c001ec45:	89 34 d5 44 e3 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1cbc],esi
c001ec4c:	89 3c d5 48 e3 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1cb8],edi
c001ec53:	58                   	pop    eax
c001ec54:	5e                   	pop    esi
c001ec55:	5f                   	pop    edi
c001ec56:	c3                   	ret    

c001ec57 <Vm::fpuPush(unsigned long long)>:
c001ec57:	a0 41 e3 02 c0       	mov    al,ds:0xc002e341
c001ec5c:	c0 e8 03             	shr    al,0x3
c001ec5f:	83 e0 07             	and    eax,0x7
c001ec62:	83 c0 07             	add    eax,0x7
c001ec65:	88 c2                	mov    dl,al
c001ec67:	83 e0 07             	and    eax,0x7
c001ec6a:	83 e2 07             	and    edx,0x7
c001ec6d:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001ec74:	8a 15 41 e3 02 c0    	mov    dl,BYTE PTR ds:0xc002e341
c001ec7a:	83 e2 c7             	and    edx,0xffffffc7
c001ec7d:	09 ca                	or     edx,ecx
c001ec7f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ec83:	88 15 41 e3 02 c0    	mov    BYTE PTR ds:0xc002e341,dl
c001ec89:	89 0c c5 48 e3 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1cb8],ecx
c001ec90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec94:	89 14 c5 44 e3 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1cbc],edx
c001ec9b:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c001eca0:	83 f8 08             	cmp    eax,0x8
c001eca3:	75 08                	jne    c001ecad <Vm::fpuPush(unsigned long long)+0x56>
c001eca5:	80 0d 40 e3 02 c0 40 	or     BYTE PTR ds:0xc002e340,0x40
c001ecac:	c3                   	ret    
c001ecad:	40                   	inc    eax
c001ecae:	a3 84 e3 02 c0       	mov    ds:0xc002e384,eax
c001ecb3:	c3                   	ret    

c001ecb4 <Vm::fpuPop()>:
c001ecb4:	8a 0d 41 e3 02 c0    	mov    cl,BYTE PTR ds:0xc002e341
c001ecba:	53                   	push   ebx
c001ecbb:	c0 e9 03             	shr    cl,0x3
c001ecbe:	8a 1d 41 e3 02 c0    	mov    bl,BYTE PTR ds:0xc002e341
c001ecc4:	83 e1 07             	and    ecx,0x7
c001ecc7:	83 e3 c7             	and    ebx,0xffffffc7
c001ecca:	8b 04 cd 44 e3 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd1cbc]
c001ecd1:	8b 14 cd 48 e3 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd1cb8]
c001ecd8:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001ecdf:	83 e1 38             	and    ecx,0x38
c001ece2:	09 d9                	or     ecx,ebx
c001ece4:	88 0d 41 e3 02 c0    	mov    BYTE PTR ds:0xc002e341,cl
c001ecea:	8b 0d 84 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e384
c001ecf0:	85 c9                	test   ecx,ecx
c001ecf2:	74 09                	je     c001ecfd <Vm::fpuPop()+0x49>
c001ecf4:	49                   	dec    ecx
c001ecf5:	89 0d 84 e3 02 c0    	mov    DWORD PTR ds:0xc002e384,ecx
c001ecfb:	eb 07                	jmp    c001ed04 <Vm::fpuPop()+0x50>
c001ecfd:	80 0d 40 e3 02 c0 40 	or     BYTE PTR ds:0xc002e340,0x40
c001ed04:	5b                   	pop    ebx
c001ed05:	c3                   	ret    

c001ed06 <Vm::x87Handler(regs*)>:
c001ed06:	55                   	push   ebp
c001ed07:	57                   	push   edi
c001ed08:	56                   	push   esi
c001ed09:	53                   	push   ebx
c001ed0a:	83 ec 1c             	sub    esp,0x1c
c001ed0d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ed11:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001ed16:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001ed19:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001ed21:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ed25:	50                   	push   eax
c001ed26:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001ed2a:	50                   	push   eax
c001ed2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ed2f:	50                   	push   eax
c001ed30:	53                   	push   ebx
c001ed31:	e8 be a5 ff ff       	call   c00192f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ed36:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ed39:	83 c4 10             	add    esp,0x10
c001ed3c:	89 c6                	mov    esi,eax
c001ed3e:	80 fa d9             	cmp    dl,0xd9
c001ed41:	0f 85 52 01 00 00    	jne    c001ee99 <Vm::x87Handler(regs*)+0x193>
c001ed47:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed4b:	8d 50 20             	lea    edx,[eax+0x20]
c001ed4e:	80 fa 0e             	cmp    dl,0xe
c001ed51:	0f 87 86 00 00 00    	ja     c001eddd <Vm::x87Handler(regs*)+0xd7>
c001ed57:	0f b6 d2             	movzx  edx,dl
c001ed5a:	ff 24 95 88 b1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4e78]
c001ed61:	e8 e7 fc ff ff       	call   c001ea4d <Vm::fpuGet0()>
c001ed66:	eb 05                	jmp    c001ed6d <Vm::x87Handler(regs*)+0x67>
c001ed68:	e8 e5 fc ff ff       	call   c001ea52 <Vm::fpuGet1()>
c001ed6d:	57                   	push   edi
c001ed6e:	57                   	push   edi
c001ed6f:	52                   	push   edx
c001ed70:	50                   	push   eax
c001ed71:	e8 e1 fe ff ff       	call   c001ec57 <Vm::fpuPush(unsigned long long)>
c001ed76:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ed7a:	83 c4 10             	add    esp,0x10
c001ed7d:	b0 01                	mov    al,0x1
c001ed7f:	e9 e3 09 00 00       	jmp    c001f767 <Vm::x87Handler(regs*)+0xa61>
c001ed84:	83 ec 0c             	sub    esp,0xc
c001ed87:	6a 00                	push   0x0
c001ed89:	e8 3b fe ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001ed8e:	59                   	pop    ecx
c001ed8f:	5e                   	pop    esi
c001ed90:	52                   	push   edx
c001ed91:	50                   	push   eax
c001ed92:	e8 c2 fd ff ff       	call   c001eb59 <Vm::fpuChs(unsigned long long)>
c001ed97:	eb 13                	jmp    c001edac <Vm::x87Handler(regs*)+0xa6>
c001ed99:	83 ec 0c             	sub    esp,0xc
c001ed9c:	6a 00                	push   0x0
c001ed9e:	e8 26 fe ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001eda3:	5f                   	pop    edi
c001eda4:	5d                   	pop    ebp
c001eda5:	52                   	push   edx
c001eda6:	50                   	push   eax
c001eda7:	e8 a4 fd ff ff       	call   c001eb50 <Vm::fpuAbs(unsigned long long)>
c001edac:	83 c4 0c             	add    esp,0xc
c001edaf:	52                   	push   edx
c001edb0:	50                   	push   eax
c001edb1:	6a 00                	push   0x0
c001edb3:	e8 54 fe ff ff       	call   c001ec0c <Vm::fpuSetReg(int, unsigned long long)>
c001edb8:	eb bc                	jmp    c001ed76 <Vm::x87Handler(regs*)+0x70>
c001edba:	e8 d3 fc ff ff       	call   c001ea92 <Vm::fpuGetLog210()>
c001edbf:	eb ac                	jmp    c001ed6d <Vm::x87Handler(regs*)+0x67>
c001edc1:	e8 9c fc ff ff       	call   c001ea62 <Vm::fpuGetLog2E()>
c001edc6:	eb a5                	jmp    c001ed6d <Vm::x87Handler(regs*)+0x67>
c001edc8:	e8 8d fc ff ff       	call   c001ea5a <Vm::fpuGetPi()>
c001edcd:	eb 9e                	jmp    c001ed6d <Vm::x87Handler(regs*)+0x67>
c001edcf:	e8 d6 fc ff ff       	call   c001eaaa <Vm::fpuGetLog102()>
c001edd4:	eb 97                	jmp    c001ed6d <Vm::x87Handler(regs*)+0x67>
c001edd6:	e8 9f fc ff ff       	call   c001ea7a <Vm::fpuGetLogE2()>
c001eddb:	eb 90                	jmp    c001ed6d <Vm::x87Handler(regs*)+0x67>
c001eddd:	8d 50 40             	lea    edx,[eax+0x40]
c001ede0:	80 fa 07             	cmp    dl,0x7
c001ede3:	77 15                	ja     c001edfa <Vm::x87Handler(regs*)+0xf4>
c001ede5:	83 ec 0c             	sub    esp,0xc
c001ede8:	2d c0 00 00 00       	sub    eax,0xc0
c001eded:	50                   	push   eax
c001edee:	e8 d6 fd ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001edf3:	59                   	pop    ecx
c001edf4:	5e                   	pop    esi
c001edf5:	e9 75 ff ff ff       	jmp    c001ed6f <Vm::x87Handler(regs*)+0x69>
c001edfa:	8d 50 38             	lea    edx,[eax+0x38]
c001edfd:	80 fa 07             	cmp    dl,0x7
c001ee00:	77 3c                	ja     c001ee3e <Vm::x87Handler(regs*)+0x138>
c001ee02:	83 ec 0c             	sub    esp,0xc
c001ee05:	2d c8 00 00 00       	sub    eax,0xc8
c001ee0a:	50                   	push   eax
c001ee0b:	e8 b9 fd ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001ee10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee17:	89 c6                	mov    esi,eax
c001ee19:	89 d7                	mov    edi,edx
c001ee1b:	e8 a9 fd ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001ee20:	83 c4 0c             	add    esp,0xc
c001ee23:	52                   	push   edx
c001ee24:	50                   	push   eax
c001ee25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee29:	2d c8 00 00 00       	sub    eax,0xc8
c001ee2e:	50                   	push   eax
c001ee2f:	e8 d8 fd ff ff       	call   c001ec0c <Vm::fpuSetReg(int, unsigned long long)>
c001ee34:	83 c4 0c             	add    esp,0xc
c001ee37:	57                   	push   edi
c001ee38:	56                   	push   esi
c001ee39:	e9 73 ff ff ff       	jmp    c001edb1 <Vm::x87Handler(regs*)+0xab>
c001ee3e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ee42:	84 d2                	test   dl,dl
c001ee44:	75 0f                	jne    c001ee55 <Vm::x87Handler(regs*)+0x14f>
c001ee46:	83 ec 0c             	sub    esp,0xc
c001ee49:	ff 36                	push   DWORD PTR [esi]
c001ee4b:	e8 c8 fa ff ff       	call   c001e918 <Vm::fpu32ToInternal(unsigned int)>
c001ee50:	e9 bf 00 00 00       	jmp    c001ef14 <Vm::x87Handler(regs*)+0x20e>
c001ee55:	80 fa 03             	cmp    dl,0x3
c001ee58:	75 13                	jne    c001ee6d <Vm::x87Handler(regs*)+0x167>
c001ee5a:	e8 55 fe ff ff       	call   c001ecb4 <Vm::fpuPop()>
c001ee5f:	55                   	push   ebp
c001ee60:	55                   	push   ebp
c001ee61:	52                   	push   edx
c001ee62:	50                   	push   eax
c001ee63:	e8 4c fa ff ff       	call   c001e8b4 <Vm::fpuInternalTo32(unsigned long long)>
c001ee68:	e9 88 00 00 00       	jmp    c001eef5 <Vm::x87Handler(regs*)+0x1ef>
c001ee6d:	80 fa 05             	cmp    dl,0x5
c001ee70:	75 0e                	jne    c001ee80 <Vm::x87Handler(regs*)+0x17a>
c001ee72:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ee75:	66 a3 42 e3 02 c0    	mov    ds:0xc002e342,ax
c001ee7b:	e9 df 00 00 00       	jmp    c001ef5f <Vm::x87Handler(regs*)+0x259>
c001ee80:	31 c0                	xor    eax,eax
c001ee82:	80 fa 07             	cmp    dl,0x7
c001ee85:	0f 85 dc 08 00 00    	jne    c001f767 <Vm::x87Handler(regs*)+0xa61>
c001ee8b:	66 a1 42 e3 02 c0    	mov    ax,ds:0xc002e342
c001ee91:	66 89 06             	mov    WORD PTR [esi],ax
c001ee94:	e9 c6 00 00 00       	jmp    c001ef5f <Vm::x87Handler(regs*)+0x259>
c001ee99:	80 fa d8             	cmp    dl,0xd8
c001ee9c:	0f 84 c9 00 00 00    	je     c001ef6b <Vm::x87Handler(regs*)+0x265>
c001eea2:	80 fa dc             	cmp    dl,0xdc
c001eea5:	0f 84 0d 02 00 00    	je     c001f0b8 <Vm::x87Handler(regs*)+0x3b2>
c001eeab:	80 fa de             	cmp    dl,0xde
c001eeae:	0f 84 cd 02 00 00    	je     c001f181 <Vm::x87Handler(regs*)+0x47b>
c001eeb4:	80 fa dd             	cmp    dl,0xdd
c001eeb7:	0f 84 5f 04 00 00    	je     c001f31c <Vm::x87Handler(regs*)+0x616>
c001eebd:	80 fa da             	cmp    dl,0xda
c001eec0:	0f 84 24 05 00 00    	je     c001f3ea <Vm::x87Handler(regs*)+0x6e4>
c001eec6:	80 fa df             	cmp    dl,0xdf
c001eec9:	0f 84 68 05 00 00    	je     c001f437 <Vm::x87Handler(regs*)+0x731>
c001eecf:	31 c0                	xor    eax,eax
c001eed1:	80 fa db             	cmp    dl,0xdb
c001eed4:	0f 85 8d 08 00 00    	jne    c001f767 <Vm::x87Handler(regs*)+0xa61>
c001eeda:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eede:	80 fa 03             	cmp    dl,0x3
c001eee1:	0f 85 70 06 00 00    	jne    c001f557 <Vm::x87Handler(regs*)+0x851>
c001eee7:	e8 c8 fd ff ff       	call   c001ecb4 <Vm::fpuPop()>
c001eeec:	55                   	push   ebp
c001eeed:	55                   	push   ebp
c001eeee:	52                   	push   edx
c001eeef:	50                   	push   eax
c001eef0:	e8 71 fa ff ff       	call   c001e966 <Vm::fpuFloatToLong(unsigned long long)>
c001eef5:	83 c4 10             	add    esp,0x10
c001eef8:	89 06                	mov    DWORD PTR [esi],eax
c001eefa:	eb 63                	jmp    c001ef5f <Vm::x87Handler(regs*)+0x259>
c001eefc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ef00:	84 d2                	test   dl,dl
c001ef02:	0f 85 e6 05 00 00    	jne    c001f4ee <Vm::x87Handler(regs*)+0x7e8>
c001ef08:	57                   	push   edi
c001ef09:	57                   	push   edi
c001ef0a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ef0d:	ff 36                	push   DWORD PTR [esi]
c001ef0f:	e8 49 fa ff ff       	call   c001e95d <Vm::fpu64ToInternal(unsigned long long)>
c001ef14:	5e                   	pop    esi
c001ef15:	5f                   	pop    edi
c001ef16:	52                   	push   edx
c001ef17:	50                   	push   eax
c001ef18:	e8 3a fd ff ff       	call   c001ec57 <Vm::fpuPush(unsigned long long)>
c001ef1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ef21:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ef24:	e9 51 fe ff ff       	jmp    c001ed7a <Vm::x87Handler(regs*)+0x74>
c001ef29:	80 fa 03             	cmp    dl,0x3
c001ef2c:	0f 85 d7 06 00 00    	jne    c001f609 <Vm::x87Handler(regs*)+0x903>
c001ef32:	57                   	push   edi
c001ef33:	57                   	push   edi
c001ef34:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ef37:	ff 36                	push   DWORD PTR [esi]
c001ef39:	e8 1f fa ff ff       	call   c001e95d <Vm::fpu64ToInternal(unsigned long long)>
c001ef3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef45:	89 c6                	mov    esi,eax
c001ef47:	89 d7                	mov    edi,edx
c001ef49:	e8 7b fc ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001ef4e:	57                   	push   edi
c001ef4f:	56                   	push   esi
c001ef50:	52                   	push   edx
c001ef51:	50                   	push   eax
c001ef52:	e8 95 fb ff ff       	call   c001eaec <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ef57:	83 c4 20             	add    esp,0x20
c001ef5a:	e8 55 fd ff ff       	call   c001ecb4 <Vm::fpuPop()>
c001ef5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef63:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ef66:	e9 12 fe ff ff       	jmp    c001ed7d <Vm::x87Handler(regs*)+0x77>
c001ef6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef6f:	8d 50 40             	lea    edx,[eax+0x40]
c001ef72:	80 fa 07             	cmp    dl,0x7
c001ef75:	77 29                	ja     c001efa0 <Vm::x87Handler(regs*)+0x29a>
c001ef77:	83 ec 0c             	sub    esp,0xc
c001ef7a:	2d c0 00 00 00       	sub    eax,0xc0
c001ef7f:	50                   	push   eax
c001ef80:	e8 44 fc ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001ef85:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef8c:	89 c6                	mov    esi,eax
c001ef8e:	89 d7                	mov    edi,edx
c001ef90:	e8 34 fc ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001ef95:	57                   	push   edi
c001ef96:	56                   	push   esi
c001ef97:	52                   	push   edx
c001ef98:	50                   	push   eax
c001ef99:	e8 a1 fb ff ff       	call   c001eb3f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ef9e:	eb 2f                	jmp    c001efcf <Vm::x87Handler(regs*)+0x2c9>
c001efa0:	8d 50 38             	lea    edx,[eax+0x38]
c001efa3:	80 fa 07             	cmp    dl,0x7
c001efa6:	77 2f                	ja     c001efd7 <Vm::x87Handler(regs*)+0x2d1>
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	2d c8 00 00 00       	sub    eax,0xc8
c001efb0:	50                   	push   eax
c001efb1:	e8 13 fc ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001efb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efbd:	89 c6                	mov    esi,eax
c001efbf:	89 d7                	mov    edi,edx
c001efc1:	e8 03 fc ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001efc6:	57                   	push   edi
c001efc7:	56                   	push   esi
c001efc8:	52                   	push   edx
c001efc9:	50                   	push   eax
c001efca:	e8 a9 fb ff ff       	call   c001eb78 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001efcf:	83 c4 1c             	add    esp,0x1c
c001efd2:	e9 d8 fd ff ff       	jmp    c001edaf <Vm::x87Handler(regs*)+0xa9>
c001efd7:	8d 50 30             	lea    edx,[eax+0x30]
c001efda:	80 fa 07             	cmp    dl,0x7
c001efdd:	77 0d                	ja     c001efec <Vm::x87Handler(regs*)+0x2e6>
c001efdf:	83 ec 0c             	sub    esp,0xc
c001efe2:	2d d0 00 00 00       	sub    eax,0xd0
c001efe7:	e9 99 03 00 00       	jmp    c001f385 <Vm::x87Handler(regs*)+0x67f>
c001efec:	8d 50 28             	lea    edx,[eax+0x28]
c001efef:	80 fa 07             	cmp    dl,0x7
c001eff2:	77 0d                	ja     c001f001 <Vm::x87Handler(regs*)+0x2fb>
c001eff4:	83 ec 0c             	sub    esp,0xc
c001eff7:	2d d8 00 00 00       	sub    eax,0xd8
c001effc:	e9 c0 03 00 00       	jmp    c001f3c1 <Vm::x87Handler(regs*)+0x6bb>
c001f001:	8d 50 20             	lea    edx,[eax+0x20]
c001f004:	80 fa 07             	cmp    dl,0x7
c001f007:	77 1b                	ja     c001f024 <Vm::x87Handler(regs*)+0x31e>
c001f009:	83 ec 0c             	sub    esp,0xc
c001f00c:	2d e0 00 00 00       	sub    eax,0xe0
c001f011:	50                   	push   eax
c001f012:	e8 b2 fb ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f017:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f01e:	89 c6                	mov    esi,eax
c001f020:	89 d7                	mov    edi,edx
c001f022:	eb 22                	jmp    c001f046 <Vm::x87Handler(regs*)+0x340>
c001f024:	8d 50 18             	lea    edx,[eax+0x18]
c001f027:	80 fa 07             	cmp    dl,0x7
c001f02a:	77 2d                	ja     c001f059 <Vm::x87Handler(regs*)+0x353>
c001f02c:	83 ec 0c             	sub    esp,0xc
c001f02f:	6a 00                	push   0x0
c001f031:	e8 93 fb ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f036:	89 c6                	mov    esi,eax
c001f038:	89 d7                	mov    edi,edx
c001f03a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f03e:	2d e8 00 00 00       	sub    eax,0xe8
c001f043:	89 04 24             	mov    DWORD PTR [esp],eax
c001f046:	e8 7e fb ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f04b:	57                   	push   edi
c001f04c:	56                   	push   esi
c001f04d:	52                   	push   edx
c001f04e:	50                   	push   eax
c001f04f:	e8 15 fb ff ff       	call   c001eb69 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f054:	e9 76 ff ff ff       	jmp    c001efcf <Vm::x87Handler(regs*)+0x2c9>
c001f059:	8d 50 10             	lea    edx,[eax+0x10]
c001f05c:	80 fa 07             	cmp    dl,0x7
c001f05f:	77 1b                	ja     c001f07c <Vm::x87Handler(regs*)+0x376>
c001f061:	83 ec 0c             	sub    esp,0xc
c001f064:	2d f0 00 00 00       	sub    eax,0xf0
c001f069:	50                   	push   eax
c001f06a:	e8 5a fb ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f06f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f076:	89 c6                	mov    esi,eax
c001f078:	89 d7                	mov    edi,edx
c001f07a:	eb 22                	jmp    c001f09e <Vm::x87Handler(regs*)+0x398>
c001f07c:	3c f7                	cmp    al,0xf7
c001f07e:	0f 86 d1 03 00 00    	jbe    c001f455 <Vm::x87Handler(regs*)+0x74f>
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	6a 00                	push   0x0
c001f089:	e8 3b fb ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f08e:	89 c6                	mov    esi,eax
c001f090:	89 d7                	mov    edi,edx
c001f092:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f096:	2d f8 00 00 00       	sub    eax,0xf8
c001f09b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f09e:	e8 26 fb ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f0a3:	57                   	push   edi
c001f0a4:	56                   	push   esi
c001f0a5:	52                   	push   edx
c001f0a6:	50                   	push   eax
c001f0a7:	e8 eb fa ff ff       	call   c001eb97 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f0ac:	83 c4 1c             	add    esp,0x1c
c001f0af:	52                   	push   edx
c001f0b0:	50                   	push   eax
c001f0b1:	6a 00                	push   0x0
c001f0b3:	e9 51 02 00 00       	jmp    c001f309 <Vm::x87Handler(regs*)+0x603>
c001f0b8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0bc:	8d 50 40             	lea    edx,[eax+0x40]
c001f0bf:	80 fa 07             	cmp    dl,0x7
c001f0c2:	77 37                	ja     c001f0fb <Vm::x87Handler(regs*)+0x3f5>
c001f0c4:	83 ec 0c             	sub    esp,0xc
c001f0c7:	2d c0 00 00 00       	sub    eax,0xc0
c001f0cc:	50                   	push   eax
c001f0cd:	e8 f7 fa ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f0d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0d9:	89 c6                	mov    esi,eax
c001f0db:	89 d7                	mov    edi,edx
c001f0dd:	e8 e7 fa ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f0e2:	57                   	push   edi
c001f0e3:	56                   	push   esi
c001f0e4:	52                   	push   edx
c001f0e5:	50                   	push   eax
c001f0e6:	e8 54 fa ff ff       	call   c001eb3f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f0eb:	83 c4 1c             	add    esp,0x1c
c001f0ee:	52                   	push   edx
c001f0ef:	50                   	push   eax
c001f0f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0f4:	2d c0 00 00 00       	sub    eax,0xc0
c001f0f9:	eb 3d                	jmp    c001f138 <Vm::x87Handler(regs*)+0x432>
c001f0fb:	8d 50 38             	lea    edx,[eax+0x38]
c001f0fe:	80 fa 07             	cmp    dl,0x7
c001f101:	77 3b                	ja     c001f13e <Vm::x87Handler(regs*)+0x438>
c001f103:	83 ec 0c             	sub    esp,0xc
c001f106:	2d c8 00 00 00       	sub    eax,0xc8
c001f10b:	50                   	push   eax
c001f10c:	e8 b8 fa ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f111:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f118:	89 c6                	mov    esi,eax
c001f11a:	89 d7                	mov    edi,edx
c001f11c:	e8 a8 fa ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f121:	57                   	push   edi
c001f122:	56                   	push   esi
c001f123:	52                   	push   edx
c001f124:	50                   	push   eax
c001f125:	e8 4e fa ff ff       	call   c001eb78 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f12a:	83 c4 1c             	add    esp,0x1c
c001f12d:	52                   	push   edx
c001f12e:	50                   	push   eax
c001f12f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f133:	2d c8 00 00 00       	sub    eax,0xc8
c001f138:	50                   	push   eax
c001f139:	e9 75 fc ff ff       	jmp    c001edb3 <Vm::x87Handler(regs*)+0xad>
c001f13e:	83 c0 18             	add    eax,0x18
c001f141:	3c 07                	cmp    al,0x7
c001f143:	0f 87 3b 04 00 00    	ja     c001f584 <Vm::x87Handler(regs*)+0x87e>
c001f149:	83 ec 0c             	sub    esp,0xc
c001f14c:	6a 00                	push   0x0
c001f14e:	e8 76 fa ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f153:	89 c6                	mov    esi,eax
c001f155:	89 d7                	mov    edi,edx
c001f157:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f15b:	2d e8 00 00 00       	sub    eax,0xe8
c001f160:	89 04 24             	mov    DWORD PTR [esp],eax
c001f163:	e8 61 fa ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f168:	57                   	push   edi
c001f169:	56                   	push   esi
c001f16a:	52                   	push   edx
c001f16b:	50                   	push   eax
c001f16c:	e8 f8 f9 ff ff       	call   c001eb69 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f171:	83 c4 1c             	add    esp,0x1c
c001f174:	52                   	push   edx
c001f175:	50                   	push   eax
c001f176:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f17a:	2d e8 00 00 00       	sub    eax,0xe8
c001f17f:	eb b7                	jmp    c001f138 <Vm::x87Handler(regs*)+0x432>
c001f181:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f185:	8d 50 40             	lea    edx,[eax+0x40]
c001f188:	80 fa 07             	cmp    dl,0x7
c001f18b:	77 3a                	ja     c001f1c7 <Vm::x87Handler(regs*)+0x4c1>
c001f18d:	83 ec 0c             	sub    esp,0xc
c001f190:	2d c0 00 00 00       	sub    eax,0xc0
c001f195:	50                   	push   eax
c001f196:	e8 2e fa ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f19b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1a2:	89 c6                	mov    esi,eax
c001f1a4:	89 d7                	mov    edi,edx
c001f1a6:	e8 1e fa ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f1ab:	57                   	push   edi
c001f1ac:	56                   	push   esi
c001f1ad:	52                   	push   edx
c001f1ae:	50                   	push   eax
c001f1af:	e8 8b f9 ff ff       	call   c001eb3f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f1b4:	83 c4 1c             	add    esp,0x1c
c001f1b7:	52                   	push   edx
c001f1b8:	50                   	push   eax
c001f1b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1bd:	2d c0 00 00 00       	sub    eax,0xc0
c001f1c2:	e9 9e 01 00 00       	jmp    c001f365 <Vm::x87Handler(regs*)+0x65f>
c001f1c7:	8d 50 20             	lea    edx,[eax+0x20]
c001f1ca:	80 fa 07             	cmp    dl,0x7
c001f1cd:	77 3a                	ja     c001f209 <Vm::x87Handler(regs*)+0x503>
c001f1cf:	83 ec 0c             	sub    esp,0xc
c001f1d2:	2d e0 00 00 00       	sub    eax,0xe0
c001f1d7:	50                   	push   eax
c001f1d8:	e8 ec f9 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f1dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1e4:	89 c6                	mov    esi,eax
c001f1e6:	89 d7                	mov    edi,edx
c001f1e8:	e8 dc f9 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f1ed:	57                   	push   edi
c001f1ee:	56                   	push   esi
c001f1ef:	52                   	push   edx
c001f1f0:	50                   	push   eax
c001f1f1:	e8 73 f9 ff ff       	call   c001eb69 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f1f6:	83 c4 1c             	add    esp,0x1c
c001f1f9:	52                   	push   edx
c001f1fa:	50                   	push   eax
c001f1fb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1ff:	2d e0 00 00 00       	sub    eax,0xe0
c001f204:	e9 5c 01 00 00       	jmp    c001f365 <Vm::x87Handler(regs*)+0x65f>
c001f209:	8d 50 18             	lea    edx,[eax+0x18]
c001f20c:	80 fa 07             	cmp    dl,0x7
c001f20f:	77 3b                	ja     c001f24c <Vm::x87Handler(regs*)+0x546>
c001f211:	83 ec 0c             	sub    esp,0xc
c001f214:	6a 00                	push   0x0
c001f216:	e8 ae f9 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f21b:	89 c6                	mov    esi,eax
c001f21d:	89 d7                	mov    edi,edx
c001f21f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f223:	2d e8 00 00 00       	sub    eax,0xe8
c001f228:	89 04 24             	mov    DWORD PTR [esp],eax
c001f22b:	e8 99 f9 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f230:	57                   	push   edi
c001f231:	56                   	push   esi
c001f232:	52                   	push   edx
c001f233:	50                   	push   eax
c001f234:	e8 30 f9 ff ff       	call   c001eb69 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f239:	83 c4 1c             	add    esp,0x1c
c001f23c:	52                   	push   edx
c001f23d:	50                   	push   eax
c001f23e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f242:	2d e8 00 00 00       	sub    eax,0xe8
c001f247:	e9 19 01 00 00       	jmp    c001f365 <Vm::x87Handler(regs*)+0x65f>
c001f24c:	8d 50 38             	lea    edx,[eax+0x38]
c001f24f:	80 fa 07             	cmp    dl,0x7
c001f252:	77 37                	ja     c001f28b <Vm::x87Handler(regs*)+0x585>
c001f254:	83 ec 0c             	sub    esp,0xc
c001f257:	2d c8 00 00 00       	sub    eax,0xc8
c001f25c:	50                   	push   eax
c001f25d:	e8 67 f9 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f262:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f269:	89 c6                	mov    esi,eax
c001f26b:	89 d7                	mov    edi,edx
c001f26d:	e8 57 f9 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f272:	57                   	push   edi
c001f273:	56                   	push   esi
c001f274:	52                   	push   edx
c001f275:	50                   	push   eax
c001f276:	e8 fd f8 ff ff       	call   c001eb78 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f27b:	83 c4 1c             	add    esp,0x1c
c001f27e:	52                   	push   edx
c001f27f:	50                   	push   eax
c001f280:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f284:	2d c8 00 00 00       	sub    eax,0xc8
c001f289:	eb 7d                	jmp    c001f308 <Vm::x87Handler(regs*)+0x602>
c001f28b:	3c f7                	cmp    al,0xf7
c001f28d:	76 38                	jbe    c001f2c7 <Vm::x87Handler(regs*)+0x5c1>
c001f28f:	83 ec 0c             	sub    esp,0xc
c001f292:	6a 00                	push   0x0
c001f294:	e8 30 f9 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f299:	89 c6                	mov    esi,eax
c001f29b:	89 d7                	mov    edi,edx
c001f29d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2a1:	2d f8 00 00 00       	sub    eax,0xf8
c001f2a6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2a9:	e8 1b f9 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f2ae:	57                   	push   edi
c001f2af:	56                   	push   esi
c001f2b0:	52                   	push   edx
c001f2b1:	50                   	push   eax
c001f2b2:	e8 e0 f8 ff ff       	call   c001eb97 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f2b7:	83 c4 1c             	add    esp,0x1c
c001f2ba:	52                   	push   edx
c001f2bb:	50                   	push   eax
c001f2bc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2c0:	2d f8 00 00 00       	sub    eax,0xf8
c001f2c5:	eb 41                	jmp    c001f308 <Vm::x87Handler(regs*)+0x602>
c001f2c7:	8d 50 10             	lea    edx,[eax+0x10]
c001f2ca:	80 fa 07             	cmp    dl,0x7
c001f2cd:	0f 87 5a 01 00 00    	ja     c001f42d <Vm::x87Handler(regs*)+0x727>
c001f2d3:	83 ec 0c             	sub    esp,0xc
c001f2d6:	2d f0 00 00 00       	sub    eax,0xf0
c001f2db:	50                   	push   eax
c001f2dc:	e8 e8 f8 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f2e1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2e8:	89 c6                	mov    esi,eax
c001f2ea:	89 d7                	mov    edi,edx
c001f2ec:	e8 d8 f8 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f2f1:	57                   	push   edi
c001f2f2:	56                   	push   esi
c001f2f3:	52                   	push   edx
c001f2f4:	50                   	push   eax
c001f2f5:	e8 9d f8 ff ff       	call   c001eb97 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f2fa:	83 c4 1c             	add    esp,0x1c
c001f2fd:	52                   	push   edx
c001f2fe:	50                   	push   eax
c001f2ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f303:	2d f0 00 00 00       	sub    eax,0xf0
c001f308:	50                   	push   eax
c001f309:	e8 fe f8 ff ff       	call   c001ec0c <Vm::fpuSetReg(int, unsigned long long)>
c001f30e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f312:	e8 9d f9 ff ff       	call   c001ecb4 <Vm::fpuPop()>
c001f317:	e9 5e fa ff ff       	jmp    c001ed7a <Vm::x87Handler(regs*)+0x74>
c001f31c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f320:	8d 50 30             	lea    edx,[eax+0x30]
c001f323:	80 fa 07             	cmp    dl,0x7
c001f326:	77 1d                	ja     c001f345 <Vm::x87Handler(regs*)+0x63f>
c001f328:	83 ec 0c             	sub    esp,0xc
c001f32b:	6a 00                	push   0x0
c001f32d:	e8 97 f8 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f332:	83 c4 0c             	add    esp,0xc
c001f335:	52                   	push   edx
c001f336:	50                   	push   eax
c001f337:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f33b:	2d d0 00 00 00       	sub    eax,0xd0
c001f340:	e9 f3 fd ff ff       	jmp    c001f138 <Vm::x87Handler(regs*)+0x432>
c001f345:	8d 50 28             	lea    edx,[eax+0x28]
c001f348:	80 fa 07             	cmp    dl,0x7
c001f34b:	77 28                	ja     c001f375 <Vm::x87Handler(regs*)+0x66f>
c001f34d:	83 ec 0c             	sub    esp,0xc
c001f350:	6a 00                	push   0x0
c001f352:	e8 72 f8 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f357:	83 c4 0c             	add    esp,0xc
c001f35a:	52                   	push   edx
c001f35b:	50                   	push   eax
c001f35c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f360:	2d d8 00 00 00       	sub    eax,0xd8
c001f365:	50                   	push   eax
c001f366:	e8 a1 f8 ff ff       	call   c001ec0c <Vm::fpuSetReg(int, unsigned long long)>
c001f36b:	e8 44 f9 ff ff       	call   c001ecb4 <Vm::fpuPop()>
c001f370:	e9 01 fa ff ff       	jmp    c001ed76 <Vm::x87Handler(regs*)+0x70>
c001f375:	8d 50 20             	lea    edx,[eax+0x20]
c001f378:	80 fa 07             	cmp    dl,0x7
c001f37b:	77 30                	ja     c001f3ad <Vm::x87Handler(regs*)+0x6a7>
c001f37d:	83 ec 0c             	sub    esp,0xc
c001f380:	2d e0 00 00 00       	sub    eax,0xe0
c001f385:	50                   	push   eax
c001f386:	e8 3e f8 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f38b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f392:	89 c6                	mov    esi,eax
c001f394:	89 d7                	mov    edi,edx
c001f396:	e8 2e f8 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f39b:	57                   	push   edi
c001f39c:	56                   	push   esi
c001f39d:	52                   	push   edx
c001f39e:	50                   	push   eax
c001f39f:	e8 48 f7 ff ff       	call   c001eaec <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f3a4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3a8:	e9 54 02 00 00       	jmp    c001f601 <Vm::x87Handler(regs*)+0x8fb>
c001f3ad:	8d 50 18             	lea    edx,[eax+0x18]
c001f3b0:	80 fa 07             	cmp    dl,0x7
c001f3b3:	0f 87 43 fb ff ff    	ja     c001eefc <Vm::x87Handler(regs*)+0x1f6>
c001f3b9:	83 ec 0c             	sub    esp,0xc
c001f3bc:	2d e8 00 00 00       	sub    eax,0xe8
c001f3c1:	50                   	push   eax
c001f3c2:	e8 02 f8 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f3c7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3ce:	89 c6                	mov    esi,eax
c001f3d0:	89 d7                	mov    edi,edx
c001f3d2:	e8 f2 f7 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f3d7:	57                   	push   edi
c001f3d8:	56                   	push   esi
c001f3d9:	52                   	push   edx
c001f3da:	50                   	push   eax
c001f3db:	e8 0c f7 ff ff       	call   c001eaec <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f3e0:	83 c4 20             	add    esp,0x20
c001f3e3:	e8 cc f8 ff ff       	call   c001ecb4 <Vm::fpuPop()>
c001f3e8:	eb 62                	jmp    c001f44c <Vm::x87Handler(regs*)+0x746>
c001f3ea:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f3ee:	0f 85 0f 01 00 00    	jne    c001f503 <Vm::x87Handler(regs*)+0x7fd>
c001f3f4:	83 ec 0c             	sub    esp,0xc
c001f3f7:	6a 01                	push   0x1
c001f3f9:	e8 cb f7 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f3fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f405:	89 c6                	mov    esi,eax
c001f407:	89 d7                	mov    edi,edx
c001f409:	e8 bb f7 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f40e:	57                   	push   edi
c001f40f:	56                   	push   esi
c001f410:	52                   	push   edx
c001f411:	50                   	push   eax
c001f412:	e8 d5 f6 ff ff       	call   c001eaec <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f417:	83 c4 20             	add    esp,0x20
c001f41a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f41e:	e8 91 f8 ff ff       	call   c001ecb4 <Vm::fpuPop()>
c001f423:	e8 8c f8 ff ff       	call   c001ecb4 <Vm::fpuPop()>
c001f428:	e9 50 f9 ff ff       	jmp    c001ed7d <Vm::x87Handler(regs*)+0x77>
c001f42d:	3c d9                	cmp    al,0xd9
c001f42f:	0f 85 b5 02 00 00    	jne    c001f6ea <Vm::x87Handler(regs*)+0x9e4>
c001f435:	eb bd                	jmp    c001f3f4 <Vm::x87Handler(regs*)+0x6ee>
c001f437:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f43b:	0f 85 ea 02 00 00    	jne    c001f72b <Vm::x87Handler(regs*)+0xa25>
c001f441:	0f b7 05 40 e3 02 c0 	movzx  eax,WORD PTR ds:0xc002e340
c001f448:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f44c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f450:	e9 28 f9 ff ff       	jmp    c001ed7d <Vm::x87Handler(regs*)+0x77>
c001f455:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f459:	84 d2                	test   dl,dl
c001f45b:	75 0f                	jne    c001f46c <Vm::x87Handler(regs*)+0x766>
c001f45d:	83 ec 0c             	sub    esp,0xc
c001f460:	ff 36                	push   DWORD PTR [esi]
c001f462:	e8 b1 f4 ff ff       	call   c001e918 <Vm::fpu32ToInternal(unsigned int)>
c001f467:	e9 2c 01 00 00       	jmp    c001f598 <Vm::x87Handler(regs*)+0x892>
c001f46c:	80 fa 01             	cmp    dl,0x1
c001f46f:	75 0f                	jne    c001f480 <Vm::x87Handler(regs*)+0x77a>
c001f471:	83 ec 0c             	sub    esp,0xc
c001f474:	ff 36                	push   DWORD PTR [esi]
c001f476:	e8 9d f4 ff ff       	call   c001e918 <Vm::fpu32ToInternal(unsigned int)>
c001f47b:	e9 81 02 00 00       	jmp    c001f701 <Vm::x87Handler(regs*)+0x9fb>
c001f480:	80 fa 04             	cmp    dl,0x4
c001f483:	75 0f                	jne    c001f494 <Vm::x87Handler(regs*)+0x78e>
c001f485:	83 ec 0c             	sub    esp,0xc
c001f488:	ff 36                	push   DWORD PTR [esi]
c001f48a:	e8 89 f4 ff ff       	call   c001e918 <Vm::fpu32ToInternal(unsigned int)>
c001f48f:	e9 86 01 00 00       	jmp    c001f61a <Vm::x87Handler(regs*)+0x914>
c001f494:	80 fa 05             	cmp    dl,0x5
c001f497:	75 1b                	jne    c001f4b4 <Vm::x87Handler(regs*)+0x7ae>
c001f499:	83 ec 0c             	sub    esp,0xc
c001f49c:	6a 00                	push   0x0
c001f49e:	e8 26 f7 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f4a3:	89 c7                	mov    edi,eax
c001f4a5:	89 d5                	mov    ebp,edx
c001f4a7:	58                   	pop    eax
c001f4a8:	ff 36                	push   DWORD PTR [esi]
c001f4aa:	e8 69 f4 ff ff       	call   c001e918 <Vm::fpu32ToInternal(unsigned int)>
c001f4af:	e9 a3 01 00 00       	jmp    c001f657 <Vm::x87Handler(regs*)+0x951>
c001f4b4:	80 fa 06             	cmp    dl,0x6
c001f4b7:	75 0f                	jne    c001f4c8 <Vm::x87Handler(regs*)+0x7c2>
c001f4b9:	83 ec 0c             	sub    esp,0xc
c001f4bc:	ff 36                	push   DWORD PTR [esi]
c001f4be:	e8 55 f4 ff ff       	call   c001e918 <Vm::fpu32ToInternal(unsigned int)>
c001f4c3:	e9 ae 01 00 00       	jmp    c001f676 <Vm::x87Handler(regs*)+0x970>
c001f4c8:	31 c0                	xor    eax,eax
c001f4ca:	80 fa 07             	cmp    dl,0x7
c001f4cd:	0f 85 94 02 00 00    	jne    c001f767 <Vm::x87Handler(regs*)+0xa61>
c001f4d3:	83 ec 0c             	sub    esp,0xc
c001f4d6:	6a 00                	push   0x0
c001f4d8:	e8 ec f6 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f4dd:	89 c7                	mov    edi,eax
c001f4df:	89 d5                	mov    ebp,edx
c001f4e1:	58                   	pop    eax
c001f4e2:	ff 36                	push   DWORD PTR [esi]
c001f4e4:	e8 2f f4 ff ff       	call   c001e918 <Vm::fpu32ToInternal(unsigned int)>
c001f4e9:	e9 cb 01 00 00       	jmp    c001f6b9 <Vm::x87Handler(regs*)+0x9b3>
c001f4ee:	80 fa 03             	cmp    dl,0x3
c001f4f1:	0f 85 d3 01 00 00    	jne    c001f6ca <Vm::x87Handler(regs*)+0x9c4>
c001f4f7:	e8 b8 f7 ff ff       	call   c001ecb4 <Vm::fpuPop()>
c001f4fc:	51                   	push   ecx
c001f4fd:	51                   	push   ecx
c001f4fe:	e9 de 01 00 00       	jmp    c001f6e1 <Vm::x87Handler(regs*)+0x9db>
c001f503:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f507:	80 fa 01             	cmp    dl,0x1
c001f50a:	75 09                	jne    c001f515 <Vm::x87Handler(regs*)+0x80f>
c001f50c:	57                   	push   edi
c001f50d:	57                   	push   edi
c001f50e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f510:	e9 e3 01 00 00       	jmp    c001f6f8 <Vm::x87Handler(regs*)+0x9f2>
c001f515:	80 fa 04             	cmp    dl,0x4
c001f518:	75 12                	jne    c001f52c <Vm::x87Handler(regs*)+0x826>
c001f51a:	31 d2                	xor    edx,edx
c001f51c:	51                   	push   ecx
c001f51d:	51                   	push   ecx
c001f51e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f520:	52                   	push   edx
c001f521:	50                   	push   eax
c001f522:	e8 d0 f4 ff ff       	call   c001e9f7 <Vm::fpuLongToFloat(long long)>
c001f527:	e9 ee 00 00 00       	jmp    c001f61a <Vm::x87Handler(regs*)+0x914>
c001f52c:	31 c0                	xor    eax,eax
c001f52e:	80 fa 07             	cmp    dl,0x7
c001f531:	0f 85 30 02 00 00    	jne    c001f767 <Vm::x87Handler(regs*)+0xa61>
c001f537:	83 ec 0c             	sub    esp,0xc
c001f53a:	6a 00                	push   0x0
c001f53c:	e8 88 f6 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f541:	89 c7                	mov    edi,eax
c001f543:	89 d5                	mov    ebp,edx
c001f545:	58                   	pop    eax
c001f546:	8b 06                	mov    eax,DWORD PTR [esi]
c001f548:	5a                   	pop    edx
c001f549:	31 d2                	xor    edx,edx
c001f54b:	52                   	push   edx
c001f54c:	50                   	push   eax
c001f54d:	e8 a5 f4 ff ff       	call   c001e9f7 <Vm::fpuLongToFloat(long long)>
c001f552:	e9 62 01 00 00       	jmp    c001f6b9 <Vm::x87Handler(regs*)+0x9b3>
c001f557:	84 d2                	test   dl,dl
c001f559:	75 0d                	jne    c001f568 <Vm::x87Handler(regs*)+0x862>
c001f55b:	31 d2                	xor    edx,edx
c001f55d:	55                   	push   ebp
c001f55e:	55                   	push   ebp
c001f55f:	8b 06                	mov    eax,DWORD PTR [esi]
c001f561:	52                   	push   edx
c001f562:	50                   	push   eax
c001f563:	e9 d3 01 00 00       	jmp    c001f73b <Vm::x87Handler(regs*)+0xa35>
c001f568:	31 c0                	xor    eax,eax
c001f56a:	80 fa 02             	cmp    dl,0x2
c001f56d:	0f 85 f4 01 00 00    	jne    c001f767 <Vm::x87Handler(regs*)+0xa61>
c001f573:	83 ec 0c             	sub    esp,0xc
c001f576:	6a 00                	push   0x0
c001f578:	e8 4c f6 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f57d:	59                   	pop    ecx
c001f57e:	5f                   	pop    edi
c001f57f:	e9 6a f9 ff ff       	jmp    c001eeee <Vm::x87Handler(regs*)+0x1e8>
c001f584:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f588:	84 d2                	test   dl,dl
c001f58a:	75 2a                	jne    c001f5b6 <Vm::x87Handler(regs*)+0x8b0>
c001f58c:	50                   	push   eax
c001f58d:	50                   	push   eax
c001f58e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f591:	ff 36                	push   DWORD PTR [esi]
c001f593:	e8 c5 f3 ff ff       	call   c001e95d <Vm::fpu64ToInternal(unsigned long long)>
c001f598:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f59f:	89 c6                	mov    esi,eax
c001f5a1:	89 d7                	mov    edi,edx
c001f5a3:	e8 21 f6 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f5a8:	57                   	push   edi
c001f5a9:	56                   	push   esi
c001f5aa:	52                   	push   edx
c001f5ab:	50                   	push   eax
c001f5ac:	e8 8e f5 ff ff       	call   c001eb3f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f5b1:	e9 64 01 00 00       	jmp    c001f71a <Vm::x87Handler(regs*)+0xa14>
c001f5b6:	80 fa 01             	cmp    dl,0x1
c001f5b9:	75 11                	jne    c001f5cc <Vm::x87Handler(regs*)+0x8c6>
c001f5bb:	50                   	push   eax
c001f5bc:	50                   	push   eax
c001f5bd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5c0:	ff 36                	push   DWORD PTR [esi]
c001f5c2:	e8 96 f3 ff ff       	call   c001e95d <Vm::fpu64ToInternal(unsigned long long)>
c001f5c7:	e9 35 01 00 00       	jmp    c001f701 <Vm::x87Handler(regs*)+0x9fb>
c001f5cc:	80 fa 02             	cmp    dl,0x2
c001f5cf:	0f 85 54 f9 ff ff    	jne    c001ef29 <Vm::x87Handler(regs*)+0x223>
c001f5d5:	55                   	push   ebp
c001f5d6:	55                   	push   ebp
c001f5d7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5da:	ff 36                	push   DWORD PTR [esi]
c001f5dc:	e8 7c f3 ff ff       	call   c001e95d <Vm::fpu64ToInternal(unsigned long long)>
c001f5e1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5e8:	89 c6                	mov    esi,eax
c001f5ea:	89 d7                	mov    edi,edx
c001f5ec:	e8 d8 f5 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f5f1:	57                   	push   edi
c001f5f2:	56                   	push   esi
c001f5f3:	52                   	push   edx
c001f5f4:	50                   	push   eax
c001f5f5:	e8 f2 f4 ff ff       	call   c001eaec <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f5fe:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f601:	83 c4 20             	add    esp,0x20
c001f604:	e9 74 f7 ff ff       	jmp    c001ed7d <Vm::x87Handler(regs*)+0x77>
c001f609:	80 fa 04             	cmp    dl,0x4
c001f60c:	75 2a                	jne    c001f638 <Vm::x87Handler(regs*)+0x932>
c001f60e:	51                   	push   ecx
c001f60f:	51                   	push   ecx
c001f610:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f613:	ff 36                	push   DWORD PTR [esi]
c001f615:	e8 43 f3 ff ff       	call   c001e95d <Vm::fpu64ToInternal(unsigned long long)>
c001f61a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f621:	89 c6                	mov    esi,eax
c001f623:	89 d7                	mov    edi,edx
c001f625:	e8 9f f5 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f62a:	57                   	push   edi
c001f62b:	56                   	push   esi
c001f62c:	52                   	push   edx
c001f62d:	50                   	push   eax
c001f62e:	e8 36 f5 ff ff       	call   c001eb69 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f633:	e9 e2 00 00 00       	jmp    c001f71a <Vm::x87Handler(regs*)+0xa14>
c001f638:	80 fa 05             	cmp    dl,0x5
c001f63b:	75 28                	jne    c001f665 <Vm::x87Handler(regs*)+0x95f>
c001f63d:	83 ec 0c             	sub    esp,0xc
c001f640:	6a 00                	push   0x0
c001f642:	e8 82 f5 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f647:	89 c7                	mov    edi,eax
c001f649:	89 d5                	mov    ebp,edx
c001f64b:	58                   	pop    eax
c001f64c:	5a                   	pop    edx
c001f64d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f650:	ff 36                	push   DWORD PTR [esi]
c001f652:	e8 06 f3 ff ff       	call   c001e95d <Vm::fpu64ToInternal(unsigned long long)>
c001f657:	83 c4 10             	add    esp,0x10
c001f65a:	55                   	push   ebp
c001f65b:	57                   	push   edi
c001f65c:	52                   	push   edx
c001f65d:	50                   	push   eax
c001f65e:	e8 06 f5 ff ff       	call   c001eb69 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f663:	eb 60                	jmp    c001f6c5 <Vm::x87Handler(regs*)+0x9bf>
c001f665:	80 fa 06             	cmp    dl,0x6
c001f668:	75 2a                	jne    c001f694 <Vm::x87Handler(regs*)+0x98e>
c001f66a:	51                   	push   ecx
c001f66b:	51                   	push   ecx
c001f66c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f66f:	ff 36                	push   DWORD PTR [esi]
c001f671:	e8 e7 f2 ff ff       	call   c001e95d <Vm::fpu64ToInternal(unsigned long long)>
c001f676:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f67d:	89 c6                	mov    esi,eax
c001f67f:	89 d7                	mov    edi,edx
c001f681:	e8 43 f5 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f686:	57                   	push   edi
c001f687:	56                   	push   esi
c001f688:	52                   	push   edx
c001f689:	50                   	push   eax
c001f68a:	e8 08 f5 ff ff       	call   c001eb97 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f68f:	e9 86 00 00 00       	jmp    c001f71a <Vm::x87Handler(regs*)+0xa14>
c001f694:	31 c0                	xor    eax,eax
c001f696:	80 fa 07             	cmp    dl,0x7
c001f699:	0f 85 c8 00 00 00    	jne    c001f767 <Vm::x87Handler(regs*)+0xa61>
c001f69f:	83 ec 0c             	sub    esp,0xc
c001f6a2:	6a 00                	push   0x0
c001f6a4:	e8 20 f5 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f6a9:	89 c7                	mov    edi,eax
c001f6ab:	89 d5                	mov    ebp,edx
c001f6ad:	58                   	pop    eax
c001f6ae:	5a                   	pop    edx
c001f6af:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f6b2:	ff 36                	push   DWORD PTR [esi]
c001f6b4:	e8 a4 f2 ff ff       	call   c001e95d <Vm::fpu64ToInternal(unsigned long long)>
c001f6b9:	83 c4 10             	add    esp,0x10
c001f6bc:	55                   	push   ebp
c001f6bd:	57                   	push   edi
c001f6be:	52                   	push   edx
c001f6bf:	50                   	push   eax
c001f6c0:	e8 d2 f4 ff ff       	call   c001eb97 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f6c5:	83 c4 0c             	add    esp,0xc
c001f6c8:	eb 53                	jmp    c001f71d <Vm::x87Handler(regs*)+0xa17>
c001f6ca:	31 c0                	xor    eax,eax
c001f6cc:	80 fa 02             	cmp    dl,0x2
c001f6cf:	0f 85 92 00 00 00    	jne    c001f767 <Vm::x87Handler(regs*)+0xa61>
c001f6d5:	83 ec 0c             	sub    esp,0xc
c001f6d8:	6a 00                	push   0x0
c001f6da:	e8 ea f4 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f6df:	59                   	pop    ecx
c001f6e0:	5f                   	pop    edi
c001f6e1:	52                   	push   edx
c001f6e2:	50                   	push   eax
c001f6e3:	e8 27 f2 ff ff       	call   c001e90f <Vm::fpuInternalTo64(unsigned long long)>
c001f6e8:	eb 70                	jmp    c001f75a <Vm::x87Handler(regs*)+0xa54>
c001f6ea:	31 c0                	xor    eax,eax
c001f6ec:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f6f1:	75 74                	jne    c001f767 <Vm::x87Handler(regs*)+0xa61>
c001f6f3:	50                   	push   eax
c001f6f4:	50                   	push   eax
c001f6f5:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f6f8:	31 d2                	xor    edx,edx
c001f6fa:	52                   	push   edx
c001f6fb:	50                   	push   eax
c001f6fc:	e8 f6 f2 ff ff       	call   c001e9f7 <Vm::fpuLongToFloat(long long)>
c001f701:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f708:	89 c6                	mov    esi,eax
c001f70a:	89 d7                	mov    edi,edx
c001f70c:	e8 b8 f4 ff ff       	call   c001ebc9 <Vm::fpuGetReg(int)>
c001f711:	57                   	push   edi
c001f712:	56                   	push   esi
c001f713:	52                   	push   edx
c001f714:	50                   	push   eax
c001f715:	e8 5e f4 ff ff       	call   c001eb78 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f71a:	83 c4 1c             	add    esp,0x1c
c001f71d:	52                   	push   edx
c001f71e:	50                   	push   eax
c001f71f:	6a 00                	push   0x0
c001f721:	e8 e6 f4 ff ff       	call   c001ec0c <Vm::fpuSetReg(int, unsigned long long)>
c001f726:	e9 f2 f7 ff ff       	jmp    c001ef1d <Vm::x87Handler(regs*)+0x217>
c001f72b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f72f:	80 fa 05             	cmp    dl,0x5
c001f732:	75 11                	jne    c001f745 <Vm::x87Handler(regs*)+0xa3f>
c001f734:	55                   	push   ebp
c001f735:	55                   	push   ebp
c001f736:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f739:	ff 36                	push   DWORD PTR [esi]
c001f73b:	e8 81 f2 ff ff       	call   c001e9c1 <Vm::fpuULongToFloat(unsigned long long)>
c001f740:	e9 cf f7 ff ff       	jmp    c001ef14 <Vm::x87Handler(regs*)+0x20e>
c001f745:	31 c0                	xor    eax,eax
c001f747:	80 fa 07             	cmp    dl,0x7
c001f74a:	75 1b                	jne    c001f767 <Vm::x87Handler(regs*)+0xa61>
c001f74c:	e8 63 f5 ff ff       	call   c001ecb4 <Vm::fpuPop()>
c001f751:	51                   	push   ecx
c001f752:	51                   	push   ecx
c001f753:	52                   	push   edx
c001f754:	50                   	push   eax
c001f755:	e8 0c f2 ff ff       	call   c001e966 <Vm::fpuFloatToLong(unsigned long long)>
c001f75a:	83 c4 10             	add    esp,0x10
c001f75d:	89 06                	mov    DWORD PTR [esi],eax
c001f75f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f762:	e9 f8 f7 ff ff       	jmp    c001ef5f <Vm::x87Handler(regs*)+0x259>
c001f767:	83 c4 1c             	add    esp,0x1c
c001f76a:	5b                   	pop    ebx
c001f76b:	5e                   	pop    esi
c001f76c:	5f                   	pop    edi
c001f76d:	5d                   	pop    ebp
c001f76e:	c3                   	ret    

c001f76f <__static_initialization_and_destruction_0(int, int)>:
c001f76f:	83 ec 0c             	sub    esp,0xc
c001f772:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f777:	75 1a                	jne    c001f793 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f779:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f781:	75 10                	jne    c001f793 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f783:	83 ec 0c             	sub    esp,0xc
c001f786:	68 40 e3 02 c0       	push   0xc002e340
c001f78b:	e8 a0 82 00 00       	call   c0027a30 <Vm::_FPUState::_FPUState()>
c001f790:	83 c4 10             	add    esp,0x10
c001f793:	90                   	nop
c001f794:	83 c4 0c             	add    esp,0xc
c001f797:	c3                   	ret    

c001f798 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f798:	83 ec 0c             	sub    esp,0xc
c001f79b:	83 ec 08             	sub    esp,0x8
c001f79e:	68 ff ff 00 00       	push   0xffff
c001f7a3:	6a 01                	push   0x1
c001f7a5:	e8 c5 ff ff ff       	call   c001f76f <__static_initialization_and_destruction_0(int, int)>
c001f7aa:	83 c4 10             	add    esp,0x10
c001f7ad:	83 c4 0c             	add    esp,0xc
c001f7b0:	c3                   	ret    
c001f7b1:	90                   	nop

c001f7b2 <FAT::getName()>:
c001f7b2:	b8 c4 b1 02 c0       	mov    eax,0xc002b1c4
c001f7b7:	c3                   	ret    

c001f7b8 <FAT::tell(void*, unsigned long long*)>:
c001f7b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f7bd:	75 06                	jne    c001f7c5 <FAT::tell(void*, unsigned long long*)+0xd>
c001f7bf:	b8 04 00 00 00       	mov    eax,0x4
c001f7c4:	c3                   	ret    
c001f7c5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f7ca:	75 06                	jne    c001f7d2 <FAT::tell(void*, unsigned long long*)+0x1a>
c001f7cc:	b8 04 00 00 00       	mov    eax,0x4
c001f7d1:	c3                   	ret    
c001f7d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7d6:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f7d9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f7dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7e0:	89 01                	mov    DWORD PTR [ecx],eax
c001f7e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f7e5:	b8 00 00 00 00       	mov    eax,0x0
c001f7ea:	c3                   	ret    
c001f7eb:	90                   	nop

c001f7ec <FAT::stat(void*, unsigned long long*)>:
c001f7ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f7f1:	75 06                	jne    c001f7f9 <FAT::stat(void*, unsigned long long*)+0xd>
c001f7f3:	b8 04 00 00 00       	mov    eax,0x4
c001f7f8:	c3                   	ret    
c001f7f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f7fe:	75 06                	jne    c001f806 <FAT::stat(void*, unsigned long long*)+0x1a>
c001f800:	b8 04 00 00 00       	mov    eax,0x4
c001f805:	c3                   	ret    
c001f806:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f80a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f80d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f810:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f814:	89 01                	mov    DWORD PTR [ecx],eax
c001f816:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f819:	b8 00 00 00 00       	mov    eax,0x0
c001f81e:	c3                   	ret    
c001f81f:	90                   	nop

c001f820 <FAT::~FAT()>:
c001f820:	83 ec 0c             	sub    esp,0xc
c001f823:	ba 48 b2 02 c0       	mov    edx,0xc002b248
c001f828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82c:	89 10                	mov    DWORD PTR [eax],edx
c001f82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f832:	83 ec 0c             	sub    esp,0xc
c001f835:	50                   	push   eax
c001f836:	e8 c3 33 ff ff       	call   c0012bfe <Filesystem::~Filesystem()>
c001f83b:	83 c4 10             	add    esp,0x10
c001f83e:	90                   	nop
c001f83f:	83 c4 0c             	add    esp,0xc
c001f842:	c3                   	ret    
c001f843:	90                   	nop

c001f844 <FAT::~FAT()>:
c001f844:	83 ec 0c             	sub    esp,0xc
c001f847:	83 ec 0c             	sub    esp,0xc
c001f84a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f84e:	e8 cd ff ff ff       	call   c001f820 <FAT::~FAT()>
c001f853:	83 c4 10             	add    esp,0x10
c001f856:	83 ec 08             	sub    esp,0x8
c001f859:	6a 08                	push   0x8
c001f85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f85f:	e8 91 2f ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c001f864:	83 c4 10             	add    esp,0x10
c001f867:	83 c4 0c             	add    esp,0xc
c001f86a:	c3                   	ret    
c001f86b:	90                   	nop

c001f86c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f86c:	83 ec 1c             	sub    esp,0x1c
c001f86f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f876:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f87b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f87f:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c001f886:	83 f8 ff             	cmp    eax,0xffffffff
c001f889:	75 34                	jne    c001f8bf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f88b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f88f:	88 c2                	mov    dl,al
c001f891:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001f896:	01 d0                	add    eax,edx
c001f898:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f89c:	8b 15 a0 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a0
c001f8a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f8a6:	89 14 85 c0 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c40],edx
c001f8ad:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001f8b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f8b6:	89 14 85 40 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1bc0],edx
c001f8bd:	eb 17                	jmp    c001f8d6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f8bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f8c3:	88 c2                	mov    dl,al
c001f8c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f8c9:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c001f8d0:	01 d0                	add    eax,edx
c001f8d2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f8d6:	83 ec 04             	sub    esp,0x4
c001f8d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f8dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f8e1:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f8e5:	50                   	push   eax
c001f8e6:	e8 36 72 fe ff       	call   c0006b21 <f_getlabel>
c001f8eb:	83 c4 10             	add    esp,0x10
c001f8ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f8f2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f8f7:	75 07                	jne    c001f900 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f8f9:	b8 00 00 00 00       	mov    eax,0x0
c001f8fe:	eb 05                	jmp    c001f905 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f900:	b8 01 00 00 00       	mov    eax,0x1
c001f905:	83 c4 1c             	add    esp,0x1c
c001f908:	c3                   	ret    
c001f909:	90                   	nop

c001f90a <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f90a:	57                   	push   edi
c001f90b:	83 ec 58             	sub    esp,0x58
c001f90e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f916:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f91a:	b9 0f 00 00 00       	mov    ecx,0xf
c001f91f:	b8 00 00 00 00       	mov    eax,0x0
c001f924:	fc                   	cld    
c001f925:	89 d7                	mov    edi,edx
c001f927:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f929:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f92d:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c001f934:	83 f8 ff             	cmp    eax,0xffffffff
c001f937:	75 34                	jne    c001f96d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f939:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f93d:	88 c2                	mov    dl,al
c001f93f:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001f944:	01 d0                	add    eax,edx
c001f946:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f94a:	8b 15 a0 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a0
c001f950:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f954:	89 14 85 c0 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c40],edx
c001f95b:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001f960:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f964:	89 14 85 40 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1bc0],edx
c001f96b:	eb 17                	jmp    c001f984 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f96d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f971:	88 c2                	mov    dl,al
c001f973:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f977:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c001f97e:	01 d0                	add    eax,edx
c001f980:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f984:	83 ec 08             	sub    esp,0x8
c001f987:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f98b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f98f:	50                   	push   eax
c001f990:	e8 85 0e fe ff       	call   c000081a <strcat>
c001f995:	83 c4 10             	add    esp,0x10
c001f998:	83 ec 0c             	sub    esp,0xc
c001f99b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f99f:	50                   	push   eax
c001f9a0:	e8 6a 73 fe ff       	call   c0006d0f <f_setlabel>
c001f9a5:	83 c4 10             	add    esp,0x10
c001f9a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f9ac:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f9b1:	75 07                	jne    c001f9ba <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f9b3:	b8 00 00 00 00       	mov    eax,0x0
c001f9b8:	eb 05                	jmp    c001f9bf <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f9ba:	b8 01 00 00 00       	mov    eax,0x1
c001f9bf:	83 c4 58             	add    esp,0x58
c001f9c2:	5f                   	pop    edi
c001f9c3:	c3                   	ret    

c001f9c4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f9c4:	83 ec 2c             	sub    esp,0x2c
c001f9c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f9cf:	83 ec 08             	sub    esp,0x8
c001f9d2:	68 e8 b1 02 c0       	push   0xc002b1e8
c001f9d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f9db:	e8 d4 0d fe ff       	call   c00007b4 <strcmp>
c001f9e0:	83 c4 10             	add    esp,0x10
c001f9e3:	85 c0                	test   eax,eax
c001f9e5:	0f 94 c0             	sete   al
c001f9e8:	84 c0                	test   al,al
c001f9ea:	74 0d                	je     c001f9f9 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f9ec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f9f4:	e9 a6 00 00 00       	jmp    c001fa9f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f9f9:	83 ec 08             	sub    esp,0x8
c001f9fc:	68 da b1 02 c0       	push   0xc002b1da
c001fa01:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa05:	e8 aa 0d fe ff       	call   c00007b4 <strcmp>
c001fa0a:	83 c4 10             	add    esp,0x10
c001fa0d:	85 c0                	test   eax,eax
c001fa0f:	0f 94 c0             	sete   al
c001fa12:	84 c0                	test   al,al
c001fa14:	74 0a                	je     c001fa20 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fa16:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fa1e:	eb 7f                	jmp    c001fa9f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fa20:	83 ec 08             	sub    esp,0x8
c001fa23:	68 e0 b1 02 c0       	push   0xc002b1e0
c001fa28:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa2c:	e8 83 0d fe ff       	call   c00007b4 <strcmp>
c001fa31:	83 c4 10             	add    esp,0x10
c001fa34:	85 c0                	test   eax,eax
c001fa36:	0f 94 c0             	sete   al
c001fa39:	84 c0                	test   al,al
c001fa3b:	74 0a                	je     c001fa47 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fa3d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fa45:	eb 58                	jmp    c001fa9f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fa47:	83 ec 08             	sub    esp,0x8
c001fa4a:	68 4c 81 02 c0       	push   0xc002814c
c001fa4f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa53:	e8 5c 0d fe ff       	call   c00007b4 <strcmp>
c001fa58:	83 c4 10             	add    esp,0x10
c001fa5b:	85 c0                	test   eax,eax
c001fa5d:	0f 94 c0             	sete   al
c001fa60:	84 c0                	test   al,al
c001fa62:	74 0a                	je     c001fa6e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001fa64:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001fa6c:	eb 31                	jmp    c001fa9f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fa6e:	83 ec 08             	sub    esp,0x8
c001fa71:	68 e6 b1 02 c0       	push   0xc002b1e6
c001fa76:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa7a:	e8 35 0d fe ff       	call   c00007b4 <strcmp>
c001fa7f:	83 c4 10             	add    esp,0x10
c001fa82:	85 c0                	test   eax,eax
c001fa84:	0f 94 c0             	sete   al
c001fa87:	84 c0                	test   al,al
c001fa89:	74 0a                	je     c001fa95 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001fa8b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001fa93:	eb 0a                	jmp    c001fa9f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fa95:	b8 08 00 00 00       	mov    eax,0x8
c001fa9a:	e9 04 01 00 00       	jmp    c001fba3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fa9f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001faa6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001faab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001faaf:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c001fab6:	83 f8 ff             	cmp    eax,0xffffffff
c001fab9:	75 34                	jne    c001faef <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001fabb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fabf:	88 c2                	mov    dl,al
c001fac1:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001fac6:	01 d0                	add    eax,edx
c001fac8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001facc:	8b 15 a0 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a0
c001fad2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fad6:	89 14 85 c0 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c40],edx
c001fadd:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001fae2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001fae6:	89 14 85 40 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1bc0],edx
c001faed:	eb 17                	jmp    c001fb06 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001faef:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001faf3:	88 c2                	mov    dl,al
c001faf5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001faf9:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c001fb00:	01 d0                	add    eax,edx
c001fb02:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fb06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb0a:	88 04 24             	mov    BYTE PTR [esp],al
c001fb0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001fb11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb15:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001fb1d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001fb22:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fb2a:	83 ec 0c             	sub    esp,0xc
c001fb2d:	68 00 20 00 00       	push   0x2000
c001fb32:	e8 ed fa fe ff       	call   c000f624 <malloc>
c001fb37:	83 c4 10             	add    esp,0x10
c001fb3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fb3e:	68 00 20 00 00       	push   0x2000
c001fb43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb47:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb4b:	50                   	push   eax
c001fb4c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001fb50:	50                   	push   eax
c001fb51:	e8 04 76 fe ff       	call   c000715a <f_mkfs>
c001fb56:	83 c4 10             	add    esp,0x10
c001fb59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fb5d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb62:	75 07                	jne    c001fb6b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001fb64:	b8 00 00 00 00       	mov    eax,0x0
c001fb69:	eb 38                	jmp    c001fba3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fb6b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001fb70:	75 17                	jne    c001fb89 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	68 18 b2 02 c0       	push   0xc002b218
c001fb7a:	e8 56 2d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001fb7f:	83 c4 10             	add    esp,0x10
c001fb82:	b8 09 00 00 00       	mov    eax,0x9
c001fb87:	eb 1a                	jmp    c001fba3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fb89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb8d:	83 ec 08             	sub    esp,0x8
c001fb90:	50                   	push   eax
c001fb91:	68 ec b1 02 c0       	push   0xc002b1ec
c001fb96:	e8 3a 2d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001fb9b:	83 c4 10             	add    esp,0x10
c001fb9e:	b8 01 00 00 00       	mov    eax,0x1
c001fba3:	83 c4 2c             	add    esp,0x2c
c001fba6:	c3                   	ret    
c001fba7:	90                   	nop

c001fba8 <FAT::tryMount(LogicalDisk*, int)>:
c001fba8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001fbae:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001fbb3:	83 f8 14             	cmp    eax,0x14
c001fbb6:	75 17                	jne    c001fbcf <FAT::tryMount(LogicalDisk*, int)+0x27>
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	68 fe b1 02 c0       	push   0xc002b1fe
c001fbc0:	e8 fe 9e ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c001fbc5:	83 c4 10             	add    esp,0x10
c001fbc8:	b0 00                	mov    al,0x0
c001fbca:	e9 d7 01 00 00       	jmp    c001fda6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fbcf:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001fbd6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fbdc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fbe2:	3d 00 02 00 00       	cmp    eax,0x200
c001fbe7:	74 07                	je     c001fbf0 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001fbe9:	b0 00                	mov    al,0x0
c001fbeb:	e9 b6 01 00 00       	jmp    c001fda6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fbf0:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001fbf8:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fbff:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c001fc06:	83 f8 ff             	cmp    eax,0xffffffff
c001fc09:	74 07                	je     c001fc12 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001fc0b:	b0 01                	mov    al,0x1
c001fc0d:	e9 94 01 00 00       	jmp    c001fda6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fc12:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001fc1c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001fc24:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001fc2b:	88 c2                	mov    dl,al
c001fc2d:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001fc32:	01 d0                	add    eax,edx
c001fc34:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001fc3b:	8b 15 a0 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a0
c001fc41:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fc48:	89 14 85 c0 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c40],edx
c001fc4f:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001fc54:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001fc5b:	89 14 85 40 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1bc0],edx
c001fc62:	83 ec 0c             	sub    esp,0xc
c001fc65:	68 54 02 00 00       	push   0x254
c001fc6a:	e8 b5 f9 fe ff       	call   c000f624 <malloc>
c001fc6f:	83 c4 10             	add    esp,0x10
c001fc72:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001fc79:	83 ec 04             	sub    esp,0x4
c001fc7c:	6a 00                	push   0x0
c001fc7e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fc85:	50                   	push   eax
c001fc86:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fc8d:	e8 86 50 fe ff       	call   c0004d18 <f_mount>
c001fc92:	83 c4 10             	add    esp,0x10
c001fc95:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fc9c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001fca4:	74 19                	je     c001fcbf <FAT::tryMount(LogicalDisk*, int)+0x117>
c001fca6:	83 ec 0c             	sub    esp,0xc
c001fca9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fcb0:	e8 8f f9 fe ff       	call   c000f644 <rfree>
c001fcb5:	83 c4 10             	add    esp,0x10
c001fcb8:	b0 00                	mov    al,0x0
c001fcba:	e9 e7 00 00 00       	jmp    c001fda6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fcbf:	83 ec 04             	sub    esp,0x4
c001fcc2:	68 00 01 00 00       	push   0x100
c001fcc7:	6a 00                	push   0x0
c001fcc9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fcd0:	50                   	push   eax
c001fcd1:	e8 ee 09 fe ff       	call   c00006c4 <memset>
c001fcd6:	83 c4 10             	add    esp,0x10
c001fcd9:	83 ec 08             	sub    esp,0x8
c001fcdc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fce3:	50                   	push   eax
c001fce4:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fceb:	50                   	push   eax
c001fcec:	e8 29 0b fe ff       	call   c000081a <strcat>
c001fcf1:	83 c4 10             	add    esp,0x10
c001fcf4:	83 ec 08             	sub    esp,0x8
c001fcf7:	68 0c b2 02 c0       	push   0xc002b20c
c001fcfc:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fd03:	50                   	push   eax
c001fd04:	e8 11 0b fe ff       	call   c000081a <strcat>
c001fd09:	83 c4 10             	add    esp,0x10
c001fd0c:	83 ec 04             	sub    esp,0x4
c001fd0f:	6a 01                	push   0x1
c001fd11:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001fd18:	50                   	push   eax
c001fd19:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fd1d:	50                   	push   eax
c001fd1e:	e8 57 50 fe ff       	call   c0004d7a <f_open>
c001fd23:	83 c4 10             	add    esp,0x10
c001fd26:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fd2d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fd34:	85 c0                	test   eax,eax
c001fd36:	74 0a                	je     c001fd42 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fd38:	78 2d                	js     c001fd67 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fd3a:	83 e8 04             	sub    eax,0x4
c001fd3d:	83 f8 01             	cmp    eax,0x1
c001fd40:	77 25                	ja     c001fd67 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fd42:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001fd4a:	83 ec 0c             	sub    esp,0xc
c001fd4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fd51:	50                   	push   eax
c001fd52:	e8 75 5b fe ff       	call   c00058cc <f_close>
c001fd57:	83 c4 10             	add    esp,0x10
c001fd5a:	90                   	nop
c001fd5b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fd63:	74 3a                	je     c001fd9f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fd65:	eb 2d                	jmp    c001fd94 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001fd67:	83 ec 0c             	sub    esp,0xc
c001fd6a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fd71:	e8 ce f8 fe ff       	call   c000f644 <rfree>
c001fd76:	83 c4 10             	add    esp,0x10
c001fd79:	83 ec 04             	sub    esp,0x4
c001fd7c:	6a 00                	push   0x0
c001fd7e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fd85:	50                   	push   eax
c001fd86:	6a 00                	push   0x0
c001fd88:	e8 8b 4f fe ff       	call   c0004d18 <f_mount>
c001fd8d:	83 c4 10             	add    esp,0x10
c001fd90:	b0 00                	mov    al,0x0
c001fd92:	eb 12                	jmp    c001fda6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fd94:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001fd99:	40                   	inc    eax
c001fd9a:	a3 a0 e3 02 c0       	mov    ds:0xc002e3a0,eax
c001fd9f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fda6:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fdac:	c3                   	ret    
c001fdad:	90                   	nop

c001fdae <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fdae:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fdb4:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fdbc:	74 0a                	je     c001fdc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fdbe:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fdc6:	75 0a                	jne    c001fdd2 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fdc8:	b8 04 00 00 00       	mov    eax,0x4
c001fdcd:	e9 db 00 00 00       	jmp    c001fead <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fdd2:	83 ec 08             	sub    esp,0x8
c001fdd5:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fddc:	50                   	push   eax
c001fddd:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fde4:	e8 ed 60 fe ff       	call   c0005ed6 <f_readdir>
c001fde9:	83 c4 10             	add    esp,0x10
c001fdec:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fdf3:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fdf9:	83 ec 0c             	sub    esp,0xc
c001fdfc:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fe03:	83 c0 1a             	add    eax,0x1a
c001fe06:	50                   	push   eax
c001fe07:	e8 d5 08 fe ff       	call   c00006e1 <strlen>
c001fe0c:	83 c4 10             	add    esp,0x10
c001fe0f:	ba 00 00 00 00       	mov    edx,0x0
c001fe14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fe18:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fe1c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001fe23:	0f b6 c0             	movzx  eax,al
c001fe26:	83 e0 10             	and    eax,0x10
c001fe29:	74 07                	je     c001fe32 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001fe2b:	b8 02 00 00 00       	mov    eax,0x2
c001fe30:	eb 05                	jmp    c001fe37 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001fe32:	b8 01 00 00 00       	mov    eax,0x1
c001fe37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe3b:	83 ec 08             	sub    esp,0x8
c001fe3e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fe45:	83 c0 1a             	add    eax,0x1a
c001fe48:	50                   	push   eax
c001fe49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fe4d:	83 c0 10             	add    eax,0x10
c001fe50:	50                   	push   eax
c001fe51:	e8 0d 09 fe ff       	call   c0000763 <strcpy>
c001fe56:	83 c4 10             	add    esp,0x10
c001fe59:	83 ec 04             	sub    esp,0x4
c001fe5c:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fe63:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fe67:	50                   	push   eax
c001fe68:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fe6f:	e8 2c 08 fe ff       	call   c00006a0 <memcpy>
c001fe74:	83 c4 10             	add    esp,0x10
c001fe77:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fe7e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fe84:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fe8b:	84 c0                	test   al,al
c001fe8d:	75 07                	jne    c001fe96 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fe8f:	b8 07 00 00 00       	mov    eax,0x7
c001fe94:	eb 17                	jmp    c001fead <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fe96:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fe9d:	85 c0                	test   eax,eax
c001fe9f:	75 07                	jne    c001fea8 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fea1:	b8 00 00 00 00       	mov    eax,0x0
c001fea6:	eb 05                	jmp    c001fead <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fea8:	b8 01 00 00 00       	mov    eax,0x1
c001fead:	81 c4 3c 02 00 00    	add    esp,0x23c
c001feb3:	c3                   	ret    

c001feb4 <FAT::read(void*, unsigned long, void*, int*)>:
c001feb4:	83 ec 1c             	sub    esp,0x1c
c001feb7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001febc:	74 07                	je     c001fec5 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001febe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fec3:	75 07                	jne    c001fecc <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fec5:	b8 04 00 00 00       	mov    eax,0x4
c001feca:	eb 3d                	jmp    c001ff09 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fecc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fed0:	50                   	push   eax
c001fed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fed5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fed9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fedd:	e8 d4 52 fe ff       	call   c00051b6 <f_read>
c001fee2:	83 c4 10             	add    esp,0x10
c001fee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001feed:	89 c2                	mov    edx,eax
c001feef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fef3:	89 10                	mov    DWORD PTR [eax],edx
c001fef5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fef9:	85 c0                	test   eax,eax
c001fefb:	75 07                	jne    c001ff04 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fefd:	b8 00 00 00 00       	mov    eax,0x0
c001ff02:	eb 05                	jmp    c001ff09 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ff04:	b8 01 00 00 00       	mov    eax,0x1
c001ff09:	83 c4 1c             	add    esp,0x1c
c001ff0c:	c3                   	ret    
c001ff0d:	90                   	nop

c001ff0e <FAT::write(void*, unsigned long, void*, int*)>:
c001ff0e:	83 ec 1c             	sub    esp,0x1c
c001ff11:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ff16:	74 07                	je     c001ff1f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001ff18:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ff1d:	75 07                	jne    c001ff26 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001ff1f:	b8 04 00 00 00       	mov    eax,0x4
c001ff24:	eb 3d                	jmp    c001ff63 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ff26:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ff2a:	50                   	push   eax
c001ff2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ff2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ff37:	e8 fa 54 fe ff       	call   c0005436 <f_write>
c001ff3c:	83 c4 10             	add    esp,0x10
c001ff3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff47:	89 c2                	mov    edx,eax
c001ff49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ff4d:	89 10                	mov    DWORD PTR [eax],edx
c001ff4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff53:	85 c0                	test   eax,eax
c001ff55:	75 07                	jne    c001ff5e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001ff57:	b8 00 00 00 00       	mov    eax,0x0
c001ff5c:	eb 05                	jmp    c001ff63 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ff5e:	b8 01 00 00 00       	mov    eax,0x1
c001ff63:	83 c4 1c             	add    esp,0x1c
c001ff66:	c3                   	ret    
c001ff67:	90                   	nop

c001ff68 <FAT::close(void*)>:
c001ff68:	83 ec 1c             	sub    esp,0x1c
c001ff6b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ff70:	75 07                	jne    c001ff79 <FAT::close(void*)+0x11>
c001ff72:	b8 04 00 00 00       	mov    eax,0x4
c001ff77:	eb 36                	jmp    c001ffaf <FAT::close(void*)+0x47>
c001ff79:	83 ec 0c             	sub    esp,0xc
c001ff7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ff80:	e8 47 59 fe ff       	call   c00058cc <f_close>
c001ff85:	83 c4 10             	add    esp,0x10
c001ff88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff8c:	83 ec 0c             	sub    esp,0xc
c001ff8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ff93:	e8 9c f6 fe ff       	call   c000f634 <free>
c001ff98:	83 c4 10             	add    esp,0x10
c001ff9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff9f:	85 c0                	test   eax,eax
c001ffa1:	75 07                	jne    c001ffaa <FAT::close(void*)+0x42>
c001ffa3:	b8 00 00 00 00       	mov    eax,0x0
c001ffa8:	eb 05                	jmp    c001ffaf <FAT::close(void*)+0x47>
c001ffaa:	b8 01 00 00 00       	mov    eax,0x1
c001ffaf:	83 c4 1c             	add    esp,0x1c
c001ffb2:	c3                   	ret    
c001ffb3:	90                   	nop

c001ffb4 <FAT::closeDir(void*)>:
c001ffb4:	83 ec 1c             	sub    esp,0x1c
c001ffb7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ffbc:	75 07                	jne    c001ffc5 <FAT::closeDir(void*)+0x11>
c001ffbe:	b8 04 00 00 00       	mov    eax,0x4
c001ffc3:	eb 36                	jmp    c001fffb <FAT::closeDir(void*)+0x47>
c001ffc5:	83 ec 0c             	sub    esp,0xc
c001ffc8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ffcc:	e8 e3 5e fe ff       	call   c0005eb4 <f_closedir>
c001ffd1:	83 c4 10             	add    esp,0x10
c001ffd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ffd8:	83 ec 0c             	sub    esp,0xc
c001ffdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ffdf:	e8 50 f6 fe ff       	call   c000f634 <free>
c001ffe4:	83 c4 10             	add    esp,0x10
c001ffe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ffeb:	85 c0                	test   eax,eax
c001ffed:	75 07                	jne    c001fff6 <FAT::closeDir(void*)+0x42>
c001ffef:	b8 00 00 00 00       	mov    eax,0x0
c001fff4:	eb 05                	jmp    c001fffb <FAT::closeDir(void*)+0x47>
c001fff6:	b8 01 00 00 00       	mov    eax,0x1
c001fffb:	83 c4 1c             	add    esp,0x1c
c001fffe:	c3                   	ret    
c001ffff:	90                   	nop

c0020000 <FAT::seek(void*, unsigned long long)>:
c0020000:	83 ec 2c             	sub    esp,0x2c
c0020003:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020007:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002000b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002000f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020013:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020018:	75 07                	jne    c0020021 <FAT::seek(void*, unsigned long long)+0x21>
c002001a:	b8 04 00 00 00       	mov    eax,0x4
c002001f:	eb 2f                	jmp    c0020050 <FAT::seek(void*, unsigned long long)+0x50>
c0020021:	83 ec 04             	sub    esp,0x4
c0020024:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020028:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002002c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020030:	e8 c6 58 fe ff       	call   c00058fb <f_lseek>
c0020035:	83 c4 10             	add    esp,0x10
c0020038:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002003c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020040:	85 c0                	test   eax,eax
c0020042:	75 07                	jne    c002004b <FAT::seek(void*, unsigned long long)+0x4b>
c0020044:	b8 00 00 00 00       	mov    eax,0x0
c0020049:	eb 05                	jmp    c0020050 <FAT::seek(void*, unsigned long long)+0x50>
c002004b:	b8 01 00 00 00       	mov    eax,0x1
c0020050:	83 c4 2c             	add    esp,0x2c
c0020053:	c3                   	ret    

c0020054 <fatWrapperReadDisk>:
c0020054:	83 ec 1c             	sub    esp,0x1c
c0020057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002005b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002005f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020063:	89 04 24             	mov    DWORD PTR [esp],eax
c0020066:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002006a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002006e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020073:	8b 04 85 a0 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2c60]
c002007a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002007e:	83 ec 0c             	sub    esp,0xc
c0020081:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020085:	52                   	push   edx
c0020086:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002008a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002008e:	50                   	push   eax
c002008f:	e8 06 5f ff ff       	call   c0015f9a <LogicalDisk::read(unsigned long long, int, void*)>
c0020094:	83 c4 20             	add    esp,0x20
c0020097:	83 c4 1c             	add    esp,0x1c
c002009a:	c3                   	ret    

c002009b <fatWrapperWriteDisk>:
c002009b:	83 ec 1c             	sub    esp,0x1c
c002009e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00200a2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00200a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00200aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00200ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00200b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00200b5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00200ba:	8b 04 85 a0 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2c60]
c00200c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00200c5:	83 ec 0c             	sub    esp,0xc
c00200c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00200cc:	52                   	push   edx
c00200cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00200d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00200d5:	50                   	push   eax
c00200d6:	e8 2b 5f ff ff       	call   c0016006 <LogicalDisk::write(unsigned long long, int, void*)>
c00200db:	83 c4 20             	add    esp,0x20
c00200de:	83 c4 1c             	add    esp,0x1c
c00200e1:	c3                   	ret    

c00200e2 <fatWrapperIoctl>:
c00200e2:	53                   	push   ebx
c00200e3:	83 ec 28             	sub    esp,0x28
c00200e6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00200ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00200ee:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00200f2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00200f6:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00200fb:	75 31                	jne    c002012e <fatWrapperIoctl+0x4c>
c00200fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020101:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020105:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002010a:	8b 04 85 a0 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2c60]
c0020111:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020117:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002011d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020121:	66 89 02             	mov    WORD PTR [edx],ax
c0020124:	b8 00 00 00 00       	mov    eax,0x0
c0020129:	e9 b2 00 00 00       	jmp    c00201e0 <fatWrapperIoctl+0xfe>
c002012e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020133:	75 6a                	jne    c002019f <fatWrapperIoctl+0xbd>
c0020135:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020139:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002013d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020142:	8b 04 85 a0 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2c60]
c0020149:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002014f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020155:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002015b:	89 c8                	mov    eax,ecx
c002015d:	89 da                	mov    edx,ebx
c002015f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020163:	c1 e0 0a             	shl    eax,0xa
c0020166:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002016b:	8b 0c 8d a0 d3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2c60]
c0020172:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020178:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002017e:	89 cb                	mov    ebx,ecx
c0020180:	c1 fb 1f             	sar    ebx,0x1f
c0020183:	53                   	push   ebx
c0020184:	51                   	push   ecx
c0020185:	52                   	push   edx
c0020186:	50                   	push   eax
c0020187:	e8 50 55 00 00       	call   c00256dc <__udivdi3>
c002018c:	83 c4 10             	add    esp,0x10
c002018f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020193:	89 01                	mov    DWORD PTR [ecx],eax
c0020195:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020198:	b8 00 00 00 00       	mov    eax,0x0
c002019d:	eb 41                	jmp    c00201e0 <fatWrapperIoctl+0xfe>
c002019f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00201a4:	75 07                	jne    c00201ad <fatWrapperIoctl+0xcb>
c00201a6:	b8 00 00 00 00       	mov    eax,0x0
c00201ab:	eb 33                	jmp    c00201e0 <fatWrapperIoctl+0xfe>
c00201ad:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00201b2:	75 19                	jne    c00201cd <fatWrapperIoctl+0xeb>
c00201b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00201c0:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00201c6:	b8 00 00 00 00       	mov    eax,0x0
c00201cb:	eb 13                	jmp    c00201e0 <fatWrapperIoctl+0xfe>
c00201cd:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00201d2:	75 07                	jne    c00201db <fatWrapperIoctl+0xf9>
c00201d4:	b8 00 00 00 00       	mov    eax,0x0
c00201d9:	eb 05                	jmp    c00201e0 <fatWrapperIoctl+0xfe>
c00201db:	b8 04 00 00 00       	mov    eax,0x4
c00201e0:	83 c4 28             	add    esp,0x28
c00201e3:	5b                   	pop    ebx
c00201e4:	c3                   	ret    
c00201e5:	90                   	nop

c00201e6 <FAT::FAT()>:
c00201e6:	83 ec 1c             	sub    esp,0x1c
c00201e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00201ed:	83 ec 0c             	sub    esp,0xc
c00201f0:	50                   	push   eax
c00201f1:	e8 e4 29 ff ff       	call   c0012bda <Filesystem::Filesystem()>
c00201f6:	83 c4 10             	add    esp,0x10
c00201f9:	ba 48 b2 02 c0       	mov    edx,0xc002b248
c00201fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020202:	89 10                	mov    DWORD PTR [eax],edx
c0020204:	c7 05 a0 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3a0,0x0
c002020e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020216:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002021b:	7f 15                	jg     c0020232 <FAT::FAT()+0x4c>
c002021d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020221:	c7 04 85 c0 e3 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1c40],0xffffffff
c002022c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020230:	eb e4                	jmp    c0020216 <FAT::FAT()+0x30>
c0020232:	90                   	nop
c0020233:	83 c4 1c             	add    esp,0x1c
c0020236:	c3                   	ret    
c0020237:	90                   	nop

c0020238 <FAT::fixFilepath(char*)>:
c0020238:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002023c:	8a 00                	mov    al,BYTE PTR [eax]
c002023e:	3c 40                	cmp    al,0x40
c0020240:	7e 2c                	jle    c002026e <FAT::fixFilepath(char*)+0x36>
c0020242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020246:	8a 00                	mov    al,BYTE PTR [eax]
c0020248:	83 e8 41             	sub    eax,0x41
c002024b:	88 c2                	mov    dl,al
c002024d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020251:	88 10                	mov    BYTE PTR [eax],dl
c0020253:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020257:	8a 00                	mov    al,BYTE PTR [eax]
c0020259:	0f be c0             	movsx  eax,al
c002025c:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c0020263:	83 c0 30             	add    eax,0x30
c0020266:	88 c2                	mov    dl,al
c0020268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002026c:	88 10                	mov    BYTE PTR [eax],dl
c002026e:	90                   	nop
c002026f:	c3                   	ret    

c0020270 <FAT::open(char const*, void**, FileOpenMode)>:
c0020270:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020276:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002027e:	74 0a                	je     c002028a <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020280:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020288:	75 0a                	jne    c0020294 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002028a:	b8 04 00 00 00       	mov    eax,0x4
c002028f:	e9 fd 00 00 00       	jmp    c0020391 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020294:	83 ec 08             	sub    esp,0x8
c0020297:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002029e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00202a2:	50                   	push   eax
c00202a3:	e8 bb 04 fe ff       	call   c0000763 <strcpy>
c00202a8:	83 c4 10             	add    esp,0x10
c00202ab:	83 ec 08             	sub    esp,0x8
c00202ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c00202b2:	50                   	push   eax
c00202b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00202ba:	e8 79 ff ff ff       	call   c0020238 <FAT::fixFilepath(char*)>
c00202bf:	83 c4 10             	add    esp,0x10
c00202c2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00202ca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00202d1:	83 e0 01             	and    eax,0x1
c00202d4:	74 08                	je     c00202de <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00202d6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00202de:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00202e5:	83 e0 04             	and    eax,0x4
c00202e8:	74 10                	je     c00202fa <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00202ea:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00202f2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00202fa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020301:	83 e0 02             	and    eax,0x2
c0020304:	74 08                	je     c002030e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020306:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002030e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020315:	83 e0 08             	and    eax,0x8
c0020318:	74 08                	je     c0020322 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002031a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020322:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020329:	83 e0 10             	and    eax,0x10
c002032c:	74 08                	je     c0020336 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002032e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020336:	83 ec 0c             	sub    esp,0xc
c0020339:	68 50 02 00 00       	push   0x250
c002033e:	e8 e1 f2 fe ff       	call   c000f624 <malloc>
c0020343:	83 c4 10             	add    esp,0x10
c0020346:	89 c2                	mov    edx,eax
c0020348:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002034f:	89 10                	mov    DWORD PTR [eax],edx
c0020351:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020359:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020360:	8b 00                	mov    eax,DWORD PTR [eax]
c0020362:	83 ec 04             	sub    esp,0x4
c0020365:	52                   	push   edx
c0020366:	8d 54 24 10          	lea    edx,[esp+0x10]
c002036a:	52                   	push   edx
c002036b:	50                   	push   eax
c002036c:	e8 09 4a fe ff       	call   c0004d7a <f_open>
c0020371:	83 c4 10             	add    esp,0x10
c0020374:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002037b:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020383:	74 07                	je     c002038c <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020385:	b8 01 00 00 00       	mov    eax,0x1
c002038a:	eb 05                	jmp    c0020391 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002038c:	b8 00 00 00 00       	mov    eax,0x0
c0020391:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020397:	c3                   	ret    

c0020398 <FAT::openDir(char const*, void**)>:
c0020398:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002039e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00203a6:	74 0a                	je     c00203b2 <FAT::openDir(char const*, void**)+0x1a>
c00203a8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00203b0:	75 07                	jne    c00203b9 <FAT::openDir(char const*, void**)+0x21>
c00203b2:	b8 04 00 00 00       	mov    eax,0x4
c00203b7:	eb 7d                	jmp    c0020436 <FAT::openDir(char const*, void**)+0x9e>
c00203b9:	83 ec 08             	sub    esp,0x8
c00203bc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00203c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00203c7:	50                   	push   eax
c00203c8:	e8 96 03 fe ff       	call   c0000763 <strcpy>
c00203cd:	83 c4 10             	add    esp,0x10
c00203d0:	83 ec 08             	sub    esp,0x8
c00203d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00203d7:	50                   	push   eax
c00203d8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00203df:	e8 54 fe ff ff       	call   c0020238 <FAT::fixFilepath(char*)>
c00203e4:	83 c4 10             	add    esp,0x10
c00203e7:	83 ec 0c             	sub    esp,0xc
c00203ea:	6a 4c                	push   0x4c
c00203ec:	e8 33 f2 fe ff       	call   c000f624 <malloc>
c00203f1:	83 c4 10             	add    esp,0x10
c00203f4:	89 c2                	mov    edx,eax
c00203f6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00203fd:	89 10                	mov    DWORD PTR [eax],edx
c00203ff:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020406:	8b 00                	mov    eax,DWORD PTR [eax]
c0020408:	83 ec 08             	sub    esp,0x8
c002040b:	8d 54 24 14          	lea    edx,[esp+0x14]
c002040f:	52                   	push   edx
c0020410:	50                   	push   eax
c0020411:	e8 9c 59 fe ff       	call   c0005db2 <f_opendir>
c0020416:	83 c4 10             	add    esp,0x10
c0020419:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020420:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020428:	74 07                	je     c0020431 <FAT::openDir(char const*, void**)+0x99>
c002042a:	b8 01 00 00 00       	mov    eax,0x1
c002042f:	eb 05                	jmp    c0020436 <FAT::openDir(char const*, void**)+0x9e>
c0020431:	b8 00 00 00 00       	mov    eax,0x0
c0020436:	81 c4 1c 01 00 00    	add    esp,0x11c
c002043c:	c3                   	ret    
c002043d:	90                   	nop

c002043e <FAT::stat(char const*, unsigned long long*, bool*)>:
c002043e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020444:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002044c:	75 0a                	jne    c0020458 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002044e:	b8 04 00 00 00       	mov    eax,0x4
c0020453:	e9 c9 00 00 00       	jmp    c0020521 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020458:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020460:	75 0a                	jne    c002046c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020462:	b8 04 00 00 00       	mov    eax,0x4
c0020467:	e9 b5 00 00 00       	jmp    c0020521 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002046c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020474:	75 0a                	jne    c0020480 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020476:	b8 04 00 00 00       	mov    eax,0x4
c002047b:	e9 a1 00 00 00       	jmp    c0020521 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020480:	83 ec 08             	sub    esp,0x8
c0020483:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002048a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020491:	50                   	push   eax
c0020492:	e8 cc 02 fe ff       	call   c0000763 <strcpy>
c0020497:	83 c4 10             	add    esp,0x10
c002049a:	83 ec 08             	sub    esp,0x8
c002049d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00204a4:	50                   	push   eax
c00204a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00204ac:	e8 87 fd ff ff       	call   c0020238 <FAT::fixFilepath(char*)>
c00204b1:	83 c4 10             	add    esp,0x10
c00204b4:	83 ec 08             	sub    esp,0x8
c00204b7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204bb:	50                   	push   eax
c00204bc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00204c3:	50                   	push   eax
c00204c4:	e8 a8 5a fe ff       	call   c0005f71 <f_stat>
c00204c9:	83 c4 10             	add    esp,0x10
c00204cc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00204d3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00204da:	85 c0                	test   eax,eax
c00204dc:	74 07                	je     c00204e5 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00204de:	83 f8 04             	cmp    eax,0x4
c00204e1:	74 32                	je     c0020515 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00204e3:	eb 37                	jmp    c002051c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00204e5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00204e9:	0f b6 c0             	movzx  eax,al
c00204ec:	83 e0 10             	and    eax,0x10
c00204ef:	0f 95 c2             	setne  dl
c00204f2:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00204f9:	88 10                	mov    BYTE PTR [eax],dl
c00204fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00204fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020502:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020509:	89 01                	mov    DWORD PTR [ecx],eax
c002050b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002050e:	b8 00 00 00 00       	mov    eax,0x0
c0020513:	eb 0c                	jmp    c0020521 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020515:	b8 02 00 00 00       	mov    eax,0x2
c002051a:	eb 05                	jmp    c0020521 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002051c:	b8 01 00 00 00       	mov    eax,0x1
c0020521:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020527:	c3                   	ret    

c0020528 <FAT::unlink(char const*)>:
c0020528:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002052e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020536:	75 07                	jne    c002053f <FAT::unlink(char const*)+0x17>
c0020538:	b8 04 00 00 00       	mov    eax,0x4
c002053d:	eb 5c                	jmp    c002059b <FAT::unlink(char const*)+0x73>
c002053f:	83 ec 08             	sub    esp,0x8
c0020542:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020549:	8d 44 24 18          	lea    eax,[esp+0x18]
c002054d:	50                   	push   eax
c002054e:	e8 10 02 fe ff       	call   c0000763 <strcpy>
c0020553:	83 c4 10             	add    esp,0x10
c0020556:	83 ec 08             	sub    esp,0x8
c0020559:	8d 44 24 14          	lea    eax,[esp+0x14]
c002055d:	50                   	push   eax
c002055e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020565:	e8 ce fc ff ff       	call   c0020238 <FAT::fixFilepath(char*)>
c002056a:	83 c4 10             	add    esp,0x10
c002056d:	83 ec 0c             	sub    esp,0xc
c0020570:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020574:	50                   	push   eax
c0020575:	e8 49 5d fe ff       	call   c00062c3 <f_unlink>
c002057a:	83 c4 10             	add    esp,0x10
c002057d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020584:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002058b:	85 c0                	test   eax,eax
c002058d:	75 07                	jne    c0020596 <FAT::unlink(char const*)+0x6e>
c002058f:	b8 00 00 00 00       	mov    eax,0x0
c0020594:	eb 05                	jmp    c002059b <FAT::unlink(char const*)+0x73>
c0020596:	b8 01 00 00 00       	mov    eax,0x1
c002059b:	81 c4 1c 01 00 00    	add    esp,0x11c
c00205a1:	c3                   	ret    

c00205a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00205a2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00205a8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00205af:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00205b6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00205ba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00205be:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00205c6:	75 0a                	jne    c00205d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00205c8:	b8 04 00 00 00       	mov    eax,0x4
c00205cd:	e9 1c 01 00 00       	jmp    c00206ee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00205d2:	83 ec 08             	sub    esp,0x8
c00205d5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00205dc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00205e0:	50                   	push   eax
c00205e1:	e8 7d 01 fe ff       	call   c0000763 <strcpy>
c00205e6:	83 c4 10             	add    esp,0x10
c00205e9:	83 ec 08             	sub    esp,0x8
c00205ec:	8d 44 24 20          	lea    eax,[esp+0x20]
c00205f0:	50                   	push   eax
c00205f1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00205f8:	e8 3b fc ff ff       	call   c0020238 <FAT::fixFilepath(char*)>
c00205fd:	83 c4 10             	add    esp,0x10
c0020600:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020608:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020610:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020615:	83 e0 01             	and    eax,0x1
c0020618:	74 08                	je     c0020622 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002061a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020622:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020627:	83 e0 02             	and    eax,0x2
c002062a:	74 08                	je     c0020634 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002062c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020634:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020639:	83 e0 04             	and    eax,0x4
c002063c:	74 08                	je     c0020646 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002063e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020646:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002064b:	83 e0 08             	and    eax,0x8
c002064e:	74 08                	je     c0020658 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020650:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020658:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002065d:	83 e0 01             	and    eax,0x1
c0020660:	74 08                	je     c002066a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020662:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002066a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002066f:	83 e0 02             	and    eax,0x2
c0020672:	74 08                	je     c002067c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020674:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002067c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020681:	83 e0 04             	and    eax,0x4
c0020684:	74 08                	je     c002068e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020686:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002068e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020693:	83 e0 08             	and    eax,0x8
c0020696:	74 08                	je     c00206a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020698:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00206a0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00206a7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00206ae:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00206b6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00206be:	83 ec 04             	sub    esp,0x4
c00206c1:	52                   	push   edx
c00206c2:	50                   	push   eax
c00206c3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00206c7:	50                   	push   eax
c00206c8:	e8 98 62 fe ff       	call   c0006965 <f_chmod>
c00206cd:	83 c4 10             	add    esp,0x10
c00206d0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00206d7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00206de:	85 c0                	test   eax,eax
c00206e0:	75 07                	jne    c00206e9 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00206e2:	b8 00 00 00 00       	mov    eax,0x0
c00206e7:	eb 05                	jmp    c00206ee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00206e9:	b8 01 00 00 00       	mov    eax,0x1
c00206ee:	81 c4 2c 01 00 00    	add    esp,0x12c
c00206f4:	c3                   	ret    
c00206f5:	90                   	nop

c00206f6 <FAT::rename(char const*, char const*)>:
c00206f6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00206fc:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020704:	74 0a                	je     c0020710 <FAT::rename(char const*, char const*)+0x1a>
c0020706:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002070e:	75 0a                	jne    c002071a <FAT::rename(char const*, char const*)+0x24>
c0020710:	b8 04 00 00 00       	mov    eax,0x4
c0020715:	e9 98 00 00 00       	jmp    c00207b2 <FAT::rename(char const*, char const*)+0xbc>
c002071a:	83 ec 08             	sub    esp,0x8
c002071d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020724:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002072b:	50                   	push   eax
c002072c:	e8 32 00 fe ff       	call   c0000763 <strcpy>
c0020731:	83 c4 10             	add    esp,0x10
c0020734:	83 ec 08             	sub    esp,0x8
c0020737:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002073e:	50                   	push   eax
c002073f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020746:	e8 ed fa ff ff       	call   c0020238 <FAT::fixFilepath(char*)>
c002074b:	83 c4 10             	add    esp,0x10
c002074e:	83 ec 08             	sub    esp,0x8
c0020751:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020758:	8d 44 24 18          	lea    eax,[esp+0x18]
c002075c:	50                   	push   eax
c002075d:	e8 01 00 fe ff       	call   c0000763 <strcpy>
c0020762:	83 c4 10             	add    esp,0x10
c0020765:	83 ec 08             	sub    esp,0x8
c0020768:	8d 44 24 14          	lea    eax,[esp+0x14]
c002076c:	50                   	push   eax
c002076d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020774:	e8 bf fa ff ff       	call   c0020238 <FAT::fixFilepath(char*)>
c0020779:	83 c4 10             	add    esp,0x10
c002077c:	83 ec 08             	sub    esp,0x8
c002077f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020783:	50                   	push   eax
c0020784:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002078b:	50                   	push   eax
c002078c:	e8 e1 5e fe ff       	call   c0006672 <f_rename>
c0020791:	83 c4 10             	add    esp,0x10
c0020794:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002079b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00207a2:	85 c0                	test   eax,eax
c00207a4:	75 07                	jne    c00207ad <FAT::rename(char const*, char const*)+0xb7>
c00207a6:	b8 00 00 00 00       	mov    eax,0x0
c00207ab:	eb 05                	jmp    c00207b2 <FAT::rename(char const*, char const*)+0xbc>
c00207ad:	b8 01 00 00 00       	mov    eax,0x1
c00207b2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00207b8:	c3                   	ret    
c00207b9:	90                   	nop

c00207ba <FAT::mkdir(char const*)>:
c00207ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00207c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00207c8:	75 07                	jne    c00207d1 <FAT::mkdir(char const*)+0x17>
c00207ca:	b8 04 00 00 00       	mov    eax,0x4
c00207cf:	eb 5c                	jmp    c002082d <FAT::mkdir(char const*)+0x73>
c00207d1:	83 ec 08             	sub    esp,0x8
c00207d4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00207db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207df:	50                   	push   eax
c00207e0:	e8 7e ff fd ff       	call   c0000763 <strcpy>
c00207e5:	83 c4 10             	add    esp,0x10
c00207e8:	83 ec 08             	sub    esp,0x8
c00207eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00207ef:	50                   	push   eax
c00207f0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00207f7:	e8 3c fa ff ff       	call   c0020238 <FAT::fixFilepath(char*)>
c00207fc:	83 c4 10             	add    esp,0x10
c00207ff:	83 ec 0c             	sub    esp,0xc
c0020802:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020806:	50                   	push   eax
c0020807:	e8 3a 5c fe ff       	call   c0006446 <f_mkdir>
c002080c:	83 c4 10             	add    esp,0x10
c002080f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020816:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002081d:	85 c0                	test   eax,eax
c002081f:	75 07                	jne    c0020828 <FAT::mkdir(char const*)+0x6e>
c0020821:	b8 00 00 00 00       	mov    eax,0x0
c0020826:	eb 05                	jmp    c002082d <FAT::mkdir(char const*)+0x73>
c0020828:	b8 01 00 00 00       	mov    eax,0x1
c002082d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020833:	c3                   	ret    

c0020834 <FAT::exists(char const*)>:
c0020834:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002083a:	83 ec 08             	sub    esp,0x8
c002083d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020844:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020848:	50                   	push   eax
c0020849:	e8 15 ff fd ff       	call   c0000763 <strcpy>
c002084e:	83 c4 10             	add    esp,0x10
c0020851:	83 ec 08             	sub    esp,0x8
c0020854:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020858:	50                   	push   eax
c0020859:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020860:	e8 d3 f9 ff ff       	call   c0020238 <FAT::fixFilepath(char*)>
c0020865:	83 c4 10             	add    esp,0x10
c0020868:	83 ec 08             	sub    esp,0x8
c002086b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020872:	50                   	push   eax
c0020873:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020877:	50                   	push   eax
c0020878:	e8 f4 56 fe ff       	call   c0005f71 <f_stat>
c002087d:	83 c4 10             	add    esp,0x10
c0020880:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020887:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002088e:	85 c0                	test   eax,eax
c0020890:	75 04                	jne    c0020896 <FAT::exists(char const*)+0x62>
c0020892:	b0 01                	mov    al,0x1
c0020894:	eb 02                	jmp    c0020898 <FAT::exists(char const*)+0x64>
c0020896:	b0 00                	mov    al,0x0
c0020898:	81 c4 2c 02 00 00    	add    esp,0x22c
c002089e:	c3                   	ret    
c002089f:	90                   	nop

c00208a0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00208a0:	b8 08 00 00 00       	mov    eax,0x8
c00208a5:	c3                   	ret    

c00208a6 <ISO9660::seek(void*, unsigned long long)>:
c00208a6:	53                   	push   ebx
c00208a7:	b8 04 00 00 00       	mov    eax,0x4
c00208ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00208b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00208b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00208b8:	85 d2                	test   edx,edx
c00208ba:	74 17                	je     c00208d3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00208bc:	89 c8                	mov    eax,ecx
c00208be:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00208c1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00208c4:	b8 01 00 00 00       	mov    eax,0x1
c00208c9:	73 08                	jae    c00208d3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00208cb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00208ce:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00208d1:	31 c0                	xor    eax,eax
c00208d3:	5b                   	pop    ebx
c00208d4:	c3                   	ret    
c00208d5:	90                   	nop

c00208d6 <ISO9660::tell(void*, unsigned long long*)>:
c00208d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00208da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208de:	85 d2                	test   edx,edx
c00208e0:	74 12                	je     c00208f4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00208e2:	85 c0                	test   eax,eax
c00208e4:	74 0e                	je     c00208f4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00208e6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00208e9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00208ec:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00208ef:	89 10                	mov    DWORD PTR [eax],edx
c00208f1:	31 c0                	xor    eax,eax
c00208f3:	c3                   	ret    
c00208f4:	b8 04 00 00 00       	mov    eax,0x4
c00208f9:	c3                   	ret    

c00208fa <ISO9660::getName()>:
c00208fa:	b8 a4 b2 02 c0       	mov    eax,0xc002b2a4
c00208ff:	c3                   	ret    

c0020900 <ISO9660::stat(void*, unsigned long long*)>:
c0020900:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020904:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020908:	85 d2                	test   edx,edx
c002090a:	74 12                	je     c002091e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002090c:	85 c0                	test   eax,eax
c002090e:	74 0e                	je     c002091e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020910:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020913:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020916:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020919:	89 10                	mov    DWORD PTR [eax],edx
c002091b:	31 c0                	xor    eax,eax
c002091d:	c3                   	ret    
c002091e:	b8 04 00 00 00       	mov    eax,0x4
c0020923:	c3                   	ret    

c0020924 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020924:	b8 01 00 00 00       	mov    eax,0x1
c0020929:	c3                   	ret    

c002092a <ISO9660::unlink(char const*)>:
c002092a:	b8 01 00 00 00       	mov    eax,0x1
c002092f:	c3                   	ret    

c0020930 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020930:	b8 01 00 00 00       	mov    eax,0x1
c0020935:	c3                   	ret    

c0020936 <ISO9660::rename(char const*, char const*)>:
c0020936:	b8 01 00 00 00       	mov    eax,0x1
c002093b:	c3                   	ret    

c002093c <ISO9660::mkdir(char const*)>:
c002093c:	b8 01 00 00 00       	mov    eax,0x1
c0020941:	c3                   	ret    

c0020942 <ISO9660::close(void*)>:
c0020942:	83 ec 0c             	sub    esp,0xc
c0020945:	b8 04 00 00 00       	mov    eax,0x4
c002094a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002094e:	85 d2                	test   edx,edx
c0020950:	74 0e                	je     c0020960 <ISO9660::close(void*)+0x1e>
c0020952:	83 ec 0c             	sub    esp,0xc
c0020955:	52                   	push   edx
c0020956:	e8 d9 ec fe ff       	call   c000f634 <free>
c002095b:	83 c4 10             	add    esp,0x10
c002095e:	31 c0                	xor    eax,eax
c0020960:	83 c4 0c             	add    esp,0xc
c0020963:	c3                   	ret    

c0020964 <ISO9660::closeDir(void*)>:
c0020964:	83 ec 0c             	sub    esp,0xc
c0020967:	b8 04 00 00 00       	mov    eax,0x4
c002096c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020970:	85 d2                	test   edx,edx
c0020972:	74 0e                	je     c0020982 <ISO9660::closeDir(void*)+0x1e>
c0020974:	83 ec 0c             	sub    esp,0xc
c0020977:	52                   	push   edx
c0020978:	e8 b7 ec fe ff       	call   c000f634 <free>
c002097d:	83 c4 10             	add    esp,0x10
c0020980:	31 c0                	xor    eax,eax
c0020982:	83 c4 0c             	add    esp,0xc
c0020985:	c3                   	ret    

c0020986 <ISO9660::~ISO9660()>:
c0020986:	83 ec 0c             	sub    esp,0xc
c0020989:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c002098e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020992:	89 10                	mov    DWORD PTR [eax],edx
c0020994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020998:	83 ec 0c             	sub    esp,0xc
c002099b:	50                   	push   eax
c002099c:	e8 5d 22 ff ff       	call   c0012bfe <Filesystem::~Filesystem()>
c00209a1:	83 c4 10             	add    esp,0x10
c00209a4:	90                   	nop
c00209a5:	83 c4 0c             	add    esp,0xc
c00209a8:	c3                   	ret    
c00209a9:	90                   	nop

c00209aa <ISO9660::~ISO9660()>:
c00209aa:	83 ec 0c             	sub    esp,0xc
c00209ad:	83 ec 0c             	sub    esp,0xc
c00209b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209b4:	e8 cd ff ff ff       	call   c0020986 <ISO9660::~ISO9660()>
c00209b9:	83 c4 10             	add    esp,0x10
c00209bc:	83 ec 08             	sub    esp,0x8
c00209bf:	6a 08                	push   0x8
c00209c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209c5:	e8 2b 1e ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00209ca:	83 c4 10             	add    esp,0x10
c00209cd:	83 c4 0c             	add    esp,0xc
c00209d0:	c3                   	ret    

c00209d1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00209d1:	55                   	push   ebp
c00209d2:	31 c9                	xor    ecx,ecx
c00209d4:	57                   	push   edi
c00209d5:	56                   	push   esi
c00209d6:	53                   	push   ebx
c00209d7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00209db:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00209df:	89 eb                	mov    ebx,ebp
c00209e1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00209e5:	39 ce                	cmp    esi,ecx
c00209e7:	7e 17                	jle    c0020a00 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00209e9:	31 d2                	xor    edx,edx
c00209eb:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00209ef:	7d 13                	jge    c0020a04 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00209f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00209f5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00209f8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00209fb:	75 0d                	jne    c0020a0a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00209fd:	42                   	inc    edx
c00209fe:	eb eb                	jmp    c00209eb <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020a00:	31 c0                	xor    eax,eax
c0020a02:	eb 0a                	jmp    c0020a0e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020a04:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020a08:	eb 04                	jmp    c0020a0e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020a0a:	41                   	inc    ecx
c0020a0b:	43                   	inc    ebx
c0020a0c:	eb d7                	jmp    c00209e5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020a0e:	5b                   	pop    ebx
c0020a0f:	5e                   	pop    esi
c0020a10:	5f                   	pop    edi
c0020a11:	5d                   	pop    ebp
c0020a12:	c3                   	ret    

c0020a13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020a13:	56                   	push   esi
c0020a14:	53                   	push   ebx
c0020a15:	52                   	push   edx
c0020a16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a1a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020a1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a22:	39 0d a0 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4a0,ecx
c0020a28:	75 08                	jne    c0020a32 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020a2a:	38 05 14 c3 02 c0    	cmp    BYTE PTR ds:0xc002c314,al
c0020a30:	74 2b                	je     c0020a5d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020a32:	83 ec 0c             	sub    esp,0xc
c0020a35:	a2 14 c3 02 c0       	mov    ds:0xc002c314,al
c0020a3a:	68 c0 e4 02 c0       	push   0xc002e4c0
c0020a3f:	0f be c0             	movsx  eax,al
c0020a42:	6a 01                	push   0x1
c0020a44:	89 0d a0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a0,ecx
c0020a4a:	31 db                	xor    ebx,ebx
c0020a4c:	53                   	push   ebx
c0020a4d:	51                   	push   ecx
c0020a4e:	ff 34 85 9c d2 02 c0 	push   DWORD PTR [eax*4-0x3ffd2d64]
c0020a55:	e8 40 55 ff ff       	call   c0015f9a <LogicalDisk::read(unsigned long long, int, void*)>
c0020a5a:	83 c4 20             	add    esp,0x20
c0020a5d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020a65:	c7 44 24 14 c0 e4 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e4c0
c0020a6d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020a71:	58                   	pop    eax
c0020a72:	5b                   	pop    ebx
c0020a73:	5e                   	pop    esi
c0020a74:	e9 27 fc fd ff       	jmp    c00006a0 <memcpy>
c0020a79:	90                   	nop

c0020a7a <ISO9660::tryMount(LogicalDisk*, int)>:
c0020a7a:	81 ec 10 08 00 00    	sub    esp,0x810
c0020a80:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020a87:	83 c0 41             	add    eax,0x41
c0020a8a:	0f be c0             	movsx  eax,al
c0020a8d:	50                   	push   eax
c0020a8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a92:	50                   	push   eax
c0020a93:	6a 10                	push   0x10
c0020a95:	e8 79 ff ff ff       	call   c0020a13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a9a:	83 c4 10             	add    esp,0x10
c0020a9d:	31 c0                	xor    eax,eax
c0020a9f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020aa4:	75 1d                	jne    c0020ac3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020aa6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020aab:	75 16                	jne    c0020ac3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020aad:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020ab2:	75 0f                	jne    c0020ac3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020ab4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020ab9:	75 08                	jne    c0020ac3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020abb:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020ac0:	0f 94 c0             	sete   al
c0020ac3:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020ac9:	c3                   	ret    

c0020aca <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020aca:	55                   	push   ebp
c0020acb:	57                   	push   edi
c0020acc:	56                   	push   esi
c0020acd:	53                   	push   ebx
c0020ace:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020ad4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020adb:	85 ed                	test   ebp,ebp
c0020add:	0f 84 d6 01 00 00    	je     c0020cb9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020ae3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020aeb:	0f 84 c8 01 00 00    	je     c0020cb9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020af1:	b8 01 00 00 00       	mov    eax,0x1
c0020af6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020afa:	0f 85 be 01 00 00    	jne    c0020cbe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020b00:	31 d2                	xor    edx,edx
c0020b02:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020b09:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020b0c:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020b0f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020b13:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020b16:	89 04 24             	mov    DWORD PTR [esp],eax
c0020b19:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020b1d:	01 f0                	add    eax,esi
c0020b1f:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020b22:	11 fa                	adc    edx,edi
c0020b24:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020b28:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020b2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020b30:	19 d1                	sbb    ecx,edx
c0020b32:	72 0a                	jb     c0020b3e <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b3c:	eb 13                	jmp    c0020b51 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020b3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020b46:	29 f0                	sub    eax,esi
c0020b48:	19 fa                	sbb    edx,edi
c0020b4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0020b4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020b51:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020b54:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020b57:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020b5b:	51                   	push   ecx
c0020b5c:	c1 e0 0b             	shl    eax,0xb
c0020b5f:	01 c6                	add    esi,eax
c0020b61:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020b65:	11 d7                	adc    edi,edx
c0020b67:	50                   	push   eax
c0020b68:	89 fa                	mov    edx,edi
c0020b6a:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020b6e:	89 f0                	mov    eax,esi
c0020b70:	53                   	push   ebx
c0020b71:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020b75:	50                   	push   eax
c0020b76:	e8 98 fe ff ff       	call   c0020a13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020b7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020b7f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020b82:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020b86:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020b8c:	83 c4 10             	add    esp,0x10
c0020b8f:	b8 00 08 00 00       	mov    eax,0x800
c0020b94:	29 d0                	sub    eax,edx
c0020b96:	39 c1                	cmp    ecx,eax
c0020b98:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020b9c:	83 d9 00             	sbb    ecx,0x0
c0020b9f:	7d 1c                	jge    c0020bbd <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020ba1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020ba6:	75 12                	jne    c0020bba <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020ba8:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020baf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020bb5:	e9 fb 00 00 00       	jmp    c0020cb5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0020bba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020bbd:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0020bc0:	31 d2                	xor    edx,edx
c0020bc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020bc6:	39 c2                	cmp    edx,eax
c0020bc8:	7d 14                	jge    c0020bde <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0020bca:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0020bd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bd5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0020bd8:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0020bdb:	42                   	inc    edx
c0020bdc:	eb e8                	jmp    c0020bc6 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0020bde:	89 c3                	mov    ebx,eax
c0020be0:	85 c0                	test   eax,eax
c0020be2:	79 02                	jns    c0020be6 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0020be4:	31 db                	xor    ebx,ebx
c0020be6:	99                   	cdq    
c0020be7:	01 c3                	add    ebx,eax
c0020be9:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0020bf0:	01 c6                	add    esi,eax
c0020bf2:	11 d7                	adc    edi,edx
c0020bf4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020bf8:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020bfc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0020bff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0020c03:	29 c6                	sub    esi,eax
c0020c05:	19 d7                	sbb    edi,edx
c0020c07:	89 34 24             	mov    DWORD PTR [esp],esi
c0020c0a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0020c0e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020c13:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020c16:	b8 00 00 00 00       	mov    eax,0x0
c0020c1b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020c1f:	7d 3e                	jge    c0020c5f <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0020c21:	52                   	push   edx
c0020c22:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020c26:	50                   	push   eax
c0020c27:	53                   	push   ebx
c0020c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020c30:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020c34:	50                   	push   eax
c0020c35:	e8 d9 fd ff ff       	call   c0020a13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c3a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020c42:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0020c47:	81 c3 00 08 00 00    	add    ebx,0x800
c0020c4d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020c55:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020c5a:	83 c4 10             	add    esp,0x10
c0020c5d:	eb af                	jmp    c0020c0e <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0020c5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c63:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020c66:	74 32                	je     c0020c9a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020c68:	50                   	push   eax
c0020c69:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020c6d:	50                   	push   eax
c0020c6e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020c72:	50                   	push   eax
c0020c73:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0020c77:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020c7b:	0f ac fe 0b          	shrd   esi,edi,0xb
c0020c7f:	56                   	push   esi
c0020c80:	e8 8e fd ff ff       	call   c0020a13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c85:	83 c4 0c             	add    esp,0xc
c0020c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020c8c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020c90:	50                   	push   eax
c0020c91:	53                   	push   ebx
c0020c92:	e8 09 fa fd ff       	call   c00006a0 <memcpy>
c0020c97:	83 c4 10             	add    esp,0x10
c0020c9a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020ca1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020ca5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020ca9:	89 38                	mov    DWORD PTR [eax],edi
c0020cab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020caf:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0020cb2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0020cb5:	31 c0                	xor    eax,eax
c0020cb7:	eb 05                	jmp    c0020cbe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020cb9:	b8 04 00 00 00       	mov    eax,0x4
c0020cbe:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020cc4:	5b                   	pop    ebx
c0020cc5:	5e                   	pop    esi
c0020cc6:	5f                   	pop    edi
c0020cc7:	5d                   	pop    ebp
c0020cc8:	c3                   	ret    
c0020cc9:	90                   	nop

c0020cca <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020cca:	55                   	push   ebp
c0020ccb:	57                   	push   edi
c0020ccc:	56                   	push   esi
c0020ccd:	53                   	push   ebx
c0020cce:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020cd4:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020cdb:	85 f6                	test   esi,esi
c0020cdd:	0f 84 64 02 00 00    	je     c0020f47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020ce3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020ceb:	0f 84 56 02 00 00    	je     c0020f47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020cf1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020cf4:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020cf7:	75 0a                	jne    c0020d03 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020cf9:	b8 07 00 00 00       	mov    eax,0x7
c0020cfe:	e9 49 02 00 00       	jmp    c0020f4c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020d03:	50                   	push   eax
c0020d04:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020d08:	50                   	push   eax
c0020d09:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020d10:	53                   	push   ebx
c0020d11:	8b 06                	mov    eax,DWORD PTR [esi]
c0020d13:	c1 e0 0b             	shl    eax,0xb
c0020d16:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020d19:	c1 e8 0b             	shr    eax,0xb
c0020d1c:	50                   	push   eax
c0020d1d:	e8 f1 fc ff ff       	call   c0020a13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d22:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020d25:	83 c4 10             	add    esp,0x10
c0020d28:	89 c1                	mov    ecx,eax
c0020d2a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020d2d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020d33:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020d36:	84 db                	test   bl,bl
c0020d38:	0f 85 90 00 00 00    	jne    c0020dce <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020d3e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020d44:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020d4a:	29 c7                	sub    edi,eax
c0020d4c:	89 fb                	mov    ebx,edi
c0020d4e:	c1 fb 1f             	sar    ebx,0x1f
c0020d51:	01 f8                	add    eax,edi
c0020d53:	11 da                	adc    edx,ebx
c0020d55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d5d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020d60:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020d63:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020d66:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020d69:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d6c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020d70:	89 d8                	mov    eax,ebx
c0020d72:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020d75:	ba 00 00 00 00       	mov    edx,0x0
c0020d7a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020d7e:	b8 00 00 00 00       	mov    eax,0x0
c0020d83:	73 0b                	jae    c0020d90 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020d85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020d8c:	29 f8                	sub    eax,edi
c0020d8e:	19 da                	sbb    edx,ebx
c0020d90:	89 d3                	mov    ebx,edx
c0020d92:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020d95:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020d98:	09 c3                	or     ebx,eax
c0020d9a:	0f 84 59 ff ff ff    	je     c0020cf9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020da0:	55                   	push   ebp
c0020da1:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020da5:	50                   	push   eax
c0020da6:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020dad:	53                   	push   ebx
c0020dae:	8b 06                	mov    eax,DWORD PTR [esi]
c0020db0:	c1 e0 0b             	shl    eax,0xb
c0020db3:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020db7:	c1 e8 0b             	shr    eax,0xb
c0020dba:	50                   	push   eax
c0020dbb:	e8 53 fc ff ff       	call   c0020a13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020dc0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020dc3:	83 c4 10             	add    esp,0x10
c0020dc6:	25 ff 07 00 00       	and    eax,0x7ff
c0020dcb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020dce:	57                   	push   edi
c0020dcf:	6a 28                	push   0x28
c0020dd1:	6a 00                	push   0x0
c0020dd3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020dd7:	50                   	push   eax
c0020dd8:	e8 e7 f8 fd ff       	call   c00006c4 <memset>
c0020ddd:	31 d2                	xor    edx,edx
c0020ddf:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020de2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020de8:	89 f8                	mov    eax,edi
c0020dea:	83 c0 21             	add    eax,0x21
c0020ded:	83 d2 00             	adc    edx,0x0
c0020df0:	89 c7                	mov    edi,eax
c0020df2:	89 d5                	mov    ebp,edx
c0020df4:	83 c4 10             	add    esp,0x10
c0020df7:	31 c9                	xor    ecx,ecx
c0020df9:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020e00:	83 f9 28             	cmp    ecx,0x28
c0020e03:	88 04 24             	mov    BYTE PTR [esp],al
c0020e06:	0f 94 c2             	sete   dl
c0020e09:	88 d0                	mov    al,dl
c0020e0b:	ba ff 07 00 00       	mov    edx,0x7ff
c0020e10:	39 fa                	cmp    edx,edi
c0020e12:	ba 00 00 00 00       	mov    edx,0x0
c0020e17:	19 ea                	sbb    edx,ebp
c0020e19:	0f 92 c2             	setb   dl
c0020e1c:	09 c2                	or     edx,eax
c0020e1e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020e22:	0f 94 c0             	sete   al
c0020e25:	08 d0                	or     al,dl
c0020e27:	75 16                	jne    c0020e3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020e29:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020e2d:	74 10                	je     c0020e3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020e2f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020e32:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020e36:	41                   	inc    ecx
c0020e37:	83 c7 01             	add    edi,0x1
c0020e3a:	83 d5 00             	adc    ebp,0x0
c0020e3d:	eb ba                	jmp    c0020df9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020e3f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020e46:	83 ec 0c             	sub    esp,0xc
c0020e49:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020e4d:	57                   	push   edi
c0020e4e:	e8 8e f8 fd ff       	call   c00006e1 <strlen>
c0020e53:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020e5b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020e5f:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020e66:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020e69:	5a                   	pop    edx
c0020e6a:	25 ff 07 00 00       	and    eax,0x7ff
c0020e6f:	01 c8                	add    eax,ecx
c0020e71:	59                   	pop    ecx
c0020e72:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020e78:	83 e0 02             	and    eax,0x2
c0020e7b:	3c 01                	cmp    al,0x1
c0020e7d:	19 c0                	sbb    eax,eax
c0020e7f:	83 c0 02             	add    eax,0x2
c0020e82:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020e86:	57                   	push   edi
c0020e87:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020e8b:	50                   	push   eax
c0020e8c:	e8 d2 f8 fd ff       	call   c0000763 <strcpy>
c0020e91:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020e95:	83 c4 10             	add    esp,0x10
c0020e98:	84 c0                	test   al,al
c0020e9a:	75 21                	jne    c0020ebd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020e9c:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020ea4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020eac:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020eb4:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020ebb:	eb 28                	jmp    c0020ee5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020ebd:	fe c8                	dec    al
c0020ebf:	75 24                	jne    c0020ee5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020ec1:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020ec9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020ed1:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020ed9:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020ee0:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020ee5:	0f b6 fb             	movzx  edi,bl
c0020ee8:	31 db                	xor    ebx,ebx
c0020eea:	50                   	push   eax
c0020eeb:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020ef2:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020ef6:	50                   	push   eax
c0020ef7:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020efe:	e8 9d f7 fd ff       	call   c00006a0 <memcpy>
c0020f03:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020f0a:	89 f9                	mov    ecx,edi
c0020f0c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020f12:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020f15:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020f18:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020f1b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020f1e:	83 c4 10             	add    esp,0x10
c0020f21:	39 c7                	cmp    edi,eax
c0020f23:	89 df                	mov    edi,ebx
c0020f25:	19 d7                	sbb    edi,edx
c0020f27:	72 10                	jb     c0020f39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020f29:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020f30:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020f37:	eb 0a                	jmp    c0020f43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020f39:	29 c8                	sub    eax,ecx
c0020f3b:	19 da                	sbb    edx,ebx
c0020f3d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020f40:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020f43:	31 c0                	xor    eax,eax
c0020f45:	eb 05                	jmp    c0020f4c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020f47:	b8 04 00 00 00       	mov    eax,0x4
c0020f4c:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020f52:	5b                   	pop    ebx
c0020f53:	5e                   	pop    esi
c0020f54:	5f                   	pop    edi
c0020f55:	5d                   	pop    ebp
c0020f56:	c3                   	ret    

c0020f57 <readRoot(unsigned int*, unsigned int*, char)>:
c0020f57:	81 ec 40 08 00 00    	sub    esp,0x840
c0020f5d:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020f65:	50                   	push   eax
c0020f66:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020f6a:	50                   	push   eax
c0020f6b:	6a 10                	push   0x10
c0020f6d:	e8 a1 fa ff ff       	call   c0020a13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020f72:	83 c4 0c             	add    esp,0xc
c0020f75:	6a 22                	push   0x22
c0020f77:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020f7e:	50                   	push   eax
c0020f7f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020f83:	50                   	push   eax
c0020f84:	e8 17 f7 fd ff       	call   c00006a0 <memcpy>
c0020f89:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020f90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020f94:	89 10                	mov    DWORD PTR [eax],edx
c0020f96:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020f9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020fa1:	89 10                	mov    DWORD PTR [eax],edx
c0020fa3:	b0 01                	mov    al,0x1
c0020fa5:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020fab:	c3                   	ret    

c0020fac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020fac:	55                   	push   ebp
c0020fad:	57                   	push   edi
c0020fae:	56                   	push   esi
c0020faf:	53                   	push   ebx
c0020fb0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fb6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020fbd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020fc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020fc8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020fcc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020fd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020fd4:	75 03                	jne    c0020fd9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020fd6:	83 c3 02             	add    ebx,0x2
c0020fd9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020fdc:	75 03                	jne    c0020fe1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020fde:	43                   	inc    ebx
c0020fdf:	eb f8                	jmp    c0020fd9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020fe1:	51                   	push   ecx
c0020fe2:	68 00 01 00 00       	push   0x100
c0020fe7:	6a 00                	push   0x0
c0020fe9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fed:	50                   	push   eax
c0020fee:	e8 d1 f6 fd ff       	call   c00006c4 <memset>
c0020ff3:	83 c4 10             	add    esp,0x10
c0020ff6:	31 d2                	xor    edx,edx
c0020ff8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020ffb:	84 c0                	test   al,al
c0020ffd:	74 21                	je     c0021020 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020fff:	3c 2f                	cmp    al,0x2f
c0021001:	75 0b                	jne    c002100e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021003:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021007:	bd 01 00 00 00       	mov    ebp,0x1
c002100c:	eb 14                	jmp    c0021022 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002100e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021011:	80 f9 19             	cmp    cl,0x19
c0021014:	77 03                	ja     c0021019 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021016:	83 e8 20             	sub    eax,0x20
c0021019:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002101d:	42                   	inc    edx
c002101e:	eb d8                	jmp    c0020ff8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021020:	31 ed                	xor    ebp,ebp
c0021022:	83 ec 0c             	sub    esp,0xc
c0021025:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002102c:	e8 f3 e5 fe ff       	call   c000f624 <malloc>
c0021031:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021038:	89 c6                	mov    esi,eax
c002103a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021040:	c1 ef 0b             	shr    edi,0xb
c0021043:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002104a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002104e:	83 c4 10             	add    esp,0x10
c0021051:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021056:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002105a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021061:	74 28                	je     c002108b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021063:	52                   	push   edx
c0021064:	57                   	push   edi
c0021065:	50                   	push   eax
c0021066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002106a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021071:	e8 9d f9 ff ff       	call   c0020a13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021076:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002107a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021081:	05 00 08 00 00       	add    eax,0x800
c0021086:	83 c4 10             	add    esp,0x10
c0021089:	eb cb                	jmp    c0021056 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002108b:	83 ec 0c             	sub    esp,0xc
c002108e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021092:	57                   	push   edi
c0021093:	e8 49 f6 fd ff       	call   c00006e1 <strlen>
c0021098:	50                   	push   eax
c0021099:	57                   	push   edi
c002109a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00210a1:	56                   	push   esi
c00210a2:	e8 2a f9 ff ff       	call   c00209d1 <__memmem(unsigned char*, int, unsigned char*, int)>
c00210a7:	83 c4 20             	add    esp,0x20
c00210aa:	85 c0                	test   eax,eax
c00210ac:	75 13                	jne    c00210c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00210ae:	83 ec 0c             	sub    esp,0xc
c00210b1:	56                   	push   esi
c00210b2:	e8 7d e5 fe ff       	call   c000f634 <free>
c00210b7:	83 c4 10             	add    esp,0x10
c00210ba:	31 c0                	xor    eax,eax
c00210bc:	e9 b3 00 00 00       	jmp    c0021174 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00210c1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00210c5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00210c9:	c1 e7 08             	shl    edi,0x8
c00210cc:	c1 e2 10             	shl    edx,0x10
c00210cf:	09 d7                	or     edi,edx
c00210d1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00210d5:	09 d7                	or     edi,edx
c00210d7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00210db:	c1 e2 18             	shl    edx,0x18
c00210de:	09 d7                	or     edi,edx
c00210e0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00210e4:	89 d1                	mov    ecx,edx
c00210e6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00210ea:	c1 e1 08             	shl    ecx,0x8
c00210ed:	c1 e2 10             	shl    edx,0x10
c00210f0:	09 ca                	or     edx,ecx
c00210f2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00210f6:	09 ca                	or     edx,ecx
c00210f8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00210fc:	c1 e1 18             	shl    ecx,0x18
c00210ff:	09 ca                	or     edx,ecx
c0021101:	89 e9                	mov    ecx,ebp
c0021103:	84 c9                	test   cl,cl
c0021105:	74 3c                	je     c0021143 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021107:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002110b:	83 ec 0c             	sub    esp,0xc
c002110e:	56                   	push   esi
c002110f:	e8 20 e5 fe ff       	call   c000f634 <free>
c0021114:	83 c4 0c             	add    esp,0xc
c0021117:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002111e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021123:	50                   	push   eax
c0021124:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002112b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021132:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021136:	52                   	push   edx
c0021137:	57                   	push   edi
c0021138:	53                   	push   ebx
c0021139:	e8 6e fe ff ff       	call   c0020fac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002113e:	83 c4 20             	add    esp,0x20
c0021141:	eb 31                	jmp    c0021174 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021143:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021146:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002114d:	d0 e8                	shr    al,1
c002114f:	89 3b                	mov    DWORD PTR [ebx],edi
c0021151:	83 e0 01             	and    eax,0x1
c0021154:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002115b:	83 ec 0c             	sub    esp,0xc
c002115e:	89 13                	mov    DWORD PTR [ebx],edx
c0021160:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021167:	89 03                	mov    DWORD PTR [ebx],eax
c0021169:	56                   	push   esi
c002116a:	e8 c5 e4 fe ff       	call   c000f634 <free>
c002116f:	83 c4 10             	add    esp,0x10
c0021172:	b0 01                	mov    al,0x1
c0021174:	81 c4 1c 01 00 00    	add    esp,0x11c
c002117a:	5b                   	pop    ebx
c002117b:	5e                   	pop    esi
c002117c:	5f                   	pop    edi
c002117d:	5d                   	pop    ebp
c002117e:	c3                   	ret    

c002117f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002117f:	55                   	push   ebp
c0021180:	57                   	push   edi
c0021181:	56                   	push   esi
c0021182:	53                   	push   ebx
c0021183:	83 ec 20             	sub    esp,0x20
c0021186:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002118a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002118e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021192:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002119a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00211a2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00211a7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00211ad:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00211b3:	57                   	push   edi
c00211b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211b8:	50                   	push   eax
c00211b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211bd:	50                   	push   eax
c00211be:	e8 94 fd ff ff       	call   c0020f57 <readRoot(unsigned int*, unsigned int*, char)>
c00211c3:	5a                   	pop    edx
c00211c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00211c8:	e8 14 f5 fd ff       	call   c00006e1 <strlen>
c00211cd:	83 c4 10             	add    esp,0x10
c00211d0:	83 f8 03             	cmp    eax,0x3
c00211d3:	77 17                	ja     c00211ec <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00211d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211d9:	89 03                	mov    DWORD PTR [ebx],eax
c00211db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211df:	89 06                	mov    DWORD PTR [esi],eax
c00211e1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00211e8:	b0 01                	mov    al,0x1
c00211ea:	eb 19                	jmp    c0021205 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00211ec:	50                   	push   eax
c00211ed:	55                   	push   ebp
c00211ee:	57                   	push   edi
c00211ef:	56                   	push   esi
c00211f0:	53                   	push   ebx
c00211f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00211f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00211f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00211fd:	e8 aa fd ff ff       	call   c0020fac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021202:	83 c4 20             	add    esp,0x20
c0021205:	83 c4 1c             	add    esp,0x1c
c0021208:	5b                   	pop    ebx
c0021209:	5e                   	pop    esi
c002120a:	5f                   	pop    edi
c002120b:	5d                   	pop    ebp
c002120c:	c3                   	ret    
c002120d:	90                   	nop

c002120e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002120e:	57                   	push   edi
c002120f:	56                   	push   esi
c0021210:	53                   	push   ebx
c0021211:	83 ec 10             	sub    esp,0x10
c0021214:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021218:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002121c:	85 ff                	test   edi,edi
c002121e:	0f 84 9d 00 00 00    	je     c00212c1 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021224:	85 f6                	test   esi,esi
c0021226:	0f 84 95 00 00 00    	je     c00212c1 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002122c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021231:	74 17                	je     c002124a <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021233:	83 ec 0c             	sub    esp,0xc
c0021236:	68 bf b2 02 c0       	push   0xc002b2bf
c002123b:	e8 95 16 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0021240:	83 c4 10             	add    esp,0x10
c0021243:	b8 03 00 00 00       	mov    eax,0x3
c0021248:	eb 7c                	jmp    c00212c6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002124a:	83 ec 0c             	sub    esp,0xc
c002124d:	6a 1c                	push   0x1c
c002124f:	e8 d0 e3 fe ff       	call   c000f624 <malloc>
c0021254:	89 07                	mov    DWORD PTR [edi],eax
c0021256:	89 c3                	mov    ebx,eax
c0021258:	58                   	pop    eax
c0021259:	8d 44 24 18          	lea    eax,[esp+0x18]
c002125d:	50                   	push   eax
c002125e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021261:	50                   	push   eax
c0021262:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021266:	50                   	push   eax
c0021267:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002126b:	50                   	push   eax
c002126c:	56                   	push   esi
c002126d:	e8 0d ff ff ff       	call   c002117f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021272:	83 c4 20             	add    esp,0x20
c0021275:	84 c0                	test   al,al
c0021277:	74 07                	je     c0021280 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021279:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002127e:	74 0b                	je     c002128b <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021280:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021284:	b8 01 00 00 00       	mov    eax,0x1
c0021289:	eb 3b                	jmp    c00212c6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002128b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002128f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021293:	89 03                	mov    DWORD PTR [ebx],eax
c0021295:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002129c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00212a7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00212ae:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00212b1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00212b8:	8a 06                	mov    al,BYTE PTR [esi]
c00212ba:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00212bd:	31 c0                	xor    eax,eax
c00212bf:	eb 05                	jmp    c00212c6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00212c1:	b8 04 00 00 00       	mov    eax,0x4
c00212c6:	83 c4 10             	add    esp,0x10
c00212c9:	5b                   	pop    ebx
c00212ca:	5e                   	pop    esi
c00212cb:	5f                   	pop    edi
c00212cc:	c3                   	ret    
c00212cd:	90                   	nop

c00212ce <ISO9660::exists(char const*)>:
c00212ce:	83 ec 28             	sub    esp,0x28
c00212d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00212d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00212d9:	52                   	push   edx
c00212da:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00212dd:	52                   	push   edx
c00212de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00212e2:	52                   	push   edx
c00212e3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00212e7:	52                   	push   edx
c00212e8:	50                   	push   eax
c00212e9:	e8 91 fe ff ff       	call   c002117f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00212ee:	83 c4 3c             	add    esp,0x3c
c00212f1:	c3                   	ret    

c00212f2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00212f2:	56                   	push   esi
c00212f3:	53                   	push   ebx
c00212f4:	83 ec 14             	sub    esp,0x14
c00212f7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00212fb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00212ff:	85 db                	test   ebx,ebx
c0021301:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021305:	0f 94 c2             	sete   dl
c0021308:	85 f6                	test   esi,esi
c002130a:	0f 94 c0             	sete   al
c002130d:	08 c2                	or     dl,al
c002130f:	75 68                	jne    c0021379 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021311:	85 c9                	test   ecx,ecx
c0021313:	74 64                	je     c0021379 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021315:	83 ec 0c             	sub    esp,0xc
c0021318:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002131b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002131f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021325:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002132c:	50                   	push   eax
c002132d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021330:	50                   	push   eax
c0021331:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021335:	50                   	push   eax
c0021336:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002133a:	50                   	push   eax
c002133b:	51                   	push   ecx
c002133c:	e8 3e fe ff ff       	call   c002117f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021341:	83 c4 20             	add    esp,0x20
c0021344:	ba 01 00 00 00       	mov    edx,0x1
c0021349:	84 c0                	test   al,al
c002134b:	74 31                	je     c002137e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002134d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021351:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021358:	89 03                	mov    DWORD PTR [ebx],eax
c002135a:	ba 00 00 00 00       	mov    edx,0x0
c002135f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021363:	85 c0                	test   eax,eax
c0021365:	0f 95 06             	setne  BYTE PTR [esi]
c0021368:	74 14                	je     c002137e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002136a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021370:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021377:	eb 05                	jmp    c002137e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021379:	ba 04 00 00 00       	mov    edx,0x4
c002137e:	83 c4 14             	add    esp,0x14
c0021381:	89 d0                	mov    eax,edx
c0021383:	5b                   	pop    ebx
c0021384:	5e                   	pop    esi
c0021385:	c3                   	ret    

c0021386 <ISO9660::openDir(char const*, void**)>:
c0021386:	57                   	push   edi
c0021387:	56                   	push   esi
c0021388:	53                   	push   ebx
c0021389:	83 ec 10             	sub    esp,0x10
c002138c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021390:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021394:	85 ff                	test   edi,edi
c0021396:	0f 84 95 00 00 00    	je     c0021431 <ISO9660::openDir(char const*, void**)+0xab>
c002139c:	85 f6                	test   esi,esi
c002139e:	0f 84 8d 00 00 00    	je     c0021431 <ISO9660::openDir(char const*, void**)+0xab>
c00213a4:	83 ec 0c             	sub    esp,0xc
c00213a7:	6a 1c                	push   0x1c
c00213a9:	e8 76 e2 fe ff       	call   c000f624 <malloc>
c00213ae:	89 07                	mov    DWORD PTR [edi],eax
c00213b0:	89 c3                	mov    ebx,eax
c00213b2:	59                   	pop    ecx
c00213b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213b7:	50                   	push   eax
c00213b8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00213bb:	50                   	push   eax
c00213bc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00213c0:	50                   	push   eax
c00213c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00213c5:	50                   	push   eax
c00213c6:	56                   	push   esi
c00213c7:	e8 b3 fd ff ff       	call   c002117f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00213cc:	83 c4 20             	add    esp,0x20
c00213cf:	84 c0                	test   al,al
c00213d1:	74 07                	je     c00213da <ISO9660::openDir(char const*, void**)+0x54>
c00213d3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00213d8:	75 21                	jne    c00213fb <ISO9660::openDir(char const*, void**)+0x75>
c00213da:	0f b6 c0             	movzx  eax,al
c00213dd:	52                   	push   edx
c00213de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00213e2:	50                   	push   eax
c00213e3:	68 e5 b2 02 c0       	push   0xc002b2e5
c00213e8:	e8 e8 14 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00213ed:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00213f1:	83 c4 10             	add    esp,0x10
c00213f4:	b8 01 00 00 00       	mov    eax,0x1
c00213f9:	eb 3b                	jmp    c0021436 <ISO9660::openDir(char const*, void**)+0xb0>
c00213fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ff:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021403:	89 03                	mov    DWORD PTR [ebx],eax
c0021405:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002140c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021410:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021417:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002141e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021421:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021428:	8a 06                	mov    al,BYTE PTR [esi]
c002142a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002142d:	31 c0                	xor    eax,eax
c002142f:	eb 05                	jmp    c0021436 <ISO9660::openDir(char const*, void**)+0xb0>
c0021431:	b8 04 00 00 00       	mov    eax,0x4
c0021436:	83 c4 10             	add    esp,0x10
c0021439:	5b                   	pop    ebx
c002143a:	5e                   	pop    esi
c002143b:	5f                   	pop    edi
c002143c:	c3                   	ret    
c002143d:	90                   	nop

c002143e <ISO9660::ISO9660()>:
c002143e:	83 ec 0c             	sub    esp,0xc
c0021441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021445:	83 ec 0c             	sub    esp,0xc
c0021448:	50                   	push   eax
c0021449:	e8 8c 17 ff ff       	call   c0012bda <Filesystem::Filesystem()>
c002144e:	83 c4 10             	add    esp,0x10
c0021451:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c0021456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145a:	89 10                	mov    DWORD PTR [eax],edx
c002145c:	90                   	nop
c002145d:	83 c4 0c             	add    esp,0xc
c0021460:	c3                   	ret    
c0021461:	90                   	nop

c0021462 <SoundChannel::~SoundChannel()>:
c0021462:	83 ec 0c             	sub    esp,0xc
c0021465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021469:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002146c:	83 ec 0c             	sub    esp,0xc
c002146f:	50                   	push   eax
c0021470:	e8 bf e1 fe ff       	call   c000f634 <free>
c0021475:	83 c4 10             	add    esp,0x10
c0021478:	90                   	nop
c0021479:	83 c4 0c             	add    esp,0xc
c002147c:	c3                   	ret    
c002147d:	90                   	nop

c002147e <SoundChannel::setSpeed(float)>:
c002147e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021482:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021486:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021489:	c3                   	ret    

c002148a <SoundChannel::getSpeed()>:
c002148a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002148e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021491:	c3                   	ret    

c0021492 <SoundChannel::setVolume(int)>:
c0021492:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021496:	83 f8 64             	cmp    eax,0x64
c0021499:	7e 05                	jle    c00214a0 <SoundChannel::setVolume(int)+0xe>
c002149b:	b8 64 00 00 00       	mov    eax,0x64
c00214a0:	85 c0                	test   eax,eax
c00214a2:	79 02                	jns    c00214a6 <SoundChannel::setVolume(int)+0x14>
c00214a4:	31 c0                	xor    eax,eax
c00214a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00214aa:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00214ad:	c3                   	ret    

c00214ae <SoundChannel::getVolume()>:
c00214ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214b2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00214b5:	c3                   	ret    

c00214b6 <SoundChannel::pause()>:
c00214b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214ba:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00214be:	c3                   	ret    
c00214bf:	90                   	nop

c00214c0 <SoundChannel::SoundChannel(int, int, int, int)>:
c00214c0:	83 ec 1c             	sub    esp,0x1c
c00214c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00214c7:	e8 ea ff ff ff       	call   c00214b6 <SoundChannel::pause()>
c00214cc:	83 c4 04             	add    esp,0x4
c00214cf:	6a 50                	push   0x50
c00214d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00214d5:	e8 b8 ff ff ff       	call   c0021492 <SoundChannel::setVolume(int)>
c00214da:	83 c4 08             	add    esp,0x8
c00214dd:	a1 80 b3 02 c0       	mov    eax,ds:0xc002b380
c00214e2:	50                   	push   eax
c00214e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00214e7:	e8 92 ff ff ff       	call   c002147e <SoundChannel::setSpeed(float)>
c00214ec:	83 c4 08             	add    esp,0x8
c00214ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00214f7:	89 10                	mov    DWORD PTR [eax],edx
c00214f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021501:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021508:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002150c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002150f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021514:	75 23                	jne    c0021539 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002151a:	8b 10                	mov    edx,DWORD PTR [eax]
c002151c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021523:	0f af c2             	imul   eax,edx
c0021526:	85 c0                	test   eax,eax
c0021528:	79 03                	jns    c002152d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002152a:	83 c0 03             	add    eax,0x3
c002152d:	c1 f8 02             	sar    eax,0x2
c0021530:	05 a0 0f 00 00       	add    eax,0xfa0
c0021535:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002153d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021541:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021548:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002154f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021553:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002155a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002155e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021561:	c1 e0 02             	shl    eax,0x2
c0021564:	83 ec 0c             	sub    esp,0xc
c0021567:	50                   	push   eax
c0021568:	e8 b7 e0 fe ff       	call   c000f624 <malloc>
c002156d:	83 c4 10             	add    esp,0x10
c0021570:	89 c2                	mov    edx,eax
c0021572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021576:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021579:	83 ec 04             	sub    esp,0x4
c002157c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021580:	50                   	push   eax
c0021581:	6a 01                	push   0x1
c0021583:	6a 04                	push   0x4
c0021585:	e8 fe 73 fe ff       	call   c0008988 <src_new>
c002158a:	83 c4 10             	add    esp,0x10
c002158d:	89 c2                	mov    edx,eax
c002158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021593:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002159a:	85 c0                	test   eax,eax
c002159c:	74 10                	je     c00215ae <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002159e:	83 ec 0c             	sub    esp,0xc
c00215a1:	68 64 b3 02 c0       	push   0xc002b364
c00215a6:	e8 18 85 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00215ab:	83 c4 10             	add    esp,0x10
c00215ae:	a0 c0 f0 02 c0       	mov    al,ds:0xc002f0c0
c00215b3:	83 f0 01             	xor    eax,0x1
c00215b6:	84 c0                	test   al,al
c00215b8:	74 57                	je     c0021611 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00215ba:	a1 84 b3 02 c0       	mov    eax,ds:0xc002b384
c00215bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00215cb:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00215d3:	7f 35                	jg     c002160a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00215d5:	83 ec 0c             	sub    esp,0xc
c00215d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00215dc:	e8 26 4a 00 00       	call   c0026007 <__floatsisf>
c00215e1:	83 c4 10             	add    esp,0x10
c00215e4:	8b 15 84 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b384
c00215ea:	83 ec 08             	sub    esp,0x8
c00215ed:	52                   	push   edx
c00215ee:	50                   	push   eax
c00215ef:	e8 25 46 00 00       	call   c0025c19 <__mulsf3>
c00215f4:	83 c4 10             	add    esp,0x10
c00215f7:	89 c2                	mov    edx,eax
c00215f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215fd:	89 14 85 c0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1340],edx
c0021604:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021608:	eb c1                	jmp    c00215cb <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002160a:	c6 05 c0 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f0c0,0x1
c0021611:	90                   	nop
c0021612:	83 c4 1c             	add    esp,0x1c
c0021615:	c3                   	ret    

c0021616 <SoundChannel::play()>:
c0021616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002161a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002161e:	c3                   	ret    
c002161f:	90                   	nop

c0021620 <SoundChannel::paused()>:
c0021620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021624:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021627:	c3                   	ret    

c0021628 <SoundChannel::getSampleRate()>:
c0021628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002162c:	8b 00                	mov    eax,DWORD PTR [eax]
c002162e:	c3                   	ret    
c002162f:	90                   	nop

c0021630 <SoundChannel::getBits()>:
c0021630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021637:	c3                   	ret    

c0021638 <SoundChannel::getBufferUsed()>:
c0021638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002163c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002163f:	c3                   	ret    

c0021640 <SoundChannel::getBufferSize()>:
c0021640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021644:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021647:	c3                   	ret    

c0021648 <SoundChannel::unbuffer(float*, int, int)>:
c0021648:	56                   	push   esi
c0021649:	53                   	push   ebx
c002164a:	83 ec 40             	sub    esp,0x40
c002164d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021651:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021654:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021658:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002165b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002165f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021663:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021667:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002166b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002166f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021673:	e8 8f 49 00 00       	call   c0026007 <__floatsisf>
c0021678:	5a                   	pop    edx
c0021679:	89 c6                	mov    esi,eax
c002167b:	ff 33                	push   DWORD PTR [ebx]
c002167d:	e8 85 49 00 00       	call   c0026007 <__floatsisf>
c0021682:	59                   	pop    ecx
c0021683:	5a                   	pop    edx
c0021684:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021687:	50                   	push   eax
c0021688:	e8 8c 45 00 00       	call   c0025c19 <__mulsf3>
c002168d:	59                   	pop    ecx
c002168e:	5a                   	pop    edx
c002168f:	50                   	push   eax
c0021690:	56                   	push   esi
c0021691:	e8 46 47 00 00       	call   c0025ddc <__divsf3>
c0021696:	89 04 24             	mov    DWORD PTR [esp],eax
c0021699:	e8 39 5c 00 00       	call   c00272d7 <__extendsfdf2>
c002169e:	59                   	pop    ecx
c002169f:	5e                   	pop    esi
c00216a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00216a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00216a8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00216b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216b4:	50                   	push   eax
c00216b5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00216b8:	e8 c0 6e fe ff       	call   c000857d <src_process>
c00216bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00216c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00216c4:	83 c4 0c             	add    esp,0xc
c00216c7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00216ca:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00216cd:	29 d0                	sub    eax,edx
c00216cf:	c1 e0 02             	shl    eax,0x2
c00216d2:	50                   	push   eax
c00216d3:	8d 04 91             	lea    eax,[ecx+edx*4]
c00216d6:	50                   	push   eax
c00216d7:	51                   	push   ecx
c00216d8:	e8 8b ef fd ff       	call   c0000668 <memmove>
c00216dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00216e1:	83 c4 44             	add    esp,0x44
c00216e4:	5b                   	pop    ebx
c00216e5:	5e                   	pop    esi
c00216e6:	c3                   	ret    
c00216e7:	90                   	nop

c00216e8 <SoundChannel::buffer8(unsigned char*, int)>:
c00216e8:	55                   	push   ebp
c00216e9:	57                   	push   edi
c00216ea:	56                   	push   esi
c00216eb:	53                   	push   ebx
c00216ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216f0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00216f4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00216f7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00216fb:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00216fe:	74 7a                	je     c002177a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021700:	85 ff                	test   edi,edi
c0021702:	7e 76                	jle    c002177a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021704:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021708:	8d 70 01             	lea    esi,[eax+0x1]
c002170b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002170e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021711:	8b 1c 9d c0 ec 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1340]
c0021718:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002171b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002171e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021721:	74 5e                	je     c0021781 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021723:	83 ff 01             	cmp    edi,0x1
c0021726:	74 4b                	je     c0021773 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021728:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002172c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002172f:	8d 70 01             	lea    esi,[eax+0x1]
c0021732:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021735:	8b 1c 9d c0 ec 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1340]
c002173c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002173f:	b8 02 00 00 00       	mov    eax,0x2
c0021744:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021747:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002174a:	75 23                	jne    c002176f <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002174c:	eb 27                	jmp    c0021775 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002174e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021753:	8d 71 01             	lea    esi,[ecx+0x1]
c0021756:	40                   	inc    eax
c0021757:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002175a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002175d:	8b 1c 9d c0 ec 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1340]
c0021764:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021767:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002176a:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002176d:	74 06                	je     c0021775 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002176f:	39 c7                	cmp    edi,eax
c0021771:	75 db                	jne    c002174e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021773:	89 f8                	mov    eax,edi
c0021775:	5b                   	pop    ebx
c0021776:	5e                   	pop    esi
c0021777:	5f                   	pop    edi
c0021778:	5d                   	pop    ebp
c0021779:	c3                   	ret    
c002177a:	5b                   	pop    ebx
c002177b:	31 c0                	xor    eax,eax
c002177d:	5e                   	pop    esi
c002177e:	5f                   	pop    edi
c002177f:	5d                   	pop    ebp
c0021780:	c3                   	ret    
c0021781:	b8 01 00 00 00       	mov    eax,0x1
c0021786:	eb ed                	jmp    c0021775 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021788 <SoundDevice::SoundDevice(char const*)>:
c0021788:	83 ec 1c             	sub    esp,0x1c
c002178b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002178f:	83 ec 08             	sub    esp,0x8
c0021792:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021796:	50                   	push   eax
c0021797:	e8 50 27 ff ff       	call   c0013eec <Device::Device(char const*)>
c002179c:	83 c4 10             	add    esp,0x10
c002179f:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c00217a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217a8:	89 10                	mov    DWORD PTR [eax],edx
c00217aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217ae:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00217b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217bc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00217c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00217ce:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00217d3:	7f 19                	jg     c00217ee <SoundDevice::SoundDevice(char const*)+0x66>
c00217d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00217dd:	83 c2 54             	add    edx,0x54
c00217e0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00217e8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00217ec:	eb e0                	jmp    c00217ce <SoundDevice::SoundDevice(char const*)+0x46>
c00217ee:	90                   	nop
c00217ef:	83 c4 1c             	add    esp,0x1c
c00217f2:	c3                   	ret    
c00217f3:	90                   	nop

c00217f4 <SoundDevice::~SoundDevice()>:
c00217f4:	53                   	push   ebx
c00217f5:	83 ec 18             	sub    esp,0x18
c00217f8:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c00217fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021801:	89 10                	mov    DWORD PTR [eax],edx
c0021803:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002180b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021810:	7f 46                	jg     c0021858 <SoundDevice::~SoundDevice()+0x64>
c0021812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021816:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002181a:	83 c2 54             	add    edx,0x54
c002181d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021821:	85 c0                	test   eax,eax
c0021823:	74 2d                	je     c0021852 <SoundDevice::~SoundDevice()+0x5e>
c0021825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021829:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002182d:	83 c2 54             	add    edx,0x54
c0021830:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021834:	85 db                	test   ebx,ebx
c0021836:	74 1a                	je     c0021852 <SoundDevice::~SoundDevice()+0x5e>
c0021838:	83 ec 0c             	sub    esp,0xc
c002183b:	53                   	push   ebx
c002183c:	e8 21 fc ff ff       	call   c0021462 <SoundChannel::~SoundChannel()>
c0021841:	83 c4 10             	add    esp,0x10
c0021844:	83 ec 08             	sub    esp,0x8
c0021847:	6a 2c                	push   0x2c
c0021849:	53                   	push   ebx
c002184a:	e8 a6 0f ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c002184f:	83 c4 10             	add    esp,0x10
c0021852:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021856:	eb b3                	jmp    c002180b <SoundDevice::~SoundDevice()+0x17>
c0021858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002185c:	83 ec 0c             	sub    esp,0xc
c002185f:	50                   	push   eax
c0021860:	e8 69 23 ff ff       	call   c0013bce <Device::~Device()>
c0021865:	83 c4 10             	add    esp,0x10
c0021868:	90                   	nop
c0021869:	83 c4 18             	add    esp,0x18
c002186c:	5b                   	pop    ebx
c002186d:	c3                   	ret    

c002186e <SoundDevice::~SoundDevice()>:
c002186e:	83 ec 0c             	sub    esp,0xc
c0021871:	83 ec 0c             	sub    esp,0xc
c0021874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021878:	e8 77 ff ff ff       	call   c00217f4 <SoundDevice::~SoundDevice()>
c002187d:	83 c4 10             	add    esp,0x10
c0021880:	83 ec 08             	sub    esp,0x8
c0021883:	68 e4 01 00 00       	push   0x1e4
c0021888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002188c:	e8 64 0f ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0021891:	83 c4 10             	add    esp,0x10
c0021894:	83 c4 0c             	add    esp,0xc
c0021897:	c3                   	ret    

c0021898 <SoundDevice::getFreeChannelNum()>:
c0021898:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002189c:	31 c0                	xor    eax,eax
c002189e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00218a6:	74 09                	je     c00218b1 <SoundDevice::getFreeChannelNum()+0x19>
c00218a8:	40                   	inc    eax
c00218a9:	83 f8 20             	cmp    eax,0x20
c00218ac:	75 f0                	jne    c002189e <SoundDevice::getFreeChannelNum()+0x6>
c00218ae:	83 c8 ff             	or     eax,0xffffffff
c00218b1:	c3                   	ret    

c00218b2 <SoundDevice::addChannel(SoundChannel*)>:
c00218b2:	56                   	push   esi
c00218b3:	53                   	push   ebx
c00218b4:	51                   	push   ecx
c00218b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00218bd:	53                   	push   ebx
c00218be:	e8 d5 ff ff ff       	call   c0021898 <SoundDevice::getFreeChannelNum()>
c00218c3:	5a                   	pop    edx
c00218c4:	83 f8 ff             	cmp    eax,0xffffffff
c00218c7:	74 51                	je     c002191a <SoundDevice::addChannel(SoundChannel*)+0x68>
c00218c9:	85 f6                	test   esi,esi
c00218cb:	74 4d                	je     c002191a <SoundDevice::addChannel(SoundChannel*)+0x68>
c00218cd:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00218d4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00218db:	75 30                	jne    c002190d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00218dd:	83 ec 0c             	sub    esp,0xc
c00218e0:	56                   	push   esi
c00218e1:	e8 42 fd ff ff       	call   c0021628 <SoundChannel::getSampleRate()>
c00218e6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00218ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00218ef:	e8 3c fd ff ff       	call   c0021630 <SoundChannel::getBits()>
c00218f4:	83 c4 0c             	add    esp,0xc
c00218f7:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00218fd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00218ff:	50                   	push   eax
c0021900:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021906:	53                   	push   ebx
c0021907:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002190a:	83 c4 10             	add    esp,0x10
c002190d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021913:	b8 01 00 00 00       	mov    eax,0x1
c0021918:	eb 03                	jmp    c002191d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002191a:	83 c8 ff             	or     eax,0xffffffff
c002191d:	5a                   	pop    edx
c002191e:	5b                   	pop    ebx
c002191f:	5e                   	pop    esi
c0021920:	c3                   	ret    
c0021921:	90                   	nop

c0021922 <SoundDevice::removeChannel(int)>:
c0021922:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002192a:	83 fa 1f             	cmp    edx,0x1f
c002192d:	77 23                	ja     c0021952 <SoundDevice::removeChannel(int)+0x30>
c002192f:	8d 14 90             	lea    edx,[eax+edx*4]
c0021932:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021939:	74 17                	je     c0021952 <SoundDevice::removeChannel(int)+0x30>
c002193b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021945:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002194b:	75 05                	jne    c0021952 <SoundDevice::removeChannel(int)+0x30>
c002194d:	8b 00                	mov    eax,DWORD PTR [eax]
c002194f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021952:	c3                   	ret    
c0021953:	90                   	nop

c0021954 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021954:	57                   	push   edi
c0021955:	56                   	push   esi
c0021956:	53                   	push   ebx
c0021957:	31 db                	xor    ebx,ebx
c0021959:	83 ec 10             	sub    esp,0x10
c002195c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021960:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021964:	0f 8d cb 00 00 00    	jge    c0021a35 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002196a:	83 ec 0c             	sub    esp,0xc
c002196d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021971:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021974:	e8 5e 59 00 00       	call   c00272d7 <__extendsfdf2>
c0021979:	83 c4 10             	add    esp,0x10
c002197c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021980:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021984:	68 00 00 f0 3f       	push   0x3ff00000
c0021989:	6a 00                	push   0x0
c002198b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002198f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021993:	e8 cb 48 00 00       	call   c0026263 <__adddf3>
c0021998:	83 c4 10             	add    esp,0x10
c002199b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002199f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00219a3:	68 00 00 e0 3f       	push   0x3fe00000
c00219a8:	6a 00                	push   0x0
c00219aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219b2:	e8 29 4f 00 00       	call   c00268e0 <__muldf3>
c00219b7:	83 c4 10             	add    esp,0x10
c00219ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00219be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00219c2:	68 00 00 60 40       	push   0x40600000
c00219c7:	6a 00                	push   0x0
c00219c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219d1:	e8 0a 4f 00 00       	call   c00268e0 <__muldf3>
c00219d6:	59                   	pop    ecx
c00219d7:	5f                   	pop    edi
c00219d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00219dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00219e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219e8:	e8 c6 57 00 00       	call   c00271b3 <__truncdfsf2>
c00219ed:	5a                   	pop    edx
c00219ee:	89 c7                	mov    edi,eax
c00219f0:	59                   	pop    ecx
c00219f1:	68 00 00 fe 42       	push   0x42fe0000
c00219f6:	50                   	push   eax
c00219f7:	e8 61 48 00 00       	call   c002625d <__gesf2>
c00219fc:	83 c4 10             	add    esp,0x10
c00219ff:	85 c0                	test   eax,eax
c0021a01:	78 06                	js     c0021a09 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021a03:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021a07:	eb 26                	jmp    c0021a2f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021a09:	50                   	push   eax
c0021a0a:	50                   	push   eax
c0021a0b:	6a 00                	push   0x0
c0021a0d:	57                   	push   edi
c0021a0e:	e8 4e 48 00 00       	call   c0026261 <__lesf2>
c0021a13:	83 c4 10             	add    esp,0x10
c0021a16:	85 c0                	test   eax,eax
c0021a18:	7f 06                	jg     c0021a20 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021a1a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021a1e:	eb 0f                	jmp    c0021a2f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021a20:	83 ec 0c             	sub    esp,0xc
c0021a23:	57                   	push   edi
c0021a24:	e8 43 59 00 00       	call   c002736c <lrintf>
c0021a29:	83 c4 10             	add    esp,0x10
c0021a2c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021a2f:	43                   	inc    ebx
c0021a30:	e9 2b ff ff ff       	jmp    c0021960 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021a35:	83 c4 10             	add    esp,0x10
c0021a38:	5b                   	pop    ebx
c0021a39:	5e                   	pop    esi
c0021a3a:	5f                   	pop    edi
c0021a3b:	c3                   	ret    

c0021a3c <SoundDevice::getAudio(int, float*, float*)>:
c0021a3c:	55                   	push   ebp
c0021a3d:	57                   	push   edi
c0021a3e:	56                   	push   esi
c0021a3f:	53                   	push   ebx
c0021a40:	31 db                	xor    ebx,ebx
c0021a42:	83 ec 20             	sub    esp,0x20
c0021a45:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021a49:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021a4d:	c1 e0 02             	shl    eax,0x2
c0021a50:	50                   	push   eax
c0021a51:	6a 00                	push   0x0
c0021a53:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021a57:	e8 68 ec fd ff       	call   c00006c4 <memset>
c0021a5c:	83 c4 10             	add    esp,0x10
c0021a5f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021a63:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021a6a:	85 c0                	test   eax,eax
c0021a6c:	0f 84 d7 00 00 00    	je     c0021b49 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021a72:	83 ec 0c             	sub    esp,0xc
c0021a75:	50                   	push   eax
c0021a76:	e8 a5 fb ff ff       	call   c0021620 <SoundChannel::paused()>
c0021a7b:	83 c4 10             	add    esp,0x10
c0021a7e:	84 c0                	test   al,al
c0021a80:	0f 85 c3 00 00 00    	jne    c0021b49 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021a86:	83 ec 0c             	sub    esp,0xc
c0021a89:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021a90:	e8 19 fa ff ff       	call   c00214ae <SoundChannel::getVolume()>
c0021a95:	83 c4 10             	add    esp,0x10
c0021a98:	85 c0                	test   eax,eax
c0021a9a:	0f 84 a9 00 00 00    	je     c0021b49 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021aa0:	83 ec 0c             	sub    esp,0xc
c0021aa3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021aaa:	e8 ff f9 ff ff       	call   c00214ae <SoundChannel::getVolume()>
c0021aaf:	83 ec 0c             	sub    esp,0xc
c0021ab2:	50                   	push   eax
c0021ab3:	e8 4f 45 00 00       	call   c0026007 <__floatsisf>
c0021ab8:	59                   	pop    ecx
c0021ab9:	5d                   	pop    ebp
c0021aba:	31 ed                	xor    ebp,ebp
c0021abc:	68 00 00 c8 42       	push   0x42c80000
c0021ac1:	50                   	push   eax
c0021ac2:	e8 15 43 00 00       	call   c0025ddc <__divsf3>
c0021ac7:	83 c4 10             	add    esp,0x10
c0021aca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021ace:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021ad2:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021ad8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021adc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021ae3:	e8 60 fb ff ff       	call   c0021648 <SoundChannel::unbuffer(float*, int, int)>
c0021ae8:	83 c4 20             	add    esp,0x20
c0021aeb:	89 c1                	mov    ecx,eax
c0021aed:	39 cd                	cmp    ebp,ecx
c0021aef:	7d 52                	jge    c0021b43 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021af1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021af5:	50                   	push   eax
c0021af6:	50                   	push   eax
c0021af7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021afb:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021afe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021b02:	e8 12 41 00 00       	call   c0025c19 <__mulsf3>
c0021b07:	5a                   	pop    edx
c0021b08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021b0c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021b12:	e8 f0 44 00 00       	call   c0026007 <__floatsisf>
c0021b17:	59                   	pop    ecx
c0021b18:	5a                   	pop    edx
c0021b19:	50                   	push   eax
c0021b1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b1e:	e8 b9 42 00 00       	call   c0025ddc <__divsf3>
c0021b23:	59                   	pop    ecx
c0021b24:	5a                   	pop    edx
c0021b25:	50                   	push   eax
c0021b26:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021b2a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021b2d:	e8 c4 3d 00 00       	call   c00258f6 <__addsf3>
c0021b32:	83 c4 10             	add    esp,0x10
c0021b35:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021b39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021b3d:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021b40:	45                   	inc    ebp
c0021b41:	eb aa                	jmp    c0021aed <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021b43:	39 cf                	cmp    edi,ecx
c0021b45:	7e 02                	jle    c0021b49 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021b47:	89 cf                	mov    edi,ecx
c0021b49:	43                   	inc    ebx
c0021b4a:	83 fb 20             	cmp    ebx,0x20
c0021b4d:	0f 85 10 ff ff ff    	jne    c0021a63 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021b53:	83 c4 1c             	add    esp,0x1c
c0021b56:	89 f8                	mov    eax,edi
c0021b58:	5b                   	pop    ebx
c0021b59:	5e                   	pop    esi
c0021b5a:	5f                   	pop    edi
c0021b5b:	5d                   	pop    ebp
c0021b5c:	c3                   	ret    
c0021b5d:	90                   	nop

c0021b5e <PCI::open(int, int, void*)>:
c0021b5e:	83 ec 18             	sub    esp,0x18
c0021b61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021b65:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b67:	50                   	push   eax
c0021b68:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021b6b:	31 c0                	xor    eax,eax
c0021b6d:	83 c4 1c             	add    esp,0x1c
c0021b70:	c3                   	ret    
c0021b71:	90                   	nop

c0021b72 <PCI::close(int, int, void*)>:
c0021b72:	31 c0                	xor    eax,eax
c0021b74:	c3                   	ret    
c0021b75:	90                   	nop

c0021b76 <PCI::PCI()>:
c0021b76:	83 ec 0c             	sub    esp,0xc
c0021b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b7d:	83 ec 08             	sub    esp,0x8
c0021b80:	68 c0 b3 02 c0       	push   0xc002b3c0
c0021b85:	50                   	push   eax
c0021b86:	e8 e5 19 ff ff       	call   c0013570 <Bus::Bus(char const*)>
c0021b8b:	83 c4 10             	add    esp,0x10
c0021b8e:	ba 2c b4 02 c0       	mov    edx,0xc002b42c
c0021b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b97:	89 10                	mov    DWORD PTR [eax],edx
c0021b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b9d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021ba3:	0f b6 d0             	movzx  edx,al
c0021ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021baa:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021bb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bbb:	0f b6 d0             	movzx  edx,al
c0021bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc2:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0021bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bcb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bd1:	8d 50 01             	lea    edx,[eax+0x1]
c0021bd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021bd8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021bde:	0f b6 d0             	movzx  edx,al
c0021be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021be9:	83 c9 c0             	or     ecx,0xffffffc0
c0021bec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021bf0:	90                   	nop
c0021bf1:	83 c4 0c             	add    esp,0xc
c0021bf4:	c3                   	ret    
c0021bf5:	90                   	nop

c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021bf6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021bfa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021bff:	89 ca                	mov    edx,ecx
c0021c01:	c1 e0 10             	shl    eax,0x10
c0021c04:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021c0a:	09 d0                	or     eax,edx
c0021c0c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021c11:	c1 e2 08             	shl    edx,0x8
c0021c14:	09 d0                	or     eax,edx
c0021c16:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021c1b:	c1 e2 0b             	shl    edx,0xb
c0021c1e:	09 d0                	or     eax,edx
c0021c20:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021c25:	0d 00 00 00 80       	or     eax,0x80000000
c0021c2a:	ef                   	out    dx,eax
c0021c2b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021c30:	ed                   	in     eax,dx
c0021c31:	83 e1 02             	and    ecx,0x2
c0021c34:	0f b6 c9             	movzx  ecx,cl
c0021c37:	c1 e1 03             	shl    ecx,0x3
c0021c3a:	d3 e8                	shr    eax,cl
c0021c3c:	c3                   	ret    
c0021c3d:	90                   	nop

c0021c3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021c3e:	6a 00                	push   0x0
c0021c40:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c45:	50                   	push   eax
c0021c46:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c4b:	50                   	push   eax
c0021c4c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c51:	50                   	push   eax
c0021c52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c56:	e8 9b ff ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c5b:	83 c4 14             	add    esp,0x14
c0021c5e:	c3                   	ret    
c0021c5f:	90                   	nop

c0021c60 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021c60:	6a 0e                	push   0xe
c0021c62:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c67:	50                   	push   eax
c0021c68:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c6d:	50                   	push   eax
c0021c6e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c73:	50                   	push   eax
c0021c74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c78:	e8 79 ff ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c7d:	83 c4 14             	add    esp,0x14
c0021c80:	0f b6 c0             	movzx  eax,al
c0021c83:	c3                   	ret    

c0021c84 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021c84:	55                   	push   ebp
c0021c85:	57                   	push   edi
c0021c86:	56                   	push   esi
c0021c87:	53                   	push   ebx
c0021c88:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021c8d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021c92:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021c97:	6a 0a                	push   0xa
c0021c99:	56                   	push   esi
c0021c9a:	55                   	push   ebp
c0021c9b:	57                   	push   edi
c0021c9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021ca0:	e8 51 ff ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ca5:	6a 0a                	push   0xa
c0021ca7:	89 c3                	mov    ebx,eax
c0021ca9:	56                   	push   esi
c0021caa:	0f b6 db             	movzx  ebx,bl
c0021cad:	55                   	push   ebp
c0021cae:	57                   	push   edi
c0021caf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021cb3:	e8 3e ff ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cb8:	83 c4 28             	add    esp,0x28
c0021cbb:	25 00 ff 00 00       	and    eax,0xff00
c0021cc0:	09 d8                	or     eax,ebx
c0021cc2:	5b                   	pop    ebx
c0021cc3:	5e                   	pop    esi
c0021cc4:	5f                   	pop    edi
c0021cc5:	5d                   	pop    ebp
c0021cc6:	c3                   	ret    
c0021cc7:	90                   	nop

c0021cc8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021cc8:	6a 08                	push   0x8
c0021cca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ccf:	50                   	push   eax
c0021cd0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021cd5:	50                   	push   eax
c0021cd6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021cdb:	50                   	push   eax
c0021cdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ce0:	e8 11 ff ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ce5:	83 c4 14             	add    esp,0x14
c0021ce8:	0f b6 c4             	movzx  eax,ah
c0021ceb:	c3                   	ret    

c0021cec <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021cec:	6a 08                	push   0x8
c0021cee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021cf3:	50                   	push   eax
c0021cf4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021cf9:	50                   	push   eax
c0021cfa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021cff:	50                   	push   eax
c0021d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d04:	e8 ed fe ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d09:	83 c4 14             	add    esp,0x14
c0021d0c:	c3                   	ret    
c0021d0d:	90                   	nop

c0021d0e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021d0e:	6a 3c                	push   0x3c
c0021d10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d15:	50                   	push   eax
c0021d16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d1b:	50                   	push   eax
c0021d1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d21:	50                   	push   eax
c0021d22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d26:	e8 cb fe ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d2b:	83 c4 14             	add    esp,0x14
c0021d2e:	c3                   	ret    
c0021d2f:	90                   	nop

c0021d30 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021d30:	6a 18                	push   0x18
c0021d32:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d37:	50                   	push   eax
c0021d38:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d3d:	50                   	push   eax
c0021d3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d43:	50                   	push   eax
c0021d44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d48:	e8 a9 fe ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d4d:	83 c4 14             	add    esp,0x14
c0021d50:	0f b6 c4             	movzx  eax,ah
c0021d53:	c3                   	ret    

c0021d54 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021d54:	55                   	push   ebp
c0021d55:	57                   	push   edi
c0021d56:	56                   	push   esi
c0021d57:	53                   	push   ebx
c0021d58:	50                   	push   eax
c0021d59:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021d5d:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021d62:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021d67:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021d6c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021d73:	8d 43 12             	lea    eax,[ebx+0x12]
c0021d76:	83 c3 10             	add    ebx,0x10
c0021d79:	0f b6 c0             	movzx  eax,al
c0021d7c:	0f b6 db             	movzx  ebx,bl
c0021d7f:	50                   	push   eax
c0021d80:	51                   	push   ecx
c0021d81:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021d85:	57                   	push   edi
c0021d86:	55                   	push   ebp
c0021d87:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021d8b:	e8 66 fe ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d90:	53                   	push   ebx
c0021d91:	89 c6                	mov    esi,eax
c0021d93:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021d97:	c1 e6 10             	shl    esi,0x10
c0021d9a:	51                   	push   ecx
c0021d9b:	57                   	push   edi
c0021d9c:	55                   	push   ebp
c0021d9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021da1:	e8 50 fe ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021da6:	83 c4 2c             	add    esp,0x2c
c0021da9:	0f b7 c0             	movzx  eax,ax
c0021dac:	5b                   	pop    ebx
c0021dad:	09 f0                	or     eax,esi
c0021daf:	5e                   	pop    esi
c0021db0:	5f                   	pop    edi
c0021db1:	5d                   	pop    ebp
c0021db2:	c3                   	ret    
c0021db3:	90                   	nop

c0021db4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021db4:	53                   	push   ebx
c0021db5:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021dba:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021dbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021dc3:	c1 e1 10             	shl    ecx,0x10
c0021dc6:	25 fc 00 00 00       	and    eax,0xfc
c0021dcb:	09 c1                	or     ecx,eax
c0021dcd:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021dd2:	c1 e0 08             	shl    eax,0x8
c0021dd5:	09 c1                	or     ecx,eax
c0021dd7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021ddc:	c1 e0 0b             	shl    eax,0xb
c0021ddf:	09 c1                	or     ecx,eax
c0021de1:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021de7:	89 c8                	mov    eax,ecx
c0021de9:	ef                   	out    dx,eax
c0021dea:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021def:	ed                   	in     eax,dx
c0021df0:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021df5:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021dfa:	74 0a                	je     c0021e06 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021dfc:	0f b7 d8             	movzx  ebx,ax
c0021dff:	89 d0                	mov    eax,edx
c0021e01:	c1 e0 10             	shl    eax,0x10
c0021e04:	eb 05                	jmp    c0021e0b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021e06:	66 31 c0             	xor    ax,ax
c0021e09:	89 d3                	mov    ebx,edx
c0021e0b:	09 c3                	or     ebx,eax
c0021e0d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021e12:	89 c8                	mov    eax,ecx
c0021e14:	ef                   	out    dx,eax
c0021e15:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021e1a:	89 d8                	mov    eax,ebx
c0021e1c:	ef                   	out    dx,eax
c0021e1d:	5b                   	pop    ebx
c0021e1e:	c3                   	ret    
c0021e1f:	90                   	nop

c0021e20 <PCI::checkBus(unsigned char)>:
c0021e20:	56                   	push   esi
c0021e21:	53                   	push   ebx
c0021e22:	31 db                	xor    ebx,ebx
c0021e24:	51                   	push   ecx
c0021e25:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021e2a:	52                   	push   edx
c0021e2b:	53                   	push   ebx
c0021e2c:	43                   	inc    ebx
c0021e2d:	56                   	push   esi
c0021e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e32:	e8 2b 03 00 00       	call   c0022162 <PCI::checkDevice(unsigned char, unsigned char)>
c0021e37:	83 c4 10             	add    esp,0x10
c0021e3a:	83 fb 20             	cmp    ebx,0x20
c0021e3d:	75 eb                	jne    c0021e2a <PCI::checkBus(unsigned char)+0xa>
c0021e3f:	58                   	pop    eax
c0021e40:	5b                   	pop    ebx
c0021e41:	5e                   	pop    esi
c0021e42:	c3                   	ret    
c0021e43:	90                   	nop

c0021e44 <PCI::foundDevice(PCIDeviceInfo)>:
c0021e44:	55                   	push   ebp
c0021e45:	57                   	push   edi
c0021e46:	56                   	push   esi
c0021e47:	53                   	push   ebx
c0021e48:	83 ec 1c             	sub    esp,0x1c
c0021e4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021e4f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021e55:	0f 84 52 01 00 00    	je     c0021fad <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021e5b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021e5f:	66 81 f9 06 04       	cmp    cx,0x406
c0021e64:	75 2c                	jne    c0021e92 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021e66:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021e6b:	50                   	push   eax
c0021e6c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021e71:	50                   	push   eax
c0021e72:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021e77:	50                   	push   eax
c0021e78:	56                   	push   esi
c0021e79:	e8 b2 fe ff ff       	call   c0021d30 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021e7e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021e82:	0f b6 c0             	movzx  eax,al
c0021e85:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021e89:	83 c4 2c             	add    esp,0x2c
c0021e8c:	5b                   	pop    ebx
c0021e8d:	5e                   	pop    esi
c0021e8e:	5f                   	pop    edi
c0021e8f:	5d                   	pop    ebp
c0021e90:	eb 8e                	jmp    c0021e20 <PCI::checkBus(unsigned char)>
c0021e92:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021e96:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021e9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ea0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021ea4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021ea8:	88 d3                	mov    bl,dl
c0021eaa:	85 c0                	test   eax,eax
c0021eac:	74 33                	je     c0021ee1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021eae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021eb1:	85 d2                	test   edx,edx
c0021eb3:	74 28                	je     c0021edd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021eb5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021ebb:	31 ef                	xor    edi,ebp
c0021ebd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021ec3:	75 18                	jne    c0021edd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021ec5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ec9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021ecf:	75 0c                	jne    c0021edd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021ed1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021ed7:	0f 84 d0 00 00 00    	je     c0021fad <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021edd:	8b 00                	mov    eax,DWORD PTR [eax]
c0021edf:	eb c9                	jmp    c0021eaa <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021ee1:	66 81 f9 01 06       	cmp    cx,0x601
c0021ee6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021eea:	75 19                	jne    c0021f05 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021eec:	83 ec 0c             	sub    esp,0xc
c0021eef:	68 64 01 00 00       	push   0x164
c0021ef4:	e8 2b d7 fe ff       	call   c000f624 <malloc>
c0021ef9:	89 c5                	mov    ebp,eax
c0021efb:	89 04 24             	mov    DWORD PTR [esp],eax
c0021efe:	e8 95 0f 00 00       	call   c0022e98 <SATABus::SATABus()>
c0021f03:	eb 1e                	jmp    c0021f23 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021f05:	66 81 f9 01 01       	cmp    cx,0x101
c0021f0a:	75 60                	jne    c0021f6c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021f0c:	83 ec 0c             	sub    esp,0xc
c0021f0f:	68 70 02 00 00       	push   0x270
c0021f14:	e8 0b d7 fe ff       	call   c000f624 <malloc>
c0021f19:	89 c5                	mov    ebp,eax
c0021f1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021f1e:	e8 03 03 00 00       	call   c0022226 <IDE::IDE()>
c0021f23:	58                   	pop    eax
c0021f24:	5a                   	pop    edx
c0021f25:	55                   	push   ebp
c0021f26:	56                   	push   esi
c0021f27:	e8 d0 1d ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0021f2c:	83 ec 1c             	sub    esp,0x1c
c0021f2f:	b9 09 00 00 00       	mov    ecx,0x9
c0021f34:	fc                   	cld    
c0021f35:	89 e7                	mov    edi,esp
c0021f37:	89 de                	mov    esi,ebx
c0021f39:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021f3b:	55                   	push   ebp
c0021f3c:	e8 c5 1c ff ff       	call   c0013c06 <Device::preOpenPCI(PCIDeviceInfo)>
c0021f41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021f44:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021f48:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021f50:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021f58:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021f60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f63:	83 c4 4c             	add    esp,0x4c
c0021f66:	5b                   	pop    ebx
c0021f67:	5e                   	pop    esi
c0021f68:	5f                   	pop    edi
c0021f69:	5d                   	pop    ebp
c0021f6a:	ff e0                	jmp    eax
c0021f6c:	83 ec 0c             	sub    esp,0xc
c0021f6f:	68 58 01 00 00       	push   0x158
c0021f74:	e8 ab d6 fe ff       	call   c000f624 <malloc>
c0021f79:	89 c5                	mov    ebp,eax
c0021f7b:	58                   	pop    eax
c0021f7c:	5a                   	pop    edx
c0021f7d:	68 c8 b3 02 c0       	push   0xc002b3c8
c0021f82:	55                   	push   ebp
c0021f83:	e8 6a 20 ff ff       	call   c0013ff2 <DriverlessDevice::DriverlessDevice(char const*)>
c0021f88:	59                   	pop    ecx
c0021f89:	5f                   	pop    edi
c0021f8a:	55                   	push   ebp
c0021f8b:	56                   	push   esi
c0021f8c:	e8 6b 1d ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0021f91:	b9 09 00 00 00       	mov    ecx,0x9
c0021f96:	fc                   	cld    
c0021f97:	89 df                	mov    edi,ebx
c0021f99:	89 de                	mov    esi,ebx
c0021f9b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021f9d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021fa1:	83 c4 2c             	add    esp,0x2c
c0021fa4:	5b                   	pop    ebx
c0021fa5:	5e                   	pop    esi
c0021fa6:	5f                   	pop    edi
c0021fa7:	5d                   	pop    ebp
c0021fa8:	e9 59 1c ff ff       	jmp    c0013c06 <Device::preOpenPCI(PCIDeviceInfo)>
c0021fad:	83 c4 1c             	add    esp,0x1c
c0021fb0:	5b                   	pop    ebx
c0021fb1:	5e                   	pop    esi
c0021fb2:	5f                   	pop    edi
c0021fb3:	5d                   	pop    ebp
c0021fb4:	c3                   	ret    
c0021fb5:	90                   	nop

c0021fb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021fb6:	55                   	push   ebp
c0021fb7:	57                   	push   edi
c0021fb8:	56                   	push   esi
c0021fb9:	53                   	push   ebx
c0021fba:	83 ec 5c             	sub    esp,0x5c
c0021fbd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021fc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021fc5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021fc9:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021fce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021fd2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021fd6:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021fdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021fdf:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021fe4:	6a 0c                	push   0xc
c0021fe6:	55                   	push   ebp
c0021fe7:	53                   	push   ebx
c0021fe8:	57                   	push   edi
c0021fe9:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021ff0:	e8 01 fc ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ff5:	55                   	push   ebp
c0021ff6:	53                   	push   ebx
c0021ff7:	57                   	push   edi
c0021ff8:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021fff:	e8 80 fc ff ff       	call   c0021c84 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022004:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022009:	83 c4 24             	add    esp,0x24
c002200c:	55                   	push   ebp
c002200d:	53                   	push   ebx
c002200e:	57                   	push   edi
c002200f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022013:	e8 f6 fc ff ff       	call   c0021d0e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022018:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002201c:	6a 3c                	push   0x3c
c002201e:	55                   	push   ebp
c002201f:	53                   	push   ebx
c0022020:	57                   	push   edi
c0022021:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022028:	e8 c9 fb ff ff       	call   c0021bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002202d:	0f b6 c4             	movzx  eax,ah
c0022030:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022034:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022038:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002203c:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0022041:	83 c4 24             	add    esp,0x24
c0022044:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002204a:	83 b8 5c 09 00 00 00 	cmp    DWORD PTR [eax+0x95c],0x0
c0022051:	74 6c                	je     c00220bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022053:	31 f6                	xor    esi,esi
c0022055:	8b 15 88 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd88
c002205b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022061:	39 b2 5c 09 00 00    	cmp    DWORD PTR [edx+0x95c],esi
c0022067:	7e 56                	jle    c00220bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022069:	8d 14 f2             	lea    edx,[edx+esi*8]
c002206c:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022073:	39 cb                	cmp    ebx,ecx
c0022075:	75 45                	jne    c00220bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022077:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002207e:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022082:	75 38                	jne    c00220bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022084:	83 ec 0c             	sub    esp,0xc
c0022087:	68 e2 b3 02 c0       	push   0xc002b3e2
c002208c:	e8 44 08 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022091:	8b 15 88 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd88
c0022097:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002209d:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00220a5:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00220a9:	52                   	push   edx
c00220aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220ae:	53                   	push   ebx
c00220af:	68 07 b4 02 c0       	push   0xc002b407
c00220b4:	e8 1c 08 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00220b9:	83 c4 20             	add    esp,0x20
c00220bc:	46                   	inc    esi
c00220bd:	eb 96                	jmp    c0022055 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00220bf:	31 d2                	xor    edx,edx
c00220c1:	83 ec 0c             	sub    esp,0xc
c00220c4:	55                   	push   ebp
c00220c5:	53                   	push   ebx
c00220c6:	57                   	push   edi
c00220c7:	52                   	push   edx
c00220c8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00220cc:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00220d3:	e8 7c fc ff ff       	call   c0021d54 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220d8:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00220dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00220e0:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00220e4:	42                   	inc    edx
c00220e5:	83 c4 20             	add    esp,0x20
c00220e8:	83 fa 06             	cmp    edx,0x6
c00220eb:	75 d4                	jne    c00220c1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00220ed:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00220f1:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00220f5:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00220f9:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00220fd:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022101:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022105:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002210a:	86 e0                	xchg   al,ah
c002210c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022111:	55                   	push   ebp
c0022112:	53                   	push   ebx
c0022113:	57                   	push   edi
c0022114:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022118:	e8 ab fb ff ff       	call   c0021cc8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002211d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022121:	55                   	push   ebp
c0022122:	53                   	push   ebx
c0022123:	57                   	push   edi
c0022124:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002212b:	e8 0e fb ff ff       	call   c0021c3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022130:	83 ec 0c             	sub    esp,0xc
c0022133:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022138:	b9 09 00 00 00       	mov    ecx,0x9
c002213d:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022141:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022145:	fc                   	cld    
c0022146:	89 e7                	mov    edi,esp
c0022148:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002214a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022151:	e8 ee fc ff ff       	call   c0021e44 <PCI::foundDevice(PCIDeviceInfo)>
c0022156:	81 c4 8c 00 00 00    	add    esp,0x8c
c002215c:	5b                   	pop    ebx
c002215d:	5e                   	pop    esi
c002215e:	5f                   	pop    edi
c002215f:	5d                   	pop    ebp
c0022160:	c3                   	ret    
c0022161:	90                   	nop

c0022162 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022162:	55                   	push   ebp
c0022163:	57                   	push   edi
c0022164:	56                   	push   esi
c0022165:	53                   	push   ebx
c0022166:	83 ec 0c             	sub    esp,0xc
c0022169:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002216d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022172:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022177:	6a 00                	push   0x0
c0022179:	56                   	push   esi
c002217a:	57                   	push   edi
c002217b:	55                   	push   ebp
c002217c:	e8 bd fa ff ff       	call   c0021c3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022181:	6a 00                	push   0x0
c0022183:	56                   	push   esi
c0022184:	57                   	push   edi
c0022185:	55                   	push   ebp
c0022186:	e8 2b fe ff ff       	call   c0021fb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002218b:	83 c4 20             	add    esp,0x20
c002218e:	6a 00                	push   0x0
c0022190:	56                   	push   esi
c0022191:	57                   	push   edi
c0022192:	55                   	push   ebp
c0022193:	e8 c8 fa ff ff       	call   c0021c60 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022198:	83 c4 10             	add    esp,0x10
c002219b:	84 c0                	test   al,al
c002219d:	79 27                	jns    c00221c6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002219f:	bb 01 00 00 00       	mov    ebx,0x1
c00221a4:	53                   	push   ebx
c00221a5:	56                   	push   esi
c00221a6:	57                   	push   edi
c00221a7:	55                   	push   ebp
c00221a8:	e8 91 fa ff ff       	call   c0021c3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00221ad:	83 c4 10             	add    esp,0x10
c00221b0:	66 40                	inc    ax
c00221b2:	74 0c                	je     c00221c0 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00221b4:	53                   	push   ebx
c00221b5:	56                   	push   esi
c00221b6:	57                   	push   edi
c00221b7:	55                   	push   ebp
c00221b8:	e8 f9 fd ff ff       	call   c0021fb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00221bd:	83 c4 10             	add    esp,0x10
c00221c0:	43                   	inc    ebx
c00221c1:	83 fb 08             	cmp    ebx,0x8
c00221c4:	75 de                	jne    c00221a4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00221c6:	83 c4 0c             	add    esp,0xc
c00221c9:	5b                   	pop    ebx
c00221ca:	5e                   	pop    esi
c00221cb:	5f                   	pop    edi
c00221cc:	5d                   	pop    ebp
c00221cd:	c3                   	ret    

c00221ce <PCI::detect()>:
c00221ce:	56                   	push   esi
c00221cf:	53                   	push   ebx
c00221d0:	53                   	push   ebx
c00221d1:	31 db                	xor    ebx,ebx
c00221d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00221d7:	6a 00                	push   0x0
c00221d9:	6a 00                	push   0x0
c00221db:	6a 00                	push   0x0
c00221dd:	56                   	push   esi
c00221de:	e8 7d fa ff ff       	call   c0021c60 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00221e3:	83 c4 10             	add    esp,0x10
c00221e6:	a8 80                	test   al,0x80
c00221e8:	75 21                	jne    c002220b <PCI::detect()+0x3d>
c00221ea:	51                   	push   ecx
c00221eb:	51                   	push   ecx
c00221ec:	6a 00                	push   0x0
c00221ee:	56                   	push   esi
c00221ef:	e8 2c fc ff ff       	call   c0021e20 <PCI::checkBus(unsigned char)>
c00221f4:	83 c4 10             	add    esp,0x10
c00221f7:	eb 24                	jmp    c002221d <PCI::detect()+0x4f>
c00221f9:	52                   	push   edx
c00221fa:	52                   	push   edx
c00221fb:	53                   	push   ebx
c00221fc:	43                   	inc    ebx
c00221fd:	56                   	push   esi
c00221fe:	e8 1d fc ff ff       	call   c0021e20 <PCI::checkBus(unsigned char)>
c0022203:	83 c4 10             	add    esp,0x10
c0022206:	83 fb 08             	cmp    ebx,0x8
c0022209:	74 12                	je     c002221d <PCI::detect()+0x4f>
c002220b:	53                   	push   ebx
c002220c:	6a 00                	push   0x0
c002220e:	6a 00                	push   0x0
c0022210:	56                   	push   esi
c0022211:	e8 28 fa ff ff       	call   c0021c3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022216:	83 c4 10             	add    esp,0x10
c0022219:	66 40                	inc    ax
c002221b:	74 dc                	je     c00221f9 <PCI::detect()+0x2b>
c002221d:	58                   	pop    eax
c002221e:	5b                   	pop    ebx
c002221f:	5e                   	pop    esi
c0022220:	c3                   	ret    
c0022221:	90                   	nop

c0022222 <IDE::close(int, int, void*)>:
c0022222:	83 c8 ff             	or     eax,0xffffffff
c0022225:	c3                   	ret    

c0022226 <IDE::IDE()>:
c0022226:	83 ec 0c             	sub    esp,0xc
c0022229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222d:	83 ec 08             	sub    esp,0x8
c0022230:	68 50 b4 02 c0       	push   0xc002b450
c0022235:	50                   	push   eax
c0022236:	e8 4d 1e ff ff       	call   c0014088 <HardDiskController::HardDiskController(char const*)>
c002223b:	83 c4 10             	add    esp,0x10
c002223e:	ba 90 b6 02 c0       	mov    edx,0xc002b690
c0022243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022247:	89 10                	mov    DWORD PTR [eax],edx
c0022249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022254:	90                   	nop
c0022255:	83 c4 0c             	add    esp,0xc
c0022258:	c3                   	ret    
c0022259:	90                   	nop

c002225a <IDE::prepareInterrupt(unsigned char)>:
c002225a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002225f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022263:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002226b:	c3                   	ret    

c002226c <selectDrive(unsigned char, unsigned char)>:
c002226c:	c3                   	ret    
c002226d:	90                   	nop

c002226e <IDE::getBase(unsigned char)>:
c002226e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022273:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022277:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002227f:	c3                   	ret    

c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022280:	55                   	push   ebp
c0022281:	57                   	push   edi
c0022282:	56                   	push   esi
c0022283:	53                   	push   ebx
c0022284:	83 ec 1c             	sub    esp,0x1c
c0022287:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002228b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002228f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022292:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022296:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002229a:	80 f9 03             	cmp    cl,0x3
c002229d:	77 51                	ja     c00222f0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002229f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00222a3:	0f b6 f2             	movzx  esi,dl
c00222a6:	0f b6 db             	movzx  ebx,bl
c00222a9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00222ac:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00222b0:	83 ca 80             	or     edx,0xffffff80
c00222b3:	0f b6 d2             	movzx  edx,dl
c00222b6:	52                   	push   edx
c00222b7:	6a 0c                	push   0xc
c00222b9:	56                   	push   esi
c00222ba:	57                   	push   edi
c00222bb:	e8 c0 ff ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00222c0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00222c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00222c9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00222cd:	ee                   	out    dx,al
c00222ce:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00222d3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00222d7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00222db:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00222df:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00222e7:	83 c4 2c             	add    esp,0x2c
c00222ea:	5b                   	pop    ebx
c00222eb:	5e                   	pop    esi
c00222ec:	5f                   	pop    edi
c00222ed:	5d                   	pop    ebp
c00222ee:	eb 90                	jmp    c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00222f0:	80 fb 07             	cmp    bl,0x7
c00222f3:	77 12                	ja     c0022307 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00222f5:	0f b6 d2             	movzx  edx,dl
c00222f8:	0f b6 db             	movzx  ebx,bl
c00222fb:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022303:	89 da                	mov    edx,ebx
c0022305:	eb 2f                	jmp    c0022336 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022307:	80 fb 0d             	cmp    bl,0xd
c002230a:	77 13                	ja     c002231f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002230c:	0f b6 d2             	movzx  edx,dl
c002230f:	0f b6 db             	movzx  ebx,bl
c0022312:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022319:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002231d:	eb 17                	jmp    c0022336 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002231f:	80 fb 15             	cmp    bl,0x15
c0022322:	77 13                	ja     c0022337 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022324:	0f b6 d2             	movzx  edx,dl
c0022327:	0f b6 db             	movzx  ebx,bl
c002232a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022332:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022336:	ee                   	out    dx,al
c0022337:	83 c4 1c             	add    esp,0x1c
c002233a:	5b                   	pop    ebx
c002233b:	5e                   	pop    esi
c002233c:	5f                   	pop    edi
c002233d:	5d                   	pop    ebp
c002233e:	c3                   	ret    
c002233f:	90                   	nop

c0022340 <IDE::read(unsigned char, unsigned char)>:
c0022340:	55                   	push   ebp
c0022341:	57                   	push   edi
c0022342:	56                   	push   esi
c0022343:	53                   	push   ebx
c0022344:	83 ec 1c             	sub    esp,0x1c
c0022347:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002234b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002234f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022352:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022356:	3c 03                	cmp    al,0x3
c0022358:	77 43                	ja     c002239d <IDE::read(unsigned char, unsigned char)+0x5d>
c002235a:	0f b6 f2             	movzx  esi,dl
c002235d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022360:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022364:	83 c8 80             	or     eax,0xffffff80
c0022367:	0f b6 c0             	movzx  eax,al
c002236a:	50                   	push   eax
c002236b:	6a 0c                	push   0xc
c002236d:	56                   	push   esi
c002236e:	57                   	push   edi
c002236f:	e8 0c ff ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022374:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022379:	0f b6 c3             	movzx  eax,bl
c002237c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022380:	ec                   	in     al,dx
c0022381:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022385:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002238a:	52                   	push   edx
c002238b:	6a 0c                	push   0xc
c002238d:	56                   	push   esi
c002238e:	57                   	push   edi
c002238f:	e8 ec fe ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022394:	83 c4 20             	add    esp,0x20
c0022397:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002239b:	eb 49                	jmp    c00223e6 <IDE::read(unsigned char, unsigned char)+0xa6>
c002239d:	80 fb 07             	cmp    bl,0x7
c00223a0:	77 12                	ja     c00223b4 <IDE::read(unsigned char, unsigned char)+0x74>
c00223a2:	0f b6 d2             	movzx  edx,dl
c00223a5:	0f b6 c3             	movzx  eax,bl
c00223a8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00223b0:	89 c2                	mov    edx,eax
c00223b2:	eb 31                	jmp    c00223e5 <IDE::read(unsigned char, unsigned char)+0xa5>
c00223b4:	80 fb 0d             	cmp    bl,0xd
c00223b7:	77 13                	ja     c00223cc <IDE::read(unsigned char, unsigned char)+0x8c>
c00223b9:	0f b6 d2             	movzx  edx,dl
c00223bc:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00223c3:	0f b6 d3             	movzx  edx,bl
c00223c6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00223ca:	eb 19                	jmp    c00223e5 <IDE::read(unsigned char, unsigned char)+0xa5>
c00223cc:	31 c0                	xor    eax,eax
c00223ce:	80 fb 15             	cmp    bl,0x15
c00223d1:	77 13                	ja     c00223e6 <IDE::read(unsigned char, unsigned char)+0xa6>
c00223d3:	0f b6 d2             	movzx  edx,dl
c00223d6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00223de:	0f b6 d3             	movzx  edx,bl
c00223e1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00223e5:	ec                   	in     al,dx
c00223e6:	83 c4 1c             	add    esp,0x1c
c00223e9:	5b                   	pop    ebx
c00223ea:	5e                   	pop    esi
c00223eb:	5f                   	pop    edi
c00223ec:	5d                   	pop    ebp
c00223ed:	c3                   	ret    

c00223ee <IDE::waitInterrupt(unsigned char)>:
c00223ee:	55                   	push   ebp
c00223ef:	57                   	push   edi
c00223f0:	56                   	push   esi
c00223f1:	53                   	push   ebx
c00223f2:	31 db                	xor    ebx,ebx
c00223f4:	83 ec 0c             	sub    esp,0xc
c00223f7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00223fb:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022400:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022408:	89 e8                	mov    eax,ebp
c002240a:	84 c0                	test   al,al
c002240c:	75 34                	jne    c0022442 <IDE::waitInterrupt(unsigned char)+0x54>
c002240e:	52                   	push   edx
c002240f:	6a 0c                	push   0xc
c0022411:	56                   	push   esi
c0022412:	57                   	push   edi
c0022413:	e8 28 ff ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022418:	83 c4 10             	add    esp,0x10
c002241b:	a8 01                	test   al,0x1
c002241d:	75 2b                	jne    c002244a <IDE::waitInterrupt(unsigned char)+0x5c>
c002241f:	f6 c3 04             	test   bl,0x4
c0022422:	75 16                	jne    c002243a <IDE::waitInterrupt(unsigned char)+0x4c>
c0022424:	83 fb 32             	cmp    ebx,0x32
c0022427:	7e 11                	jle    c002243a <IDE::waitInterrupt(unsigned char)+0x4c>
c0022429:	50                   	push   eax
c002242a:	50                   	push   eax
c002242b:	6a 00                	push   0x0
c002242d:	68 80 96 98 00       	push   0x989680
c0022432:	e8 8b b1 ff ff       	call   c001d5c2 <nanoSleep(unsigned long long)>
c0022437:	83 c4 10             	add    esp,0x10
c002243a:	83 fb 3c             	cmp    ebx,0x3c
c002243d:	74 0b                	je     c002244a <IDE::waitInterrupt(unsigned char)+0x5c>
c002243f:	43                   	inc    ebx
c0022440:	eb be                	jmp    c0022400 <IDE::waitInterrupt(unsigned char)+0x12>
c0022442:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002244a:	83 c4 0c             	add    esp,0xc
c002244d:	89 e8                	mov    eax,ebp
c002244f:	5b                   	pop    ebx
c0022450:	5e                   	pop    esi
c0022451:	5f                   	pop    edi
c0022452:	5d                   	pop    ebp
c0022453:	c3                   	ret    

c0022454 <ideChannel0IRQHandler(regs*, void*)>:
c0022454:	83 ec 10             	sub    esp,0x10
c0022457:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002245b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022462:	6a 07                	push   0x7
c0022464:	6a 00                	push   0x0
c0022466:	50                   	push   eax
c0022467:	e8 d4 fe ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c002246c:	83 c4 1c             	add    esp,0x1c
c002246f:	c3                   	ret    

c0022470 <ideChannel1IRQHandler(regs*, void*)>:
c0022470:	83 ec 10             	sub    esp,0x10
c0022473:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022477:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002247e:	6a 07                	push   0x7
c0022480:	6a 01                	push   0x1
c0022482:	50                   	push   eax
c0022483:	e8 b8 fe ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022488:	83 c4 1c             	add    esp,0x1c
c002248b:	c3                   	ret    

c002248c <IDE::enableIRQs(unsigned char, bool)>:
c002248c:	57                   	push   edi
c002248d:	56                   	push   esi
c002248e:	be 04 00 00 00       	mov    esi,0x4
c0022493:	53                   	push   ebx
c0022494:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022499:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002249d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00224a2:	0f 94 c0             	sete   al
c00224a5:	d1 e0                	shl    eax,1
c00224a7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00224ae:	0f b6 c0             	movzx  eax,al
c00224b1:	50                   	push   eax
c00224b2:	6a 0c                	push   0xc
c00224b4:	57                   	push   edi
c00224b5:	53                   	push   ebx
c00224b6:	e8 c5 fd ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224bb:	83 c4 10             	add    esp,0x10
c00224be:	50                   	push   eax
c00224bf:	6a 0c                	push   0xc
c00224c1:	57                   	push   edi
c00224c2:	53                   	push   ebx
c00224c3:	e8 78 fe ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c00224c8:	83 c4 10             	add    esp,0x10
c00224cb:	4e                   	dec    esi
c00224cc:	75 f0                	jne    c00224be <IDE::enableIRQs(unsigned char, bool)+0x32>
c00224ce:	5b                   	pop    ebx
c00224cf:	5e                   	pop    esi
c00224d0:	5f                   	pop    edi
c00224d1:	c3                   	ret    

c00224d2 <IDE::open(int, int, void*)>:
c00224d2:	55                   	push   ebp
c00224d3:	57                   	push   edi
c00224d4:	56                   	push   esi
c00224d5:	53                   	push   ebx
c00224d6:	83 ec 1c             	sub    esp,0x1c
c00224d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00224dd:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00224e6:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00224ef:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00224f6:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00224fd:	0f 85 b0 02 00 00    	jne    c00227b3 <IDE::open(int, int, void*)+0x2e1>
c0022503:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022509:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002250d:	83 e0 7f             	and    eax,0x7f
c0022510:	3c 05                	cmp    al,0x5
c0022512:	74 04                	je     c0022518 <IDE::open(int, int, void*)+0x46>
c0022514:	3c 0f                	cmp    al,0xf
c0022516:	75 32                	jne    c002254a <IDE::open(int, int, void*)+0x78>
c0022518:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002251e:	83 e0 fc             	and    eax,0xfffffffc
c0022521:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022528:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002252e:	83 e0 fc             	and    eax,0xfffffffc
c0022531:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022538:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002253e:	83 e0 fc             	and    eax,0xfffffffc
c0022541:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022548:	eb 14                	jmp    c002255e <IDE::open(int, int, void*)+0x8c>
c002254a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022554:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002255e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022565:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002256c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022570:	89 c6                	mov    esi,eax
c0022572:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022577:	c1 e6 10             	shl    esi,0x10
c002257a:	89 e8                	mov    eax,ebp
c002257c:	89 fa                	mov    edx,edi
c002257e:	c1 e0 0b             	shl    eax,0xb
c0022581:	09 f0                	or     eax,esi
c0022583:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002258a:	c1 e6 08             	shl    esi,0x8
c002258d:	09 c6                	or     esi,eax
c002258f:	89 f0                	mov    eax,esi
c0022591:	0d 08 00 00 80       	or     eax,0x80000008
c0022596:	ef                   	out    dx,eax
c0022597:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002259c:	89 ca                	mov    edx,ecx
c002259e:	ed                   	in     eax,dx
c002259f:	c1 e8 10             	shr    eax,0x10
c00225a2:	3d ff ff 00 00       	cmp    eax,0xffff
c00225a7:	0f 84 f5 00 00 00    	je     c00226a2 <IDE::open(int, int, void*)+0x1d0>
c00225ad:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00225b3:	89 fa                	mov    edx,edi
c00225b5:	89 f0                	mov    eax,esi
c00225b7:	ef                   	out    dx,eax
c00225b8:	b0 fe                	mov    al,0xfe
c00225ba:	89 ca                	mov    edx,ecx
c00225bc:	ee                   	out    dx,al
c00225bd:	89 f0                	mov    eax,esi
c00225bf:	89 fa                	mov    edx,edi
c00225c1:	ef                   	out    dx,eax
c00225c2:	89 ca                	mov    edx,ecx
c00225c4:	ed                   	in     eax,dx
c00225c5:	3c fe                	cmp    al,0xfe
c00225c7:	0f 85 a9 00 00 00    	jne    c0022676 <IDE::open(int, int, void*)+0x1a4>
c00225cd:	8b 15 88 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd88
c00225d3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00225da:	74 33                	je     c002260f <IDE::open(int, int, void*)+0x13d>
c00225dc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00225e2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00225e6:	40                   	inc    eax
c00225e7:	83 ec 0c             	sub    esp,0xc
c00225ea:	0f b6 c0             	movzx  eax,al
c00225ed:	50                   	push   eax
c00225ee:	55                   	push   ebp
c00225ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00225f3:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00225f9:	51                   	push   ecx
c00225fa:	e8 27 53 ff ff       	call   c0017926 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00225ff:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022604:	83 c4 1c             	add    esp,0x1c
c0022607:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002260d:	eb 0a                	jmp    c0022619 <IDE::open(int, int, void*)+0x147>
c002260f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022619:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022620:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022627:	c1 e1 10             	shl    ecx,0x10
c002262a:	c1 e0 08             	shl    eax,0x8
c002262d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022632:	09 c1                	or     ecx,eax
c0022634:	89 fa                	mov    edx,edi
c0022636:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002263d:	c1 e0 0b             	shl    eax,0xb
c0022640:	09 c1                	or     ecx,eax
c0022642:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022648:	89 c8                	mov    eax,ecx
c002264a:	ef                   	out    dx,eax
c002264b:	be fc 0c 00 00       	mov    esi,0xcfc
c0022650:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022656:	89 f2                	mov    edx,esi
c0022658:	ee                   	out    dx,al
c0022659:	89 c8                	mov    eax,ecx
c002265b:	89 fa                	mov    edx,edi
c002265d:	ef                   	out    dx,eax
c002265e:	89 f2                	mov    edx,esi
c0022660:	ed                   	in     eax,dx
c0022661:	0f b6 c0             	movzx  eax,al
c0022664:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002266a:	74 46                	je     c00226b2 <IDE::open(int, int, void*)+0x1e0>
c002266c:	83 ec 0c             	sub    esp,0xc
c002266f:	68 68 b4 02 c0       	push   0xc002b468
c0022674:	eb 34                	jmp    c00226aa <IDE::open(int, int, void*)+0x1d8>
c0022676:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002267f:	75 17                	jne    c0022698 <IDE::open(int, int, void*)+0x1c6>
c0022681:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022686:	74 07                	je     c002268f <IDE::open(int, int, void*)+0x1bd>
c0022688:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002268d:	75 09                	jne    c0022698 <IDE::open(int, int, void*)+0x1c6>
c002268f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022696:	eb 1a                	jmp    c00226b2 <IDE::open(int, int, void*)+0x1e0>
c0022698:	83 ec 0c             	sub    esp,0xc
c002269b:	68 70 b4 02 c0       	push   0xc002b470
c00226a0:	eb 08                	jmp    c00226aa <IDE::open(int, int, void*)+0x1d8>
c00226a2:	83 ec 0c             	sub    esp,0xc
c00226a5:	68 a1 b4 02 c0       	push   0xc002b4a1
c00226aa:	e8 14 74 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00226af:	83 c4 10             	add    esp,0x10
c00226b2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00226b9:	79 1a                	jns    c00226d5 <IDE::open(int, int, void*)+0x203>
c00226bb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00226c1:	83 e0 fc             	and    eax,0xfffffffc
c00226c4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00226cb:	83 c0 08             	add    eax,0x8
c00226ce:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00226d5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00226db:	89 c2                	mov    edx,eax
c00226dd:	83 e2 0f             	and    edx,0xf
c00226e0:	66 83 fa 08          	cmp    dx,0x8
c00226e4:	75 0a                	jne    c00226f0 <IDE::open(int, int, void*)+0x21e>
c00226e6:	83 e8 02             	sub    eax,0x2
c00226e9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00226f0:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00226f6:	89 c2                	mov    edx,eax
c00226f8:	83 e2 0f             	and    edx,0xf
c00226fb:	66 83 fa 08          	cmp    dx,0x8
c00226ff:	75 0a                	jne    c002270b <IDE::open(int, int, void*)+0x239>
c0022701:	83 e8 02             	sub    eax,0x2
c0022704:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002270b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022712:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022719:	89 d0                	mov    eax,edx
c002271b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002271e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022722:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022726:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022729:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002272e:	0f b6 c9             	movzx  ecx,cl
c0022731:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022738:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002273b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002273f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022743:	8d 50 02             	lea    edx,[eax+0x2]
c0022746:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002274b:	0f b6 d2             	movzx  edx,dl
c002274e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022754:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022757:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002275b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002275f:	8d 48 03             	lea    ecx,[eax+0x3]
c0022762:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022767:	0f b6 c9             	movzx  ecx,cl
c002276a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022770:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022773:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022777:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002277b:	8d 50 04             	lea    edx,[eax+0x4]
c002277e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022784:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022789:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022790:	66 85 f6             	test   si,si
c0022793:	74 3e                	je     c00227d3 <IDE::open(int, int, void*)+0x301>
c0022795:	0f b6 d2             	movzx  edx,dl
c0022798:	83 c0 05             	add    eax,0x5
c002279b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002279e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00227a2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00227a6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00227ac:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00227b1:	eb 20                	jmp    c00227d3 <IDE::open(int, int, void*)+0x301>
c00227b3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00227bd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00227c7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00227ce:	e9 02 ff ff ff       	jmp    c00226d5 <IDE::open(int, int, void*)+0x203>
c00227d3:	52                   	push   edx
c00227d4:	52                   	push   edx
c00227d5:	6a 00                	push   0x0
c00227d7:	53                   	push   ebx
c00227d8:	e8 7d fa ff ff       	call   c002225a <IDE::prepareInterrupt(unsigned char)>
c00227dd:	59                   	pop    ecx
c00227de:	5e                   	pop    esi
c00227df:	6a 01                	push   0x1
c00227e1:	53                   	push   ebx
c00227e2:	e8 73 fa ff ff       	call   c002225a <IDE::prepareInterrupt(unsigned char)>
c00227e7:	83 c4 0c             	add    esp,0xc
c00227ea:	6a 00                	push   0x0
c00227ec:	6a 00                	push   0x0
c00227ee:	53                   	push   ebx
c00227ef:	e8 98 fc ff ff       	call   c002248c <IDE::enableIRQs(unsigned char, bool)>
c00227f4:	83 c4 0c             	add    esp,0xc
c00227f7:	6a 00                	push   0x0
c00227f9:	6a 01                	push   0x1
c00227fb:	53                   	push   ebx
c00227fc:	e8 8b fc ff ff       	call   c002248c <IDE::enableIRQs(unsigned char, bool)>
c0022801:	83 c4 10             	add    esp,0x10
c0022804:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002280b:	74 40                	je     c002284d <IDE::open(int, int, void*)+0x37b>
c002280d:	83 ec 0c             	sub    esp,0xc
c0022810:	68 cb b4 02 c0       	push   0xc002b4cb
c0022815:	e8 bb 00 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c002281a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002281d:	6a 01                	push   0x1
c002281f:	68 54 24 02 c0       	push   0xc0022454
c0022824:	6a 0e                	push   0xe
c0022826:	53                   	push   ebx
c0022827:	e8 54 14 ff ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002282c:	83 c4 14             	add    esp,0x14
c002282f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022835:	53                   	push   ebx
c0022836:	6a 01                	push   0x1
c0022838:	68 70 24 02 c0       	push   0xc0022470
c002283d:	6a 0f                	push   0xf
c002283f:	53                   	push   ebx
c0022840:	e8 3b 14 ff ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022845:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002284b:	eb 4a                	jmp    c0022897 <IDE::open(int, int, void*)+0x3c5>
c002284d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022857:	50                   	push   eax
c0022858:	6a 0f                	push   0xf
c002285a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022860:	68 e7 b4 02 c0       	push   0xc002b4e7
c0022865:	e8 6b 00 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c002286a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002286d:	6a 00                	push   0x0
c002286f:	68 54 24 02 c0       	push   0xc0022454
c0022874:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002287a:	53                   	push   ebx
c002287b:	e8 00 14 ff ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022880:	83 c4 14             	add    esp,0x14
c0022883:	53                   	push   ebx
c0022884:	6a 00                	push   0x0
c0022886:	68 70 24 02 c0       	push   0xc0022470
c002288b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022891:	53                   	push   ebx
c0022892:	e8 e9 13 ff ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022897:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022899:	83 c4 20             	add    esp,0x20
c002289c:	83 ec 0c             	sub    esp,0xc
c002289f:	53                   	push   ebx
c00228a0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00228a3:	83 c4 0c             	add    esp,0xc
c00228a6:	6a 07                	push   0x7
c00228a8:	6a 00                	push   0x0
c00228aa:	53                   	push   ebx
c00228ab:	e8 90 fa ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c00228b0:	83 c4 0c             	add    esp,0xc
c00228b3:	6a 07                	push   0x7
c00228b5:	6a 01                	push   0x1
c00228b7:	53                   	push   ebx
c00228b8:	e8 83 fa ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c00228bd:	83 c4 0c             	add    esp,0xc
c00228c0:	6a 01                	push   0x1
c00228c2:	6a 00                	push   0x0
c00228c4:	53                   	push   ebx
c00228c5:	e8 c2 fb ff ff       	call   c002248c <IDE::enableIRQs(unsigned char, bool)>
c00228ca:	83 c4 0c             	add    esp,0xc
c00228cd:	6a 01                	push   0x1
c00228cf:	6a 01                	push   0x1
c00228d1:	53                   	push   ebx
c00228d2:	e8 b5 fb ff ff       	call   c002248c <IDE::enableIRQs(unsigned char, bool)>
c00228d7:	83 c4 2c             	add    esp,0x2c
c00228da:	31 c0                	xor    eax,eax
c00228dc:	5b                   	pop    ebx
c00228dd:	5e                   	pop    esi
c00228de:	5f                   	pop    edi
c00228df:	5d                   	pop    ebp
c00228e0:	c3                   	ret    
c00228e1:	90                   	nop

c00228e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00228e2:	55                   	push   ebp
c00228e3:	57                   	push   edi
c00228e4:	56                   	push   esi
c00228e5:	53                   	push   ebx
c00228e6:	83 ec 1c             	sub    esp,0x1c
c00228e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00228ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00228f1:	8d 50 f8             	lea    edx,[eax-0x8]
c00228f4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00228f8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00228fc:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022900:	80 fa 03             	cmp    dl,0x3
c0022903:	77 5d                	ja     c0022962 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022905:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002290d:	0f b6 db             	movzx  ebx,bl
c0022910:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022913:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022917:	83 ca 80             	or     edx,0xffffff80
c002291a:	0f b6 d2             	movzx  edx,dl
c002291d:	52                   	push   edx
c002291e:	6a 0c                	push   0xc
c0022920:	53                   	push   ebx
c0022921:	56                   	push   esi
c0022922:	e8 59 f9 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022927:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002292c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022930:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022934:	0f b6 c0             	movzx  eax,al
c0022937:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002293b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002293d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022942:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022946:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002294a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002294e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022956:	83 c4 2c             	add    esp,0x2c
c0022959:	5b                   	pop    ebx
c002295a:	5e                   	pop    esi
c002295b:	5f                   	pop    edi
c002295c:	5d                   	pop    ebp
c002295d:	e9 1e f9 ff ff       	jmp    c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022962:	3c 07                	cmp    al,0x7
c0022964:	77 10                	ja     c0022976 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022966:	0f b6 db             	movzx  ebx,bl
c0022969:	0f b6 d0             	movzx  edx,al
c002296c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022974:	eb 2d                	jmp    c00229a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022976:	3c 0d                	cmp    al,0xd
c0022978:	77 13                	ja     c002298d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002297a:	0f b6 db             	movzx  ebx,bl
c002297d:	0f b6 c0             	movzx  eax,al
c0022980:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022987:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002298b:	eb 16                	jmp    c00229a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002298d:	3c 15                	cmp    al,0x15
c002298f:	77 14                	ja     c00229a5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022991:	0f b6 db             	movzx  ebx,bl
c0022994:	0f b6 c0             	movzx  eax,al
c0022997:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002299f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00229a3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00229a5:	83 c4 1c             	add    esp,0x1c
c00229a8:	5b                   	pop    ebx
c00229a9:	5e                   	pop    esi
c00229aa:	5f                   	pop    edi
c00229ab:	5d                   	pop    ebp
c00229ac:	c3                   	ret    
c00229ad:	90                   	nop

c00229ae <IDE::detect()>:
c00229ae:	55                   	push   ebp
c00229af:	57                   	push   edi
c00229b0:	56                   	push   esi
c00229b1:	53                   	push   ebx
c00229b2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00229b8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00229bf:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00229c6:	0f 85 be 02 00 00    	jne    c0022c8a <IDE::detect()+0x2dc>
c00229cc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00229d3:	31 f6                	xor    esi,esi
c00229d5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00229dd:	31 ed                	xor    ebp,ebp
c00229df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229e3:	c1 e0 06             	shl    eax,0x6
c00229e6:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00229ee:	89 e8                	mov    eax,ebp
c00229f0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00229f4:	c1 e0 04             	shl    eax,0x4
c00229f7:	83 c8 a0             	or     eax,0xffffffa0
c00229fa:	0f b6 c0             	movzx  eax,al
c00229fd:	50                   	push   eax
c00229fe:	6a 06                	push   0x6
c0022a00:	56                   	push   esi
c0022a01:	53                   	push   ebx
c0022a02:	e8 79 f8 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a07:	83 c4 0c             	add    esp,0xc
c0022a0a:	6a 0c                	push   0xc
c0022a0c:	56                   	push   esi
c0022a0d:	53                   	push   ebx
c0022a0e:	e8 2d f9 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022a13:	83 c4 0c             	add    esp,0xc
c0022a16:	6a 0c                	push   0xc
c0022a18:	56                   	push   esi
c0022a19:	53                   	push   ebx
c0022a1a:	e8 21 f9 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022a1f:	83 c4 0c             	add    esp,0xc
c0022a22:	6a 0c                	push   0xc
c0022a24:	56                   	push   esi
c0022a25:	53                   	push   ebx
c0022a26:	e8 15 f9 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022a2b:	83 c4 0c             	add    esp,0xc
c0022a2e:	6a 0c                	push   0xc
c0022a30:	56                   	push   esi
c0022a31:	53                   	push   ebx
c0022a32:	e8 09 f9 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022a37:	68 ec 00 00 00       	push   0xec
c0022a3c:	6a 07                	push   0x7
c0022a3e:	56                   	push   esi
c0022a3f:	53                   	push   ebx
c0022a40:	e8 3b f8 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a45:	83 c4 1c             	add    esp,0x1c
c0022a48:	6a 0c                	push   0xc
c0022a4a:	56                   	push   esi
c0022a4b:	53                   	push   ebx
c0022a4c:	e8 ef f8 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022a51:	83 c4 0c             	add    esp,0xc
c0022a54:	6a 0c                	push   0xc
c0022a56:	56                   	push   esi
c0022a57:	53                   	push   ebx
c0022a58:	e8 e3 f8 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022a5d:	83 c4 0c             	add    esp,0xc
c0022a60:	6a 0c                	push   0xc
c0022a62:	56                   	push   esi
c0022a63:	53                   	push   ebx
c0022a64:	e8 d7 f8 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022a69:	83 c4 0c             	add    esp,0xc
c0022a6c:	6a 0c                	push   0xc
c0022a6e:	56                   	push   esi
c0022a6f:	53                   	push   ebx
c0022a70:	e8 cb f8 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022a75:	83 c4 0c             	add    esp,0xc
c0022a78:	6a 0c                	push   0xc
c0022a7a:	56                   	push   esi
c0022a7b:	53                   	push   ebx
c0022a7c:	e8 bf f8 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022a81:	83 c4 10             	add    esp,0x10
c0022a84:	84 c0                	test   al,al
c0022a86:	0f 84 8b 01 00 00    	je     c0022c17 <IDE::detect()+0x269>
c0022a8c:	31 ff                	xor    edi,edi
c0022a8e:	50                   	push   eax
c0022a8f:	6a 0c                	push   0xc
c0022a91:	56                   	push   esi
c0022a92:	53                   	push   ebx
c0022a93:	e8 a8 f8 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022a98:	83 c4 10             	add    esp,0x10
c0022a9b:	a8 01                	test   al,0x1
c0022a9d:	0f 85 8e 01 00 00    	jne    c0022c31 <IDE::detect()+0x283>
c0022aa3:	84 c0                	test   al,al
c0022aa5:	78 04                	js     c0022aab <IDE::detect()+0xfd>
c0022aa7:	a8 08                	test   al,0x8
c0022aa9:	75 27                	jne    c0022ad2 <IDE::detect()+0x124>
c0022aab:	47                   	inc    edi
c0022aac:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022ab2:	7e da                	jle    c0022a8e <IDE::detect()+0xe0>
c0022ab4:	50                   	push   eax
c0022ab5:	50                   	push   eax
c0022ab6:	6a 00                	push   0x0
c0022ab8:	68 40 4b 4c 00       	push   0x4c4b40
c0022abd:	e8 00 ab ff ff       	call   c001d5c2 <nanoSleep(unsigned long long)>
c0022ac2:	83 c4 10             	add    esp,0x10
c0022ac5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022acb:	75 c1                	jne    c0022a8e <IDE::detect()+0xe0>
c0022acd:	e9 5f 01 00 00       	jmp    c0022c31 <IDE::detect()+0x283>
c0022ad2:	31 c9                	xor    ecx,ecx
c0022ad4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022ad8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022adc:	83 ec 0c             	sub    esp,0xc
c0022adf:	68 80 00 00 00       	push   0x80
c0022ae4:	57                   	push   edi
c0022ae5:	6a 00                	push   0x0
c0022ae7:	56                   	push   esi
c0022ae8:	53                   	push   ebx
c0022ae9:	e8 f4 fd ff ff       	call   c00228e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022aee:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022af3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022af7:	89 d1                	mov    ecx,edx
c0022af9:	c1 e0 06             	shl    eax,0x6
c0022afc:	01 d8                	add    eax,ebx
c0022afe:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022b05:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022b0c:	89 f2                	mov    edx,esi
c0022b0e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022b14:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022b18:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022b1e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022b22:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022b29:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022b31:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022b38:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022b40:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022b46:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022b4d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022b53:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022b57:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022b5b:	83 c4 20             	add    esp,0x20
c0022b5e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022b61:	83 c0 02             	add    eax,0x2
c0022b64:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022b6a:	83 c7 02             	add    edi,0x2
c0022b6d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022b70:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022b76:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022b7a:	75 e2                	jne    c0022b5e <IDE::detect()+0x1b0>
c0022b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b80:	c1 e0 06             	shl    eax,0x6
c0022b83:	01 d8                	add    eax,ebx
c0022b85:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022b8b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022b92:	66 c1 ea 09          	shr    dx,0x9
c0022b96:	83 e2 01             	and    edx,0x1
c0022b99:	84 c9                	test   cl,cl
c0022b9b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022ba1:	75 2f                	jne    c0022bd2 <IDE::detect()+0x224>
c0022ba3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022ba9:	85 c0                	test   eax,eax
c0022bab:	74 66                	je     c0022c13 <IDE::detect()+0x265>
c0022bad:	50                   	push   eax
c0022bae:	55                   	push   ebp
c0022baf:	56                   	push   esi
c0022bb0:	68 03 b5 02 c0       	push   0xc002b503
c0022bb5:	e8 1b fd fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022bba:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022bc1:	e8 5e ca fe ff       	call   c000f624 <malloc>
c0022bc6:	89 c7                	mov    edi,eax
c0022bc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bcb:	e8 62 06 00 00       	call   c0023232 <ATA::ATA()>
c0022bd0:	eb 28                	jmp    c0022bfa <IDE::detect()+0x24c>
c0022bd2:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0022bd8:	55                   	push   ebp
c0022bd9:	56                   	push   esi
c0022bda:	68 32 b5 02 c0       	push   0xc002b532
c0022bdf:	e8 f1 fc fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022be4:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022beb:	e8 34 ca fe ff       	call   c000f624 <malloc>
c0022bf0:	89 c7                	mov    edi,eax
c0022bf2:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bf5:	e8 68 0c 00 00       	call   c0023862 <ATAPI::ATAPI()>
c0022bfa:	5a                   	pop    edx
c0022bfb:	59                   	pop    ecx
c0022bfc:	57                   	push   edi
c0022bfd:	53                   	push   ebx
c0022bfe:	e8 f9 10 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0022c03:	8b 07                	mov    eax,DWORD PTR [edi]
c0022c05:	53                   	push   ebx
c0022c06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022c0a:	6a 00                	push   0x0
c0022c0c:	57                   	push   edi
c0022c0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022c10:	83 c4 20             	add    esp,0x20
c0022c13:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0022c17:	4d                   	dec    ebp
c0022c18:	74 0a                	je     c0022c24 <IDE::detect()+0x276>
c0022c1a:	bd 01 00 00 00       	mov    ebp,0x1
c0022c1f:	e9 bb fd ff ff       	jmp    c00229df <IDE::detect()+0x31>
c0022c24:	4e                   	dec    esi
c0022c25:	74 63                	je     c0022c8a <IDE::detect()+0x2dc>
c0022c27:	be 01 00 00 00       	mov    esi,0x1
c0022c2c:	e9 ac fd ff ff       	jmp    c00229dd <IDE::detect()+0x2f>
c0022c31:	50                   	push   eax
c0022c32:	6a 04                	push   0x4
c0022c34:	56                   	push   esi
c0022c35:	53                   	push   ebx
c0022c36:	e8 05 f7 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022c3b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022c3f:	83 c4 0c             	add    esp,0xc
c0022c42:	6a 05                	push   0x5
c0022c44:	56                   	push   esi
c0022c45:	53                   	push   ebx
c0022c46:	e8 f5 f6 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022c4b:	83 c4 10             	add    esp,0x10
c0022c4e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022c52:	80 fa 14             	cmp    dl,0x14
c0022c55:	75 04                	jne    c0022c5b <IDE::detect()+0x2ad>
c0022c57:	3c eb                	cmp    al,0xeb
c0022c59:	eb 07                	jmp    c0022c62 <IDE::detect()+0x2b4>
c0022c5b:	3c 96                	cmp    al,0x96
c0022c5d:	75 b8                	jne    c0022c17 <IDE::detect()+0x269>
c0022c5f:	80 fa 69             	cmp    dl,0x69
c0022c62:	75 b3                	jne    c0022c17 <IDE::detect()+0x269>
c0022c64:	68 a1 00 00 00       	push   0xa1
c0022c69:	6a 07                	push   0x7
c0022c6b:	56                   	push   esi
c0022c6c:	53                   	push   ebx
c0022c6d:	e8 0e f6 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c72:	5f                   	pop    edi
c0022c73:	58                   	pop    eax
c0022c74:	6a 00                	push   0x0
c0022c76:	68 40 42 0f 00       	push   0xf4240
c0022c7b:	e8 42 a9 ff ff       	call   c001d5c2 <nanoSleep(unsigned long long)>
c0022c80:	83 c4 10             	add    esp,0x10
c0022c83:	b1 01                	mov    cl,0x1
c0022c85:	e9 4a fe ff ff       	jmp    c0022ad4 <IDE::detect()+0x126>
c0022c8a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022c90:	5b                   	pop    ebx
c0022c91:	5e                   	pop    esi
c0022c92:	5f                   	pop    edi
c0022c93:	5d                   	pop    ebp
c0022c94:	c3                   	ret    
c0022c95:	90                   	nop

c0022c96 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022c96:	55                   	push   ebp
c0022c97:	57                   	push   edi
c0022c98:	56                   	push   esi
c0022c99:	53                   	push   ebx
c0022c9a:	83 ec 1c             	sub    esp,0x1c
c0022c9d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022ca1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ca5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022ca9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022cad:	88 c3                	mov    bl,al
c0022caf:	84 c0                	test   al,al
c0022cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022cb5:	0f 84 67 01 00 00    	je     c0022e22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022cbb:	83 ec 0c             	sub    esp,0xc
c0022cbe:	68 63 b5 02 c0       	push   0xc002b563
c0022cc3:	e8 0d fc fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022cc8:	83 c4 10             	add    esp,0x10
c0022ccb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ccf:	3c 01                	cmp    al,0x1
c0022cd1:	75 17                	jne    c0022cea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022cd3:	83 ec 0c             	sub    esp,0xc
c0022cd6:	b3 13                	mov    bl,0x13
c0022cd8:	68 6f b5 02 c0       	push   0xc002b56f
c0022cdd:	e8 f3 fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022ce2:	83 c4 10             	add    esp,0x10
c0022ce5:	e9 25 01 00 00       	jmp    c0022e0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022cea:	3c 02                	cmp    al,0x2
c0022cec:	0f 85 ef 00 00 00    	jne    c0022de1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022cf2:	d1 e6                	shl    esi,1
c0022cf4:	09 ee                	or     esi,ebp
c0022cf6:	52                   	push   edx
c0022cf7:	89 f0                	mov    eax,esi
c0022cf9:	6a 01                	push   0x1
c0022cfb:	0f b6 f0             	movzx  esi,al
c0022cfe:	c1 e6 06             	shl    esi,0x6
c0022d01:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022d09:	50                   	push   eax
c0022d0a:	57                   	push   edi
c0022d0b:	e8 30 f6 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022d10:	83 c4 10             	add    esp,0x10
c0022d13:	89 c6                	mov    esi,eax
c0022d15:	a8 01                	test   al,0x1
c0022d17:	74 12                	je     c0022d2b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022d19:	83 ec 0c             	sub    esp,0xc
c0022d1c:	b3 07                	mov    bl,0x7
c0022d1e:	68 84 b5 02 c0       	push   0xc002b584
c0022d23:	e8 ad fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022d28:	83 c4 10             	add    esp,0x10
c0022d2b:	f7 c6 02 00 00 00    	test   esi,0x2
c0022d31:	74 12                	je     c0022d45 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022d33:	83 ec 0c             	sub    esp,0xc
c0022d36:	b3 03                	mov    bl,0x3
c0022d38:	68 a2 b5 02 c0       	push   0xc002b5a2
c0022d3d:	e8 93 fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022d42:	83 c4 10             	add    esp,0x10
c0022d45:	f7 c6 04 00 00 00    	test   esi,0x4
c0022d4b:	74 12                	je     c0022d5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022d4d:	83 ec 0c             	sub    esp,0xc
c0022d50:	b3 14                	mov    bl,0x14
c0022d52:	68 c2 b5 02 c0       	push   0xc002b5c2
c0022d57:	e8 79 fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022d5c:	83 c4 10             	add    esp,0x10
c0022d5f:	f7 c6 08 00 00 00    	test   esi,0x8
c0022d65:	74 12                	je     c0022d79 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022d67:	83 ec 0c             	sub    esp,0xc
c0022d6a:	b3 03                	mov    bl,0x3
c0022d6c:	68 a2 b5 02 c0       	push   0xc002b5a2
c0022d71:	e8 5f fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022d76:	83 c4 10             	add    esp,0x10
c0022d79:	f7 c6 10 00 00 00    	test   esi,0x10
c0022d7f:	74 12                	je     c0022d93 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022d81:	83 ec 0c             	sub    esp,0xc
c0022d84:	b3 15                	mov    bl,0x15
c0022d86:	68 da b5 02 c0       	push   0xc002b5da
c0022d8b:	e8 45 fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022d90:	83 c4 10             	add    esp,0x10
c0022d93:	f7 c6 20 00 00 00    	test   esi,0x20
c0022d99:	74 12                	je     c0022dad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022d9b:	83 ec 0c             	sub    esp,0xc
c0022d9e:	b3 03                	mov    bl,0x3
c0022da0:	68 a2 b5 02 c0       	push   0xc002b5a2
c0022da5:	e8 2b fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022daa:	83 c4 10             	add    esp,0x10
c0022dad:	f7 c6 40 00 00 00    	test   esi,0x40
c0022db3:	74 12                	je     c0022dc7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022db5:	83 ec 0c             	sub    esp,0xc
c0022db8:	b3 16                	mov    bl,0x16
c0022dba:	68 f4 b5 02 c0       	push   0xc002b5f4
c0022dbf:	e8 11 fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022dc4:	83 c4 10             	add    esp,0x10
c0022dc7:	89 f0                	mov    eax,esi
c0022dc9:	84 c0                	test   al,al
c0022dcb:	79 42                	jns    c0022e0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022dcd:	83 ec 0c             	sub    esp,0xc
c0022dd0:	b3 0d                	mov    bl,0xd
c0022dd2:	68 15 b6 02 c0       	push   0xc002b615
c0022dd7:	e8 f9 fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022ddc:	83 c4 10             	add    esp,0x10
c0022ddf:	eb 2e                	jmp    c0022e0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022de1:	3c 03                	cmp    al,0x3
c0022de3:	75 14                	jne    c0022df9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022de5:	83 ec 0c             	sub    esp,0xc
c0022de8:	b3 17                	mov    bl,0x17
c0022dea:	68 29 b6 02 c0       	push   0xc002b629
c0022def:	e8 e1 fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022df4:	83 c4 10             	add    esp,0x10
c0022df7:	eb 16                	jmp    c0022e0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022df9:	3c 04                	cmp    al,0x4
c0022dfb:	75 12                	jne    c0022e0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022dfd:	83 ec 0c             	sub    esp,0xc
c0022e00:	b3 08                	mov    bl,0x8
c0022e02:	68 3f b6 02 c0       	push   0xc002b63f
c0022e07:	e8 c9 fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022e0c:	83 c4 10             	add    esp,0x10
c0022e0f:	50                   	push   eax
c0022e10:	50                   	push   eax
c0022e11:	0f b6 c3             	movzx  eax,bl
c0022e14:	50                   	push   eax
c0022e15:	68 57 b6 02 c0       	push   0xc002b657
c0022e1a:	e8 b6 fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022e1f:	83 c4 10             	add    esp,0x10
c0022e22:	83 c4 1c             	add    esp,0x1c
c0022e25:	88 d8                	mov    al,bl
c0022e27:	5b                   	pop    ebx
c0022e28:	5e                   	pop    esi
c0022e29:	5f                   	pop    edi
c0022e2a:	5d                   	pop    ebp
c0022e2b:	c3                   	ret    

c0022e2c <IDE::polling(unsigned char, unsigned int)>:
c0022e2c:	57                   	push   edi
c0022e2d:	56                   	push   esi
c0022e2e:	53                   	push   ebx
c0022e2f:	bb 04 00 00 00       	mov    ebx,0x4
c0022e34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022e38:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022e3d:	52                   	push   edx
c0022e3e:	6a 0c                	push   0xc
c0022e40:	56                   	push   esi
c0022e41:	57                   	push   edi
c0022e42:	e8 f9 f4 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022e47:	83 c4 10             	add    esp,0x10
c0022e4a:	4b                   	dec    ebx
c0022e4b:	75 f0                	jne    c0022e3d <IDE::polling(unsigned char, unsigned int)+0x11>
c0022e4d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022e52:	50                   	push   eax
c0022e53:	6a 0c                	push   0xc
c0022e55:	56                   	push   esi
c0022e56:	57                   	push   edi
c0022e57:	e8 e4 f4 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0022e5c:	83 c4 10             	add    esp,0x10
c0022e5f:	a8 01                	test   al,0x1
c0022e61:	74 12                	je     c0022e75 <IDE::polling(unsigned char, unsigned int)+0x49>
c0022e63:	83 ec 0c             	sub    esp,0xc
c0022e66:	68 71 b6 02 c0       	push   0xc002b671
c0022e6b:	e8 65 fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022e70:	83 c4 10             	add    esp,0x10
c0022e73:	eb 17                	jmp    c0022e8c <IDE::polling(unsigned char, unsigned int)+0x60>
c0022e75:	a8 20                	test   al,0x20
c0022e77:	75 0f                	jne    c0022e88 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022e79:	4b                   	dec    ebx
c0022e7a:	74 10                	je     c0022e8c <IDE::polling(unsigned char, unsigned int)+0x60>
c0022e7c:	84 c0                	test   al,al
c0022e7e:	78 d2                	js     c0022e52 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022e80:	a8 08                	test   al,0x8
c0022e82:	74 ce                	je     c0022e52 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022e84:	31 c0                	xor    eax,eax
c0022e86:	eb 06                	jmp    c0022e8e <IDE::polling(unsigned char, unsigned int)+0x62>
c0022e88:	b0 01                	mov    al,0x1
c0022e8a:	eb 02                	jmp    c0022e8e <IDE::polling(unsigned char, unsigned int)+0x62>
c0022e8c:	b0 02                	mov    al,0x2
c0022e8e:	5b                   	pop    ebx
c0022e8f:	5e                   	pop    esi
c0022e90:	5f                   	pop    edi
c0022e91:	c3                   	ret    

c0022e92 <SATABus::close(int, int, void*)>:
c0022e92:	31 c0                	xor    eax,eax
c0022e94:	c3                   	ret    
c0022e95:	90                   	nop

c0022e96 <SATABus::detect()>:
c0022e96:	c3                   	ret    
c0022e97:	90                   	nop

c0022e98 <SATABus::SATABus()>:
c0022e98:	83 ec 0c             	sub    esp,0xc
c0022e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e9f:	83 ec 08             	sub    esp,0x8
c0022ea2:	68 b4 b6 02 c0       	push   0xc002b6b4
c0022ea7:	50                   	push   eax
c0022ea8:	e8 db 11 ff ff       	call   c0014088 <HardDiskController::HardDiskController(char const*)>
c0022ead:	83 c4 10             	add    esp,0x10
c0022eb0:	ba 70 b7 02 c0       	mov    edx,0xc002b770
c0022eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb9:	89 10                	mov    DWORD PTR [eax],edx
c0022ebb:	83 ec 0c             	sub    esp,0xc
c0022ebe:	6a 50                	push   0x50
c0022ec0:	e8 a6 ce fe ff       	call   c000fd6b <Phys::allocateContiguousPages(int)>
c0022ec5:	83 c4 10             	add    esp,0x10
c0022ec8:	89 c2                	mov    edx,eax
c0022eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ece:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022ed4:	83 ec 0c             	sub    esp,0xc
c0022ed7:	6a 50                	push   0x50
c0022ed9:	e8 07 ea fe ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c0022ede:	83 c4 10             	add    esp,0x10
c0022ee1:	89 c2                	mov    edx,eax
c0022ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022eed:	e8 83 eb fe ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0022ef2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ef6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022efc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022f00:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022f06:	83 ec 0c             	sub    esp,0xc
c0022f09:	6a 03                	push   0x3
c0022f0b:	6a 50                	push   0x50
c0022f0d:	51                   	push   ecx
c0022f0e:	52                   	push   edx
c0022f0f:	50                   	push   eax
c0022f10:	e8 8f f3 fe ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022f15:	83 c4 20             	add    esp,0x20
c0022f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f26:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022f2c:	83 ec 04             	sub    esp,0x4
c0022f2f:	52                   	push   edx
c0022f30:	50                   	push   eax
c0022f31:	68 d8 b6 02 c0       	push   0xc002b6d8
c0022f36:	e8 9a f9 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022f3b:	83 c4 10             	add    esp,0x10
c0022f3e:	90                   	nop
c0022f3f:	83 c4 0c             	add    esp,0xc
c0022f42:	c3                   	ret    
c0022f43:	90                   	nop

c0022f44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022f44:	83 ec 0c             	sub    esp,0xc
c0022f47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f4b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022f4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022f51:	09 c2                	or     edx,eax
c0022f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022f5d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022f5f:	31 c0                	xor    eax,eax
c0022f61:	c1 e9 08             	shr    ecx,0x8
c0022f64:	83 e1 0f             	and    ecx,0xf
c0022f67:	39 c8                	cmp    eax,ecx
c0022f69:	74 0a                	je     c0022f75 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022f6b:	f6 c2 01             	test   dl,0x1
c0022f6e:	74 18                	je     c0022f88 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022f70:	d1 ea                	shr    edx,1
c0022f72:	40                   	inc    eax
c0022f73:	eb f2                	jmp    c0022f67 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022f75:	83 ec 0c             	sub    esp,0xc
c0022f78:	68 fc b6 02 c0       	push   0xc002b6fc
c0022f7d:	e8 41 6b ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0022f82:	83 c4 10             	add    esp,0x10
c0022f85:	83 c8 ff             	or     eax,0xffffffff
c0022f88:	83 c4 0c             	add    esp,0xc
c0022f8b:	c3                   	ret    

c0022f8c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022f8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022f90:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022f93:	89 c2                	mov    edx,eax
c0022f95:	c1 ea 08             	shr    edx,0x8
c0022f98:	83 e2 0f             	and    edx,0xf
c0022f9b:	fe ca                	dec    dl
c0022f9d:	75 31                	jne    c0022fd0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022f9f:	83 e0 0f             	and    eax,0xf
c0022fa2:	3c 03                	cmp    al,0x3
c0022fa4:	75 2a                	jne    c0022fd0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022fa6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022fa9:	b8 02 00 00 00       	mov    eax,0x2
c0022fae:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022fb4:	74 1c                	je     c0022fd2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022fb6:	b8 04 00 00 00       	mov    eax,0x4
c0022fbb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022fc1:	74 0f                	je     c0022fd2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022fc3:	31 c0                	xor    eax,eax
c0022fc5:	83 fa 03             	cmp    edx,0x3
c0022fc8:	0f 94 c0             	sete   al
c0022fcb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022fcf:	c3                   	ret    
c0022fd0:	31 c0                	xor    eax,eax
c0022fd2:	c3                   	ret    
c0022fd3:	90                   	nop

c0022fd4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022fd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022fd8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022fdb:	0f ba e2 0f          	bt     edx,0xf
c0022fdf:	72 f7                	jb     c0022fd8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022fe1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022fe4:	83 ca 10             	or     edx,0x10
c0022fe7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022fea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022fed:	83 ca 01             	or     edx,0x1
c0022ff0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022ff3:	c3                   	ret    

c0022ff4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022ff8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022ffb:	83 e2 fe             	and    edx,0xfffffffe
c0022ffe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023001:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023004:	83 e2 ef             	and    edx,0xffffffef
c0023007:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002300a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002300d:	0f ba e2 0e          	bt     edx,0xe
c0023011:	72 f7                	jb     c002300a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023013:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023016:	0f ba e2 0f          	bt     edx,0xf
c002301a:	72 ee                	jb     c002300a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002301c:	c3                   	ret    
c002301d:	90                   	nop

c002301e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002301e:	55                   	push   ebp
c002301f:	57                   	push   edi
c0023020:	56                   	push   esi
c0023021:	53                   	push   ebx
c0023022:	83 ec 1c             	sub    esp,0x1c
c0023025:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023029:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002302d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023031:	53                   	push   ebx
c0023032:	89 fd                	mov    ebp,edi
c0023034:	56                   	push   esi
c0023035:	c1 e5 0a             	shl    ebp,0xa
c0023038:	e8 b7 ff ff ff       	call   c0022ff4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002303d:	83 ec 0c             	sub    esp,0xc
c0023040:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023046:	01 e8                	add    eax,ebp
c0023048:	89 03                	mov    DWORD PTR [ebx],eax
c002304a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002304c:	68 00 04 00 00       	push   0x400
c0023051:	6a 00                	push   0x0
c0023053:	50                   	push   eax
c0023054:	e8 6b d6 fd ff       	call   c00006c4 <memset>
c0023059:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002305f:	89 fa                	mov    edx,edi
c0023061:	01 e8                	add    eax,ebp
c0023063:	c1 e7 0d             	shl    edi,0xd
c0023066:	89 03                	mov    DWORD PTR [ebx],eax
c0023068:	c1 e2 08             	shl    edx,0x8
c002306b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023072:	81 c2 00 80 00 00    	add    edx,0x8000
c0023078:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002307c:	89 d0                	mov    eax,edx
c002307e:	83 c4 1c             	add    esp,0x1c
c0023081:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023087:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002308a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002308d:	68 00 01 00 00       	push   0x100
c0023092:	6a 00                	push   0x0
c0023094:	50                   	push   eax
c0023095:	e8 2a d6 fd ff       	call   c00006c4 <memset>
c002309a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002309e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00230a4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00230aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00230ae:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00230b1:	83 c4 10             	add    esp,0x10
c00230b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00230bb:	31 ff                	xor    edi,edi
c00230bd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00230c3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00230c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230cd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00230d3:	83 c5 20             	add    ebp,0x20
c00230d6:	01 f8                	add    eax,edi
c00230d8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00230db:	52                   	push   edx
c00230dc:	68 00 01 00 00       	push   0x100
c00230e1:	6a 00                	push   0x0
c00230e3:	50                   	push   eax
c00230e4:	e8 db d5 fd ff       	call   c00006c4 <memset>
c00230e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230ed:	83 c4 10             	add    esp,0x10
c00230f0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00230f6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00230fd:	01 f8                	add    eax,edi
c00230ff:	81 c7 00 01 00 00    	add    edi,0x100
c0023105:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023108:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002310e:	75 b3                	jne    c00230c3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023110:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023114:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023118:	83 c4 1c             	add    esp,0x1c
c002311b:	5b                   	pop    ebx
c002311c:	5e                   	pop    esi
c002311d:	5f                   	pop    edi
c002311e:	5d                   	pop    ebp
c002311f:	e9 b0 fe ff ff       	jmp    c0022fd4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023124 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023124:	55                   	push   ebp
c0023125:	57                   	push   edi
c0023126:	56                   	push   esi
c0023127:	53                   	push   ebx
c0023128:	31 db                	xor    ebx,ebx
c002312a:	83 ec 0c             	sub    esp,0xc
c002312d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023131:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023135:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023138:	f7 c7 01 00 00 00    	test   edi,0x1
c002313e:	0f 84 94 00 00 00    	je     c00231d8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0023144:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023148:	89 d8                	mov    eax,ebx
c002314a:	c1 e0 07             	shl    eax,0x7
c002314d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023154:	55                   	push   ebp
c0023155:	56                   	push   esi
c0023156:	e8 31 fe ff ff       	call   c0022f8c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002315b:	59                   	pop    ecx
c002315c:	83 f8 01             	cmp    eax,0x1
c002315f:	5a                   	pop    edx
c0023160:	75 47                	jne    c00231a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0023162:	51                   	push   ecx
c0023163:	51                   	push   ecx
c0023164:	53                   	push   ebx
c0023165:	68 21 b7 02 c0       	push   0xc002b721
c002316a:	e8 66 f7 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c002316f:	83 c4 0c             	add    esp,0xc
c0023172:	53                   	push   ebx
c0023173:	55                   	push   ebp
c0023174:	56                   	push   esi
c0023175:	e8 a4 fe ff ff       	call   c002301e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002317a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0023181:	e8 9e c4 fe ff       	call   c000f624 <malloc>
c0023186:	89 04 24             	mov    DWORD PTR [esp],eax
c0023189:	89 c5                	mov    ebp,eax
c002318b:	e8 de 0c 00 00       	call   c0023e6e <SATA::SATA()>
c0023190:	58                   	pop    eax
c0023191:	5a                   	pop    edx
c0023192:	55                   	push   ebp
c0023193:	56                   	push   esi
c0023194:	e8 63 0b ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0023199:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002319c:	56                   	push   esi
c002319d:	6a 00                	push   0x0
c002319f:	53                   	push   ebx
c00231a0:	55                   	push   ebp
c00231a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00231a4:	83 c4 20             	add    esp,0x20
c00231a7:	eb 2f                	jmp    c00231d8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c00231a9:	83 f8 04             	cmp    eax,0x4
c00231ac:	75 1a                	jne    c00231c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c00231ae:	52                   	push   edx
c00231af:	52                   	push   edx
c00231b0:	53                   	push   ebx
c00231b1:	68 38 b7 02 c0       	push   0xc002b738
c00231b6:	e8 1a f7 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00231bb:	83 c4 0c             	add    esp,0xc
c00231be:	53                   	push   ebx
c00231bf:	55                   	push   ebp
c00231c0:	56                   	push   esi
c00231c1:	e8 58 fe ff ff       	call   c002301e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00231c6:	eb 0d                	jmp    c00231d5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c00231c8:	50                   	push   eax
c00231c9:	50                   	push   eax
c00231ca:	53                   	push   ebx
c00231cb:	68 51 b7 02 c0       	push   0xc002b751
c00231d0:	e8 00 f7 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00231d5:	83 c4 10             	add    esp,0x10
c00231d8:	d1 ef                	shr    edi,1
c00231da:	43                   	inc    ebx
c00231db:	83 fb 20             	cmp    ebx,0x20
c00231de:	0f 85 54 ff ff ff    	jne    c0023138 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00231e4:	83 c4 0c             	add    esp,0xc
c00231e7:	5b                   	pop    ebx
c00231e8:	5e                   	pop    esi
c00231e9:	5f                   	pop    edi
c00231ea:	5d                   	pop    ebp
c00231eb:	c3                   	ret    

c00231ec <SATABus::open(int, int, void*)>:
c00231ec:	83 ec 14             	sub    esp,0x14
c00231ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231f3:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00231f9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00231ff:	52                   	push   edx
c0023200:	50                   	push   eax
c0023201:	e8 1e ff ff ff       	call   c0023124 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023206:	31 c0                	xor    eax,eax
c0023208:	83 c4 1c             	add    esp,0x1c
c002320b:	c3                   	ret    

c002320c <ATA::close(int, int, void*)>:
c002320c:	83 ec 0c             	sub    esp,0xc
c002320f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023213:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023219:	85 c0                	test   eax,eax
c002321b:	74 0c                	je     c0023229 <ATA::close(int, int, void*)+0x1d>
c002321d:	83 ec 0c             	sub    esp,0xc
c0023220:	8b 10                	mov    edx,DWORD PTR [eax]
c0023222:	50                   	push   eax
c0023223:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023226:	83 c4 10             	add    esp,0x10
c0023229:	31 c0                	xor    eax,eax
c002322b:	83 c4 0c             	add    esp,0xc
c002322e:	c3                   	ret    
c002322f:	90                   	nop

c0023230 <ATA::powerSaving(PowerSavingLevel)>:
c0023230:	c3                   	ret    
c0023231:	90                   	nop

c0023232 <ATA::ATA()>:
c0023232:	83 ec 0c             	sub    esp,0xc
c0023235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023239:	83 ec 04             	sub    esp,0x4
c002323c:	68 00 02 00 00       	push   0x200
c0023241:	68 64 b8 02 c0       	push   0xc002b864
c0023246:	50                   	push   eax
c0023247:	e8 c0 0e ff ff       	call   c001410c <PhysicalDisk::PhysicalDisk(char const*, int)>
c002324c:	83 c4 10             	add    esp,0x10
c002324f:	ba b0 b7 02 c0       	mov    edx,0xc002b7b0
c0023254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023258:	89 10                	mov    DWORD PTR [eax],edx
c002325a:	90                   	nop
c002325b:	83 c4 0c             	add    esp,0xc
c002325e:	c3                   	ret    
c002325f:	90                   	nop

c0023260 <ATA::flush(bool)>:
c0023260:	53                   	push   ebx
c0023261:	83 ec 08             	sub    esp,0x8
c0023264:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023269:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002326d:	19 c0                	sbb    eax,eax
c002326f:	83 e0 fd             	and    eax,0xfffffffd
c0023272:	05 ea 00 00 00       	add    eax,0xea
c0023277:	50                   	push   eax
c0023278:	6a 07                	push   0x7
c002327a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023281:	50                   	push   eax
c0023282:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023288:	e8 f3 ef ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002328d:	83 c4 0c             	add    esp,0xc
c0023290:	6a 00                	push   0x0
c0023292:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023299:	50                   	push   eax
c002329a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232a0:	e8 87 fb ff ff       	call   c0022e2c <IDE::polling(unsigned char, unsigned int)>
c00232a5:	83 c4 18             	add    esp,0x18
c00232a8:	5b                   	pop    ebx
c00232a9:	c3                   	ret    

c00232aa <ATA::readyForCommand()>:
c00232aa:	56                   	push   esi
c00232ab:	53                   	push   ebx
c00232ac:	31 db                	xor    ebx,ebx
c00232ae:	50                   	push   eax
c00232af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00232b3:	50                   	push   eax
c00232b4:	6a 0c                	push   0xc
c00232b6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00232bd:	50                   	push   eax
c00232be:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00232c4:	e8 77 f0 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c00232c9:	83 c4 10             	add    esp,0x10
c00232cc:	a8 88                	test   al,0x88
c00232ce:	74 23                	je     c00232f3 <ATA::readyForCommand()+0x49>
c00232d0:	43                   	inc    ebx
c00232d1:	83 fb 63             	cmp    ebx,0x63
c00232d4:	7e dd                	jle    c00232b3 <ATA::readyForCommand()+0x9>
c00232d6:	51                   	push   ecx
c00232d7:	51                   	push   ecx
c00232d8:	6a 00                	push   0x0
c00232da:	68 40 42 0f 00       	push   0xf4240
c00232df:	e8 de a2 ff ff       	call   c001d5c2 <nanoSleep(unsigned long long)>
c00232e4:	83 c4 10             	add    esp,0x10
c00232e7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00232ed:	75 c4                	jne    c00232b3 <ATA::readyForCommand()+0x9>
c00232ef:	31 c0                	xor    eax,eax
c00232f1:	eb 02                	jmp    c00232f5 <ATA::readyForCommand()+0x4b>
c00232f3:	b0 01                	mov    al,0x1
c00232f5:	5a                   	pop    edx
c00232f6:	5b                   	pop    ebx
c00232f7:	5e                   	pop    esi
c00232f8:	c3                   	ret    
c00232f9:	90                   	nop

c00232fa <ATA::access(unsigned long long, int, void*, bool)>:
c00232fa:	55                   	push   ebp
c00232fb:	57                   	push   edi
c00232fc:	56                   	push   esi
c00232fd:	53                   	push   ebx
c00232fe:	83 ec 2c             	sub    esp,0x2c
c0023301:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023305:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023309:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002330d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023311:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023315:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023319:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002331d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023323:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023327:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002332d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023331:	c1 e0 06             	shl    eax,0x6
c0023334:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002333c:	74 5d                	je     c002339b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002333e:	89 fa                	mov    edx,edi
c0023340:	89 f0                	mov    eax,esi
c0023342:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023346:	c1 ea 1c             	shr    edx,0x1c
c0023349:	89 d1                	mov    ecx,edx
c002334b:	09 c1                	or     ecx,eax
c002334d:	74 25                	je     c0023374 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002334f:	31 ed                	xor    ebp,ebp
c0023351:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023358:	89 fa                	mov    edx,edi
c002335a:	89 f0                	mov    eax,esi
c002335c:	0f ad d0             	shrd   eax,edx,cl
c002335f:	d3 ea                	shr    edx,cl
c0023361:	f6 c1 20             	test   cl,0x20
c0023364:	74 02                	je     c0023368 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023366:	89 d0                	mov    eax,edx
c0023368:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002336c:	45                   	inc    ebp
c002336d:	83 fd 06             	cmp    ebp,0x6
c0023370:	75 df                	jne    c0023351 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023372:	eb 76                	jmp    c00233ea <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023374:	89 f0                	mov    eax,esi
c0023376:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002337b:	89 fa                	mov    edx,edi
c002337d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023384:	0f ac d0 10          	shrd   eax,edx,0x10
c0023388:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002338d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023391:	c1 ee 18             	shr    esi,0x18
c0023394:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023399:	eb 56                	jmp    c00233f1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002339b:	6a 00                	push   0x0
c002339d:	6a 3f                	push   0x3f
c002339f:	57                   	push   edi
c00233a0:	56                   	push   esi
c00233a1:	e8 36 24 00 00       	call   c00257dc <__umoddi3>
c00233a6:	83 c4 10             	add    esp,0x10
c00233a9:	40                   	inc    eax
c00233aa:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00233ae:	6a 00                	push   0x0
c00233b0:	68 f0 03 00 00       	push   0x3f0
c00233b5:	57                   	push   edi
c00233b6:	56                   	push   esi
c00233b7:	e8 20 23 00 00       	call   c00256dc <__udivdi3>
c00233bc:	83 c4 10             	add    esp,0x10
c00233bf:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00233c4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00233cb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00233d0:	6a 00                	push   0x0
c00233d2:	6a 3f                	push   0x3f
c00233d4:	57                   	push   edi
c00233d5:	56                   	push   esi
c00233d6:	e8 01 23 00 00       	call   c00256dc <__udivdi3>
c00233db:	83 c4 10             	add    esp,0x10
c00233de:	89 c6                	mov    esi,eax
c00233e0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00233e5:	83 e6 0f             	and    esi,0xf
c00233e8:	eb 07                	jmp    c00233f1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00233ea:	31 f6                	xor    esi,esi
c00233ec:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00233f1:	bf 01 00 00 00       	mov    edi,0x1
c00233f6:	50                   	push   eax
c00233f7:	6a 00                	push   0x0
c00233f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023400:	50                   	push   eax
c0023401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023405:	e8 82 f0 ff ff       	call   c002248c <IDE::enableIRQs(unsigned char, bool)>
c002340a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002340d:	e8 98 fe ff ff       	call   c00232aa <ATA::readyForCommand()>
c0023412:	83 c4 10             	add    esp,0x10
c0023415:	84 c0                	test   al,al
c0023417:	0f 84 50 02 00 00    	je     c002366d <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002341d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023423:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023429:	c1 e0 04             	shl    eax,0x4
c002342c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023433:	09 c6                	or     esi,eax
c0023435:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002343a:	75 05                	jne    c0023441 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002343c:	83 ce a0             	or     esi,0xffffffa0
c002343f:	eb 03                	jmp    c0023444 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023441:	83 ce e0             	or     esi,0xffffffe0
c0023444:	89 f0                	mov    eax,esi
c0023446:	0f b6 f0             	movzx  esi,al
c0023449:	56                   	push   esi
c002344a:	6a 06                	push   0x6
c002344c:	51                   	push   ecx
c002344d:	52                   	push   edx
c002344e:	e8 2d ee ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023453:	83 c4 10             	add    esp,0x10
c0023456:	6a 00                	push   0x0
c0023458:	6a 01                	push   0x1
c002345a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023461:	50                   	push   eax
c0023462:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023468:	e8 13 ee ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002346d:	83 c4 10             	add    esp,0x10
c0023470:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023475:	75 6e                	jne    c00234e5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023477:	6a 00                	push   0x0
c0023479:	6a 08                	push   0x8
c002347b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023482:	50                   	push   eax
c0023483:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023489:	e8 f2 ed ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002348e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023493:	50                   	push   eax
c0023494:	6a 09                	push   0x9
c0023496:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002349d:	50                   	push   eax
c002349e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234a4:	e8 d7 ed ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234a9:	83 c4 20             	add    esp,0x20
c00234ac:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00234b1:	50                   	push   eax
c00234b2:	6a 0a                	push   0xa
c00234b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234bb:	50                   	push   eax
c00234bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234c2:	e8 b9 ed ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234c7:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00234cc:	50                   	push   eax
c00234cd:	6a 0b                	push   0xb
c00234cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234d6:	50                   	push   eax
c00234d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234dd:	e8 9e ed ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234e2:	83 c4 20             	add    esp,0x20
c00234e5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00234ea:	50                   	push   eax
c00234eb:	6a 02                	push   0x2
c00234ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234f4:	50                   	push   eax
c00234f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234fb:	e8 80 ed ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023500:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023505:	50                   	push   eax
c0023506:	6a 03                	push   0x3
c0023508:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002350f:	50                   	push   eax
c0023510:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023516:	e8 65 ed ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002351b:	83 c4 20             	add    esp,0x20
c002351e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023523:	50                   	push   eax
c0023524:	6a 04                	push   0x4
c0023526:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002352d:	50                   	push   eax
c002352e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023534:	e8 47 ed ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023539:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002353e:	50                   	push   eax
c002353f:	6a 05                	push   0x5
c0023541:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023548:	50                   	push   eax
c0023549:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002354f:	e8 2c ed ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023554:	83 c4 20             	add    esp,0x20
c0023557:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002355c:	0f 94 c0             	sete   al
c002355f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023564:	74 09                	je     c002356f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023566:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002356d:	eb 07                	jmp    c0023576 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002356f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023576:	0f b6 c0             	movzx  eax,al
c0023579:	50                   	push   eax
c002357a:	6a 07                	push   0x7
c002357c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023583:	50                   	push   eax
c0023584:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002358a:	e8 f1 ec ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002358f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023593:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023597:	83 c4 10             	add    esp,0x10
c002359a:	85 f6                	test   esi,esi
c002359c:	0f 84 ac 00 00 00    	je     c002364e <ATA::access(unsigned long long, int, void*, bool)+0x354>
c00235a2:	50                   	push   eax
c00235a3:	6a 01                	push   0x1
c00235a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235ac:	50                   	push   eax
c00235ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00235b3:	e8 74 f8 ff ff       	call   c0022e2c <IDE::polling(unsigned char, unsigned int)>
c00235b8:	83 c4 10             	add    esp,0x10
c00235bb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00235c1:	84 c0                	test   al,al
c00235c3:	74 20                	je     c00235e5 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00235c5:	0f b6 f8             	movzx  edi,al
c00235c8:	0f b6 d2             	movzx  edx,dl
c00235cb:	57                   	push   edi
c00235cc:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00235d3:	50                   	push   eax
c00235d4:	52                   	push   edx
c00235d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00235db:	e8 b6 f6 ff ff       	call   c0022c96 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00235e0:	e9 85 00 00 00       	jmp    c002366a <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00235e5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00235ea:	74 41                	je     c002362d <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00235ec:	31 c9                	xor    ecx,ecx
c00235ee:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00235f2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00235f6:	50                   	push   eax
c00235f7:	50                   	push   eax
c00235f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235ff:	50                   	push   eax
c0023600:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023606:	e8 63 ec ff ff       	call   c002226e <IDE::getBase(unsigned char)>
c002360b:	89 c2                	mov    edx,eax
c002360d:	89 e8                	mov    eax,ebp
c002360f:	66 ef                	out    dx,ax
c0023611:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023615:	83 c4 10             	add    esp,0x10
c0023618:	41                   	inc    ecx
c0023619:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002361f:	75 cd                	jne    c00235ee <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0023621:	4e                   	dec    esi
c0023622:	81 c7 00 02 00 00    	add    edi,0x200
c0023628:	e9 6d ff ff ff       	jmp    c002359a <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c002362d:	0f b6 d2             	movzx  edx,dl
c0023630:	51                   	push   ecx
c0023631:	51                   	push   ecx
c0023632:	52                   	push   edx
c0023633:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023639:	e8 30 ec ff ff       	call   c002226e <IDE::getBase(unsigned char)>
c002363e:	b9 00 01 00 00       	mov    ecx,0x100
c0023643:	89 c2                	mov    edx,eax
c0023645:	fc                   	cld    
c0023646:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023649:	83 c4 10             	add    esp,0x10
c002364c:	eb d3                	jmp    c0023621 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c002364e:	31 ff                	xor    edi,edi
c0023650:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023655:	74 16                	je     c002366d <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023657:	50                   	push   eax
c0023658:	50                   	push   eax
c0023659:	31 c0                	xor    eax,eax
c002365b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023660:	0f 94 c0             	sete   al
c0023663:	50                   	push   eax
c0023664:	53                   	push   ebx
c0023665:	e8 f6 fb ff ff       	call   c0023260 <ATA::flush(bool)>
c002366a:	83 c4 10             	add    esp,0x10
c002366d:	83 c4 2c             	add    esp,0x2c
c0023670:	89 f8                	mov    eax,edi
c0023672:	5b                   	pop    ebx
c0023673:	5e                   	pop    esi
c0023674:	5f                   	pop    edi
c0023675:	5d                   	pop    ebp
c0023676:	c3                   	ret    
c0023677:	90                   	nop

c0023678 <ATA::read(unsigned long long, int, void*)>:
c0023678:	57                   	push   edi
c0023679:	b8 04 00 00 00       	mov    eax,0x4
c002367e:	56                   	push   esi
c002367f:	53                   	push   ebx
c0023680:	83 ec 10             	sub    esp,0x10
c0023683:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023687:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002368b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002368e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023692:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023696:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002369c:	77 3b                	ja     c00236d9 <ATA::read(unsigned long long, int, void*)+0x61>
c002369e:	b8 06 00 00 00       	mov    eax,0x6
c00236a3:	85 d2                	test   edx,edx
c00236a5:	74 32                	je     c00236d9 <ATA::read(unsigned long long, int, void*)+0x61>
c00236a7:	50                   	push   eax
c00236a8:	50                   	push   eax
c00236a9:	6a 00                	push   0x0
c00236ab:	52                   	push   edx
c00236ac:	53                   	push   ebx
c00236ad:	57                   	push   edi
c00236ae:	56                   	push   esi
c00236af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00236b3:	e8 42 fc ff ff       	call   c00232fa <ATA::access(unsigned long long, int, void*, bool)>
c00236b8:	83 c4 20             	add    esp,0x20
c00236bb:	85 c0                	test   eax,eax
c00236bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00236c1:	75 11                	jne    c00236d4 <ATA::read(unsigned long long, int, void*)+0x5c>
c00236c3:	01 1d c8 f0 02 c0    	add    DWORD PTR ds:0xc002f0c8,ebx
c00236c9:	e8 6c d0 fe ff       	call   c001073a <VgaText::updateDiskUsage()>
c00236ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00236d2:	eb 05                	jmp    c00236d9 <ATA::read(unsigned long long, int, void*)+0x61>
c00236d4:	b8 01 00 00 00       	mov    eax,0x1
c00236d9:	83 c4 10             	add    esp,0x10
c00236dc:	5b                   	pop    ebx
c00236dd:	5e                   	pop    esi
c00236de:	5f                   	pop    edi
c00236df:	c3                   	ret    

c00236e0 <ATA::write(unsigned long long, int, void*)>:
c00236e0:	57                   	push   edi
c00236e1:	b8 04 00 00 00       	mov    eax,0x4
c00236e6:	56                   	push   esi
c00236e7:	53                   	push   ebx
c00236e8:	83 ec 10             	sub    esp,0x10
c00236eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00236ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00236f3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00236f6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00236fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00236fe:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023704:	77 3b                	ja     c0023741 <ATA::write(unsigned long long, int, void*)+0x61>
c0023706:	b8 06 00 00 00       	mov    eax,0x6
c002370b:	85 d2                	test   edx,edx
c002370d:	74 32                	je     c0023741 <ATA::write(unsigned long long, int, void*)+0x61>
c002370f:	50                   	push   eax
c0023710:	50                   	push   eax
c0023711:	6a 01                	push   0x1
c0023713:	52                   	push   edx
c0023714:	53                   	push   ebx
c0023715:	57                   	push   edi
c0023716:	56                   	push   esi
c0023717:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002371b:	e8 da fb ff ff       	call   c00232fa <ATA::access(unsigned long long, int, void*, bool)>
c0023720:	83 c4 20             	add    esp,0x20
c0023723:	85 c0                	test   eax,eax
c0023725:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023729:	75 11                	jne    c002373c <ATA::write(unsigned long long, int, void*)+0x5c>
c002372b:	01 1d c4 f0 02 c0    	add    DWORD PTR ds:0xc002f0c4,ebx
c0023731:	e8 04 d0 fe ff       	call   c001073a <VgaText::updateDiskUsage()>
c0023736:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002373a:	eb 05                	jmp    c0023741 <ATA::write(unsigned long long, int, void*)+0x61>
c002373c:	b8 01 00 00 00       	mov    eax,0x1
c0023741:	83 c4 10             	add    esp,0x10
c0023744:	5b                   	pop    ebx
c0023745:	5e                   	pop    esi
c0023746:	5f                   	pop    edi
c0023747:	c3                   	ret    

c0023748 <ATA::detectCHS()>:
c0023748:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002374c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023752:	c1 e0 06             	shl    eax,0x6
c0023755:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002375b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023765:	c7 44 24 04 94 b7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b794
c002376d:	e9 51 63 ff ff       	jmp    c0019ac3 <Krnl::panic(char const*)>

c0023772 <ATA::open(int, int, void*)>:
c0023772:	53                   	push   ebx
c0023773:	83 ec 08             	sub    esp,0x8
c0023776:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002377a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002377e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023782:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023788:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002378e:	c1 e0 06             	shl    eax,0x6
c0023791:	01 d0                	add    eax,edx
c0023793:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002379a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00237a0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00237a7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00237b1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00237b7:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00237be:	75 0c                	jne    c00237cc <ATA::open(int, int, void*)+0x5a>
c00237c0:	83 ec 0c             	sub    esp,0xc
c00237c3:	53                   	push   ebx
c00237c4:	e8 7f ff ff ff       	call   c0023748 <ATA::detectCHS()>
c00237c9:	83 c4 10             	add    esp,0x10
c00237cc:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00237d2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00237d8:	c1 e0 06             	shl    eax,0x6
c00237db:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00237e2:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00237ec:	d1 e8                	shr    eax,1
c00237ee:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00237f4:	6a 04                	push   0x4
c00237f6:	6a 0c                	push   0xc
c00237f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00237ff:	50                   	push   eax
c0023800:	52                   	push   edx
c0023801:	e8 7a ea ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023806:	90                   	nop
c0023807:	90                   	nop
c0023808:	6a 00                	push   0x0
c002380a:	6a 0c                	push   0xc
c002380c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023813:	50                   	push   eax
c0023814:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002381a:	e8 61 ea ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002381f:	83 c4 14             	add    esp,0x14
c0023822:	53                   	push   ebx
c0023823:	e8 4c 09 ff ff       	call   c0014174 <PhysicalDisk::startCache()>
c0023828:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002382b:	e8 6e 29 ff ff       	call   c001619e <createPartitionsForDisk(PhysicalDisk*)>
c0023830:	31 c0                	xor    eax,eax
c0023832:	83 c4 18             	add    esp,0x18
c0023835:	5b                   	pop    ebx
c0023836:	c3                   	ret    
c0023837:	90                   	nop

c0023838 <ATAPI::write(unsigned long long, int, void*)>:
c0023838:	b8 03 00 00 00       	mov    eax,0x3
c002383d:	c3                   	ret    

c002383e <ATAPI::close(int, int, void*)>:
c002383e:	83 ec 0c             	sub    esp,0xc
c0023841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023845:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002384b:	85 c0                	test   eax,eax
c002384d:	74 0c                	je     c002385b <ATAPI::close(int, int, void*)+0x1d>
c002384f:	83 ec 0c             	sub    esp,0xc
c0023852:	8b 10                	mov    edx,DWORD PTR [eax]
c0023854:	50                   	push   eax
c0023855:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023858:	83 c4 10             	add    esp,0x10
c002385b:	31 c0                	xor    eax,eax
c002385d:	83 c4 0c             	add    esp,0xc
c0023860:	c3                   	ret    
c0023861:	90                   	nop

c0023862 <ATAPI::ATAPI()>:
c0023862:	83 ec 0c             	sub    esp,0xc
c0023865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023869:	83 ec 04             	sub    esp,0x4
c002386c:	68 00 08 00 00       	push   0x800
c0023871:	68 dc b7 02 c0       	push   0xc002b7dc
c0023876:	50                   	push   eax
c0023877:	e8 90 08 ff ff       	call   c001410c <PhysicalDisk::PhysicalDisk(char const*, int)>
c002387c:	83 c4 10             	add    esp,0x10
c002387f:	ba 1c b8 02 c0       	mov    edx,0xc002b81c
c0023884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023888:	89 10                	mov    DWORD PTR [eax],edx
c002388a:	90                   	nop
c002388b:	83 c4 0c             	add    esp,0xc
c002388e:	c3                   	ret    
c002388f:	90                   	nop

c0023890 <ATAPI::readyForCommand()>:
c0023890:	56                   	push   esi
c0023891:	53                   	push   ebx
c0023892:	31 db                	xor    ebx,ebx
c0023894:	50                   	push   eax
c0023895:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023899:	50                   	push   eax
c002389a:	6a 0c                	push   0xc
c002389c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00238a3:	50                   	push   eax
c00238a4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00238aa:	e8 91 ea ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c00238af:	83 c4 10             	add    esp,0x10
c00238b2:	a8 88                	test   al,0x88
c00238b4:	74 23                	je     c00238d9 <ATAPI::readyForCommand()+0x49>
c00238b6:	43                   	inc    ebx
c00238b7:	83 fb 63             	cmp    ebx,0x63
c00238ba:	7e dd                	jle    c0023899 <ATAPI::readyForCommand()+0x9>
c00238bc:	51                   	push   ecx
c00238bd:	51                   	push   ecx
c00238be:	6a 00                	push   0x0
c00238c0:	68 40 42 0f 00       	push   0xf4240
c00238c5:	e8 f8 9c ff ff       	call   c001d5c2 <nanoSleep(unsigned long long)>
c00238ca:	83 c4 10             	add    esp,0x10
c00238cd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00238d3:	75 c4                	jne    c0023899 <ATAPI::readyForCommand()+0x9>
c00238d5:	31 c0                	xor    eax,eax
c00238d7:	eb 02                	jmp    c00238db <ATAPI::readyForCommand()+0x4b>
c00238d9:	b0 01                	mov    al,0x1
c00238db:	5a                   	pop    edx
c00238dc:	5b                   	pop    ebx
c00238dd:	5e                   	pop    esi
c00238de:	c3                   	ret    
c00238df:	90                   	nop

c00238e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00238e0:	55                   	push   ebp
c00238e1:	57                   	push   edi
c00238e2:	56                   	push   esi
c00238e3:	53                   	push   ebx
c00238e4:	83 ec 20             	sub    esp,0x20
c00238e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00238eb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00238ef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00238f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00238f7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00238fb:	6a 01                	push   0x1
c00238fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023904:	50                   	push   eax
c0023905:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002390b:	e8 7c eb ff ff       	call   c002248c <IDE::enableIRQs(unsigned char, bool)>
c0023910:	5e                   	pop    esi
c0023911:	58                   	pop    eax
c0023912:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023919:	50                   	push   eax
c002391a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023920:	e8 35 e9 ff ff       	call   c002225a <IDE::prepareInterrupt(unsigned char)>
c0023925:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023928:	e8 63 ff ff ff       	call   c0023890 <ATAPI::readyForCommand()>
c002392d:	83 c4 10             	add    esp,0x10
c0023930:	84 c0                	test   al,al
c0023932:	75 0a                	jne    c002393e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023934:	bb 01 00 00 00       	mov    ebx,0x1
c0023939:	e9 57 02 00 00       	jmp    c0023b95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002393e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023944:	c1 e0 04             	shl    eax,0x4
c0023947:	0f b6 c0             	movzx  eax,al
c002394a:	50                   	push   eax
c002394b:	6a 06                	push   0x6
c002394d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023954:	50                   	push   eax
c0023955:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002395b:	e8 20 e9 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023960:	6a 00                	push   0x0
c0023962:	6a 01                	push   0x1
c0023964:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002396b:	50                   	push   eax
c002396c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023972:	e8 09 e9 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023977:	83 c4 20             	add    esp,0x20
c002397a:	0f b6 c3             	movzx  eax,bl
c002397d:	0f b6 df             	movzx  ebx,bh
c0023980:	50                   	push   eax
c0023981:	6a 04                	push   0x4
c0023983:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002398a:	50                   	push   eax
c002398b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023991:	e8 ea e8 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023996:	53                   	push   ebx
c0023997:	6a 05                	push   0x5
c0023999:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00239a0:	50                   	push   eax
c00239a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00239a7:	e8 d4 e8 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239ac:	83 c4 20             	add    esp,0x20
c00239af:	68 a0 00 00 00       	push   0xa0
c00239b4:	6a 07                	push   0x7
c00239b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00239bd:	50                   	push   eax
c00239be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00239c4:	e8 b7 e8 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239c9:	83 c4 0c             	add    esp,0xc
c00239cc:	6a 01                	push   0x1
c00239ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00239d5:	50                   	push   eax
c00239d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00239dc:	e8 4b f4 ff ff       	call   c0022e2c <IDE::polling(unsigned char, unsigned int)>
c00239e1:	83 c4 10             	add    esp,0x10
c00239e4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00239ea:	84 c0                	test   al,al
c00239ec:	74 23                	je     c0023a11 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00239ee:	0f b6 d8             	movzx  ebx,al
c00239f1:	0f b6 d2             	movzx  edx,dl
c00239f4:	53                   	push   ebx
c00239f5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00239fc:	50                   	push   eax
c00239fd:	52                   	push   edx
c00239fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a04:	e8 8d f2 ff ff       	call   c0022c96 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023a09:	83 c4 10             	add    esp,0x10
c0023a0c:	e9 84 01 00 00       	jmp    c0023b95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023a11:	0f b6 d2             	movzx  edx,dl
c0023a14:	53                   	push   ebx
c0023a15:	53                   	push   ebx
c0023a16:	52                   	push   edx
c0023a17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a1d:	e8 4c e8 ff ff       	call   c002226e <IDE::getBase(unsigned char)>
c0023a22:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023a26:	b9 06 00 00 00       	mov    ecx,0x6
c0023a2b:	89 c2                	mov    edx,eax
c0023a2d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023a30:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023a34:	83 c4 10             	add    esp,0x10
c0023a37:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023a3d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023a44:	85 db                	test   ebx,ebx
c0023a46:	0f 84 ec 00 00 00    	je     c0023b38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023a4c:	51                   	push   ecx
c0023a4d:	51                   	push   ecx
c0023a4e:	52                   	push   edx
c0023a4f:	50                   	push   eax
c0023a50:	e8 99 e9 ff ff       	call   c00223ee <IDE::waitInterrupt(unsigned char)>
c0023a55:	83 c4 10             	add    esp,0x10
c0023a58:	84 c0                	test   al,al
c0023a5a:	0f 84 d4 fe ff ff    	je     c0023934 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023a60:	56                   	push   esi
c0023a61:	56                   	push   esi
c0023a62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a69:	50                   	push   eax
c0023a6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a70:	e8 e5 e7 ff ff       	call   c002225a <IDE::prepareInterrupt(unsigned char)>
c0023a75:	83 c4 0c             	add    esp,0xc
c0023a78:	6a 04                	push   0x4
c0023a7a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a81:	50                   	push   eax
c0023a82:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a88:	e8 b3 e8 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0023a8d:	83 c4 0c             	add    esp,0xc
c0023a90:	89 c6                	mov    esi,eax
c0023a92:	6a 05                	push   0x5
c0023a94:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a9b:	50                   	push   eax
c0023a9c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023aa2:	e8 99 e8 ff ff       	call   c0022340 <IDE::read(unsigned char, unsigned char)>
c0023aa7:	89 f1                	mov    ecx,esi
c0023aa9:	0f b6 c0             	movzx  eax,al
c0023aac:	0f b6 f1             	movzx  esi,cl
c0023aaf:	c1 e0 08             	shl    eax,0x8
c0023ab2:	09 c6                	or     esi,eax
c0023ab4:	d1 fe                	sar    esi,1
c0023ab6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023aba:	83 c4 10             	add    esp,0x10
c0023abd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023ac2:	74 41                	je     c0023b05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023ac4:	31 c9                	xor    ecx,ecx
c0023ac6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023acc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023ad3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023ad7:	75 0a                	jne    c0023ae3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023ad9:	01 c9                	add    ecx,ecx
c0023adb:	01 cd                	add    ebp,ecx
c0023add:	4b                   	dec    ebx
c0023ade:	e9 54 ff ff ff       	jmp    c0023a37 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023ae3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023ae8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023aec:	51                   	push   ecx
c0023aed:	51                   	push   ecx
c0023aee:	52                   	push   edx
c0023aef:	50                   	push   eax
c0023af0:	e8 79 e7 ff ff       	call   c002226e <IDE::getBase(unsigned char)>
c0023af5:	89 c2                	mov    edx,eax
c0023af7:	89 f0                	mov    eax,esi
c0023af9:	66 ef                	out    dx,ax
c0023afb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023aff:	83 c4 10             	add    esp,0x10
c0023b02:	41                   	inc    ecx
c0023b03:	eb c1                	jmp    c0023ac6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023b05:	31 f6                	xor    esi,esi
c0023b07:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023b0d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023b14:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023b18:	75 06                	jne    c0023b20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023b1a:	01 f6                	add    esi,esi
c0023b1c:	01 f5                	add    ebp,esi
c0023b1e:	eb bd                	jmp    c0023add <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023b20:	51                   	push   ecx
c0023b21:	51                   	push   ecx
c0023b22:	52                   	push   edx
c0023b23:	50                   	push   eax
c0023b24:	e8 45 e7 ff ff       	call   c002226e <IDE::getBase(unsigned char)>
c0023b29:	89 c2                	mov    edx,eax
c0023b2b:	66 ed                	in     ax,dx
c0023b2d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023b32:	83 c4 10             	add    esp,0x10
c0023b35:	46                   	inc    esi
c0023b36:	eb cf                	jmp    c0023b07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023b38:	51                   	push   ecx
c0023b39:	51                   	push   ecx
c0023b3a:	52                   	push   edx
c0023b3b:	50                   	push   eax
c0023b3c:	e8 ad e8 ff ff       	call   c00223ee <IDE::waitInterrupt(unsigned char)>
c0023b41:	83 c4 10             	add    esp,0x10
c0023b44:	84 c0                	test   al,al
c0023b46:	0f 84 e8 fd ff ff    	je     c0023934 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023b4c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b51:	52                   	push   edx
c0023b52:	52                   	push   edx
c0023b53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b5a:	50                   	push   eax
c0023b5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b61:	e8 f4 e6 ff ff       	call   c002225a <IDE::prepareInterrupt(unsigned char)>
c0023b66:	83 c4 10             	add    esp,0x10
c0023b69:	50                   	push   eax
c0023b6a:	50                   	push   eax
c0023b6b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b72:	50                   	push   eax
c0023b73:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b79:	e8 f0 e6 ff ff       	call   c002226e <IDE::getBase(unsigned char)>
c0023b7e:	8d 50 07             	lea    edx,[eax+0x7]
c0023b81:	ec                   	in     al,dx
c0023b82:	83 c4 10             	add    esp,0x10
c0023b85:	a8 88                	test   al,0x88
c0023b87:	74 0a                	je     c0023b93 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023b89:	4b                   	dec    ebx
c0023b8a:	75 dd                	jne    c0023b69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023b8c:	bb 02 00 00 00       	mov    ebx,0x2
c0023b91:	eb 02                	jmp    c0023b95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023b93:	31 db                	xor    ebx,ebx
c0023b95:	83 c4 1c             	add    esp,0x1c
c0023b98:	89 d8                	mov    eax,ebx
c0023b9a:	5b                   	pop    ebx
c0023b9b:	5e                   	pop    esi
c0023b9c:	5f                   	pop    edi
c0023b9d:	5d                   	pop    ebp
c0023b9e:	c3                   	ret    
c0023b9f:	90                   	nop

c0023ba0 <ATAPI::diskRemoved()>:
c0023ba0:	83 ec 18             	sub    esp,0x18
c0023ba3:	68 e7 b7 02 c0       	push   0xc002b7e7
c0023ba8:	e8 28 ed fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0023bad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023bb1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023bb8:	83 c4 1c             	add    esp,0x1c
c0023bbb:	c3                   	ret    

c0023bbc <ATAPI::eject()>:
c0023bbc:	57                   	push   edi
c0023bbd:	b9 03 00 00 00       	mov    ecx,0x3
c0023bc2:	53                   	push   ebx
c0023bc3:	83 ec 14             	sub    esp,0x14
c0023bc6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023bca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023bce:	fc                   	cld    
c0023bcf:	31 c0                	xor    eax,eax
c0023bd1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023bd3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023bd8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023bdd:	50                   	push   eax
c0023bde:	50                   	push   eax
c0023bdf:	6a 00                	push   0x0
c0023be1:	6a 00                	push   0x0
c0023be3:	6a 00                	push   0x0
c0023be5:	6a 02                	push   0x2
c0023be7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023beb:	50                   	push   eax
c0023bec:	53                   	push   ebx
c0023bed:	e8 ee fc ff ff       	call   c00238e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023bf2:	83 c4 14             	add    esp,0x14
c0023bf5:	53                   	push   ebx
c0023bf6:	e8 a5 ff ff ff       	call   c0023ba0 <ATAPI::diskRemoved()>
c0023bfb:	83 c4 24             	add    esp,0x24
c0023bfe:	5b                   	pop    ebx
c0023bff:	5f                   	pop    edi
c0023c00:	c3                   	ret    
c0023c01:	90                   	nop

c0023c02 <ATAPI::diskInserted()>:
c0023c02:	53                   	push   ebx
c0023c03:	83 ec 14             	sub    esp,0x14
c0023c06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023c0a:	68 fd b7 02 c0       	push   0xc002b7fd
c0023c0f:	e8 c1 ec fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0023c14:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023c1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023c1e:	e8 51 05 ff ff       	call   c0014174 <PhysicalDisk::startCache()>
c0023c23:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023c27:	83 c4 18             	add    esp,0x18
c0023c2a:	5b                   	pop    ebx
c0023c2b:	e9 6e 25 ff ff       	jmp    c001619e <createPartitionsForDisk(PhysicalDisk*)>

c0023c30 <ATAPI::detectMedia()>:
c0023c30:	56                   	push   esi
c0023c31:	53                   	push   ebx
c0023c32:	83 ec 28             	sub    esp,0x28
c0023c35:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c39:	6a 0c                	push   0xc
c0023c3b:	6a 00                	push   0x0
c0023c3d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023c41:	56                   	push   esi
c0023c42:	e8 7d ca fd ff       	call   c00006c4 <memset>
c0023c47:	58                   	pop    eax
c0023c48:	5a                   	pop    edx
c0023c49:	6a 00                	push   0x0
c0023c4b:	6a 00                	push   0x0
c0023c4d:	6a 00                	push   0x0
c0023c4f:	6a 00                	push   0x0
c0023c51:	56                   	push   esi
c0023c52:	53                   	push   ebx
c0023c53:	e8 88 fc ff ff       	call   c00238e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023c58:	83 c4 1c             	add    esp,0x1c
c0023c5b:	6a 0c                	push   0xc
c0023c5d:	6a 00                	push   0x0
c0023c5f:	56                   	push   esi
c0023c60:	e8 5f ca fd ff       	call   c00006c4 <memset>
c0023c65:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023c6a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023c6f:	59                   	pop    ecx
c0023c70:	58                   	pop    eax
c0023c71:	6a 01                	push   0x1
c0023c73:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023c77:	50                   	push   eax
c0023c78:	6a 00                	push   0x0
c0023c7a:	6a 12                	push   0x12
c0023c7c:	56                   	push   esi
c0023c7d:	53                   	push   ebx
c0023c7e:	e8 5d fc ff ff       	call   c00238e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023c83:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023c87:	83 c4 20             	add    esp,0x20
c0023c8a:	83 e0 7f             	and    eax,0x7f
c0023c8d:	3c 70                	cmp    al,0x70
c0023c8f:	74 15                	je     c0023ca6 <ATAPI::detectMedia()+0x76>
c0023c91:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023c98:	75 0c                	jne    c0023ca6 <ATAPI::detectMedia()+0x76>
c0023c9a:	83 ec 0c             	sub    esp,0xc
c0023c9d:	53                   	push   ebx
c0023c9e:	e8 5f ff ff ff       	call   c0023c02 <ATAPI::diskInserted()>
c0023ca3:	83 c4 10             	add    esp,0x10
c0023ca6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023caa:	83 e0 0f             	and    eax,0xf
c0023cad:	3c 02                	cmp    al,0x2
c0023caf:	75 1b                	jne    c0023ccc <ATAPI::detectMedia()+0x9c>
c0023cb1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023cb6:	75 2d                	jne    c0023ce5 <ATAPI::detectMedia()+0xb5>
c0023cb8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023cbf:	74 24                	je     c0023ce5 <ATAPI::detectMedia()+0xb5>
c0023cc1:	83 ec 0c             	sub    esp,0xc
c0023cc4:	53                   	push   ebx
c0023cc5:	e8 d6 fe ff ff       	call   c0023ba0 <ATAPI::diskRemoved()>
c0023cca:	eb 16                	jmp    c0023ce2 <ATAPI::detectMedia()+0xb2>
c0023ccc:	84 c0                	test   al,al
c0023cce:	75 15                	jne    c0023ce5 <ATAPI::detectMedia()+0xb5>
c0023cd0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023cd7:	75 0c                	jne    c0023ce5 <ATAPI::detectMedia()+0xb5>
c0023cd9:	83 ec 0c             	sub    esp,0xc
c0023cdc:	53                   	push   ebx
c0023cdd:	e8 20 ff ff ff       	call   c0023c02 <ATAPI::diskInserted()>
c0023ce2:	83 c4 10             	add    esp,0x10
c0023ce5:	83 c4 24             	add    esp,0x24
c0023ce8:	5b                   	pop    ebx
c0023ce9:	5e                   	pop    esi
c0023cea:	c3                   	ret    
c0023ceb:	90                   	nop

c0023cec <ATAPI::open(int, int, void*)>:
c0023cec:	53                   	push   ebx
c0023ced:	83 ec 08             	sub    esp,0x8
c0023cf0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023cf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023cf8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023cfc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023d02:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023d08:	c1 e0 06             	shl    eax,0x6
c0023d0b:	01 d0                	add    eax,edx
c0023d0d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023d14:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023d1a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023d21:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023d2b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023d31:	6a 04                	push   0x4
c0023d33:	6a 0c                	push   0xc
c0023d35:	51                   	push   ecx
c0023d36:	52                   	push   edx
c0023d37:	e8 44 e5 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d3c:	90                   	nop
c0023d3d:	90                   	nop
c0023d3e:	6a 00                	push   0x0
c0023d40:	6a 0c                	push   0xc
c0023d42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d49:	50                   	push   eax
c0023d4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d50:	e8 2b e5 ff ff       	call   c0022280 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d55:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023d5c:	83 c4 14             	add    esp,0x14
c0023d5f:	53                   	push   ebx
c0023d60:	e8 cb fe ff ff       	call   c0023c30 <ATAPI::detectMedia()>
c0023d65:	31 c0                	xor    eax,eax
c0023d67:	83 c4 18             	add    esp,0x18
c0023d6a:	5b                   	pop    ebx
c0023d6b:	c3                   	ret    

c0023d6c <ATAPI::read(unsigned long long, int, void*)>:
c0023d6c:	55                   	push   ebp
c0023d6d:	57                   	push   edi
c0023d6e:	56                   	push   esi
c0023d6f:	53                   	push   ebx
c0023d70:	83 ec 1c             	sub    esp,0x1c
c0023d73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d7b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023d7f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023d86:	74 41                	je     c0023dc9 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023d88:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023d8c:	b9 03 00 00 00       	mov    ecx,0x3
c0023d91:	fc                   	cld    
c0023d92:	31 c0                	xor    eax,eax
c0023d94:	86 fb                	xchg   bl,bh
c0023d96:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023d98:	c1 c3 10             	rol    ebx,0x10
c0023d9b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023da0:	89 e8                	mov    eax,ebp
c0023da2:	86 fb                	xchg   bl,bh
c0023da4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023da8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023dac:	50                   	push   eax
c0023dad:	50                   	push   eax
c0023dae:	55                   	push   ebp
c0023daf:	c1 e5 0b             	shl    ebp,0xb
c0023db2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023db6:	6a 00                	push   0x0
c0023db8:	55                   	push   ebp
c0023db9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023dbd:	50                   	push   eax
c0023dbe:	56                   	push   esi
c0023dbf:	e8 1c fb ff ff       	call   c00238e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023dc4:	83 c4 20             	add    esp,0x20
c0023dc7:	eb 1a                	jmp    c0023de3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023dc9:	83 ec 0c             	sub    esp,0xc
c0023dcc:	56                   	push   esi
c0023dcd:	e8 5e fe ff ff       	call   c0023c30 <ATAPI::detectMedia()>
c0023dd2:	83 c4 10             	add    esp,0x10
c0023dd5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023ddc:	75 aa                	jne    c0023d88 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023dde:	b8 02 00 00 00       	mov    eax,0x2
c0023de3:	83 c4 1c             	add    esp,0x1c
c0023de6:	5b                   	pop    ebx
c0023de7:	5e                   	pop    esi
c0023de8:	5f                   	pop    edi
c0023de9:	5d                   	pop    ebp
c0023dea:	c3                   	ret    
c0023deb:	90                   	nop

c0023dec <SATA::close(int, int, void*)>:
c0023dec:	83 ec 0c             	sub    esp,0xc
c0023def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023df3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023df9:	85 c0                	test   eax,eax
c0023dfb:	74 0c                	je     c0023e09 <SATA::close(int, int, void*)+0x1d>
c0023dfd:	83 ec 0c             	sub    esp,0xc
c0023e00:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e02:	50                   	push   eax
c0023e03:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023e06:	83 c4 10             	add    esp,0x10
c0023e09:	31 c0                	xor    eax,eax
c0023e0b:	83 c4 0c             	add    esp,0xc
c0023e0e:	c3                   	ret    
c0023e0f:	90                   	nop

c0023e10 <SATA::powerSaving(PowerSavingLevel)>:
c0023e10:	c3                   	ret    
c0023e11:	90                   	nop

c0023e12 <SATA::open(int, int, void*)>:
c0023e12:	53                   	push   ebx
c0023e13:	83 ec 14             	sub    esp,0x14
c0023e16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023e1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023e1e:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023e28:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023e2e:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023e38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023e3c:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023e46:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023e4c:	68 48 b8 02 c0       	push   0xc002b848
c0023e51:	e8 7f ea fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0023e56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e59:	e8 16 03 ff ff       	call   c0014174 <PhysicalDisk::startCache()>
c0023e5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e61:	e8 38 23 ff ff       	call   c001619e <createPartitionsForDisk(PhysicalDisk*)>
c0023e66:	31 c0                	xor    eax,eax
c0023e68:	83 c4 18             	add    esp,0x18
c0023e6b:	5b                   	pop    ebx
c0023e6c:	c3                   	ret    
c0023e6d:	90                   	nop

c0023e6e <SATA::SATA()>:
c0023e6e:	83 ec 0c             	sub    esp,0xc
c0023e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e75:	83 ec 04             	sub    esp,0x4
c0023e78:	68 00 02 00 00       	push   0x200
c0023e7d:	68 63 b8 02 c0       	push   0xc002b863
c0023e82:	50                   	push   eax
c0023e83:	e8 84 02 ff ff       	call   c001410c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023e88:	83 c4 10             	add    esp,0x10
c0023e8b:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c0023e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e94:	89 10                	mov    DWORD PTR [eax],edx
c0023e96:	90                   	nop
c0023e97:	83 c4 0c             	add    esp,0xc
c0023e9a:	c3                   	ret    
c0023e9b:	90                   	nop

c0023e9c <SATA::access(unsigned long long, int, void*, bool)>:
c0023e9c:	55                   	push   ebp
c0023e9d:	57                   	push   edi
c0023e9e:	56                   	push   esi
c0023e9f:	53                   	push   ebx
c0023ea0:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023ea6:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023ead:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023eb4:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023ebb:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023ec2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023ec6:	83 ff 08             	cmp    edi,0x8
c0023ec9:	7e 10                	jle    c0023edb <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023ecb:	83 ec 0c             	sub    esp,0xc
c0023ece:	68 73 b8 02 c0       	push   0xc002b873
c0023ed3:	e8 eb 5b ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0023ed8:	83 c4 10             	add    esp,0x10
c0023edb:	51                   	push   ecx
c0023edc:	68 00 02 00 00       	push   0x200
c0023ee1:	68 ee 00 00 00       	push   0xee
c0023ee6:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023eea:	55                   	push   ebp
c0023eeb:	e8 d4 c7 fd ff       	call   c00006c4 <memset>
c0023ef0:	83 c4 0c             	add    esp,0xc
c0023ef3:	68 00 02 00 00       	push   0x200
c0023ef8:	68 ee 00 00 00       	push   0xee
c0023efd:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023f04:	50                   	push   eax
c0023f05:	e8 ba c7 fd ff       	call   c00006c4 <memset>
c0023f0a:	55                   	push   ebp
c0023f0b:	57                   	push   edi
c0023f0c:	56                   	push   esi
c0023f0d:	68 a5 b8 02 c0       	push   0xc002b8a5
c0023f12:	e8 be e9 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0023f17:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023f1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023f23:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023f27:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023f2d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023f31:	c1 e0 07             	shl    eax,0x7
c0023f34:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023f38:	83 c4 18             	add    esp,0x18
c0023f3b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023f45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f49:	8d 50 02             	lea    edx,[eax+0x2]
c0023f4c:	c1 e2 07             	shl    edx,0x7
c0023f4f:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023f53:	52                   	push   edx
c0023f54:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023f58:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023f5e:	e8 e1 ef ff ff       	call   c0022f44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023f63:	89 c1                	mov    ecx,eax
c0023f65:	58                   	pop    eax
c0023f66:	5a                   	pop    edx
c0023f67:	51                   	push   ecx
c0023f68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023f6c:	68 da b8 02 c0       	push   0xc002b8da
c0023f71:	e8 5f e9 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0023f76:	83 c4 10             	add    esp,0x10
c0023f79:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023f7d:	83 f9 ff             	cmp    ecx,0xffffffff
c0023f80:	0f 84 9a 01 00 00    	je     c0024120 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023f86:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023f8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f90:	8b 12                	mov    edx,DWORD PTR [edx]
c0023f92:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023f98:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023f9e:	89 c8                	mov    eax,ecx
c0023fa0:	c1 e0 05             	shl    eax,0x5
c0023fa3:	01 c2                	add    edx,eax
c0023fa5:	8a 02                	mov    al,BYTE PTR [edx]
c0023fa7:	83 e0 a0             	and    eax,0xffffffa0
c0023faa:	83 c8 05             	or     eax,0x5
c0023fad:	88 02                	mov    BYTE PTR [edx],al
c0023faf:	8d 47 ff             	lea    eax,[edi-0x1]
c0023fb2:	c1 f8 04             	sar    eax,0x4
c0023fb5:	40                   	inc    eax
c0023fb6:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023fba:	0f b7 c0             	movzx  eax,ax
c0023fbd:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023fc3:	83 c0 08             	add    eax,0x8
c0023fc6:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023fcc:	c1 e0 04             	shl    eax,0x4
c0023fcf:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023fd5:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023fd8:	01 cb                	add    ebx,ecx
c0023fda:	52                   	push   edx
c0023fdb:	50                   	push   eax
c0023fdc:	6a 00                	push   0x0
c0023fde:	53                   	push   ebx
c0023fdf:	e8 e0 c6 fd ff       	call   c00006c4 <memset>
c0023fe4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023fea:	83 c4 10             	add    esp,0x10
c0023fed:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023ff3:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023ff8:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023fff:	0d ff 01 00 80       	or     eax,0x800001ff
c0024004:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0024008:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002400e:	b8 01 00 00 00       	mov    eax,0x1
c0024013:	89 c2                	mov    edx,eax
c0024015:	c1 e2 04             	shl    edx,0x4
c0024018:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c002401f:	8d 50 08             	lea    edx,[eax+0x8]
c0024022:	40                   	inc    eax
c0024023:	c1 e2 04             	shl    edx,0x4
c0024026:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c002402e:	83 f8 10             	cmp    eax,0x10
c0024031:	75 e0                	jne    c0024013 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0024033:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024036:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c002403a:	66 25 00 7f          	and    ax,0x7f00
c002403e:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0024042:	66 0d 27 80          	or     ax,0x8027
c0024046:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002404a:	66 89 03             	mov    WORD PTR [ebx],ax
c002404d:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0024051:	89 f0                	mov    eax,esi
c0024053:	31 d2                	xor    edx,edx
c0024055:	c1 e8 10             	shr    eax,0x10
c0024058:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002405b:	89 f0                	mov    eax,esi
c002405d:	c1 e8 18             	shr    eax,0x18
c0024060:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024063:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0024067:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002406a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002406e:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024075:	c1 e0 07             	shl    eax,0x7
c0024078:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002407c:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0024082:	80 e3 88             	and    bl,0x88
c0024085:	74 0b                	je     c0024092 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0024087:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c002408d:	74 0b                	je     c002409a <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c002408f:	42                   	inc    edx
c0024090:	eb ea                	jmp    c002407c <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0024092:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0024098:	75 0a                	jne    c00240a4 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c002409a:	83 ec 0c             	sub    esp,0xc
c002409d:	68 e3 b8 02 c0       	push   0xc002b8e3
c00240a2:	eb 60                	jmp    c0024104 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c00240a4:	be 01 00 00 00       	mov    esi,0x1
c00240a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240ad:	d3 e6                	shl    esi,cl
c00240af:	c1 e3 07             	shl    ebx,0x7
c00240b2:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00240b8:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c00240bc:	83 ec 0c             	sub    esp,0xc
c00240bf:	68 f1 b8 02 c0       	push   0xc002b8f1
c00240c4:	e8 0c e8 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00240c9:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c00240cf:	83 c4 10             	add    esp,0x10
c00240d2:	85 c6                	test   esi,eax
c00240d4:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c00240da:	74 1a                	je     c00240f6 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c00240dc:	0f ba e0 1e          	bt     eax,0x1e
c00240e0:	73 da                	jae    c00240bc <SATA::access(unsigned long long, int, void*, bool)+0x220>
c00240e2:	83 ec 0c             	sub    esp,0xc
c00240e5:	68 fe b8 02 c0       	push   0xc002b8fe
c00240ea:	e8 d4 59 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00240ef:	83 c4 10             	add    esp,0x10
c00240f2:	31 c0                	xor    eax,eax
c00240f4:	eb 2f                	jmp    c0024125 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c00240f6:	0f ba e0 1e          	bt     eax,0x1e
c00240fa:	73 12                	jae    c002410e <SATA::access(unsigned long long, int, void*, bool)+0x272>
c00240fc:	83 ec 0c             	sub    esp,0xc
c00240ff:	68 fe b8 02 c0       	push   0xc002b8fe
c0024104:	e8 ba 59 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0024109:	83 c4 10             	add    esp,0x10
c002410c:	eb 12                	jmp    c0024120 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c002410e:	83 ec 0c             	sub    esp,0xc
c0024111:	68 0f b9 02 c0       	push   0xc002b90f
c0024116:	e8 a8 59 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c002411b:	83 c4 10             	add    esp,0x10
c002411e:	eb fe                	jmp    c002411e <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0024120:	b8 01 00 00 00       	mov    eax,0x1
c0024125:	81 c4 2c 04 00 00    	add    esp,0x42c
c002412b:	5b                   	pop    ebx
c002412c:	5e                   	pop    esi
c002412d:	5f                   	pop    edi
c002412e:	5d                   	pop    ebp
c002412f:	c3                   	ret    

c0024130 <SATA::read(unsigned long long, int, void*)>:
c0024130:	57                   	push   edi
c0024131:	b8 04 00 00 00       	mov    eax,0x4
c0024136:	56                   	push   esi
c0024137:	53                   	push   ebx
c0024138:	83 ec 10             	sub    esp,0x10
c002413b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002413f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024143:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024146:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002414a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002414e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024154:	77 3b                	ja     c0024191 <SATA::read(unsigned long long, int, void*)+0x61>
c0024156:	b8 06 00 00 00       	mov    eax,0x6
c002415b:	85 d2                	test   edx,edx
c002415d:	74 32                	je     c0024191 <SATA::read(unsigned long long, int, void*)+0x61>
c002415f:	50                   	push   eax
c0024160:	50                   	push   eax
c0024161:	6a 00                	push   0x0
c0024163:	52                   	push   edx
c0024164:	53                   	push   ebx
c0024165:	57                   	push   edi
c0024166:	56                   	push   esi
c0024167:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002416b:	e8 2c fd ff ff       	call   c0023e9c <SATA::access(unsigned long long, int, void*, bool)>
c0024170:	83 c4 20             	add    esp,0x20
c0024173:	85 c0                	test   eax,eax
c0024175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024179:	75 11                	jne    c002418c <SATA::read(unsigned long long, int, void*)+0x5c>
c002417b:	01 1d c8 f0 02 c0    	add    DWORD PTR ds:0xc002f0c8,ebx
c0024181:	e8 b4 c5 fe ff       	call   c001073a <VgaText::updateDiskUsage()>
c0024186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002418a:	eb 05                	jmp    c0024191 <SATA::read(unsigned long long, int, void*)+0x61>
c002418c:	b8 01 00 00 00       	mov    eax,0x1
c0024191:	83 c4 10             	add    esp,0x10
c0024194:	5b                   	pop    ebx
c0024195:	5e                   	pop    esi
c0024196:	5f                   	pop    edi
c0024197:	c3                   	ret    

c0024198 <SATA::write(unsigned long long, int, void*)>:
c0024198:	57                   	push   edi
c0024199:	b8 04 00 00 00       	mov    eax,0x4
c002419e:	56                   	push   esi
c002419f:	53                   	push   ebx
c00241a0:	83 ec 10             	sub    esp,0x10
c00241a3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00241a7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00241ab:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00241ae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00241b2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00241b6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00241bc:	77 3b                	ja     c00241f9 <SATA::write(unsigned long long, int, void*)+0x61>
c00241be:	b8 06 00 00 00       	mov    eax,0x6
c00241c3:	85 d2                	test   edx,edx
c00241c5:	74 32                	je     c00241f9 <SATA::write(unsigned long long, int, void*)+0x61>
c00241c7:	50                   	push   eax
c00241c8:	50                   	push   eax
c00241c9:	6a 01                	push   0x1
c00241cb:	52                   	push   edx
c00241cc:	53                   	push   ebx
c00241cd:	57                   	push   edi
c00241ce:	56                   	push   esi
c00241cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00241d3:	e8 c4 fc ff ff       	call   c0023e9c <SATA::access(unsigned long long, int, void*, bool)>
c00241d8:	83 c4 20             	add    esp,0x20
c00241db:	85 c0                	test   eax,eax
c00241dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00241e1:	75 11                	jne    c00241f4 <SATA::write(unsigned long long, int, void*)+0x5c>
c00241e3:	01 1d c4 f0 02 c0    	add    DWORD PTR ds:0xc002f0c4,ebx
c00241e9:	e8 4c c5 fe ff       	call   c001073a <VgaText::updateDiskUsage()>
c00241ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00241f2:	eb 05                	jmp    c00241f9 <SATA::write(unsigned long long, int, void*)+0x61>
c00241f4:	b8 01 00 00 00       	mov    eax,0x1
c00241f9:	83 c4 10             	add    esp,0x10
c00241fc:	5b                   	pop    ebx
c00241fd:	5e                   	pop    esi
c00241fe:	5f                   	pop    edi
c00241ff:	c3                   	ret    

c0024200 <AVX::open(int, int, void*)>:
c0024200:	83 ec 0c             	sub    esp,0xc
c0024203:	e8 40 11 00 00       	call   c0025348 <avxInit>
c0024208:	b8 00 00 00 00       	mov    eax,0x0
c002420d:	83 c4 0c             	add    esp,0xc
c0024210:	c3                   	ret    
c0024211:	90                   	nop

c0024212 <AVX::close(int, int, void*)>:
c0024212:	83 ec 0c             	sub    esp,0xc
c0024215:	e8 2f 11 00 00       	call   c0025349 <avxClose>
c002421a:	b8 00 00 00 00       	mov    eax,0x0
c002421f:	83 c4 0c             	add    esp,0xc
c0024222:	c3                   	ret    
c0024223:	90                   	nop

c0024224 <AVX::available()>:
c0024224:	83 ec 0c             	sub    esp,0xc
c0024227:	e8 14 11 00 00       	call   c0025340 <avxDetect>
c002422c:	85 c0                	test   eax,eax
c002422e:	0f 95 c0             	setne  al
c0024231:	83 c4 0c             	add    esp,0xc
c0024234:	c3                   	ret    
c0024235:	90                   	nop

c0024236 <AVX::save(void*)>:
c0024236:	83 ec 0c             	sub    esp,0xc
c0024239:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002423d:	83 ec 0c             	sub    esp,0xc
c0024240:	50                   	push   eax
c0024241:	e8 00 11 00 00       	call   c0025346 <avxSave>
c0024246:	83 c4 10             	add    esp,0x10
c0024249:	90                   	nop
c002424a:	83 c4 0c             	add    esp,0xc
c002424d:	c3                   	ret    

c002424e <AVX::load(void*)>:
c002424e:	83 ec 0c             	sub    esp,0xc
c0024251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024255:	83 ec 0c             	sub    esp,0xc
c0024258:	50                   	push   eax
c0024259:	e8 e9 10 00 00       	call   c0025347 <avxLoad>
c002425e:	83 c4 10             	add    esp,0x10
c0024261:	90                   	nop
c0024262:	83 c4 0c             	add    esp,0xc
c0024265:	c3                   	ret    

c0024266 <AVX::AVX()>:
c0024266:	83 ec 0c             	sub    esp,0xc
c0024269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002426d:	83 ec 08             	sub    esp,0x8
c0024270:	68 6c b9 02 c0       	push   0xc002b96c
c0024275:	50                   	push   eax
c0024276:	e8 6f ff fe ff       	call   c00141ea <FPU::FPU(char const*)>
c002427b:	83 c4 10             	add    esp,0x10
c002427e:	ba 7c b9 02 c0       	mov    edx,0xc002b97c
c0024283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024287:	89 10                	mov    DWORD PTR [eax],edx
c0024289:	90                   	nop
c002428a:	83 c4 0c             	add    esp,0xc
c002428d:	c3                   	ret    

c002428e <MMX::available()>:
c002428e:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0024293:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024299:	83 e0 20             	and    eax,0x20
c002429c:	84 c0                	test   al,al
c002429e:	0f 95 c0             	setne  al
c00242a1:	c3                   	ret    

c00242a2 <MMX::open(int, int, void*)>:
c00242a2:	83 ec 0c             	sub    esp,0xc
c00242a5:	e8 22 11 00 00       	call   c00253cc <x87Init>
c00242aa:	b8 00 00 00 00       	mov    eax,0x0
c00242af:	83 c4 0c             	add    esp,0xc
c00242b2:	c3                   	ret    
c00242b3:	90                   	nop

c00242b4 <MMX::close(int, int, void*)>:
c00242b4:	83 ec 0c             	sub    esp,0xc
c00242b7:	e8 2a 11 00 00       	call   c00253e6 <x87Close>
c00242bc:	b8 00 00 00 00       	mov    eax,0x0
c00242c1:	83 c4 0c             	add    esp,0xc
c00242c4:	c3                   	ret    
c00242c5:	90                   	nop

c00242c6 <MMX::save(void*)>:
c00242c6:	83 ec 0c             	sub    esp,0xc
c00242c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00242cd:	83 ec 0c             	sub    esp,0xc
c00242d0:	50                   	push   eax
c00242d1:	e8 eb 10 00 00       	call   c00253c1 <x87Save>
c00242d6:	83 c4 10             	add    esp,0x10
c00242d9:	90                   	nop
c00242da:	83 c4 0c             	add    esp,0xc
c00242dd:	c3                   	ret    

c00242de <MMX::load(void*)>:
c00242de:	83 ec 0c             	sub    esp,0xc
c00242e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00242e5:	83 ec 0c             	sub    esp,0xc
c00242e8:	50                   	push   eax
c00242e9:	e8 d9 10 00 00       	call   c00253c7 <x87Load>
c00242ee:	83 c4 10             	add    esp,0x10
c00242f1:	90                   	nop
c00242f2:	83 c4 0c             	add    esp,0xc
c00242f5:	c3                   	ret    

c00242f6 <MMX::MMX()>:
c00242f6:	83 ec 0c             	sub    esp,0xc
c00242f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242fd:	83 ec 08             	sub    esp,0x8
c0024300:	68 ac b9 02 c0       	push   0xc002b9ac
c0024305:	50                   	push   eax
c0024306:	e8 df fe fe ff       	call   c00141ea <FPU::FPU(char const*)>
c002430b:	83 c4 10             	add    esp,0x10
c002430e:	ba bc b9 02 c0       	mov    edx,0xc002b9bc
c0024313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024317:	89 10                	mov    DWORD PTR [eax],edx
c0024319:	90                   	nop
c002431a:	83 c4 0c             	add    esp,0xc
c002431d:	c3                   	ret    

c002431e <SSE::open(int, int, void*)>:
c002431e:	83 ec 0c             	sub    esp,0xc
c0024321:	e8 5e 10 00 00       	call   c0025384 <sseInit>
c0024326:	b8 00 00 00 00       	mov    eax,0x0
c002432b:	83 c4 0c             	add    esp,0xc
c002432e:	c3                   	ret    
c002432f:	90                   	nop

c0024330 <SSE::close(int, int, void*)>:
c0024330:	83 ec 0c             	sub    esp,0xc
c0024333:	e8 5c 10 00 00       	call   c0025394 <sseClose>
c0024338:	b8 00 00 00 00       	mov    eax,0x0
c002433d:	83 c4 0c             	add    esp,0xc
c0024340:	c3                   	ret    
c0024341:	90                   	nop

c0024342 <SSE::available()>:
c0024342:	83 ec 1c             	sub    esp,0x1c
c0024345:	e8 16 10 00 00       	call   c0025360 <absolutelyNoChanceInHell>
c002434a:	85 c0                	test   eax,eax
c002434c:	0f 95 c0             	setne  al
c002434f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024353:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024357:	83 c4 1c             	add    esp,0x1c
c002435a:	c3                   	ret    
c002435b:	90                   	nop

c002435c <SSE::save(void*)>:
c002435c:	83 ec 0c             	sub    esp,0xc
c002435f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024363:	83 ec 0c             	sub    esp,0xc
c0024366:	50                   	push   eax
c0024367:	e8 0c 10 00 00       	call   c0025378 <sseSave>
c002436c:	83 c4 10             	add    esp,0x10
c002436f:	90                   	nop
c0024370:	83 c4 0c             	add    esp,0xc
c0024373:	c3                   	ret    

c0024374 <SSE::load(void*)>:
c0024374:	83 ec 0c             	sub    esp,0xc
c0024377:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002437b:	83 ec 0c             	sub    esp,0xc
c002437e:	50                   	push   eax
c002437f:	e8 fa 0f 00 00       	call   c002537e <sseLoad>
c0024384:	83 c4 10             	add    esp,0x10
c0024387:	90                   	nop
c0024388:	83 c4 0c             	add    esp,0xc
c002438b:	c3                   	ret    

c002438c <SSE::SSE()>:
c002438c:	83 ec 0c             	sub    esp,0xc
c002438f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024393:	83 ec 08             	sub    esp,0x8
c0024396:	68 ec b9 02 c0       	push   0xc002b9ec
c002439b:	50                   	push   eax
c002439c:	e8 49 fe fe ff       	call   c00141ea <FPU::FPU(char const*)>
c00243a1:	83 c4 10             	add    esp,0x10
c00243a4:	ba fc b9 02 c0       	mov    edx,0xc002b9fc
c00243a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243ad:	89 10                	mov    DWORD PTR [eax],edx
c00243af:	90                   	nop
c00243b0:	83 c4 0c             	add    esp,0xc
c00243b3:	c3                   	ret    

c00243b4 <x87::open(int, int, void*)>:
c00243b4:	83 ec 0c             	sub    esp,0xc
c00243b7:	e8 10 10 00 00       	call   c00253cc <x87Init>
c00243bc:	b8 00 00 00 00       	mov    eax,0x0
c00243c1:	83 c4 0c             	add    esp,0xc
c00243c4:	c3                   	ret    
c00243c5:	90                   	nop

c00243c6 <x87::close(int, int, void*)>:
c00243c6:	83 ec 0c             	sub    esp,0xc
c00243c9:	e8 18 10 00 00       	call   c00253e6 <x87Close>
c00243ce:	b8 00 00 00 00       	mov    eax,0x0
c00243d3:	83 c4 0c             	add    esp,0xc
c00243d6:	c3                   	ret    
c00243d7:	90                   	nop

c00243d8 <x87::available()>:
c00243d8:	83 ec 0c             	sub    esp,0xc
c00243db:	e8 c6 0f 00 00       	call   c00253a6 <x87Detect>
c00243e0:	85 c0                	test   eax,eax
c00243e2:	0f 95 c0             	setne  al
c00243e5:	83 c4 0c             	add    esp,0xc
c00243e8:	c3                   	ret    
c00243e9:	90                   	nop

c00243ea <x87::save(void*)>:
c00243ea:	83 ec 0c             	sub    esp,0xc
c00243ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00243f1:	83 ec 0c             	sub    esp,0xc
c00243f4:	50                   	push   eax
c00243f5:	e8 c7 0f 00 00       	call   c00253c1 <x87Save>
c00243fa:	83 c4 10             	add    esp,0x10
c00243fd:	90                   	nop
c00243fe:	83 c4 0c             	add    esp,0xc
c0024401:	c3                   	ret    

c0024402 <x87::load(void*)>:
c0024402:	83 ec 0c             	sub    esp,0xc
c0024405:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024409:	83 ec 0c             	sub    esp,0xc
c002440c:	50                   	push   eax
c002440d:	e8 b5 0f 00 00       	call   c00253c7 <x87Load>
c0024412:	83 c4 10             	add    esp,0x10
c0024415:	90                   	nop
c0024416:	83 c4 0c             	add    esp,0xc
c0024419:	c3                   	ret    

c002441a <x87::x87()>:
c002441a:	83 ec 0c             	sub    esp,0xc
c002441d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024421:	83 ec 08             	sub    esp,0x8
c0024424:	68 2c ba 02 c0       	push   0xc002ba2c
c0024429:	50                   	push   eax
c002442a:	e8 bb fd fe ff       	call   c00141ea <FPU::FPU(char const*)>
c002442f:	83 c4 10             	add    esp,0x10
c0024432:	ba 3c ba 02 c0       	mov    edx,0xc002ba3c
c0024437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002443b:	89 10                	mov    DWORD PTR [eax],edx
c002443d:	90                   	nop
c002443e:	83 c4 0c             	add    esp,0xc
c0024441:	c3                   	ret    

c0024442 <APIC::disable()>:
c0024442:	90                   	nop
c0024443:	c3                   	ret    

c0024444 <APIC::close(int, int, void*)>:
c0024444:	55                   	push   ebp
c0024445:	89 e5                	mov    ebp,esp
c0024447:	83 ec 08             	sub    esp,0x8
c002444a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002444d:	8b 00                	mov    eax,DWORD PTR [eax]
c002444f:	83 c0 3c             	add    eax,0x3c
c0024452:	8b 00                	mov    eax,DWORD PTR [eax]
c0024454:	83 ec 0c             	sub    esp,0xc
c0024457:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002445a:	ff d0                	call   eax
c002445c:	83 c4 10             	add    esp,0x10
c002445f:	b8 00 00 00 00       	mov    eax,0x0
c0024464:	c9                   	leave  
c0024465:	c3                   	ret    

c0024466 <IOAPIC::close(int, int, void*)>:
c0024466:	b8 00 00 00 00       	mov    eax,0x0
c002446b:	c3                   	ret    

c002446c <APIC::io_wait()>:
c002446c:	eb 00                	jmp    c002446e <APIC::io_wait()+0x2>
c002446e:	eb 00                	jmp    c0024470 <APIC::io_wait()+0x4>
c0024470:	90                   	nop
c0024471:	c3                   	ret    

c0024472 <APIC::getBase()>:
c0024472:	55                   	push   ebp
c0024473:	89 e5                	mov    ebp,esp
c0024475:	83 ec 18             	sub    esp,0x18
c0024478:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c002447d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024483:	83 e0 08             	and    eax,0x8
c0024486:	84 c0                	test   al,al
c0024488:	75 07                	jne    c0024491 <APIC::getBase()+0x1f>
c002448a:	b8 00 00 00 00       	mov    eax,0x0
c002448f:	eb 21                	jmp    c00244b2 <APIC::getBase()+0x40>
c0024491:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0024496:	83 ec 08             	sub    esp,0x8
c0024499:	6a 1b                	push   0x1b
c002449b:	50                   	push   eax
c002449c:	e8 2b a7 fe ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c00244a1:	83 c4 10             	add    esp,0x10
c00244a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00244a7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00244aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00244ad:	25 00 f0 ff ff       	and    eax,0xfffff000
c00244b2:	c9                   	leave  
c00244b3:	c3                   	ret    

c00244b4 <APIC::eoi(unsigned char)>:
c00244b4:	55                   	push   ebp
c00244b5:	89 e5                	mov    ebp,esp
c00244b7:	83 ec 28             	sub    esp,0x28
c00244ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00244bd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00244c0:	83 ec 0c             	sub    esp,0xc
c00244c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00244c6:	e8 a7 ff ff ff       	call   c0024472 <APIC::getBase()>
c00244cb:	83 c4 10             	add    esp,0x10
c00244ce:	05 b0 00 00 00       	add    eax,0xb0
c00244d3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00244d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00244d9:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00244df:	90                   	nop
c00244e0:	c9                   	leave  
c00244e1:	c3                   	ret    

c00244e2 <APIC::open(int, int, void*)>:
c00244e2:	55                   	push   ebp
c00244e3:	89 e5                	mov    ebp,esp
c00244e5:	57                   	push   edi
c00244e6:	56                   	push   esi
c00244e7:	53                   	push   ebx
c00244e8:	83 ec 2c             	sub    esp,0x2c
c00244eb:	83 ec 0c             	sub    esp,0xc
c00244ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00244f1:	e8 7c ff ff ff       	call   c0024472 <APIC::getBase()>
c00244f6:	83 c4 10             	add    esp,0x10
c00244f9:	89 c2                	mov    edx,eax
c00244fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244fe:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024504:	0f b6 f8             	movzx  edi,al
c0024507:	89 d0                	mov    eax,edx
c0024509:	ba 00 00 00 00       	mov    edx,0x0
c002450e:	89 c1                	mov    ecx,eax
c0024510:	80 e5 ff             	and    ch,0xff
c0024513:	89 cb                	mov    ebx,ecx
c0024515:	0f b6 f2             	movzx  esi,dl
c0024518:	89 d8                	mov    eax,ebx
c002451a:	89 f2                	mov    edx,esi
c002451c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002451f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024522:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024526:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002452a:	83 e0 00             	and    eax,0x0
c002452d:	09 d0                	or     eax,edx
c002452f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024536:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002453c:	8d 50 01             	lea    edx,[eax+0x1]
c002453f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024542:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024548:	0f b6 d0             	movzx  edx,al
c002454b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002454e:	83 c2 08             	add    edx,0x8
c0024551:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024555:	0f b6 c9             	movzx  ecx,cl
c0024558:	81 c9 00 00 01 00    	or     ecx,0x10000
c002455e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024562:	83 ec 0c             	sub    esp,0xc
c0024565:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024568:	e8 05 ff ff ff       	call   c0024472 <APIC::getBase()>
c002456d:	83 c4 10             	add    esp,0x10
c0024570:	05 f0 00 00 00       	add    eax,0xf0
c0024575:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024578:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002457b:	8b 00                	mov    eax,DWORD PTR [eax]
c002457d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024580:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024587:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002458e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024591:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024594:	89 10                	mov    DWORD PTR [eax],edx
c0024596:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002459d:	a1 50 d6 02 c0       	mov    eax,ds:0xc002d650
c00245a2:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00245a5:	7d 7c                	jge    c0024623 <APIC::open(int, int, void*)+0x141>
c00245a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245aa:	8b 04 85 60 d6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd29a0]
c00245b1:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00245b4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245b7:	8b 04 85 60 d6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd29a0]
c00245be:	c1 e8 08             	shr    eax,0x8
c00245c1:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00245c5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245c8:	8b 04 85 60 d6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd29a0]
c00245cf:	c1 e8 18             	shr    eax,0x18
c00245d2:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00245d5:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00245d9:	75 40                	jne    c002461b <APIC::open(int, int, void*)+0x139>
c00245db:	83 ec 0c             	sub    esp,0xc
c00245de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245e1:	e8 8c fe ff ff       	call   c0024472 <APIC::getBase()>
c00245e6:	83 c4 10             	add    esp,0x10
c00245e9:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00245ed:	75 07                	jne    c00245f6 <APIC::open(int, int, void*)+0x114>
c00245ef:	ba 60 03 00 00       	mov    edx,0x360
c00245f4:	eb 05                	jmp    c00245fb <APIC::open(int, int, void*)+0x119>
c00245f6:	ba 50 03 00 00       	mov    edx,0x350
c00245fb:	01 d0                	add    eax,edx
c00245fd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024600:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024603:	8b 00                	mov    eax,DWORD PTR [eax]
c0024605:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024608:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002460f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0024613:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024616:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024619:	89 10                	mov    DWORD PTR [eax],edx
c002461b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002461e:	e9 7a ff ff ff       	jmp    c002459d <APIC::open(int, int, void*)+0xbb>
c0024623:	b8 00 00 00 00       	mov    eax,0x0
c0024628:	8d 65 f4             	lea    esp,[ebp-0xc]
c002462b:	5b                   	pop    ebx
c002462c:	5e                   	pop    esi
c002462d:	5f                   	pop    edi
c002462e:	5d                   	pop    ebp
c002462f:	c3                   	ret    

c0024630 <IOAPIC::IOAPIC()>:
c0024630:	83 ec 0c             	sub    esp,0xc
c0024633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024637:	83 ec 08             	sub    esp,0x8
c002463a:	68 6c ba 02 c0       	push   0xc002ba6c
c002463f:	50                   	push   eax
c0024640:	e8 a7 f8 fe ff       	call   c0013eec <Device::Device(char const*)>
c0024645:	83 c4 10             	add    esp,0x10
c0024648:	ba 94 bb 02 c0       	mov    edx,0xc002bb94
c002464d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024651:	89 10                	mov    DWORD PTR [eax],edx
c0024653:	90                   	nop
c0024654:	83 c4 0c             	add    esp,0xc
c0024657:	c3                   	ret    

c0024658 <APIC::APIC()>:
c0024658:	53                   	push   ebx
c0024659:	83 ec 18             	sub    esp,0x18
c002465c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024660:	83 ec 08             	sub    esp,0x8
c0024663:	68 74 ba 02 c0       	push   0xc002ba74
c0024668:	50                   	push   eax
c0024669:	e8 d6 ff fe ff       	call   c0014644 <InterruptController::InterruptController(char const*)>
c002466e:	83 c4 10             	add    esp,0x10
c0024671:	ba 4c bb 02 c0       	mov    edx,0xc002bb4c
c0024676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002467a:	89 10                	mov    DWORD PTR [eax],edx
c002467c:	a0 20 f1 02 c0       	mov    al,ds:0xc002f120
c0024681:	83 f0 01             	xor    eax,0x1
c0024684:	84 c0                	test   al,al
c0024686:	0f 84 a1 00 00 00    	je     c002472d <APIC::APIC()+0xd5>
c002468c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0024691:	a0 00 d7 02 c0       	mov    al,ds:0xc002d700
c0024696:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002469a:	0f 83 86 00 00 00    	jae    c0024726 <APIC::APIC()+0xce>
c00246a0:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00246a8:	83 ec 0c             	sub    esp,0xc
c00246ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00246af:	e8 70 af fe ff       	call   c000f624 <malloc>
c00246b4:	83 c4 10             	add    esp,0x10
c00246b7:	89 c3                	mov    ebx,eax
c00246b9:	83 ec 0c             	sub    esp,0xc
c00246bc:	53                   	push   ebx
c00246bd:	e8 6e ff ff ff       	call   c0024630 <IOAPIC::IOAPIC()>
c00246c2:	83 c4 10             	add    esp,0x10
c00246c5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00246c9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00246ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00246d2:	89 14 85 00 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f00],edx
c00246d9:	a1 e0 f0 02 c0       	mov    eax,ds:0xc002f0e0
c00246de:	40                   	inc    eax
c00246df:	a3 e0 f0 02 c0       	mov    ds:0xc002f0e0,eax
c00246e4:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c00246e9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00246ef:	83 ec 08             	sub    esp,0x8
c00246f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00246f6:	50                   	push   eax
c00246f7:	e8 00 f6 fe ff       	call   c0013cfc <Device::addChild(Device*)>
c00246fc:	83 c4 10             	add    esp,0x10
c00246ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024703:	8b 00                	mov    eax,DWORD PTR [eax]
c0024705:	83 c0 08             	add    eax,0x8
c0024708:	8b 00                	mov    eax,DWORD PTR [eax]
c002470a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002470f:	6a 00                	push   0x0
c0024711:	6a 00                	push   0x0
c0024713:	52                   	push   edx
c0024714:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024718:	ff d0                	call   eax
c002471a:	83 c4 10             	add    esp,0x10
c002471d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0024721:	e9 6b ff ff ff       	jmp    c0024691 <APIC::APIC()+0x39>
c0024726:	c6 05 20 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f120,0x1
c002472d:	90                   	nop
c002472e:	83 c4 18             	add    esp,0x18
c0024731:	5b                   	pop    ebx
c0024732:	c3                   	ret    
c0024733:	90                   	nop

c0024734 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0024734:	55                   	push   ebp
c0024735:	89 e5                	mov    ebp,esp
c0024737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002473a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024740:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024743:	72 1d                	jb     c0024762 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024748:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002474e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024751:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0024757:	01 d0                	add    eax,edx
c0024759:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002475c:	73 04                	jae    c0024762 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002475e:	b0 01                	mov    al,0x1
c0024760:	eb 02                	jmp    c0024764 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024762:	b0 00                	mov    al,0x0
c0024764:	5d                   	pop    ebp
c0024765:	c3                   	ret    

c0024766 <IOAPIC::read(int)>:
c0024766:	55                   	push   ebp
c0024767:	89 e5                	mov    ebp,esp
c0024769:	83 ec 10             	sub    esp,0x10
c002476c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002476f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024775:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024778:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002477b:	0f b6 d0             	movzx  edx,al
c002477e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024781:	89 10                	mov    DWORD PTR [eax],edx
c0024783:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024786:	83 c0 10             	add    eax,0x10
c0024789:	8b 00                	mov    eax,DWORD PTR [eax]
c002478b:	c9                   	leave  
c002478c:	c3                   	ret    
c002478d:	90                   	nop

c002478e <IOAPIC::open(int, int, void*)>:
c002478e:	55                   	push   ebp
c002478f:	89 e5                	mov    ebp,esp
c0024791:	57                   	push   edi
c0024792:	56                   	push   esi
c0024793:	53                   	push   ebx
c0024794:	83 ec 0c             	sub    esp,0xc
c0024797:	83 ec 0c             	sub    esp,0xc
c002479a:	68 9f ba 02 c0       	push   0xc002ba9f
c002479f:	e8 31 e1 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00247a4:	83 c4 10             	add    esp,0x10
c00247a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247aa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247ad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00247b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00247bc:	8b 14 85 40 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd28c0]
c00247c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247c6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00247cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00247d5:	8b 14 85 c0 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2840]
c00247dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247df:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00247e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247e8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00247ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247f1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00247f7:	0f b6 f8             	movzx  edi,al
c00247fa:	89 d0                	mov    eax,edx
c00247fc:	ba 00 00 00 00       	mov    edx,0x0
c0024801:	89 c1                	mov    ecx,eax
c0024803:	80 e5 ff             	and    ch,0xff
c0024806:	89 cb                	mov    ebx,ecx
c0024808:	0f b6 f2             	movzx  esi,dl
c002480b:	89 d8                	mov    eax,ebx
c002480d:	89 f2                	mov    edx,esi
c002480f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024812:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024815:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024819:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002481d:	83 e0 00             	and    eax,0x0
c0024820:	09 d0                	or     eax,edx
c0024822:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024829:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002482f:	8d 50 01             	lea    edx,[eax+0x1]
c0024832:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024835:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002483b:	0f b6 d0             	movzx  edx,al
c002483e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024841:	83 c2 08             	add    edx,0x8
c0024844:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024848:	0f b6 c9             	movzx  ecx,cl
c002484b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0024851:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024855:	83 ec 08             	sub    esp,0x8
c0024858:	6a 01                	push   0x1
c002485a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002485d:	e8 04 ff ff ff       	call   c0024766 <IOAPIC::read(int)>
c0024862:	83 c4 10             	add    esp,0x10
c0024865:	c1 f8 10             	sar    eax,0x10
c0024868:	0f b6 c0             	movzx  eax,al
c002486b:	8d 50 01             	lea    edx,[eax+0x1]
c002486e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024871:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0024877:	b8 00 00 00 00       	mov    eax,0x0
c002487c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002487f:	5b                   	pop    ebx
c0024880:	5e                   	pop    esi
c0024881:	5f                   	pop    edi
c0024882:	5d                   	pop    ebp
c0024883:	c3                   	ret    

c0024884 <IOAPIC::write(int, int)>:
c0024884:	55                   	push   ebp
c0024885:	89 e5                	mov    ebp,esp
c0024887:	83 ec 10             	sub    esp,0x10
c002488a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002488d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024893:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024896:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024899:	0f b6 d0             	movzx  edx,al
c002489c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002489f:	89 10                	mov    DWORD PTR [eax],edx
c00248a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00248a4:	8d 50 10             	lea    edx,[eax+0x10]
c00248a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00248aa:	89 02                	mov    DWORD PTR [edx],eax
c00248ac:	90                   	nop
c00248ad:	c9                   	leave  
c00248ae:	c3                   	ret    
c00248af:	90                   	nop

c00248b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00248b0:	55                   	push   ebp
c00248b1:	89 e5                	mov    ebp,esp
c00248b3:	53                   	push   ebx
c00248b4:	83 ec 2c             	sub    esp,0x2c
c00248b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00248ba:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00248bd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00248c0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00248c3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00248c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00248c9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00248cc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00248cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00248d2:	88 d8                	mov    al,bl
c00248d4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00248d7:	88 c8                	mov    al,cl
c00248d9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00248dc:	88 d0                	mov    al,dl
c00248de:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00248e1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00248e5:	83 c0 08             	add    eax,0x8
c00248e8:	01 c0                	add    eax,eax
c00248ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00248ed:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00248f1:	83 c0 08             	add    eax,0x8
c00248f4:	01 c0                	add    eax,eax
c00248f6:	40                   	inc    eax
c00248f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00248fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00248fd:	50                   	push   eax
c00248fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024901:	e8 60 fe ff ff       	call   c0024766 <IOAPIC::read(int)>
c0024906:	83 c4 08             	add    esp,0x8
c0024909:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002490c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0024913:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0024916:	c1 e0 18             	shl    eax,0x18
c0024919:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002491c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002491f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024922:	52                   	push   edx
c0024923:	50                   	push   eax
c0024924:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024927:	e8 58 ff ff ff       	call   c0024884 <IOAPIC::write(int, int)>
c002492c:	83 c4 0c             	add    esp,0xc
c002492f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024932:	50                   	push   eax
c0024933:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024936:	e8 2b fe ff ff       	call   c0024766 <IOAPIC::read(int)>
c002493b:	83 c4 08             	add    esp,0x8
c002493e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024941:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0024948:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002494f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0024956:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002495a:	74 09                	je     c0024965 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002495c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024963:	eb 07                	jmp    c002496c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0024965:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002496c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0024970:	74 09                	je     c002497b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024972:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0024979:	eb 07                	jmp    c0024982 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002497b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0024982:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0024989:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002498d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0024990:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0024993:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024996:	52                   	push   edx
c0024997:	50                   	push   eax
c0024998:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002499b:	e8 e4 fe ff ff       	call   c0024884 <IOAPIC::write(int, int)>
c00249a0:	83 c4 0c             	add    esp,0xc
c00249a3:	90                   	nop
c00249a4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00249a7:	c9                   	leave  
c00249a8:	c3                   	ret    
c00249a9:	90                   	nop

c00249aa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00249aa:	55                   	push   ebp
c00249ab:	89 e5                	mov    ebp,esp
c00249ad:	57                   	push   edi
c00249ae:	56                   	push   esi
c00249af:	53                   	push   ebx
c00249b0:	83 ec 2c             	sub    esp,0x2c
c00249b3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00249b6:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00249b9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00249bd:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00249c1:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00249c5:	74 5a                	je     c0024a21 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00249c7:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00249cb:	7f 44                	jg     c0024a11 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00249cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249d0:	05 e0 bf 02 c0       	add    eax,0xc002bfe0
c00249d5:	8a 00                	mov    al,BYTE PTR [eax]
c00249d7:	0f b6 c0             	movzx  eax,al
c00249da:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00249dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249e0:	66 8b 84 00 e0 d6 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2920]
c00249e8:	0f b7 c0             	movzx  eax,ax
c00249eb:	83 e0 02             	and    eax,0x2
c00249ee:	85 c0                	test   eax,eax
c00249f0:	74 04                	je     c00249f6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00249f2:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00249f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249f9:	66 8b 84 00 e0 d6 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2920]
c0024a01:	0f b7 c0             	movzx  eax,ax
c0024a04:	83 e0 08             	and    eax,0x8
c0024a07:	85 c0                	test   eax,eax
c0024a09:	74 16                	je     c0024a21 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024a0b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024a0f:	eb 10                	jmp    c0024a21 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024a11:	83 ec 0c             	sub    esp,0xc
c0024a14:	68 b0 ba 02 c0       	push   0xc002bab0
c0024a19:	e8 a5 50 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0024a1e:	83 c4 10             	add    esp,0x10
c0024a21:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0024a25:	a1 e0 f0 02 c0       	mov    eax,ds:0xc002f0e0
c0024a2a:	83 ec 08             	sub    esp,0x8
c0024a2d:	50                   	push   eax
c0024a2e:	68 e8 ba 02 c0       	push   0xc002bae8
c0024a33:	e8 9d de fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0024a38:	83 c4 10             	add    esp,0x10
c0024a3b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0024a42:	a1 e0 f0 02 c0       	mov    eax,ds:0xc002f0e0
c0024a47:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024a4a:	7d 67                	jge    c0024ab3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024a4c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024a4f:	8b 04 85 00 f1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0f00]
c0024a56:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024a59:	83 ec 08             	sub    esp,0x8
c0024a5c:	52                   	push   edx
c0024a5d:	50                   	push   eax
c0024a5e:	e8 d1 fc ff ff       	call   c0024734 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024a63:	83 c4 10             	add    esp,0x10
c0024a66:	84 c0                	test   al,al
c0024a68:	74 44                	je     c0024aae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024a6a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024a6d:	8b 1c 85 00 f1 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd0f00]
c0024a74:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0024a78:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024a7b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024a7f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a82:	83 c0 20             	add    eax,0x20
c0024a85:	0f b6 f0             	movzx  esi,al
c0024a88:	b8 00 00 00 00       	mov    eax,0x0
c0024a8d:	99                   	cdq    
c0024a8e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024a91:	0f b6 c9             	movzx  ecx,cl
c0024a94:	83 ec 04             	sub    esp,0x4
c0024a97:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024a9a:	57                   	push   edi
c0024a9b:	56                   	push   esi
c0024a9c:	52                   	push   edx
c0024a9d:	50                   	push   eax
c0024a9e:	51                   	push   ecx
c0024a9f:	53                   	push   ebx
c0024aa0:	e8 0b fe ff ff       	call   c00248b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0024aa5:	83 c4 20             	add    esp,0x20
c0024aa8:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024aac:	eb 05                	jmp    c0024ab3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024aae:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0024ab1:	eb 8f                	jmp    c0024a42 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024ab3:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0024ab6:	83 f0 01             	xor    eax,0x1
c0024ab9:	84 c0                	test   al,al
c0024abb:	74 10                	je     c0024acd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024abd:	83 ec 0c             	sub    esp,0xc
c0024ac0:	68 ff ba 02 c0       	push   0xc002baff
c0024ac5:	e8 f9 4f ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0024aca:	83 c4 10             	add    esp,0x10
c0024acd:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0024ad1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0024ad8:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0024adc:	7f 65                	jg     c0024b43 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0024ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024ae1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024ae4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024aeb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024aee:	01 ca                	add    edx,ecx
c0024af0:	83 c2 54             	add    edx,0x54
c0024af3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0024af7:	85 c0                	test   eax,eax
c0024af9:	75 43                	jne    c0024b3e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0024afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024afe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024b01:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024b08:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024b0b:	01 ca                	add    edx,ecx
c0024b0d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0024b10:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0024b13:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024b1a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024b1d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024b24:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024b27:	01 ca                	add    edx,ecx
c0024b29:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024b2f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0024b32:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024b36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024b39:	83 e8 20             	sub    eax,0x20
c0024b3c:	eb 1a                	jmp    c0024b58 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024b3e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0024b41:	eb 95                	jmp    c0024ad8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0024b43:	83 ec 0c             	sub    esp,0xc
c0024b46:	68 0c bb 02 c0       	push   0xc002bb0c
c0024b4b:	e8 73 4f ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0024b50:	83 c4 10             	add    esp,0x10
c0024b53:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024b58:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024b5b:	5b                   	pop    ebx
c0024b5c:	5e                   	pop    esi
c0024b5d:	5f                   	pop    edi
c0024b5e:	5d                   	pop    ebp
c0024b5f:	c3                   	ret    

c0024b60 <PIC::disable()>:
c0024b60:	55                   	push   ebp
c0024b61:	89 e5                	mov    ebp,esp
c0024b63:	83 ec 10             	sub    esp,0x10
c0024b66:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024b6c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024b70:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024b73:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024b77:	ee                   	out    dx,al
c0024b78:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024b7e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024b82:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024b85:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0024b89:	ee                   	out    dx,al
c0024b8a:	90                   	nop
c0024b8b:	c9                   	leave  
c0024b8c:	c3                   	ret    
c0024b8d:	90                   	nop

c0024b8e <PIC::close(int, int, void*)>:
c0024b8e:	55                   	push   ebp
c0024b8f:	89 e5                	mov    ebp,esp
c0024b91:	83 ec 08             	sub    esp,0x8
c0024b94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024b97:	8b 00                	mov    eax,DWORD PTR [eax]
c0024b99:	83 c0 3c             	add    eax,0x3c
c0024b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0024b9e:	83 ec 0c             	sub    esp,0xc
c0024ba1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ba4:	ff d0                	call   eax
c0024ba6:	83 c4 10             	add    esp,0x10
c0024ba9:	b8 00 00 00 00       	mov    eax,0x0
c0024bae:	c9                   	leave  
c0024baf:	c3                   	ret    

c0024bb0 <PIC::PIC()>:
c0024bb0:	83 ec 0c             	sub    esp,0xc
c0024bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bb7:	83 ec 08             	sub    esp,0x8
c0024bba:	68 b8 bb 02 c0       	push   0xc002bbb8
c0024bbf:	50                   	push   eax
c0024bc0:	e8 7f fa fe ff       	call   c0014644 <InterruptController::InterruptController(char const*)>
c0024bc5:	83 c4 10             	add    esp,0x10
c0024bc8:	ba e4 bb 02 c0       	mov    edx,0xc002bbe4
c0024bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bd1:	89 10                	mov    DWORD PTR [eax],edx
c0024bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bd7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024bdd:	0f b6 d0             	movzx  edx,al
c0024be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024be4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024bf5:	0f b6 d0             	movzx  edx,al
c0024bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bfc:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c05:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024c0b:	8d 50 01             	lea    edx,[eax+0x1]
c0024c0e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024c12:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024c18:	0f b6 d0             	movzx  edx,al
c0024c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c1f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024c23:	83 e1 3f             	and    ecx,0x3f
c0024c26:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024c34:	0f b6 d0             	movzx  edx,al
c0024c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c3b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c46:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024c4c:	0f b6 d0             	movzx  edx,al
c0024c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c53:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c5c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024c62:	8d 50 01             	lea    edx,[eax+0x1]
c0024c65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024c69:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024c6f:	0f b6 d0             	movzx  edx,al
c0024c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c76:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024c7a:	83 e1 3f             	and    ecx,0x3f
c0024c7d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024c81:	90                   	nop
c0024c82:	83 c4 0c             	add    esp,0xc
c0024c85:	c3                   	ret    

c0024c86 <PIC::ioWait()>:
c0024c86:	eb 00                	jmp    c0024c88 <PIC::ioWait()+0x2>
c0024c88:	eb 00                	jmp    c0024c8a <PIC::ioWait()+0x4>
c0024c8a:	90                   	nop
c0024c8b:	c3                   	ret    

c0024c8c <PIC::getIRQReg(int)>:
c0024c8c:	55                   	push   ebp
c0024c8d:	89 e5                	mov    ebp,esp
c0024c8f:	83 ec 10             	sub    esp,0x10
c0024c92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024c95:	0f b6 c0             	movzx  eax,al
c0024c98:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024c9e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024ca1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024ca4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024ca8:	ee                   	out    dx,al
c0024ca9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024cac:	0f b6 c0             	movzx  eax,al
c0024caf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024cb5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024cb8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024cbb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024cbf:	ee                   	out    dx,al
c0024cc0:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0024cc6:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0024cca:	89 c2                	mov    edx,eax
c0024ccc:	ec                   	in     al,dx
c0024ccd:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024cd0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024cd3:	0f b6 c0             	movzx  eax,al
c0024cd6:	c1 e0 08             	shl    eax,0x8
c0024cd9:	89 c1                	mov    ecx,eax
c0024cdb:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024ce1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0024ce5:	89 c2                	mov    edx,eax
c0024ce7:	ec                   	in     al,dx
c0024ce8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024ceb:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024cee:	0f b6 c0             	movzx  eax,al
c0024cf1:	09 c8                	or     eax,ecx
c0024cf3:	c9                   	leave  
c0024cf4:	c3                   	ret    
c0024cf5:	90                   	nop

c0024cf6 <PIC::eoi(unsigned char)>:
c0024cf6:	55                   	push   ebp
c0024cf7:	89 e5                	mov    ebp,esp
c0024cf9:	83 ec 14             	sub    esp,0x14
c0024cfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024cff:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0024d02:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024d06:	75 1e                	jne    c0024d26 <PIC::eoi(unsigned char)+0x30>
c0024d08:	6a 0b                	push   0xb
c0024d0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d0d:	e8 7a ff ff ff       	call   c0024c8c <PIC::getIRQReg(int)>
c0024d12:	83 c4 08             	add    esp,0x8
c0024d15:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0024d19:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024d1d:	25 80 00 00 00       	and    eax,0x80
c0024d22:	85 c0                	test   eax,eax
c0024d24:	74 5f                	je     c0024d85 <PIC::eoi(unsigned char)+0x8f>
c0024d26:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024d2a:	75 2d                	jne    c0024d59 <PIC::eoi(unsigned char)+0x63>
c0024d2c:	6a 0b                	push   0xb
c0024d2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d31:	e8 56 ff ff ff       	call   c0024c8c <PIC::getIRQReg(int)>
c0024d36:	83 c4 08             	add    esp,0x8
c0024d39:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024d3d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024d40:	66 85 c0             	test   ax,ax
c0024d43:	78 14                	js     c0024d59 <PIC::eoi(unsigned char)+0x63>
c0024d45:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024d4b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024d4f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024d52:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024d56:	ee                   	out    dx,al
c0024d57:	eb 2d                	jmp    c0024d86 <PIC::eoi(unsigned char)+0x90>
c0024d59:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024d5d:	76 12                	jbe    c0024d71 <PIC::eoi(unsigned char)+0x7b>
c0024d5f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024d65:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024d69:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024d6c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024d70:	ee                   	out    dx,al
c0024d71:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024d77:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024d7b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024d7e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024d82:	ee                   	out    dx,al
c0024d83:	eb 01                	jmp    c0024d86 <PIC::eoi(unsigned char)+0x90>
c0024d85:	90                   	nop
c0024d86:	c9                   	leave  
c0024d87:	c3                   	ret    

c0024d88 <PIC::remap()>:
c0024d88:	55                   	push   ebp
c0024d89:	89 e5                	mov    ebp,esp
c0024d8b:	83 ec 48             	sub    esp,0x48
c0024d8e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024d95:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024d9c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024da2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024da5:	89 c2                	mov    edx,eax
c0024da7:	ec                   	in     al,dx
c0024da8:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024dab:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024dae:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024db1:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024db7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024dba:	89 c2                	mov    edx,eax
c0024dbc:	ec                   	in     al,dx
c0024dbd:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024dc0:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024dc3:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024dc6:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024dcc:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024dd0:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024dd3:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024dd6:	ee                   	out    dx,al
c0024dd7:	83 ec 0c             	sub    esp,0xc
c0024dda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ddd:	e8 a4 fe ff ff       	call   c0024c86 <PIC::ioWait()>
c0024de2:	83 c4 10             	add    esp,0x10
c0024de5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024deb:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024def:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024df2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024df5:	ee                   	out    dx,al
c0024df6:	83 ec 0c             	sub    esp,0xc
c0024df9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024dfc:	e8 85 fe ff ff       	call   c0024c86 <PIC::ioWait()>
c0024e01:	83 c4 10             	add    esp,0x10
c0024e04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024e07:	0f b6 c0             	movzx  eax,al
c0024e0a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024e10:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024e13:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024e16:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024e19:	ee                   	out    dx,al
c0024e1a:	83 ec 0c             	sub    esp,0xc
c0024e1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e20:	e8 61 fe ff ff       	call   c0024c86 <PIC::ioWait()>
c0024e25:	83 c4 10             	add    esp,0x10
c0024e28:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024e2b:	0f b6 c0             	movzx  eax,al
c0024e2e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024e34:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024e37:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024e3a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024e3d:	ee                   	out    dx,al
c0024e3e:	83 ec 0c             	sub    esp,0xc
c0024e41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e44:	e8 3d fe ff ff       	call   c0024c86 <PIC::ioWait()>
c0024e49:	83 c4 10             	add    esp,0x10
c0024e4c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024e52:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024e56:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024e59:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024e5c:	ee                   	out    dx,al
c0024e5d:	83 ec 0c             	sub    esp,0xc
c0024e60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e63:	e8 1e fe ff ff       	call   c0024c86 <PIC::ioWait()>
c0024e68:	83 c4 10             	add    esp,0x10
c0024e6b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024e71:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024e75:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024e78:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024e7b:	ee                   	out    dx,al
c0024e7c:	83 ec 0c             	sub    esp,0xc
c0024e7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e82:	e8 ff fd ff ff       	call   c0024c86 <PIC::ioWait()>
c0024e87:	83 c4 10             	add    esp,0x10
c0024e8a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024e90:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024e94:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024e97:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024e9a:	ee                   	out    dx,al
c0024e9b:	83 ec 0c             	sub    esp,0xc
c0024e9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ea1:	e8 e0 fd ff ff       	call   c0024c86 <PIC::ioWait()>
c0024ea6:	83 c4 10             	add    esp,0x10
c0024ea9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024eaf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024eb3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024eb6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024eb9:	ee                   	out    dx,al
c0024eba:	83 ec 0c             	sub    esp,0xc
c0024ebd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ec0:	e8 c1 fd ff ff       	call   c0024c86 <PIC::ioWait()>
c0024ec5:	83 c4 10             	add    esp,0x10
c0024ec8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024ecc:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024ed2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024ed5:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024ed8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024edb:	ee                   	out    dx,al
c0024edc:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024ee0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024ee6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024ee9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024eec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024eef:	ee                   	out    dx,al
c0024ef0:	90                   	nop
c0024ef1:	c9                   	leave  
c0024ef2:	c3                   	ret    
c0024ef3:	90                   	nop

c0024ef4 <PIC::open(int, int, void*)>:
c0024ef4:	55                   	push   ebp
c0024ef5:	89 e5                	mov    ebp,esp
c0024ef7:	83 ec 18             	sub    esp,0x18
c0024efa:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024f00:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024f04:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024f07:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024f0b:	ee                   	out    dx,al
c0024f0c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024f12:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024f16:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024f19:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024f1d:	ee                   	out    dx,al
c0024f1e:	83 ec 0c             	sub    esp,0xc
c0024f21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f24:	e8 5f fe ff ff       	call   c0024d88 <PIC::remap()>
c0024f29:	83 c4 10             	add    esp,0x10
c0024f2c:	b8 00 00 00 00       	mov    eax,0x0
c0024f31:	c9                   	leave  
c0024f32:	c3                   	ret    
c0024f33:	90                   	nop

c0024f34 <APICTimer::close(int, int, void*)>:
c0024f34:	b8 00 00 00 00       	mov    eax,0x0
c0024f39:	c3                   	ret    

c0024f3a <apicTimerHandler(regs*, void*)>:
c0024f3a:	83 ec 0c             	sub    esp,0xc
c0024f3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f41:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f43:	99                   	cdq    
c0024f44:	52                   	push   edx
c0024f45:	50                   	push   eax
c0024f46:	6a 00                	push   0x0
c0024f48:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024f4d:	e8 8a 07 00 00       	call   c00256dc <__udivdi3>
c0024f52:	83 c4 10             	add    esp,0x10
c0024f55:	83 ec 08             	sub    esp,0x8
c0024f58:	52                   	push   edx
c0024f59:	50                   	push   eax
c0024f5a:	e8 e4 15 ff ff       	call   c0016543 <timerHandler(unsigned long long)>
c0024f5f:	83 c4 10             	add    esp,0x10
c0024f62:	90                   	nop
c0024f63:	83 c4 0c             	add    esp,0xc
c0024f66:	c3                   	ret    
c0024f67:	90                   	nop

c0024f68 <APICTimer::write(int)>:
c0024f68:	53                   	push   ebx
c0024f69:	83 ec 28             	sub    esp,0x28
c0024f6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f70:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024f74:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024f7a:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c0024f7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024f85:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024f8b:	83 ec 0c             	sub    esp,0xc
c0024f8e:	50                   	push   eax
c0024f8f:	e8 de f4 ff ff       	call   c0024472 <APIC::getBase()>
c0024f94:	83 c4 10             	add    esp,0x10
c0024f97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024f9b:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0024fa0:	8b 15 14 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d414
c0024fa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024faa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024fae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024fb2:	05 e0 03 00 00       	add    eax,0x3e0
c0024fb7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024fbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024fc1:	05 80 03 00 00       	add    eax,0x380
c0024fc6:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024fcc:	fb                   	sti    
c0024fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fd1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024fd5:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024fda:	83 d2 00             	adc    edx,0x0
c0024fdd:	89 c1                	mov    ecx,eax
c0024fdf:	89 d3                	mov    ebx,edx
c0024fe1:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0024fe6:	8b 15 14 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d414
c0024fec:	39 c8                	cmp    eax,ecx
c0024fee:	89 d0                	mov    eax,edx
c0024ff0:	19 d8                	sbb    eax,ebx
c0024ff2:	73 02                	jae    c0024ff6 <APICTimer::write(int)+0x8e>
c0024ff4:	eb d7                	jmp    c0024fcd <APICTimer::write(int)+0x65>
c0024ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ffa:	05 20 03 00 00       	add    eax,0x320
c0024fff:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025005:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025009:	05 90 03 00 00       	add    eax,0x390
c002500e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025010:	f7 d0                	not    eax
c0025012:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025016:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002501a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002501e:	ba 00 00 00 00       	mov    edx,0x0
c0025023:	f7 f3                	div    ebx
c0025025:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025029:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002502d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025033:	0d 00 00 02 00       	or     eax,0x20000
c0025038:	89 c2                	mov    edx,eax
c002503a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002503e:	05 20 03 00 00       	add    eax,0x320
c0025043:	89 10                	mov    DWORD PTR [eax],edx
c0025045:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025049:	05 e0 03 00 00       	add    eax,0x3e0
c002504e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025058:	05 80 03 00 00       	add    eax,0x380
c002505d:	89 c2                	mov    edx,eax
c002505f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025063:	89 02                	mov    DWORD PTR [edx],eax
c0025065:	90                   	nop
c0025066:	83 c4 28             	add    esp,0x28
c0025069:	5b                   	pop    ebx
c002506a:	c3                   	ret    
c002506b:	90                   	nop

c002506c <APICTimer::open(int, int, void*)>:
c002506c:	57                   	push   edi
c002506d:	56                   	push   esi
c002506e:	53                   	push   ebx
c002506f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025073:	8b 00                	mov    eax,DWORD PTR [eax]
c0025075:	83 c0 24             	add    eax,0x24
c0025078:	8b 00                	mov    eax,DWORD PTR [eax]
c002507a:	83 ec 08             	sub    esp,0x8
c002507d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025085:	ff d0                	call   eax
c0025087:	83 c4 10             	add    esp,0x10
c002508a:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c002508f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025095:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002509b:	83 ec 0c             	sub    esp,0xc
c002509e:	50                   	push   eax
c002509f:	e8 ce f3 ff ff       	call   c0024472 <APIC::getBase()>
c00250a4:	83 c4 10             	add    esp,0x10
c00250a7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00250ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00250b7:	0f b6 f8             	movzx  edi,al
c00250ba:	89 d0                	mov    eax,edx
c00250bc:	ba 00 00 00 00       	mov    edx,0x0
c00250c1:	89 c1                	mov    ecx,eax
c00250c3:	80 e5 ff             	and    ch,0xff
c00250c6:	89 cb                	mov    ebx,ecx
c00250c8:	0f b6 f2             	movzx  esi,dl
c00250cb:	89 d8                	mov    eax,ebx
c00250cd:	89 f2                	mov    edx,esi
c00250cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00250d3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00250d6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00250da:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00250de:	83 e0 00             	and    eax,0x0
c00250e1:	09 d0                	or     eax,edx
c00250e3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00250e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250eb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00250f1:	8d 50 01             	lea    edx,[eax+0x1]
c00250f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00250f8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00250fe:	0f b6 d0             	movzx  edx,al
c0025101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025105:	83 c2 08             	add    edx,0x8
c0025108:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002510c:	0f b6 c9             	movzx  ecx,cl
c002510f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025115:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002511d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025121:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002512f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025135:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025139:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002513f:	83 ec 0c             	sub    esp,0xc
c0025142:	51                   	push   ecx
c0025143:	6a 01                	push   0x1
c0025145:	68 3a 4f 02 c0       	push   0xc0024f3a
c002514a:	52                   	push   edx
c002514b:	50                   	push   eax
c002514c:	e8 2f eb fe ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025151:	83 c4 20             	add    esp,0x20
c0025154:	89 c2                	mov    edx,eax
c0025156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002515a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025160:	b8 00 00 00 00       	mov    eax,0x0
c0025165:	5b                   	pop    ebx
c0025166:	5e                   	pop    esi
c0025167:	5f                   	pop    edi
c0025168:	c3                   	ret    
c0025169:	90                   	nop

c002516a <APICTimer::APICTimer()>:
c002516a:	83 ec 0c             	sub    esp,0xc
c002516d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025171:	83 ec 08             	sub    esp,0x8
c0025174:	68 24 bc 02 c0       	push   0xc002bc24
c0025179:	50                   	push   eax
c002517a:	e8 35 13 ff ff       	call   c00164b4 <Timer::Timer(char const*)>
c002517f:	83 c4 10             	add    esp,0x10
c0025182:	ba 38 bc 02 c0       	mov    edx,0xc002bc38
c0025187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002518b:	89 10                	mov    DWORD PTR [eax],edx
c002518d:	90                   	nop
c002518e:	83 c4 0c             	add    esp,0xc
c0025191:	c3                   	ret    

c0025192 <PIT::write(int)>:
c0025192:	83 ec 10             	sub    esp,0x10
c0025195:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025199:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002519d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00251a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00251a7:	a3 24 f1 02 c0       	mov    ds:0xc002f124,eax
c00251ac:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00251b1:	99                   	cdq    
c00251b2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00251b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00251ba:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00251c1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00251c6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00251ca:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00251cf:	ee                   	out    dx,al
c00251d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00251d4:	0f b6 c0             	movzx  eax,al
c00251d7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00251de:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00251e2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00251e6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00251eb:	ee                   	out    dx,al
c00251ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00251f0:	c1 f8 08             	sar    eax,0x8
c00251f3:	0f b6 c0             	movzx  eax,al
c00251f6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00251fd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025201:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025205:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002520a:	ee                   	out    dx,al
c002520b:	90                   	nop
c002520c:	83 c4 10             	add    esp,0x10
c002520f:	c3                   	ret    

c0025210 <pitHandler(regs*, void*)>:
c0025210:	83 ec 0c             	sub    esp,0xc
c0025213:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c0025218:	99                   	cdq    
c0025219:	52                   	push   edx
c002521a:	50                   	push   eax
c002521b:	6a 00                	push   0x0
c002521d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025222:	e8 b5 04 00 00       	call   c00256dc <__udivdi3>
c0025227:	83 c4 10             	add    esp,0x10
c002522a:	83 ec 08             	sub    esp,0x8
c002522d:	52                   	push   edx
c002522e:	50                   	push   eax
c002522f:	e8 0f 13 ff ff       	call   c0016543 <timerHandler(unsigned long long)>
c0025234:	83 c4 10             	add    esp,0x10
c0025237:	90                   	nop
c0025238:	83 c4 0c             	add    esp,0xc
c002523b:	c3                   	ret    

c002523c <PIT::open(int, int, void*)>:
c002523c:	83 ec 0c             	sub    esp,0xc
c002523f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025243:	8b 00                	mov    eax,DWORD PTR [eax]
c0025245:	83 c0 24             	add    eax,0x24
c0025248:	8b 00                	mov    eax,DWORD PTR [eax]
c002524a:	83 ec 08             	sub    esp,0x8
c002524d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025255:	ff d0                	call   eax
c0025257:	83 c4 10             	add    esp,0x10
c002525a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002525e:	83 ec 0c             	sub    esp,0xc
c0025261:	6a 00                	push   0x0
c0025263:	6a 01                	push   0x1
c0025265:	68 10 52 02 c0       	push   0xc0025210
c002526a:	6a 00                	push   0x0
c002526c:	50                   	push   eax
c002526d:	e8 0e ea fe ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025272:	83 c4 20             	add    esp,0x20
c0025275:	89 c2                	mov    edx,eax
c0025277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002527b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025281:	b8 00 00 00 00       	mov    eax,0x0
c0025286:	83 c4 0c             	add    esp,0xc
c0025289:	c3                   	ret    

c002528a <PIT::close(int, int, void*)>:
c002528a:	83 ec 0c             	sub    esp,0xc
c002528d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025291:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002529b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002529f:	6a 01                	push   0x1
c00252a1:	68 10 52 02 c0       	push   0xc0025210
c00252a6:	6a 00                	push   0x0
c00252a8:	50                   	push   eax
c00252a9:	e8 10 ea fe ff       	call   c0013cbe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00252ae:	83 c4 10             	add    esp,0x10
c00252b1:	b8 00 00 00 00       	mov    eax,0x0
c00252b6:	83 c4 0c             	add    esp,0xc
c00252b9:	c3                   	ret    

c00252ba <PIT::PIT()>:
c00252ba:	83 ec 0c             	sub    esp,0xc
c00252bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252c1:	83 ec 08             	sub    esp,0x8
c00252c4:	68 60 bc 02 c0       	push   0xc002bc60
c00252c9:	50                   	push   eax
c00252ca:	e8 e5 11 ff ff       	call   c00164b4 <Timer::Timer(char const*)>
c00252cf:	83 c4 10             	add    esp,0x10
c00252d2:	ba 88 bc 02 c0       	mov    edx,0xc002bc88
c00252d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252db:	89 10                	mov    DWORD PTR [eax],edx
c00252dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00252e7:	0f b6 d0             	movzx  edx,al
c00252ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252ee:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00252f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00252ff:	0f b6 d0             	movzx  edx,al
c0025302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025306:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002530b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002530f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025315:	8d 50 01             	lea    edx,[eax+0x1]
c0025318:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002531c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025322:	0f b6 d0             	movzx  edx,al
c0025325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025329:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002532d:	83 e1 3f             	and    ecx,0x3f
c0025330:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025334:	90                   	nop
c0025335:	83 c4 0c             	add    esp,0xc
c0025338:	c3                   	ret    
c0025339:	66 90                	xchg   ax,ax
c002533b:	66 90                	xchg   ax,ax
c002533d:	66 90                	xchg   ax,ax
c002533f:	90                   	nop

c0025340 <avxDetect>:
c0025340:	b8 00 00 00 00       	mov    eax,0x0
c0025345:	c3                   	ret    

c0025346 <avxSave>:
c0025346:	c3                   	ret    

c0025347 <avxLoad>:
c0025347:	c3                   	ret    

c0025348 <avxInit>:
c0025348:	c3                   	ret    

c0025349 <avxClose>:
c0025349:	c3                   	ret    

c002534a <wouldSheSayYes>:
c002534a:	c3                   	ret    
c002534b:	49                   	dec    ecx
c002534c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025350:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025354:	75 20                	jne    c0025376 <sseDetect.noSSE+0x1>
c0025356:	4e                   	dec    esi
c0025357:	79 61                	jns    c00253ba <x87Detect+0x14>
c0025359:	68 2e 2e 2e 00       	push   0x2e2e2e
c002535e:	66 90                	xchg   ax,ax

c0025360 <absolutelyNoChanceInHell>:
c0025360:	b8 01 00 00 00       	mov    eax,0x1
c0025365:	0f a2                	cpuid  
c0025367:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002536d:	74 06                	je     c0025375 <sseDetect.noSSE>
c002536f:	b8 01 00 00 00       	mov    eax,0x1
c0025374:	c3                   	ret    

c0025375 <sseDetect.noSSE>:
c0025375:	31 c0                	xor    eax,eax
c0025377:	c3                   	ret    

c0025378 <sseSave>:
c0025378:	0f ae 44 24 08       	fxsave [esp+0x8]
c002537d:	c3                   	ret    

c002537e <sseLoad>:
c002537e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025383:	c3                   	ret    

c0025384 <sseInit>:
c0025384:	e8 43 00 00 00       	call   c00253cc <x87Init>
c0025389:	0f 20 e0             	mov    eax,cr4
c002538c:	66 0d 00 06          	or     ax,0x600
c0025390:	0f 22 e0             	mov    cr4,eax
c0025393:	c3                   	ret    

c0025394 <sseClose>:
c0025394:	c3                   	ret    
c0025395:	66 90                	xchg   ax,ax
c0025397:	66 90                	xchg   ax,ax
c0025399:	66 90                	xchg   ax,ax
c002539b:	66 90                	xchg   ax,ax
c002539d:	66 90                	xchg   ax,ax
c002539f:	90                   	nop

c00253a0 <value_37F>:
c00253a0:	7f 03                	jg     c00253a5 <value_37A+0x1>

c00253a2 <value_37E>:
c00253a2:	7e 03                	jle    c00253a7 <x87Detect+0x1>

c00253a4 <value_37A>:
c00253a4:	7a 03                	jp     c00253a9 <x87Detect+0x3>

c00253a6 <x87Detect>:
c00253a6:	b8 01 00 00 00       	mov    eax,0x1
c00253ab:	0f a2                	cpuid  
c00253ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00253b3:	74 06                	je     c00253bb <x87Detect.nox87>
c00253b5:	b8 01 00 00 00       	mov    eax,0x1
c00253ba:	c3                   	ret    

c00253bb <x87Detect.nox87>:
c00253bb:	b8 00 00 00 00       	mov    eax,0x0
c00253c0:	c3                   	ret    

c00253c1 <x87Save>:
c00253c1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00253c6:	c3                   	ret    

c00253c7 <x87Load>:
c00253c7:	dd 64 24 08          	frstor [esp+0x8]
c00253cb:	c3                   	ret    

c00253cc <x87Init>:
c00253cc:	9b db e3             	finit  
c00253cf:	0f 20 c0             	mov    eax,cr0
c00253d2:	66 25 fb ff          	and    ax,0xfffb
c00253d6:	66 0d 22 00          	or     ax,0x22
c00253da:	0f 22 c0             	mov    cr0,eax
c00253dd:	0f 06                	clts   
c00253df:	d9 2d a4 53 02 c0    	fldcw  WORD PTR ds:0xc00253a4
c00253e5:	c3                   	ret    

c00253e6 <x87Close>:
c00253e6:	c3                   	ret    
c00253e7:	90                   	nop

c00253e8 <__do_global_ctors_aux>:
c00253e8:	a1 dc 7e 02 c0       	mov    eax,ds:0xc0027edc
c00253ed:	83 f8 ff             	cmp    eax,0xffffffff
c00253f0:	74 1a                	je     c002540c <__do_global_ctors_aux+0x24>
c00253f2:	55                   	push   ebp
c00253f3:	89 e5                	mov    ebp,esp
c00253f5:	53                   	push   ebx
c00253f6:	52                   	push   edx
c00253f7:	bb dc 7e 02 c0       	mov    ebx,0xc0027edc
c00253fc:	ff d0                	call   eax
c00253fe:	83 eb 04             	sub    ebx,0x4
c0025401:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025403:	83 f8 ff             	cmp    eax,0xffffffff
c0025406:	75 f4                	jne    c00253fc <__do_global_ctors_aux+0x14>
c0025408:	58                   	pop    eax
c0025409:	5b                   	pop    ebx
c002540a:	5d                   	pop    ebp
c002540b:	c3                   	ret    
c002540c:	c3                   	ret    
c002540d:	66 90                	xchg   ax,ax
c002540f:	90                   	nop

c0025410 <__divdi3>:
c0025410:	55                   	push   ebp
c0025411:	57                   	push   edi
c0025412:	56                   	push   esi
c0025413:	53                   	push   ebx
c0025414:	83 ec 1c             	sub    esp,0x1c
c0025417:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002541b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002541f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025422:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025426:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002542a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002542e:	85 db                	test   ebx,ebx
c0025430:	0f 88 8e 00 00 00    	js     c00254c4 <__divdi3+0xb4>
c0025436:	89 dd                	mov    ebp,ebx
c0025438:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025440:	89 d3                	mov    ebx,edx
c0025442:	85 d2                	test   edx,edx
c0025444:	79 0d                	jns    c0025453 <__divdi3+0x43>
c0025446:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002544a:	f7 d8                	neg    eax
c002544c:	83 d2 00             	adc    edx,0x0
c002544f:	f7 da                	neg    edx
c0025451:	89 d3                	mov    ebx,edx
c0025453:	89 c7                	mov    edi,eax
c0025455:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025458:	85 db                	test   ebx,ebx
c002545a:	75 48                	jne    c00254a4 <__divdi3+0x94>
c002545c:	39 ef                	cmp    edi,ebp
c002545e:	76 24                	jbe    c0025484 <__divdi3+0x74>
c0025460:	89 ea                	mov    edx,ebp
c0025462:	f7 f7                	div    edi
c0025464:	89 c1                	mov    ecx,eax
c0025466:	31 f6                	xor    esi,esi
c0025468:	89 c8                	mov    eax,ecx
c002546a:	89 f2                	mov    edx,esi
c002546c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025470:	85 c9                	test   ecx,ecx
c0025472:	74 07                	je     c002547b <__divdi3+0x6b>
c0025474:	f7 d8                	neg    eax
c0025476:	83 d2 00             	adc    edx,0x0
c0025479:	f7 da                	neg    edx
c002547b:	83 c4 1c             	add    esp,0x1c
c002547e:	5b                   	pop    ebx
c002547f:	5e                   	pop    esi
c0025480:	5f                   	pop    edi
c0025481:	5d                   	pop    ebp
c0025482:	c3                   	ret    
c0025483:	90                   	nop
c0025484:	85 ff                	test   edi,edi
c0025486:	75 0b                	jne    c0025493 <__divdi3+0x83>
c0025488:	b8 01 00 00 00       	mov    eax,0x1
c002548d:	31 d2                	xor    edx,edx
c002548f:	f7 f3                	div    ebx
c0025491:	89 c7                	mov    edi,eax
c0025493:	31 d2                	xor    edx,edx
c0025495:	89 e8                	mov    eax,ebp
c0025497:	f7 f7                	div    edi
c0025499:	89 c6                	mov    esi,eax
c002549b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002549e:	f7 f7                	div    edi
c00254a0:	89 c1                	mov    ecx,eax
c00254a2:	eb c4                	jmp    c0025468 <__divdi3+0x58>
c00254a4:	39 eb                	cmp    ebx,ebp
c00254a6:	77 3c                	ja     c00254e4 <__divdi3+0xd4>
c00254a8:	0f bd f3             	bsr    esi,ebx
c00254ab:	83 f6 1f             	xor    esi,0x1f
c00254ae:	75 40                	jne    c00254f0 <__divdi3+0xe0>
c00254b0:	39 eb                	cmp    ebx,ebp
c00254b2:	72 09                	jb     c00254bd <__divdi3+0xad>
c00254b4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00254b7:	0f 87 97 00 00 00    	ja     c0025554 <__divdi3+0x144>
c00254bd:	b9 01 00 00 00       	mov    ecx,0x1
c00254c2:	eb a4                	jmp    c0025468 <__divdi3+0x58>
c00254c4:	f7 d9                	neg    ecx
c00254c6:	83 d3 00             	adc    ebx,0x0
c00254c9:	f7 db                	neg    ebx
c00254cb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00254ce:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00254d2:	89 dd                	mov    ebp,ebx
c00254d4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00254dc:	e9 5f ff ff ff       	jmp    c0025440 <__divdi3+0x30>
c00254e1:	8d 76 00             	lea    esi,[esi+0x0]
c00254e4:	31 f6                	xor    esi,esi
c00254e6:	31 c9                	xor    ecx,ecx
c00254e8:	e9 7b ff ff ff       	jmp    c0025468 <__divdi3+0x58>
c00254ed:	8d 76 00             	lea    esi,[esi+0x0]
c00254f0:	b8 20 00 00 00       	mov    eax,0x20
c00254f5:	29 f0                	sub    eax,esi
c00254f7:	89 f1                	mov    ecx,esi
c00254f9:	d3 e3                	shl    ebx,cl
c00254fb:	89 fa                	mov    edx,edi
c00254fd:	88 c1                	mov    cl,al
c00254ff:	d3 ea                	shr    edx,cl
c0025501:	09 da                	or     edx,ebx
c0025503:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025507:	89 f1                	mov    ecx,esi
c0025509:	d3 e7                	shl    edi,cl
c002550b:	89 eb                	mov    ebx,ebp
c002550d:	88 c1                	mov    cl,al
c002550f:	d3 eb                	shr    ebx,cl
c0025511:	89 f1                	mov    ecx,esi
c0025513:	d3 e5                	shl    ebp,cl
c0025515:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025518:	88 c1                	mov    cl,al
c002551a:	d3 ea                	shr    edx,cl
c002551c:	09 d5                	or     ebp,edx
c002551e:	89 e8                	mov    eax,ebp
c0025520:	89 da                	mov    edx,ebx
c0025522:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025526:	89 d3                	mov    ebx,edx
c0025528:	89 c5                	mov    ebp,eax
c002552a:	f7 e7                	mul    edi
c002552c:	39 d3                	cmp    ebx,edx
c002552e:	72 18                	jb     c0025548 <__divdi3+0x138>
c0025530:	74 0a                	je     c002553c <__divdi3+0x12c>
c0025532:	89 e9                	mov    ecx,ebp
c0025534:	31 f6                	xor    esi,esi
c0025536:	e9 2d ff ff ff       	jmp    c0025468 <__divdi3+0x58>
c002553b:	90                   	nop
c002553c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002553f:	89 f1                	mov    ecx,esi
c0025541:	d3 e7                	shl    edi,cl
c0025543:	39 c7                	cmp    edi,eax
c0025545:	73 eb                	jae    c0025532 <__divdi3+0x122>
c0025547:	90                   	nop
c0025548:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002554b:	31 f6                	xor    esi,esi
c002554d:	e9 16 ff ff ff       	jmp    c0025468 <__divdi3+0x58>
c0025552:	66 90                	xchg   ax,ax
c0025554:	31 c9                	xor    ecx,ecx
c0025556:	e9 0d ff ff ff       	jmp    c0025468 <__divdi3+0x58>
c002555b:	90                   	nop

c002555c <__moddi3>:
c002555c:	55                   	push   ebp
c002555d:	57                   	push   edi
c002555e:	56                   	push   esi
c002555f:	53                   	push   ebx
c0025560:	83 ec 2c             	sub    esp,0x2c
c0025563:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025567:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002556b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002556f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025573:	85 db                	test   ebx,ebx
c0025575:	0f 88 85 00 00 00    	js     c0025600 <__moddi3+0xa4>
c002557b:	89 de                	mov    esi,ebx
c002557d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025585:	89 d7                	mov    edi,edx
c0025587:	85 d2                	test   edx,edx
c0025589:	79 09                	jns    c0025594 <__moddi3+0x38>
c002558b:	f7 d8                	neg    eax
c002558d:	83 d2 00             	adc    edx,0x0
c0025590:	f7 da                	neg    edx
c0025592:	89 d7                	mov    edi,edx
c0025594:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025598:	89 cd                	mov    ebp,ecx
c002559a:	85 ff                	test   edi,edi
c002559c:	75 52                	jne    c00255f0 <__moddi3+0x94>
c002559e:	89 c3                	mov    ebx,eax
c00255a0:	39 f0                	cmp    eax,esi
c00255a2:	76 24                	jbe    c00255c8 <__moddi3+0x6c>
c00255a4:	89 c8                	mov    eax,ecx
c00255a6:	89 f2                	mov    edx,esi
c00255a8:	f7 f3                	div    ebx
c00255aa:	89 d6                	mov    esi,edx
c00255ac:	89 f0                	mov    eax,esi
c00255ae:	31 d2                	xor    edx,edx
c00255b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00255b4:	85 c9                	test   ecx,ecx
c00255b6:	74 07                	je     c00255bf <__moddi3+0x63>
c00255b8:	f7 d8                	neg    eax
c00255ba:	83 d2 00             	adc    edx,0x0
c00255bd:	f7 da                	neg    edx
c00255bf:	83 c4 2c             	add    esp,0x2c
c00255c2:	5b                   	pop    ebx
c00255c3:	5e                   	pop    esi
c00255c4:	5f                   	pop    edi
c00255c5:	5d                   	pop    ebp
c00255c6:	c3                   	ret    
c00255c7:	90                   	nop
c00255c8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00255cc:	85 db                	test   ebx,ebx
c00255ce:	75 0d                	jne    c00255dd <__moddi3+0x81>
c00255d0:	b8 01 00 00 00       	mov    eax,0x1
c00255d5:	31 d2                	xor    edx,edx
c00255d7:	f7 f7                	div    edi
c00255d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00255dd:	89 f0                	mov    eax,esi
c00255df:	31 d2                	xor    edx,edx
c00255e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00255e5:	f7 f7                	div    edi
c00255e7:	89 e8                	mov    eax,ebp
c00255e9:	f7 f7                	div    edi
c00255eb:	89 d6                	mov    esi,edx
c00255ed:	eb bd                	jmp    c00255ac <__moddi3+0x50>
c00255ef:	90                   	nop
c00255f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00255f4:	39 f7                	cmp    edi,esi
c00255f6:	76 20                	jbe    c0025618 <__moddi3+0xbc>
c00255f8:	89 c8                	mov    eax,ecx
c00255fa:	89 f2                	mov    edx,esi
c00255fc:	eb b2                	jmp    c00255b0 <__moddi3+0x54>
c00255fe:	66 90                	xchg   ax,ax
c0025600:	f7 d9                	neg    ecx
c0025602:	83 d3 00             	adc    ebx,0x0
c0025605:	f7 db                	neg    ebx
c0025607:	89 de                	mov    esi,ebx
c0025609:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025611:	e9 6f ff ff ff       	jmp    c0025585 <__moddi3+0x29>
c0025616:	66 90                	xchg   ax,ax
c0025618:	0f bd c7             	bsr    eax,edi
c002561b:	83 f0 1f             	xor    eax,0x1f
c002561e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025622:	75 24                	jne    c0025648 <__moddi3+0xec>
c0025624:	39 f7                	cmp    edi,esi
c0025626:	72 06                	jb     c002562e <__moddi3+0xd2>
c0025628:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002562c:	77 0c                	ja     c002563a <__moddi3+0xde>
c002562e:	89 e9                	mov    ecx,ebp
c0025630:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025634:	19 fe                	sbb    esi,edi
c0025636:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002563a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002563e:	89 f2                	mov    edx,esi
c0025640:	e9 6b ff ff ff       	jmp    c00255b0 <__moddi3+0x54>
c0025645:	8d 76 00             	lea    esi,[esi+0x0]
c0025648:	b8 20 00 00 00       	mov    eax,0x20
c002564d:	89 c2                	mov    edx,eax
c002564f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025653:	29 da                	sub    edx,ebx
c0025655:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025659:	88 d9                	mov    cl,bl
c002565b:	d3 e7                	shl    edi,cl
c002565d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025661:	88 d1                	mov    cl,dl
c0025663:	d3 e8                	shr    eax,cl
c0025665:	09 c7                	or     edi,eax
c0025667:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002566b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002566f:	89 d8                	mov    eax,ebx
c0025671:	88 d9                	mov    cl,bl
c0025673:	d3 e7                	shl    edi,cl
c0025675:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025679:	89 f3                	mov    ebx,esi
c002567b:	88 d1                	mov    cl,dl
c002567d:	d3 eb                	shr    ebx,cl
c002567f:	89 c7                	mov    edi,eax
c0025681:	88 c1                	mov    cl,al
c0025683:	d3 e6                	shl    esi,cl
c0025685:	89 e8                	mov    eax,ebp
c0025687:	88 d1                	mov    cl,dl
c0025689:	d3 e8                	shr    eax,cl
c002568b:	09 f0                	or     eax,esi
c002568d:	89 f9                	mov    ecx,edi
c002568f:	d3 e5                	shl    ebp,cl
c0025691:	89 da                	mov    edx,ebx
c0025693:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025697:	89 d3                	mov    ebx,edx
c0025699:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002569d:	89 c6                	mov    esi,eax
c002569f:	89 d1                	mov    ecx,edx
c00256a1:	39 d3                	cmp    ebx,edx
c00256a3:	72 27                	jb     c00256cc <__moddi3+0x170>
c00256a5:	74 21                	je     c00256c8 <__moddi3+0x16c>
c00256a7:	29 f5                	sub    ebp,esi
c00256a9:	19 cb                	sbb    ebx,ecx
c00256ab:	89 de                	mov    esi,ebx
c00256ad:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00256b1:	d3 e6                	shl    esi,cl
c00256b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00256b7:	89 f9                	mov    ecx,edi
c00256b9:	d3 ed                	shr    ebp,cl
c00256bb:	09 ee                	or     esi,ebp
c00256bd:	89 f0                	mov    eax,esi
c00256bf:	d3 eb                	shr    ebx,cl
c00256c1:	89 da                	mov    edx,ebx
c00256c3:	e9 e8 fe ff ff       	jmp    c00255b0 <__moddi3+0x54>
c00256c8:	39 c5                	cmp    ebp,eax
c00256ca:	73 db                	jae    c00256a7 <__moddi3+0x14b>
c00256cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00256d0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00256d4:	89 d1                	mov    ecx,edx
c00256d6:	89 c6                	mov    esi,eax
c00256d8:	eb cd                	jmp    c00256a7 <__moddi3+0x14b>
c00256da:	66 90                	xchg   ax,ax

c00256dc <__udivdi3>:
c00256dc:	55                   	push   ebp
c00256dd:	57                   	push   edi
c00256de:	56                   	push   esi
c00256df:	53                   	push   ebx
c00256e0:	83 ec 1c             	sub    esp,0x1c
c00256e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00256e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00256eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00256ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00256f3:	85 d2                	test   edx,edx
c00256f5:	75 41                	jne    c0025738 <__udivdi3+0x5c>
c00256f7:	39 f7                	cmp    edi,esi
c00256f9:	76 15                	jbe    c0025710 <__udivdi3+0x34>
c00256fb:	89 e8                	mov    eax,ebp
c00256fd:	89 f2                	mov    edx,esi
c00256ff:	f7 f7                	div    edi
c0025701:	31 db                	xor    ebx,ebx
c0025703:	89 da                	mov    edx,ebx
c0025705:	83 c4 1c             	add    esp,0x1c
c0025708:	5b                   	pop    ebx
c0025709:	5e                   	pop    esi
c002570a:	5f                   	pop    edi
c002570b:	5d                   	pop    ebp
c002570c:	c3                   	ret    
c002570d:	8d 76 00             	lea    esi,[esi+0x0]
c0025710:	89 f9                	mov    ecx,edi
c0025712:	85 ff                	test   edi,edi
c0025714:	75 0b                	jne    c0025721 <__udivdi3+0x45>
c0025716:	b8 01 00 00 00       	mov    eax,0x1
c002571b:	31 d2                	xor    edx,edx
c002571d:	f7 f7                	div    edi
c002571f:	89 c1                	mov    ecx,eax
c0025721:	31 d2                	xor    edx,edx
c0025723:	89 f0                	mov    eax,esi
c0025725:	f7 f1                	div    ecx
c0025727:	89 c3                	mov    ebx,eax
c0025729:	89 e8                	mov    eax,ebp
c002572b:	f7 f1                	div    ecx
c002572d:	89 da                	mov    edx,ebx
c002572f:	83 c4 1c             	add    esp,0x1c
c0025732:	5b                   	pop    ebx
c0025733:	5e                   	pop    esi
c0025734:	5f                   	pop    edi
c0025735:	5d                   	pop    ebp
c0025736:	c3                   	ret    
c0025737:	90                   	nop
c0025738:	39 f2                	cmp    edx,esi
c002573a:	77 1c                	ja     c0025758 <__udivdi3+0x7c>
c002573c:	0f bd da             	bsr    ebx,edx
c002573f:	83 f3 1f             	xor    ebx,0x1f
c0025742:	75 24                	jne    c0025768 <__udivdi3+0x8c>
c0025744:	39 f2                	cmp    edx,esi
c0025746:	72 08                	jb     c0025750 <__udivdi3+0x74>
c0025748:	39 ef                	cmp    edi,ebp
c002574a:	0f 87 84 00 00 00    	ja     c00257d4 <__udivdi3+0xf8>
c0025750:	b8 01 00 00 00       	mov    eax,0x1
c0025755:	eb ac                	jmp    c0025703 <__udivdi3+0x27>
c0025757:	90                   	nop
c0025758:	31 db                	xor    ebx,ebx
c002575a:	31 c0                	xor    eax,eax
c002575c:	89 da                	mov    edx,ebx
c002575e:	83 c4 1c             	add    esp,0x1c
c0025761:	5b                   	pop    ebx
c0025762:	5e                   	pop    esi
c0025763:	5f                   	pop    edi
c0025764:	5d                   	pop    ebp
c0025765:	c3                   	ret    
c0025766:	66 90                	xchg   ax,ax
c0025768:	b8 20 00 00 00       	mov    eax,0x20
c002576d:	29 d8                	sub    eax,ebx
c002576f:	88 d9                	mov    cl,bl
c0025771:	d3 e2                	shl    edx,cl
c0025773:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025777:	89 fa                	mov    edx,edi
c0025779:	88 c1                	mov    cl,al
c002577b:	d3 ea                	shr    edx,cl
c002577d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025781:	09 d1                	or     ecx,edx
c0025783:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025787:	88 d9                	mov    cl,bl
c0025789:	d3 e7                	shl    edi,cl
c002578b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002578f:	89 f7                	mov    edi,esi
c0025791:	88 c1                	mov    cl,al
c0025793:	d3 ef                	shr    edi,cl
c0025795:	88 d9                	mov    cl,bl
c0025797:	d3 e6                	shl    esi,cl
c0025799:	89 ea                	mov    edx,ebp
c002579b:	88 c1                	mov    cl,al
c002579d:	d3 ea                	shr    edx,cl
c002579f:	09 d6                	or     esi,edx
c00257a1:	89 f0                	mov    eax,esi
c00257a3:	89 fa                	mov    edx,edi
c00257a5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00257a9:	89 d7                	mov    edi,edx
c00257ab:	89 c6                	mov    esi,eax
c00257ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00257b1:	39 d7                	cmp    edi,edx
c00257b3:	72 13                	jb     c00257c8 <__udivdi3+0xec>
c00257b5:	74 09                	je     c00257c0 <__udivdi3+0xe4>
c00257b7:	89 f0                	mov    eax,esi
c00257b9:	31 db                	xor    ebx,ebx
c00257bb:	e9 43 ff ff ff       	jmp    c0025703 <__udivdi3+0x27>
c00257c0:	88 d9                	mov    cl,bl
c00257c2:	d3 e5                	shl    ebp,cl
c00257c4:	39 c5                	cmp    ebp,eax
c00257c6:	73 ef                	jae    c00257b7 <__udivdi3+0xdb>
c00257c8:	8d 46 ff             	lea    eax,[esi-0x1]
c00257cb:	31 db                	xor    ebx,ebx
c00257cd:	e9 31 ff ff ff       	jmp    c0025703 <__udivdi3+0x27>
c00257d2:	66 90                	xchg   ax,ax
c00257d4:	31 c0                	xor    eax,eax
c00257d6:	e9 28 ff ff ff       	jmp    c0025703 <__udivdi3+0x27>
c00257db:	90                   	nop

c00257dc <__umoddi3>:
c00257dc:	55                   	push   ebp
c00257dd:	57                   	push   edi
c00257de:	56                   	push   esi
c00257df:	53                   	push   ebx
c00257e0:	83 ec 1c             	sub    esp,0x1c
c00257e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00257e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00257eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00257ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00257f3:	89 da                	mov    edx,ebx
c00257f5:	85 c0                	test   eax,eax
c00257f7:	75 37                	jne    c0025830 <__umoddi3+0x54>
c00257f9:	39 df                	cmp    edi,ebx
c00257fb:	76 13                	jbe    c0025810 <__umoddi3+0x34>
c00257fd:	89 f0                	mov    eax,esi
c00257ff:	f7 f7                	div    edi
c0025801:	89 d0                	mov    eax,edx
c0025803:	31 d2                	xor    edx,edx
c0025805:	83 c4 1c             	add    esp,0x1c
c0025808:	5b                   	pop    ebx
c0025809:	5e                   	pop    esi
c002580a:	5f                   	pop    edi
c002580b:	5d                   	pop    ebp
c002580c:	c3                   	ret    
c002580d:	8d 76 00             	lea    esi,[esi+0x0]
c0025810:	89 fd                	mov    ebp,edi
c0025812:	85 ff                	test   edi,edi
c0025814:	75 0b                	jne    c0025821 <__umoddi3+0x45>
c0025816:	b8 01 00 00 00       	mov    eax,0x1
c002581b:	31 d2                	xor    edx,edx
c002581d:	f7 f7                	div    edi
c002581f:	89 c5                	mov    ebp,eax
c0025821:	89 d8                	mov    eax,ebx
c0025823:	31 d2                	xor    edx,edx
c0025825:	f7 f5                	div    ebp
c0025827:	89 f0                	mov    eax,esi
c0025829:	f7 f5                	div    ebp
c002582b:	89 d0                	mov    eax,edx
c002582d:	eb d4                	jmp    c0025803 <__umoddi3+0x27>
c002582f:	90                   	nop
c0025830:	89 f1                	mov    ecx,esi
c0025832:	39 d8                	cmp    eax,ebx
c0025834:	76 0a                	jbe    c0025840 <__umoddi3+0x64>
c0025836:	89 f0                	mov    eax,esi
c0025838:	83 c4 1c             	add    esp,0x1c
c002583b:	5b                   	pop    ebx
c002583c:	5e                   	pop    esi
c002583d:	5f                   	pop    edi
c002583e:	5d                   	pop    ebp
c002583f:	c3                   	ret    
c0025840:	0f bd e8             	bsr    ebp,eax
c0025843:	83 f5 1f             	xor    ebp,0x1f
c0025846:	75 1c                	jne    c0025864 <__umoddi3+0x88>
c0025848:	39 d8                	cmp    eax,ebx
c002584a:	72 04                	jb     c0025850 <__umoddi3+0x74>
c002584c:	39 f7                	cmp    edi,esi
c002584e:	77 08                	ja     c0025858 <__umoddi3+0x7c>
c0025850:	89 da                	mov    edx,ebx
c0025852:	29 fe                	sub    esi,edi
c0025854:	19 c2                	sbb    edx,eax
c0025856:	89 f1                	mov    ecx,esi
c0025858:	89 c8                	mov    eax,ecx
c002585a:	83 c4 1c             	add    esp,0x1c
c002585d:	5b                   	pop    ebx
c002585e:	5e                   	pop    esi
c002585f:	5f                   	pop    edi
c0025860:	5d                   	pop    ebp
c0025861:	c3                   	ret    
c0025862:	66 90                	xchg   ax,ax
c0025864:	ba 20 00 00 00       	mov    edx,0x20
c0025869:	29 ea                	sub    edx,ebp
c002586b:	89 e9                	mov    ecx,ebp
c002586d:	d3 e0                	shl    eax,cl
c002586f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025873:	89 f8                	mov    eax,edi
c0025875:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025879:	88 d1                	mov    cl,dl
c002587b:	d3 e8                	shr    eax,cl
c002587d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025881:	09 c1                	or     ecx,eax
c0025883:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025887:	89 e9                	mov    ecx,ebp
c0025889:	d3 e7                	shl    edi,cl
c002588b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002588f:	89 d8                	mov    eax,ebx
c0025891:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025895:	88 d1                	mov    cl,dl
c0025897:	d3 e8                	shr    eax,cl
c0025899:	89 c7                	mov    edi,eax
c002589b:	89 e9                	mov    ecx,ebp
c002589d:	d3 e3                	shl    ebx,cl
c002589f:	89 f0                	mov    eax,esi
c00258a1:	88 d1                	mov    cl,dl
c00258a3:	d3 e8                	shr    eax,cl
c00258a5:	09 d8                	or     eax,ebx
c00258a7:	89 e9                	mov    ecx,ebp
c00258a9:	d3 e6                	shl    esi,cl
c00258ab:	89 f3                	mov    ebx,esi
c00258ad:	89 fa                	mov    edx,edi
c00258af:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00258b3:	89 d1                	mov    ecx,edx
c00258b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00258b9:	89 c6                	mov    esi,eax
c00258bb:	89 d7                	mov    edi,edx
c00258bd:	39 d1                	cmp    ecx,edx
c00258bf:	72 27                	jb     c00258e8 <__umoddi3+0x10c>
c00258c1:	74 21                	je     c00258e4 <__umoddi3+0x108>
c00258c3:	89 ca                	mov    edx,ecx
c00258c5:	29 f3                	sub    ebx,esi
c00258c7:	19 fa                	sbb    edx,edi
c00258c9:	89 d0                	mov    eax,edx
c00258cb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00258cf:	d3 e0                	shl    eax,cl
c00258d1:	89 e9                	mov    ecx,ebp
c00258d3:	d3 eb                	shr    ebx,cl
c00258d5:	09 d8                	or     eax,ebx
c00258d7:	d3 ea                	shr    edx,cl
c00258d9:	83 c4 1c             	add    esp,0x1c
c00258dc:	5b                   	pop    ebx
c00258dd:	5e                   	pop    esi
c00258de:	5f                   	pop    edi
c00258df:	5d                   	pop    ebp
c00258e0:	c3                   	ret    
c00258e1:	8d 76 00             	lea    esi,[esi+0x0]
c00258e4:	39 c3                	cmp    ebx,eax
c00258e6:	73 db                	jae    c00258c3 <__umoddi3+0xe7>
c00258e8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00258ec:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00258f0:	89 d7                	mov    edi,edx
c00258f2:	89 c6                	mov    esi,eax
c00258f4:	eb cd                	jmp    c00258c3 <__umoddi3+0xe7>

c00258f6 <__addsf3>:
c00258f6:	55                   	push   ebp
c00258f7:	89 e5                	mov    ebp,esp
c00258f9:	57                   	push   edi
c00258fa:	56                   	push   esi
c00258fb:	53                   	push   ebx
c00258fc:	83 ec 08             	sub    esp,0x8
c00258ff:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025902:	89 fa                	mov    edx,edi
c0025904:	89 f8                	mov    eax,edi
c0025906:	c1 f8 17             	sar    eax,0x17
c0025909:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002590c:	c1 e2 08             	shl    edx,0x8
c002590f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025915:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025918:	89 de                	mov    esi,ebx
c002591a:	c1 fe 17             	sar    esi,0x17
c002591d:	c1 e3 08             	shl    ebx,0x8
c0025920:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025926:	31 f0                	xor    eax,esi
c0025928:	0f 88 3b 01 00 00    	js     c0025a69 <__addsf3+0x173>
c002592e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025931:	29 f1                	sub    ecx,esi
c0025933:	85 c9                	test   ecx,ecx
c0025935:	7e 54                	jle    c002598b <__addsf3+0x95>
c0025937:	89 f0                	mov    eax,esi
c0025939:	84 c0                	test   al,al
c002593b:	75 10                	jne    c002594d <__addsf3+0x57>
c002593d:	85 db                	test   ebx,ebx
c002593f:	0f 84 aa 02 00 00    	je     c0025bef <__addsf3+0x2f9>
c0025945:	49                   	dec    ecx
c0025946:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025949:	74 38                	je     c0025983 <__addsf3+0x8d>
c002594b:	eb 13                	jmp    c0025960 <__addsf3+0x6a>
c002594d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025950:	f7 d0                	not    eax
c0025952:	84 c0                	test   al,al
c0025954:	0f 84 95 02 00 00    	je     c0025bef <__addsf3+0x2f9>
c002595a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025960:	83 f9 1f             	cmp    ecx,0x1f
c0025963:	0f 8f 86 02 00 00    	jg     c0025bef <__addsf3+0x2f9>
c0025969:	89 de                	mov    esi,ebx
c002596b:	d3 ee                	shr    esi,cl
c002596d:	b8 20 00 00 00       	mov    eax,0x20
c0025972:	29 c8                	sub    eax,ecx
c0025974:	89 c1                	mov    ecx,eax
c0025976:	d3 e3                	shl    ebx,cl
c0025978:	31 c0                	xor    eax,eax
c002597a:	85 db                	test   ebx,ebx
c002597c:	0f 95 c0             	setne  al
c002597f:	09 f0                	or     eax,esi
c0025981:	01 d0                	add    eax,edx
c0025983:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025986:	e9 b6 00 00 00       	jmp    c0025a41 <__addsf3+0x14b>
c002598b:	74 5c                	je     c00259e9 <__addsf3+0xf3>
c002598d:	89 f1                	mov    ecx,esi
c002598f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025992:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025995:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025999:	75 14                	jne    c00259af <__addsf3+0xb9>
c002599b:	85 d2                	test   edx,edx
c002599d:	0f 84 4c 02 00 00    	je     c0025bef <__addsf3+0x2f9>
c00259a3:	49                   	dec    ecx
c00259a4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00259a7:	0f 84 94 00 00 00    	je     c0025a41 <__addsf3+0x14b>
c00259ad:	eb 12                	jmp    c00259c1 <__addsf3+0xcb>
c00259af:	89 f0                	mov    eax,esi
c00259b1:	f7 d0                	not    eax
c00259b3:	84 c0                	test   al,al
c00259b5:	0f 84 34 02 00 00    	je     c0025bef <__addsf3+0x2f9>
c00259bb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00259c1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00259c4:	83 f9 1f             	cmp    ecx,0x1f
c00259c7:	0f 8f 22 02 00 00    	jg     c0025bef <__addsf3+0x2f9>
c00259cd:	89 d7                	mov    edi,edx
c00259cf:	d3 ef                	shr    edi,cl
c00259d1:	b8 20 00 00 00       	mov    eax,0x20
c00259d6:	29 c8                	sub    eax,ecx
c00259d8:	89 c1                	mov    ecx,eax
c00259da:	d3 e2                	shl    edx,cl
c00259dc:	31 c0                	xor    eax,eax
c00259de:	85 d2                	test   edx,edx
c00259e0:	0f 95 c0             	setne  al
c00259e3:	09 f8                	or     eax,edi
c00259e5:	01 d8                	add    eax,ebx
c00259e7:	eb 58                	jmp    c0025a41 <__addsf3+0x14b>
c00259e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259ec:	8d 70 01             	lea    esi,[eax+0x1]
c00259ef:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00259f5:	75 32                	jne    c0025a29 <__addsf3+0x133>
c00259f7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00259fb:	75 1f                	jne    c0025a1c <__addsf3+0x126>
c00259fd:	85 d2                	test   edx,edx
c00259ff:	0f 84 e0 01 00 00    	je     c0025be5 <__addsf3+0x2ef>
c0025a05:	85 db                	test   ebx,ebx
c0025a07:	0f 84 e2 01 00 00    	je     c0025bef <__addsf3+0x2f9>
c0025a0d:	89 d0                	mov    eax,edx
c0025a0f:	01 d8                	add    eax,ebx
c0025a11:	0f 89 a9 01 00 00    	jns    c0025bc0 <__addsf3+0x2ca>
c0025a17:	e9 9d 01 00 00       	jmp    c0025bb9 <__addsf3+0x2c3>
c0025a1c:	85 d2                	test   edx,edx
c0025a1e:	0f 85 cb 01 00 00    	jne    c0025bef <__addsf3+0x2f9>
c0025a24:	e9 bc 01 00 00       	jmp    c0025be5 <__addsf3+0x2ef>
c0025a29:	31 c0                	xor    eax,eax
c0025a2b:	89 f1                	mov    ecx,esi
c0025a2d:	f7 d1                	not    ecx
c0025a2f:	84 c9                	test   cl,cl
c0025a31:	0f 84 90 01 00 00    	je     c0025bc7 <__addsf3+0x2d1>
c0025a37:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025a3a:	d1 e8                	shr    eax,1
c0025a3c:	e9 86 01 00 00       	jmp    c0025bc7 <__addsf3+0x2d1>
c0025a41:	85 c0                	test   eax,eax
c0025a43:	0f 89 7e 01 00 00    	jns    c0025bc7 <__addsf3+0x2d1>
c0025a49:	46                   	inc    esi
c0025a4a:	89 f2                	mov    edx,esi
c0025a4c:	f7 d2                	not    edx
c0025a4e:	84 d2                	test   dl,dl
c0025a50:	0f 84 6f 01 00 00    	je     c0025bc5 <__addsf3+0x2cf>
c0025a56:	89 c2                	mov    edx,eax
c0025a58:	83 e2 01             	and    edx,0x1
c0025a5b:	d1 e8                	shr    eax,1
c0025a5d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025a62:	09 d0                	or     eax,edx
c0025a64:	e9 5e 01 00 00       	jmp    c0025bc7 <__addsf3+0x2d1>
c0025a69:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0025a6d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025a70:	89 f0                	mov    eax,esi
c0025a72:	0f b6 c0             	movzx  eax,al
c0025a75:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025a78:	29 c1                	sub    ecx,eax
c0025a7a:	85 c9                	test   ecx,ecx
c0025a7c:	7e 55                	jle    c0025ad3 <__addsf3+0x1dd>
c0025a7e:	85 c0                	test   eax,eax
c0025a80:	75 11                	jne    c0025a93 <__addsf3+0x19d>
c0025a82:	85 db                	test   ebx,ebx
c0025a84:	0f 84 65 01 00 00    	je     c0025bef <__addsf3+0x2f9>
c0025a8a:	49                   	dec    ecx
c0025a8b:	75 19                	jne    c0025aa6 <__addsf3+0x1b0>
c0025a8d:	89 d0                	mov    eax,edx
c0025a8f:	29 d8                	sub    eax,ebx
c0025a91:	eb 38                	jmp    c0025acb <__addsf3+0x1d5>
c0025a93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a96:	f7 d0                	not    eax
c0025a98:	84 c0                	test   al,al
c0025a9a:	0f 84 4f 01 00 00    	je     c0025bef <__addsf3+0x2f9>
c0025aa0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025aa6:	83 f9 1f             	cmp    ecx,0x1f
c0025aa9:	0f 8f 40 01 00 00    	jg     c0025bef <__addsf3+0x2f9>
c0025aaf:	89 de                	mov    esi,ebx
c0025ab1:	d3 ee                	shr    esi,cl
c0025ab3:	b8 20 00 00 00       	mov    eax,0x20
c0025ab8:	29 c8                	sub    eax,ecx
c0025aba:	89 c1                	mov    ecx,eax
c0025abc:	d3 e3                	shl    ebx,cl
c0025abe:	31 c0                	xor    eax,eax
c0025ac0:	85 db                	test   ebx,ebx
c0025ac2:	0f 95 c0             	setne  al
c0025ac5:	09 f0                	or     eax,esi
c0025ac7:	29 c2                	sub    edx,eax
c0025ac9:	89 d0                	mov    eax,edx
c0025acb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025ace:	e9 af 00 00 00       	jmp    c0025b82 <__addsf3+0x28c>
c0025ad3:	74 5c                	je     c0025b31 <__addsf3+0x23b>
c0025ad5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0025ad8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025adb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0025adf:	75 14                	jne    c0025af5 <__addsf3+0x1ff>
c0025ae1:	85 d2                	test   edx,edx
c0025ae3:	0f 84 06 01 00 00    	je     c0025bef <__addsf3+0x2f9>
c0025ae9:	48                   	dec    eax
c0025aea:	75 1b                	jne    c0025b07 <__addsf3+0x211>
c0025aec:	89 d8                	mov    eax,ebx
c0025aee:	29 d0                	sub    eax,edx
c0025af0:	e9 8d 00 00 00       	jmp    c0025b82 <__addsf3+0x28c>
c0025af5:	89 f1                	mov    ecx,esi
c0025af7:	f7 d1                	not    ecx
c0025af9:	84 c9                	test   cl,cl
c0025afb:	0f 84 ee 00 00 00    	je     c0025bef <__addsf3+0x2f9>
c0025b01:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025b07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025b0a:	83 f8 1f             	cmp    eax,0x1f
c0025b0d:	0f 8f dc 00 00 00    	jg     c0025bef <__addsf3+0x2f9>
c0025b13:	89 d7                	mov    edi,edx
c0025b15:	88 c1                	mov    cl,al
c0025b17:	d3 ef                	shr    edi,cl
c0025b19:	b9 20 00 00 00       	mov    ecx,0x20
c0025b1e:	29 c1                	sub    ecx,eax
c0025b20:	d3 e2                	shl    edx,cl
c0025b22:	31 c0                	xor    eax,eax
c0025b24:	85 d2                	test   edx,edx
c0025b26:	0f 95 c0             	setne  al
c0025b29:	09 f8                	or     eax,edi
c0025b2b:	29 c3                	sub    ebx,eax
c0025b2d:	89 d8                	mov    eax,ebx
c0025b2f:	eb 51                	jmp    c0025b82 <__addsf3+0x28c>
c0025b31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b34:	40                   	inc    eax
c0025b35:	a8 fe                	test   al,0xfe
c0025b37:	75 3d                	jne    c0025b76 <__addsf3+0x280>
c0025b39:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0025b3d:	0f 85 a7 00 00 00    	jne    c0025bea <__addsf3+0x2f4>
c0025b43:	85 d2                	test   edx,edx
c0025b45:	75 12                	jne    c0025b59 <__addsf3+0x263>
c0025b47:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025b4a:	85 db                	test   ebx,ebx
c0025b4c:	0f 85 9d 00 00 00    	jne    c0025bef <__addsf3+0x2f9>
c0025b52:	31 ff                	xor    edi,edi
c0025b54:	e9 96 00 00 00       	jmp    c0025bef <__addsf3+0x2f9>
c0025b59:	85 db                	test   ebx,ebx
c0025b5b:	0f 84 8e 00 00 00    	je     c0025bef <__addsf3+0x2f9>
c0025b61:	89 d0                	mov    eax,edx
c0025b63:	29 d8                	sub    eax,ebx
c0025b65:	79 06                	jns    c0025b6d <__addsf3+0x277>
c0025b67:	89 d8                	mov    eax,ebx
c0025b69:	29 d0                	sub    eax,edx
c0025b6b:	eb 5a                	jmp    c0025bc7 <__addsf3+0x2d1>
c0025b6d:	bf 00 00 00 00       	mov    edi,0x0
c0025b72:	74 7b                	je     c0025bef <__addsf3+0x2f9>
c0025b74:	eb 4a                	jmp    c0025bc0 <__addsf3+0x2ca>
c0025b76:	89 d0                	mov    eax,edx
c0025b78:	29 d8                	sub    eax,ebx
c0025b7a:	79 12                	jns    c0025b8e <__addsf3+0x298>
c0025b7c:	89 d8                	mov    eax,ebx
c0025b7e:	29 d0                	sub    eax,edx
c0025b80:	eb 09                	jmp    c0025b8b <__addsf3+0x295>
c0025b82:	85 c0                	test   eax,eax
c0025b84:	79 41                	jns    c0025bc7 <__addsf3+0x2d1>
c0025b86:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025b8b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0025b8e:	31 f6                	xor    esi,esi
c0025b90:	85 c0                	test   eax,eax
c0025b92:	74 33                	je     c0025bc7 <__addsf3+0x2d1>
c0025b94:	0f bd c8             	bsr    ecx,eax
c0025b97:	83 f1 1f             	xor    ecx,0x1f
c0025b9a:	d3 e0                	shl    eax,cl
c0025b9c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025ba0:	39 ca                	cmp    edx,ecx
c0025ba2:	7f 10                	jg     c0025bb4 <__addsf3+0x2be>
c0025ba4:	29 d1                	sub    ecx,edx
c0025ba6:	41                   	inc    ecx
c0025ba7:	d3 e8                	shr    eax,cl
c0025ba9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025bac:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025bb2:	eb 13                	jmp    c0025bc7 <__addsf3+0x2d1>
c0025bb4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025bb7:	29 ce                	sub    esi,ecx
c0025bb9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025bbe:	eb 07                	jmp    c0025bc7 <__addsf3+0x2d1>
c0025bc0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025bc3:	eb 02                	jmp    c0025bc7 <__addsf3+0x2d1>
c0025bc5:	31 c0                	xor    eax,eax
c0025bc7:	89 c2                	mov    edx,eax
c0025bc9:	c1 ea 08             	shr    edx,0x8
c0025bcc:	a8 7f                	test   al,0x7f
c0025bce:	0f 95 c1             	setne  cl
c0025bd1:	09 d1                	or     ecx,edx
c0025bd3:	83 e1 01             	and    ecx,0x1
c0025bd6:	c1 e8 07             	shr    eax,0x7
c0025bd9:	21 c8                	and    eax,ecx
c0025bdb:	c1 e6 17             	shl    esi,0x17
c0025bde:	09 d6                	or     esi,edx
c0025be0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025be3:	eb 0a                	jmp    c0025bef <__addsf3+0x2f9>
c0025be5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025be8:	eb 05                	jmp    c0025bef <__addsf3+0x2f9>
c0025bea:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0025bef:	89 f8                	mov    eax,edi
c0025bf1:	5a                   	pop    edx
c0025bf2:	59                   	pop    ecx
c0025bf3:	5b                   	pop    ebx
c0025bf4:	5e                   	pop    esi
c0025bf5:	5f                   	pop    edi
c0025bf6:	5d                   	pop    ebp
c0025bf7:	c3                   	ret    

c0025bf8 <__subsf3>:
c0025bf8:	55                   	push   ebp
c0025bf9:	89 e5                	mov    ebp,esp
c0025bfb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bfe:	05 00 00 00 80       	add    eax,0x80000000
c0025c03:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025c06:	5d                   	pop    ebp
c0025c07:	e9 ea fc ff ff       	jmp    c00258f6 <__addsf3>

c0025c0c <__negsf2>:
c0025c0c:	55                   	push   ebp
c0025c0d:	89 e5                	mov    ebp,esp
c0025c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c12:	05 00 00 00 80       	add    eax,0x80000000
c0025c17:	5d                   	pop    ebp
c0025c18:	c3                   	ret    

c0025c19 <__mulsf3>:
c0025c19:	55                   	push   ebp
c0025c1a:	89 e5                	mov    ebp,esp
c0025c1c:	57                   	push   edi
c0025c1d:	56                   	push   esi
c0025c1e:	53                   	push   ebx
c0025c1f:	83 ec 1c             	sub    esp,0x1c
c0025c22:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025c25:	89 f0                	mov    eax,esi
c0025c27:	89 f1                	mov    ecx,esi
c0025c29:	c1 f9 17             	sar    ecx,0x17
c0025c2c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025c2f:	c1 e0 08             	shl    eax,0x8
c0025c32:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025c37:	89 c1                	mov    ecx,eax
c0025c39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c3c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c3f:	89 c7                	mov    edi,eax
c0025c41:	c1 ff 17             	sar    edi,0x17
c0025c44:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c48:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025c4b:	89 f8                	mov    eax,edi
c0025c4d:	0f b6 c0             	movzx  eax,al
c0025c50:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025c53:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025c57:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025c5a:	42                   	inc    edx
c0025c5b:	80 e2 fe             	and    dl,0xfe
c0025c5e:	75 7b                	jne    c0025cdb <__mulsf3+0xc2>
c0025c60:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025c64:	74 54                	je     c0025cba <__mulsf3+0xa1>
c0025c66:	85 c9                	test   ecx,ecx
c0025c68:	0f 85 64 01 00 00    	jne    c0025dd2 <__mulsf3+0x1b9>
c0025c6e:	8d 57 01             	lea    edx,[edi+0x1]
c0025c71:	80 e2 fe             	and    dl,0xfe
c0025c74:	75 1f                	jne    c0025c95 <__mulsf3+0x7c>
c0025c76:	85 c0                	test   eax,eax
c0025c78:	b8 00 00 00 00       	mov    eax,0x0
c0025c7d:	74 29                	je     c0025ca8 <__mulsf3+0x8f>
c0025c7f:	53                   	push   ebx
c0025c80:	53                   	push   ebx
c0025c81:	50                   	push   eax
c0025c82:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c85:	e8 96 05 00 00       	call   c0026220 <__nesf2>
c0025c8a:	83 c4 10             	add    esp,0x10
c0025c8d:	85 c0                	test   eax,eax
c0025c8f:	0f 85 3a 01 00 00    	jne    c0025dcf <__mulsf3+0x1b6>
c0025c95:	85 ff                	test   edi,edi
c0025c97:	0f 89 35 01 00 00    	jns    c0025dd2 <__mulsf3+0x1b9>
c0025c9d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025ca3:	e9 2a 01 00 00       	jmp    c0025dd2 <__mulsf3+0x1b9>
c0025ca8:	51                   	push   ecx
c0025ca9:	51                   	push   ecx
c0025caa:	50                   	push   eax
c0025cab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025cae:	e8 6d 05 00 00       	call   c0026220 <__nesf2>
c0025cb3:	83 c4 10             	add    esp,0x10
c0025cb6:	85 c0                	test   eax,eax
c0025cb8:	eb 15                	jmp    c0025ccf <__mulsf3+0xb6>
c0025cba:	85 c9                	test   ecx,ecx
c0025cbc:	74 0b                	je     c0025cc9 <__mulsf3+0xb0>
c0025cbe:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025cc1:	01 c9                	add    ecx,ecx
c0025cc3:	78 16                	js     c0025cdb <__mulsf3+0xc2>
c0025cc5:	89 d3                	mov    ebx,edx
c0025cc7:	eb f5                	jmp    c0025cbe <__mulsf3+0xa5>
c0025cc9:	89 f8                	mov    eax,edi
c0025ccb:	f7 d0                	not    eax
c0025ccd:	84 c0                	test   al,al
c0025ccf:	75 c4                	jne    c0025c95 <__mulsf3+0x7c>
c0025cd1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025cd6:	e9 f7 00 00 00       	jmp    c0025dd2 <__mulsf3+0x1b9>
c0025cdb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025cde:	c1 e6 08             	shl    esi,0x8
c0025ce1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025ce7:	8d 57 01             	lea    edx,[edi+0x1]
c0025cea:	80 e2 fe             	and    dl,0xfe
c0025ced:	75 63                	jne    c0025d52 <__mulsf3+0x139>
c0025cef:	85 c0                	test   eax,eax
c0025cf1:	74 2f                	je     c0025d22 <__mulsf3+0x109>
c0025cf3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025cf7:	0f 89 d2 00 00 00    	jns    c0025dcf <__mulsf3+0x1b6>
c0025cfd:	52                   	push   edx
c0025cfe:	52                   	push   edx
c0025cff:	6a 00                	push   0x0
c0025d01:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d04:	e8 dc 04 00 00       	call   c00261e5 <__eqsf2>
c0025d09:	83 c4 10             	add    esp,0x10
c0025d0c:	85 c0                	test   eax,eax
c0025d0e:	0f 85 bb 00 00 00    	jne    c0025dcf <__mulsf3+0x1b6>
c0025d14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d17:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0025d1d:	e9 b0 00 00 00       	jmp    c0025dd2 <__mulsf3+0x1b9>
c0025d22:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025d25:	50                   	push   eax
c0025d26:	50                   	push   eax
c0025d27:	6a 00                	push   0x0
c0025d29:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d2c:	e8 b4 04 00 00       	call   c00261e5 <__eqsf2>
c0025d31:	83 c4 10             	add    esp,0x10
c0025d34:	85 c0                	test   eax,eax
c0025d36:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025d39:	75 0c                	jne    c0025d47 <__mulsf3+0x12e>
c0025d3b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025d3f:	0f 89 8a 00 00 00    	jns    c0025dcf <__mulsf3+0x1b6>
c0025d45:	eb cd                	jmp    c0025d14 <__mulsf3+0xfb>
c0025d47:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025d4a:	01 f6                	add    esi,esi
c0025d4c:	78 04                	js     c0025d52 <__mulsf3+0x139>
c0025d4e:	89 c3                	mov    ebx,eax
c0025d50:	eb f5                	jmp    c0025d47 <__mulsf3+0x12e>
c0025d52:	89 c8                	mov    eax,ecx
c0025d54:	0d 00 00 00 80       	or     eax,0x80000000
c0025d59:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025d5f:	f7 e6                	mul    esi
c0025d61:	85 c0                	test   eax,eax
c0025d63:	0f 95 c0             	setne  al
c0025d66:	0f b6 c0             	movzx  eax,al
c0025d69:	09 c2                	or     edx,eax
c0025d6b:	78 03                	js     c0025d70 <__mulsf3+0x157>
c0025d6d:	01 d2                	add    edx,edx
c0025d6f:	4b                   	dec    ebx
c0025d70:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025d76:	7f 22                	jg     c0025d9a <__mulsf3+0x181>
c0025d78:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025d7e:	85 db                	test   ebx,ebx
c0025d80:	7f 23                	jg     c0025da5 <__mulsf3+0x18c>
c0025d82:	83 fb e9             	cmp    ebx,0xffffffe9
c0025d85:	7c 1a                	jl     c0025da1 <__mulsf3+0x188>
c0025d87:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025d8d:	b9 01 00 00 00       	mov    ecx,0x1
c0025d92:	29 d9                	sub    ecx,ebx
c0025d94:	d3 ea                	shr    edx,cl
c0025d96:	31 db                	xor    ebx,ebx
c0025d98:	eb 0b                	jmp    c0025da5 <__mulsf3+0x18c>
c0025d9a:	bb ff 00 00 00       	mov    ebx,0xff
c0025d9f:	eb 02                	jmp    c0025da3 <__mulsf3+0x18a>
c0025da1:	31 db                	xor    ebx,ebx
c0025da3:	31 d2                	xor    edx,edx
c0025da5:	89 d0                	mov    eax,edx
c0025da7:	c1 e8 08             	shr    eax,0x8
c0025daa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025dad:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025db3:	09 fb                	or     ebx,edi
c0025db5:	c1 e3 17             	shl    ebx,0x17
c0025db8:	09 c3                	or     ebx,eax
c0025dba:	f6 c2 7f             	test   dl,0x7f
c0025dbd:	0f 95 c1             	setne  cl
c0025dc0:	09 c8                	or     eax,ecx
c0025dc2:	83 e0 01             	and    eax,0x1
c0025dc5:	c1 ea 07             	shr    edx,0x7
c0025dc8:	21 c2                	and    edx,eax
c0025dca:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025dcd:	eb 03                	jmp    c0025dd2 <__mulsf3+0x1b9>
c0025dcf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025dd2:	89 f0                	mov    eax,esi
c0025dd4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025dd7:	5b                   	pop    ebx
c0025dd8:	5e                   	pop    esi
c0025dd9:	5f                   	pop    edi
c0025dda:	5d                   	pop    ebp
c0025ddb:	c3                   	ret    

c0025ddc <__divsf3>:
c0025ddc:	55                   	push   ebp
c0025ddd:	89 e5                	mov    ebp,esp
c0025ddf:	57                   	push   edi
c0025de0:	56                   	push   esi
c0025de1:	53                   	push   ebx
c0025de2:	83 ec 1c             	sub    esp,0x1c
c0025de5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025de8:	89 d8                	mov    eax,ebx
c0025dea:	89 d9                	mov    ecx,ebx
c0025dec:	c1 f9 17             	sar    ecx,0x17
c0025def:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025df2:	c1 e0 08             	shl    eax,0x8
c0025df5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025dfa:	89 c1                	mov    ecx,eax
c0025dfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dff:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025e02:	89 c7                	mov    edi,eax
c0025e04:	c1 ff 17             	sar    edi,0x17
c0025e07:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025e0b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025e0e:	89 f8                	mov    eax,edi
c0025e10:	0f b6 c0             	movzx  eax,al
c0025e13:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025e16:	29 c6                	sub    esi,eax
c0025e18:	83 c6 7f             	add    esi,0x7f
c0025e1b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025e1e:	42                   	inc    edx
c0025e1f:	80 e2 fe             	and    dl,0xfe
c0025e22:	0f 85 9c 00 00 00    	jne    c0025ec4 <__divsf3+0xe8>
c0025e28:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025e2c:	74 33                	je     c0025e61 <__divsf3+0x85>
c0025e2e:	85 c9                	test   ecx,ecx
c0025e30:	0f 85 c7 01 00 00    	jne    c0025ffd <__divsf3+0x221>
c0025e36:	8d 57 01             	lea    edx,[edi+0x1]
c0025e39:	80 e2 fe             	and    dl,0xfe
c0025e3c:	75 2f                	jne    c0025e6d <__divsf3+0x91>
c0025e3e:	85 c0                	test   eax,eax
c0025e40:	74 2b                	je     c0025e6d <__divsf3+0x91>
c0025e42:	51                   	push   ecx
c0025e43:	51                   	push   ecx
c0025e44:	6a 00                	push   0x0
c0025e46:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e49:	e8 d2 03 00 00       	call   c0026220 <__nesf2>
c0025e4e:	83 c4 10             	add    esp,0x10
c0025e51:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025e54:	85 c0                	test   eax,eax
c0025e56:	0f 85 a1 01 00 00    	jne    c0025ffd <__divsf3+0x221>
c0025e5c:	e9 92 01 00 00       	jmp    c0025ff3 <__divsf3+0x217>
c0025e61:	85 c9                	test   ecx,ecx
c0025e63:	75 1b                	jne    c0025e80 <__divsf3+0xa4>
c0025e65:	8d 57 01             	lea    edx,[edi+0x1]
c0025e68:	80 e2 fe             	and    dl,0xfe
c0025e6b:	74 1e                	je     c0025e8b <__divsf3+0xaf>
c0025e6d:	85 ff                	test   edi,edi
c0025e6f:	0f 89 88 01 00 00    	jns    c0025ffd <__divsf3+0x221>
c0025e75:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025e7b:	e9 7d 01 00 00       	jmp    c0025ffd <__divsf3+0x221>
c0025e80:	8d 56 ff             	lea    edx,[esi-0x1]
c0025e83:	01 c9                	add    ecx,ecx
c0025e85:	78 3d                	js     c0025ec4 <__divsf3+0xe8>
c0025e87:	89 d6                	mov    esi,edx
c0025e89:	eb f5                	jmp    c0025e80 <__divsf3+0xa4>
c0025e8b:	85 c0                	test   eax,eax
c0025e8d:	b8 00 00 00 00       	mov    eax,0x0
c0025e92:	74 18                	je     c0025eac <__divsf3+0xd0>
c0025e94:	52                   	push   edx
c0025e95:	52                   	push   edx
c0025e96:	50                   	push   eax
c0025e97:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e9a:	e8 81 03 00 00       	call   c0026220 <__nesf2>
c0025e9f:	83 c4 10             	add    esp,0x10
c0025ea2:	85 c0                	test   eax,eax
c0025ea4:	0f 85 50 01 00 00    	jne    c0025ffa <__divsf3+0x21e>
c0025eaa:	eb c1                	jmp    c0025e6d <__divsf3+0x91>
c0025eac:	56                   	push   esi
c0025ead:	56                   	push   esi
c0025eae:	50                   	push   eax
c0025eaf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025eb2:	e8 69 03 00 00       	call   c0026220 <__nesf2>
c0025eb7:	83 c4 10             	add    esp,0x10
c0025eba:	85 c0                	test   eax,eax
c0025ebc:	0f 84 31 01 00 00    	je     c0025ff3 <__divsf3+0x217>
c0025ec2:	eb a9                	jmp    c0025e6d <__divsf3+0x91>
c0025ec4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025ec7:	c1 e3 08             	shl    ebx,0x8
c0025eca:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025ed0:	8d 57 01             	lea    edx,[edi+0x1]
c0025ed3:	80 e2 fe             	and    dl,0xfe
c0025ed6:	75 71                	jne    c0025f49 <__divsf3+0x16d>
c0025ed8:	85 c0                	test   eax,eax
c0025eda:	ba 00 00 00 00       	mov    edx,0x0
c0025edf:	74 2f                	je     c0025f10 <__divsf3+0x134>
c0025ee1:	51                   	push   ecx
c0025ee2:	51                   	push   ecx
c0025ee3:	52                   	push   edx
c0025ee4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ee7:	e8 f9 02 00 00       	call   c00261e5 <__eqsf2>
c0025eec:	83 c4 10             	add    esp,0x10
c0025eef:	85 c0                	test   eax,eax
c0025ef1:	0f 85 03 01 00 00    	jne    c0025ffa <__divsf3+0x21e>
c0025ef7:	31 d2                	xor    edx,edx
c0025ef9:	89 d3                	mov    ebx,edx
c0025efb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025efe:	31 f8                	xor    eax,edi
c0025f00:	0f 89 f7 00 00 00    	jns    c0025ffd <__divsf3+0x221>
c0025f06:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025f0b:	e9 ed 00 00 00       	jmp    c0025ffd <__divsf3+0x221>
c0025f10:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025f13:	50                   	push   eax
c0025f14:	50                   	push   eax
c0025f15:	52                   	push   edx
c0025f16:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f19:	e8 c7 02 00 00       	call   c00261e5 <__eqsf2>
c0025f1e:	83 c4 10             	add    esp,0x10
c0025f21:	85 c0                	test   eax,eax
c0025f23:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025f26:	75 16                	jne    c0025f3e <__divsf3+0x162>
c0025f28:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025f2b:	31 fb                	xor    ebx,edi
c0025f2d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025f33:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025f39:	e9 bf 00 00 00       	jmp    c0025ffd <__divsf3+0x221>
c0025f3e:	8d 46 01             	lea    eax,[esi+0x1]
c0025f41:	01 db                	add    ebx,ebx
c0025f43:	78 04                	js     c0025f49 <__divsf3+0x16d>
c0025f45:	89 c6                	mov    esi,eax
c0025f47:	eb f5                	jmp    c0025f3e <__divsf3+0x162>
c0025f49:	89 c8                	mov    eax,ecx
c0025f4b:	0d 00 00 00 80       	or     eax,0x80000000
c0025f50:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025f56:	31 d2                	xor    edx,edx
c0025f58:	39 d8                	cmp    eax,ebx
c0025f5a:	72 07                	jb     c0025f63 <__divsf3+0x187>
c0025f5c:	29 d8                	sub    eax,ebx
c0025f5e:	ba 01 00 00 00       	mov    edx,0x1
c0025f63:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025f6a:	01 d2                	add    edx,edx
c0025f6c:	89 c1                	mov    ecx,eax
c0025f6e:	01 c0                	add    eax,eax
c0025f70:	85 c9                	test   ecx,ecx
c0025f72:	78 04                	js     c0025f78 <__divsf3+0x19c>
c0025f74:	39 c3                	cmp    ebx,eax
c0025f76:	77 05                	ja     c0025f7d <__divsf3+0x1a1>
c0025f78:	29 d8                	sub    eax,ebx
c0025f7a:	83 ca 01             	or     edx,0x1
c0025f7d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025f80:	75 e8                	jne    c0025f6a <__divsf3+0x18e>
c0025f82:	85 c0                	test   eax,eax
c0025f84:	0f 95 c0             	setne  al
c0025f87:	0f b6 c0             	movzx  eax,al
c0025f8a:	c1 e2 06             	shl    edx,0x6
c0025f8d:	09 c2                	or     edx,eax
c0025f8f:	78 03                	js     c0025f94 <__divsf3+0x1b8>
c0025f91:	01 d2                	add    edx,edx
c0025f93:	4e                   	dec    esi
c0025f94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025f9a:	7f 22                	jg     c0025fbe <__divsf3+0x1e2>
c0025f9c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025fa2:	85 f6                	test   esi,esi
c0025fa4:	7f 23                	jg     c0025fc9 <__divsf3+0x1ed>
c0025fa6:	83 fe e9             	cmp    esi,0xffffffe9
c0025fa9:	7c 1a                	jl     c0025fc5 <__divsf3+0x1e9>
c0025fab:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025fb1:	b9 01 00 00 00       	mov    ecx,0x1
c0025fb6:	29 f1                	sub    ecx,esi
c0025fb8:	d3 ea                	shr    edx,cl
c0025fba:	31 f6                	xor    esi,esi
c0025fbc:	eb 0b                	jmp    c0025fc9 <__divsf3+0x1ed>
c0025fbe:	be ff 00 00 00       	mov    esi,0xff
c0025fc3:	eb 02                	jmp    c0025fc7 <__divsf3+0x1eb>
c0025fc5:	31 f6                	xor    esi,esi
c0025fc7:	31 d2                	xor    edx,edx
c0025fc9:	89 d0                	mov    eax,edx
c0025fcb:	c1 e8 08             	shr    eax,0x8
c0025fce:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025fd1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025fd7:	09 fe                	or     esi,edi
c0025fd9:	c1 e6 17             	shl    esi,0x17
c0025fdc:	09 c6                	or     esi,eax
c0025fde:	f6 c2 7f             	test   dl,0x7f
c0025fe1:	0f 95 c1             	setne  cl
c0025fe4:	09 c8                	or     eax,ecx
c0025fe6:	83 e0 01             	and    eax,0x1
c0025fe9:	c1 ea 07             	shr    edx,0x7
c0025fec:	21 c2                	and    edx,eax
c0025fee:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025ff1:	eb 0a                	jmp    c0025ffd <__divsf3+0x221>
c0025ff3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025ff8:	eb 03                	jmp    c0025ffd <__divsf3+0x221>
c0025ffa:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025ffd:	89 d8                	mov    eax,ebx
c0025fff:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026002:	5b                   	pop    ebx
c0026003:	5e                   	pop    esi
c0026004:	5f                   	pop    edi
c0026005:	5d                   	pop    ebp
c0026006:	c3                   	ret    

c0026007 <__floatsisf>:
c0026007:	55                   	push   ebp
c0026008:	89 e5                	mov    ebp,esp
c002600a:	53                   	push   ebx
c002600b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002600e:	85 d2                	test   edx,edx
c0026010:	7e 2b                	jle    c002603d <__floatsisf+0x36>
c0026012:	0f bd ca             	bsr    ecx,edx
c0026015:	83 f1 1f             	xor    ecx,0x1f
c0026018:	d3 e2                	shl    edx,cl
c002601a:	89 d0                	mov    eax,edx
c002601c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026021:	89 c3                	mov    ebx,eax
c0026023:	c1 eb 08             	shr    ebx,0x8
c0026026:	80 e2 7f             	and    dl,0x7f
c0026029:	0f 95 c2             	setne  dl
c002602c:	09 da                	or     edx,ebx
c002602e:	83 e2 01             	and    edx,0x1
c0026031:	c1 e8 07             	shr    eax,0x7
c0026034:	21 c2                	and    edx,eax
c0026036:	b8 9e 00 00 00       	mov    eax,0x9e
c002603b:	eb 32                	jmp    c002606f <__floatsisf+0x68>
c002603d:	b8 00 00 00 00       	mov    eax,0x0
c0026042:	74 34                	je     c0026078 <__floatsisf+0x71>
c0026044:	f7 da                	neg    edx
c0026046:	0f bd ca             	bsr    ecx,edx
c0026049:	83 f1 1f             	xor    ecx,0x1f
c002604c:	d3 e2                	shl    edx,cl
c002604e:	89 d0                	mov    eax,edx
c0026050:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026055:	89 c3                	mov    ebx,eax
c0026057:	c1 eb 08             	shr    ebx,0x8
c002605a:	80 e2 7f             	and    dl,0x7f
c002605d:	0f 95 c2             	setne  dl
c0026060:	09 da                	or     edx,ebx
c0026062:	83 e2 01             	and    edx,0x1
c0026065:	c1 e8 07             	shr    eax,0x7
c0026068:	21 c2                	and    edx,eax
c002606a:	b8 9e 01 00 00       	mov    eax,0x19e
c002606f:	29 c8                	sub    eax,ecx
c0026071:	c1 e0 17             	shl    eax,0x17
c0026074:	09 d8                	or     eax,ebx
c0026076:	01 d0                	add    eax,edx
c0026078:	5b                   	pop    ebx
c0026079:	5d                   	pop    ebp
c002607a:	c3                   	ret    

c002607b <__floatunsisf>:
c002607b:	55                   	push   ebp
c002607c:	89 e5                	mov    ebp,esp
c002607e:	53                   	push   ebx
c002607f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026082:	31 c0                	xor    eax,eax
c0026084:	85 d2                	test   edx,edx
c0026086:	74 32                	je     c00260ba <__floatunsisf+0x3f>
c0026088:	0f bd ca             	bsr    ecx,edx
c002608b:	83 f1 1f             	xor    ecx,0x1f
c002608e:	d3 e2                	shl    edx,cl
c0026090:	89 d0                	mov    eax,edx
c0026092:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026097:	89 c3                	mov    ebx,eax
c0026099:	c1 eb 08             	shr    ebx,0x8
c002609c:	80 e2 7f             	and    dl,0x7f
c002609f:	0f 95 c2             	setne  dl
c00260a2:	09 da                	or     edx,ebx
c00260a4:	83 e2 01             	and    edx,0x1
c00260a7:	c1 e8 07             	shr    eax,0x7
c00260aa:	21 c2                	and    edx,eax
c00260ac:	b8 9e 00 00 00       	mov    eax,0x9e
c00260b1:	29 c8                	sub    eax,ecx
c00260b3:	c1 e0 17             	shl    eax,0x17
c00260b6:	09 d8                	or     eax,ebx
c00260b8:	01 d0                	add    eax,edx
c00260ba:	5b                   	pop    ebx
c00260bb:	5d                   	pop    ebp
c00260bc:	c3                   	ret    

c00260bd <__fixsfsi>:
c00260bd:	55                   	push   ebp
c00260be:	89 e5                	mov    ebp,esp
c00260c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00260c3:	89 d1                	mov    ecx,edx
c00260c5:	c1 e1 08             	shl    ecx,0x8
c00260c8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00260ce:	c1 fa 17             	sar    edx,0x17
c00260d1:	78 1c                	js     c00260ef <__fixsfsi+0x32>
c00260d3:	83 ea 7f             	sub    edx,0x7f
c00260d6:	31 c0                	xor    eax,eax
c00260d8:	83 fa 1e             	cmp    edx,0x1e
c00260db:	77 40                	ja     c002611d <__fixsfsi+0x60>
c00260dd:	89 c8                	mov    eax,ecx
c00260df:	0d 00 00 00 80       	or     eax,0x80000000
c00260e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00260e9:	29 d1                	sub    ecx,edx
c00260eb:	d3 e8                	shr    eax,cl
c00260ed:	eb 2e                	jmp    c002611d <__fixsfsi+0x60>
c00260ef:	31 c0                	xor    eax,eax
c00260f1:	81 c2 81 00 00 00    	add    edx,0x81
c00260f7:	78 24                	js     c002611d <__fixsfsi+0x60>
c00260f9:	83 fa 1e             	cmp    edx,0x1e
c00260fc:	7e 09                	jle    c0026107 <__fixsfsi+0x4a>
c00260fe:	83 fa 1f             	cmp    edx,0x1f
c0026101:	75 18                	jne    c002611b <__fixsfsi+0x5e>
c0026103:	85 c9                	test   ecx,ecx
c0026105:	75 14                	jne    c002611b <__fixsfsi+0x5e>
c0026107:	89 c8                	mov    eax,ecx
c0026109:	0d 00 00 00 80       	or     eax,0x80000000
c002610e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026113:	29 d1                	sub    ecx,edx
c0026115:	d3 e8                	shr    eax,cl
c0026117:	f7 d8                	neg    eax
c0026119:	eb 02                	jmp    c002611d <__fixsfsi+0x60>
c002611b:	31 c0                	xor    eax,eax
c002611d:	5d                   	pop    ebp
c002611e:	c3                   	ret    

c002611f <__fixunssfsi>:
c002611f:	55                   	push   ebp
c0026120:	89 e5                	mov    ebp,esp
c0026122:	53                   	push   ebx
c0026123:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026126:	89 d3                	mov    ebx,edx
c0026128:	c1 fb 17             	sar    ebx,0x17
c002612b:	83 eb 7f             	sub    ebx,0x7f
c002612e:	31 c0                	xor    eax,eax
c0026130:	83 fb 1f             	cmp    ebx,0x1f
c0026133:	77 18                	ja     c002614d <__fixunssfsi+0x2e>
c0026135:	89 d0                	mov    eax,edx
c0026137:	c1 e0 08             	shl    eax,0x8
c002613a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002613f:	0d 00 00 00 80       	or     eax,0x80000000
c0026144:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026149:	29 d9                	sub    ecx,ebx
c002614b:	d3 e8                	shr    eax,cl
c002614d:	5b                   	pop    ebx
c002614e:	5d                   	pop    ebp
c002614f:	c3                   	ret    

c0026150 <__cmpsf2>:
c0026150:	55                   	push   ebp
c0026151:	89 e5                	mov    ebp,esp
c0026153:	57                   	push   edi
c0026154:	56                   	push   esi
c0026155:	53                   	push   ebx
c0026156:	83 ec 24             	sub    esp,0x24
c0026159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002615c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002615f:	e8 4f 10 00 00       	call   c00271b3 <__truncdfsf2>
c0026164:	5a                   	pop    edx
c0026165:	59                   	pop    ecx
c0026166:	89 c3                	mov    ebx,eax
c0026168:	c1 e8 17             	shr    eax,0x17
c002616b:	0f b6 f0             	movzx  esi,al
c002616e:	89 d8                	mov    eax,ebx
c0026170:	c1 e8 1f             	shr    eax,0x1f
c0026173:	31 c6                	xor    esi,eax
c0026175:	c1 e3 08             	shl    ebx,0x8
c0026178:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002617b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002617e:	e8 30 10 00 00       	call   c00271b3 <__truncdfsf2>
c0026183:	83 c4 10             	add    esp,0x10
c0026186:	89 c1                	mov    ecx,eax
c0026188:	c1 e9 17             	shr    ecx,0x17
c002618b:	0f b6 c9             	movzx  ecx,cl
c002618e:	89 c7                	mov    edi,eax
c0026190:	c1 ef 1f             	shr    edi,0x1f
c0026193:	89 ca                	mov    edx,ecx
c0026195:	31 fa                	xor    edx,edi
c0026197:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002619a:	c1 e0 08             	shl    eax,0x8
c002619d:	89 c2                	mov    edx,eax
c002619f:	89 d8                	mov    eax,ebx
c00261a1:	09 d0                	or     eax,edx
c00261a3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00261a8:	09 f0                	or     eax,esi
c00261aa:	75 08                	jne    c00261b4 <__cmpsf2+0x64>
c00261ac:	31 c0                	xor    eax,eax
c00261ae:	39 f9                	cmp    ecx,edi
c00261b0:	75 0c                	jne    c00261be <__cmpsf2+0x6e>
c00261b2:	eb 29                	jmp    c00261dd <__cmpsf2+0x8d>
c00261b4:	b8 01 00 00 00       	mov    eax,0x1
c00261b9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00261bc:	7f 1f                	jg     c00261dd <__cmpsf2+0x8d>
c00261be:	83 c8 ff             	or     eax,0xffffffff
c00261c1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00261c4:	7c 17                	jl     c00261dd <__cmpsf2+0x8d>
c00261c6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00261cc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00261d2:	b8 01 00 00 00       	mov    eax,0x1
c00261d7:	39 d3                	cmp    ebx,edx
c00261d9:	77 02                	ja     c00261dd <__cmpsf2+0x8d>
c00261db:	19 c0                	sbb    eax,eax
c00261dd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00261e0:	5b                   	pop    ebx
c00261e1:	5e                   	pop    esi
c00261e2:	5f                   	pop    edi
c00261e3:	5d                   	pop    ebp
c00261e4:	c3                   	ret    

c00261e5 <__eqsf2>:
c00261e5:	55                   	push   ebp
c00261e6:	89 e5                	mov    ebp,esp
c00261e8:	83 ec 24             	sub    esp,0x24
c00261eb:	6a 01                	push   0x1
c00261ed:	83 ec 0c             	sub    esp,0xc
c00261f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00261f3:	e8 df 10 00 00       	call   c00272d7 <__extendsfdf2>
c00261f8:	83 c4 10             	add    esp,0x10
c00261fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00261fe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026201:	52                   	push   edx
c0026202:	50                   	push   eax
c0026203:	50                   	push   eax
c0026204:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026207:	e8 cb 10 00 00       	call   c00272d7 <__extendsfdf2>
c002620c:	59                   	pop    ecx
c002620d:	59                   	pop    ecx
c002620e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026211:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026214:	52                   	push   edx
c0026215:	50                   	push   eax
c0026216:	e8 35 ff ff ff       	call   c0026150 <__cmpsf2>
c002621b:	83 c4 20             	add    esp,0x20
c002621e:	c9                   	leave  
c002621f:	c3                   	ret    

c0026220 <__nesf2>:
c0026220:	eb c3                	jmp    c00261e5 <__eqsf2>

c0026222 <__gtsf2>:
c0026222:	55                   	push   ebp
c0026223:	89 e5                	mov    ebp,esp
c0026225:	83 ec 24             	sub    esp,0x24
c0026228:	6a ff                	push   0xffffffff
c002622a:	83 ec 0c             	sub    esp,0xc
c002622d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026230:	e8 a2 10 00 00       	call   c00272d7 <__extendsfdf2>
c0026235:	83 c4 10             	add    esp,0x10
c0026238:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002623b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002623e:	52                   	push   edx
c002623f:	50                   	push   eax
c0026240:	50                   	push   eax
c0026241:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026244:	e8 8e 10 00 00       	call   c00272d7 <__extendsfdf2>
c0026249:	59                   	pop    ecx
c002624a:	59                   	pop    ecx
c002624b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002624e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026251:	52                   	push   edx
c0026252:	50                   	push   eax
c0026253:	e8 f8 fe ff ff       	call   c0026150 <__cmpsf2>
c0026258:	83 c4 20             	add    esp,0x20
c002625b:	c9                   	leave  
c002625c:	c3                   	ret    

c002625d <__gesf2>:
c002625d:	eb c3                	jmp    c0026222 <__gtsf2>

c002625f <__ltsf2>:
c002625f:	eb 84                	jmp    c00261e5 <__eqsf2>

c0026261 <__lesf2>:
c0026261:	eb 82                	jmp    c00261e5 <__eqsf2>

c0026263 <__adddf3>:
c0026263:	55                   	push   ebp
c0026264:	89 e5                	mov    ebp,esp
c0026266:	57                   	push   edi
c0026267:	56                   	push   esi
c0026268:	53                   	push   ebx
c0026269:	83 ec 24             	sub    esp,0x24
c002626c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002626f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026272:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026275:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026278:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002627b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002627e:	89 c8                	mov    eax,ecx
c0026280:	89 ce                	mov    esi,ecx
c0026282:	c1 fe 14             	sar    esi,0x14
c0026285:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026288:	89 fb                	mov    ebx,edi
c002628a:	89 fa                	mov    edx,edi
c002628c:	c1 e2 0b             	shl    edx,0xb
c002628f:	c1 e0 0b             	shl    eax,0xb
c0026292:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026297:	c1 eb 15             	shr    ebx,0x15
c002629a:	09 d8                	or     eax,ebx
c002629c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002629f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00262a2:	c1 fe 14             	sar    esi,0x14
c00262a5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00262a8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00262ab:	89 f3                	mov    ebx,esi
c00262ad:	c1 e3 0b             	shl    ebx,0xb
c00262b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00262b3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00262b6:	c1 e3 0b             	shl    ebx,0xb
c00262b9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00262bf:	c1 ee 15             	shr    esi,0x15
c00262c2:	09 f3                	or     ebx,esi
c00262c4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00262c7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00262ca:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00262cd:	0f 88 5f 02 00 00    	js     c0026532 <__adddf3+0x2cf>
c00262d3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00262d6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00262d9:	85 db                	test   ebx,ebx
c00262db:	0f 8e c7 00 00 00    	jle    c00263a8 <__adddf3+0x145>
c00262e1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00262e8:	75 1a                	jne    c0026304 <__adddf3+0xa1>
c00262ea:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00262ed:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00262f0:	0f 84 b2 05 00 00    	je     c00268a8 <__adddf3+0x645>
c00262f6:	4b                   	dec    ebx
c00262f7:	75 23                	jne    c002631c <__adddf3+0xb9>
c00262f9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00262fc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00262ff:	e9 99 00 00 00       	jmp    c002639d <__adddf3+0x13a>
c0026304:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026307:	f7 d6                	not    esi
c0026309:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002630f:	0f 84 93 05 00 00    	je     c00268a8 <__adddf3+0x645>
c0026315:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002631c:	83 fb 1f             	cmp    ebx,0x1f
c002631f:	7e 42                	jle    c0026363 <__adddf3+0x100>
c0026321:	83 fb 3f             	cmp    ebx,0x3f
c0026324:	0f 8f 7e 05 00 00    	jg     c00268a8 <__adddf3+0x645>
c002632a:	83 e3 1f             	and    ebx,0x1f
c002632d:	89 d9                	mov    ecx,ebx
c002632f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026332:	d3 ef                	shr    edi,cl
c0026334:	31 db                	xor    ebx,ebx
c0026336:	85 c9                	test   ecx,ecx
c0026338:	74 15                	je     c002634f <__adddf3+0xec>
c002633a:	be 20 00 00 00       	mov    esi,0x20
c002633f:	29 ce                	sub    esi,ecx
c0026341:	89 f1                	mov    ecx,esi
c0026343:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026346:	d3 e6                	shl    esi,cl
c0026348:	31 db                	xor    ebx,ebx
c002634a:	85 f6                	test   esi,esi
c002634c:	0f 95 c3             	setne  bl
c002634f:	31 c9                	xor    ecx,ecx
c0026351:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026355:	0f 95 c1             	setne  cl
c0026358:	09 cf                	or     edi,ecx
c002635a:	09 fb                	or     ebx,edi
c002635c:	01 da                	add    edx,ebx
c002635e:	83 d0 00             	adc    eax,0x0
c0026361:	eb 3a                	jmp    c002639d <__adddf3+0x13a>
c0026363:	bf 20 00 00 00       	mov    edi,0x20
c0026368:	29 df                	sub    edi,ebx
c002636a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002636d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026370:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026373:	d3 e6                	shl    esi,cl
c0026375:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026378:	88 d9                	mov    cl,bl
c002637a:	d3 ef                	shr    edi,cl
c002637c:	09 fe                	or     esi,edi
c002637e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026381:	88 d9                	mov    cl,bl
c0026383:	d3 ef                	shr    edi,cl
c0026385:	89 fb                	mov    ebx,edi
c0026387:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002638a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002638d:	d3 e7                	shl    edi,cl
c002638f:	85 ff                	test   edi,edi
c0026391:	0f 95 c1             	setne  cl
c0026394:	0f b6 c9             	movzx  ecx,cl
c0026397:	09 ce                	or     esi,ecx
c0026399:	01 f2                	add    edx,esi
c002639b:	11 d8                	adc    eax,ebx
c002639d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00263a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00263a3:	e9 52 01 00 00       	jmp    c00264fa <__adddf3+0x297>
c00263a8:	0f 84 d5 00 00 00    	je     c0026483 <__adddf3+0x220>
c00263ae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00263b1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00263b4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00263b7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00263ba:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00263c1:	75 20                	jne    c00263e3 <__adddf3+0x180>
c00263c3:	89 d6                	mov    esi,edx
c00263c5:	09 c6                	or     esi,eax
c00263c7:	0f 84 db 04 00 00    	je     c00268a8 <__adddf3+0x645>
c00263cd:	4b                   	dec    ebx
c00263ce:	75 29                	jne    c00263f9 <__adddf3+0x196>
c00263d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00263d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00263d6:	01 d1                	add    ecx,edx
c00263d8:	11 c6                	adc    esi,eax
c00263da:	89 f0                	mov    eax,esi
c00263dc:	89 ca                	mov    edx,ecx
c00263de:	e9 17 01 00 00       	jmp    c00264fa <__adddf3+0x297>
c00263e3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00263e6:	f7 d6                	not    esi
c00263e8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00263ee:	0f 84 b4 04 00 00    	je     c00268a8 <__adddf3+0x645>
c00263f4:	0d 00 00 00 80       	or     eax,0x80000000
c00263f9:	83 fb 1f             	cmp    ebx,0x1f
c00263fc:	7e 48                	jle    c0026446 <__adddf3+0x1e3>
c00263fe:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026401:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026404:	83 fb 3f             	cmp    ebx,0x3f
c0026407:	0f 8f 9b 04 00 00    	jg     c00268a8 <__adddf3+0x645>
c002640d:	83 e3 1f             	and    ebx,0x1f
c0026410:	89 d9                	mov    ecx,ebx
c0026412:	89 c7                	mov    edi,eax
c0026414:	d3 ef                	shr    edi,cl
c0026416:	31 db                	xor    ebx,ebx
c0026418:	85 c9                	test   ecx,ecx
c002641a:	74 12                	je     c002642e <__adddf3+0x1cb>
c002641c:	be 20 00 00 00       	mov    esi,0x20
c0026421:	29 ce                	sub    esi,ecx
c0026423:	89 f1                	mov    ecx,esi
c0026425:	d3 e0                	shl    eax,cl
c0026427:	31 db                	xor    ebx,ebx
c0026429:	85 c0                	test   eax,eax
c002642b:	0f 95 c3             	setne  bl
c002642e:	31 c0                	xor    eax,eax
c0026430:	85 d2                	test   edx,edx
c0026432:	0f 95 c0             	setne  al
c0026435:	09 c7                	or     edi,eax
c0026437:	09 fb                	or     ebx,edi
c0026439:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002643c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002643f:	01 da                	add    edx,ebx
c0026441:	83 d6 00             	adc    esi,0x0
c0026444:	eb 39                	jmp    c002647f <__adddf3+0x21c>
c0026446:	be 20 00 00 00       	mov    esi,0x20
c002644b:	29 de                	sub    esi,ebx
c002644d:	89 c7                	mov    edi,eax
c002644f:	89 f1                	mov    ecx,esi
c0026451:	d3 e7                	shl    edi,cl
c0026453:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026456:	89 d7                	mov    edi,edx
c0026458:	88 d9                	mov    cl,bl
c002645a:	d3 ef                	shr    edi,cl
c002645c:	89 f9                	mov    ecx,edi
c002645e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026461:	09 cf                	or     edi,ecx
c0026463:	88 d9                	mov    cl,bl
c0026465:	d3 e8                	shr    eax,cl
c0026467:	89 f1                	mov    ecx,esi
c0026469:	d3 e2                	shl    edx,cl
c002646b:	85 d2                	test   edx,edx
c002646d:	0f 95 c2             	setne  dl
c0026470:	0f b6 d2             	movzx  edx,dl
c0026473:	09 d7                	or     edi,edx
c0026475:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026478:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002647b:	01 fa                	add    edx,edi
c002647d:	11 c6                	adc    esi,eax
c002647f:	89 f0                	mov    eax,esi
c0026481:	eb 77                	jmp    c00264fa <__adddf3+0x297>
c0026483:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026486:	46                   	inc    esi
c0026487:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002648a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026490:	75 41                	jne    c00264d3 <__adddf3+0x270>
c0026492:	89 d3                	mov    ebx,edx
c0026494:	09 c3                	or     ebx,eax
c0026496:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002649d:	75 27                	jne    c00264c6 <__adddf3+0x263>
c002649f:	85 db                	test   ebx,ebx
c00264a1:	0f 84 fb 03 00 00    	je     c00268a2 <__adddf3+0x63f>
c00264a7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00264aa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00264ad:	0f 84 f5 03 00 00    	je     c00268a8 <__adddf3+0x645>
c00264b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00264b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00264b9:	85 c0                	test   eax,eax
c00264bb:	0f 89 91 03 00 00    	jns    c0026852 <__adddf3+0x5ef>
c00264c1:	e9 85 03 00 00       	jmp    c002684b <__adddf3+0x5e8>
c00264c6:	85 db                	test   ebx,ebx
c00264c8:	0f 85 da 03 00 00    	jne    c00268a8 <__adddf3+0x645>
c00264ce:	e9 cf 03 00 00       	jmp    c00268a2 <__adddf3+0x63f>
c00264d3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00264d6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00264d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00264dc:	f7 d1                	not    ecx
c00264de:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00264e4:	0f 84 70 03 00 00    	je     c002685a <__adddf3+0x5f7>
c00264ea:	d1 ea                	shr    edx,1
c00264ec:	89 c1                	mov    ecx,eax
c00264ee:	c1 e1 1f             	shl    ecx,0x1f
c00264f1:	09 ca                	or     edx,ecx
c00264f3:	d1 e8                	shr    eax,1
c00264f5:	e9 6f 03 00 00       	jmp    c0026869 <__adddf3+0x606>
c00264fa:	85 c0                	test   eax,eax
c00264fc:	0f 89 67 03 00 00    	jns    c0026869 <__adddf3+0x606>
c0026502:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026505:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026508:	f7 d1                	not    ecx
c002650a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026510:	0f 84 44 03 00 00    	je     c002685a <__adddf3+0x5f7>
c0026516:	89 d1                	mov    ecx,edx
c0026518:	d1 e9                	shr    ecx,1
c002651a:	83 e2 01             	and    edx,0x1
c002651d:	09 ca                	or     edx,ecx
c002651f:	89 c1                	mov    ecx,eax
c0026521:	c1 e1 1f             	shl    ecx,0x1f
c0026524:	09 ca                	or     edx,ecx
c0026526:	d1 e8                	shr    eax,1
c0026528:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002652d:	e9 37 03 00 00       	jmp    c0026869 <__adddf3+0x606>
c0026532:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026535:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002653b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002653e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026541:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026547:	29 de                	sub    esi,ebx
c0026549:	85 f6                	test   esi,esi
c002654b:	0f 8e bd 00 00 00    	jle    c002660e <__adddf3+0x3ab>
c0026551:	85 db                	test   ebx,ebx
c0026553:	75 17                	jne    c002656c <__adddf3+0x309>
c0026555:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026558:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002655b:	0f 84 47 03 00 00    	je     c00268a8 <__adddf3+0x645>
c0026561:	4e                   	dec    esi
c0026562:	75 20                	jne    c0026584 <__adddf3+0x321>
c0026564:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026567:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002656a:	eb 5b                	jmp    c00265c7 <__adddf3+0x364>
c002656c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002656f:	f7 d3                	not    ebx
c0026571:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026577:	0f 84 2b 03 00 00    	je     c00268a8 <__adddf3+0x645>
c002657d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026584:	83 fe 1f             	cmp    esi,0x1f
c0026587:	7e 49                	jle    c00265d2 <__adddf3+0x36f>
c0026589:	83 fe 3f             	cmp    esi,0x3f
c002658c:	0f 8f 16 03 00 00    	jg     c00268a8 <__adddf3+0x645>
c0026592:	83 e6 1f             	and    esi,0x1f
c0026595:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026598:	89 f1                	mov    ecx,esi
c002659a:	d3 ef                	shr    edi,cl
c002659c:	31 db                	xor    ebx,ebx
c002659e:	85 f6                	test   esi,esi
c00265a0:	74 13                	je     c00265b5 <__adddf3+0x352>
c00265a2:	b9 20 00 00 00       	mov    ecx,0x20
c00265a7:	29 f1                	sub    ecx,esi
c00265a9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00265ac:	d3 e6                	shl    esi,cl
c00265ae:	31 db                	xor    ebx,ebx
c00265b0:	85 f6                	test   esi,esi
c00265b2:	0f 95 c3             	setne  bl
c00265b5:	31 c9                	xor    ecx,ecx
c00265b7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00265bb:	0f 95 c1             	setne  cl
c00265be:	09 cf                	or     edi,ecx
c00265c0:	09 fb                	or     ebx,edi
c00265c2:	29 da                	sub    edx,ebx
c00265c4:	83 d8 00             	sbb    eax,0x0
c00265c7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00265ca:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00265cd:	e9 aa 01 00 00       	jmp    c002677c <__adddf3+0x519>
c00265d2:	bf 20 00 00 00       	mov    edi,0x20
c00265d7:	29 f7                	sub    edi,esi
c00265d9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00265dc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00265df:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00265e2:	d3 e3                	shl    ebx,cl
c00265e4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00265e7:	89 f1                	mov    ecx,esi
c00265e9:	d3 ef                	shr    edi,cl
c00265eb:	09 fb                	or     ebx,edi
c00265ed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00265f0:	89 f1                	mov    ecx,esi
c00265f2:	d3 ef                	shr    edi,cl
c00265f4:	89 fe                	mov    esi,edi
c00265f6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00265f9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00265fc:	d3 e7                	shl    edi,cl
c00265fe:	85 ff                	test   edi,edi
c0026600:	0f 95 c1             	setne  cl
c0026603:	0f b6 c9             	movzx  ecx,cl
c0026606:	09 cb                	or     ebx,ecx
c0026608:	29 da                	sub    edx,ebx
c002660a:	19 f0                	sbb    eax,esi
c002660c:	eb b9                	jmp    c00265c7 <__adddf3+0x364>
c002660e:	0f 84 cd 00 00 00    	je     c00266e1 <__adddf3+0x47e>
c0026614:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026617:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002661a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002661d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026621:	75 1b                	jne    c002663e <__adddf3+0x3db>
c0026623:	89 d6                	mov    esi,edx
c0026625:	09 c6                	or     esi,eax
c0026627:	0f 84 7b 02 00 00    	je     c00268a8 <__adddf3+0x645>
c002662d:	4b                   	dec    ebx
c002662e:	75 24                	jne    c0026654 <__adddf3+0x3f1>
c0026630:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026633:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026636:	29 d1                	sub    ecx,edx
c0026638:	19 c6                	sbb    esi,eax
c002663a:	89 ca                	mov    edx,ecx
c002663c:	eb 61                	jmp    c002669f <__adddf3+0x43c>
c002663e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026641:	f7 d6                	not    esi
c0026643:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026649:	0f 84 59 02 00 00    	je     c00268a8 <__adddf3+0x645>
c002664f:	0d 00 00 00 80       	or     eax,0x80000000
c0026654:	83 fb 1f             	cmp    ebx,0x1f
c0026657:	7e 4d                	jle    c00266a6 <__adddf3+0x443>
c0026659:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002665c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002665f:	83 fb 3f             	cmp    ebx,0x3f
c0026662:	0f 8f 40 02 00 00    	jg     c00268a8 <__adddf3+0x645>
c0026668:	83 e3 1f             	and    ebx,0x1f
c002666b:	89 d9                	mov    ecx,ebx
c002666d:	89 c7                	mov    edi,eax
c002666f:	d3 ef                	shr    edi,cl
c0026671:	31 db                	xor    ebx,ebx
c0026673:	85 c9                	test   ecx,ecx
c0026675:	74 12                	je     c0026689 <__adddf3+0x426>
c0026677:	be 20 00 00 00       	mov    esi,0x20
c002667c:	29 ce                	sub    esi,ecx
c002667e:	89 f1                	mov    ecx,esi
c0026680:	d3 e0                	shl    eax,cl
c0026682:	31 db                	xor    ebx,ebx
c0026684:	85 c0                	test   eax,eax
c0026686:	0f 95 c3             	setne  bl
c0026689:	31 c0                	xor    eax,eax
c002668b:	85 d2                	test   edx,edx
c002668d:	0f 95 c0             	setne  al
c0026690:	09 c7                	or     edi,eax
c0026692:	09 fb                	or     ebx,edi
c0026694:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026697:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002669a:	29 da                	sub    edx,ebx
c002669c:	83 de 00             	sbb    esi,0x0
c002669f:	89 f0                	mov    eax,esi
c00266a1:	e9 d6 00 00 00       	jmp    c002677c <__adddf3+0x519>
c00266a6:	be 20 00 00 00       	mov    esi,0x20
c00266ab:	29 de                	sub    esi,ebx
c00266ad:	89 c7                	mov    edi,eax
c00266af:	89 f1                	mov    ecx,esi
c00266b1:	d3 e7                	shl    edi,cl
c00266b3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00266b6:	89 d7                	mov    edi,edx
c00266b8:	88 d9                	mov    cl,bl
c00266ba:	d3 ef                	shr    edi,cl
c00266bc:	89 f9                	mov    ecx,edi
c00266be:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00266c1:	09 cf                	or     edi,ecx
c00266c3:	88 d9                	mov    cl,bl
c00266c5:	d3 e8                	shr    eax,cl
c00266c7:	89 f1                	mov    ecx,esi
c00266c9:	d3 e2                	shl    edx,cl
c00266cb:	85 d2                	test   edx,edx
c00266cd:	0f 95 c2             	setne  dl
c00266d0:	0f b6 d2             	movzx  edx,dl
c00266d3:	09 d7                	or     edi,edx
c00266d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00266d8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00266db:	29 fa                	sub    edx,edi
c00266dd:	19 c6                	sbb    esi,eax
c00266df:	eb be                	jmp    c002669f <__adddf3+0x43c>
c00266e1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00266e4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00266e7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00266ed:	75 6a                	jne    c0026759 <__adddf3+0x4f6>
c00266ef:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00266f3:	75 58                	jne    c002674d <__adddf3+0x4ea>
c00266f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00266f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00266fb:	89 d6                	mov    esi,edx
c00266fd:	09 c6                	or     esi,eax
c00266ff:	75 17                	jne    c0026718 <__adddf3+0x4b5>
c0026701:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026704:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026707:	85 db                	test   ebx,ebx
c0026709:	0f 85 99 01 00 00    	jne    c00268a8 <__adddf3+0x645>
c002670f:	31 ff                	xor    edi,edi
c0026711:	31 c9                	xor    ecx,ecx
c0026713:	e9 90 01 00 00       	jmp    c00268a8 <__adddf3+0x645>
c0026718:	85 db                	test   ebx,ebx
c002671a:	0f 84 88 01 00 00    	je     c00268a8 <__adddf3+0x645>
c0026720:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026723:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026726:	85 c0                	test   eax,eax
c0026728:	79 10                	jns    c002673a <__adddf3+0x4d7>
c002672a:	31 c9                	xor    ecx,ecx
c002672c:	f7 da                	neg    edx
c002672e:	0f 95 c1             	setne  cl
c0026731:	01 c8                	add    eax,ecx
c0026733:	f7 d8                	neg    eax
c0026735:	e9 2f 01 00 00       	jmp    c0026869 <__adddf3+0x606>
c002673a:	31 ff                	xor    edi,edi
c002673c:	31 c9                	xor    ecx,ecx
c002673e:	89 c3                	mov    ebx,eax
c0026740:	09 d3                	or     ebx,edx
c0026742:	0f 84 60 01 00 00    	je     c00268a8 <__adddf3+0x645>
c0026748:	e9 05 01 00 00       	jmp    c0026852 <__adddf3+0x5ef>
c002674d:	31 ff                	xor    edi,edi
c002674f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026754:	e9 4f 01 00 00       	jmp    c00268a8 <__adddf3+0x645>
c0026759:	89 c1                	mov    ecx,eax
c002675b:	89 d0                	mov    eax,edx
c002675d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026760:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026763:	89 ca                	mov    edx,ecx
c0026765:	85 c9                	test   ecx,ecx
c0026767:	79 2c                	jns    c0026795 <__adddf3+0x532>
c0026769:	31 c9                	xor    ecx,ecx
c002676b:	f7 d8                	neg    eax
c002676d:	0f 95 c1             	setne  cl
c0026770:	01 ca                	add    edx,ecx
c0026772:	f7 da                	neg    edx
c0026774:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026777:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002677a:	eb 19                	jmp    c0026795 <__adddf3+0x532>
c002677c:	85 c0                	test   eax,eax
c002677e:	0f 89 e5 00 00 00    	jns    c0026869 <__adddf3+0x606>
c0026784:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026789:	89 c1                	mov    ecx,eax
c002678b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002678e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026791:	89 d0                	mov    eax,edx
c0026793:	89 ca                	mov    edx,ecx
c0026795:	85 d2                	test   edx,edx
c0026797:	74 59                	je     c00267f2 <__adddf3+0x58f>
c0026799:	0f bd da             	bsr    ebx,edx
c002679c:	83 f3 1f             	xor    ebx,0x1f
c002679f:	88 d9                	mov    cl,bl
c00267a1:	d3 e2                	shl    edx,cl
c00267a3:	bf 20 00 00 00       	mov    edi,0x20
c00267a8:	89 f9                	mov    ecx,edi
c00267aa:	29 d9                	sub    ecx,ebx
c00267ac:	89 c6                	mov    esi,eax
c00267ae:	d3 ee                	shr    esi,cl
c00267b0:	09 d6                	or     esi,edx
c00267b2:	88 d9                	mov    cl,bl
c00267b4:	d3 e0                	shl    eax,cl
c00267b6:	89 c2                	mov    edx,eax
c00267b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00267bb:	25 ff 07 00 00       	and    eax,0x7ff
c00267c0:	39 d8                	cmp    eax,ebx
c00267c2:	7f 22                	jg     c00267e6 <__adddf3+0x583>
c00267c4:	29 c3                	sub    ebx,eax
c00267c6:	43                   	inc    ebx
c00267c7:	88 d9                	mov    cl,bl
c00267c9:	d3 ea                	shr    edx,cl
c00267cb:	29 df                	sub    edi,ebx
c00267cd:	89 f9                	mov    ecx,edi
c00267cf:	89 f0                	mov    eax,esi
c00267d1:	d3 e0                	shl    eax,cl
c00267d3:	09 c2                	or     edx,eax
c00267d5:	89 f0                	mov    eax,esi
c00267d7:	88 d9                	mov    cl,bl
c00267d9:	d3 e8                	shr    eax,cl
c00267db:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00267de:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00267e4:	eb 6f                	jmp    c0026855 <__adddf3+0x5f2>
c00267e6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00267e9:	29 d8                	sub    eax,ebx
c00267eb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00267ee:	89 f0                	mov    eax,esi
c00267f0:	eb 59                	jmp    c002684b <__adddf3+0x5e8>
c00267f2:	85 c0                	test   eax,eax
c00267f4:	74 6a                	je     c0026860 <__adddf3+0x5fd>
c00267f6:	0f bd c8             	bsr    ecx,eax
c00267f9:	83 f1 1f             	xor    ecx,0x1f
c00267fc:	d3 e0                	shl    eax,cl
c00267fe:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026801:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026807:	83 c1 20             	add    ecx,0x20
c002680a:	39 cb                	cmp    ebx,ecx
c002680c:	7f 35                	jg     c0026843 <__adddf3+0x5e0>
c002680e:	29 d9                	sub    ecx,ebx
c0026810:	8d 71 01             	lea    esi,[ecx+0x1]
c0026813:	83 fe 1f             	cmp    esi,0x1f
c0026816:	7e 09                	jle    c0026821 <__adddf3+0x5be>
c0026818:	83 e9 1f             	sub    ecx,0x1f
c002681b:	d3 e8                	shr    eax,cl
c002681d:	89 c3                	mov    ebx,eax
c002681f:	eb 11                	jmp    c0026832 <__adddf3+0x5cf>
c0026821:	b9 20 00 00 00       	mov    ecx,0x20
c0026826:	29 f1                	sub    ecx,esi
c0026828:	89 c3                	mov    ebx,eax
c002682a:	d3 e3                	shl    ebx,cl
c002682c:	89 f1                	mov    ecx,esi
c002682e:	d3 e8                	shr    eax,cl
c0026830:	89 c2                	mov    edx,eax
c0026832:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026835:	25 00 f8 ff ff       	and    eax,0xfffff800
c002683a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002683d:	89 d0                	mov    eax,edx
c002683f:	89 da                	mov    edx,ebx
c0026841:	eb 26                	jmp    c0026869 <__adddf3+0x606>
c0026843:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026846:	29 cf                	sub    edi,ecx
c0026848:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002684b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026850:	eb 17                	jmp    c0026869 <__adddf3+0x606>
c0026852:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026855:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026858:	eb 0f                	jmp    c0026869 <__adddf3+0x606>
c002685a:	31 d2                	xor    edx,edx
c002685c:	31 c0                	xor    eax,eax
c002685e:	eb 09                	jmp    c0026869 <__adddf3+0x606>
c0026860:	89 c2                	mov    edx,eax
c0026862:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026869:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002686c:	c1 e1 14             	shl    ecx,0x14
c002686f:	89 c3                	mov    ebx,eax
c0026871:	c1 eb 0b             	shr    ebx,0xb
c0026874:	09 d9                	or     ecx,ebx
c0026876:	89 d3                	mov    ebx,edx
c0026878:	c1 eb 0b             	shr    ebx,0xb
c002687b:	c1 e0 15             	shl    eax,0x15
c002687e:	09 d8                	or     eax,ebx
c0026880:	89 c7                	mov    edi,eax
c0026882:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026888:	0f 95 c0             	setne  al
c002688b:	89 c6                	mov    esi,eax
c002688d:	09 f3                	or     ebx,esi
c002688f:	83 e3 01             	and    ebx,0x1
c0026892:	c1 ea 0a             	shr    edx,0xa
c0026895:	21 da                	and    edx,ebx
c0026897:	89 f8                	mov    eax,edi
c0026899:	01 d0                	add    eax,edx
c002689b:	83 d1 00             	adc    ecx,0x0
c002689e:	89 c7                	mov    edi,eax
c00268a0:	eb 06                	jmp    c00268a8 <__adddf3+0x645>
c00268a2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00268a5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00268a8:	89 f8                	mov    eax,edi
c00268aa:	89 ca                	mov    edx,ecx
c00268ac:	83 c4 24             	add    esp,0x24
c00268af:	5b                   	pop    ebx
c00268b0:	5e                   	pop    esi
c00268b1:	5f                   	pop    edi
c00268b2:	5d                   	pop    ebp
c00268b3:	c3                   	ret    

c00268b4 <__subdf3>:
c00268b4:	55                   	push   ebp
c00268b5:	89 e5                	mov    ebp,esp
c00268b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00268ba:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00268bd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00268c3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00268c6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00268c9:	5d                   	pop    ebp
c00268ca:	e9 94 f9 ff ff       	jmp    c0026263 <__adddf3>

c00268cf <__negdf2>:
c00268cf:	55                   	push   ebp
c00268d0:	89 e5                	mov    ebp,esp
c00268d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00268d5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00268d8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00268de:	5d                   	pop    ebp
c00268df:	c3                   	ret    

c00268e0 <__muldf3>:
c00268e0:	55                   	push   ebp
c00268e1:	89 e5                	mov    ebp,esp
c00268e3:	57                   	push   edi
c00268e4:	56                   	push   esi
c00268e5:	53                   	push   ebx
c00268e6:	83 ec 24             	sub    esp,0x24
c00268e9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00268ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268ef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00268f5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00268f8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00268fb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00268fe:	89 c8                	mov    eax,ecx
c0026900:	c1 f8 14             	sar    eax,0x14
c0026903:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026906:	89 f8                	mov    eax,edi
c0026908:	89 fb                	mov    ebx,edi
c002690a:	c1 e3 0b             	shl    ebx,0xb
c002690d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026910:	c1 e1 0b             	shl    ecx,0xb
c0026913:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026919:	c1 e8 15             	shr    eax,0x15
c002691c:	09 c1                	or     ecx,eax
c002691e:	89 d6                	mov    esi,edx
c0026920:	89 d0                	mov    eax,edx
c0026922:	c1 f8 14             	sar    eax,0x14
c0026925:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026928:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002692b:	89 c3                	mov    ebx,eax
c002692d:	c1 e3 0b             	shl    ebx,0xb
c0026930:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026933:	c1 e6 0b             	shl    esi,0xb
c0026936:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002693c:	c1 e8 15             	shr    eax,0x15
c002693f:	09 c6                	or     esi,eax
c0026941:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026944:	25 ff 07 00 00       	and    eax,0x7ff
c0026949:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002694c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002694f:	25 ff 07 00 00       	and    eax,0x7ff
c0026954:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026957:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002695a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002695d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026964:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026967:	40                   	inc    eax
c0026968:	a9 fe 07 00 00       	test   eax,0x7fe
c002696d:	0f 85 8d 00 00 00    	jne    c0026a00 <__muldf3+0x120>
c0026973:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026976:	09 c8                	or     eax,ecx
c0026978:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002697c:	74 44                	je     c00269c2 <__muldf3+0xe2>
c002697e:	85 c0                	test   eax,eax
c0026980:	0f 85 31 02 00 00    	jne    c0026bb7 <__muldf3+0x2d7>
c0026986:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026989:	40                   	inc    eax
c002698a:	a9 fe 07 00 00       	test   eax,0x7fe
c002698f:	75 13                	jne    c00269a4 <__muldf3+0xc4>
c0026991:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026994:	09 f1                	or     ecx,esi
c0026996:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002699a:	74 22                	je     c00269be <__muldf3+0xde>
c002699c:	85 c9                	test   ecx,ecx
c002699e:	0f 85 0d 02 00 00    	jne    c0026bb1 <__muldf3+0x2d1>
c00269a4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00269a8:	0f 89 09 02 00 00    	jns    c0026bb7 <__muldf3+0x2d7>
c00269ae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00269b1:	05 00 00 00 80       	add    eax,0x80000000
c00269b6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269b9:	e9 f9 01 00 00       	jmp    c0026bb7 <__muldf3+0x2d7>
c00269be:	85 c9                	test   ecx,ecx
c00269c0:	eb 2e                	jmp    c00269f0 <__muldf3+0x110>
c00269c2:	85 c0                	test   eax,eax
c00269c4:	74 20                	je     c00269e6 <__muldf3+0x106>
c00269c6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00269c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269cc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00269cf:	c1 ef 1f             	shr    edi,0x1f
c00269d2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00269d5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00269d8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00269db:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269de:	09 f9                	or     ecx,edi
c00269e0:	78 1e                	js     c0026a00 <__muldf3+0x120>
c00269e2:	89 c3                	mov    ebx,eax
c00269e4:	eb e0                	jmp    c00269c6 <__muldf3+0xe6>
c00269e6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00269e9:	f7 d0                	not    eax
c00269eb:	a9 ff 07 00 00       	test   eax,0x7ff
c00269f0:	75 b2                	jne    c00269a4 <__muldf3+0xc4>
c00269f2:	31 ff                	xor    edi,edi
c00269f4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00269fb:	e9 b7 01 00 00       	jmp    c0026bb7 <__muldf3+0x2d7>
c0026a00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026a03:	40                   	inc    eax
c0026a04:	a9 fe 07 00 00       	test   eax,0x7fe
c0026a09:	75 57                	jne    c0026a62 <__muldf3+0x182>
c0026a0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026a0e:	09 f0                	or     eax,esi
c0026a10:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026a14:	74 23                	je     c0026a39 <__muldf3+0x159>
c0026a16:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026a1a:	0f 89 91 01 00 00    	jns    c0026bb1 <__muldf3+0x2d1>
c0026a20:	85 c0                	test   eax,eax
c0026a22:	0f 85 89 01 00 00    	jne    c0026bb1 <__muldf3+0x2d1>
c0026a28:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026a2b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026a31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026a34:	e9 7e 01 00 00       	jmp    c0026bb7 <__muldf3+0x2d7>
c0026a39:	85 c0                	test   eax,eax
c0026a3b:	75 0c                	jne    c0026a49 <__muldf3+0x169>
c0026a3d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026a41:	0f 89 6a 01 00 00    	jns    c0026bb1 <__muldf3+0x2d1>
c0026a47:	eb df                	jmp    c0026a28 <__muldf3+0x148>
c0026a49:	01 f6                	add    esi,esi
c0026a4b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026a4e:	c1 ea 1f             	shr    edx,0x1f
c0026a51:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026a54:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026a57:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026a5a:	09 d6                	or     esi,edx
c0026a5c:	78 04                	js     c0026a62 <__muldf3+0x182>
c0026a5e:	89 c3                	mov    ebx,eax
c0026a60:	eb e7                	jmp    c0026a49 <__muldf3+0x169>
c0026a62:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026a68:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026a6e:	89 c8                	mov    eax,ecx
c0026a70:	f7 e6                	mul    esi
c0026a72:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026a75:	89 c7                	mov    edi,eax
c0026a77:	89 c8                	mov    eax,ecx
c0026a79:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026a7c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0026a7f:	89 c1                	mov    ecx,eax
c0026a81:	89 f0                	mov    eax,esi
c0026a83:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026a86:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026a89:	89 c6                	mov    esi,eax
c0026a8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026a8e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026a91:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026a94:	31 c0                	xor    eax,eax
c0026a96:	01 f1                	add    ecx,esi
c0026a98:	0f 92 c0             	setb   al
c0026a9b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0026a9e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026aa1:	83 d6 00             	adc    esi,0x0
c0026aa4:	01 c7                	add    edi,eax
c0026aa6:	83 d6 00             	adc    esi,0x0
c0026aa9:	01 ca                	add    edx,ecx
c0026aab:	0f 92 c1             	setb   cl
c0026aae:	0f b6 c9             	movzx  ecx,cl
c0026ab1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026ab4:	83 d6 00             	adc    esi,0x0
c0026ab7:	01 cf                	add    edi,ecx
c0026ab9:	83 d6 00             	adc    esi,0x0
c0026abc:	31 c9                	xor    ecx,ecx
c0026abe:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026ac1:	0f 95 c1             	setne  cl
c0026ac4:	09 cf                	or     edi,ecx
c0026ac6:	85 f6                	test   esi,esi
c0026ac8:	78 0c                	js     c0026ad6 <__muldf3+0x1f6>
c0026aca:	01 f6                	add    esi,esi
c0026acc:	89 f8                	mov    eax,edi
c0026ace:	c1 e8 1f             	shr    eax,0x1f
c0026ad1:	09 c6                	or     esi,eax
c0026ad3:	01 ff                	add    edi,edi
c0026ad5:	4b                   	dec    ebx
c0026ad6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0026adc:	0f 8f 85 00 00 00    	jg     c0026b67 <__muldf3+0x287>
c0026ae2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026ae8:	85 db                	test   ebx,ebx
c0026aea:	0f 8f 84 00 00 00    	jg     c0026b74 <__muldf3+0x294>
c0026af0:	83 fb cc             	cmp    ebx,0xffffffcc
c0026af3:	7c 79                	jl     c0026b6e <__muldf3+0x28e>
c0026af5:	ba 01 00 00 00       	mov    edx,0x1
c0026afa:	29 da                	sub    edx,ebx
c0026afc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026b02:	83 fa 1f             	cmp    edx,0x1f
c0026b05:	7e 30                	jle    c0026b37 <__muldf3+0x257>
c0026b07:	83 fa 20             	cmp    edx,0x20
c0026b0a:	75 0b                	jne    c0026b17 <__muldf3+0x237>
c0026b0c:	31 c0                	xor    eax,eax
c0026b0e:	85 ff                	test   edi,edi
c0026b10:	0f 95 c0             	setne  al
c0026b13:	89 c7                	mov    edi,eax
c0026b15:	eb 1a                	jmp    c0026b31 <__muldf3+0x251>
c0026b17:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0026b1a:	89 f0                	mov    eax,esi
c0026b1c:	d3 e0                	shl    eax,cl
c0026b1e:	09 f8                	or     eax,edi
c0026b20:	0f 95 c0             	setne  al
c0026b23:	0f b6 c0             	movzx  eax,al
c0026b26:	89 c7                	mov    edi,eax
c0026b28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026b2d:	29 d9                	sub    ecx,ebx
c0026b2f:	d3 ee                	shr    esi,cl
c0026b31:	09 f7                	or     edi,esi
c0026b33:	31 db                	xor    ebx,ebx
c0026b35:	eb 3b                	jmp    c0026b72 <__muldf3+0x292>
c0026b37:	83 c3 1f             	add    ebx,0x1f
c0026b3a:	89 f0                	mov    eax,esi
c0026b3c:	88 d9                	mov    cl,bl
c0026b3e:	d3 e0                	shl    eax,cl
c0026b40:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026b43:	89 f8                	mov    eax,edi
c0026b45:	88 d1                	mov    cl,dl
c0026b47:	d3 e8                	shr    eax,cl
c0026b49:	89 c1                	mov    ecx,eax
c0026b4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026b4e:	09 c8                	or     eax,ecx
c0026b50:	88 d9                	mov    cl,bl
c0026b52:	d3 e7                	shl    edi,cl
c0026b54:	31 db                	xor    ebx,ebx
c0026b56:	85 ff                	test   edi,edi
c0026b58:	0f 95 c3             	setne  bl
c0026b5b:	89 df                	mov    edi,ebx
c0026b5d:	09 c7                	or     edi,eax
c0026b5f:	88 d1                	mov    cl,dl
c0026b61:	d3 ee                	shr    esi,cl
c0026b63:	31 db                	xor    ebx,ebx
c0026b65:	eb 0d                	jmp    c0026b74 <__muldf3+0x294>
c0026b67:	bb ff 07 00 00       	mov    ebx,0x7ff
c0026b6c:	eb 02                	jmp    c0026b70 <__muldf3+0x290>
c0026b6e:	31 db                	xor    ebx,ebx
c0026b70:	31 ff                	xor    edi,edi
c0026b72:	31 f6                	xor    esi,esi
c0026b74:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026b77:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0026b7a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0026b7f:	09 c3                	or     ebx,eax
c0026b81:	c1 e3 14             	shl    ebx,0x14
c0026b84:	89 f0                	mov    eax,esi
c0026b86:	c1 e8 0b             	shr    eax,0xb
c0026b89:	09 c3                	or     ebx,eax
c0026b8b:	89 f8                	mov    eax,edi
c0026b8d:	c1 e8 0b             	shr    eax,0xb
c0026b90:	c1 e6 15             	shl    esi,0x15
c0026b93:	09 c6                	or     esi,eax
c0026b95:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0026b9b:	0f 95 c1             	setne  cl
c0026b9e:	09 c8                	or     eax,ecx
c0026ba0:	83 e0 01             	and    eax,0x1
c0026ba3:	c1 ef 0a             	shr    edi,0xa
c0026ba6:	21 c7                	and    edi,eax
c0026ba8:	01 f7                	add    edi,esi
c0026baa:	83 d3 00             	adc    ebx,0x0
c0026bad:	89 da                	mov    edx,ebx
c0026baf:	eb 03                	jmp    c0026bb4 <__muldf3+0x2d4>
c0026bb1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026bb4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026bb7:	89 f8                	mov    eax,edi
c0026bb9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026bbc:	83 c4 24             	add    esp,0x24
c0026bbf:	5b                   	pop    ebx
c0026bc0:	5e                   	pop    esi
c0026bc1:	5f                   	pop    edi
c0026bc2:	5d                   	pop    ebp
c0026bc3:	c3                   	ret    

c0026bc4 <__divdf3>:
c0026bc4:	55                   	push   ebp
c0026bc5:	89 e5                	mov    ebp,esp
c0026bc7:	57                   	push   edi
c0026bc8:	56                   	push   esi
c0026bc9:	53                   	push   ebx
c0026bca:	83 ec 2c             	sub    esp,0x2c
c0026bcd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026bd0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026bd3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026bd6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026bd9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026bdc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026bdf:	89 ce                	mov    esi,ecx
c0026be1:	89 c8                	mov    eax,ecx
c0026be3:	c1 f8 14             	sar    eax,0x14
c0026be6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026be9:	89 f8                	mov    eax,edi
c0026beb:	89 fb                	mov    ebx,edi
c0026bed:	c1 e3 0b             	shl    ebx,0xb
c0026bf0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026bf3:	c1 e6 0b             	shl    esi,0xb
c0026bf6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0026bfc:	c1 e8 15             	shr    eax,0x15
c0026bff:	09 c6                	or     esi,eax
c0026c01:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0026c04:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026c07:	89 c2                	mov    edx,eax
c0026c09:	c1 fa 14             	sar    edx,0x14
c0026c0c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026c0f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026c12:	89 de                	mov    esi,ebx
c0026c14:	c1 e6 0b             	shl    esi,0xb
c0026c17:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026c1a:	c1 e0 0b             	shl    eax,0xb
c0026c1d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026c22:	c1 eb 15             	shr    ebx,0x15
c0026c25:	09 d8                	or     eax,ebx
c0026c27:	89 c2                	mov    edx,eax
c0026c29:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026c2c:	25 ff 07 00 00       	and    eax,0x7ff
c0026c31:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026c34:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026c37:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026c3d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026c40:	29 d8                	sub    eax,ebx
c0026c42:	05 ff 03 00 00       	add    eax,0x3ff
c0026c47:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026c4a:	46                   	inc    esi
c0026c4b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026c51:	0f 85 a5 00 00 00    	jne    c0026cfc <__divdf3+0x138>
c0026c57:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026c5a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0026c5d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026c61:	74 2a                	je     c0026c8d <__divdf3+0xc9>
c0026c63:	85 f6                	test   esi,esi
c0026c65:	0f 85 cc 02 00 00    	jne    c0026f37 <__divdf3+0x373>
c0026c6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026c6e:	40                   	inc    eax
c0026c6f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026c74:	75 26                	jne    c0026c9c <__divdf3+0xd8>
c0026c76:	85 db                	test   ebx,ebx
c0026c78:	74 22                	je     c0026c9c <__divdf3+0xd8>
c0026c7a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026c7d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026c80:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026c83:	09 d0                	or     eax,edx
c0026c85:	0f 85 ac 02 00 00    	jne    c0026f37 <__divdf3+0x373>
c0026c8b:	eb 63                	jmp    c0026cf0 <__divdf3+0x12c>
c0026c8d:	85 f6                	test   esi,esi
c0026c8f:	75 22                	jne    c0026cb3 <__divdf3+0xef>
c0026c91:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026c94:	40                   	inc    eax
c0026c95:	a9 fe 07 00 00       	test   eax,0x7fe
c0026c9a:	74 36                	je     c0026cd2 <__divdf3+0x10e>
c0026c9c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026ca0:	0f 89 91 02 00 00    	jns    c0026f37 <__divdf3+0x373>
c0026ca6:	89 f8                	mov    eax,edi
c0026ca8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026cae:	e9 80 02 00 00       	jmp    c0026f33 <__divdf3+0x36f>
c0026cb3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026cb6:	01 f6                	add    esi,esi
c0026cb8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026cbb:	c1 ef 1f             	shr    edi,0x1f
c0026cbe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026cc1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026cc4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026cc7:	09 f7                	or     edi,esi
c0026cc9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0026ccc:	78 2e                	js     c0026cfc <__divdf3+0x138>
c0026cce:	89 c8                	mov    eax,ecx
c0026cd0:	eb e1                	jmp    c0026cb3 <__divdf3+0xef>
c0026cd2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026cd5:	09 d0                	or     eax,edx
c0026cd7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026cdb:	74 0f                	je     c0026cec <__divdf3+0x128>
c0026cdd:	85 c0                	test   eax,eax
c0026cdf:	74 bb                	je     c0026c9c <__divdf3+0xd8>
c0026ce1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026ce4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026ce7:	e9 4b 02 00 00       	jmp    c0026f37 <__divdf3+0x373>
c0026cec:	85 c0                	test   eax,eax
c0026cee:	75 ac                	jne    c0026c9c <__divdf3+0xd8>
c0026cf0:	31 ff                	xor    edi,edi
c0026cf2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026cf7:	e9 3b 02 00 00       	jmp    c0026f37 <__divdf3+0x373>
c0026cfc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026cff:	8d 4f 01             	lea    ecx,[edi+0x1]
c0026d02:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0026d08:	75 6b                	jne    c0026d75 <__divdf3+0x1b1>
c0026d0a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026d0d:	09 d6                	or     esi,edx
c0026d0f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026d13:	74 28                	je     c0026d3d <__divdf3+0x179>
c0026d15:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026d18:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026d1b:	85 f6                	test   esi,esi
c0026d1d:	0f 85 14 02 00 00    	jne    c0026f37 <__divdf3+0x373>
c0026d23:	31 ff                	xor    edi,edi
c0026d25:	31 c9                	xor    ecx,ecx
c0026d27:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026d2a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026d2d:	0f 89 04 02 00 00    	jns    c0026f37 <__divdf3+0x373>
c0026d33:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026d38:	e9 fa 01 00 00       	jmp    c0026f37 <__divdf3+0x373>
c0026d3d:	85 f6                	test   esi,esi
c0026d3f:	75 1b                	jne    c0026d5c <__divdf3+0x198>
c0026d41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026d44:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026d47:	25 00 00 00 80       	and    eax,0x80000000
c0026d4c:	31 c9                	xor    ecx,ecx
c0026d4e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026d53:	89 cf                	mov    edi,ecx
c0026d55:	89 c1                	mov    ecx,eax
c0026d57:	e9 db 01 00 00       	jmp    c0026f37 <__divdf3+0x373>
c0026d5c:	01 d2                	add    edx,edx
c0026d5e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026d61:	c1 eb 1f             	shr    ebx,0x1f
c0026d64:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026d67:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026d6a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026d6d:	09 da                	or     edx,ebx
c0026d6f:	78 04                	js     c0026d75 <__divdf3+0x1b1>
c0026d71:	89 c8                	mov    eax,ecx
c0026d73:	eb e7                	jmp    c0026d5c <__divdf3+0x198>
c0026d75:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d78:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026d7e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d84:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026d87:	39 d6                	cmp    esi,edx
c0026d89:	77 0d                	ja     c0026d98 <__divdf3+0x1d4>
c0026d8b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026d8e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026d91:	72 1b                	jb     c0026dae <__divdf3+0x1ea>
c0026d93:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026d96:	75 16                	jne    c0026dae <__divdf3+0x1ea>
c0026d98:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026d9b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026d9e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026da1:	83 de 00             	sbb    esi,0x0
c0026da4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026da7:	ba 01 00 00 00       	mov    edx,0x1
c0026dac:	eb 02                	jmp    c0026db0 <__divdf3+0x1ec>
c0026dae:	31 d2                	xor    edx,edx
c0026db0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026db7:	31 ff                	xor    edi,edi
c0026db9:	01 ff                	add    edi,edi
c0026dbb:	89 d1                	mov    ecx,edx
c0026dbd:	c1 e9 1f             	shr    ecx,0x1f
c0026dc0:	09 cf                	or     edi,ecx
c0026dc2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026dc5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026dc8:	89 da                	mov    edx,ebx
c0026dca:	89 f3                	mov    ebx,esi
c0026dcc:	8d 34 36             	lea    esi,[esi+esi*1]
c0026dcf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026dd2:	c1 e9 1f             	shr    ecx,0x1f
c0026dd5:	09 ce                	or     esi,ecx
c0026dd7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026dda:	01 c9                	add    ecx,ecx
c0026ddc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026ddf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026de2:	85 db                	test   ebx,ebx
c0026de4:	78 29                	js     c0026e0f <__divdf3+0x24b>
c0026de6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026de9:	72 07                	jb     c0026df2 <__divdf3+0x22e>
c0026deb:	75 3c                	jne    c0026e29 <__divdf3+0x265>
c0026ded:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026df0:	77 37                	ja     c0026e29 <__divdf3+0x265>
c0026df2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026df5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026df8:	31 d2                	xor    edx,edx
c0026dfa:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026dfd:	0f 97 c2             	seta   dl
c0026e00:	29 d6                	sub    esi,edx
c0026e02:	89 d9                	mov    ecx,ebx
c0026e04:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026e07:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026e0a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026e0d:	eb 17                	jmp    c0026e26 <__divdf3+0x262>
c0026e0f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026e12:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e15:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026e18:	0f 97 c1             	seta   cl
c0026e1b:	0f b6 c9             	movzx  ecx,cl
c0026e1e:	29 ce                	sub    esi,ecx
c0026e20:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026e23:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026e26:	83 ca 01             	or     edx,0x1
c0026e29:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026e2c:	75 8b                	jne    c0026db9 <__divdf3+0x1f5>
c0026e2e:	c1 e7 09             	shl    edi,0x9
c0026e31:	89 d1                	mov    ecx,edx
c0026e33:	c1 e9 17             	shr    ecx,0x17
c0026e36:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026e39:	09 f3                	or     ebx,esi
c0026e3b:	0f 95 c3             	setne  bl
c0026e3e:	0f b6 db             	movzx  ebx,bl
c0026e41:	c1 e2 09             	shl    edx,0x9
c0026e44:	09 d3                	or     ebx,edx
c0026e46:	89 ca                	mov    edx,ecx
c0026e48:	09 fa                	or     edx,edi
c0026e4a:	78 0c                	js     c0026e58 <__divdf3+0x294>
c0026e4c:	01 d2                	add    edx,edx
c0026e4e:	89 d9                	mov    ecx,ebx
c0026e50:	c1 e9 1f             	shr    ecx,0x1f
c0026e53:	09 ca                	or     edx,ecx
c0026e55:	01 db                	add    ebx,ebx
c0026e57:	48                   	dec    eax
c0026e58:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026e5d:	0f 8f 83 00 00 00    	jg     c0026ee6 <__divdf3+0x322>
c0026e63:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026e69:	85 c0                	test   eax,eax
c0026e6b:	0f 8f 82 00 00 00    	jg     c0026ef3 <__divdf3+0x32f>
c0026e71:	83 f8 cc             	cmp    eax,0xffffffcc
c0026e74:	7c 77                	jl     c0026eed <__divdf3+0x329>
c0026e76:	be 01 00 00 00       	mov    esi,0x1
c0026e7b:	29 c6                	sub    esi,eax
c0026e7d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e83:	83 fe 1f             	cmp    esi,0x1f
c0026e86:	7e 2f                	jle    c0026eb7 <__divdf3+0x2f3>
c0026e88:	83 fe 20             	cmp    esi,0x20
c0026e8b:	75 0a                	jne    c0026e97 <__divdf3+0x2d3>
c0026e8d:	85 db                	test   ebx,ebx
c0026e8f:	0f 95 c3             	setne  bl
c0026e92:	0f b6 db             	movzx  ebx,bl
c0026e95:	eb 1a                	jmp    c0026eb1 <__divdf3+0x2ed>
c0026e97:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026e9a:	89 d7                	mov    edi,edx
c0026e9c:	d3 e7                	shl    edi,cl
c0026e9e:	89 f9                	mov    ecx,edi
c0026ea0:	09 d9                	or     ecx,ebx
c0026ea2:	0f 95 c3             	setne  bl
c0026ea5:	0f b6 db             	movzx  ebx,bl
c0026ea8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026ead:	29 c1                	sub    ecx,eax
c0026eaf:	d3 ea                	shr    edx,cl
c0026eb1:	09 d3                	or     ebx,edx
c0026eb3:	31 c0                	xor    eax,eax
c0026eb5:	eb 3a                	jmp    c0026ef1 <__divdf3+0x32d>
c0026eb7:	83 c0 1f             	add    eax,0x1f
c0026eba:	89 d7                	mov    edi,edx
c0026ebc:	88 c1                	mov    cl,al
c0026ebe:	d3 e7                	shl    edi,cl
c0026ec0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026ec3:	89 df                	mov    edi,ebx
c0026ec5:	89 f1                	mov    ecx,esi
c0026ec7:	d3 ef                	shr    edi,cl
c0026ec9:	89 f9                	mov    ecx,edi
c0026ecb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026ece:	09 cf                	or     edi,ecx
c0026ed0:	88 c1                	mov    cl,al
c0026ed2:	d3 e3                	shl    ebx,cl
c0026ed4:	85 db                	test   ebx,ebx
c0026ed6:	0f 95 c3             	setne  bl
c0026ed9:	0f b6 db             	movzx  ebx,bl
c0026edc:	09 fb                	or     ebx,edi
c0026ede:	89 f1                	mov    ecx,esi
c0026ee0:	d3 ea                	shr    edx,cl
c0026ee2:	31 c0                	xor    eax,eax
c0026ee4:	eb 0d                	jmp    c0026ef3 <__divdf3+0x32f>
c0026ee6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026eeb:	eb 02                	jmp    c0026eef <__divdf3+0x32b>
c0026eed:	31 c0                	xor    eax,eax
c0026eef:	31 db                	xor    ebx,ebx
c0026ef1:	31 d2                	xor    edx,edx
c0026ef3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026ef6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026ef9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026eff:	09 c8                	or     eax,ecx
c0026f01:	c1 e0 14             	shl    eax,0x14
c0026f04:	89 d1                	mov    ecx,edx
c0026f06:	c1 e9 0b             	shr    ecx,0xb
c0026f09:	09 c8                	or     eax,ecx
c0026f0b:	89 c6                	mov    esi,eax
c0026f0d:	89 d9                	mov    ecx,ebx
c0026f0f:	c1 e9 0b             	shr    ecx,0xb
c0026f12:	c1 e2 15             	shl    edx,0x15
c0026f15:	09 ca                	or     edx,ecx
c0026f17:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026f1d:	0f 95 c0             	setne  al
c0026f20:	09 c1                	or     ecx,eax
c0026f22:	83 e1 01             	and    ecx,0x1
c0026f25:	c1 eb 0a             	shr    ebx,0xa
c0026f28:	21 cb                	and    ebx,ecx
c0026f2a:	01 d3                	add    ebx,edx
c0026f2c:	89 d8                	mov    eax,ebx
c0026f2e:	83 d6 00             	adc    esi,0x0
c0026f31:	89 f2                	mov    edx,esi
c0026f33:	89 c7                	mov    edi,eax
c0026f35:	89 d1                	mov    ecx,edx
c0026f37:	89 f8                	mov    eax,edi
c0026f39:	89 ca                	mov    edx,ecx
c0026f3b:	83 c4 2c             	add    esp,0x2c
c0026f3e:	5b                   	pop    ebx
c0026f3f:	5e                   	pop    esi
c0026f40:	5f                   	pop    edi
c0026f41:	5d                   	pop    ebp
c0026f42:	c3                   	ret    

c0026f43 <__floatsidf>:
c0026f43:	55                   	push   ebp
c0026f44:	89 e5                	mov    ebp,esp
c0026f46:	56                   	push   esi
c0026f47:	53                   	push   ebx
c0026f48:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026f4b:	85 db                	test   ebx,ebx
c0026f4d:	7e 15                	jle    c0026f64 <__floatsidf+0x21>
c0026f4f:	0f bd cb             	bsr    ecx,ebx
c0026f52:	83 f1 1f             	xor    ecx,0x1f
c0026f55:	d3 e3                	shl    ebx,cl
c0026f57:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026f5d:	b8 1e 04 00 00       	mov    eax,0x41e
c0026f62:	eb 21                	jmp    c0026f85 <__floatsidf+0x42>
c0026f64:	b8 00 00 00 00       	mov    eax,0x0
c0026f69:	ba 00 00 00 00       	mov    edx,0x0
c0026f6e:	74 2a                	je     c0026f9a <__floatsidf+0x57>
c0026f70:	f7 db                	neg    ebx
c0026f72:	0f bd cb             	bsr    ecx,ebx
c0026f75:	83 f1 1f             	xor    ecx,0x1f
c0026f78:	d3 e3                	shl    ebx,cl
c0026f7a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026f80:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026f85:	29 c8                	sub    eax,ecx
c0026f87:	c1 e0 14             	shl    eax,0x14
c0026f8a:	89 c1                	mov    ecx,eax
c0026f8c:	89 de                	mov    esi,ebx
c0026f8e:	c1 ee 0b             	shr    esi,0xb
c0026f91:	09 f1                	or     ecx,esi
c0026f93:	89 ca                	mov    edx,ecx
c0026f95:	c1 e3 15             	shl    ebx,0x15
c0026f98:	89 d8                	mov    eax,ebx
c0026f9a:	5b                   	pop    ebx
c0026f9b:	5e                   	pop    esi
c0026f9c:	5d                   	pop    ebp
c0026f9d:	c3                   	ret    

c0026f9e <__floatunsidf>:
c0026f9e:	55                   	push   ebp
c0026f9f:	89 e5                	mov    ebp,esp
c0026fa1:	56                   	push   esi
c0026fa2:	53                   	push   ebx
c0026fa3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026fa6:	85 db                	test   ebx,ebx
c0026fa8:	74 2a                	je     c0026fd4 <__floatunsidf+0x36>
c0026faa:	0f bd cb             	bsr    ecx,ebx
c0026fad:	83 f1 1f             	xor    ecx,0x1f
c0026fb0:	d3 e3                	shl    ebx,cl
c0026fb2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026fb8:	b8 1e 04 00 00       	mov    eax,0x41e
c0026fbd:	29 c8                	sub    eax,ecx
c0026fbf:	c1 e0 14             	shl    eax,0x14
c0026fc2:	89 c1                	mov    ecx,eax
c0026fc4:	89 de                	mov    esi,ebx
c0026fc6:	c1 ee 0b             	shr    esi,0xb
c0026fc9:	09 f1                	or     ecx,esi
c0026fcb:	89 ca                	mov    edx,ecx
c0026fcd:	c1 e3 15             	shl    ebx,0x15
c0026fd0:	89 d8                	mov    eax,ebx
c0026fd2:	eb 04                	jmp    c0026fd8 <__floatunsidf+0x3a>
c0026fd4:	31 c0                	xor    eax,eax
c0026fd6:	31 d2                	xor    edx,edx
c0026fd8:	5b                   	pop    ebx
c0026fd9:	5e                   	pop    esi
c0026fda:	5d                   	pop    ebp
c0026fdb:	c3                   	ret    

c0026fdc <__fixdfsi>:
c0026fdc:	55                   	push   ebp
c0026fdd:	89 e5                	mov    ebp,esp
c0026fdf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026fe2:	89 d1                	mov    ecx,edx
c0026fe4:	c1 e1 0b             	shl    ecx,0xb
c0026fe7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ff0:	c1 e8 15             	shr    eax,0x15
c0026ff3:	09 c1                	or     ecx,eax
c0026ff5:	c1 fa 14             	sar    edx,0x14
c0026ff8:	78 1f                	js     c0027019 <__fixdfsi+0x3d>
c0026ffa:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027000:	31 c0                	xor    eax,eax
c0027002:	83 fa 1e             	cmp    edx,0x1e
c0027005:	77 40                	ja     c0027047 <__fixdfsi+0x6b>
c0027007:	89 c8                	mov    eax,ecx
c0027009:	0d 00 00 00 80       	or     eax,0x80000000
c002700e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027013:	29 d1                	sub    ecx,edx
c0027015:	d3 e8                	shr    eax,cl
c0027017:	eb 2e                	jmp    c0027047 <__fixdfsi+0x6b>
c0027019:	31 c0                	xor    eax,eax
c002701b:	81 c2 01 04 00 00    	add    edx,0x401
c0027021:	78 24                	js     c0027047 <__fixdfsi+0x6b>
c0027023:	83 fa 1e             	cmp    edx,0x1e
c0027026:	7e 09                	jle    c0027031 <__fixdfsi+0x55>
c0027028:	83 fa 1f             	cmp    edx,0x1f
c002702b:	75 18                	jne    c0027045 <__fixdfsi+0x69>
c002702d:	85 c9                	test   ecx,ecx
c002702f:	75 14                	jne    c0027045 <__fixdfsi+0x69>
c0027031:	89 c8                	mov    eax,ecx
c0027033:	0d 00 00 00 80       	or     eax,0x80000000
c0027038:	b9 1f 00 00 00       	mov    ecx,0x1f
c002703d:	29 d1                	sub    ecx,edx
c002703f:	d3 e8                	shr    eax,cl
c0027041:	f7 d8                	neg    eax
c0027043:	eb 02                	jmp    c0027047 <__fixdfsi+0x6b>
c0027045:	31 c0                	xor    eax,eax
c0027047:	5d                   	pop    ebp
c0027048:	c3                   	ret    

c0027049 <__fixunsdfsi>:
c0027049:	55                   	push   ebp
c002704a:	89 e5                	mov    ebp,esp
c002704c:	53                   	push   ebx
c002704d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027050:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027053:	89 d3                	mov    ebx,edx
c0027055:	c1 fb 14             	sar    ebx,0x14
c0027058:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002705e:	31 c0                	xor    eax,eax
c0027060:	83 fb 1f             	cmp    ebx,0x1f
c0027063:	77 1d                	ja     c0027082 <__fixunsdfsi+0x39>
c0027065:	89 d0                	mov    eax,edx
c0027067:	c1 e0 0b             	shl    eax,0xb
c002706a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002706f:	c1 e9 15             	shr    ecx,0x15
c0027072:	09 c8                	or     eax,ecx
c0027074:	0d 00 00 00 80       	or     eax,0x80000000
c0027079:	b9 1f 00 00 00       	mov    ecx,0x1f
c002707e:	29 d9                	sub    ecx,ebx
c0027080:	d3 e8                	shr    eax,cl
c0027082:	5b                   	pop    ebx
c0027083:	5d                   	pop    ebp
c0027084:	c3                   	ret    

c0027085 <__cmpdf2>:
c0027085:	55                   	push   ebp
c0027086:	89 e5                	mov    ebp,esp
c0027088:	57                   	push   edi
c0027089:	56                   	push   esi
c002708a:	53                   	push   ebx
c002708b:	83 ec 0c             	sub    esp,0xc
c002708e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027091:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027094:	89 ca                	mov    edx,ecx
c0027096:	c1 ea 14             	shr    edx,0x14
c0027099:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002709f:	89 cb                	mov    ebx,ecx
c00270a1:	c1 fb 1f             	sar    ebx,0x1f
c00270a4:	31 da                	xor    edx,ebx
c00270a6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270a9:	89 df                	mov    edi,ebx
c00270ab:	c1 e7 0b             	shl    edi,0xb
c00270ae:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00270b1:	c1 e1 0b             	shl    ecx,0xb
c00270b4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00270ba:	c1 eb 15             	shr    ebx,0x15
c00270bd:	09 d9                	or     ecx,ebx
c00270bf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00270c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00270c5:	89 ce                	mov    esi,ecx
c00270c7:	c1 ee 14             	shr    esi,0x14
c00270ca:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00270d0:	89 cb                	mov    ebx,ecx
c00270d2:	c1 fb 1f             	sar    ebx,0x1f
c00270d5:	31 de                	xor    esi,ebx
c00270d7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00270da:	89 df                	mov    edi,ebx
c00270dc:	c1 e7 0b             	shl    edi,0xb
c00270df:	c1 e1 0b             	shl    ecx,0xb
c00270e2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00270e8:	c1 eb 15             	shr    ebx,0x15
c00270eb:	09 d9                	or     ecx,ebx
c00270ed:	89 d3                	mov    ebx,edx
c00270ef:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00270f5:	43                   	inc    ebx
c00270f6:	83 fb 01             	cmp    ebx,0x1
c00270f9:	77 08                	ja     c0027103 <__cmpdf2+0x7e>
c00270fb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00270fe:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027101:	75 68                	jne    c002716b <__cmpdf2+0xe6>
c0027103:	89 f3                	mov    ebx,esi
c0027105:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002710b:	43                   	inc    ebx
c002710c:	83 fb 01             	cmp    ebx,0x1
c002710f:	77 06                	ja     c0027117 <__cmpdf2+0x92>
c0027111:	89 fb                	mov    ebx,edi
c0027113:	09 cb                	or     ebx,ecx
c0027115:	75 54                	jne    c002716b <__cmpdf2+0xe6>
c0027117:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002711a:	09 f8                	or     eax,edi
c002711c:	09 c8                	or     eax,ecx
c002711e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027121:	75 12                	jne    c0027135 <__cmpdf2+0xb0>
c0027123:	8d 42 01             	lea    eax,[edx+0x1]
c0027126:	83 f8 01             	cmp    eax,0x1
c0027129:	77 0a                	ja     c0027135 <__cmpdf2+0xb0>
c002712b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002712e:	31 c0                	xor    eax,eax
c0027130:	83 fb 01             	cmp    ebx,0x1
c0027133:	76 36                	jbe    c002716b <__cmpdf2+0xe6>
c0027135:	b8 01 00 00 00       	mov    eax,0x1
c002713a:	39 f2                	cmp    edx,esi
c002713c:	7f 2d                	jg     c002716b <__cmpdf2+0xe6>
c002713e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027143:	7c 26                	jl     c002716b <__cmpdf2+0xe6>
c0027145:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027148:	77 07                	ja     c0027151 <__cmpdf2+0xcc>
c002714a:	72 16                	jb     c0027162 <__cmpdf2+0xdd>
c002714c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002714f:	76 0a                	jbe    c002715b <__cmpdf2+0xd6>
c0027151:	89 d0                	mov    eax,edx
c0027153:	c1 f8 1f             	sar    eax,0x1f
c0027156:	83 c8 01             	or     eax,0x1
c0027159:	eb 10                	jmp    c002716b <__cmpdf2+0xe6>
c002715b:	b8 00 00 00 00       	mov    eax,0x0
c0027160:	73 09                	jae    c002716b <__cmpdf2+0xe6>
c0027162:	89 d0                	mov    eax,edx
c0027164:	c1 f8 1f             	sar    eax,0x1f
c0027167:	83 e0 02             	and    eax,0x2
c002716a:	48                   	dec    eax
c002716b:	83 c4 0c             	add    esp,0xc
c002716e:	5b                   	pop    ebx
c002716f:	5e                   	pop    esi
c0027170:	5f                   	pop    edi
c0027171:	5d                   	pop    ebp
c0027172:	c3                   	ret    

c0027173 <__eqdf2>:
c0027173:	55                   	push   ebp
c0027174:	89 e5                	mov    ebp,esp
c0027176:	50                   	push   eax
c0027177:	6a 01                	push   0x1
c0027179:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002717c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002717f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027182:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027185:	e8 fb fe ff ff       	call   c0027085 <__cmpdf2>
c002718a:	83 c4 18             	add    esp,0x18
c002718d:	c9                   	leave  
c002718e:	c3                   	ret    

c002718f <__nedf2>:
c002718f:	eb e2                	jmp    c0027173 <__eqdf2>

c0027191 <__gtdf2>:
c0027191:	55                   	push   ebp
c0027192:	89 e5                	mov    ebp,esp
c0027194:	50                   	push   eax
c0027195:	6a ff                	push   0xffffffff
c0027197:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002719a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002719d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00271a3:	e8 dd fe ff ff       	call   c0027085 <__cmpdf2>
c00271a8:	83 c4 18             	add    esp,0x18
c00271ab:	c9                   	leave  
c00271ac:	c3                   	ret    

c00271ad <__gedf2>:
c00271ad:	eb e2                	jmp    c0027191 <__gtdf2>

c00271af <__ltdf2>:
c00271af:	eb c2                	jmp    c0027173 <__eqdf2>

c00271b1 <__ledf2>:
c00271b1:	eb c0                	jmp    c0027173 <__eqdf2>

c00271b3 <__truncdfsf2>:
c00271b3:	55                   	push   ebp
c00271b4:	89 e5                	mov    ebp,esp
c00271b6:	57                   	push   edi
c00271b7:	56                   	push   esi
c00271b8:	53                   	push   ebx
c00271b9:	83 ec 0c             	sub    esp,0xc
c00271bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00271bf:	89 d1                	mov    ecx,edx
c00271c1:	c1 f9 14             	sar    ecx,0x14
c00271c4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00271c7:	89 df                	mov    edi,ebx
c00271c9:	c1 e7 0b             	shl    edi,0xb
c00271cc:	89 d0                	mov    eax,edx
c00271ce:	c1 e0 0b             	shl    eax,0xb
c00271d1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00271d6:	c1 eb 15             	shr    ebx,0x15
c00271d9:	09 d8                	or     eax,ebx
c00271db:	89 cb                	mov    ebx,ecx
c00271dd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00271e3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00271e9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00271ef:	0f 86 9e 00 00 00    	jbe    c0027293 <__truncdfsf2+0xe0>
c00271f5:	85 db                	test   ebx,ebx
c00271f7:	75 0a                	jne    c0027203 <__truncdfsf2+0x50>
c00271f9:	c1 fa 17             	sar    edx,0x17
c00271fc:	30 d2                	xor    dl,dl
c00271fe:	e9 84 00 00 00       	jmp    c0027287 <__truncdfsf2+0xd4>
c0027203:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027209:	83 fe 83             	cmp    esi,0xffffff83
c002720c:	7d 4b                	jge    c0027259 <__truncdfsf2+0xa6>
c002720e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027213:	29 f1                	sub    ecx,esi
c0027215:	83 f9 1f             	cmp    ecx,0x1f
c0027218:	7f 6b                	jg     c0027285 <__truncdfsf2+0xd2>
c002721a:	0d 00 00 00 80       	or     eax,0x80000000
c002721f:	89 c3                	mov    ebx,eax
c0027221:	d3 eb                	shr    ebx,cl
c0027223:	be 01 00 00 00       	mov    esi,0x1
c0027228:	d3 e6                	shl    esi,cl
c002722a:	4e                   	dec    esi
c002722b:	21 f0                	and    eax,esi
c002722d:	09 f8                	or     eax,edi
c002722f:	0f 95 c0             	setne  al
c0027232:	0f b6 c0             	movzx  eax,al
c0027235:	09 c3                	or     ebx,eax
c0027237:	89 d9                	mov    ecx,ebx
c0027239:	c1 e9 08             	shr    ecx,0x8
c002723c:	f6 c3 7f             	test   bl,0x7f
c002723f:	0f 95 c0             	setne  al
c0027242:	09 c8                	or     eax,ecx
c0027244:	83 e0 01             	and    eax,0x1
c0027247:	c1 eb 07             	shr    ebx,0x7
c002724a:	21 c3                	and    ebx,eax
c002724c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027252:	09 d1                	or     ecx,edx
c0027254:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027257:	eb 76                	jmp    c00272cf <__truncdfsf2+0x11c>
c0027259:	83 c6 80             	add    esi,0xffffff80
c002725c:	7e 1d                	jle    c002727b <__truncdfsf2+0xc8>
c002725e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027264:	75 0b                	jne    c0027271 <__truncdfsf2+0xbe>
c0027266:	09 f8                	or     eax,edi
c0027268:	74 09                	je     c0027273 <__truncdfsf2+0xc0>
c002726a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002726f:	eb 02                	jmp    c0027273 <__truncdfsf2+0xc0>
c0027271:	31 c0                	xor    eax,eax
c0027273:	c1 fa 17             	sar    edx,0x17
c0027276:	80 ca ff             	or     dl,0xff
c0027279:	eb 0e                	jmp    c0027289 <__truncdfsf2+0xd6>
c002727b:	c1 fa 1f             	sar    edx,0x1f
c002727e:	c1 e2 08             	shl    edx,0x8
c0027281:	09 ca                	or     edx,ecx
c0027283:	eb 04                	jmp    c0027289 <__truncdfsf2+0xd6>
c0027285:	31 d2                	xor    edx,edx
c0027287:	31 c0                	xor    eax,eax
c0027289:	c1 e2 17             	shl    edx,0x17
c002728c:	c1 e8 08             	shr    eax,0x8
c002728f:	09 d0                	or     eax,edx
c0027291:	eb 3c                	jmp    c00272cf <__truncdfsf2+0x11c>
c0027293:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027299:	89 ca                	mov    edx,ecx
c002729b:	c1 fa 0b             	sar    edx,0xb
c002729e:	c1 e2 08             	shl    edx,0x8
c00272a1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00272a4:	31 db                	xor    ebx,ebx
c00272a6:	85 ff                	test   edi,edi
c00272a8:	0f 95 c3             	setne  bl
c00272ab:	09 d8                	or     eax,ebx
c00272ad:	89 c3                	mov    ebx,eax
c00272af:	c1 eb 08             	shr    ebx,0x8
c00272b2:	a8 7f                	test   al,0x7f
c00272b4:	0f 95 c2             	setne  dl
c00272b7:	89 d6                	mov    esi,edx
c00272b9:	09 de                	or     esi,ebx
c00272bb:	83 e6 01             	and    esi,0x1
c00272be:	c1 e8 07             	shr    eax,0x7
c00272c1:	21 f0                	and    eax,esi
c00272c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00272c6:	09 ca                	or     edx,ecx
c00272c8:	c1 e2 17             	shl    edx,0x17
c00272cb:	09 da                	or     edx,ebx
c00272cd:	01 d0                	add    eax,edx
c00272cf:	83 c4 0c             	add    esp,0xc
c00272d2:	5b                   	pop    ebx
c00272d3:	5e                   	pop    esi
c00272d4:	5f                   	pop    edi
c00272d5:	5d                   	pop    ebp
c00272d6:	c3                   	ret    

c00272d7 <__extendsfdf2>:
c00272d7:	55                   	push   ebp
c00272d8:	89 e5                	mov    ebp,esp
c00272da:	57                   	push   edi
c00272db:	56                   	push   esi
c00272dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272df:	89 d1                	mov    ecx,edx
c00272e1:	c1 f9 17             	sar    ecx,0x17
c00272e4:	c1 e2 08             	shl    edx,0x8
c00272e7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00272ed:	89 c8                	mov    eax,ecx
c00272ef:	80 e4 f8             	and    ah,0xf8
c00272f2:	8d 71 01             	lea    esi,[ecx+0x1]
c00272f5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00272fb:	75 27                	jne    c0027324 <__extendsfdf2+0x4d>
c00272fd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027303:	75 18                	jne    c002731d <__extendsfdf2+0x46>
c0027305:	85 d2                	test   edx,edx
c0027307:	74 20                	je     c0027329 <__extendsfdf2+0x52>
c0027309:	41                   	inc    ecx
c002730a:	01 d2                	add    edx,edx
c002730c:	79 fb                	jns    c0027309 <__extendsfdf2+0x32>
c002730e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027314:	29 c8                	sub    eax,ecx
c0027316:	05 81 03 00 00       	add    eax,0x381
c002731b:	eb 0c                	jmp    c0027329 <__extendsfdf2+0x52>
c002731d:	05 00 07 00 00       	add    eax,0x700
c0027322:	eb 05                	jmp    c0027329 <__extendsfdf2+0x52>
c0027324:	05 80 03 00 00       	add    eax,0x380
c0027329:	c1 e0 14             	shl    eax,0x14
c002732c:	89 c1                	mov    ecx,eax
c002732e:	89 d0                	mov    eax,edx
c0027330:	c1 e8 0b             	shr    eax,0xb
c0027333:	09 c1                	or     ecx,eax
c0027335:	c1 e2 15             	shl    edx,0x15
c0027338:	89 d0                	mov    eax,edx
c002733a:	89 ca                	mov    edx,ecx
c002733c:	5e                   	pop    esi
c002733d:	5f                   	pop    edi
c002733e:	5d                   	pop    ebp
c002733f:	c3                   	ret    

c0027340 <fabs>:
c0027340:	83 ec 0c             	sub    esp,0xc
c0027343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027347:	89 04 24             	mov    DWORD PTR [esp],eax
c002734a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002734e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027353:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027357:	dd 04 24             	fld    QWORD PTR [esp]
c002735a:	83 c4 0c             	add    esp,0xc
c002735d:	c3                   	ret    
c002735e:	66 90                	xchg   ax,ax

c0027360 <lrint>:
c0027360:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027364:	83 ec 04             	sub    esp,0x4
c0027367:	db 1c 24             	fistp  DWORD PTR [esp]
c002736a:	58                   	pop    eax
c002736b:	c3                   	ret    

c002736c <lrintf>:
c002736c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027370:	83 ec 04             	sub    esp,0x4
c0027373:	db 1c 24             	fistp  DWORD PTR [esp]
c0027376:	58                   	pop    eax
c0027377:	c3                   	ret    

Disassembly of section .init:

c0027378 <_init>:
c0027378:	55                   	push   ebp
c0027379:	89 e5                	mov    ebp,esp
c002737b:	e8 98 8d fd ff       	call   c0000118 <frame_dummy>
c0027380:	e8 63 e0 ff ff       	call   c00253e8 <__do_global_ctors_aux>
c0027385:	5d                   	pop    ebp
c0027386:	c3                   	ret    

Disassembly of section .fini:

c0027387 <_fini>:
c0027387:	55                   	push   ebp
c0027388:	89 e5                	mov    ebp,esp
c002738a:	e8 19 8d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002738f:	5d                   	pop    ebp
c0027390:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027392 <Computer::~Computer()>:
c0027392:	83 ec 0c             	sub    esp,0xc
c0027395:	ba 88 8e 02 c0       	mov    edx,0xc0028e88
c002739a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002739e:	89 10                	mov    DWORD PTR [eax],edx
c00273a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273a4:	83 ec 0c             	sub    esp,0xc
c00273a7:	50                   	push   eax
c00273a8:	e8 21 c8 fe ff       	call   c0013bce <Device::~Device()>
c00273ad:	83 c4 10             	add    esp,0x10
c00273b0:	90                   	nop
c00273b1:	83 c4 0c             	add    esp,0xc
c00273b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00273b6 <Computer::~Computer()>:
c00273b6:	83 ec 0c             	sub    esp,0xc
c00273b9:	83 ec 0c             	sub    esp,0xc
c00273bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00273c0:	e8 cd ff ff ff       	call   c0027392 <Computer::~Computer()>
c00273c5:	83 c4 10             	add    esp,0x10
c00273c8:	83 ec 08             	sub    esp,0x8
c00273cb:	68 ec 01 00 00       	push   0x1ec
c00273d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00273d4:	e8 1c b4 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00273d9:	83 c4 10             	add    esp,0x10
c00273dc:	83 c4 0c             	add    esp,0xc
c00273df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00273e0 <idleCommon()>:
c00273e0:	83 ec 0c             	sub    esp,0xc
c00273e3:	e8 8a 5c ff ff       	call   c001d072 <lockScheduler()>
c00273e8:	e8 c1 5f ff ff       	call   c001d3ae <schedule()>
c00273ed:	83 c4 0c             	add    esp,0xc
c00273f0:	e9 7f 5c ff ff       	jmp    c001d074 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00273f6 <LinkedList<UnixFile>::~LinkedList()>:
c00273f6:	90                   	nop
c00273f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00273f8 <LinkedList<UnixFile>::LinkedList()>:
c00273f8:	83 ec 0c             	sub    esp,0xc
c00273fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027409:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027414:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002741b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002741f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027429:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027434:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002743b:	83 ec 0c             	sub    esp,0xc
c002743e:	68 16 91 02 c0       	push   0xc0029116
c0027443:	e8 8d b4 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0027448:	83 c4 10             	add    esp,0x10
c002744b:	90                   	nop
c002744c:	83 c4 0c             	add    esp,0xc
c002744f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027450 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027450:	83 ec 0c             	sub    esp,0xc
c0027453:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027458:	75 10                	jne    c002746a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002745a:	83 ec 0c             	sub    esp,0xc
c002745d:	68 30 91 02 c0       	push   0xc0029130
c0027462:	e8 5c 26 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0027467:	83 c4 10             	add    esp,0x10
c002746a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002746e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027470:	85 c0                	test   eax,eax
c0027472:	74 34                	je     c00274a8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027478:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002747b:	85 c0                	test   eax,eax
c002747d:	74 29                	je     c00274a8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002747f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027483:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027486:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002748a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002748d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027491:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027495:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002749c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002749f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00274a6:	eb 65                	jmp    c002750d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00274a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00274ae:	85 c0                	test   eax,eax
c00274b0:	75 4b                	jne    c00274fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00274b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274b9:	85 c0                	test   eax,eax
c00274bb:	75 40                	jne    c00274fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00274bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00274c5:	89 10                	mov    DWORD PTR [eax],edx
c00274c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00274cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00274d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00274e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274e7:	85 c0                	test   eax,eax
c00274e9:	74 22                	je     c002750d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00274eb:	83 ec 0c             	sub    esp,0xc
c00274ee:	68 52 91 02 c0       	push   0xc0029152
c00274f3:	e8 cb 25 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00274f8:	83 c4 10             	add    esp,0x10
c00274fb:	eb 10                	jmp    c002750d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00274fd:	83 ec 0c             	sub    esp,0xc
c0027500:	68 5c 91 02 c0       	push   0xc002915c
c0027505:	e8 b9 25 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c002750a:	83 c4 10             	add    esp,0x10
c002750d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027511:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027514:	8d 50 01             	lea    edx,[eax+0x1]
c0027517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002751b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002751e:	90                   	nop
c002751f:	83 c4 0c             	add    esp,0xc
c0027522:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027524 <LinkedList<UnixFile>::getFirstElement()>:
c0027524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027528:	8b 00                	mov    eax,DWORD PTR [eax]
c002752a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002752c <LinkedList<UnixFile>::removeFirst()>:
c002752c:	83 ec 0c             	sub    esp,0xc
c002752f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027533:	8b 00                	mov    eax,DWORD PTR [eax]
c0027535:	85 c0                	test   eax,eax
c0027537:	75 12                	jne    c002754b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027539:	83 ec 0c             	sub    esp,0xc
c002753c:	68 68 91 02 c0       	push   0xc0029168
c0027541:	e8 7d 25 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0027546:	83 c4 10             	add    esp,0x10
c0027549:	eb 7e                	jmp    c00275c9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002754b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002754f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027552:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027555:	85 c0                	test   eax,eax
c0027557:	74 10                	je     c0027569 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027559:	83 ec 0c             	sub    esp,0xc
c002755c:	68 b3 91 02 c0       	push   0xc00291b3
c0027561:	e8 5d 25 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0027566:	83 c4 10             	add    esp,0x10
c0027569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002756d:	8b 00                	mov    eax,DWORD PTR [eax]
c002756f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027572:	85 c0                	test   eax,eax
c0027574:	75 33                	jne    c00275a9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002757a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027584:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002758b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002758f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027592:	83 f8 01             	cmp    eax,0x1
c0027595:	74 21                	je     c00275b8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027597:	83 ec 0c             	sub    esp,0xc
c002759a:	68 8c 91 02 c0       	push   0xc002918c
c002759f:	e8 1f 25 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00275a4:	83 c4 10             	add    esp,0x10
c00275a7:	eb 0f                	jmp    c00275b8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00275a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00275af:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00275b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275b6:	89 10                	mov    DWORD PTR [eax],edx
c00275b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275bf:	8d 50 ff             	lea    edx,[eax-0x1]
c00275c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00275c9:	83 c4 0c             	add    esp,0xc
c00275cc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00275ce <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00275ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00275d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275d5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00275d6 <DriverlessDevice::~DriverlessDevice()>:
c00275d6:	ba a4 98 02 c0       	mov    edx,0xc00298a4
c00275db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275df:	89 10                	mov    DWORD PTR [eax],edx
c00275e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275e5:	50                   	push   eax
c00275e6:	e8 e3 c5 fe ff       	call   c0013bce <Device::~Device()>
c00275eb:	83 c4 04             	add    esp,0x4
c00275ee:	90                   	nop
c00275ef:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00275f0 <DriverlessDevice::~DriverlessDevice()>:
c00275f0:	83 ec 0c             	sub    esp,0xc
c00275f3:	83 ec 0c             	sub    esp,0xc
c00275f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00275fa:	e8 d7 ff ff ff       	call   c00275d6 <DriverlessDevice::~DriverlessDevice()>
c00275ff:	83 c4 10             	add    esp,0x10
c0027602:	83 ec 08             	sub    esp,0x8
c0027605:	68 58 01 00 00       	push   0x158
c002760a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002760e:	e8 e2 b1 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027613:	83 c4 10             	add    esp,0x10
c0027616:	83 c4 0c             	add    esp,0xc
c0027619:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002761a <LinkedList<Device>::addElement(Device*)>:
c002761a:	83 ec 0c             	sub    esp,0xc
c002761d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027622:	75 10                	jne    c0027634 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027624:	83 ec 0c             	sub    esp,0xc
c0027627:	68 30 91 02 c0       	push   0xc0029130
c002762c:	e8 92 24 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0027631:	83 c4 10             	add    esp,0x10
c0027634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027638:	8b 00                	mov    eax,DWORD PTR [eax]
c002763a:	85 c0                	test   eax,eax
c002763c:	74 3a                	je     c0027678 <LinkedList<Device>::addElement(Device*)+0x5e>
c002763e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027642:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027645:	85 c0                	test   eax,eax
c0027647:	74 2f                	je     c0027678 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002764d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027650:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027654:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002765a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002765e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027662:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027669:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002766c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027676:	eb 68                	jmp    c00276e0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002767c:	8b 00                	mov    eax,DWORD PTR [eax]
c002767e:	85 c0                	test   eax,eax
c0027680:	75 4e                	jne    c00276d0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027686:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027689:	85 c0                	test   eax,eax
c002768b:	75 43                	jne    c00276d0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002768d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027691:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027695:	89 10                	mov    DWORD PTR [eax],edx
c0027697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002769b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002769f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00276a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00276a9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00276b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00276ba:	85 c0                	test   eax,eax
c00276bc:	74 22                	je     c00276e0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00276be:	83 ec 0c             	sub    esp,0xc
c00276c1:	68 52 91 02 c0       	push   0xc0029152
c00276c6:	e8 f8 23 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00276cb:	83 c4 10             	add    esp,0x10
c00276ce:	eb 10                	jmp    c00276e0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00276d0:	83 ec 0c             	sub    esp,0xc
c00276d3:	68 5c 91 02 c0       	push   0xc002915c
c00276d8:	e8 e6 23 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00276dd:	83 c4 10             	add    esp,0x10
c00276e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00276e7:	8d 50 01             	lea    edx,[eax+0x1]
c00276ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00276f1:	90                   	nop
c00276f2:	83 c4 0c             	add    esp,0xc
c00276f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00276f6 <LinkedList<Device>::LinkedList()>:
c00276f6:	83 ec 0c             	sub    esp,0xc
c00276f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027707:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002770e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027712:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002771d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027727:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002772e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027732:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027739:	83 ec 0c             	sub    esp,0xc
c002773c:	68 16 91 02 c0       	push   0xc0029116
c0027741:	e8 8f b1 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0027746:	83 c4 10             	add    esp,0x10
c0027749:	90                   	nop
c002774a:	83 c4 0c             	add    esp,0xc
c002774d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002774e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002774e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027752:	8b 00                	mov    eax,DWORD PTR [eax]
c0027754:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027756 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002775a:	8b 00                	mov    eax,DWORD PTR [eax]
c002775c:	85 c0                	test   eax,eax
c002775e:	75 0e                	jne    c002776e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027764:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027767:	85 c0                	test   eax,eax
c0027769:	75 03                	jne    c002776e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002776b:	b0 01                	mov    al,0x1
c002776d:	c3                   	ret    
c002776e:	b0 00                	mov    al,0x0
c0027770:	90                   	nop
c0027771:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027772:	83 ec 0c             	sub    esp,0xc
c0027775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027779:	8b 00                	mov    eax,DWORD PTR [eax]
c002777b:	85 c0                	test   eax,eax
c002777d:	75 15                	jne    c0027794 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002777f:	83 ec 0c             	sub    esp,0xc
c0027782:	68 68 91 02 c0       	push   0xc0029168
c0027787:	e8 37 23 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c002778c:	83 c4 10             	add    esp,0x10
c002778f:	e9 88 00 00 00       	jmp    c002781c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002779b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002779e:	85 c0                	test   eax,eax
c00277a0:	0f 95 c0             	setne  al
c00277a3:	84 c0                	test   al,al
c00277a5:	74 10                	je     c00277b7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00277a7:	83 ec 0c             	sub    esp,0xc
c00277aa:	68 b3 91 02 c0       	push   0xc00291b3
c00277af:	e8 0f 23 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00277b4:	83 c4 10             	add    esp,0x10
c00277b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00277bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00277c0:	85 c0                	test   eax,eax
c00277c2:	0f 94 c0             	sete   al
c00277c5:	84 c0                	test   al,al
c00277c7:	74 33                	je     c00277fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00277c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00277d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00277de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00277e5:	83 f8 01             	cmp    eax,0x1
c00277e8:	74 21                	je     c002780b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00277ea:	83 ec 0c             	sub    esp,0xc
c00277ed:	68 8c 91 02 c0       	push   0xc002918c
c00277f2:	e8 cc 22 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00277f7:	83 c4 10             	add    esp,0x10
c00277fa:	eb 0f                	jmp    c002780b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00277fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027800:	8b 00                	mov    eax,DWORD PTR [eax]
c0027802:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0027805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027809:	89 10                	mov    DWORD PTR [eax],edx
c002780b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002780f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027812:	8d 50 ff             	lea    edx,[eax-0x1]
c0027815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027819:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002781c:	83 c4 0c             	add    esp,0xc
c002781f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027820:	83 ec 0c             	sub    esp,0xc
c0027823:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027828:	75 10                	jne    c002783a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002782a:	83 ec 0c             	sub    esp,0xc
c002782d:	68 30 91 02 c0       	push   0xc0029130
c0027832:	e8 8c 22 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c0027837:	83 c4 10             	add    esp,0x10
c002783a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002783e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027840:	85 c0                	test   eax,eax
c0027842:	74 34                	je     c0027878 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002784b:	85 c0                	test   eax,eax
c002784d:	74 29                	je     c0027878 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002784f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027853:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027856:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002785a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002785d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027861:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027865:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002786c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002786f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027876:	eb 65                	jmp    c00278dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002787c:	8b 00                	mov    eax,DWORD PTR [eax]
c002787e:	85 c0                	test   eax,eax
c0027880:	75 4b                	jne    c00278cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027886:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027889:	85 c0                	test   eax,eax
c002788b:	75 40                	jne    c00278cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002788d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027891:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027895:	89 10                	mov    DWORD PTR [eax],edx
c0027897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002789b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002789f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00278a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00278a9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00278b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00278b7:	85 c0                	test   eax,eax
c00278b9:	74 22                	je     c00278dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00278bb:	83 ec 0c             	sub    esp,0xc
c00278be:	68 52 91 02 c0       	push   0xc0029152
c00278c3:	e8 fb 21 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00278c8:	83 c4 10             	add    esp,0x10
c00278cb:	eb 10                	jmp    c00278dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00278cd:	83 ec 0c             	sub    esp,0xc
c00278d0:	68 5c 91 02 c0       	push   0xc002915c
c00278d5:	e8 e9 21 ff ff       	call   c0019ac3 <Krnl::panic(char const*)>
c00278da:	83 c4 10             	add    esp,0x10
c00278dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00278e4:	8d 50 01             	lea    edx,[eax+0x1]
c00278e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00278ee:	90                   	nop
c00278ef:	83 c4 0c             	add    esp,0xc
c00278f2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00278f4 <ACPI::~ACPI()>:
c00278f4:	83 ec 0c             	sub    esp,0xc
c00278f7:	ba 18 a1 02 c0       	mov    edx,0xc002a118
c00278fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027900:	89 10                	mov    DWORD PTR [eax],edx
c0027902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027906:	83 ec 0c             	sub    esp,0xc
c0027909:	50                   	push   eax
c002790a:	e8 bf c2 fe ff       	call   c0013bce <Device::~Device()>
c002790f:	83 c4 10             	add    esp,0x10
c0027912:	90                   	nop
c0027913:	83 c4 0c             	add    esp,0xc
c0027916:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027918 <ACPI::~ACPI()>:
c0027918:	83 ec 0c             	sub    esp,0xc
c002791b:	83 ec 0c             	sub    esp,0xc
c002791e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027922:	e8 cd ff ff ff       	call   c00278f4 <ACPI::~ACPI()>
c0027927:	83 c4 10             	add    esp,0x10
c002792a:	83 ec 08             	sub    esp,0x8
c002792d:	68 68 0a 00 00       	push   0xa68
c0027932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027936:	e8 ba ae fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c002793b:	83 c4 10             	add    esp,0x10
c002793e:	83 c4 0c             	add    esp,0xc
c0027941:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027942 <CPU::~CPU()>:
c0027942:	83 ec 0c             	sub    esp,0xc
c0027945:	ba 08 a5 02 c0       	mov    edx,0xc002a508
c002794a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002794e:	89 10                	mov    DWORD PTR [eax],edx
c0027950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027954:	83 ec 0c             	sub    esp,0xc
c0027957:	50                   	push   eax
c0027958:	e8 71 c2 fe ff       	call   c0013bce <Device::~Device()>
c002795d:	83 c4 10             	add    esp,0x10
c0027960:	90                   	nop
c0027961:	83 c4 0c             	add    esp,0xc
c0027964:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027966 <CPU::~CPU()>:
c0027966:	83 ec 0c             	sub    esp,0xc
c0027969:	83 ec 0c             	sub    esp,0xc
c002796c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027970:	e8 cd ff ff ff       	call   c0027942 <CPU::~CPU()>
c0027975:	83 c4 10             	add    esp,0x10
c0027978:	83 ec 08             	sub    esp,0x8
c002797b:	68 98 11 00 00       	push   0x1198
c0027980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027984:	e8 6c ae fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027989:	83 c4 10             	add    esp,0x10
c002798c:	83 c4 0c             	add    esp,0xc
c002798f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027990 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027990:	90                   	nop
c0027991:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027992 <ThreadControlBlock::ThreadControlBlock()>:
c0027992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027996:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002799d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00279a1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00279a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00279ac:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00279b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00279b7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00279be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00279c2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00279c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00279ca:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00279ce:	90                   	nop
c00279cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00279d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00279d0:	83 ec 0c             	sub    esp,0xc
c00279d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00279dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00279e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00279f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00279fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027a13:	83 ec 0c             	sub    esp,0xc
c0027a16:	68 16 91 02 c0       	push   0xc0029116
c0027a1b:	e8 b5 ae fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0027a20:	83 c4 10             	add    esp,0x10
c0027a23:	90                   	nop
c0027a24:	83 c4 0c             	add    esp,0xc
c0027a27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027a28 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027a28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027a2c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027a2f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027a30 <Vm::_FPUState::_FPUState()>:
c0027a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027a34:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0027a3b:	90                   	nop
c0027a3c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0027a3e <PCI::~PCI()>:
c0027a3e:	83 ec 0c             	sub    esp,0xc
c0027a41:	ba 2c b4 02 c0       	mov    edx,0xc002b42c
c0027a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a4a:	89 10                	mov    DWORD PTR [eax],edx
c0027a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a50:	83 ec 0c             	sub    esp,0xc
c0027a53:	50                   	push   eax
c0027a54:	e8 4d bb fe ff       	call   c00135a6 <Bus::~Bus()>
c0027a59:	83 c4 10             	add    esp,0x10
c0027a5c:	90                   	nop
c0027a5d:	83 c4 0c             	add    esp,0xc
c0027a60:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027a62 <PCI::~PCI()>:
c0027a62:	83 ec 0c             	sub    esp,0xc
c0027a65:	83 ec 0c             	sub    esp,0xc
c0027a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a6c:	e8 cd ff ff ff       	call   c0027a3e <PCI::~PCI()>
c0027a71:	83 c4 10             	add    esp,0x10
c0027a74:	83 ec 08             	sub    esp,0x8
c0027a77:	68 58 01 00 00       	push   0x158
c0027a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a80:	e8 70 ad fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027a85:	83 c4 10             	add    esp,0x10
c0027a88:	83 c4 0c             	add    esp,0xc
c0027a8b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0027a8c <IDE::~IDE()>:
c0027a8c:	83 ec 0c             	sub    esp,0xc
c0027a8f:	ba 90 b6 02 c0       	mov    edx,0xc002b690
c0027a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a98:	89 10                	mov    DWORD PTR [eax],edx
c0027a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a9e:	83 ec 0c             	sub    esp,0xc
c0027aa1:	50                   	push   eax
c0027aa2:	e8 17 c6 fe ff       	call   c00140be <HardDiskController::~HardDiskController()>
c0027aa7:	83 c4 10             	add    esp,0x10
c0027aaa:	90                   	nop
c0027aab:	83 c4 0c             	add    esp,0xc
c0027aae:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027ab0 <IDE::~IDE()>:
c0027ab0:	83 ec 0c             	sub    esp,0xc
c0027ab3:	83 ec 0c             	sub    esp,0xc
c0027ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027aba:	e8 cd ff ff ff       	call   c0027a8c <IDE::~IDE()>
c0027abf:	83 c4 10             	add    esp,0x10
c0027ac2:	83 ec 08             	sub    esp,0x8
c0027ac5:	68 70 02 00 00       	push   0x270
c0027aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ace:	e8 22 ad fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027ad3:	83 c4 10             	add    esp,0x10
c0027ad6:	83 c4 0c             	add    esp,0xc
c0027ad9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0027ada <SATABus::~SATABus()>:
c0027ada:	83 ec 0c             	sub    esp,0xc
c0027add:	ba 70 b7 02 c0       	mov    edx,0xc002b770
c0027ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ae6:	89 10                	mov    DWORD PTR [eax],edx
c0027ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aec:	83 ec 0c             	sub    esp,0xc
c0027aef:	50                   	push   eax
c0027af0:	e8 c9 c5 fe ff       	call   c00140be <HardDiskController::~HardDiskController()>
c0027af5:	83 c4 10             	add    esp,0x10
c0027af8:	90                   	nop
c0027af9:	83 c4 0c             	add    esp,0xc
c0027afc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0027afe <SATABus::~SATABus()>:
c0027afe:	83 ec 0c             	sub    esp,0xc
c0027b01:	83 ec 0c             	sub    esp,0xc
c0027b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b08:	e8 cd ff ff ff       	call   c0027ada <SATABus::~SATABus()>
c0027b0d:	83 c4 10             	add    esp,0x10
c0027b10:	83 ec 08             	sub    esp,0x8
c0027b13:	68 64 01 00 00       	push   0x164
c0027b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b1c:	e8 d4 ac fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027b21:	83 c4 10             	add    esp,0x10
c0027b24:	83 c4 0c             	add    esp,0xc
c0027b27:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027b28 <ATA::~ATA()>:
c0027b28:	83 ec 0c             	sub    esp,0xc
c0027b2b:	ba b0 b7 02 c0       	mov    edx,0xc002b7b0
c0027b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b34:	89 10                	mov    DWORD PTR [eax],edx
c0027b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b3a:	83 ec 0c             	sub    esp,0xc
c0027b3d:	50                   	push   eax
c0027b3e:	e8 59 c6 fe ff       	call   c001419c <PhysicalDisk::~PhysicalDisk()>
c0027b43:	83 c4 10             	add    esp,0x10
c0027b46:	90                   	nop
c0027b47:	83 c4 0c             	add    esp,0xc
c0027b4a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0027b4c <ATA::~ATA()>:
c0027b4c:	83 ec 0c             	sub    esp,0xc
c0027b4f:	83 ec 0c             	sub    esp,0xc
c0027b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b56:	e8 cd ff ff ff       	call   c0027b28 <ATA::~ATA()>
c0027b5b:	83 c4 10             	add    esp,0x10
c0027b5e:	83 ec 08             	sub    esp,0x8
c0027b61:	68 7c 01 00 00       	push   0x17c
c0027b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b6a:	e8 86 ac fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027b6f:	83 c4 10             	add    esp,0x10
c0027b72:	83 c4 0c             	add    esp,0xc
c0027b75:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027b76 <ATAPI::~ATAPI()>:
c0027b76:	83 ec 0c             	sub    esp,0xc
c0027b79:	ba 1c b8 02 c0       	mov    edx,0xc002b81c
c0027b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b82:	89 10                	mov    DWORD PTR [eax],edx
c0027b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b88:	83 ec 0c             	sub    esp,0xc
c0027b8b:	50                   	push   eax
c0027b8c:	e8 0b c6 fe ff       	call   c001419c <PhysicalDisk::~PhysicalDisk()>
c0027b91:	83 c4 10             	add    esp,0x10
c0027b94:	90                   	nop
c0027b95:	83 c4 0c             	add    esp,0xc
c0027b98:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0027b9a <ATAPI::~ATAPI()>:
c0027b9a:	83 ec 0c             	sub    esp,0xc
c0027b9d:	83 ec 0c             	sub    esp,0xc
c0027ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ba4:	e8 cd ff ff ff       	call   c0027b76 <ATAPI::~ATAPI()>
c0027ba9:	83 c4 10             	add    esp,0x10
c0027bac:	83 ec 08             	sub    esp,0x8
c0027baf:	68 80 01 00 00       	push   0x180
c0027bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bb8:	e8 38 ac fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027bbd:	83 c4 10             	add    esp,0x10
c0027bc0:	83 c4 0c             	add    esp,0xc
c0027bc3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027bc4 <SATA::~SATA()>:
c0027bc4:	83 ec 0c             	sub    esp,0xc
c0027bc7:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c0027bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bd0:	89 10                	mov    DWORD PTR [eax],edx
c0027bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bd6:	83 ec 0c             	sub    esp,0xc
c0027bd9:	50                   	push   eax
c0027bda:	e8 bd c5 fe ff       	call   c001419c <PhysicalDisk::~PhysicalDisk()>
c0027bdf:	83 c4 10             	add    esp,0x10
c0027be2:	90                   	nop
c0027be3:	83 c4 0c             	add    esp,0xc
c0027be6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027be8 <SATA::~SATA()>:
c0027be8:	83 ec 0c             	sub    esp,0xc
c0027beb:	83 ec 0c             	sub    esp,0xc
c0027bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bf2:	e8 cd ff ff ff       	call   c0027bc4 <SATA::~SATA()>
c0027bf7:	83 c4 10             	add    esp,0x10
c0027bfa:	83 ec 08             	sub    esp,0x8
c0027bfd:	68 74 01 00 00       	push   0x174
c0027c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c06:	e8 ea ab fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027c0b:	83 c4 10             	add    esp,0x10
c0027c0e:	83 c4 0c             	add    esp,0xc
c0027c11:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027c12 <AVX::~AVX()>:
c0027c12:	83 ec 0c             	sub    esp,0xc
c0027c15:	ba 7c b9 02 c0       	mov    edx,0xc002b97c
c0027c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c1e:	89 10                	mov    DWORD PTR [eax],edx
c0027c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c24:	83 ec 0c             	sub    esp,0xc
c0027c27:	50                   	push   eax
c0027c28:	e8 f3 c5 fe ff       	call   c0014220 <FPU::~FPU()>
c0027c2d:	83 c4 10             	add    esp,0x10
c0027c30:	90                   	nop
c0027c31:	83 c4 0c             	add    esp,0xc
c0027c34:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027c36 <AVX::~AVX()>:
c0027c36:	83 ec 0c             	sub    esp,0xc
c0027c39:	83 ec 0c             	sub    esp,0xc
c0027c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c40:	e8 cd ff ff ff       	call   c0027c12 <AVX::~AVX()>
c0027c45:	83 c4 10             	add    esp,0x10
c0027c48:	83 ec 08             	sub    esp,0x8
c0027c4b:	68 58 01 00 00       	push   0x158
c0027c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c54:	e8 9c ab fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027c59:	83 c4 10             	add    esp,0x10
c0027c5c:	83 c4 0c             	add    esp,0xc
c0027c5f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027c60 <MMX::~MMX()>:
c0027c60:	83 ec 0c             	sub    esp,0xc
c0027c63:	ba bc b9 02 c0       	mov    edx,0xc002b9bc
c0027c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c6c:	89 10                	mov    DWORD PTR [eax],edx
c0027c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c72:	83 ec 0c             	sub    esp,0xc
c0027c75:	50                   	push   eax
c0027c76:	e8 a5 c5 fe ff       	call   c0014220 <FPU::~FPU()>
c0027c7b:	83 c4 10             	add    esp,0x10
c0027c7e:	90                   	nop
c0027c7f:	83 c4 0c             	add    esp,0xc
c0027c82:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027c84 <MMX::~MMX()>:
c0027c84:	83 ec 0c             	sub    esp,0xc
c0027c87:	83 ec 0c             	sub    esp,0xc
c0027c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c8e:	e8 cd ff ff ff       	call   c0027c60 <MMX::~MMX()>
c0027c93:	83 c4 10             	add    esp,0x10
c0027c96:	83 ec 08             	sub    esp,0x8
c0027c99:	68 58 01 00 00       	push   0x158
c0027c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ca2:	e8 4e ab fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027ca7:	83 c4 10             	add    esp,0x10
c0027caa:	83 c4 0c             	add    esp,0xc
c0027cad:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0027cae <SSE::~SSE()>:
c0027cae:	83 ec 0c             	sub    esp,0xc
c0027cb1:	ba fc b9 02 c0       	mov    edx,0xc002b9fc
c0027cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cba:	89 10                	mov    DWORD PTR [eax],edx
c0027cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cc0:	83 ec 0c             	sub    esp,0xc
c0027cc3:	50                   	push   eax
c0027cc4:	e8 57 c5 fe ff       	call   c0014220 <FPU::~FPU()>
c0027cc9:	83 c4 10             	add    esp,0x10
c0027ccc:	90                   	nop
c0027ccd:	83 c4 0c             	add    esp,0xc
c0027cd0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027cd2 <SSE::~SSE()>:
c0027cd2:	83 ec 0c             	sub    esp,0xc
c0027cd5:	83 ec 0c             	sub    esp,0xc
c0027cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027cdc:	e8 cd ff ff ff       	call   c0027cae <SSE::~SSE()>
c0027ce1:	83 c4 10             	add    esp,0x10
c0027ce4:	83 ec 08             	sub    esp,0x8
c0027ce7:	68 58 01 00 00       	push   0x158
c0027cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027cf0:	e8 00 ab fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027cf5:	83 c4 10             	add    esp,0x10
c0027cf8:	83 c4 0c             	add    esp,0xc
c0027cfb:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0027cfc <x87::~x87()>:
c0027cfc:	83 ec 0c             	sub    esp,0xc
c0027cff:	ba 3c ba 02 c0       	mov    edx,0xc002ba3c
c0027d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d08:	89 10                	mov    DWORD PTR [eax],edx
c0027d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d0e:	83 ec 0c             	sub    esp,0xc
c0027d11:	50                   	push   eax
c0027d12:	e8 09 c5 fe ff       	call   c0014220 <FPU::~FPU()>
c0027d17:	83 c4 10             	add    esp,0x10
c0027d1a:	90                   	nop
c0027d1b:	83 c4 0c             	add    esp,0xc
c0027d1e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027d20 <x87::~x87()>:
c0027d20:	83 ec 0c             	sub    esp,0xc
c0027d23:	83 ec 0c             	sub    esp,0xc
c0027d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d2a:	e8 cd ff ff ff       	call   c0027cfc <x87::~x87()>
c0027d2f:	83 c4 10             	add    esp,0x10
c0027d32:	83 ec 08             	sub    esp,0x8
c0027d35:	68 58 01 00 00       	push   0x158
c0027d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d3e:	e8 b2 aa fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027d43:	83 c4 10             	add    esp,0x10
c0027d46:	83 c4 0c             	add    esp,0xc
c0027d49:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027d4a <IOAPIC::~IOAPIC()>:
c0027d4a:	83 ec 0c             	sub    esp,0xc
c0027d4d:	ba 94 bb 02 c0       	mov    edx,0xc002bb94
c0027d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d56:	89 10                	mov    DWORD PTR [eax],edx
c0027d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d5c:	83 ec 0c             	sub    esp,0xc
c0027d5f:	50                   	push   eax
c0027d60:	e8 69 be fe ff       	call   c0013bce <Device::~Device()>
c0027d65:	83 c4 10             	add    esp,0x10
c0027d68:	90                   	nop
c0027d69:	83 c4 0c             	add    esp,0xc
c0027d6c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027d6e <IOAPIC::~IOAPIC()>:
c0027d6e:	83 ec 0c             	sub    esp,0xc
c0027d71:	83 ec 0c             	sub    esp,0xc
c0027d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d78:	e8 cd ff ff ff       	call   c0027d4a <IOAPIC::~IOAPIC()>
c0027d7d:	83 c4 10             	add    esp,0x10
c0027d80:	83 ec 08             	sub    esp,0x8
c0027d83:	68 68 01 00 00       	push   0x168
c0027d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d8c:	e8 64 aa fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027d91:	83 c4 10             	add    esp,0x10
c0027d94:	83 c4 0c             	add    esp,0xc
c0027d97:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027d98 <APIC::~APIC()>:
c0027d98:	83 ec 0c             	sub    esp,0xc
c0027d9b:	ba 4c bb 02 c0       	mov    edx,0xc002bb4c
c0027da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027da4:	89 10                	mov    DWORD PTR [eax],edx
c0027da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027daa:	83 ec 0c             	sub    esp,0xc
c0027dad:	50                   	push   eax
c0027dae:	e8 37 c9 fe ff       	call   c00146ea <InterruptController::~InterruptController()>
c0027db3:	83 c4 10             	add    esp,0x10
c0027db6:	90                   	nop
c0027db7:	83 c4 0c             	add    esp,0xc
c0027dba:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027dbc <APIC::~APIC()>:
c0027dbc:	83 ec 0c             	sub    esp,0xc
c0027dbf:	83 ec 0c             	sub    esp,0xc
c0027dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dc6:	e8 cd ff ff ff       	call   c0027d98 <APIC::~APIC()>
c0027dcb:	83 c4 10             	add    esp,0x10
c0027dce:	83 ec 08             	sub    esp,0x8
c0027dd1:	68 58 21 00 00       	push   0x2158
c0027dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dda:	e8 16 aa fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027ddf:	83 c4 10             	add    esp,0x10
c0027de2:	83 c4 0c             	add    esp,0xc
c0027de5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027de6 <PIC::~PIC()>:
c0027de6:	83 ec 0c             	sub    esp,0xc
c0027de9:	ba e4 bb 02 c0       	mov    edx,0xc002bbe4
c0027dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027df2:	89 10                	mov    DWORD PTR [eax],edx
c0027df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027df8:	83 ec 0c             	sub    esp,0xc
c0027dfb:	50                   	push   eax
c0027dfc:	e8 e9 c8 fe ff       	call   c00146ea <InterruptController::~InterruptController()>
c0027e01:	83 c4 10             	add    esp,0x10
c0027e04:	90                   	nop
c0027e05:	83 c4 0c             	add    esp,0xc
c0027e08:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027e0a <PIC::~PIC()>:
c0027e0a:	83 ec 0c             	sub    esp,0xc
c0027e0d:	83 ec 0c             	sub    esp,0xc
c0027e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e14:	e8 cd ff ff ff       	call   c0027de6 <PIC::~PIC()>
c0027e19:	83 c4 10             	add    esp,0x10
c0027e1c:	83 ec 08             	sub    esp,0x8
c0027e1f:	68 58 21 00 00       	push   0x2158
c0027e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e28:	e8 c8 a9 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027e2d:	83 c4 10             	add    esp,0x10
c0027e30:	83 c4 0c             	add    esp,0xc
c0027e33:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027e34 <APICTimer::~APICTimer()>:
c0027e34:	83 ec 0c             	sub    esp,0xc
c0027e37:	ba 38 bc 02 c0       	mov    edx,0xc002bc38
c0027e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e40:	89 10                	mov    DWORD PTR [eax],edx
c0027e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e46:	83 ec 0c             	sub    esp,0xc
c0027e49:	50                   	push   eax
c0027e4a:	e8 9b e6 fe ff       	call   c00164ea <Timer::~Timer()>
c0027e4f:	83 c4 10             	add    esp,0x10
c0027e52:	90                   	nop
c0027e53:	83 c4 0c             	add    esp,0xc
c0027e56:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027e58 <APICTimer::~APICTimer()>:
c0027e58:	83 ec 0c             	sub    esp,0xc
c0027e5b:	83 ec 0c             	sub    esp,0xc
c0027e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e62:	e8 cd ff ff ff       	call   c0027e34 <APICTimer::~APICTimer()>
c0027e67:	83 c4 10             	add    esp,0x10
c0027e6a:	83 ec 08             	sub    esp,0x8
c0027e6d:	68 60 01 00 00       	push   0x160
c0027e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e76:	e8 7a a9 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027e7b:	83 c4 10             	add    esp,0x10
c0027e7e:	83 c4 0c             	add    esp,0xc
c0027e81:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027e82 <PIT::~PIT()>:
c0027e82:	83 ec 0c             	sub    esp,0xc
c0027e85:	ba 88 bc 02 c0       	mov    edx,0xc002bc88
c0027e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e8e:	89 10                	mov    DWORD PTR [eax],edx
c0027e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e94:	83 ec 0c             	sub    esp,0xc
c0027e97:	50                   	push   eax
c0027e98:	e8 4d e6 fe ff       	call   c00164ea <Timer::~Timer()>
c0027e9d:	83 c4 10             	add    esp,0x10
c0027ea0:	90                   	nop
c0027ea1:	83 c4 0c             	add    esp,0xc
c0027ea4:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027ea6 <PIT::~PIT()>:
c0027ea6:	83 ec 0c             	sub    esp,0xc
c0027ea9:	83 ec 0c             	sub    esp,0xc
c0027eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eb0:	e8 cd ff ff ff       	call   c0027e82 <PIT::~PIT()>
c0027eb5:	83 c4 10             	add    esp,0x10
c0027eb8:	83 ec 08             	sub    esp,0x8
c0027ebb:	68 5c 01 00 00       	push   0x15c
c0027ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ec4:	e8 2c a9 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027ec9:	83 c4 10             	add    esp,0x10
c0027ecc:	83 c4 0c             	add    esp,0xc
c0027ecf:	c3                   	ret    
