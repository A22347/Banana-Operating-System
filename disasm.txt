
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 01 9e 00 00       	call   c0009e21 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c9 2e 02 00       	call   c0022eee <_init>
c0000025:	c3                   	ret    
c0000026:	bb 72 3b 02 c0       	mov    ebx,0xc0023b72
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 80 3b 02 c0    	cmp    ebx,0xc0023b80
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 82 02 c0       	mov    eax,0xc00282b8
c0000049:	3d b8 82 02 c0       	cmp    eax,0xc00282b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 82 02 c0       	push   0xc00282b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 82 02 c0       	mov    eax,0xc00282b8
c0000075:	2d b8 82 02 c0       	sub    eax,0xc00282b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 82 02 c0       	push   0xc00282b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 40 84 02 c0 00 	cmp    BYTE PTR ds:0xc0028440,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 88 3b 02 c0       	mov    ebx,0xc0023b88
c00000bb:	81 eb 84 3b 02 c0    	sub    ebx,0xc0023b84
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 84 3b 02 c0       	mov    esi,0xc0023b84
c00000ca:	a1 44 84 02 c0       	mov    eax,ds:0xc0028444
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 44 84 02 c0       	mov    ds:0xc0028444,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 44 84 02 c0       	mov    eax,ds:0xc0028444
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 82 02 c0       	push   0xc00282b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 40 84 02 c0 01 	mov    BYTE PTR ds:0xc0028440,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 48 84 02 c0       	push   0xc0028448
c000012c:	68 b8 82 02 c0       	push   0xc00282b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 c4 81 01 00       	call   c001849c <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 c4 ca 00 00       	call   c000cdb4 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 a2 81 01 00       	call   c001849c <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 6b 86 01 00       	call   c0018984 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 ae 8c 01 00       	call   c0018fd0 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 90 88 02 c0 	lgdtd  ds:0xc0028890
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 32 e9 00 00       	call   c000ee49 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 60 84 02 c0       	mov    ds:0xc0028460,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 60 84 02 c0    	mov    DWORD PTR ds:0xc0028460,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 60 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028460
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 a0 3b 02 c0 02 	test   BYTE PTR [edx-0x3ffdc460],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 a0 3b 02 c0 01 	test   BYTE PTR [edx-0x3ffdc460],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 a0 3b 02 c0 08 	test   BYTE PTR [edx-0x3ffdc460],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 a0 3b 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc460],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 a0 3b 02 c0 01 	test   BYTE PTR [edx-0x3ffdc460],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 80 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028480
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 80 84 02 c0    	mov    DWORD PTR ds:0xc0028480,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 84 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7b7c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 84 84 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7b7c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 80 84 02 c0    	mov    DWORD PTR ds:0xc0028480,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 ac 84 02 c0    	cmp    DWORD PTR ds:0xc00284ac,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d bc 84 02 c0    	mov    ecx,DWORD PTR ds:0xc00284bc
c0000d6c:	c7 42 0c b4 84 02 c0 	mov    DWORD PTR [edx+0xc],0xc00284b4
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 bc 84 02 c0    	mov    DWORD PTR ds:0xc00284bc,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 80 84 02 c0 02 	test   BYTE PTR ds:0xc0028480,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 80 84 02 c0       	mov    eax,0xc0028480
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 d7 8d 00 00       	call   c0009c24 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 19 8d 00 00       	call   c0009c24 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 03 8d 00 00       	call   c0009c24 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 df 8c 00 00       	call   c0009c24 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 80 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028480
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 80 84 02 c0       	mov    eax,0xc0028480
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 84 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b7c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 84 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b7c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 b4 84 02 c0 	lea    edx,[eax*8-0x3ffd7b4c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 80 84 02 c0       	mov    eax,0xc0028480
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d c0 84 02 c0    	mov    ebx,DWORD PTR ds:0xc00284c0
c00010ee:	81 fb b4 84 02 c0    	cmp    ebx,0xc00284b4
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d b4 84 02 c0       	cmp    eax,0xc00284b4
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d b0 84 02 c0    	cmp    DWORD PTR ds:0xc00284b0,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 bc 84 02 c0       	mov    ds:0xc00284bc,eax
c000112a:	a3 c0 84 02 c0       	mov    ds:0xc00284c0,eax
c000112f:	a3 b0 84 02 c0       	mov    ds:0xc00284b0,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 b4 84 02 c0 	mov    DWORD PTR [eax+0x8],0xc00284b4
c000113d:	c7 40 0c b4 84 02 c0 	mov    DWORD PTR [eax+0xc],0xc00284b4
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 c0 84 02 c0       	mov    ds:0xc00284c0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 b4 84 02 c0 	mov    DWORD PTR [eax+0x8],0xc00284b4
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 78 84 02 c0 	lea    ebp,[edx*4-0x3ffd7b88]
c000118e:	8b 14 95 80 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b80]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 80 84 02 c0 	lea    ecx,[edx*4-0x3ffd7b80]
c00011a9:	8b 14 95 80 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b80]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd b4 87 02 c0 	or     DWORD PTR [edi*4-0x3ffd784c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 b4 84 02 c0 	lea    eax,[eax*8-0x3ffd7b4c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d bc 84 02 c0    	mov    DWORD PTR ds:0xc00284bc,ecx
c0001263:	89 0d c0 84 02 c0    	mov    DWORD PTR ds:0xc00284c0,ecx
c0001269:	c7 41 08 b4 84 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00284b4
c0001270:	c7 41 0c b4 84 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00284b4
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd ac 84 02 c0 	lea    edx,[ecx*8-0x3ffd7b54]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d b4 87 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd784c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d b4 87 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd784c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 ac 84 02 c0 	lea    edx,[eax*4-0x3ffd7b54]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d b4 87 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd784c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d bc 84 02 c0    	mov    DWORD PTR ds:0xc00284bc,edi
c0001336:	89 3d c0 84 02 c0    	mov    DWORD PTR ds:0xc00284c0,edi
c000133c:	c7 47 08 b4 84 02 c0 	mov    DWORD PTR [edi+0x8],0xc00284b4
c0001343:	c7 47 0c b4 84 02 c0 	mov    DWORD PTR [edi+0xc],0xc00284b4
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d b0 84 02 c0    	mov    DWORD PTR ds:0xc00284b0,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 80 84 02 c0       	mov    edx,0xc0028480
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 80 84 02 c0 00 	cmp    DWORD PTR ds:0xc0028480,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 80 84 02 c0       	mov    eax,0xc0028480
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d d4 87 02 c0    	mov    ebx,DWORD PTR ds:0xc00287d4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 d4 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287d4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d d4 87 02 c0    	mov    DWORD PTR ds:0xc00287d4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 ac 84 02 c0    	cmp    DWORD PTR ds:0xc00284ac,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 80 84 02 c0 00 	cmp    DWORD PTR ds:0xc0028480,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 80 84 02 c0       	mov    eax,0xc0028480
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 dc 87 02 c0    	push   DWORD PTR ds:0xc00287dc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 80 84 02 c0 00 	cmp    DWORD PTR ds:0xc0028480,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 80 84 02 c0       	mov    eax,0xc0028480
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 dc 87 02 c0       	mov    eax,ds:0xc00287dc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 80 84 02 c0       	mov    eax,0xc0028480
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d ac 84 02 c0 00 	cmp    DWORD PTR ds:0xc00284ac,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 80 84 02 c0       	mov    eax,0xc0028480
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 84 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b7c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 b4 84 02 c0       	mov    eax,0xc00284b4
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d ac 87 02 c0       	cmp    eax,0xc00287ac
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 e8 87 02 c0       	mov    eax,ds:0xc00287e8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 d0 87 02 c0    	mov    esi,DWORD PTR ds:0xc00287d0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 e4 87 02 c0    	mov    esi,DWORD PTR ds:0xc00287e4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 f4 87 02 c0    	mov    esi,DWORD PTR ds:0xc00287f4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 80 84 02 c0       	mov    eax,0xc0028480
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 a4 3c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc35c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 80 84 02 c0       	mov    eax,ds:0xc0028480
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 80 84 02 c0       	mov    ds:0xc0028480,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d c4 87 02 c0    	mov    DWORD PTR ds:0xc00287c4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d c8 87 02 c0    	mov    DWORD PTR ds:0xc00287c8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d cc 87 02 c0    	mov    DWORD PTR ds:0xc00287cc,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 d4 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287d4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 40 9f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd60c0]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 66 a2 01 00       	jmp    c001bd8c <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 40 9f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd60c0]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 98 a2 01 00       	jmp    c001bdd4 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 40 9f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd60c0]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 c1 a2 01 00       	jmp    c001be1c <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 96 0e 02 00       	call   c0022cd4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 c0 3d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc240]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 c0 3d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc240]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba c0 3c 02 c0       	mov    edx,0xc0023cc0
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba e0 3d 02 c0       	mov    edx,0xc0023de0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 44 6c 02 c0       	mov    edx,0xc0026c44
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ec 3d 02 c0       	mov    edx,0xc0023dec
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba d0 3d 02 c0       	mov    edx,0xc0023dd0
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 20 88 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd77e0]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 00 88 02 c0    	mov    ax,ds:0xc0028800
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 00 88 02 c0    	mov    ds:0xc0028800,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 93 fc 01 00       	call   c0022cd4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 f2 3d 02 c0       	mov    eax,0xc0023df2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 40 3d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc2c0]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 fb 3d 02 c0       	mov    eax,0xc0023dfb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 c0 3d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc240]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 5e e6 01 00       	call   c0022cd4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba d0 3d 02 c0       	mov    edx,0xc0023dd0
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba c0 3c 02 c0       	mov    edx,0xc0023cc0
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba d0 3c 02 c0       	mov    edx,0xc0023cd0
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 20 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77e0]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 20 88 02 c0 	mov    DWORD PTR [edx*4-0x3ffd77e0],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 25 d0 01 00       	call   c0022cd4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 0b d0 01 00       	call   c0022cd4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 17 3d 02 c0       	mov    eax,0xc0023d17
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 10 3d 02 c0       	mov    eax,0xc0023d10
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 a4 bb 01 00       	call   c0022cd4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 20 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77e0]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 00 3d 02 c0       	mov    esi,0xc0023d00
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 18 b5 01 00       	call   c0022cd4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba e0 3d 02 c0       	mov    edx,0xc0023de0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba e0 3c 02 c0       	mov    edx,0xc0023ce0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba f0 3c 02 c0       	mov    edx,0xc0023cf0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 02 3e 02 c0       	mov    edx,0xc0023e02
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 0e 3e 02 c0       	mov    edx,0xc0023e0e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 22 3e 02 c0       	mov    edx,0xc0023e22
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 88 17 00 00       	call   c0009d5b <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 80 17 00 00       	call   c0009d6b <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 40 41 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024140
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 40 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024140
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 40 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc1c0]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 e2 14 00 00       	jmp    c0009d5b <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 fd 14 00 00       	jmp    c0009d7b <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000888b:	48                   	dec    eax
c000888c:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c00088a2:	48                   	dec    eax
c00088a3:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c00088b3:	ff 05 a4 9d 02 c0    	inc    DWORD PTR ds:0xc0029da4
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c00088c2:	48                   	dec    eax
c00088c3:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d a0 9d 02 c0 00 	cmp    DWORD PTR ds:0xc0029da0,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c00088dd:	e8 0e 03 01 00       	call   c0018bf0 <schedule()>
c00088e2:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c00088e7:	48                   	dec    eax
c00088e8:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 b0 89 02 c0       	mov    eax,ds:0xc00289b0
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 40 42 02 c0       	push   0xc0024240
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 88 88 02 c0       	mov    eax,0xc0028888
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 49 42 02 c0       	push   0xc0024249
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 d4 2c 02 c0       	mov    eax,0xc0022cd4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 53 42 02 c0       	push   0xc0024253
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 08 2a 02 c0       	mov    eax,0xc0022a08
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 5c 42 02 c0       	push   0xc002425c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 d4 2d 02 c0       	mov    eax,0xc0022dd4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 66 42 02 c0       	push   0xc0024266
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 54 2b 02 c0       	mov    eax,0xc0022b54
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 6f 42 02 c0       	push   0xc002426f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 8c 88 02 c0       	mov    eax,0xc002888c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 7c 42 02 c0       	push   0xc002427c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 8d 88 02 c0       	mov    eax,0xc002888d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 ff 5c 00 00       	call   c000e744 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 89 42 02 c0       	push   0xc0024289
c0008a75:	e8 3b 13 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 a0 42 02 c0 	mov    DWORD PTR [esp],0xc00242a0
c0008a82:	e8 2e 13 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 c8 12 00 00       	call   c0009d5b <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c0008aa2:	68 b9 42 02 c0       	push   0xc00242b9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 1d fd 00 00       	call   c00187cc <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 53 97 00 c0       	push   0xc0009753
c0008abe:	53                   	push   ebx
c0008abf:	e8 10 ff 00 00       	call   c00189d4 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 18 94 01 c0       	push   0xc0019418
c0008acd:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c0008ad3:	e8 fc fe 00 00       	call   c00189d4 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 88 9d 02 c0       	mov    ds:0xc0029d88,eax
c0008ae0:	68 ac 45 02 c0       	push   0xc00245ac
c0008ae5:	c6 05 8d 88 02 c0 01 	mov    BYTE PTR ds:0xc002888d,0x1
c0008aec:	e8 c4 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 fd 0c 01 00       	call   c00197f3 <Vm::initialise8086()>
c0008af6:	e8 e3 48 00 00       	call   c000d3de <Fs::initVFS()>
c0008afb:	c7 04 24 c6 42 02 c0 	mov    DWORD PTR [esp],0xc00242c6
c0008b02:	e8 ae 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 ac 45 02 c0       	push   0xc00245ac
c0008b26:	e8 8a 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 0a e5 00 00       	call   c001703a <Sys::loadSyscalls()>
c0008b30:	e8 a7 c3 00 00       	call   c0014edc <Krnl::loadSystemEnv()>
c0008b35:	e8 f9 c7 00 00       	call   c0015333 <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 e0 42 02 c0       	push   0xc00242e0
c0008b44:	68 e9 42 02 c0       	push   0xc00242e9
c0008b49:	e8 af d2 00 00       	call   c0015dfd <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 a6 54 00 00       	call   c000dffc <User::loadClockSettings(int)>
c0008b56:	c7 04 24 d0 45 02 c0 	mov    DWORD PTR [esp],0xc00245d0
c0008b5d:	e8 53 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 91 5b 00 00       	call   c000e704 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 f1 42 02 c0 	mov    DWORD PTR [esp],0xc00242f1
c0008b7a:	e8 36 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 c0 be 00 00       	call   c0014a44 <Krnl::startCPUs()>
c0008b84:	c7 04 24 0b 43 02 c0 	mov    DWORD PTR [esp],0xc002430b
c0008b8b:	e8 25 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d 88 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028888
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 1c 43 02 c0       	push   0xc002431c
c0008b9f:	e8 66 f6 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 8e f8 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 2e 02 01 00       	call   c0018de8 <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 38 43 02 c0       	push   0xc0024338
c0008bcf:	50                   	push   eax
c0008bd0:	e8 e9 5b 00 00       	call   c000e7be <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba 80 46 02 c0       	mov    edx,0xc0024680
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 a1 88 02 c0 04 	test   BYTE PTR ds:0xc00288a1,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 2d 9c 01 00       	call   c0022996 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 66 a8 00 00       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 3f a8 00 00       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 1d a8 00 00       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 fb a7 00 00       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 a0 88 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00288a0,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 09 a7 00 00       	call   c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 e4 a6 00 00       	call   c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 97 9a 01 00       	call   c0022950 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 54 9a 01 00       	call   c0022930 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 00 a7 00 00       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	53                   	push   ebx
c0008f29:	83 ec 14             	sub    esp,0x14
c0008f2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f30:	68 48 43 02 c0       	push   0xc0024348
c0008f35:	e8 0d 41 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008f3a:	83 c4 10             	add    esp,0x10
c0008f3d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f44:	0f 85 73 02 00 00    	jne    c00091bd <Computer::displayFeatures()+0x295>
c0008f4a:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0008f4f:	83 ec 08             	sub    esp,0x8
c0008f52:	50                   	push   eax
c0008f53:	68 5b 43 02 c0       	push   0xc002435b
c0008f58:	e8 ea 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008f5d:	83 c4 10             	add    esp,0x10
c0008f60:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f67:	0f 85 8c 02 00 00    	jne    c00091f9 <Computer::displayFeatures()+0x2d1>
c0008f6d:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0008f72:	83 ec 08             	sub    esp,0x8
c0008f75:	50                   	push   eax
c0008f76:	68 6c 43 02 c0       	push   0xc002436c
c0008f7b:	e8 c7 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f8a:	0f 85 5f 02 00 00    	jne    c00091ef <Computer::displayFeatures()+0x2c7>
c0008f90:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0008f95:	83 ec 08             	sub    esp,0x8
c0008f98:	50                   	push   eax
c0008f99:	68 7d 43 02 c0       	push   0xc002437d
c0008f9e:	e8 a4 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008fa3:	83 c4 10             	add    esp,0x10
c0008fa6:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fad:	0f 85 32 02 00 00    	jne    c00091e5 <Computer::displayFeatures()+0x2bd>
c0008fb3:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0008fb8:	83 ec 08             	sub    esp,0x8
c0008fbb:	50                   	push   eax
c0008fbc:	68 8e 43 02 c0       	push   0xc002438e
c0008fc1:	e8 81 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fd0:	0f 85 05 02 00 00    	jne    c00091db <Computer::displayFeatures()+0x2b3>
c0008fd6:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0008fdb:	83 ec 08             	sub    esp,0x8
c0008fde:	50                   	push   eax
c0008fdf:	68 9f 43 02 c0       	push   0xc002439f
c0008fe4:	e8 5e 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008fe9:	83 c4 10             	add    esp,0x10
c0008fec:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008ff3:	0f 85 d8 01 00 00    	jne    c00091d1 <Computer::displayFeatures()+0x2a9>
c0008ff9:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0008ffe:	83 ec 08             	sub    esp,0x8
c0009001:	50                   	push   eax
c0009002:	68 b0 43 02 c0       	push   0xc00243b0
c0009007:	e8 3b 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000900c:	83 c4 10             	add    esp,0x10
c000900f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c0009016:	0f 85 ab 01 00 00    	jne    c00091c7 <Computer::displayFeatures()+0x29f>
c000901c:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0009021:	83 ec 08             	sub    esp,0x8
c0009024:	50                   	push   eax
c0009025:	68 c1 43 02 c0       	push   0xc00243c1
c000902a:	e8 18 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000902f:	83 c4 10             	add    esp,0x10
c0009032:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009039:	0f 88 1b 02 00 00    	js     c000925a <Computer::displayFeatures()+0x332>
c000903f:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0009044:	83 ec 08             	sub    esp,0x8
c0009047:	50                   	push   eax
c0009048:	68 d2 43 02 c0       	push   0xc00243d2
c000904d:	e8 f5 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009052:	83 c4 10             	add    esp,0x10
c0009055:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000905c:	0f 85 a1 01 00 00    	jne    c0009203 <Computer::displayFeatures()+0x2db>
c0009062:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0009067:	83 ec 08             	sub    esp,0x8
c000906a:	50                   	push   eax
c000906b:	68 e3 43 02 c0       	push   0xc00243e3
c0009070:	e8 d2 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009075:	83 c4 10             	add    esp,0x10
c0009078:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000907f:	0f 85 cb 01 00 00    	jne    c0009250 <Computer::displayFeatures()+0x328>
c0009085:	b8 45 43 02 c0       	mov    eax,0xc0024345
c000908a:	83 ec 08             	sub    esp,0x8
c000908d:	50                   	push   eax
c000908e:	68 f4 43 02 c0       	push   0xc00243f4
c0009093:	e8 af 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009098:	83 c4 10             	add    esp,0x10
c000909b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c00090a2:	0f 85 9e 01 00 00    	jne    c0009246 <Computer::displayFeatures()+0x31e>
c00090a8:	b8 45 43 02 c0       	mov    eax,0xc0024345
c00090ad:	83 ec 08             	sub    esp,0x8
c00090b0:	50                   	push   eax
c00090b1:	68 05 44 02 c0       	push   0xc0024405
c00090b6:	e8 8c 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00090bb:	83 c4 10             	add    esp,0x10
c00090be:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090c5:	0f 85 71 01 00 00    	jne    c000923c <Computer::displayFeatures()+0x314>
c00090cb:	b8 45 43 02 c0       	mov    eax,0xc0024345
c00090d0:	83 ec 08             	sub    esp,0x8
c00090d3:	50                   	push   eax
c00090d4:	68 16 44 02 c0       	push   0xc0024416
c00090d9:	e8 69 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00090de:	83 c4 10             	add    esp,0x10
c00090e1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e8:	0f 85 44 01 00 00    	jne    c0009232 <Computer::displayFeatures()+0x30a>
c00090ee:	b8 45 43 02 c0       	mov    eax,0xc0024345
c00090f3:	83 ec 08             	sub    esp,0x8
c00090f6:	50                   	push   eax
c00090f7:	68 27 44 02 c0       	push   0xc0024427
c00090fc:	e8 46 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000910b:	0f 85 17 01 00 00    	jne    c0009228 <Computer::displayFeatures()+0x300>
c0009111:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0009116:	83 ec 08             	sub    esp,0x8
c0009119:	50                   	push   eax
c000911a:	68 38 44 02 c0       	push   0xc0024438
c000911f:	e8 23 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009124:	83 c4 10             	add    esp,0x10
c0009127:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000912e:	0f 85 ea 00 00 00    	jne    c000921e <Computer::displayFeatures()+0x2f6>
c0009134:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0009139:	83 ec 08             	sub    esp,0x8
c000913c:	50                   	push   eax
c000913d:	68 49 44 02 c0       	push   0xc0024449
c0009142:	e8 00 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009147:	83 c4 10             	add    esp,0x10
c000914a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009151:	0f 88 0d 01 00 00    	js     c0009264 <Computer::displayFeatures()+0x33c>
c0009157:	b8 45 43 02 c0       	mov    eax,0xc0024345
c000915c:	83 ec 08             	sub    esp,0x8
c000915f:	50                   	push   eax
c0009160:	68 5a 44 02 c0       	push   0xc002445a
c0009165:	e8 dd 3e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000916a:	83 c4 10             	add    esp,0x10
c000916d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c0009174:	0f 85 9a 00 00 00    	jne    c0009214 <Computer::displayFeatures()+0x2ec>
c000917a:	b8 45 43 02 c0       	mov    eax,0xc0024345
c000917f:	83 ec 08             	sub    esp,0x8
c0009182:	50                   	push   eax
c0009183:	68 6b 44 02 c0       	push   0xc002446b
c0009188:	e8 ba 3e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000918d:	83 c4 10             	add    esp,0x10
c0009190:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c0009197:	75 74                	jne    c000920d <Computer::displayFeatures()+0x2e5>
c0009199:	b8 45 43 02 c0       	mov    eax,0xc0024345
c000919e:	83 ec 08             	sub    esp,0x8
c00091a1:	50                   	push   eax
c00091a2:	68 7c 44 02 c0       	push   0xc002447c
c00091a7:	e8 9b 3e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00091ac:	c7 44 24 20 fb 63 02 c0 	mov    DWORD PTR [esp+0x20],0xc00263fb
c00091b4:	83 c4 18             	add    esp,0x18
c00091b7:	5b                   	pop    ebx
c00091b8:	e9 8a 3e 00 00       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>
c00091bd:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00091c2:	e9 88 fd ff ff       	jmp    c0008f4f <Computer::displayFeatures()+0x27>
c00091c7:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00091cc:	e9 50 fe ff ff       	jmp    c0009021 <Computer::displayFeatures()+0xf9>
c00091d1:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00091d6:	e9 23 fe ff ff       	jmp    c0008ffe <Computer::displayFeatures()+0xd6>
c00091db:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00091e0:	e9 f6 fd ff ff       	jmp    c0008fdb <Computer::displayFeatures()+0xb3>
c00091e5:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00091ea:	e9 c9 fd ff ff       	jmp    c0008fb8 <Computer::displayFeatures()+0x90>
c00091ef:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00091f4:	e9 9c fd ff ff       	jmp    c0008f95 <Computer::displayFeatures()+0x6d>
c00091f9:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00091fe:	e9 6f fd ff ff       	jmp    c0008f72 <Computer::displayFeatures()+0x4a>
c0009203:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0009208:	e9 5a fe ff ff       	jmp    c0009067 <Computer::displayFeatures()+0x13f>
c000920d:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0009212:	eb 8a                	jmp    c000919e <Computer::displayFeatures()+0x276>
c0009214:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0009219:	e9 61 ff ff ff       	jmp    c000917f <Computer::displayFeatures()+0x257>
c000921e:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0009223:	e9 11 ff ff ff       	jmp    c0009139 <Computer::displayFeatures()+0x211>
c0009228:	b8 41 43 02 c0       	mov    eax,0xc0024341
c000922d:	e9 e4 fe ff ff       	jmp    c0009116 <Computer::displayFeatures()+0x1ee>
c0009232:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0009237:	e9 b7 fe ff ff       	jmp    c00090f3 <Computer::displayFeatures()+0x1cb>
c000923c:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0009241:	e9 8a fe ff ff       	jmp    c00090d0 <Computer::displayFeatures()+0x1a8>
c0009246:	b8 41 43 02 c0       	mov    eax,0xc0024341
c000924b:	e9 5d fe ff ff       	jmp    c00090ad <Computer::displayFeatures()+0x185>
c0009250:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0009255:	e9 30 fe ff ff       	jmp    c000908a <Computer::displayFeatures()+0x162>
c000925a:	b8 41 43 02 c0       	mov    eax,0xc0024341
c000925f:	e9 e0 fd ff ff       	jmp    c0009044 <Computer::displayFeatures()+0x11c>
c0009264:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0009269:	e9 ee fe ff ff       	jmp    c000915c <Computer::displayFeatures()+0x234>

c000926e <Computer::rdmsr(unsigned int)>:
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009275:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000927c:	74 0a                	je     c0009288 <Computer::rdmsr(unsigned int)+0x1a>
c000927e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009282:	0f 32                	rdmsr  
c0009284:	83 c4 0c             	add    esp,0xc
c0009287:	c3                   	ret    
c0009288:	83 ec 0c             	sub    esp,0xc
c000928b:	68 8d 44 02 c0       	push   0xc002448d
c0009290:	e8 50 bd 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c0009295:	83 c4 10             	add    esp,0x10
c0009298:	eb e4                	jmp    c000927e <Computer::rdmsr(unsigned int)+0x10>

c000929a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000929a:	57                   	push   edi
c000929b:	56                   	push   esi
c000929c:	52                   	push   edx
c000929d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00092a5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092b0:	74 0e                	je     c00092c0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092b6:	89 f0                	mov    eax,esi
c00092b8:	89 fa                	mov    edx,edi
c00092ba:	0f 30                	wrmsr  
c00092bc:	58                   	pop    eax
c00092bd:	5e                   	pop    esi
c00092be:	5f                   	pop    edi
c00092bf:	c3                   	ret    
c00092c0:	83 ec 0c             	sub    esp,0xc
c00092c3:	68 93 44 02 c0       	push   0xc0024493
c00092c8:	e8 18 bd 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	eb e0                	jmp    c00092b2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092d2 <Computer::shutdown()>:
c00092d2:	83 ec 0c             	sub    esp,0xc
c00092d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092db:	6a 00                	push   0x0
c00092dd:	6a 00                	push   0x0
c00092df:	6a 00                	push   0x0
c00092e1:	50                   	push   eax
c00092e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092e5:	83 c4 1c             	add    esp,0x1c
c00092e8:	c3                   	ret    
c00092e9:	90                   	nop

c00092ea <Computer::restart()>:
c00092ea:	83 ec 0c             	sub    esp,0xc
c00092ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092f3:	6a 00                	push   0x0
c00092f5:	6a 00                	push   0x0
c00092f7:	6a 01                	push   0x1
c00092f9:	50                   	push   eax
c00092fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092fd:	83 c4 1c             	add    esp,0x1c
c0009300:	c3                   	ret    
c0009301:	90                   	nop

c0009302 <Computer::sleep()>:
c0009302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009306:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000930c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009310:	e9 c3 98 00 00       	jmp    c0012bd8 <ACPI::sleep()>
c0009315:	90                   	nop

c0009316 <Computer::nmiEnabled()>:
c0009316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009320:	c3                   	ret    
c0009321:	90                   	nop

c0009322 <Computer::readCMOS(unsigned char)>:
c0009322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009326:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000932d:	19 c0                	sbb    eax,eax
c000932f:	83 e0 80             	and    eax,0xffffff80
c0009332:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009336:	e6 70                	out    0x70,al
c0009338:	e4 71                	in     al,0x71
c000933a:	c3                   	ret    
c000933b:	90                   	nop

c000933c <Computer::enableNMI(bool)>:
c000933c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009344:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000934a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009352:	eb ce                	jmp    c0009322 <Computer::readCMOS(unsigned char)>

c0009354 <Computer::open(int, int, void*)>:
c0009354:	56                   	push   esi
c0009355:	53                   	push   ebx
c0009356:	83 ec 10             	sub    esp,0x10
c0009359:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000935d:	68 f0 45 02 c0       	push   0xc00245f0
c0009362:	e8 4e 0a 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009367:	58                   	pop    eax
c0009368:	f6 05 a0 88 02 c0 04 	test   BYTE PTR ds:0xc00288a0,0x4
c000936f:	5a                   	pop    edx
c0009370:	0f 94 05 60 7c 02 c0 	sete   BYTE PTR ds:0xc0027c60
c0009377:	68 58 01 00 00       	push   0x158
c000937c:	68 99 44 02 c0       	push   0xc0024499
c0009381:	e8 c1 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009386:	59                   	pop    ecx
c0009387:	5e                   	pop    esi
c0009388:	68 14 01 00 00       	push   0x114
c000938d:	68 af 44 02 c0       	push   0xc00244af
c0009392:	e8 b0 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009397:	58                   	pop    eax
c0009398:	5a                   	pop    edx
c0009399:	6a 14                	push   0x14
c000939b:	68 c3 44 02 c0       	push   0xc00244c3
c00093a0:	e8 a2 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093a5:	59                   	pop    ecx
c00093a6:	5e                   	pop    esi
c00093a7:	68 1f 07 00 00       	push   0x71f
c00093ac:	68 d6 44 02 c0       	push   0xc00244d6
c00093b1:	e8 91 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093b6:	58                   	pop    eax
c00093b7:	5a                   	pop    edx
c00093b8:	6a 5f                	push   0x5f
c00093ba:	68 ed 44 02 c0       	push   0xc00244ed
c00093bf:	e8 83 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093c4:	c7 04 24 03 45 02 c0 	mov    DWORD PTR [esp],0xc0024503
c00093cb:	e8 77 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093d0:	c7 04 24 15 45 02 c0 	mov    DWORD PTR [esp],0xc0024515
c00093d7:	e8 d9 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00093dc:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093e3:	e8 73 09 00 00       	call   c0009d5b <malloc>
c00093e8:	89 c6                	mov    esi,eax
c00093ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00093ed:	e8 9e 90 00 00       	call   c0012490 <ACPI::ACPI()>
c00093f2:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00093f8:	c7 04 24 2f 45 02 c0 	mov    DWORD PTR [esp],0xc002452f
c00093ff:	e8 b1 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009404:	59                   	pop    ecx
c0009405:	5e                   	pop    esi
c0009406:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000940c:	53                   	push   ebx
c000940d:	e8 a8 51 00 00       	call   c000e5ba <Device::addChild(Device*)>
c0009412:	c7 04 24 14 46 02 c0 	mov    DWORD PTR [esp],0xc0024614
c0009419:	e8 97 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000941e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009421:	e8 f8 f8 ff ff       	call   c0008d1e <Computer::detectFeatures()>
c0009426:	c7 04 24 34 46 02 c0 	mov    DWORD PTR [esp],0xc0024634
c000942d:	e8 83 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009432:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009435:	e8 ee fa ff ff       	call   c0008f28 <Computer::displayFeatures()>
c000943a:	c7 04 24 49 45 02 c0 	mov    DWORD PTR [esp],0xc0024549
c0009441:	e8 6f 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009446:	58                   	pop    eax
c0009447:	5a                   	pop    edx
c0009448:	6a 01                	push   0x1
c000944a:	53                   	push   ebx
c000944b:	e8 ec fe ff ff       	call   c000933c <Computer::enableNMI(bool)>
c0009450:	c7 04 24 f1 42 02 c0 	mov    DWORD PTR [esp],0xc00242f1
c0009457:	e8 59 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000945c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009463:	e8 f3 08 00 00       	call   c0009d5b <malloc>
c0009468:	89 04 24             	mov    DWORD PTR [esp],eax
c000946b:	89 c6                	mov    esi,eax
c000946d:	e8 50 a2 00 00       	call   c00136c2 <CPU::CPU()>
c0009472:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009478:	59                   	pop    ecx
c0009479:	58                   	pop    eax
c000947a:	56                   	push   esi
c000947b:	53                   	push   ebx
c000947c:	e8 39 51 00 00       	call   c000e5ba <Device::addChild(Device*)>
c0009481:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009487:	8b 10                	mov    edx,DWORD PTR [eax]
c0009489:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000948d:	6a 00                	push   0x0
c000948f:	6a 00                	push   0x0
c0009491:	50                   	push   eax
c0009492:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009495:	83 c4 14             	add    esp,0x14
c0009498:	68 54 46 02 c0       	push   0xc0024654
c000949d:	e8 13 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00094a2:	e8 af 56 00 00       	call   c000eb56 <setupFPU()>
c00094a7:	83 c4 10             	add    esp,0x10
c00094aa:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094b0:	85 c0                	test   eax,eax
c00094b2:	74 1f                	je     c00094d3 <Computer::open(int, int, void*)+0x17f>
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	50                   	push   eax
c00094b8:	53                   	push   ebx
c00094b9:	e8 fc 50 00 00       	call   c000e5ba <Device::addChild(Device*)>
c00094be:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00094c6:	6a 00                	push   0x0
c00094c8:	6a 00                	push   0x0
c00094ca:	6a 00                	push   0x0
c00094cc:	50                   	push   eax
c00094cd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094d0:	83 c4 20             	add    esp,0x20
c00094d3:	83 ec 0c             	sub    esp,0xc
c00094d6:	68 5a 45 02 c0       	push   0xc002455a
c00094db:	e8 d5 08 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00094e0:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c00094e7:	e8 fc f5 00 00       	call   c0018ae8 <setupMultitasking(void (*)())>
c00094ec:	83 c4 14             	add    esp,0x14
c00094ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00094f4:	5b                   	pop    ebx
c00094f5:	5e                   	pop    esi
c00094f6:	c3                   	ret    
c00094f7:	90                   	nop

c00094f8 <Computer::disableNMI()>:
c00094f8:	6a 00                	push   0x0
c00094fa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00094fe:	e8 39 fe ff ff       	call   c000933c <Computer::enableNMI(bool)>
c0009503:	58                   	pop    eax
c0009504:	5a                   	pop    edx
c0009505:	c3                   	ret    

c0009506 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009511:	19 c0                	sbb    eax,eax
c0009513:	83 e0 80             	and    eax,0xffffff80
c0009516:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000951a:	e6 70                	out    0x70,al
c000951c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009520:	e6 71                	out    0x71,al
c0009522:	c3                   	ret    
c0009523:	90                   	nop

c0009524 <Computer::handleNMI()>:
c0009524:	56                   	push   esi
c0009525:	53                   	push   ebx
c0009526:	83 ec 10             	sub    esp,0x10
c0009529:	e4 92                	in     al,0x92
c000952b:	89 c6                	mov    esi,eax
c000952d:	e4 61                	in     al,0x61
c000952f:	68 75 45 02 c0       	push   0xc0024575
c0009534:	88 c3                	mov    bl,al
c0009536:	e8 0c 3b 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000953b:	83 c4 10             	add    esp,0x10
c000953e:	83 e6 10             	and    esi,0x10
c0009541:	75 0d                	jne    c0009550 <Computer::handleNMI()+0x2c>
c0009543:	f6 c3 40             	test   bl,0x40
c0009546:	75 1d                	jne    c0009565 <Computer::handleNMI()+0x41>
c0009548:	84 db                	test   bl,bl
c000954a:	78 2d                	js     c0009579 <Computer::handleNMI()+0x55>
c000954c:	58                   	pop    eax
c000954d:	5b                   	pop    ebx
c000954e:	5e                   	pop    esi
c000954f:	c3                   	ret    
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 86 45 02 c0       	push   0xc0024586
c0009558:	e8 88 ba 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	f6 c3 40             	test   bl,0x40
c0009563:	74 e3                	je     c0009548 <Computer::handleNMI()+0x24>
c0009565:	83 ec 0c             	sub    esp,0xc
c0009568:	68 93 45 02 c0       	push   0xc0024593
c000956d:	e8 73 ba 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	84 db                	test   bl,bl
c0009577:	79 d3                	jns    c000954c <Computer::handleNMI()+0x28>
c0009579:	c7 44 24 10 9d 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc002459d
c0009581:	5a                   	pop    edx
c0009582:	5b                   	pop    ebx
c0009583:	5e                   	pop    esi
c0009584:	e9 5c ba 00 00       	jmp    c0014fe5 <Krnl::panic(char const*)>
c0009589:	90                   	nop

c000958a <Computer::setDiskActivityLight(int, bool)>:
c000958a:	56                   	push   esi
c000958b:	53                   	push   ebx
c000958c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009590:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009595:	77 1b                	ja     c00095b2 <Computer::setDiskActivityLight(int, bool)+0x28>
c0009597:	e4 92                	in     al,0x92
c0009599:	bb 40 00 00 00       	mov    ebx,0x40
c000959e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00095a2:	89 da                	mov    edx,ebx
c00095a4:	d3 e2                	shl    edx,cl
c00095a6:	89 f1                	mov    ecx,esi
c00095a8:	f7 d2                	not    edx
c00095aa:	d3 e3                	shl    ebx,cl
c00095ac:	21 d0                	and    eax,edx
c00095ae:	09 d8                	or     eax,ebx
c00095b0:	e6 92                	out    0x92,al
c00095b2:	5b                   	pop    ebx
c00095b3:	5e                   	pop    esi
c00095b4:	c3                   	ret    
c00095b5:	90                   	nop

c00095b6 <GDTEntry::setBase(unsigned int)>:
c00095b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095be:	89 c1                	mov    ecx,eax
c00095c0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095c4:	c1 e9 10             	shr    ecx,0x10
c00095c7:	c1 e8 18             	shr    eax,0x18
c00095ca:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095cd:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095d0:	c3                   	ret    
c00095d1:	90                   	nop

c00095d2 <GDTEntry::setLimit(unsigned int)>:
c00095d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095da:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095dd:	66 89 01             	mov    WORD PTR [ecx],ax
c00095e0:	83 e2 f0             	and    edx,0xfffffff0
c00095e3:	c1 e8 10             	shr    eax,0x10
c00095e6:	83 e0 0f             	and    eax,0xf
c00095e9:	09 d0                	or     eax,edx
c00095eb:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00095ee:	c3                   	ret    
c00095ef:	90                   	nop

c00095f0 <GDT::GDT()>:
c00095f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00095fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009604:	90                   	nop
c0009605:	c3                   	ret    

c0009606 <GDT::addEntry(GDTEntry)>:
c0009606:	53                   	push   ebx
c0009607:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000960b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000960f:	8b 02                	mov    eax,DWORD PTR [edx]
c0009611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009615:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009619:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000961d:	8d 48 01             	lea    ecx,[eax+0x1]
c0009620:	c1 e0 03             	shl    eax,0x3
c0009623:	89 0a                	mov    DWORD PTR [edx],ecx
c0009625:	5b                   	pop    ebx
c0009626:	c3                   	ret    
c0009627:	90                   	nop

c0009628 <GDT::getNumberOfEntries()>:
c0009628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000962c:	8b 00                	mov    eax,DWORD PTR [eax]
c000962e:	c3                   	ret    
c000962f:	90                   	nop

c0009630 <GDT::flush()>:
c0009630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009634:	8b 10                	mov    edx,DWORD PTR [eax]
c0009636:	83 c0 04             	add    eax,0x4
c0009639:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009640:	a3 92 88 02 c0       	mov    ds:0xc0028892,eax
c0009645:	66 89 15 90 88 02 c0 	mov    WORD PTR ds:0xc0028890,dx
c000964c:	e9 34 6d ff ff       	jmp    c0000385 <loadGDT>
c0009651:	90                   	nop

c0009652 <GDT::setup()>:
c0009652:	55                   	push   ebp
c0009653:	57                   	push   edi
c0009654:	56                   	push   esi
c0009655:	53                   	push   ebx
c0009656:	83 ec 3c             	sub    esp,0x3c
c0009659:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000965d:	6a 00                	push   0x0
c000965f:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009663:	53                   	push   ebx
c0009664:	e8 4d ff ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c0009669:	6a 00                	push   0x0
c000966b:	53                   	push   ebx
c000966c:	e8 61 ff ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c0009671:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c0009679:	6a 00                	push   0x0
c000967b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000967f:	53                   	push   ebx
c0009680:	e8 31 ff ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c0009685:	68 ff ff ff 00       	push   0xffffff
c000968a:	53                   	push   ebx
c000968b:	e8 42 ff ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c0009690:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009694:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009699:	0d 00 9a c0 00       	or     eax,0xc09a00
c000969e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00096a2:	83 c4 20             	add    esp,0x20
c00096a5:	6a 00                	push   0x0
c00096a7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00096ab:	53                   	push   ebx
c00096ac:	e8 05 ff ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c00096b1:	68 ff ff ff 00       	push   0xffffff
c00096b6:	53                   	push   ebx
c00096b7:	e8 16 ff ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c00096bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00096c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00096c4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096c8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00096cc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00096d0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096d5:	0d 00 92 c0 00       	or     eax,0xc09200
c00096da:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00096de:	89 d8                	mov    eax,ebx
c00096e0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00096e4:	80 cc 60             	or     ah,0x60
c00096e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096eb:	83 c4 0c             	add    esp,0xc
c00096ee:	89 f8                	mov    eax,edi
c00096f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096f4:	80 cc 60             	or     ah,0x60
c00096f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096fb:	89 c7                	mov    edi,eax
c00096fd:	55                   	push   ebp
c00096fe:	e8 03 ff ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009703:	83 c4 0c             	add    esp,0xc
c0009706:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000970a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000970e:	55                   	push   ebp
c000970f:	e8 f2 fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009714:	83 c4 0c             	add    esp,0xc
c0009717:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000971b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000971f:	55                   	push   ebp
c0009720:	e8 e1 fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009725:	83 c4 0c             	add    esp,0xc
c0009728:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000972c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009730:	53                   	push   ebx
c0009731:	51                   	push   ecx
c0009732:	55                   	push   ebp
c0009733:	e8 ce fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009738:	83 c4 0c             	add    esp,0xc
c000973b:	57                   	push   edi
c000973c:	56                   	push   esi
c000973d:	55                   	push   ebp
c000973e:	e8 c3 fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009743:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009746:	e8 e5 fe ff ff       	call   c0009630 <GDT::flush()>
c000974b:	83 c4 4c             	add    esp,0x4c
c000974e:	5b                   	pop    ebx
c000974f:	5e                   	pop    esi
c0009750:	5f                   	pop    edi
c0009751:	5d                   	pop    ebp
c0009752:	c3                   	ret    

c0009753 <idleFunction(void*)>:
c0009753:	53                   	push   ebx
c0009754:	83 ec 08             	sub    esp,0x8
c0009757:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000975c:	48                   	dec    eax
c000975d:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0009762:	75 01                	jne    c0009765 <idleFunction(void*)+0x12>
c0009764:	fb                   	sti    
c0009765:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000976a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009770:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009777:	74 3c                	je     c00097b5 <idleFunction(void*)+0x62>
c0009779:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009780:	74 33                	je     c00097b5 <idleFunction(void*)+0x62>
c0009782:	31 db                	xor    ebx,ebx
c0009784:	52                   	push   edx
c0009785:	52                   	push   edx
c0009786:	68 e1 00 00 00       	push   0xe1
c000978b:	50                   	push   eax
c000978c:	e8 dd fa ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0009791:	53                   	push   ebx
c0009792:	83 e0 02             	and    eax,0x2
c0009795:	50                   	push   eax
c0009796:	68 e1 00 00 00       	push   0xe1
c000979b:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c00097a1:	e8 f4 fa ff ff       	call   c000929a <Computer::wrmsr(unsigned int, unsigned long long)>
c00097a6:	83 c4 20             	add    esp,0x20
c00097a9:	e8 06 6a ff ff       	call   c00001b4 <doTPAUSE>
c00097ae:	e8 a3 97 01 00       	call   c0022f56 <idleCommon()>
c00097b3:	eb f4                	jmp    c00097a9 <idleFunction(void*)+0x56>
c00097b5:	fb                   	sti    
c00097b6:	f4                   	hlt    
c00097b7:	e8 9a 97 01 00       	call   c0022f56 <idleCommon()>
c00097bc:	eb f7                	jmp    c00097b5 <idleFunction(void*)+0x62>
c00097be:	66 90                	xchg   ax,ax

c00097c0 <IDTEntry::IDTEntry(bool)>:
c00097c0:	83 ec 04             	sub    esp,0x4
c00097c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097c7:	88 04 24             	mov    BYTE PTR [esp],al
c00097ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097ce:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00097d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097d8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00097dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097e0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097e3:	83 e2 f0             	and    edx,0xfffffff0
c00097e6:	83 ca 0e             	or     edx,0xe
c00097e9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097f3:	83 e2 ef             	and    edx,0xffffffef
c00097f6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097f9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00097fd:	74 05                	je     c0009804 <IDTEntry::IDTEntry(bool)+0x44>
c00097ff:	b2 03                	mov    dl,0x3
c0009801:	eb 05                	jmp    c0009808 <IDTEntry::IDTEntry(bool)+0x48>
c0009803:	90                   	nop
c0009804:	b2 00                	mov    dl,0x0
c0009806:	66 90                	xchg   ax,ax
c0009808:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000980c:	83 e2 03             	and    edx,0x3
c000980f:	88 d1                	mov    cl,dl
c0009811:	c1 e1 05             	shl    ecx,0x5
c0009814:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009817:	83 e2 9f             	and    edx,0xffffff9f
c000981a:	09 ca                	or     edx,ecx
c000981c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000981f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009823:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009826:	83 ca 80             	or     edx,0xffffff80
c0009829:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000982c:	90                   	nop
c000982d:	83 c4 04             	add    esp,0x4
c0009830:	c3                   	ret    
c0009831:	90                   	nop

c0009832 <IDTEntry::setOffset(unsigned int)>:
c0009832:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000983a:	66 89 02             	mov    WORD PTR [edx],ax
c000983d:	c1 e8 10             	shr    eax,0x10
c0009840:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009844:	c3                   	ret    
c0009845:	90                   	nop
c0009846:	66 90                	xchg   ax,ax

c0009848 <IDT::IDT()>:
c0009848:	90                   	nop
c0009849:	c3                   	ret    

c000984a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000984a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000984e:	83 c0 30             	add    eax,0x30
c0009851:	c3                   	ret    

c0009852 <IDT::addEntry(IDTEntry, int)>:
c0009852:	53                   	push   ebx
c0009853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009857:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000985b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000985f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009863:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0009866:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000986a:	5b                   	pop    ebx
c000986b:	c3                   	ret    

c000986c <IDT::addEntry(int, void (*)(), bool)>:
c000986c:	53                   	push   ebx
c000986d:	83 ec 10             	sub    esp,0x10
c0009870:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009875:	50                   	push   eax
c0009876:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000987a:	53                   	push   ebx
c000987b:	e8 40 ff ff ff       	call   c00097c0 <IDTEntry::IDTEntry(bool)>
c0009880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009884:	53                   	push   ebx
c0009885:	e8 a8 ff ff ff       	call   c0009832 <IDTEntry::setOffset(unsigned int)>
c000988a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000988e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009892:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009896:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000989a:	e8 b3 ff ff ff       	call   c0009852 <IDT::addEntry(IDTEntry, int)>
c000989f:	83 c4 30             	add    esp,0x30
c00098a2:	5b                   	pop    ebx
c00098a3:	c3                   	ret    

c00098a4 <IDT::flush()>:
c00098a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a8:	66 c7 05 98 88 02 c0 ff 07 	mov    WORD PTR ds:0xc0028898,0x7ff
c00098b1:	a3 9a 88 02 c0       	mov    ds:0xc002889a,eax
c00098b6:	0f 01 1d 98 88 02 c0 	lidtd  ds:0xc0028898
c00098bd:	c3                   	ret    

c00098be <IDT::setup()>:
c00098be:	57                   	push   edi
c00098bf:	56                   	push   esi
c00098c0:	53                   	push   ebx
c00098c1:	83 ec 10             	sub    esp,0x10
c00098c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00098c8:	6a 00                	push   0x0
c00098ca:	68 a5 03 00 c0       	push   0xc00003a5
c00098cf:	6a 00                	push   0x0
c00098d1:	53                   	push   ebx
c00098d2:	e8 95 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00098d7:	6a 00                	push   0x0
c00098d9:	68 b5 03 00 c0       	push   0xc00003b5
c00098de:	6a 01                	push   0x1
c00098e0:	53                   	push   ebx
c00098e1:	e8 86 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00098e6:	83 c4 20             	add    esp,0x20
c00098e9:	6a 00                	push   0x0
c00098eb:	68 bf 03 00 c0       	push   0xc00003bf
c00098f0:	6a 02                	push   0x2
c00098f2:	53                   	push   ebx
c00098f3:	e8 74 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00098f8:	6a 00                	push   0x0
c00098fa:	68 c9 03 00 c0       	push   0xc00003c9
c00098ff:	6a 03                	push   0x3
c0009901:	53                   	push   ebx
c0009902:	e8 65 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009907:	83 c4 20             	add    esp,0x20
c000990a:	6a 00                	push   0x0
c000990c:	68 d3 03 00 c0       	push   0xc00003d3
c0009911:	6a 04                	push   0x4
c0009913:	53                   	push   ebx
c0009914:	e8 53 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009919:	6a 00                	push   0x0
c000991b:	68 dd 03 00 c0       	push   0xc00003dd
c0009920:	6a 05                	push   0x5
c0009922:	53                   	push   ebx
c0009923:	e8 44 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009928:	83 c4 20             	add    esp,0x20
c000992b:	6a 00                	push   0x0
c000992d:	68 e7 03 00 c0       	push   0xc00003e7
c0009932:	6a 06                	push   0x6
c0009934:	53                   	push   ebx
c0009935:	e8 32 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000993a:	6a 00                	push   0x0
c000993c:	68 f1 03 00 c0       	push   0xc00003f1
c0009941:	6a 07                	push   0x7
c0009943:	53                   	push   ebx
c0009944:	e8 23 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009949:	83 c4 20             	add    esp,0x20
c000994c:	6a 00                	push   0x0
c000994e:	68 fb 03 00 c0       	push   0xc00003fb
c0009953:	6a 08                	push   0x8
c0009955:	53                   	push   ebx
c0009956:	e8 11 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000995b:	6a 00                	push   0x0
c000995d:	68 03 04 00 c0       	push   0xc0000403
c0009962:	6a 09                	push   0x9
c0009964:	53                   	push   ebx
c0009965:	e8 02 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000996a:	83 c4 20             	add    esp,0x20
c000996d:	6a 00                	push   0x0
c000996f:	68 0d 04 00 c0       	push   0xc000040d
c0009974:	6a 0a                	push   0xa
c0009976:	53                   	push   ebx
c0009977:	e8 f0 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000997c:	6a 00                	push   0x0
c000997e:	68 15 04 00 c0       	push   0xc0000415
c0009983:	6a 0b                	push   0xb
c0009985:	53                   	push   ebx
c0009986:	e8 e1 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000998b:	83 c4 20             	add    esp,0x20
c000998e:	6a 00                	push   0x0
c0009990:	68 1d 04 00 c0       	push   0xc000041d
c0009995:	6a 0c                	push   0xc
c0009997:	53                   	push   ebx
c0009998:	e8 cf fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000999d:	6a 00                	push   0x0
c000999f:	68 25 04 00 c0       	push   0xc0000425
c00099a4:	6a 0d                	push   0xd
c00099a6:	53                   	push   ebx
c00099a7:	e8 c0 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099ac:	83 c4 20             	add    esp,0x20
c00099af:	6a 00                	push   0x0
c00099b1:	68 2d 04 00 c0       	push   0xc000042d
c00099b6:	6a 0e                	push   0xe
c00099b8:	53                   	push   ebx
c00099b9:	e8 ae fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099be:	6a 00                	push   0x0
c00099c0:	68 35 04 00 c0       	push   0xc0000435
c00099c5:	6a 0f                	push   0xf
c00099c7:	53                   	push   ebx
c00099c8:	e8 9f fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099cd:	83 c4 20             	add    esp,0x20
c00099d0:	6a 00                	push   0x0
c00099d2:	68 3f 04 00 c0       	push   0xc000043f
c00099d7:	6a 10                	push   0x10
c00099d9:	53                   	push   ebx
c00099da:	e8 8d fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099df:	6a 00                	push   0x0
c00099e1:	68 49 04 00 c0       	push   0xc0000449
c00099e6:	6a 11                	push   0x11
c00099e8:	53                   	push   ebx
c00099e9:	e8 7e fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099ee:	83 c4 20             	add    esp,0x20
c00099f1:	6a 00                	push   0x0
c00099f3:	68 53 04 00 c0       	push   0xc0000453
c00099f8:	6a 12                	push   0x12
c00099fa:	53                   	push   ebx
c00099fb:	e8 6c fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a00:	6a 01                	push   0x1
c0009a02:	68 ed 04 00 c0       	push   0xc00004ed
c0009a07:	6a 60                	push   0x60
c0009a09:	53                   	push   ebx
c0009a0a:	e8 5d fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a0f:	83 c4 20             	add    esp,0x20
c0009a12:	6a 00                	push   0x0
c0009a14:	68 f4 04 00 c0       	push   0xc00004f4
c0009a19:	6a 20                	push   0x20
c0009a1b:	53                   	push   ebx
c0009a1c:	e8 4b fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a21:	6a 00                	push   0x0
c0009a23:	68 df 04 00 c0       	push   0xc00004df
c0009a28:	6a 21                	push   0x21
c0009a2a:	53                   	push   ebx
c0009a2b:	e8 3c fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a30:	83 c4 20             	add    esp,0x20
c0009a33:	6a 00                	push   0x0
c0009a35:	68 e6 04 00 c0       	push   0xc00004e6
c0009a3a:	6a 22                	push   0x22
c0009a3c:	53                   	push   ebx
c0009a3d:	e8 2a fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a42:	6a 00                	push   0x0
c0009a44:	68 5d 04 00 c0       	push   0xc000045d
c0009a49:	6a 23                	push   0x23
c0009a4b:	53                   	push   ebx
c0009a4c:	e8 1b fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a51:	83 c4 20             	add    esp,0x20
c0009a54:	6a 00                	push   0x0
c0009a56:	68 67 04 00 c0       	push   0xc0000467
c0009a5b:	6a 24                	push   0x24
c0009a5d:	53                   	push   ebx
c0009a5e:	e8 09 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a63:	6a 00                	push   0x0
c0009a65:	68 71 04 00 c0       	push   0xc0000471
c0009a6a:	6a 25                	push   0x25
c0009a6c:	53                   	push   ebx
c0009a6d:	e8 fa fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a72:	83 c4 20             	add    esp,0x20
c0009a75:	6a 00                	push   0x0
c0009a77:	68 7b 04 00 c0       	push   0xc000047b
c0009a7c:	6a 26                	push   0x26
c0009a7e:	53                   	push   ebx
c0009a7f:	e8 e8 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a84:	6a 00                	push   0x0
c0009a86:	68 85 04 00 c0       	push   0xc0000485
c0009a8b:	6a 27                	push   0x27
c0009a8d:	53                   	push   ebx
c0009a8e:	e8 d9 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a93:	83 c4 20             	add    esp,0x20
c0009a96:	6a 00                	push   0x0
c0009a98:	68 8f 04 00 c0       	push   0xc000048f
c0009a9d:	6a 28                	push   0x28
c0009a9f:	53                   	push   ebx
c0009aa0:	e8 c7 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009aa5:	6a 00                	push   0x0
c0009aa7:	68 99 04 00 c0       	push   0xc0000499
c0009aac:	6a 29                	push   0x29
c0009aae:	53                   	push   ebx
c0009aaf:	e8 b8 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ab4:	83 c4 20             	add    esp,0x20
c0009ab7:	6a 00                	push   0x0
c0009ab9:	68 a3 04 00 c0       	push   0xc00004a3
c0009abe:	6a 2a                	push   0x2a
c0009ac0:	53                   	push   ebx
c0009ac1:	e8 a6 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ac6:	6a 00                	push   0x0
c0009ac8:	68 ad 04 00 c0       	push   0xc00004ad
c0009acd:	6a 2b                	push   0x2b
c0009acf:	53                   	push   ebx
c0009ad0:	e8 97 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ad5:	83 c4 20             	add    esp,0x20
c0009ad8:	6a 00                	push   0x0
c0009ada:	68 b7 04 00 c0       	push   0xc00004b7
c0009adf:	6a 2c                	push   0x2c
c0009ae1:	53                   	push   ebx
c0009ae2:	e8 85 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ae7:	6a 00                	push   0x0
c0009ae9:	68 c1 04 00 c0       	push   0xc00004c1
c0009aee:	6a 2d                	push   0x2d
c0009af0:	53                   	push   ebx
c0009af1:	e8 76 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009af6:	83 c4 20             	add    esp,0x20
c0009af9:	6a 00                	push   0x0
c0009afb:	68 cb 04 00 c0       	push   0xc00004cb
c0009b00:	6a 2e                	push   0x2e
c0009b02:	53                   	push   ebx
c0009b03:	e8 64 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b08:	6a 00                	push   0x0
c0009b0a:	68 d5 04 00 c0       	push   0xc00004d5
c0009b0f:	6a 2f                	push   0x2f
c0009b11:	53                   	push   ebx
c0009b12:	e8 55 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b17:	83 c4 20             	add    esp,0x20
c0009b1a:	6a 00                	push   0x0
c0009b1c:	68 2b 05 00 c0       	push   0xc000052b
c0009b21:	6a 30                	push   0x30
c0009b23:	53                   	push   ebx
c0009b24:	e8 43 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b29:	6a 00                	push   0x0
c0009b2b:	68 35 05 00 c0       	push   0xc0000535
c0009b30:	6a 31                	push   0x31
c0009b32:	53                   	push   ebx
c0009b33:	e8 34 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b38:	83 c4 20             	add    esp,0x20
c0009b3b:	6a 00                	push   0x0
c0009b3d:	68 3f 05 00 c0       	push   0xc000053f
c0009b42:	6a 32                	push   0x32
c0009b44:	53                   	push   ebx
c0009b45:	e8 22 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b4a:	6a 00                	push   0x0
c0009b4c:	68 49 05 00 c0       	push   0xc0000549
c0009b51:	6a 33                	push   0x33
c0009b53:	53                   	push   ebx
c0009b54:	e8 13 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b59:	83 c4 20             	add    esp,0x20
c0009b5c:	6a 00                	push   0x0
c0009b5e:	68 53 05 00 c0       	push   0xc0000553
c0009b63:	6a 34                	push   0x34
c0009b65:	53                   	push   ebx
c0009b66:	e8 01 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b6b:	6a 00                	push   0x0
c0009b6d:	68 5d 05 00 c0       	push   0xc000055d
c0009b72:	6a 35                	push   0x35
c0009b74:	53                   	push   ebx
c0009b75:	e8 f2 fc ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b7a:	83 c4 20             	add    esp,0x20
c0009b7d:	6a 00                	push   0x0
c0009b7f:	68 67 05 00 c0       	push   0xc0000567
c0009b84:	6a 36                	push   0x36
c0009b86:	53                   	push   ebx
c0009b87:	e8 e0 fc ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b8c:	6a 00                	push   0x0
c0009b8e:	68 71 05 00 c0       	push   0xc0000571
c0009b93:	6a 37                	push   0x37
c0009b95:	53                   	push   ebx
c0009b96:	e8 d1 fc ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b9b:	83 c4 1c             	add    esp,0x1c
c0009b9e:	6a 03                	push   0x3
c0009ba0:	6a 02                	push   0x2
c0009ba2:	ff 35 b0 89 02 c0    	push   DWORD PTR ds:0xc00289b0
c0009ba8:	e8 1d 29 00 00       	call   c000c4ca <VAS::allocatePages(int, int)>
c0009bad:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009bb4:	89 c6                	mov    esi,eax
c0009bb6:	e8 a0 01 00 00       	call   c0009d5b <malloc>
c0009bbb:	81 c6 00 20 00 00    	add    esi,0x2000
c0009bc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bc4:	89 c7                	mov    edi,eax
c0009bc6:	e8 99 1a 00 00       	call   c000b664 <TSS::TSS()>
c0009bcb:	83 c4 0c             	add    esp,0xc
c0009bce:	68 fb 03 00 c0       	push   0xc00003fb
c0009bd3:	56                   	push   esi
c0009bd4:	57                   	push   edi
c0009bd5:	e8 ce 1a 00 00       	call   c000b6a8 <TSS::setup(unsigned long, unsigned long)>
c0009bda:	89 c6                	mov    esi,eax
c0009bdc:	58                   	pop    eax
c0009bdd:	5a                   	pop    edx
c0009bde:	6a 00                	push   0x0
c0009be0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009be4:	50                   	push   eax
c0009be5:	e8 d6 fb ff ff       	call   c00097c0 <IDTEntry::IDTEntry(bool)>
c0009bea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bee:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009bf3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009bfa:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009c00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c04:	80 ce 05             	or     dh,0x5
c0009c07:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c0a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c12:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009c15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009c18:	e8 87 fc ff ff       	call   c00098a4 <IDT::flush()>
c0009c1d:	83 c4 20             	add    esp,0x20
c0009c20:	5b                   	pop    ebx
c0009c21:	5e                   	pop    esi
c0009c22:	5f                   	pop    edi
c0009c23:	c3                   	ret    

c0009c24 <sbrk>:
c0009c24:	55                   	push   ebp
c0009c25:	57                   	push   edi
c0009c26:	56                   	push   esi
c0009c27:	53                   	push   ebx
c0009c28:	83 ec 24             	sub    esp,0x24
c0009c2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009c2f:	53                   	push   ebx
c0009c30:	68 a4 46 02 c0       	push   0xc00246a4
c0009c35:	e8 0d 34 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009c3a:	83 c4 10             	add    esp,0x10
c0009c3d:	85 db                	test   ebx,ebx
c0009c3f:	74 5f                	je     c0009ca0 <sbrk+0x7c>
c0009c41:	78 64                	js     c0009ca7 <sbrk+0x83>
c0009c43:	a1 e0 7a 02 c0       	mov    eax,ds:0xc0027ae0
c0009c48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4c:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009c52:	89 dd                	mov    ebp,ebx
c0009c54:	78 69                	js     c0009cbf <sbrk+0x9b>
c0009c56:	c1 fd 0c             	sar    ebp,0xc
c0009c59:	bb 00 00 00 00       	mov    ebx,0x0
c0009c5e:	8b 35 b0 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289b0
c0009c64:	8b 3d e0 7a 02 c0    	mov    edi,DWORD PTR ds:0xc0027ae0
c0009c6a:	e8 a3 07 00 00       	call   c000a412 <Phys::allocatePage()>
c0009c6f:	68 01 04 00 00       	push   0x401
c0009c74:	57                   	push   edi
c0009c75:	50                   	push   eax
c0009c76:	56                   	push   esi
c0009c77:	e8 4c 27 00 00       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c7c:	81 05 e0 7a 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027ae0,0x1000
c0009c86:	43                   	inc    ebx
c0009c87:	83 c4 10             	add    esp,0x10
c0009c8a:	39 dd                	cmp    ebp,ebx
c0009c8c:	75 d0                	jne    c0009c5e <sbrk+0x3a>
c0009c8e:	0f 20 d8             	mov    eax,cr3
c0009c91:	0f 22 d8             	mov    cr3,eax
c0009c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c98:	83 c4 1c             	add    esp,0x1c
c0009c9b:	5b                   	pop    ebx
c0009c9c:	5e                   	pop    esi
c0009c9d:	5f                   	pop    edi
c0009c9e:	5d                   	pop    ebp
c0009c9f:	c3                   	ret    
c0009ca0:	a1 e0 7a 02 c0       	mov    eax,ds:0xc0027ae0
c0009ca5:	eb f1                	jmp    c0009c98 <sbrk+0x74>
c0009ca7:	83 ec 08             	sub    esp,0x8
c0009caa:	53                   	push   ebx
c0009cab:	68 d0 46 02 c0       	push   0xc00246d0
c0009cb0:	e8 92 33 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009cb5:	83 c4 10             	add    esp,0x10
c0009cb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009cbd:	eb d9                	jmp    c0009c98 <sbrk+0x74>
c0009cbf:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009cc5:	eb 8f                	jmp    c0009c56 <sbrk+0x32>

c0009cc7 <mmap>:
c0009cc7:	83 ec 18             	sub    esp,0x18
c0009cca:	68 c2 46 02 c0       	push   0xc00246c2
c0009ccf:	e8 11 b3 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c0009cd4:	b8 00 00 00 00       	mov    eax,0x0
c0009cd9:	83 c4 1c             	add    esp,0x1c
c0009cdc:	c3                   	ret    

c0009cdd <munmap>:
c0009cdd:	83 ec 18             	sub    esp,0x18
c0009ce0:	68 c7 46 02 c0       	push   0xc00246c7
c0009ce5:	e8 fb b2 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c0009cea:	b8 00 00 00 00       	mov    eax,0x0
c0009cef:	83 c4 1c             	add    esp,0x1c
c0009cf2:	c3                   	ret    

c0009cf3 <liballoc_lock()>:
c0009cf3:	fa                   	cli    
c0009cf4:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0009cfa:	b8 00 00 00 00       	mov    eax,0x0
c0009cff:	c3                   	ret    

c0009d00 <liballoc_unlock()>:
c0009d00:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0009d05:	48                   	dec    eax
c0009d06:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0009d0b:	75 01                	jne    c0009d0e <liballoc_unlock()+0xe>
c0009d0d:	fb                   	sti    
c0009d0e:	b8 00 00 00 00       	mov    eax,0x0
c0009d13:	c3                   	ret    

c0009d14 <liballoc_alloc(int)>:
c0009d14:	83 ec 10             	sub    esp,0x10
c0009d17:	6a 01                	push   0x1
c0009d19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d1d:	ff 35 b0 89 02 c0    	push   DWORD PTR ds:0xc00289b0
c0009d23:	e8 a2 27 00 00       	call   c000c4ca <VAS::allocatePages(int, int)>
c0009d28:	83 c4 1c             	add    esp,0x1c
c0009d2b:	c3                   	ret    

c0009d2c <liballoc_free(void*, int)>:
c0009d2c:	83 ec 14             	sub    esp,0x14
c0009d2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d33:	ff 35 b0 89 02 c0    	push   DWORD PTR ds:0xc00289b0
c0009d39:	e8 36 24 00 00       	call   c000c174 <VAS::freeAllocatedPages(unsigned long)>
c0009d3e:	b8 00 00 00 00       	mov    eax,0x0
c0009d43:	83 c4 1c             	add    esp,0x1c
c0009d46:	c3                   	ret    

c0009d47 <realloc>:
c0009d47:	83 ec 14             	sub    esp,0x14
c0009d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d52:	e8 09 78 ff ff       	call   c0001560 <dlrealloc>
c0009d57:	83 c4 1c             	add    esp,0x1c
c0009d5a:	c3                   	ret    

c0009d5b <malloc>:
c0009d5b:	83 ec 18             	sub    esp,0x18
c0009d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d62:	e8 bc 72 ff ff       	call   c0001023 <dlmalloc>
c0009d67:	83 c4 1c             	add    esp,0x1c
c0009d6a:	c3                   	ret    

c0009d6b <free>:
c0009d6b:	83 ec 18             	sub    esp,0x18
c0009d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d72:	e8 51 6f ff ff       	call   c0000cc8 <dlfree>
c0009d77:	83 c4 1c             	add    esp,0x1c
c0009d7a:	c3                   	ret    

c0009d7b <rfree>:
c0009d7b:	83 ec 18             	sub    esp,0x18
c0009d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d82:	e8 41 6f ff ff       	call   c0000cc8 <dlfree>
c0009d87:	83 c4 1c             	add    esp,0x1c
c0009d8a:	c3                   	ret    

c0009d8b <calloc>:
c0009d8b:	56                   	push   esi
c0009d8c:	53                   	push   ebx
c0009d8d:	83 ec 10             	sub    esp,0x10
c0009d90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009d94:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009d99:	53                   	push   ebx
c0009d9a:	e8 bc ff ff ff       	call   c0009d5b <malloc>
c0009d9f:	89 c6                	mov    esi,eax
c0009da1:	83 c4 0c             	add    esp,0xc
c0009da4:	53                   	push   ebx
c0009da5:	6a 00                	push   0x0
c0009da7:	50                   	push   eax
c0009da8:	e8 d7 68 ff ff       	call   c0000684 <memset>
c0009dad:	89 f0                	mov    eax,esi
c0009daf:	83 c4 14             	add    esp,0x14
c0009db2:	5b                   	pop    ebx
c0009db3:	5e                   	pop    esi
c0009db4:	c3                   	ret    

c0009db5 <Krnl::setBootMessage(char const*)>:
c0009db5:	57                   	push   edi
c0009db6:	56                   	push   esi
c0009db7:	53                   	push   ebx
c0009db8:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009dbe:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009dc5:	68 9e 00 00 00       	push   0x9e
c0009dca:	6a 00                	push   0x0
c0009dcc:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009dd0:	56                   	push   esi
c0009dd1:	e8 ae 68 ff ff       	call   c0000684 <memset>
c0009dd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009dd9:	e8 c2 68 ff ff       	call   c00006a0 <strlen>
c0009dde:	ba 50 00 00 00       	mov    edx,0x50
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	29 c2                	sub    edx,eax
c0009de8:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009dec:	d1 ea                	shr    edx,1
c0009dee:	84 c0                	test   al,al
c0009df0:	74 19                	je     c0009e0b <Krnl::setBootMessage(char const*)+0x56>
c0009df2:	01 d2                	add    edx,edx
c0009df4:	43                   	inc    ebx
c0009df5:	01 f2                	add    edx,esi
c0009df7:	80 cc 0f             	or     ah,0xf
c0009dfa:	83 c2 02             	add    edx,0x2
c0009dfd:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009e01:	43                   	inc    ebx
c0009e02:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009e07:	84 c0                	test   al,al
c0009e09:	75 ec                	jne    c0009df7 <Krnl::setBootMessage(char const*)+0x42>
c0009e0b:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e10:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009e15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009e17:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009e1d:	5b                   	pop    ebx
c0009e1e:	5e                   	pop    esi
c0009e1f:	5f                   	pop    edi
c0009e20:	c3                   	ret    

c0009e21 <kernel_main>:
c0009e21:	57                   	push   edi
c0009e22:	56                   	push   esi
c0009e23:	53                   	push   ebx
c0009e24:	83 ec 20             	sub    esp,0x20
c0009e27:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009e2c:	a3 a0 88 02 c0       	mov    ds:0xc00288a0,eax
c0009e31:	f6 c4 08             	test   ah,0x8
c0009e34:	0f 85 7a 03 00 00    	jne    c000a1b4 <kernel_main+0x393>
c0009e3a:	31 f6                	xor    esi,esi
c0009e3c:	bf f9 03 00 00       	mov    edi,0x3f9
c0009e41:	89 f0                	mov    eax,esi
c0009e43:	89 fa                	mov    edx,edi
c0009e45:	ee                   	out    dx,al
c0009e46:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009e4b:	b0 80                	mov    al,0x80
c0009e4d:	89 da                	mov    edx,ebx
c0009e4f:	ee                   	out    dx,al
c0009e50:	b1 03                	mov    cl,0x3
c0009e52:	ba f8 03 00 00       	mov    edx,0x3f8
c0009e57:	88 c8                	mov    al,cl
c0009e59:	ee                   	out    dx,al
c0009e5a:	89 f0                	mov    eax,esi
c0009e5c:	89 fa                	mov    edx,edi
c0009e5e:	ee                   	out    dx,al
c0009e5f:	88 c8                	mov    al,cl
c0009e61:	89 da                	mov    edx,ebx
c0009e63:	ee                   	out    dx,al
c0009e64:	b0 c7                	mov    al,0xc7
c0009e66:	ba fa 03 00 00       	mov    edx,0x3fa
c0009e6b:	ee                   	out    dx,al
c0009e6c:	b0 0b                	mov    al,0xb
c0009e6e:	ba fc 03 00 00       	mov    edx,0x3fc
c0009e73:	ee                   	out    dx,al
c0009e74:	83 ec 0c             	sub    esp,0xc
c0009e77:	68 00 47 02 c0       	push   0xc0024700
c0009e7c:	e8 c6 31 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009e81:	83 c4 10             	add    esp,0x10
c0009e84:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0009e8b:	0f 85 eb 02 00 00    	jne    c000a17c <kernel_main+0x35b>
c0009e91:	e8 d2 0c 00 00       	call   c000ab68 <installVgaTextImplementation()>
c0009e96:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0009e9d:	0f 85 94 02 00 00    	jne    c000a137 <kernel_main+0x316>
c0009ea3:	0f b6 05 00 7b 02 c0 	movzx  eax,BYTE PTR ds:0xc0027b00
c0009eaa:	84 c0                	test   al,al
c0009eac:	74 7b                	je     c0009f29 <kernel_main+0x108>
c0009eae:	31 db                	xor    ebx,ebx
c0009eb0:	bf 0a 00 00 00       	mov    edi,0xa
c0009eb5:	be 05 00 00 00       	mov    esi,0x5
c0009eba:	31 c9                	xor    ecx,ecx
c0009ebc:	eb 2a                	jmp    c0009ee8 <kernel_main+0xc7>
c0009ebe:	3c 0d                	cmp    al,0xd
c0009ec0:	74 1a                	je     c0009edc <kernel_main+0xbb>
c0009ec2:	3c 0a                	cmp    al,0xa
c0009ec4:	74 40                	je     c0009f06 <kernel_main+0xe5>
c0009ec6:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009ec9:	80 cc 0e             	or     ah,0xe
c0009ecc:	c1 e2 04             	shl    edx,0x4
c0009ecf:	01 ca                	add    edx,ecx
c0009ed1:	41                   	inc    ecx
c0009ed2:	01 fa                	add    edx,edi
c0009ed4:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009edc:	43                   	inc    ebx
c0009edd:	0f b6 83 00 7b 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8500]
c0009ee4:	84 c0                	test   al,al
c0009ee6:	74 32                	je     c0009f1a <kernel_main+0xf9>
c0009ee8:	80 b9 36 7b 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd84ca],0xdb
c0009eef:	75 cd                	jne    c0009ebe <kernel_main+0x9d>
c0009ef1:	0f b6 91 35 7b 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd84cb]
c0009ef8:	83 e2 fe             	and    edx,0xfffffffe
c0009efb:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009f01:	75 bb                	jne    c0009ebe <kernel_main+0x9d>
c0009f03:	47                   	inc    edi
c0009f04:	eb b8                	jmp    c0009ebe <kernel_main+0x9d>
c0009f06:	43                   	inc    ebx
c0009f07:	46                   	inc    esi
c0009f08:	31 c9                	xor    ecx,ecx
c0009f0a:	0f b6 83 00 7b 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8500]
c0009f11:	bf 0a 00 00 00       	mov    edi,0xa
c0009f16:	84 c0                	test   al,al
c0009f18:	75 ce                	jne    c0009ee8 <kernel_main+0xc7>
c0009f1a:	8b 15 a0 88 02 c0    	mov    edx,DWORD PTR ds:0xc00288a0
c0009f20:	80 e6 08             	and    dh,0x8
c0009f23:	0f 85 bf 00 00 00    	jne    c0009fe8 <kernel_main+0x1c7>
c0009f29:	83 ec 0c             	sub    esp,0xc
c0009f2c:	68 9c 47 02 c0       	push   0xc002479c
c0009f31:	e8 7f fe ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009f36:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009f3b:	05 ff 0f 00 00       	add    eax,0xfff
c0009f40:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f45:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f48:	e8 44 06 00 00       	call   c000a591 <Phys::physicalMemorySetup(unsigned int)>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0009f57:	0f 85 a2 01 00 00    	jne    c000a0ff <kernel_main+0x2de>
c0009f5d:	e8 7e 1f 00 00       	call   c000bee0 <Virt::virtualMemorySetup()>
c0009f62:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0009f69:	0f 85 58 01 00 00    	jne    c000a0c7 <kernel_main+0x2a6>
c0009f6f:	83 ec 0c             	sub    esp,0xc
c0009f72:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009f76:	56                   	push   esi
c0009f77:	e8 20 20 00 00       	call   c000bf9c <VAS::VAS()>
c0009f7c:	83 c4 10             	add    esp,0x10
c0009f7f:	89 35 b0 89 02 c0    	mov    DWORD PTR ds:0xc00289b0,esi
c0009f85:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0009f8c:	0f 85 fd 00 00 00    	jne    c000a08f <kernel_main+0x26e>
c0009f92:	e8 89 60 ff ff       	call   c0000020 <callGlobalConstructors>
c0009f97:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0009f9e:	0f 85 b3 00 00 00    	jne    c000a057 <kernel_main+0x236>
c0009fa4:	83 ec 0c             	sub    esp,0xc
c0009fa7:	68 ec 01 00 00       	push   0x1ec
c0009fac:	e8 aa fd ff ff       	call   c0009d5b <malloc>
c0009fb1:	89 c3                	mov    ebx,eax
c0009fb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fb6:	e8 05 ec ff ff       	call   c0008bc0 <Computer::Computer()>
c0009fbb:	83 c4 10             	add    esp,0x10
c0009fbe:	89 1d 88 88 02 c0    	mov    DWORD PTR ds:0xc0028888,ebx
c0009fc4:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0009fcb:	75 53                	jne    c000a020 <kernel_main+0x1ff>
c0009fcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009fcf:	6a 00                	push   0x0
c0009fd1:	6a 00                	push   0x0
c0009fd3:	6a 00                	push   0x0
c0009fd5:	53                   	push   ebx
c0009fd6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009fd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fdc:	e8 6b 22 00 00       	call   c000c24c <VAS::~VAS()>
c0009fe1:	83 c4 30             	add    esp,0x30
c0009fe4:	5b                   	pop    ebx
c0009fe5:	5e                   	pop    esi
c0009fe6:	5f                   	pop    edi
c0009fe7:	c3                   	ret    
c0009fe8:	83 ec 0c             	sub    esp,0xc
c0009feb:	68 4b 47 02 c0       	push   0xc002474b
c0009ff0:	e8 c0 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009ff5:	83 c4 10             	add    esp,0x10
c0009ff8:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0009fff:	0f 85 24 ff ff ff    	jne    c0009f29 <kernel_main+0x108>
c000a005:	eb 04                	jmp    c000a00b <kernel_main+0x1ea>
c000a007:	3c 1c                	cmp    al,0x1c
c000a009:	74 06                	je     c000a011 <kernel_main+0x1f0>
c000a00b:	e4 60                	in     al,0x60
c000a00d:	3c 5a                	cmp    al,0x5a
c000a00f:	75 f6                	jne    c000a007 <kernel_main+0x1e6>
c000a011:	e4 60                	in     al,0x60
c000a013:	3c 5a                	cmp    al,0x5a
c000a015:	74 fa                	je     c000a011 <kernel_main+0x1f0>
c000a017:	3c 1c                	cmp    al,0x1c
c000a019:	74 f6                	je     c000a011 <kernel_main+0x1f0>
c000a01b:	e9 09 ff ff ff       	jmp    c0009f29 <kernel_main+0x108>
c000a020:	83 ec 0c             	sub    esp,0xc
c000a023:	68 8a 47 02 c0       	push   0xc002478a
c000a028:	e8 88 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a02d:	83 c4 10             	add    esp,0x10
c000a030:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c000a037:	74 0c                	je     c000a045 <kernel_main+0x224>
c000a039:	8b 1d 88 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028888
c000a03f:	eb 8c                	jmp    c0009fcd <kernel_main+0x1ac>
c000a041:	3c 1c                	cmp    al,0x1c
c000a043:	74 06                	je     c000a04b <kernel_main+0x22a>
c000a045:	e4 60                	in     al,0x60
c000a047:	3c 5a                	cmp    al,0x5a
c000a049:	75 f6                	jne    c000a041 <kernel_main+0x220>
c000a04b:	e4 60                	in     al,0x60
c000a04d:	3c 5a                	cmp    al,0x5a
c000a04f:	74 fa                	je     c000a04b <kernel_main+0x22a>
c000a051:	3c 1c                	cmp    al,0x1c
c000a053:	74 f6                	je     c000a04b <kernel_main+0x22a>
c000a055:	eb e2                	jmp    c000a039 <kernel_main+0x218>
c000a057:	83 ec 0c             	sub    esp,0xc
c000a05a:	68 77 47 02 c0       	push   0xc0024777
c000a05f:	e8 51 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c000a06e:	0f 85 30 ff ff ff    	jne    c0009fa4 <kernel_main+0x183>
c000a074:	eb 04                	jmp    c000a07a <kernel_main+0x259>
c000a076:	3c 1c                	cmp    al,0x1c
c000a078:	74 06                	je     c000a080 <kernel_main+0x25f>
c000a07a:	e4 60                	in     al,0x60
c000a07c:	3c 5a                	cmp    al,0x5a
c000a07e:	75 f6                	jne    c000a076 <kernel_main+0x255>
c000a080:	e4 60                	in     al,0x60
c000a082:	3c 5a                	cmp    al,0x5a
c000a084:	74 fa                	je     c000a080 <kernel_main+0x25f>
c000a086:	3c 1c                	cmp    al,0x1c
c000a088:	74 f6                	je     c000a080 <kernel_main+0x25f>
c000a08a:	e9 15 ff ff ff       	jmp    c0009fa4 <kernel_main+0x183>
c000a08f:	83 ec 0c             	sub    esp,0xc
c000a092:	68 6d 47 02 c0       	push   0xc002476d
c000a097:	e8 19 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a09c:	83 c4 10             	add    esp,0x10
c000a09f:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c000a0a6:	0f 85 e6 fe ff ff    	jne    c0009f92 <kernel_main+0x171>
c000a0ac:	eb 04                	jmp    c000a0b2 <kernel_main+0x291>
c000a0ae:	3c 1c                	cmp    al,0x1c
c000a0b0:	74 06                	je     c000a0b8 <kernel_main+0x297>
c000a0b2:	e4 60                	in     al,0x60
c000a0b4:	3c 5a                	cmp    al,0x5a
c000a0b6:	75 f6                	jne    c000a0ae <kernel_main+0x28d>
c000a0b8:	e4 60                	in     al,0x60
c000a0ba:	3c 5a                	cmp    al,0x5a
c000a0bc:	74 fa                	je     c000a0b8 <kernel_main+0x297>
c000a0be:	3c 1c                	cmp    al,0x1c
c000a0c0:	74 f6                	je     c000a0b8 <kernel_main+0x297>
c000a0c2:	e9 cb fe ff ff       	jmp    c0009f92 <kernel_main+0x171>
c000a0c7:	83 ec 0c             	sub    esp,0xc
c000a0ca:	68 62 47 02 c0       	push   0xc0024762
c000a0cf:	e8 e1 fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a0d4:	83 c4 10             	add    esp,0x10
c000a0d7:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c000a0de:	0f 85 8b fe ff ff    	jne    c0009f6f <kernel_main+0x14e>
c000a0e4:	eb 04                	jmp    c000a0ea <kernel_main+0x2c9>
c000a0e6:	3c 1c                	cmp    al,0x1c
c000a0e8:	74 06                	je     c000a0f0 <kernel_main+0x2cf>
c000a0ea:	e4 60                	in     al,0x60
c000a0ec:	3c 5a                	cmp    al,0x5a
c000a0ee:	75 f6                	jne    c000a0e6 <kernel_main+0x2c5>
c000a0f0:	e4 60                	in     al,0x60
c000a0f2:	3c 5a                	cmp    al,0x5a
c000a0f4:	74 fa                	je     c000a0f0 <kernel_main+0x2cf>
c000a0f6:	3c 1c                	cmp    al,0x1c
c000a0f8:	74 f6                	je     c000a0f0 <kernel_main+0x2cf>
c000a0fa:	e9 70 fe ff ff       	jmp    c0009f6f <kernel_main+0x14e>
c000a0ff:	83 ec 0c             	sub    esp,0xc
c000a102:	68 57 47 02 c0       	push   0xc0024757
c000a107:	e8 a9 fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a10c:	83 c4 10             	add    esp,0x10
c000a10f:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c000a116:	0f 85 41 fe ff ff    	jne    c0009f5d <kernel_main+0x13c>
c000a11c:	eb 04                	jmp    c000a122 <kernel_main+0x301>
c000a11e:	3c 1c                	cmp    al,0x1c
c000a120:	74 06                	je     c000a128 <kernel_main+0x307>
c000a122:	e4 60                	in     al,0x60
c000a124:	3c 5a                	cmp    al,0x5a
c000a126:	75 f6                	jne    c000a11e <kernel_main+0x2fd>
c000a128:	e4 60                	in     al,0x60
c000a12a:	3c 5a                	cmp    al,0x5a
c000a12c:	74 fa                	je     c000a128 <kernel_main+0x307>
c000a12e:	3c 1c                	cmp    al,0x1c
c000a130:	74 f6                	je     c000a128 <kernel_main+0x307>
c000a132:	e9 26 fe ff ff       	jmp    c0009f5d <kernel_main+0x13c>
c000a137:	83 ec 0c             	sub    esp,0xc
c000a13a:	68 39 47 02 c0       	push   0xc0024739
c000a13f:	e8 71 fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a144:	8b 15 a0 88 02 c0    	mov    edx,DWORD PTR ds:0xc00288a0
c000a14a:	83 c4 10             	add    esp,0x10
c000a14d:	f6 c2 80             	test   dl,0x80
c000a150:	74 18                	je     c000a16a <kernel_main+0x349>
c000a152:	0f b6 05 00 7b 02 c0 	movzx  eax,BYTE PTR ds:0xc0027b00
c000a159:	84 c0                	test   al,al
c000a15b:	0f 85 4d fd ff ff    	jne    c0009eae <kernel_main+0x8d>
c000a161:	e9 ba fd ff ff       	jmp    c0009f20 <kernel_main+0xff>
c000a166:	3c 1c                	cmp    al,0x1c
c000a168:	74 06                	je     c000a170 <kernel_main+0x34f>
c000a16a:	e4 60                	in     al,0x60
c000a16c:	3c 5a                	cmp    al,0x5a
c000a16e:	75 f6                	jne    c000a166 <kernel_main+0x345>
c000a170:	e4 60                	in     al,0x60
c000a172:	3c 5a                	cmp    al,0x5a
c000a174:	74 fa                	je     c000a170 <kernel_main+0x34f>
c000a176:	3c 1c                	cmp    al,0x1c
c000a178:	74 f6                	je     c000a170 <kernel_main+0x34f>
c000a17a:	eb d6                	jmp    c000a152 <kernel_main+0x331>
c000a17c:	83 ec 0c             	sub    esp,0xc
c000a17f:	68 2a 47 02 c0       	push   0xc002472a
c000a184:	e8 2c fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a189:	83 c4 10             	add    esp,0x10
c000a18c:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c000a193:	0f 85 f8 fc ff ff    	jne    c0009e91 <kernel_main+0x70>
c000a199:	eb 04                	jmp    c000a19f <kernel_main+0x37e>
c000a19b:	3c 1c                	cmp    al,0x1c
c000a19d:	74 06                	je     c000a1a5 <kernel_main+0x384>
c000a19f:	e4 60                	in     al,0x60
c000a1a1:	3c 5a                	cmp    al,0x5a
c000a1a3:	75 f6                	jne    c000a19b <kernel_main+0x37a>
c000a1a5:	e4 60                	in     al,0x60
c000a1a7:	3c 5a                	cmp    al,0x5a
c000a1a9:	74 fa                	je     c000a1a5 <kernel_main+0x384>
c000a1ab:	3c 1c                	cmp    al,0x1c
c000a1ad:	74 f6                	je     c000a1a5 <kernel_main+0x384>
c000a1af:	e9 dd fc ff ff       	jmp    c0009e91 <kernel_main+0x70>
c000a1b4:	83 ec 0c             	sub    esp,0xc
c000a1b7:	68 17 47 02 c0       	push   0xc0024717
c000a1bc:	e8 f4 fb ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a1c1:	83 c4 10             	add    esp,0x10
c000a1c4:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c000a1cb:	0f 85 69 fc ff ff    	jne    c0009e3a <kernel_main+0x19>
c000a1d1:	eb 04                	jmp    c000a1d7 <kernel_main+0x3b6>
c000a1d3:	3c 1c                	cmp    al,0x1c
c000a1d5:	74 06                	je     c000a1dd <kernel_main+0x3bc>
c000a1d7:	e4 60                	in     al,0x60
c000a1d9:	3c 5a                	cmp    al,0x5a
c000a1db:	75 f6                	jne    c000a1d3 <kernel_main+0x3b2>
c000a1dd:	e4 60                	in     al,0x60
c000a1df:	3c 5a                	cmp    al,0x5a
c000a1e1:	74 fa                	je     c000a1dd <kernel_main+0x3bc>
c000a1e3:	3c 1c                	cmp    al,0x1c
c000a1e5:	74 f6                	je     c000a1dd <kernel_main+0x3bc>
c000a1e7:	e9 4e fc ff ff       	jmp    c0009e3a <kernel_main+0x19>

c000a1ec <Phys::allocateDMA(unsigned long)>:
c000a1ec:	55                   	push   ebp
c000a1ed:	31 ed                	xor    ebp,ebp
c000a1ef:	57                   	push   edi
c000a1f0:	56                   	push   esi
c000a1f1:	53                   	push   ebx
c000a1f2:	31 db                	xor    ebx,ebx
c000a1f4:	83 ec 28             	sub    esp,0x28
c000a1f7:	68 bb 47 02 c0       	push   0xc00247bb
c000a1fc:	e8 46 2e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a201:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a205:	83 c4 10             	add    esp,0x10
c000a208:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a20e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a216:	c1 ef 0c             	shr    edi,0xc
c000a219:	31 c0                	xor    eax,eax
c000a21b:	eb 19                	jmp    c000a236 <Phys::allocateDMA(unsigned long)+0x4a>
c000a21d:	85 c0                	test   eax,eax
c000a21f:	75 06                	jne    c000a227 <Phys::allocateDMA(unsigned long)+0x3b>
c000a221:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a225:	89 dd                	mov    ebp,ebx
c000a227:	8d 70 01             	lea    esi,[eax+0x1]
c000a22a:	39 f7                	cmp    edi,esi
c000a22c:	74 3f                	je     c000a26d <Phys::allocateDMA(unsigned long)+0x81>
c000a22e:	89 f0                	mov    eax,esi
c000a230:	43                   	inc    ebx
c000a231:	83 fb 0f             	cmp    ebx,0xf
c000a234:	7f 11                	jg     c000a247 <Phys::allocateDMA(unsigned long)+0x5b>
c000a236:	80 bb bc 88 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7744],0x0
c000a23d:	74 de                	je     c000a21d <Phys::allocateDMA(unsigned long)+0x31>
c000a23f:	31 c0                	xor    eax,eax
c000a241:	43                   	inc    ebx
c000a242:	83 fb 0f             	cmp    ebx,0xf
c000a245:	7e ef                	jle    c000a236 <Phys::allocateDMA(unsigned long)+0x4a>
c000a247:	83 ec 0c             	sub    esp,0xc
c000a24a:	68 eb 47 02 c0       	push   0xc00247eb
c000a24f:	e8 f3 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a254:	c7 04 24 a8 48 02 c0 	mov    DWORD PTR [esp],0xc00248a8
c000a25b:	e8 85 ad 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000a260:	83 c4 10             	add    esp,0x10
c000a263:	31 c0                	xor    eax,eax
c000a265:	83 c4 1c             	add    esp,0x1c
c000a268:	5b                   	pop    ebx
c000a269:	5e                   	pop    esi
c000a26a:	5f                   	pop    edi
c000a26b:	5d                   	pop    ebp
c000a26c:	c3                   	ret    
c000a26d:	89 e9                	mov    ecx,ebp
c000a26f:	c1 f9 04             	sar    ecx,0x4
c000a272:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a276:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a27a:	89 ca                	mov    edx,ecx
c000a27c:	4a                   	dec    edx
c000a27d:	79 03                	jns    c000a282 <Phys::allocateDMA(unsigned long)+0x96>
c000a27f:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a282:	c1 fa 04             	sar    edx,0x4
c000a285:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a289:	74 08                	je     c000a293 <Phys::allocateDMA(unsigned long)+0xa7>
c000a28b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a28f:	31 c0                	xor    eax,eax
c000a291:	eb ae                	jmp    c000a241 <Phys::allocateDMA(unsigned long)+0x55>
c000a293:	85 f6                	test   esi,esi
c000a295:	74 15                	je     c000a2ac <Phys::allocateDMA(unsigned long)+0xc0>
c000a297:	8d 95 bc 88 02 c0    	lea    edx,[ebp-0x3ffd7744]
c000a29d:	8d 84 05 bd 88 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7743]
c000a2a4:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a2a7:	42                   	inc    edx
c000a2a8:	39 d0                	cmp    eax,edx
c000a2aa:	75 f8                	jne    c000a2a4 <Phys::allocateDMA(unsigned long)+0xb8>
c000a2ac:	83 ec 0c             	sub    esp,0xc
c000a2af:	01 3d b4 88 02 c0    	add    DWORD PTR ds:0xc00288b4,edi
c000a2b5:	68 d4 47 02 c0       	push   0xc00247d4
c000a2ba:	e8 88 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a2bf:	83 c4 10             	add    esp,0x10
c000a2c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2c6:	85 c0                	test   eax,eax
c000a2c8:	74 23                	je     c000a2ed <Phys::allocateDMA(unsigned long)+0x101>
c000a2ca:	83 ec 0c             	sub    esp,0xc
c000a2cd:	68 de 76 02 c0       	push   0xc00276de
c000a2d2:	e8 70 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a2d7:	c7 04 24 a8 48 02 c0 	mov    DWORD PTR [esp],0xc00248a8
c000a2de:	e8 02 ad 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 f0                	mov    eax,esi
c000a2e8:	e9 43 ff ff ff       	jmp    c000a230 <Phys::allocateDMA(unsigned long)+0x44>
c000a2ed:	c1 e5 0c             	shl    ebp,0xc
c000a2f0:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a2f6:	e9 6a ff ff ff       	jmp    c000a265 <Phys::allocateDMA(unsigned long)+0x79>

c000a2fb <Phys::freeDMA(unsigned long, unsigned long)>:
c000a2fb:	83 ec 18             	sub    esp,0x18
c000a2fe:	68 ef 47 02 c0       	push   0xc00247ef
c000a303:	e8 3f 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a308:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a30c:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a316:	c1 ea 0c             	shr    edx,0xc
c000a319:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a31e:	29 15 b4 88 02 c0    	sub    DWORD PTR ds:0xc00288b4,edx
c000a324:	c1 e8 0c             	shr    eax,0xc
c000a327:	83 c4 10             	add    esp,0x10
c000a32a:	85 d2                	test   edx,edx
c000a32c:	74 0f                	je     c000a33d <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a32e:	05 bc 88 02 c0       	add    eax,0xc00288bc
c000a333:	01 c2                	add    edx,eax
c000a335:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a338:	40                   	inc    eax
c000a339:	39 d0                	cmp    eax,edx
c000a33b:	75 f8                	jne    c000a335 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a33d:	83 c4 0c             	add    esp,0xc
c000a340:	c3                   	ret    

c000a341 <Phys::setPageState(unsigned long, bool)>:
c000a341:	56                   	push   esi
c000a342:	ba 01 00 00 00       	mov    edx,0x1
c000a347:	53                   	push   ebx
c000a348:	8b 35 44 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027c44
c000a34e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a356:	89 c8                	mov    eax,ecx
c000a358:	83 e1 07             	and    ecx,0x7
c000a35b:	c1 e8 03             	shr    eax,0x3
c000a35e:	d3 e3                	shl    ebx,cl
c000a360:	01 c6                	add    esi,eax
c000a362:	d3 e2                	shl    edx,cl
c000a364:	f7 d2                	not    edx
c000a366:	20 16                	and    BYTE PTR [esi],dl
c000a368:	03 05 44 7c 02 c0    	add    eax,DWORD PTR ds:0xc0027c44
c000a36e:	08 18                	or     BYTE PTR [eax],bl
c000a370:	5b                   	pop    ebx
c000a371:	5e                   	pop    esi
c000a372:	c3                   	ret    

c000a373 <Phys::getPageState(unsigned long)>:
c000a373:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a377:	8b 15 44 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027c44
c000a37d:	89 c8                	mov    eax,ecx
c000a37f:	83 e1 07             	and    ecx,0x7
c000a382:	c1 e8 03             	shr    eax,0x3
c000a385:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a389:	d3 f8                	sar    eax,cl
c000a38b:	83 e0 01             	and    eax,0x1
c000a38e:	c3                   	ret    

c000a38f <Phys::freePage(unsigned long)>:
c000a38f:	53                   	push   ebx
c000a390:	83 ec 10             	sub    esp,0x10
c000a393:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a397:	53                   	push   ebx
c000a398:	68 05 48 02 c0       	push   0xc0024805
c000a39d:	e8 a5 2c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a3a2:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	3d ff ff 00 00       	cmp    eax,0xffff
c000a3b0:	76 3d                	jbe    c000a3ef <Phys::freePage(unsigned long)+0x60>
c000a3b2:	83 ec 0c             	sub    esp,0xc
c000a3b5:	c1 eb 0c             	shr    ebx,0xc
c000a3b8:	53                   	push   ebx
c000a3b9:	e8 b5 ff ff ff       	call   c000a373 <Phys::getPageState(unsigned long)>
c000a3be:	83 c4 10             	add    esp,0x10
c000a3c1:	84 c0                	test   al,al
c000a3c3:	74 19                	je     c000a3de <Phys::freePage(unsigned long)+0x4f>
c000a3c5:	83 ec 08             	sub    esp,0x8
c000a3c8:	ff 0d b4 88 02 c0    	dec    DWORD PTR ds:0xc00288b4
c000a3ce:	6a 00                	push   0x0
c000a3d0:	53                   	push   ebx
c000a3d1:	e8 6b ff ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a3d6:	83 c4 10             	add    esp,0x10
c000a3d9:	83 c4 08             	add    esp,0x8
c000a3dc:	5b                   	pop    ebx
c000a3dd:	c3                   	ret    
c000a3de:	c7 44 24 10 2f 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc002482f
c000a3e6:	83 c4 08             	add    esp,0x8
c000a3e9:	5b                   	pop    ebx
c000a3ea:	e9 f6 ab 00 00       	jmp    c0014fe5 <Krnl::panic(char const*)>
c000a3ef:	83 ec 08             	sub    esp,0x8
c000a3f2:	53                   	push   ebx
c000a3f3:	68 18 48 02 c0       	push   0xc0024818
c000a3f8:	e8 4a 2c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a3fd:	58                   	pop    eax
c000a3fe:	5a                   	pop    edx
c000a3ff:	68 00 10 00 00       	push   0x1000
c000a404:	53                   	push   ebx
c000a405:	e8 f1 fe ff ff       	call   c000a2fb <Phys::freeDMA(unsigned long, unsigned long)>
c000a40a:	83 c4 10             	add    esp,0x10
c000a40d:	83 c4 08             	add    esp,0x8
c000a410:	5b                   	pop    ebx
c000a411:	c3                   	ret    

c000a412 <Phys::allocatePage()>:
c000a412:	56                   	push   esi
c000a413:	53                   	push   ebx
c000a414:	83 ec 14             	sub    esp,0x14
c000a417:	8b 35 a8 88 02 c0    	mov    esi,DWORD PTR ds:0xc00288a8
c000a41d:	89 f3                	mov    ebx,esi
c000a41f:	eb 0a                	jmp    c000a42b <Phys::allocatePage()+0x19>
c000a421:	89 1d a8 88 02 c0    	mov    DWORD PTR ds:0xc00288a8,ebx
c000a427:	39 de                	cmp    esi,ebx
c000a429:	74 24                	je     c000a44f <Phys::allocatePage()+0x3d>
c000a42b:	53                   	push   ebx
c000a42c:	e8 42 ff ff ff       	call   c000a373 <Phys::getPageState(unsigned long)>
c000a431:	5a                   	pop    edx
c000a432:	84 c0                	test   al,al
c000a434:	74 69                	je     c000a49f <Phys::allocatePage()+0x8d>
c000a436:	43                   	inc    ebx
c000a437:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a43d:	75 e2                	jne    c000a421 <Phys::allocatePage()+0xf>
c000a43f:	31 db                	xor    ebx,ebx
c000a441:	c7 05 a8 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00288a8,0x0
c000a44b:	39 de                	cmp    esi,ebx
c000a44d:	75 dc                	jne    c000a42b <Phys::allocatePage()+0x19>
c000a44f:	83 ec 0c             	sub    esp,0xc
c000a452:	80 35 cc 88 02 c0 01 	xor    BYTE PTR ds:0xc00288cc,0x1
c000a459:	68 d0 48 02 c0       	push   0xc00248d0
c000a45e:	e8 e4 2b 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a463:	58                   	pop    eax
c000a464:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a469:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a46c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a472:	e8 5f 28 00 00       	call   c000ccd6 <VAS::scanForEviction()>
c000a477:	83 c4 10             	add    esp,0x10
c000a47a:	85 c0                	test   eax,eax
c000a47c:	75 62                	jne    c000a4e0 <Phys::allocatePage()+0xce>
c000a47e:	83 ec 0c             	sub    esp,0xc
c000a481:	68 f4 48 02 c0       	push   0xc00248f4
c000a486:	e8 5a ab 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000a48b:	83 c4 10             	add    esp,0x10
c000a48e:	8b 1d a8 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288a8
c000a494:	53                   	push   ebx
c000a495:	e8 d9 fe ff ff       	call   c000a373 <Phys::getPageState(unsigned long)>
c000a49a:	5a                   	pop    edx
c000a49b:	84 c0                	test   al,al
c000a49d:	75 97                	jne    c000a436 <Phys::allocatePage()+0x24>
c000a49f:	6a 01                	push   0x1
c000a4a1:	53                   	push   ebx
c000a4a2:	e8 9a fe ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a4a7:	5a                   	pop    edx
c000a4a8:	a1 b4 88 02 c0       	mov    eax,ds:0xc00288b4
c000a4ad:	59                   	pop    ecx
c000a4ae:	40                   	inc    eax
c000a4af:	8b 15 a8 88 02 c0    	mov    edx,DWORD PTR ds:0xc00288a8
c000a4b5:	a3 b4 88 02 c0       	mov    ds:0xc00288b4,eax
c000a4ba:	c1 e2 0c             	shl    edx,0xc
c000a4bd:	52                   	push   edx
c000a4be:	ff 35 b8 88 02 c0    	push   DWORD PTR ds:0xc00288b8
c000a4c4:	50                   	push   eax
c000a4c5:	68 45 48 02 c0       	push   0xc0024845
c000a4ca:	e8 78 2b 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a4cf:	a1 a8 88 02 c0       	mov    eax,ds:0xc00288a8
c000a4d4:	83 c4 10             	add    esp,0x10
c000a4d7:	c1 e0 0c             	shl    eax,0xc
c000a4da:	83 c4 14             	add    esp,0x14
c000a4dd:	5b                   	pop    ebx
c000a4de:	5e                   	pop    esi
c000a4df:	c3                   	ret    
c000a4e0:	83 ec 08             	sub    esp,0x8
c000a4e3:	89 c2                	mov    edx,eax
c000a4e5:	6a 01                	push   0x1
c000a4e7:	c1 ea 0c             	shr    edx,0xc
c000a4ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4ee:	52                   	push   edx
c000a4ef:	e8 4d fe ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a4f4:	83 c4 10             	add    esp,0x10
c000a4f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4fb:	eb dd                	jmp    c000a4da <Phys::allocatePage()+0xc8>

c000a4fd <Phys::allocateContiguousPages(int)>:
c000a4fd:	57                   	push   edi
c000a4fe:	56                   	push   esi
c000a4ff:	53                   	push   ebx
c000a500:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a504:	fa                   	cli    
c000a505:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c000a50b:	31 db                	xor    ebx,ebx
c000a50d:	85 db                	test   ebx,ebx
c000a50f:	75 11                	jne    c000a522 <Phys::allocateContiguousPages(int)+0x25>
c000a511:	e8 fc fe ff ff       	call   c000a412 <Phys::allocatePage()>
c000a516:	83 fe 01             	cmp    esi,0x1
c000a519:	89 c7                	mov    edi,eax
c000a51b:	74 21                	je     c000a53e <Phys::allocateContiguousPages(int)+0x41>
c000a51d:	bb 01 00 00 00       	mov    ebx,0x1
c000a522:	e8 eb fe ff ff       	call   c000a412 <Phys::allocatePage()>
c000a527:	89 da                	mov    edx,ebx
c000a529:	c1 e2 0c             	shl    edx,0xc
c000a52c:	01 fa                	add    edx,edi
c000a52e:	39 c2                	cmp    edx,eax
c000a530:	74 20                	je     c000a552 <Phys::allocateContiguousPages(int)+0x55>
c000a532:	bb 01 00 00 00       	mov    ebx,0x1
c000a537:	89 c7                	mov    edi,eax
c000a539:	83 fe 01             	cmp    esi,0x1
c000a53c:	75 e4                	jne    c000a522 <Phys::allocateContiguousPages(int)+0x25>
c000a53e:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000a543:	48                   	dec    eax
c000a544:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000a549:	75 01                	jne    c000a54c <Phys::allocateContiguousPages(int)+0x4f>
c000a54b:	fb                   	sti    
c000a54c:	89 f8                	mov    eax,edi
c000a54e:	5b                   	pop    ebx
c000a54f:	5e                   	pop    esi
c000a550:	5f                   	pop    edi
c000a551:	c3                   	ret    
c000a552:	43                   	inc    ebx
c000a553:	39 f3                	cmp    ebx,esi
c000a555:	75 b6                	jne    c000a50d <Phys::allocateContiguousPages(int)+0x10>
c000a557:	eb e5                	jmp    c000a53e <Phys::allocateContiguousPages(int)+0x41>

c000a559 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a559:	56                   	push   esi
c000a55a:	53                   	push   ebx
c000a55b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a55f:	39 1d ac 88 02 c0    	cmp    DWORD PTR ds:0xc00288ac,ebx
c000a565:	73 06                	jae    c000a56d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a567:	89 1d ac 88 02 c0    	mov    DWORD PTR ds:0xc00288ac,ebx
c000a56d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a571:	c1 eb 0c             	shr    ebx,0xc
c000a574:	c1 e8 0c             	shr    eax,0xc
c000a577:	39 d8                	cmp    eax,ebx
c000a579:	73 13                	jae    c000a58e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a57b:	6a 00                	push   0x0
c000a57d:	8d 70 01             	lea    esi,[eax+0x1]
c000a580:	50                   	push   eax
c000a581:	e8 bb fd ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a586:	5a                   	pop    edx
c000a587:	89 f0                	mov    eax,esi
c000a589:	59                   	pop    ecx
c000a58a:	39 f3                	cmp    ebx,esi
c000a58c:	75 ed                	jne    c000a57b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a58e:	5b                   	pop    ebx
c000a58f:	5e                   	pop    esi
c000a590:	c3                   	ret    

c000a591 <Phys::physicalMemorySetup(unsigned int)>:
c000a591:	55                   	push   ebp
c000a592:	57                   	push   edi
c000a593:	56                   	push   esi
c000a594:	53                   	push   ebx
c000a595:	31 db                	xor    ebx,ebx
c000a597:	83 ec 40             	sub    esp,0x40
c000a59a:	6a 10                	push   0x10
c000a59c:	6a 00                	push   0x0
c000a59e:	68 bc 88 02 c0       	push   0xc00288bc
c000a5a3:	e8 dc 60 ff ff       	call   c0000684 <memset>
c000a5a8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a5ac:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a5b1:	05 00 10 00 00       	add    eax,0x1000
c000a5b6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5ba:	5a                   	pop    edx
c000a5bb:	59                   	pop    ecx
c000a5bc:	50                   	push   eax
c000a5bd:	68 63 48 02 c0       	push   0xc0024863
c000a5c2:	e8 80 2a 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a5c7:	83 c4 10             	add    esp,0x10
c000a5ca:	83 ec 08             	sub    esp,0x8
c000a5cd:	6a 01                	push   0x1
c000a5cf:	53                   	push   ebx
c000a5d0:	43                   	inc    ebx
c000a5d1:	e8 6b fd ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a5d6:	83 c4 10             	add    esp,0x10
c000a5d9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a5df:	75 e9                	jne    c000a5ca <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a5e1:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a5e8:	66 85 c0             	test   ax,ax
c000a5eb:	0f 84 8e 01 00 00    	je     c000a77f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a5f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a5f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a5fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a601:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a606:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a60a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a612:	eb 15                	jmp    c000a629 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a614:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a618:	83 c3 18             	add    ebx,0x18
c000a61b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a61f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a623:	0f 84 66 01 00 00    	je     c000a78f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a629:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a62c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a62f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a632:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a636:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a63a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a63c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a63f:	01 f0                	add    eax,esi
c000a641:	55                   	push   ebp
c000a642:	11 fa                	adc    edx,edi
c000a644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a648:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a64c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a650:	56                   	push   esi
c000a651:	68 24 49 02 c0       	push   0xc0024924
c000a656:	e8 ec 29 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a65b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a65f:	83 c4 10             	add    esp,0x10
c000a662:	09 f8                	or     eax,edi
c000a664:	0f 85 25 01 00 00    	jne    c000a78f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a66a:	4d                   	dec    ebp
c000a66b:	75 a7                	jne    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a66d:	ba 00 00 08 00       	mov    edx,0x80000
c000a672:	89 c1                	mov    ecx,eax
c000a674:	39 f2                	cmp    edx,esi
c000a676:	19 f9                	sbb    ecx,edi
c000a678:	0f 82 a7 00 00 00    	jb     c000a725 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a67e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a682:	89 c1                	mov    ecx,eax
c000a684:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a688:	0f 83 97 00 00 00    	jae    c000a725 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a68e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a693:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a697:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a69b:	39 fa                	cmp    edx,edi
c000a69d:	19 e8                	sbb    eax,ebp
c000a69f:	0f 82 a5 01 00 00    	jb     c000a84a <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a6a5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a6a9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a6ad:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a6b3:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a6b8:	83 d5 ff             	adc    ebp,0xffffffff
c000a6bb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a6bf:	31 c0                	xor    eax,eax
c000a6c1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a6c5:	39 fa                	cmp    edx,edi
c000a6c7:	89 c1                	mov    ecx,eax
c000a6c9:	19 e9                	sbb    ecx,ebp
c000a6cb:	0f 83 43 ff ff ff    	jae    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6d1:	be 00 00 08 00       	mov    esi,0x80000
c000a6d6:	57                   	push   edi
c000a6d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a6db:	57                   	push   edi
c000a6dc:	56                   	push   esi
c000a6dd:	68 48 49 02 c0       	push   0xc0024948
c000a6e2:	e8 60 29 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a6e7:	5d                   	pop    ebp
c000a6e8:	58                   	pop    eax
c000a6e9:	57                   	push   edi
c000a6ea:	56                   	push   esi
c000a6eb:	e8 69 fe ff ff       	call   c000a559 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a6f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a6f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6f8:	83 c4 0c             	add    esp,0xc
c000a6fb:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a6ff:	03 05 b8 88 02 c0    	add    eax,DWORD PTR ds:0xc00288b8
c000a705:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a70c:	a3 b8 88 02 c0       	mov    ds:0xc00288b8,eax
c000a711:	52                   	push   edx
c000a712:	50                   	push   eax
c000a713:	68 89 48 02 c0       	push   0xc0024889
c000a718:	e8 2a 29 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a71d:	83 c4 10             	add    esp,0x10
c000a720:	e9 ef fe ff ff       	jmp    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a725:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a729:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a72d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a731:	39 ea                	cmp    edx,ebp
c000a733:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a737:	0f 82 d7 fe ff ff    	jb     c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a73d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a742:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a746:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a74a:	0f 83 c4 fe ff ff    	jae    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a750:	39 ee                	cmp    esi,ebp
c000a752:	89 f8                	mov    eax,edi
c000a754:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a758:	0f 83 78 ff ff ff    	jae    c000a6d6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a75e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a762:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a766:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a76a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a76e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a776:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a77a:	e9 57 ff ff ff       	jmp    c000a6d6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a77f:	83 ec 0c             	sub    esp,0xc
c000a782:	68 7b 48 02 c0       	push   0xc002487b
c000a787:	e8 59 a8 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000a78c:	83 c4 10             	add    esp,0x10
c000a78f:	83 ec 08             	sub    esp,0x8
c000a792:	6a 00                	push   0x0
c000a794:	6a 05                	push   0x5
c000a796:	e8 a6 fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a79b:	58                   	pop    eax
c000a79c:	5a                   	pop    edx
c000a79d:	6a 00                	push   0x0
c000a79f:	6a 06                	push   0x6
c000a7a1:	e8 9b fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7a6:	59                   	pop    ecx
c000a7a7:	5b                   	pop    ebx
c000a7a8:	bb 60 00 00 00       	mov    ebx,0x60
c000a7ad:	6a 00                	push   0x0
c000a7af:	6a 07                	push   0x7
c000a7b1:	e8 8b fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7b6:	83 05 b8 88 02 c0 03 	add    DWORD PTR ds:0xc00288b8,0x3
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 ec 08             	sub    esp,0x8
c000a7c3:	6a 00                	push   0x0
c000a7c5:	53                   	push   ebx
c000a7c6:	43                   	inc    ebx
c000a7c7:	e8 75 fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a7d5:	75 e9                	jne    c000a7c0 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a7d7:	a1 b8 88 02 c0       	mov    eax,ds:0xc00288b8
c000a7dc:	bb 40 01 00 00       	mov    ebx,0x140
c000a7e1:	83 c0 20             	add    eax,0x20
c000a7e4:	a3 b8 88 02 c0       	mov    ds:0xc00288b8,eax
c000a7e9:	eb 22                	jmp    c000a80d <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a7eb:	83 ec 08             	sub    esp,0x8
c000a7ee:	6a 00                	push   0x0
c000a7f0:	53                   	push   ebx
c000a7f1:	43                   	inc    ebx
c000a7f2:	e8 4a fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7f7:	a1 b8 88 02 c0       	mov    eax,ds:0xc00288b8
c000a7fc:	83 c4 10             	add    esp,0x10
c000a7ff:	40                   	inc    eax
c000a800:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a806:	a3 b8 88 02 c0       	mov    ds:0xc00288b8,eax
c000a80b:	74 07                	je     c000a814 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a80d:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a812:	7e d7                	jle    c000a7eb <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a814:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a819:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a81e:	7f 22                	jg     c000a842 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a820:	83 ec 08             	sub    esp,0x8
c000a823:	6a 00                	push   0x0
c000a825:	53                   	push   ebx
c000a826:	43                   	inc    ebx
c000a827:	e8 15 fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a82c:	a1 b8 88 02 c0       	mov    eax,ds:0xc00288b8
c000a831:	83 c4 10             	add    esp,0x10
c000a834:	40                   	inc    eax
c000a835:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a83b:	a3 b8 88 02 c0       	mov    ds:0xc00288b8,eax
c000a840:	75 d7                	jne    c000a819 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a842:	83 c4 3c             	add    esp,0x3c
c000a845:	5b                   	pop    ebx
c000a846:	5e                   	pop    esi
c000a847:	5f                   	pop    edi
c000a848:	5d                   	pop    ebp
c000a849:	c3                   	ret    
c000a84a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a852:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a85a:	e9 46 fe ff ff       	jmp    c000a6a5 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a85f:	90                   	nop

c000a860 <Pipe::isAtty()>:
c000a860:	31 c0                	xor    eax,eax
c000a862:	c3                   	ret    
c000a863:	90                   	nop

c000a864 <Pipe::~Pipe()>:
c000a864:	83 ec 0c             	sub    esp,0xc
c000a867:	ba b4 49 02 c0       	mov    edx,0xc00249b4
c000a86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a870:	89 10                	mov    DWORD PTR [eax],edx
c000a872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a876:	83 ec 0c             	sub    esp,0xc
c000a879:	50                   	push   eax
c000a87a:	e8 41 12 00 00       	call   c000bac0 <UnixFile::~UnixFile()>
c000a87f:	83 c4 10             	add    esp,0x10
c000a882:	90                   	nop
c000a883:	83 c4 0c             	add    esp,0xc
c000a886:	c3                   	ret    
c000a887:	90                   	nop

c000a888 <Pipe::~Pipe()>:
c000a888:	83 ec 0c             	sub    esp,0xc
c000a88b:	83 ec 0c             	sub    esp,0xc
c000a88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a892:	e8 cd ff ff ff       	call   c000a864 <Pipe::~Pipe()>
c000a897:	83 c4 10             	add    esp,0x10
c000a89a:	83 ec 08             	sub    esp,0x8
c000a89d:	6a 20                	push   0x20
c000a89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8a3:	e8 be 26 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000a8a8:	83 c4 10             	add    esp,0x10
c000a8ab:	83 c4 0c             	add    esp,0xc
c000a8ae:	c3                   	ret    
c000a8af:	90                   	nop

c000a8b0 <Pipe::read(unsigned long long, void*, int*)>:
c000a8b0:	55                   	push   ebp
c000a8b1:	57                   	push   edi
c000a8b2:	56                   	push   esi
c000a8b3:	53                   	push   ebx
c000a8b4:	83 ec 1c             	sub    esp,0x1c
c000a8b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8bf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8c6:	89 c8                	mov    eax,ecx
c000a8c8:	99                   	cdq    
c000a8c9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8cd:	74 24                	je     c000a8f3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8cf:	39 f9                	cmp    ecx,edi
c000a8d1:	89 d1                	mov    ecx,edx
c000a8d3:	19 f1                	sbb    ecx,esi
c000a8d5:	73 1c                	jae    c000a8f3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8d7:	fa                   	cli    
c000a8d8:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c000a8de:	e8 0d e3 00 00       	call   c0018bf0 <schedule()>
c000a8e3:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000a8e8:	48                   	dec    eax
c000a8e9:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000a8ee:	75 d3                	jne    c000a8c3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8f0:	fb                   	sti    
c000a8f1:	eb d0                	jmp    c000a8c3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8f3:	39 f8                	cmp    eax,edi
c000a8f5:	89 d1                	mov    ecx,edx
c000a8f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a8fa:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a8fe:	19 f1                	sbb    ecx,esi
c000a900:	73 07                	jae    c000a909 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a902:	89 04 24             	mov    DWORD PTR [esp],eax
c000a905:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a909:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a90c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a90f:	29 f7                	sub    edi,esi
c000a911:	89 f8                	mov    eax,edi
c000a913:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a917:	99                   	cdq    
c000a918:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a91f:	19 d0                	sbb    eax,edx
c000a921:	73 07                	jae    c000a92a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a923:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a92a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a92d:	89 ea                	mov    edx,ebp
c000a92f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a933:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a938:	74 0d                	je     c000a947 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a93a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a93d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a941:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a947:	85 d2                	test   edx,edx
c000a949:	74 11                	je     c000a95c <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a94b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a94f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a952:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a956:	89 d1                	mov    ecx,edx
c000a958:	89 c7                	mov    edi,eax
c000a95a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a95c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a95f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a962:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a965:	99                   	cdq    
c000a966:	89 f7                	mov    edi,esi
c000a968:	03 04 24             	add    eax,DWORD PTR [esp]
c000a96b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a96f:	c1 ff 1f             	sar    edi,0x1f
c000a972:	57                   	push   edi
c000a973:	56                   	push   esi
c000a974:	52                   	push   edx
c000a975:	50                   	push   eax
c000a976:	e8 59 84 01 00       	call   c0022dd4 <__umoddi3>
c000a97b:	83 c4 10             	add    esp,0x10
c000a97e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a981:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a986:	75 10                	jne    c000a998 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a988:	83 ec 0c             	sub    esp,0xc
c000a98b:	68 71 49 02 c0       	push   0xc0024971
c000a990:	e8 50 a6 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000a995:	83 c4 10             	add    esp,0x10
c000a998:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a99c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a99f:	89 10                	mov    DWORD PTR [eax],edx
c000a9a1:	83 c4 1c             	add    esp,0x1c
c000a9a4:	31 c0                	xor    eax,eax
c000a9a6:	5b                   	pop    ebx
c000a9a7:	5e                   	pop    esi
c000a9a8:	5f                   	pop    edi
c000a9a9:	5d                   	pop    ebp
c000a9aa:	c3                   	ret    
c000a9ab:	90                   	nop

c000a9ac <Pipe::write(unsigned long long, void*, int*)>:
c000a9ac:	55                   	push   ebp
c000a9ad:	57                   	push   edi
c000a9ae:	56                   	push   esi
c000a9af:	53                   	push   ebx
c000a9b0:	83 ec 1c             	sub    esp,0x1c
c000a9b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a9b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9bb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a9be:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c9:	89 d8                	mov    eax,ebx
c000a9cb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a9ce:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a9d2:	89 d6                	mov    esi,edx
c000a9d4:	89 d7                	mov    edi,edx
c000a9d6:	c1 ff 1f             	sar    edi,0x1f
c000a9d9:	03 34 24             	add    esi,DWORD PTR [esp]
c000a9dc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a9e0:	c1 f8 1f             	sar    eax,0x1f
c000a9e3:	39 f3                	cmp    ebx,esi
c000a9e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9ed:	19 f8                	sbb    eax,edi
c000a9ef:	b8 01 00 00 00       	mov    eax,0x1
c000a9f4:	72 6e                	jb     c000aa64 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a9f6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a9f9:	01 d0                	add    eax,edx
c000a9fb:	99                   	cdq    
c000a9fc:	f7 fb                	idiv   ebx
c000a9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa02:	29 d3                	sub    ebx,edx
c000aa04:	89 d7                	mov    edi,edx
c000aa06:	89 de                	mov    esi,ebx
c000aa08:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa0b:	c1 fb 1f             	sar    ebx,0x1f
c000aa0e:	39 f2                	cmp    edx,esi
c000aa10:	19 d8                	sbb    eax,ebx
c000aa12:	b8 00 00 00 00       	mov    eax,0x0
c000aa17:	72 04                	jb     c000aa1d <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aa19:	89 d0                	mov    eax,edx
c000aa1b:	29 f0                	sub    eax,esi
c000aa1d:	89 d3                	mov    ebx,edx
c000aa1f:	29 c3                	sub    ebx,eax
c000aa21:	74 0b                	je     c000aa2e <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aa23:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aa26:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aa2a:	89 d9                	mov    ecx,ebx
c000aa2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa2e:	85 c0                	test   eax,eax
c000aa30:	74 0d                	je     c000aa3f <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aa32:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aa36:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aa39:	89 de                	mov    esi,ebx
c000aa3b:	89 c1                	mov    ecx,eax
c000aa3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa3f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aa42:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa47:	75 10                	jne    c000aa59 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aa49:	83 ec 0c             	sub    esp,0xc
c000aa4c:	68 8d 49 02 c0       	push   0xc002498d
c000aa51:	e8 8f a5 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000aa56:	83 c4 10             	add    esp,0x10
c000aa59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa5d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa60:	89 08                	mov    DWORD PTR [eax],ecx
c000aa62:	31 c0                	xor    eax,eax
c000aa64:	83 c4 1c             	add    esp,0x1c
c000aa67:	5b                   	pop    ebx
c000aa68:	5e                   	pop    esi
c000aa69:	5f                   	pop    edi
c000aa6a:	5d                   	pop    ebp
c000aa6b:	c3                   	ret    

c000aa6c <Pipe::Pipe(int)>:
c000aa6c:	83 ec 0c             	sub    esp,0xc
c000aa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa73:	83 ec 08             	sub    esp,0x8
c000aa76:	6a 00                	push   0x0
c000aa78:	50                   	push   eax
c000aa79:	e8 60 0e 00 00       	call   c000b8de <UnixFile::UnixFile(int)>
c000aa7e:	83 c4 10             	add    esp,0x10
c000aa81:	ba b4 49 02 c0       	mov    edx,0xc00249b4
c000aa86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8a:	89 10                	mov    DWORD PTR [eax],edx
c000aa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aa94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000aaad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aab1:	83 ec 0c             	sub    esp,0xc
c000aab4:	50                   	push   eax
c000aab5:	e8 a1 f2 ff ff       	call   c0009d5b <malloc>
c000aaba:	83 c4 10             	add    esp,0x10
c000aabd:	89 c2                	mov    edx,eax
c000aabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aace:	90                   	nop
c000aacf:	83 c4 0c             	add    esp,0xc
c000aad2:	c3                   	ret    
c000aad3:	90                   	nop

c000aad4 <VgaText::isAtty()>:
c000aad4:	b0 01                	mov    al,0x1
c000aad6:	c3                   	ret    
c000aad7:	90                   	nop

c000aad8 <VgaText::~VgaText()>:
c000aad8:	83 ec 0c             	sub    esp,0xc
c000aadb:	ba 3c 4a 02 c0       	mov    edx,0xc0024a3c
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	89 10                	mov    DWORD PTR [eax],edx
c000aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaea:	83 ec 0c             	sub    esp,0xc
c000aaed:	50                   	push   eax
c000aaee:	e8 cd 0f 00 00       	call   c000bac0 <UnixFile::~UnixFile()>
c000aaf3:	83 c4 10             	add    esp,0x10
c000aaf6:	90                   	nop
c000aaf7:	83 c4 0c             	add    esp,0xc
c000aafa:	c3                   	ret    
c000aafb:	90                   	nop

c000aafc <VgaText::~VgaText()>:
c000aafc:	83 ec 0c             	sub    esp,0xc
c000aaff:	83 ec 0c             	sub    esp,0xc
c000ab02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab06:	e8 cd ff ff ff       	call   c000aad8 <VgaText::~VgaText()>
c000ab0b:	83 c4 10             	add    esp,0x10
c000ab0e:	83 ec 08             	sub    esp,0x8
c000ab11:	68 b4 01 00 00       	push   0x1b4
c000ab16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab1a:	e8 47 24 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000ab1f:	83 c4 10             	add    esp,0x10
c000ab22:	83 c4 0c             	add    esp,0xc
c000ab25:	c3                   	ret    

c000ab26 <VgaText::read(unsigned long long, void*, int*)>:
c000ab26:	83 ec 10             	sub    esp,0x10
c000ab29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab2d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab35:	e8 81 58 00 00       	call   c00103bb <readKeyboard(VgaText*, char*, unsigned long)>
c000ab3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab3e:	89 02                	mov    DWORD PTR [edx],eax
c000ab40:	31 c0                	xor    eax,eax
c000ab42:	83 c4 1c             	add    esp,0x1c
c000ab45:	c3                   	ret    

c000ab46 <setTerminalScrollLock(bool)>:
c000ab46:	c3                   	ret    

c000ab47 <addToTerminalCycle(VgaText*)>:
c000ab47:	8b 15 00 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028900
c000ab4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab51:	85 d2                	test   edx,edx
c000ab53:	75 09                	jne    c000ab5e <addToTerminalCycle(VgaText*)+0x17>
c000ab55:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ab58:	a3 00 89 02 c0       	mov    ds:0xc0028900,eax
c000ab5d:	c3                   	ret    
c000ab5e:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ab61:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ab64:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ab67:	c3                   	ret    

c000ab68 <installVgaTextImplementation()>:
c000ab68:	83 ec 10             	sub    esp,0x10
c000ab6b:	6a 20                	push   0x20
c000ab6d:	6a 00                	push   0x0
c000ab6f:	68 e0 88 02 c0       	push   0xc00288e0
c000ab74:	e8 0b 5b ff ff       	call   c0000684 <memset>
c000ab79:	83 c4 1c             	add    esp,0x1c
c000ab7c:	c3                   	ret    

c000ab7d <scrollTerminalScrollLock(int)>:
c000ab7d:	c3                   	ret    

c000ab7e <VgaText::updateTitle()>:
c000ab7e:	53                   	push   ebx
c000ab7f:	31 c0                	xor    eax,eax
c000ab81:	83 ec 58             	sub    esp,0x58
c000ab84:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ab88:	89 e1                	mov    ecx,esp
c000ab8a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ab8e:	40                   	inc    eax
c000ab8f:	83 f8 50             	cmp    eax,0x50
c000ab92:	75 f6                	jne    c000ab8a <VgaText::updateTitle()+0xc>
c000ab94:	31 c0                	xor    eax,eax
c000ab96:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ab9d:	84 db                	test   bl,bl
c000ab9f:	74 06                	je     c000aba7 <VgaText::updateTitle()+0x29>
c000aba1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000aba4:	40                   	inc    eax
c000aba5:	eb ef                	jmp    c000ab96 <VgaText::updateTitle()+0x18>
c000aba7:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000abaa:	85 c0                	test   eax,eax
c000abac:	74 09                	je     c000abb7 <VgaText::updateTitle()+0x39>
c000abae:	53                   	push   ebx
c000abaf:	53                   	push   ebx
c000abb0:	51                   	push   ecx
c000abb1:	52                   	push   edx
c000abb2:	ff d0                	call   eax
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	83 c4 58             	add    esp,0x58
c000abba:	5b                   	pop    ebx
c000abbb:	c3                   	ret    

c000abbc <VgaText::load()>:
c000abbc:	53                   	push   ebx
c000abbd:	31 c0                	xor    eax,eax
c000abbf:	83 ec 58             	sub    esp,0x58
c000abc2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abc6:	89 e2                	mov    edx,esp
c000abc8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000abcc:	40                   	inc    eax
c000abcd:	83 f8 50             	cmp    eax,0x50
c000abd0:	75 f6                	jne    c000abc8 <VgaText::load()+0xc>
c000abd2:	31 c0                	xor    eax,eax
c000abd4:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000abdb:	84 c9                	test   cl,cl
c000abdd:	74 06                	je     c000abe5 <VgaText::load()+0x29>
c000abdf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000abe2:	40                   	inc    eax
c000abe3:	eb ef                	jmp    c000abd4 <VgaText::load()+0x18>
c000abe5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000abe8:	85 c0                	test   eax,eax
c000abea:	74 09                	je     c000abf5 <VgaText::load()+0x39>
c000abec:	51                   	push   ecx
c000abed:	51                   	push   ecx
c000abee:	52                   	push   edx
c000abef:	53                   	push   ebx
c000abf0:	ff d0                	call   eax
c000abf2:	83 c4 10             	add    esp,0x10
c000abf5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000abf8:	85 c0                	test   eax,eax
c000abfa:	74 09                	je     c000ac05 <VgaText::load()+0x49>
c000abfc:	83 ec 0c             	sub    esp,0xc
c000abff:	53                   	push   ebx
c000ac00:	ff d0                	call   eax
c000ac02:	83 c4 10             	add    esp,0x10
c000ac05:	83 c4 58             	add    esp,0x58
c000ac08:	5b                   	pop    ebx
c000ac09:	c3                   	ret    

c000ac0a <VgaText::updateCursor()>:
c000ac0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac0e:	39 05 04 89 02 c0    	cmp    DWORD PTR ds:0xc0028904,eax
c000ac14:	75 09                	jne    c000ac1f <VgaText::updateCursor()+0x15>
c000ac16:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ac19:	85 c0                	test   eax,eax
c000ac1b:	74 02                	je     c000ac1f <VgaText::updateCursor()+0x15>
c000ac1d:	ff e0                	jmp    eax
c000ac1f:	c3                   	ret    

c000ac20 <VgaText::doANSI_SGR(int)>:
c000ac20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac28:	85 d2                	test   edx,edx
c000ac2a:	75 0b                	jne    c000ac37 <VgaText::doANSI_SGR(int)+0x17>
c000ac2c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ac2f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac32:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ac35:	eb 59                	jmp    c000ac90 <VgaText::doANSI_SGR(int)+0x70>
c000ac37:	83 fa 07             	cmp    edx,0x7
c000ac3a:	75 0b                	jne    c000ac47 <VgaText::doANSI_SGR(int)+0x27>
c000ac3c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ac3f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ac42:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ac45:	eb 49                	jmp    c000ac90 <VgaText::doANSI_SGR(int)+0x70>
c000ac47:	83 fa 1b             	cmp    edx,0x1b
c000ac4a:	74 e0                	je     c000ac2c <VgaText::doANSI_SGR(int)+0xc>
c000ac4c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ac4f:	83 f9 07             	cmp    ecx,0x7
c000ac52:	77 09                	ja     c000ac5d <VgaText::doANSI_SGR(int)+0x3d>
c000ac54:	8b 14 8d 80 7c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8380]
c000ac5b:	eb 20                	jmp    c000ac7d <VgaText::doANSI_SGR(int)+0x5d>
c000ac5d:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ac60:	83 f9 07             	cmp    ecx,0x7
c000ac63:	77 09                	ja     c000ac6e <VgaText::doANSI_SGR(int)+0x4e>
c000ac65:	8b 14 8d 80 7c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8380]
c000ac6c:	eb 22                	jmp    c000ac90 <VgaText::doANSI_SGR(int)+0x70>
c000ac6e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000ac71:	83 f9 07             	cmp    ecx,0x7
c000ac74:	77 0b                	ja     c000ac81 <VgaText::doANSI_SGR(int)+0x61>
c000ac76:	8b 14 95 38 7b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd84c8]
c000ac7d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac80:	c3                   	ret    
c000ac81:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ac84:	83 f9 07             	cmp    ecx,0x7
c000ac87:	77 0a                	ja     c000ac93 <VgaText::doANSI_SGR(int)+0x73>
c000ac89:	8b 14 95 10 7b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd84f0]
c000ac90:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac93:	c3                   	ret    

c000ac94 <VgaText::setDefaultBgColour(VgaColour)>:
c000ac94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac9c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ac9f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000aca2:	c3                   	ret    
c000aca3:	90                   	nop

c000aca4 <VgaText::setDefaultFgColour(VgaColour)>:
c000aca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000acaf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acb2:	c3                   	ret    
c000acb3:	90                   	nop

c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000acb4:	53                   	push   ebx
c000acb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000acb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000acbd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acc1:	51                   	push   ecx
c000acc2:	e8 cd ff ff ff       	call   c000ac94 <VgaText::setDefaultBgColour(VgaColour)>
c000acc7:	58                   	pop    eax
c000acc8:	5a                   	pop    edx
c000acc9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000accd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000acd1:	5b                   	pop    ebx
c000acd2:	eb d0                	jmp    c000aca4 <VgaText::setDefaultFgColour(VgaColour)>

c000acd4 <VgaText::setTitleTextColour(VgaColour)>:
c000acd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acdc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000acdf:	e9 9a fe ff ff       	jmp    c000ab7e <VgaText::updateTitle()>

c000ace4 <VgaText::setTitleColour(VgaColour)>:
c000ace4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ace8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000acef:	e9 8a fe ff ff       	jmp    c000ab7e <VgaText::updateTitle()>

c000acf4 <VgaText::setTitle(char*)>:
c000acf4:	53                   	push   ebx
c000acf5:	83 ec 10             	sub    esp,0x10
c000acf8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000acfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad00:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ad06:	50                   	push   eax
c000ad07:	e8 34 5a ff ff       	call   c0000740 <strcpy>
c000ad0c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad10:	83 c4 18             	add    esp,0x18
c000ad13:	5b                   	pop    ebx
c000ad14:	e9 65 fe ff ff       	jmp    c000ab7e <VgaText::updateTitle()>
c000ad19:	90                   	nop

c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ad1a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ad1e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ad23:	83 e0 0f             	and    eax,0xf
c000ad26:	c1 e2 04             	shl    edx,0x4
c000ad29:	09 d0                	or     eax,edx
c000ad2b:	c3                   	ret    

c000ad2c <VgaText::scrollScreen()>:
c000ad2c:	55                   	push   ebp
c000ad2d:	b9 01 00 00 00       	mov    ecx,0x1
c000ad32:	57                   	push   edi
c000ad33:	56                   	push   esi
c000ad34:	53                   	push   ebx
c000ad35:	83 ec 0c             	sub    esp,0xc
c000ad38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ad3c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ad42:	31 ff                	xor    edi,edi
c000ad44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad47:	83 f9 17             	cmp    ecx,0x17
c000ad4a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ad4d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000ad54:	75 27                	jne    c000ad7d <VgaText::scrollScreen()+0x51>
c000ad56:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000ad59:	01 f5                	add    ebp,esi
c000ad5b:	f7 c7 01 00 00 00    	test   edi,0x1
c000ad61:	74 16                	je     c000ad79 <VgaText::scrollScreen()+0x4d>
c000ad63:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ad67:	50                   	push   eax
c000ad68:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000ad6c:	50                   	push   eax
c000ad6d:	e8 a8 ff ff ff       	call   c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>
c000ad72:	5a                   	pop    edx
c000ad73:	5a                   	pop    edx
c000ad74:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000ad77:	eb 04                	jmp    c000ad7d <VgaText::scrollScreen()+0x51>
c000ad79:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000ad7d:	47                   	inc    edi
c000ad7e:	46                   	inc    esi
c000ad7f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ad85:	75 bd                	jne    c000ad44 <VgaText::scrollScreen()+0x18>
c000ad87:	41                   	inc    ecx
c000ad88:	83 f9 18             	cmp    ecx,0x18
c000ad8b:	75 af                	jne    c000ad3c <VgaText::scrollScreen()+0x10>
c000ad8d:	39 1d 04 89 02 c0    	cmp    DWORD PTR ds:0xc0028904,ebx
c000ad93:	75 1b                	jne    c000adb0 <VgaText::scrollScreen()+0x84>
c000ad95:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ad99:	74 05                	je     c000ada0 <VgaText::scrollScreen()+0x74>
c000ad9b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ad9e:	eb 10                	jmp    c000adb0 <VgaText::scrollScreen()+0x84>
c000ada0:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ada3:	85 c0                	test   eax,eax
c000ada5:	74 09                	je     c000adb0 <VgaText::scrollScreen()+0x84>
c000ada7:	83 ec 0c             	sub    esp,0xc
c000adaa:	53                   	push   ebx
c000adab:	ff d0                	call   eax
c000adad:	83 c4 10             	add    esp,0x10
c000adb0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000adb4:	83 c4 0c             	add    esp,0xc
c000adb7:	5b                   	pop    ebx
c000adb8:	5e                   	pop    esi
c000adb9:	5f                   	pop    edi
c000adba:	5d                   	pop    ebp
c000adbb:	e9 4a fe ff ff       	jmp    c000ac0a <VgaText::updateCursor()>

c000adc0 <VgaText::combineCharAndColour(char, unsigned char)>:
c000adc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000adc5:	c1 e0 08             	shl    eax,0x8
c000adc8:	89 c2                	mov    edx,eax
c000adca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000adcf:	09 d0                	or     eax,edx
c000add1:	c3                   	ret    

c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000add2:	56                   	push   esi
c000add3:	53                   	push   ebx
c000add4:	51                   	push   ecx
c000add5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000add9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000adde:	50                   	push   eax
c000addf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ade4:	50                   	push   eax
c000ade5:	e8 30 ff ff ff       	call   c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>
c000adea:	5b                   	pop    ebx
c000adeb:	0f b6 c0             	movzx  eax,al
c000adee:	5e                   	pop    esi
c000adef:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000adf4:	50                   	push   eax
c000adf5:	53                   	push   ebx
c000adf6:	e8 c5 ff ff ff       	call   c000adc0 <VgaText::combineCharAndColour(char, unsigned char)>
c000adfb:	5a                   	pop    edx
c000adfc:	5e                   	pop    esi
c000adfd:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ae00:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ae06:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae0a:	0f b7 d2             	movzx  edx,dx
c000ae0d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae11:	39 0d 04 89 02 c0    	cmp    DWORD PTR ds:0xc0028904,ecx
c000ae17:	75 10                	jne    c000ae29 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae19:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ae1c:	85 c0                	test   eax,eax
c000ae1e:	74 09                	je     c000ae29 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae20:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ae24:	5a                   	pop    edx
c000ae25:	5b                   	pop    ebx
c000ae26:	5e                   	pop    esi
c000ae27:	ff e0                	jmp    eax
c000ae29:	58                   	pop    eax
c000ae2a:	5b                   	pop    ebx
c000ae2b:	5e                   	pop    esi
c000ae2c:	c3                   	ret    
c000ae2d:	90                   	nop

c000ae2e <VgaText::getCursorX()>:
c000ae2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae32:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ae35:	c3                   	ret    

c000ae36 <VgaText::getCursorY()>:
c000ae36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae3a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ae3d:	c3                   	ret    

c000ae3e <VgaText::setCursor(int, int)>:
c000ae3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae46:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ae49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ae50:	e9 b5 fd ff ff       	jmp    c000ac0a <VgaText::updateCursor()>

c000ae55 <setActiveTerminal(VgaText*)>:
c000ae55:	53                   	push   ebx
c000ae56:	83 ec 08             	sub    esp,0x8
c000ae59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae5d:	85 db                	test   ebx,ebx
c000ae5f:	75 11                	jne    c000ae72 <setActiveTerminal(VgaText*)+0x1d>
c000ae61:	c7 44 24 10 c8 49 02 c0 	mov    DWORD PTR [esp+0x10],0xc00249c8
c000ae69:	83 c4 08             	add    esp,0x8
c000ae6c:	5b                   	pop    ebx
c000ae6d:	e9 73 a1 00 00       	jmp    c0014fe5 <Krnl::panic(char const*)>
c000ae72:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ae77:	85 c0                	test   eax,eax
c000ae79:	74 0c                	je     c000ae87 <setActiveTerminal(VgaText*)+0x32>
c000ae7b:	83 ec 0c             	sub    esp,0xc
c000ae7e:	50                   	push   eax
c000ae7f:	e8 86 fd ff ff       	call   c000ac0a <VgaText::updateCursor()>
c000ae84:	83 c4 10             	add    esp,0x10
c000ae87:	89 1d 04 89 02 c0    	mov    DWORD PTR ds:0xc0028904,ebx
c000ae8d:	51                   	push   ecx
c000ae8e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae91:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae94:	53                   	push   ebx
c000ae95:	e8 a4 ff ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000ae9a:	83 c4 10             	add    esp,0x10
c000ae9d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aea1:	75 07                	jne    c000aeaa <setActiveTerminal(VgaText*)+0x55>
c000aea3:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000aeaa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aeae:	83 c4 08             	add    esp,0x8
c000aeb1:	5b                   	pop    ebx
c000aeb2:	e9 05 fd ff ff       	jmp    c000abbc <VgaText::load()>

c000aeb7 <doTerminalCycle()>:
c000aeb7:	83 ec 18             	sub    esp,0x18
c000aeba:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000aebf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000aec2:	50                   	push   eax
c000aec3:	a3 00 89 02 c0       	mov    ds:0xc0028900,eax
c000aec8:	e8 88 ff ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c000aecd:	83 c4 1c             	add    esp,0x1c
c000aed0:	c3                   	ret    
c000aed1:	90                   	nop

c000aed2 <VgaText::setCursorX(int)>:
c000aed2:	83 ec 10             	sub    esp,0x10
c000aed5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000aedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee0:	50                   	push   eax
c000aee1:	e8 58 ff ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000aee6:	83 c4 1c             	add    esp,0x1c
c000aee9:	c3                   	ret    

c000aeea <VgaText::setCursorY(int)>:
c000aeea:	83 ec 10             	sub    esp,0x10
c000aeed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aef1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aef5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000aef8:	50                   	push   eax
c000aef9:	e8 40 ff ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000aefe:	83 c4 1c             	add    esp,0x1c
c000af01:	c3                   	ret    

c000af02 <VgaText::incrementCursor(bool)>:
c000af02:	56                   	push   esi
c000af03:	53                   	push   ebx
c000af04:	51                   	push   ecx
c000af05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af09:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af0d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af10:	40                   	inc    eax
c000af11:	83 f8 50             	cmp    eax,0x50
c000af14:	74 05                	je     c000af1b <VgaText::incrementCursor(bool)+0x19>
c000af16:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000af19:	eb 24                	jmp    c000af3f <VgaText::incrementCursor(bool)+0x3d>
c000af1b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af1e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af25:	8d 50 01             	lea    edx,[eax+0x1]
c000af28:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af2b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af2e:	75 0f                	jne    c000af3f <VgaText::incrementCursor(bool)+0x3d>
c000af30:	83 ec 0c             	sub    esp,0xc
c000af33:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af36:	53                   	push   ebx
c000af37:	e8 f0 fd ff ff       	call   c000ad2c <VgaText::scrollScreen()>
c000af3c:	83 c4 10             	add    esp,0x10
c000af3f:	89 f0                	mov    eax,esi
c000af41:	84 c0                	test   al,al
c000af43:	74 0c                	je     c000af51 <VgaText::incrementCursor(bool)+0x4f>
c000af45:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af49:	5a                   	pop    edx
c000af4a:	5b                   	pop    ebx
c000af4b:	5e                   	pop    esi
c000af4c:	e9 b9 fc ff ff       	jmp    c000ac0a <VgaText::updateCursor()>
c000af51:	58                   	pop    eax
c000af52:	5b                   	pop    ebx
c000af53:	5e                   	pop    esi
c000af54:	c3                   	ret    
c000af55:	90                   	nop

c000af56 <VgaText::decrementCursor(bool)>:
c000af56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000af5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000af5e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000af61:	85 c0                	test   eax,eax
c000af63:	74 04                	je     c000af69 <VgaText::decrementCursor(bool)+0x13>
c000af65:	48                   	dec    eax
c000af66:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000af69:	84 c9                	test   cl,cl
c000af6b:	74 09                	je     c000af76 <VgaText::decrementCursor(bool)+0x20>
c000af6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000af71:	e9 94 fc ff ff       	jmp    c000ac0a <VgaText::updateCursor()>
c000af76:	c3                   	ret    
c000af77:	90                   	nop

c000af78 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000af78:	53                   	push   ebx
c000af79:	83 ec 08             	sub    esp,0x8
c000af7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af88:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af8c:	3c 07                	cmp    al,0x7
c000af8e:	75 2a                	jne    c000afba <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000af90:	a1 b8 89 02 c0       	mov    eax,ds:0xc00289b8
c000af95:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000af9d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000afa5:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000afad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afb1:	83 c4 08             	add    esp,0x8
c000afb4:	5b                   	pop    ebx
c000afb5:	e9 d4 2f 00 00       	jmp    c000df8e <Buzzer::beep(int, int, bool)>
c000afba:	3c 0d                	cmp    al,0xd
c000afbc:	75 09                	jne    c000afc7 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000afbe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afc5:	eb 2c                	jmp    c000aff3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000afc7:	3c 0a                	cmp    al,0xa
c000afc9:	75 31                	jne    c000affc <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000afcb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000afce:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afd5:	8d 50 01             	lea    edx,[eax+0x1]
c000afd8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afdb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afde:	75 0f                	jne    c000afef <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afe6:	53                   	push   ebx
c000afe7:	e8 40 fd ff ff       	call   c000ad2c <VgaText::scrollScreen()>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aff3:	83 c4 08             	add    esp,0x8
c000aff6:	5b                   	pop    ebx
c000aff7:	e9 0e fc ff ff       	jmp    c000ac0a <VgaText::updateCursor()>
c000affc:	3c 08                	cmp    al,0x8
c000affe:	75 25                	jne    c000b025 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000b000:	50                   	push   eax
c000b001:	50                   	push   eax
c000b002:	6a 01                	push   0x1
c000b004:	53                   	push   ebx
c000b005:	e8 4c ff ff ff       	call   c000af56 <VgaText::decrementCursor(bool)>
c000b00a:	5a                   	pop    edx
c000b00b:	59                   	pop    ecx
c000b00c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b00f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b012:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b015:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b018:	6a 20                	push   0x20
c000b01a:	53                   	push   ebx
c000b01b:	e8 b2 fd ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b020:	83 c4 28             	add    esp,0x28
c000b023:	5b                   	pop    ebx
c000b024:	c3                   	ret    
c000b025:	83 ec 08             	sub    esp,0x8
c000b028:	0f be c0             	movsx  eax,al
c000b02b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b02e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b031:	51                   	push   ecx
c000b032:	52                   	push   edx
c000b033:	50                   	push   eax
c000b034:	53                   	push   ebx
c000b035:	e8 98 fd ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b03a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b03e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b046:	83 c4 28             	add    esp,0x28
c000b049:	5b                   	pop    ebx
c000b04a:	e9 b3 fe ff ff       	jmp    c000af02 <VgaText::incrementCursor(bool)>
c000b04f:	90                   	nop

c000b050 <VgaText::doUpdate()>:
c000b050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b054:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b057:	85 c0                	test   eax,eax
c000b059:	74 02                	je     c000b05d <VgaText::doUpdate()+0xd>
c000b05b:	ff e0                	jmp    eax
c000b05d:	c3                   	ret    

c000b05e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b05e:	55                   	push   ebp
c000b05f:	31 ed                	xor    ebp,ebp
c000b061:	57                   	push   edi
c000b062:	56                   	push   esi
c000b063:	53                   	push   ebx
c000b064:	83 ec 1c             	sub    esp,0x1c
c000b067:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b06b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b070:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b077:	50                   	push   eax
c000b078:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b07d:	50                   	push   eax
c000b07e:	e8 97 fc ff ff       	call   c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>
c000b083:	59                   	pop    ecx
c000b084:	0f b6 c0             	movzx  eax,al
c000b087:	5e                   	pop    esi
c000b088:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b08d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b091:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b094:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b098:	0f b7 f6             	movzx  esi,si
c000b09b:	01 f6                	add    esi,esi
c000b09d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0a0:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b0a3:	84 c0                	test   al,al
c000b0a5:	0f 84 fd 00 00 00    	je     c000b1a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b0ab:	3c 0d                	cmp    al,0xd
c000b0ad:	75 0c                	jne    c000b0bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b0af:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0b6:	e9 e7 00 00 00       	jmp    c000b1a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b0bb:	3c 0a                	cmp    al,0xa
c000b0bd:	75 47                	jne    c000b106 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b0bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b0c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0c9:	8d 48 01             	lea    ecx,[eax+0x1]
c000b0cc:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b0cf:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b0d2:	75 0f                	jne    c000b0e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b0d4:	83 ec 0c             	sub    esp,0xc
c000b0d7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b0da:	53                   	push   ebx
c000b0db:	e8 4c fc ff ff       	call   c000ad2c <VgaText::scrollScreen()>
c000b0e0:	83 c4 10             	add    esp,0x10
c000b0e3:	83 ec 0c             	sub    esp,0xc
c000b0e6:	31 ed                	xor    ebp,ebp
c000b0e8:	53                   	push   ebx
c000b0e9:	e8 1c fb ff ff       	call   c000ac0a <VgaText::updateCursor()>
c000b0ee:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0f3:	83 c4 10             	add    esp,0x10
c000b0f6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b0f9:	0f b7 f6             	movzx  esi,si
c000b0fc:	01 f6                	add    esi,esi
c000b0fe:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b101:	e9 9c 00 00 00       	jmp    c000b1a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b106:	3c 08                	cmp    al,0x8
c000b108:	75 35                	jne    c000b13f <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b10a:	56                   	push   esi
c000b10b:	56                   	push   esi
c000b10c:	6a 01                	push   0x1
c000b10e:	53                   	push   ebx
c000b10f:	e8 42 fe ff ff       	call   c000af56 <VgaText::decrementCursor(bool)>
c000b114:	58                   	pop    eax
c000b115:	5a                   	pop    edx
c000b116:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b119:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b11c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b11f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b122:	6a 20                	push   0x20
c000b124:	53                   	push   ebx
c000b125:	e8 a8 fc ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b12a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b135:	0f b7 f6             	movzx  esi,si
c000b138:	01 f6                	add    esi,esi
c000b13a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b13d:	eb 63                	jmp    c000b1a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b13f:	51                   	push   ecx
c000b140:	51                   	push   ecx
c000b141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b145:	50                   	push   eax
c000b146:	e8 75 fc ff ff       	call   c000adc0 <VgaText::combineCharAndColour(char, unsigned char)>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	66 89 06             	mov    WORD PTR [esi],ax
c000b151:	39 1d 04 89 02 c0    	cmp    DWORD PTR ds:0xc0028904,ebx
c000b157:	75 21                	jne    c000b17a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b159:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b15c:	85 c0                	test   eax,eax
c000b15e:	74 1a                	je     c000b17a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b160:	52                   	push   edx
c000b161:	52                   	push   edx
c000b162:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b165:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b168:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b16c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b170:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b173:	51                   	push   ecx
c000b174:	53                   	push   ebx
c000b175:	ff d0                	call   eax
c000b177:	83 c4 20             	add    esp,0x20
c000b17a:	83 c6 02             	add    esi,0x2
c000b17d:	50                   	push   eax
c000b17e:	50                   	push   eax
c000b17f:	6a 00                	push   0x0
c000b181:	53                   	push   ebx
c000b182:	e8 7b fd ff ff       	call   c000af02 <VgaText::incrementCursor(bool)>
c000b187:	83 c4 10             	add    esp,0x10
c000b18a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b18e:	75 0d                	jne    c000b19d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b190:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b195:	0f b7 f6             	movzx  esi,si
c000b198:	01 f6                	add    esi,esi
c000b19a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b19d:	bd 01 00 00 00       	mov    ebp,0x1
c000b1a2:	47                   	inc    edi
c000b1a3:	e9 f8 fe ff ff       	jmp    c000b0a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b1a8:	83 ec 0c             	sub    esp,0xc
c000b1ab:	53                   	push   ebx
c000b1ac:	e8 59 fa ff ff       	call   c000ac0a <VgaText::updateCursor()>
c000b1b1:	83 c4 10             	add    esp,0x10
c000b1b4:	89 e8                	mov    eax,ebp
c000b1b6:	84 c0                	test   al,al
c000b1b8:	74 0c                	je     c000b1c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	53                   	push   ebx
c000b1be:	e8 8d fe ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b1cd:	83 c4 1c             	add    esp,0x1c
c000b1d0:	5b                   	pop    ebx
c000b1d1:	5e                   	pop    esi
c000b1d2:	5f                   	pop    edi
c000b1d3:	5d                   	pop    ebp
c000b1d4:	c3                   	ret    
c000b1d5:	90                   	nop

c000b1d6 <VgaText::clearScreen()>:
c000b1d6:	57                   	push   edi
c000b1d7:	56                   	push   esi
c000b1d8:	31 f6                	xor    esi,esi
c000b1da:	53                   	push   ebx
c000b1db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1df:	52                   	push   edx
c000b1e0:	6a 00                	push   0x0
c000b1e2:	6a 00                	push   0x0
c000b1e4:	53                   	push   ebx
c000b1e5:	e8 54 fc ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000b1ea:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b1f7:	7e 20                	jle    c000b219 <VgaText::clearScreen()+0x43>
c000b1f9:	31 ff                	xor    edi,edi
c000b1fb:	50                   	push   eax
c000b1fc:	50                   	push   eax
c000b1fd:	56                   	push   esi
c000b1fe:	57                   	push   edi
c000b1ff:	47                   	inc    edi
c000b200:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b203:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b206:	6a 20                	push   0x20
c000b208:	53                   	push   ebx
c000b209:	e8 c4 fb ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b20e:	83 c4 20             	add    esp,0x20
c000b211:	83 ff 50             	cmp    edi,0x50
c000b214:	75 e5                	jne    c000b1fb <VgaText::clearScreen()+0x25>
c000b216:	46                   	inc    esi
c000b217:	eb db                	jmp    c000b1f4 <VgaText::clearScreen()+0x1e>
c000b219:	83 ec 0c             	sub    esp,0xc
c000b21c:	53                   	push   ebx
c000b21d:	e8 2e fe ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b222:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	5b                   	pop    ebx
c000b22d:	5e                   	pop    esi
c000b22e:	5f                   	pop    edi
c000b22f:	c3                   	ret    

c000b230 <VgaText::putchar(char)>:
c000b230:	56                   	push   esi
c000b231:	53                   	push   ebx
c000b232:	83 ec 14             	sub    esp,0x14
c000b235:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b239:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b23d:	3c 5b                	cmp    al,0x5b
c000b23f:	75 18                	jne    c000b259 <VgaText::putchar(char)+0x29>
c000b241:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b245:	74 1f                	je     c000b266 <VgaText::putchar(char)+0x36>
c000b247:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b24d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b254:	e9 bd 00 00 00       	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b259:	3c 1b                	cmp    al,0x1b
c000b25b:	75 09                	jne    c000b266 <VgaText::putchar(char)+0x36>
c000b25d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b261:	e9 b0 00 00 00       	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b266:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b269:	84 c9                	test   cl,cl
c000b26b:	0f 84 92 00 00 00    	je     c000b303 <VgaText::putchar(char)+0xd3>
c000b271:	8d 50 c0             	lea    edx,[eax-0x40]
c000b274:	80 fa 3e             	cmp    dl,0x3e
c000b277:	77 76                	ja     c000b2ef <VgaText::putchar(char)+0xbf>
c000b279:	3c 6d                	cmp    al,0x6d
c000b27b:	75 47                	jne    c000b2c4 <VgaText::putchar(char)+0x94>
c000b27d:	31 f6                	xor    esi,esi
c000b27f:	31 d2                	xor    edx,edx
c000b281:	31 c0                	xor    eax,eax
c000b283:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b286:	7e 2d                	jle    c000b2b5 <VgaText::putchar(char)+0x85>
c000b288:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b28d:	80 fa 3b             	cmp    dl,0x3b
c000b290:	75 17                	jne    c000b2a9 <VgaText::putchar(char)+0x79>
c000b292:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b296:	50                   	push   eax
c000b297:	53                   	push   ebx
c000b298:	e8 83 f9 ff ff       	call   c000ac20 <VgaText::doANSI_SGR(int)>
c000b29d:	59                   	pop    ecx
c000b29e:	31 d2                	xor    edx,edx
c000b2a0:	58                   	pop    eax
c000b2a1:	31 c0                	xor    eax,eax
c000b2a3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b2a7:	eb 09                	jmp    c000b2b2 <VgaText::putchar(char)+0x82>
c000b2a9:	6b c0 0a             	imul   eax,eax,0xa
c000b2ac:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b2b0:	88 ca                	mov    dl,cl
c000b2b2:	46                   	inc    esi
c000b2b3:	eb ce                	jmp    c000b283 <VgaText::putchar(char)+0x53>
c000b2b5:	84 d2                	test   dl,dl
c000b2b7:	74 2e                	je     c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2b9:	50                   	push   eax
c000b2ba:	53                   	push   ebx
c000b2bb:	e8 60 f9 ff ff       	call   c000ac20 <VgaText::doANSI_SGR(int)>
c000b2c0:	58                   	pop    eax
c000b2c1:	5a                   	pop    edx
c000b2c2:	eb 23                	jmp    c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2c4:	3c 4a                	cmp    al,0x4a
c000b2c6:	75 1f                	jne    c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2c8:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b2cc:	75 19                	jne    c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2ce:	83 ec 0c             	sub    esp,0xc
c000b2d1:	53                   	push   ebx
c000b2d2:	e8 ff fe ff ff       	call   c000b1d6 <VgaText::clearScreen()>
c000b2d7:	83 c4 0c             	add    esp,0xc
c000b2da:	6a 00                	push   0x0
c000b2dc:	6a 00                	push   0x0
c000b2de:	53                   	push   ebx
c000b2df:	e8 5a fb ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000b2e4:	83 c4 10             	add    esp,0x10
c000b2e7:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b2ed:	eb 27                	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b2ef:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b2f2:	83 fa 0e             	cmp    edx,0xe
c000b2f5:	7f 1f                	jg     c000b316 <VgaText::putchar(char)+0xe6>
c000b2f7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b2fa:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b2fd:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b301:	eb 13                	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b303:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b306:	0f be c0             	movsx  eax,al
c000b309:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b30c:	50                   	push   eax
c000b30d:	53                   	push   ebx
c000b30e:	e8 65 fc ff ff       	call   c000af78 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b313:	83 c4 10             	add    esp,0x10
c000b316:	83 c4 14             	add    esp,0x14
c000b319:	5b                   	pop    ebx
c000b31a:	5e                   	pop    esi
c000b31b:	c3                   	ret    

c000b31c <VgaText::putx(unsigned int)>:
c000b31c:	57                   	push   edi
c000b31d:	b9 11 00 00 00       	mov    ecx,0x11
c000b322:	56                   	push   esi
c000b323:	be d6 49 02 c0       	mov    esi,0xc00249d6
c000b328:	53                   	push   ebx
c000b329:	83 ec 20             	sub    esp,0x20
c000b32c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b330:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b334:	fc                   	cld    
c000b335:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b337:	be 08 00 00 00       	mov    esi,0x8
c000b33c:	50                   	push   eax
c000b33d:	50                   	push   eax
c000b33e:	89 d8                	mov    eax,ebx
c000b340:	c1 e3 04             	shl    ebx,0x4
c000b343:	c1 e8 1c             	shr    eax,0x1c
c000b346:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b34b:	50                   	push   eax
c000b34c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b350:	e8 db fe ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b355:	83 c4 10             	add    esp,0x10
c000b358:	4e                   	dec    esi
c000b359:	75 e1                	jne    c000b33c <VgaText::putx(unsigned int)+0x20>
c000b35b:	83 c4 20             	add    esp,0x20
c000b35e:	5b                   	pop    ebx
c000b35f:	5e                   	pop    esi
c000b360:	5f                   	pop    edi
c000b361:	c3                   	ret    

c000b362 <VgaText::puts(char const*)>:
c000b362:	53                   	push   ebx
c000b363:	83 ec 08             	sub    esp,0x8
c000b366:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b36a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b36d:	84 c0                	test   al,al
c000b36f:	74 12                	je     c000b383 <VgaText::puts(char const*)+0x21>
c000b371:	43                   	inc    ebx
c000b372:	51                   	push   ecx
c000b373:	51                   	push   ecx
c000b374:	50                   	push   eax
c000b375:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b379:	e8 b2 fe ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	eb e7                	jmp    c000b36a <VgaText::puts(char const*)+0x8>
c000b383:	83 c4 08             	add    esp,0x8
c000b386:	5b                   	pop    ebx
c000b387:	c3                   	ret    

c000b388 <VgaText::VgaText(char const*)>:
c000b388:	57                   	push   edi
c000b389:	56                   	push   esi
c000b38a:	53                   	push   ebx
c000b38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b38f:	83 ec 08             	sub    esp,0x8
c000b392:	6a 00                	push   0x0
c000b394:	50                   	push   eax
c000b395:	e8 44 05 00 00       	call   c000b8de <UnixFile::UnixFile(int)>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	ba 3c 4a 02 c0       	mov    edx,0xc0024a3c
c000b3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a6:	89 10                	mov    DWORD PTR [eax],edx
c000b3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ac:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ca:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b3d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3dd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fe:	8d 50 60             	lea    edx,[eax+0x60]
c000b401:	bb e0 88 02 c0       	mov    ebx,0xc00288e0
c000b406:	b8 08 00 00 00       	mov    eax,0x8
c000b40b:	fc                   	cld    
c000b40c:	89 d7                	mov    edi,edx
c000b40e:	89 de                	mov    esi,ebx
c000b410:	89 c1                	mov    ecx,eax
c000b412:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b418:	05 82 00 00 00       	add    eax,0x82
c000b41d:	83 ec 08             	sub    esp,0x8
c000b420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b424:	50                   	push   eax
c000b425:	e8 16 53 ff ff       	call   c0000740 <strcpy>
c000b42a:	83 c4 10             	add    esp,0x10
c000b42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b431:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b438:	83 ec 0c             	sub    esp,0xc
c000b43b:	6a 01                	push   0x1
c000b43d:	e8 df 08 00 00       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	89 c2                	mov    edx,eax
c000b447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b44e:	8b 1d b0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289b0
c000b454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b458:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b45b:	89 c6                	mov    esi,eax
c000b45d:	e8 b0 ef ff ff       	call   c000a412 <Phys::allocatePage()>
c000b462:	68 05 0c 00 00       	push   0xc05
c000b467:	56                   	push   esi
c000b468:	50                   	push   eax
c000b469:	53                   	push   ebx
c000b46a:	e8 59 0f 00 00       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b46f:	83 c4 10             	add    esp,0x10
c000b472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b476:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b479:	83 ec 04             	sub    esp,0x4
c000b47c:	68 00 0f 00 00       	push   0xf00
c000b481:	6a 00                	push   0x0
c000b483:	50                   	push   eax
c000b484:	e8 fb 51 ff ff       	call   c0000684 <memset>
c000b489:	83 c4 10             	add    esp,0x10
c000b48c:	83 ec 04             	sub    esp,0x4
c000b48f:	6a 00                	push   0x0
c000b491:	6a 07                	push   0x7
c000b493:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b497:	e8 18 f8 ff ff       	call   c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b49c:	83 c4 10             	add    esp,0x10
c000b49f:	83 ec 04             	sub    esp,0x4
c000b4a2:	6a 00                	push   0x0
c000b4a4:	6a 00                	push   0x0
c000b4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4aa:	e8 8f f9 ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000b4af:	83 c4 10             	add    esp,0x10
c000b4b2:	83 ec 0c             	sub    esp,0xc
c000b4b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b9:	e8 18 fd ff ff       	call   c000b1d6 <VgaText::clearScreen()>
c000b4be:	83 c4 10             	add    esp,0x10
c000b4c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c5:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4cd:	05 02 01 00 00       	add    eax,0x102
c000b4d2:	83 ec 04             	sub    esp,0x4
c000b4d5:	6a 30                	push   0x30
c000b4d7:	6a 00                	push   0x0
c000b4d9:	50                   	push   eax
c000b4da:	e8 a5 51 ff ff       	call   c0000684 <memset>
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e6:	05 32 01 00 00       	add    eax,0x132
c000b4eb:	83 ec 04             	sub    esp,0x4
c000b4ee:	68 80 00 00 00       	push   0x80
c000b4f3:	6a 00                	push   0x0
c000b4f5:	50                   	push   eax
c000b4f6:	e8 89 51 ff ff       	call   c0000684 <memset>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	90                   	nop
c000b4ff:	5b                   	pop    ebx
c000b500:	5e                   	pop    esi
c000b501:	5f                   	pop    edi
c000b502:	c3                   	ret    
c000b503:	90                   	nop

c000b504 <VgaText::receiveKey(unsigned char)>:
c000b504:	55                   	push   ebp
c000b505:	57                   	push   edi
c000b506:	56                   	push   esi
c000b507:	53                   	push   ebx
c000b508:	83 ec 1c             	sub    esp,0x1c
c000b50b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b50f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b513:	84 db                	test   bl,bl
c000b515:	0f 84 c6 00 00 00    	je     c000b5e1 <VgaText::receiveKey(unsigned char)+0xdd>
c000b51b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b521:	80 fb 08             	cmp    bl,0x8
c000b524:	75 2c                	jne    c000b552 <VgaText::receiveKey(unsigned char)+0x4e>
c000b526:	83 ec 0c             	sub    esp,0xc
c000b529:	57                   	push   edi
c000b52a:	e8 71 51 ff ff       	call   c00006a0 <strlen>
c000b52f:	83 c4 10             	add    esp,0x10
c000b532:	85 c0                	test   eax,eax
c000b534:	74 41                	je     c000b577 <VgaText::receiveKey(unsigned char)+0x73>
c000b536:	50                   	push   eax
c000b537:	50                   	push   eax
c000b538:	6a 08                	push   0x8
c000b53a:	56                   	push   esi
c000b53b:	e8 f0 fc ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b540:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b543:	e8 58 51 ff ff       	call   c00006a0 <strlen>
c000b548:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b550:	eb 22                	jmp    c000b574 <VgaText::receiveKey(unsigned char)+0x70>
c000b552:	0f be c3             	movsx  eax,bl
c000b555:	52                   	push   edx
c000b556:	52                   	push   edx
c000b557:	50                   	push   eax
c000b558:	56                   	push   esi
c000b559:	e8 d2 fc ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b55e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b562:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b567:	59                   	pop    ecx
c000b568:	5d                   	pop    ebp
c000b569:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b56d:	50                   	push   eax
c000b56e:	57                   	push   edi
c000b56f:	e8 0c 53 ff ff       	call   c0000880 <strcat>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b57e:	75 05                	jne    c000b585 <VgaText::receiveKey(unsigned char)+0x81>
c000b580:	80 fb 0a             	cmp    bl,0xa
c000b583:	75 50                	jne    c000b5d5 <VgaText::receiveKey(unsigned char)+0xd1>
c000b585:	83 ec 0c             	sub    esp,0xc
c000b588:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b58e:	53                   	push   ebx
c000b58f:	e8 0c 51 ff ff       	call   c00006a0 <strlen>
c000b594:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b597:	89 c5                	mov    ebp,eax
c000b599:	e8 02 51 ff ff       	call   c00006a0 <strlen>
c000b59e:	83 c4 10             	add    esp,0x10
c000b5a1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b5a5:	3d 80 00 00 00       	cmp    eax,0x80
c000b5aa:	76 10                	jbe    c000b5bc <VgaText::receiveKey(unsigned char)+0xb8>
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	68 e7 49 02 c0       	push   0xc00249e7
c000b5b4:	e8 2c 9a 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	50                   	push   eax
c000b5bd:	50                   	push   eax
c000b5be:	57                   	push   edi
c000b5bf:	53                   	push   ebx
c000b5c0:	e8 bb 52 ff ff       	call   c0000880 <strcat>
c000b5c5:	83 c4 0c             	add    esp,0xc
c000b5c8:	6a 30                	push   0x30
c000b5ca:	6a 00                	push   0x0
c000b5cc:	57                   	push   edi
c000b5cd:	e8 b2 50 ff ff       	call   c0000684 <memset>
c000b5d2:	83 c4 10             	add    esp,0x10
c000b5d5:	83 ec 0c             	sub    esp,0xc
c000b5d8:	56                   	push   esi
c000b5d9:	e8 72 fa ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b5de:	83 c4 10             	add    esp,0x10
c000b5e1:	83 c4 1c             	add    esp,0x1c
c000b5e4:	5b                   	pop    ebx
c000b5e5:	5e                   	pop    esi
c000b5e6:	5f                   	pop    edi
c000b5e7:	5d                   	pop    ebp
c000b5e8:	c3                   	ret    
c000b5e9:	90                   	nop

c000b5ea <VgaText::write(unsigned long long, void*, int*)>:
c000b5ea:	55                   	push   ebp
c000b5eb:	57                   	push   edi
c000b5ec:	56                   	push   esi
c000b5ed:	53                   	push   ebx
c000b5ee:	83 ec 0c             	sub    esp,0xc
c000b5f1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b5f5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b5f9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b5fd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b604:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b607:	39 eb                	cmp    ebx,ebp
c000b609:	74 13                	je     c000b61e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b60b:	43                   	inc    ebx
c000b60c:	50                   	push   eax
c000b60d:	50                   	push   eax
c000b60e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b612:	50                   	push   eax
c000b613:	56                   	push   esi
c000b614:	e8 17 fc ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b619:	83 c4 10             	add    esp,0x10
c000b61c:	eb e9                	jmp    c000b607 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b61e:	83 ec 0c             	sub    esp,0xc
c000b621:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b628:	56                   	push   esi
c000b629:	e8 22 fa ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b62e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b632:	89 38                	mov    DWORD PTR [eax],edi
c000b634:	83 c4 1c             	add    esp,0x1c
c000b637:	31 c0                	xor    eax,eax
c000b639:	5b                   	pop    ebx
c000b63a:	5e                   	pop    esi
c000b63b:	5f                   	pop    edi
c000b63c:	5d                   	pop    ebp
c000b63d:	c3                   	ret    

c000b63e <newTerminal(char*)>:
c000b63e:	83 ec 28             	sub    esp,0x28
c000b641:	68 b4 01 00 00       	push   0x1b4
c000b646:	e8 10 e7 ff ff       	call   c0009d5b <malloc>
c000b64b:	5a                   	pop    edx
c000b64c:	59                   	pop    ecx
c000b64d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b651:	50                   	push   eax
c000b652:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b656:	e8 2d fd ff ff       	call   c000b388 <VgaText::VgaText(char const*)>
c000b65b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b65f:	83 c4 2c             	add    esp,0x2c
c000b662:	c3                   	ret    
c000b663:	90                   	nop

c000b664 <TSS::TSS()>:
c000b664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b668:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b66f:	90                   	nop
c000b670:	c3                   	ret    
c000b671:	90                   	nop
c000b672:	66 90                	xchg   ax,ax

c000b674 <TSS::setESP(unsigned long)>:
c000b674:	55                   	push   ebp
c000b675:	89 e5                	mov    ebp,esp
c000b677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b67a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b67d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b680:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b683:	90                   	nop
c000b684:	5d                   	pop    ebp
c000b685:	c3                   	ret    
c000b686:	66 90                	xchg   ax,ax

c000b688 <TSS::flush()>:
c000b688:	55                   	push   ebp
c000b689:	89 e5                	mov    ebp,esp
c000b68b:	83 ec 10             	sub    esp,0x10
c000b68e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b691:	8b 00                	mov    eax,DWORD PTR [eax]
c000b693:	83 c8 03             	or     eax,0x3
c000b696:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b69a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b69e:	66 89 d0             	mov    ax,dx
c000b6a1:	0f 00 d8             	ltr    ax
c000b6a4:	90                   	nop
c000b6a5:	c9                   	leave  
c000b6a6:	c3                   	ret    
c000b6a7:	90                   	nop

c000b6a8 <TSS::setup(unsigned long, unsigned long)>:
c000b6a8:	55                   	push   ebp
c000b6a9:	89 e5                	mov    ebp,esp
c000b6ab:	83 ec 18             	sub    esp,0x18
c000b6ae:	83 ec 0c             	sub    esp,0xc
c000b6b1:	6a 68                	push   0x68
c000b6b3:	e8 a3 e6 ff ff       	call   c0009d5b <malloc>
c000b6b8:	83 c4 10             	add    esp,0x10
c000b6bb:	89 c2                	mov    edx,eax
c000b6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6c9:	83 ec 04             	sub    esp,0x4
c000b6cc:	6a 68                	push   0x68
c000b6ce:	6a 00                	push   0x0
c000b6d0:	50                   	push   eax
c000b6d1:	e8 ae 4f ff ff       	call   c0000684 <memset>
c000b6d6:	83 c4 10             	add    esp,0x10
c000b6d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6df:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b6e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6eb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b6f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b700:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b703:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b70c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b70f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b71b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b724:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b727:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b733:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b73c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b73f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b74b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b74e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b754:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b757:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b75a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b75d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b760:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b763:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b76a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b76d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b770:	0f 20 da             	mov    edx,cr3
c000b773:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b776:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b779:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b77c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b77f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b782:	83 ec 08             	sub    esp,0x8
c000b785:	50                   	push   eax
c000b786:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b789:	50                   	push   eax
c000b78a:	e8 27 de ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c000b78f:	83 c4 10             	add    esp,0x10
c000b792:	83 ec 08             	sub    esp,0x8
c000b795:	6a 68                	push   0x68
c000b797:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b79a:	50                   	push   eax
c000b79b:	e8 32 de ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c000b7a0:	83 c4 10             	add    esp,0x10
c000b7a3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b7a7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7aa:	83 e0 0f             	and    eax,0xf
c000b7ad:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7b0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7b3:	83 c8 40             	or     eax,0x40
c000b7b6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7b9:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000b7be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7c4:	05 78 01 00 00       	add    eax,0x178
c000b7c9:	83 ec 04             	sub    esp,0x4
c000b7cc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b7cf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b7d2:	50                   	push   eax
c000b7d3:	e8 2e de ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c000b7d8:	83 c4 10             	add    esp,0x10
c000b7db:	89 c2                	mov    edx,eax
c000b7dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e0:	89 10                	mov    DWORD PTR [eax],edx
c000b7e2:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000b7e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7ed:	05 78 01 00 00       	add    eax,0x178
c000b7f2:	83 ec 0c             	sub    esp,0xc
c000b7f5:	50                   	push   eax
c000b7f6:	e8 35 de ff ff       	call   c0009630 <GDT::flush()>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b801:	8b 00                	mov    eax,DWORD PTR [eax]
c000b803:	c9                   	leave  
c000b804:	c3                   	ret    
c000b805:	90                   	nop

c000b806 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b80a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b811:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b816:	75 08                	jne    c000b820 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b818:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b81e:	eb 38                	jmp    c000b858 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b820:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b825:	75 17                	jne    c000b83e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b82c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b82f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b835:	8b 10                	mov    edx,DWORD PTR [eax]
c000b837:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b83b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b83e:	89 c1                	mov    ecx,eax
c000b840:	83 e1 fd             	and    ecx,0xfffffffd
c000b843:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b849:	74 cd                	je     c000b818 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b84b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b850:	83 e0 ef             	and    eax,0xffffffef
c000b853:	83 f8 08             	cmp    eax,0x8
c000b856:	76 c0                	jbe    c000b818 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b858:	31 c0                	xor    eax,eax
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <ReservedFilename::isAtty()>:
c000b85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b860:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b863:	31 c0                	xor    eax,eax
c000b865:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b86b:	74 09                	je     c000b876 <ReservedFilename::isAtty()+0x1a>
c000b86d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b873:	0f 94 c0             	sete   al
c000b876:	c3                   	ret    
c000b877:	90                   	nop

c000b878 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b87c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b880:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b883:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b887:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b88c:	75 08                	jne    c000b896 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b88e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b894:	eb 3d                	jmp    c000b8d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b896:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b89b:	75 17                	jne    c000b8b4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b8a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8b1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b8b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b8b9:	75 04                	jne    c000b8bf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b8bb:	89 0a                	mov    DWORD PTR [edx],ecx
c000b8bd:	eb 14                	jmp    c000b8d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b8bf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b8c4:	74 c8                	je     c000b88e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8c6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8cb:	83 e0 ef             	and    eax,0xffffffef
c000b8ce:	83 f8 08             	cmp    eax,0x8
c000b8d1:	76 bb                	jbe    c000b88e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8d3:	31 c0                	xor    eax,eax
c000b8d5:	c3                   	ret    

c000b8d6 <UnixFile::getFileDescriptor()>:
c000b8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8dd:	c3                   	ret    

c000b8de <UnixFile::UnixFile(int)>:
c000b8de:	53                   	push   ebx
c000b8df:	83 ec 28             	sub    esp,0x28
c000b8e2:	ba 04 4b 02 c0       	mov    edx,0xc0024b04
c000b8e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8eb:	89 10                	mov    DWORD PTR [eax],edx
c000b8ed:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b8f5:	0f 8f 8c 01 00 00    	jg     c000ba87 <UnixFile::UnixFile(int)+0x1a9>
c000b8fb:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c000b900:	8d 50 01             	lea    edx,[eax+0x1]
c000b903:	89 15 c0 7c 02 c0    	mov    DWORD PTR ds:0xc0027cc0,edx
c000b909:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b90d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b910:	83 ec 08             	sub    esp,0x8
c000b913:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b917:	68 98 89 02 c0       	push   0xc0028998
c000b91c:	e8 9b 76 01 00       	call   c0022fbc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b921:	83 c4 10             	add    esp,0x10
c000b924:	a0 94 89 02 c0       	mov    al,ds:0xc0028994
c000b929:	83 f0 01             	xor    eax,0x1
c000b92c:	84 c0                	test   al,al
c000b92e:	0f 84 54 01 00 00    	je     c000ba88 <UnixFile::UnixFile(int)+0x1aa>
c000b934:	c6 05 94 89 02 c0 01 	mov    BYTE PTR ds:0xc0028994,0x1
c000b93b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b943:	83 ec 0c             	sub    esp,0xc
c000b946:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b94a:	e8 0c e4 ff ff       	call   c0009d5b <malloc>
c000b94f:	83 c4 10             	add    esp,0x10
c000b952:	89 c3                	mov    ebx,eax
c000b954:	83 ec 08             	sub    esp,0x8
c000b957:	68 03 ff ff 0f       	push   0xfffff03
c000b95c:	53                   	push   ebx
c000b95d:	e8 2c 01 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b962:	83 c4 10             	add    esp,0x10
c000b965:	89 1d 8c 89 02 c0    	mov    DWORD PTR ds:0xc002898c,ebx
c000b96b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b973:	83 ec 0c             	sub    esp,0xc
c000b976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b97a:	e8 dc e3 ff ff       	call   c0009d5b <malloc>
c000b97f:	83 c4 10             	add    esp,0x10
c000b982:	89 c3                	mov    ebx,eax
c000b984:	83 ec 08             	sub    esp,0x8
c000b987:	68 01 ff ff 0f       	push   0xfffff01
c000b98c:	53                   	push   ebx
c000b98d:	e8 fc 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b992:	83 c4 10             	add    esp,0x10
c000b995:	89 1d 90 89 02 c0    	mov    DWORD PTR ds:0xc0028990,ebx
c000b99b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b9a3:	83 ec 0c             	sub    esp,0xc
c000b9a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9aa:	e8 ac e3 ff ff       	call   c0009d5b <malloc>
c000b9af:	83 c4 10             	add    esp,0x10
c000b9b2:	89 c3                	mov    ebx,eax
c000b9b4:	83 ec 08             	sub    esp,0x8
c000b9b7:	68 00 ff ff 0f       	push   0xfffff00
c000b9bc:	53                   	push   ebx
c000b9bd:	e8 cc 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b9c2:	83 c4 10             	add    esp,0x10
c000b9c5:	89 1d 84 89 02 c0    	mov    DWORD PTR ds:0xc0028984,ebx
c000b9cb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b9d3:	83 ec 0c             	sub    esp,0xc
c000b9d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9da:	e8 7c e3 ff ff       	call   c0009d5b <malloc>
c000b9df:	83 c4 10             	add    esp,0x10
c000b9e2:	89 c3                	mov    ebx,eax
c000b9e4:	83 ec 08             	sub    esp,0x8
c000b9e7:	68 02 ff ff 0f       	push   0xfffff02
c000b9ec:	53                   	push   ebx
c000b9ed:	e8 9c 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b9f2:	83 c4 10             	add    esp,0x10
c000b9f5:	89 1d 88 89 02 c0    	mov    DWORD PTR ds:0xc0028988,ebx
c000b9fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ba03:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba08:	7f 7e                	jg     c000ba88 <UnixFile::UnixFile(int)+0x1aa>
c000ba0a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba12:	83 ec 0c             	sub    esp,0xc
c000ba15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba19:	e8 3d e3 ff ff       	call   c0009d5b <malloc>
c000ba1e:	83 c4 10             	add    esp,0x10
c000ba21:	89 c3                	mov    ebx,eax
c000ba23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba27:	05 10 ff ff 0f       	add    eax,0xfffff10
c000ba2c:	83 ec 08             	sub    esp,0x8
c000ba2f:	50                   	push   eax
c000ba30:	53                   	push   ebx
c000ba31:	e8 58 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba3d:	89 1c 85 60 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd76a0],ebx
c000ba44:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000ba4c:	83 ec 0c             	sub    esp,0xc
c000ba4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba53:	e8 03 e3 ff ff       	call   c0009d5b <malloc>
c000ba58:	83 c4 10             	add    esp,0x10
c000ba5b:	89 c3                	mov    ebx,eax
c000ba5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba61:	05 20 ff ff 0f       	add    eax,0xfffff20
c000ba66:	83 ec 08             	sub    esp,0x8
c000ba69:	50                   	push   eax
c000ba6a:	53                   	push   ebx
c000ba6b:	e8 1e 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba77:	89 1c 85 20 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd76e0],ebx
c000ba7e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ba82:	e9 7c ff ff ff       	jmp    c000ba03 <UnixFile::UnixFile(int)+0x125>
c000ba87:	90                   	nop
c000ba88:	83 c4 28             	add    esp,0x28
c000ba8b:	5b                   	pop    ebx
c000ba8c:	c3                   	ret    
c000ba8d:	90                   	nop

c000ba8e <ReservedFilename::ReservedFilename(int)>:
c000ba8e:	83 ec 0c             	sub    esp,0xc
c000ba91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba95:	83 ec 08             	sub    esp,0x8
c000ba98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba9c:	50                   	push   eax
c000ba9d:	e8 3c fe ff ff       	call   c000b8de <UnixFile::UnixFile(int)>
c000baa2:	83 c4 10             	add    esp,0x10
c000baa5:	ba 20 4b 02 c0       	mov    edx,0xc0024b20
c000baaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baae:	89 10                	mov    DWORD PTR [eax],edx
c000bab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bab4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bab8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000babb:	90                   	nop
c000babc:	83 c4 0c             	add    esp,0xc
c000babf:	c3                   	ret    

c000bac0 <UnixFile::~UnixFile()>:
c000bac0:	83 ec 1c             	sub    esp,0x1c
c000bac3:	ba 04 4b 02 c0       	mov    edx,0xc0024b04
c000bac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacc:	89 10                	mov    DWORD PTR [eax],edx
c000bace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bad5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000bada:	7f 73                	jg     c000bb4f <UnixFile::~UnixFile()+0x8f>
c000badc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bae4:	83 ec 0c             	sub    esp,0xc
c000bae7:	68 98 89 02 c0       	push   0xc0028998
c000baec:	e8 9f 75 01 00       	call   c0023090 <LinkedList<UnixFile>::getFirstElement()>
c000baf1:	83 c4 10             	add    esp,0x10
c000baf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000baf8:	83 ec 0c             	sub    esp,0xc
c000bafb:	68 98 89 02 c0       	push   0xc0028998
c000bb00:	e8 93 75 01 00       	call   c0023098 <LinkedList<UnixFile>::removeFirst()>
c000bb05:	83 c4 10             	add    esp,0x10
c000bb08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb0c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb10:	74 40                	je     c000bb52 <UnixFile::~UnixFile()+0x92>
c000bb12:	83 ec 08             	sub    esp,0x8
c000bb15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb19:	68 98 89 02 c0       	push   0xc0028998
c000bb1e:	e8 99 74 01 00       	call   c0022fbc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bb23:	83 c4 10             	add    esp,0x10
c000bb26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb2a:	8d 50 01             	lea    edx,[eax+0x1]
c000bb2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb31:	3d 88 13 00 00       	cmp    eax,0x1388
c000bb36:	0f 94 c0             	sete   al
c000bb39:	84 c0                	test   al,al
c000bb3b:	74 a7                	je     c000bae4 <UnixFile::~UnixFile()+0x24>
c000bb3d:	83 ec 0c             	sub    esp,0xc
c000bb40:	68 dc 4a 02 c0       	push   0xc0024adc
c000bb45:	e8 9b 94 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	eb 95                	jmp    c000bae4 <UnixFile::~UnixFile()+0x24>
c000bb4f:	90                   	nop
c000bb50:	eb 01                	jmp    c000bb53 <UnixFile::~UnixFile()+0x93>
c000bb52:	90                   	nop
c000bb53:	90                   	nop
c000bb54:	83 c4 1c             	add    esp,0x1c
c000bb57:	c3                   	ret    

c000bb58 <UnixFile::~UnixFile()>:
c000bb58:	83 ec 0c             	sub    esp,0xc
c000bb5b:	83 ec 0c             	sub    esp,0xc
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	e8 59 ff ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	83 ec 08             	sub    esp,0x8
c000bb6d:	6a 0c                	push   0xc
c000bb6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb73:	e8 ee 13 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000bb78:	83 c4 10             	add    esp,0x10
c000bb7b:	83 c4 0c             	add    esp,0xc
c000bb7e:	c3                   	ret    
c000bb7f:	90                   	nop

c000bb80 <ReservedFilename::~ReservedFilename()>:
c000bb80:	83 ec 0c             	sub    esp,0xc
c000bb83:	ba 20 4b 02 c0       	mov    edx,0xc0024b20
c000bb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb8c:	89 10                	mov    DWORD PTR [eax],edx
c000bb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb92:	83 ec 0c             	sub    esp,0xc
c000bb95:	50                   	push   eax
c000bb96:	e8 25 ff ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000bb9b:	83 c4 10             	add    esp,0x10
c000bb9e:	90                   	nop
c000bb9f:	83 c4 0c             	add    esp,0xc
c000bba2:	c3                   	ret    
c000bba3:	90                   	nop

c000bba4 <ReservedFilename::~ReservedFilename()>:
c000bba4:	83 ec 0c             	sub    esp,0xc
c000bba7:	83 ec 0c             	sub    esp,0xc
c000bbaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbae:	e8 cd ff ff ff       	call   c000bb80 <ReservedFilename::~ReservedFilename()>
c000bbb3:	83 c4 10             	add    esp,0x10
c000bbb6:	83 ec 08             	sub    esp,0x8
c000bbb9:	6a 0c                	push   0xc
c000bbbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbbf:	e8 a2 13 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000bbc4:	83 c4 10             	add    esp,0x10
c000bbc7:	83 c4 0c             	add    esp,0xc
c000bbca:	c3                   	ret    

c000bbcb <getFromFileDescriptor(int)>:
c000bbcb:	53                   	push   ebx
c000bbcc:	83 ec 08             	sub    esp,0x8
c000bbcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbd3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bbd9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bbdf:	7f 2c                	jg     c000bc0d <getFromFileDescriptor(int)+0x42>
c000bbe1:	83 ec 0c             	sub    esp,0xc
c000bbe4:	68 98 89 02 c0       	push   0xc0028998
c000bbe9:	e8 a2 74 01 00       	call   c0023090 <LinkedList<UnixFile>::getFirstElement()>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	85 c0                	test   eax,eax
c000bbf3:	75 04                	jne    c000bbf9 <getFromFileDescriptor(int)+0x2e>
c000bbf5:	31 c0                	xor    eax,eax
c000bbf7:	eb 6e                	jmp    c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bbf9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bbfc:	74 69                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bbfe:	52                   	push   edx
c000bbff:	52                   	push   edx
c000bc00:	50                   	push   eax
c000bc01:	68 98 89 02 c0       	push   0xc0028998
c000bc06:	e8 2f 75 01 00       	call   c002313a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc0b:	eb e1                	jmp    c000bbee <getFromFileDescriptor(int)+0x23>
c000bc0d:	a1 8c 89 02 c0       	mov    eax,ds:0xc002898c
c000bc12:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bc18:	74 4d                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc1a:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000bc1f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bc25:	74 40                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc27:	a1 88 89 02 c0       	mov    eax,ds:0xc0028988
c000bc2c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bc32:	74 33                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc34:	a1 84 89 02 c0       	mov    eax,ds:0xc0028984
c000bc39:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bc3f:	74 26                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc41:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bc47:	83 f8 08             	cmp    eax,0x8
c000bc4a:	77 09                	ja     c000bc55 <getFromFileDescriptor(int)+0x8a>
c000bc4c:	8b 04 85 60 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd76a0]
c000bc53:	eb 12                	jmp    c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc55:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bc5b:	83 fb 08             	cmp    ebx,0x8
c000bc5e:	77 95                	ja     c000bbf5 <getFromFileDescriptor(int)+0x2a>
c000bc60:	8b 04 9d 20 89 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd76e0]
c000bc67:	83 c4 08             	add    esp,0x8
c000bc6a:	5b                   	pop    ebx
c000bc6b:	c3                   	ret    

c000bc6c <__static_initialization_and_destruction_0(int, int)>:
c000bc6c:	83 ec 0c             	sub    esp,0xc
c000bc6f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bc74:	75 34                	jne    c000bcaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc76:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bc7e:	75 2a                	jne    c000bcaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc80:	83 ec 0c             	sub    esp,0xc
c000bc83:	68 98 89 02 c0       	push   0xc0028998
c000bc88:	e8 ed 72 01 00       	call   c0022f7a <LinkedList<UnixFile>::LinkedList()>
c000bc8d:	83 c4 10             	add    esp,0x10
c000bc90:	83 ec 04             	sub    esp,0x4
c000bc93:	68 dc 7a 02 c0       	push   0xc0027adc
c000bc98:	68 98 89 02 c0       	push   0xc0028998
c000bc9d:	68 78 2f 02 c0       	push   0xc0022f78
c000bca2:	e8 39 12 00 00       	call   c000cee0 <__cxa_atexit>
c000bca7:	83 c4 10             	add    esp,0x10
c000bcaa:	90                   	nop
c000bcab:	83 c4 0c             	add    esp,0xc
c000bcae:	c3                   	ret    

c000bcaf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bcaf:	83 ec 0c             	sub    esp,0xc
c000bcb2:	83 ec 08             	sub    esp,0x8
c000bcb5:	68 ff ff 00 00       	push   0xffff
c000bcba:	6a 01                	push   0x1
c000bcbc:	e8 ab ff ff ff       	call   c000bc6c <__static_initialization_and_destruction_0(int, int)>
c000bcc1:	83 c4 10             	add    esp,0x10
c000bcc4:	83 c4 0c             	add    esp,0xc
c000bcc7:	c3                   	ret    

c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bcc8:	53                   	push   ebx
c000bcc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bccd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcd1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bcd7:	89 c8                	mov    eax,ecx
c000bcd9:	d1 e8                	shr    eax,1
c000bcdb:	03 05 c8 7c 02 c0    	add    eax,DWORD PTR ds:0xc0027cc8
c000bce1:	83 e1 01             	and    ecx,0x1
c000bce4:	8a 10                	mov    dl,BYTE PTR [eax]
c000bce6:	75 09                	jne    c000bcf1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bce8:	83 e2 f0             	and    edx,0xfffffff0
c000bceb:	09 da                	or     edx,ebx
c000bced:	88 10                	mov    BYTE PTR [eax],dl
c000bcef:	5b                   	pop    ebx
c000bcf0:	c3                   	ret    
c000bcf1:	c1 e3 04             	shl    ebx,0x4
c000bcf4:	83 e2 0f             	and    edx,0xf
c000bcf7:	09 da                	or     edx,ebx
c000bcf9:	88 10                	mov    BYTE PTR [eax],dl
c000bcfb:	5b                   	pop    ebx
c000bcfc:	c3                   	ret    

c000bcfd <Virt::getPageState(unsigned long)>:
c000bcfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd01:	8b 0d c8 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027cc8
c000bd07:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd0d:	89 d0                	mov    eax,edx
c000bd0f:	d1 e8                	shr    eax,1
c000bd11:	83 e2 01             	and    edx,0x1
c000bd14:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bd17:	75 04                	jne    c000bd1d <Virt::getPageState(unsigned long)+0x20>
c000bd19:	83 e0 0f             	and    eax,0xf
c000bd1c:	c3                   	ret    
c000bd1d:	c0 e8 04             	shr    al,0x4
c000bd20:	c3                   	ret    

c000bd21 <Virt::allocateKernelVirtualPages(int)>:
c000bd21:	55                   	push   ebp
c000bd22:	31 ed                	xor    ebp,ebp
c000bd24:	57                   	push   edi
c000bd25:	56                   	push   esi
c000bd26:	53                   	push   ebx
c000bd27:	31 db                	xor    ebx,ebx
c000bd29:	83 ec 1c             	sub    esp,0x1c
c000bd2c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd30:	8b 3d c4 7c 02 c0    	mov    edi,DWORD PTR ds:0xc0027cc4
c000bd36:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bd3b:	57                   	push   edi
c000bd3c:	e8 bc ff ff ff       	call   c000bcfd <Virt::getPageState(unsigned long)>
c000bd41:	5a                   	pop    edx
c000bd42:	84 c0                	test   al,al
c000bd44:	75 3a                	jne    c000bd80 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bd46:	85 db                	test   ebx,ebx
c000bd48:	75 02                	jne    c000bd4c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bd4a:	89 fd                	mov    ebp,edi
c000bd4c:	43                   	inc    ebx
c000bd4d:	39 f3                	cmp    ebx,esi
c000bd4f:	74 5a                	je     c000bdab <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bd51:	47                   	inc    edi
c000bd52:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd58:	76 31                	jbe    c000bd8b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bd5a:	c7 05 c4 7c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027cc4,0xc8000
c000bd64:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bd69:	75 28                	jne    c000bd93 <Virt::allocateKernelVirtualPages(int)+0x72>
c000bd6b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bd70:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bd75:	57                   	push   edi
c000bd76:	e8 82 ff ff ff       	call   c000bcfd <Virt::getPageState(unsigned long)>
c000bd7b:	5a                   	pop    edx
c000bd7c:	84 c0                	test   al,al
c000bd7e:	74 c6                	je     c000bd46 <Virt::allocateKernelVirtualPages(int)+0x25>
c000bd80:	31 db                	xor    ebx,ebx
c000bd82:	47                   	inc    edi
c000bd83:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd89:	77 cf                	ja     c000bd5a <Virt::allocateKernelVirtualPages(int)+0x39>
c000bd8b:	89 3d c4 7c 02 c0    	mov    DWORD PTR ds:0xc0027cc4,edi
c000bd91:	eb a8                	jmp    c000bd3b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bd93:	83 ec 0c             	sub    esp,0xc
c000bd96:	68 34 4b 02 c0       	push   0xc0024b34
c000bd9b:	e8 45 92 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000bda0:	8b 3d c4 7c 02 c0    	mov    edi,DWORD PTR ds:0xc0027cc4
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	eb 90                	jmp    c000bd3b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bdab:	89 2d c4 7c 02 c0    	mov    DWORD PTR ds:0xc0027cc4,ebp
c000bdb1:	4b                   	dec    ebx
c000bdb2:	74 5f                	je     c000be13 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bdb4:	85 f6                	test   esi,esi
c000bdb6:	74 3d                	je     c000bdf5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdb8:	89 e8                	mov    eax,ebp
c000bdba:	31 db                	xor    ebx,ebx
c000bdbc:	8d 7e ff             	lea    edi,[esi-0x1]
c000bdbf:	eb 14                	jmp    c000bdd5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bdc1:	6a 01                	push   0x1
c000bdc3:	43                   	inc    ebx
c000bdc4:	50                   	push   eax
c000bdc5:	e8 fe fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdca:	58                   	pop    eax
c000bdcb:	39 f3                	cmp    ebx,esi
c000bdcd:	5a                   	pop    edx
c000bdce:	74 25                	je     c000bdf5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdd0:	a1 c4 7c 02 c0       	mov    eax,ds:0xc0027cc4
c000bdd5:	8d 50 01             	lea    edx,[eax+0x1]
c000bdd8:	85 db                	test   ebx,ebx
c000bdda:	89 15 c4 7c 02 c0    	mov    DWORD PTR ds:0xc0027cc4,edx
c000bde0:	74 20                	je     c000be02 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bde2:	39 df                	cmp    edi,ebx
c000bde4:	75 db                	jne    c000bdc1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bde6:	6a 03                	push   0x3
c000bde8:	43                   	inc    ebx
c000bde9:	50                   	push   eax
c000bdea:	e8 d9 fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdef:	59                   	pop    ecx
c000bdf0:	39 f3                	cmp    ebx,esi
c000bdf2:	58                   	pop    eax
c000bdf3:	75 db                	jne    c000bdd0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bdf5:	83 c4 1c             	add    esp,0x1c
c000bdf8:	89 e8                	mov    eax,ebp
c000bdfa:	5b                   	pop    ebx
c000bdfb:	c1 e0 0c             	shl    eax,0xc
c000bdfe:	5e                   	pop    esi
c000bdff:	5f                   	pop    edi
c000be00:	5d                   	pop    ebp
c000be01:	c3                   	ret    
c000be02:	6a 02                	push   0x2
c000be04:	bb 01 00 00 00       	mov    ebx,0x1
c000be09:	50                   	push   eax
c000be0a:	e8 b9 fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be0f:	58                   	pop    eax
c000be10:	5a                   	pop    edx
c000be11:	eb bd                	jmp    c000bdd0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be13:	6a 04                	push   0x4
c000be15:	8d 45 01             	lea    eax,[ebp+0x1]
c000be18:	55                   	push   ebp
c000be19:	a3 c4 7c 02 c0       	mov    ds:0xc0027cc4,eax
c000be1e:	e8 a5 fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be23:	59                   	pop    ecx
c000be24:	89 e8                	mov    eax,ebp
c000be26:	5b                   	pop    ebx
c000be27:	c1 e0 0c             	shl    eax,0xc
c000be2a:	83 c4 1c             	add    esp,0x1c
c000be2d:	5b                   	pop    ebx
c000be2e:	5e                   	pop    esi
c000be2f:	5f                   	pop    edi
c000be30:	5d                   	pop    ebp
c000be31:	c3                   	ret    

c000be32 <Virt::freeSwapfilePage(unsigned long)>:
c000be32:	53                   	push   ebx
c000be33:	8b 15 ac 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289ac
c000be39:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be3d:	b8 01 00 00 00       	mov    eax,0x1
c000be42:	89 cb                	mov    ebx,ecx
c000be44:	d3 e0                	shl    eax,cl
c000be46:	c1 eb 05             	shr    ebx,0x5
c000be49:	f7 d0                	not    eax
c000be4b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000be4e:	5b                   	pop    ebx
c000be4f:	c3                   	ret    

c000be50 <Virt::swapIDToSector(unsigned long)>:
c000be50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be54:	0f af 05 cc 7c 02 c0 	imul   eax,DWORD PTR ds:0xc0027ccc
c000be5b:	03 05 d4 7c 02 c0    	add    eax,DWORD PTR ds:0xc0027cd4
c000be61:	c3                   	ret    

c000be62 <Virt::allocateSwapfilePage()>:
c000be62:	55                   	push   ebp
c000be63:	31 d2                	xor    edx,edx
c000be65:	57                   	push   edi
c000be66:	56                   	push   esi
c000be67:	53                   	push   ebx
c000be68:	83 ec 0c             	sub    esp,0xc
c000be6b:	8b 0d cc 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ccc
c000be71:	a1 d0 7c 02 c0       	mov    eax,ds:0xc0027cd0
c000be76:	f7 f1                	div    ecx
c000be78:	39 0d d0 7c 02 c0    	cmp    DWORD PTR ds:0xc0027cd0,ecx
c000be7e:	72 2d                	jb     c000bead <Virt::allocateSwapfilePage()+0x4b>
c000be80:	8b 35 ac 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289ac
c000be86:	8b 16                	mov    edx,DWORD PTR [esi]
c000be88:	f6 c2 01             	test   dl,0x1
c000be8b:	74 3c                	je     c000bec9 <Virt::allocateSwapfilePage()+0x67>
c000be8d:	31 c9                	xor    ecx,ecx
c000be8f:	bf 01 00 00 00       	mov    edi,0x1
c000be94:	eb 12                	jmp    c000bea8 <Virt::allocateSwapfilePage()+0x46>
c000be96:	89 fd                	mov    ebp,edi
c000be98:	89 ca                	mov    edx,ecx
c000be9a:	d3 e5                	shl    ebp,cl
c000be9c:	c1 ea 05             	shr    edx,0x5
c000be9f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bea2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bea4:	85 ea                	test   edx,ebp
c000bea6:	74 2a                	je     c000bed2 <Virt::allocateSwapfilePage()+0x70>
c000bea8:	41                   	inc    ecx
c000bea9:	39 c8                	cmp    eax,ecx
c000beab:	77 e9                	ja     c000be96 <Virt::allocateSwapfilePage()+0x34>
c000bead:	83 ec 0c             	sub    esp,0xc
c000beb0:	68 ec 4c 02 c0       	push   0xc0024cec
c000beb5:	e8 2b 91 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000beba:	83 c4 10             	add    esp,0x10
c000bebd:	31 c9                	xor    ecx,ecx
c000bebf:	83 c4 0c             	add    esp,0xc
c000bec2:	89 c8                	mov    eax,ecx
c000bec4:	5b                   	pop    ebx
c000bec5:	5e                   	pop    esi
c000bec6:	5f                   	pop    edi
c000bec7:	5d                   	pop    ebp
c000bec8:	c3                   	ret    
c000bec9:	89 f3                	mov    ebx,esi
c000becb:	bd 01 00 00 00       	mov    ebp,0x1
c000bed0:	31 c9                	xor    ecx,ecx
c000bed2:	09 ea                	or     edx,ebp
c000bed4:	89 c8                	mov    eax,ecx
c000bed6:	89 13                	mov    DWORD PTR [ebx],edx
c000bed8:	83 c4 0c             	add    esp,0xc
c000bedb:	5b                   	pop    ebx
c000bedc:	5e                   	pop    esi
c000bedd:	5f                   	pop    edi
c000bede:	5d                   	pop    ebp
c000bedf:	c3                   	ret    

c000bee0 <Virt::virtualMemorySetup()>:
c000bee0:	53                   	push   ebx
c000bee1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bee6:	6a 0f                	push   0xf
c000bee8:	53                   	push   ebx
c000bee9:	43                   	inc    ebx
c000beea:	e8 d9 fd ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000beef:	58                   	pop    eax
c000bef0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bef6:	5a                   	pop    edx
c000bef7:	75 ed                	jne    c000bee6 <Virt::virtualMemorySetup()+0x6>
c000bef9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000befe:	6a 00                	push   0x0
c000bf00:	53                   	push   ebx
c000bf01:	43                   	inc    ebx
c000bf02:	e8 c1 fd ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf07:	59                   	pop    ecx
c000bf08:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf0e:	58                   	pop    eax
c000bf0f:	75 ed                	jne    c000befe <Virt::virtualMemorySetup()+0x1e>
c000bf11:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bf16:	6a 0f                	push   0xf
c000bf18:	53                   	push   ebx
c000bf19:	43                   	inc    ebx
c000bf1a:	e8 a9 fd ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf1f:	58                   	pop    eax
c000bf20:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bf26:	5a                   	pop    edx
c000bf27:	75 ed                	jne    c000bf16 <Virt::virtualMemorySetup()+0x36>
c000bf29:	5b                   	pop    ebx
c000bf2a:	c3                   	ret    

c000bf2b <Virt::setupPageSwapping(int)>:
c000bf2b:	53                   	push   ebx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf33:	a1 48 8e 02 c0       	mov    eax,ds:0xc0028e48
c000bf38:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bf3e:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf40:	53                   	push   ebx
c000bf41:	c1 e3 0b             	shl    ebx,0xb
c000bf44:	68 03 4d 02 c0       	push   0xc0024d03
c000bf49:	50                   	push   eax
c000bf4a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bf4d:	89 1d d0 7c 02 c0    	mov    DWORD PTR ds:0xc0027cd0,ebx
c000bf53:	c6 05 d8 7c 02 c0 43 	mov    BYTE PTR ds:0xc0027cd8,0x43
c000bf5a:	c1 eb 08             	shr    ebx,0x8
c000bf5d:	a3 d4 7c 02 c0       	mov    ds:0xc0027cd4,eax
c000bf62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf65:	c7 05 cc 7c 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0027ccc,0x8
c000bf6f:	e8 e7 dd ff ff       	call   c0009d5b <malloc>
c000bf74:	83 c4 0c             	add    esp,0xc
c000bf77:	89 c1                	mov    ecx,eax
c000bf79:	a3 ac 89 02 c0       	mov    ds:0xc00289ac,eax
c000bf7e:	31 d2                	xor    edx,edx
c000bf80:	a1 d0 7c 02 c0       	mov    eax,ds:0xc0027cd0
c000bf85:	f7 35 cc 7c 02 c0    	div    DWORD PTR ds:0xc0027ccc
c000bf8b:	c1 e8 05             	shr    eax,0x5
c000bf8e:	50                   	push   eax
c000bf8f:	6a 00                	push   0x0
c000bf91:	51                   	push   ecx
c000bf92:	e8 ed 46 ff ff       	call   c0000684 <memset>
c000bf97:	83 c4 18             	add    esp,0x18
c000bf9a:	5b                   	pop    ebx
c000bf9b:	c3                   	ret    

c000bf9c <VAS::VAS()>:
c000bf9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfa0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bfb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfb6:	a3 b0 89 02 c0       	mov    ds:0xc00289b0,eax
c000bfbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfbf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bfc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bfca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfce:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bfd5:	90                   	nop
c000bfd6:	c3                   	ret    
c000bfd7:	90                   	nop

c000bfd8 <VAS::VAS(VAS*)>:
c000bfd8:	83 ec 0c             	sub    esp,0xc
c000bfdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfea:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bff1:	83 ec 0c             	sub    esp,0xc
c000bff4:	68 54 4b 02 c0       	push   0xc0024b54
c000bff9:	e8 e7 8f 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000bffe:	83 c4 10             	add    esp,0x10
c000c001:	90                   	nop
c000c002:	83 c4 0c             	add    esp,0xc
c000c005:	c3                   	ret    

c000c006 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000c006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c00a:	89 c2                	mov    edx,eax
c000c00c:	c1 e8 0a             	shr    eax,0xa
c000c00f:	c1 ea 16             	shr    edx,0x16
c000c012:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c017:	19 c9                	sbb    ecx,ecx
c000c019:	c1 e2 0c             	shl    edx,0xc
c000c01c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c022:	25 fc 0f 00 00       	and    eax,0xffc
c000c027:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c02e:	01 d0                	add    eax,edx
c000c030:	c3                   	ret    
c000c031:	90                   	nop

c000c032 <VAS::getPageTableEntry(unsigned long)>:
c000c032:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c036:	89 ca                	mov    edx,ecx
c000c038:	c1 e9 0a             	shr    ecx,0xa
c000c03b:	c1 ea 16             	shr    edx,0x16
c000c03e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c044:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c04a:	c1 e0 0c             	shl    eax,0xc
c000c04d:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c050:	c3                   	ret    

c000c051 <Virt::freeKernelVirtualPages(unsigned long)>:
c000c051:	57                   	push   edi
c000c052:	56                   	push   esi
c000c053:	be 01 00 00 00       	mov    esi,0x1
c000c058:	53                   	push   ebx
c000c059:	83 ec 10             	sub    esp,0x10
c000c05c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c060:	c1 eb 0c             	shr    ebx,0xc
c000c063:	eb 3f                	jmp    c000c0a4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c065:	83 ec 08             	sub    esp,0x8
c000c068:	57                   	push   edi
c000c069:	ff 35 b0 89 02 c0    	push   DWORD PTR ds:0xc00289b0
c000c06f:	e8 be ff ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c074:	83 c4 10             	add    esp,0x10
c000c077:	8b 00                	mov    eax,DWORD PTR [eax]
c000c079:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c07d:	f6 c4 04             	test   ah,0x4
c000c080:	75 5f                	jne    c000c0e1 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c082:	80 fa 04             	cmp    dl,0x4
c000c085:	74 78                	je     c000c0ff <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c087:	80 fa 02             	cmp    dl,0x2
c000c08a:	0f 84 88 00 00 00    	je     c000c118 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c090:	80 fa 03             	cmp    dl,0x3
c000c093:	0f 84 ad 00 00 00    	je     c000c146 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c099:	fe ca                	dec    dl
c000c09b:	0f 84 92 00 00 00    	je     c000c133 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c0a1:	43                   	inc    ebx
c000c0a2:	31 f6                	xor    esi,esi
c000c0a4:	53                   	push   ebx
c000c0a5:	89 df                	mov    edi,ebx
c000c0a7:	e8 51 fc ff ff       	call   c000bcfd <Virt::getPageState(unsigned long)>
c000c0ac:	c1 e7 0c             	shl    edi,0xc
c000c0af:	59                   	pop    ecx
c000c0b0:	84 c0                	test   al,al
c000c0b2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c0b6:	75 ad                	jne    c000c065 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c0b8:	83 ec 0c             	sub    esp,0xc
c000c0bb:	68 1a 4d 02 c0       	push   0xc0024d1a
c000c0c0:	e8 20 8f 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000c0c5:	58                   	pop    eax
c000c0c6:	5a                   	pop    edx
c000c0c7:	57                   	push   edi
c000c0c8:	ff 35 b0 89 02 c0    	push   DWORD PTR ds:0xc00289b0
c000c0ce:	e8 5f ff ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0d8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0dc:	f6 c4 04             	test   ah,0x4
c000c0df:	74 c0                	je     c000c0a1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c0e1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c0e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0ea:	83 ec 0c             	sub    esp,0xc
c000c0ed:	50                   	push   eax
c000c0ee:	e8 9c e2 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0fa:	80 fa 04             	cmp    dl,0x4
c000c0fd:	75 88                	jne    c000c087 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c0ff:	89 f0                	mov    eax,esi
c000c101:	84 c0                	test   al,al
c000c103:	75 47                	jne    c000c14c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c105:	c7 44 24 20 78 4b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024b78
c000c10d:	83 c4 10             	add    esp,0x10
c000c110:	5b                   	pop    ebx
c000c111:	5e                   	pop    esi
c000c112:	5f                   	pop    edi
c000c113:	e9 cd 8e 00 00       	jmp    c0014fe5 <Krnl::panic(char const*)>
c000c118:	89 f0                	mov    eax,esi
c000c11a:	84 c0                	test   al,al
c000c11c:	75 15                	jne    c000c133 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	68 36 4d 02 c0       	push   0xc0024d36
c000c126:	e8 ba 8e 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	e9 6e ff ff ff       	jmp    c000c0a1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c133:	83 ec 08             	sub    esp,0x8
c000c136:	6a 00                	push   0x0
c000c138:	53                   	push   ebx
c000c139:	e8 8a fb ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c13e:	83 c4 10             	add    esp,0x10
c000c141:	e9 5b ff ff ff       	jmp    c000c0a1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c146:	89 f0                	mov    eax,esi
c000c148:	84 c0                	test   al,al
c000c14a:	75 15                	jne    c000c161 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c14c:	83 ec 08             	sub    esp,0x8
c000c14f:	6a 00                	push   0x0
c000c151:	53                   	push   ebx
c000c152:	e8 71 fb ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c157:	83 c4 10             	add    esp,0x10
c000c15a:	83 c4 10             	add    esp,0x10
c000c15d:	5b                   	pop    ebx
c000c15e:	5e                   	pop    esi
c000c15f:	5f                   	pop    edi
c000c160:	c3                   	ret    
c000c161:	c7 44 24 20 52 4d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024d52
c000c169:	83 c4 10             	add    esp,0x10
c000c16c:	5b                   	pop    ebx
c000c16d:	5e                   	pop    esi
c000c16e:	5f                   	pop    edi
c000c16f:	e9 71 8e 00 00       	jmp    c0014fe5 <Krnl::panic(char const*)>

c000c174 <VAS::freeAllocatedPages(unsigned long)>:
c000c174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c178:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c17c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c180:	74 09                	je     c000c18b <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c182:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c186:	e9 c6 fe ff ff       	jmp    c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c18b:	c7 44 24 04 9c 4b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024b9c
c000c193:	e9 af 0e 00 00       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>

c000c198 <VAS::virtualToPhysical(unsigned long)>:
c000c198:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c19c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1a0:	e8 8d fe ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c1a5:	5a                   	pop    edx
c000c1a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1a8:	59                   	pop    ecx
c000c1a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c1ae:	c3                   	ret    
c000c1af:	90                   	nop

c000c1b0 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c1b0:	55                   	push   ebp
c000c1b1:	57                   	push   edi
c000c1b2:	56                   	push   esi
c000c1b3:	53                   	push   ebx
c000c1b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c1bc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c1c0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c1c4:	85 db                	test   ebx,ebx
c000c1c6:	7e 22                	jle    c000c1ea <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c1c8:	c1 e3 0c             	shl    ebx,0xc
c000c1cb:	01 f3                	add    ebx,esi
c000c1cd:	56                   	push   esi
c000c1ce:	81 c6 00 10 00 00    	add    esi,0x1000
c000c1d4:	55                   	push   ebp
c000c1d5:	e8 58 fe ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c1da:	5a                   	pop    edx
c000c1db:	59                   	pop    ecx
c000c1dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1de:	21 f9                	and    ecx,edi
c000c1e0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c1e4:	39 f3                	cmp    ebx,esi
c000c1e6:	89 08                	mov    DWORD PTR [eax],ecx
c000c1e8:	75 e3                	jne    c000c1cd <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c1ea:	5b                   	pop    ebx
c000c1eb:	5e                   	pop    esi
c000c1ec:	5f                   	pop    edi
c000c1ed:	5d                   	pop    ebp
c000c1ee:	c3                   	ret    
c000c1ef:	90                   	nop

c000c1f0 <VAS::setToWriteCombining(unsigned long, int)>:
c000c1f0:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000c1f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c1fb:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c202:	75 01                	jne    c000c205 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c204:	c3                   	ret    
c000c205:	68 80 00 00 00       	push   0x80
c000c20a:	6a ff                	push   0xffffffff
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	e8 93 ff ff ff       	call   c000c1b0 <VAS::reflagRange(unsigned long, int, int, int)>
c000c21d:	83 c4 14             	add    esp,0x14
c000c220:	c3                   	ret    
c000c221:	90                   	nop

c000c222 <VAS::mapOtherVASIn(bool, VAS*)>:
c000c222:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c22b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c22e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c232:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c235:	19 c0                	sbb    eax,eax
c000c237:	83 ca 03             	or     edx,0x3
c000c23a:	83 e0 fc             	and    eax,0xfffffffc
c000c23d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c244:	0f 20 d8             	mov    eax,cr3
c000c247:	0f 22 d8             	mov    cr3,eax
c000c24a:	c3                   	ret    
c000c24b:	90                   	nop

c000c24c <VAS::~VAS()>:
c000c24c:	83 ec 2c             	sub    esp,0x2c
c000c24f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c257:	fa                   	cli    
c000c258:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000c25d:	40                   	inc    eax
c000c25e:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000c263:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c268:	8b 00                	mov    eax,DWORD PTR [eax]
c000c26a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c26d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c273:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c277:	6a 01                	push   0x1
c000c279:	50                   	push   eax
c000c27a:	e8 a3 ff ff ff       	call   c000c222 <VAS::mapOtherVASIn(bool, VAS*)>
c000c27f:	83 c4 0c             	add    esp,0xc
c000c282:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c28a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c292:	0f 8f d4 00 00 00    	jg     c000c36c <VAS::~VAS()+0x120>
c000c298:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c29c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c29f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2a3:	c1 e2 02             	shl    edx,0x2
c000c2a6:	01 d0                	add    eax,edx
c000c2a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2b2:	83 e0 01             	and    eax,0x1
c000c2b5:	0f 84 a8 00 00 00    	je     c000c363 <VAS::~VAS()+0x117>
c000c2bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c2c3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c2cb:	7f 72                	jg     c000c33f <VAS::~VAS()+0xf3>
c000c2cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2d1:	c1 e0 0a             	shl    eax,0xa
c000c2d4:	89 c2                	mov    edx,eax
c000c2d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2da:	01 d0                	add    eax,edx
c000c2dc:	c1 e0 0c             	shl    eax,0xc
c000c2df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2e3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c2e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c2ed:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c2f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2f7:	6a 01                	push   0x1
c000c2f9:	50                   	push   eax
c000c2fa:	e8 07 fd ff ff       	call   c000c006 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c2ff:	83 c4 0c             	add    esp,0xc
c000c302:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c30a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c30c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c314:	25 01 04 00 00       	and    eax,0x401
c000c319:	3d 01 04 00 00       	cmp    eax,0x401
c000c31e:	75 19                	jne    c000c339 <VAS::~VAS()+0xed>
c000c320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c324:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c329:	83 ec 0c             	sub    esp,0xc
c000c32c:	50                   	push   eax
c000c32d:	e8 5d e0 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c332:	83 c4 10             	add    esp,0x10
c000c335:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c339:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c33d:	eb 84                	jmp    c000c2c3 <VAS::~VAS()+0x77>
c000c33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c343:	25 00 04 00 00       	and    eax,0x400
c000c348:	74 19                	je     c000c363 <VAS::~VAS()+0x117>
c000c34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c353:	83 ec 0c             	sub    esp,0xc
c000c356:	50                   	push   eax
c000c357:	e8 33 e0 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c35c:	83 c4 10             	add    esp,0x10
c000c35f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c363:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c367:	e9 1e ff ff ff       	jmp    c000c28a <VAS::~VAS()+0x3e>
c000c36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c370:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c373:	83 ec 0c             	sub    esp,0xc
c000c376:	50                   	push   eax
c000c377:	e8 d5 fc ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c37c:	83 c4 10             	add    esp,0x10
c000c37f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c383:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c386:	83 ec 0c             	sub    esp,0xc
c000c389:	50                   	push   eax
c000c38a:	e8 00 e0 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c38f:	83 c4 10             	add    esp,0x10
c000c392:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c396:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c39a:	c1 e0 02             	shl    eax,0x2
c000c39d:	83 ec 08             	sub    esp,0x8
c000c3a0:	50                   	push   eax
c000c3a1:	68 c0 4b 02 c0       	push   0xc0024bc0
c000c3a6:	e8 9c 0c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000c3ab:	83 c4 10             	add    esp,0x10
c000c3ae:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000c3b3:	48                   	dec    eax
c000c3b4:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000c3b9:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000c3be:	85 c0                	test   eax,eax
c000c3c0:	75 01                	jne    c000c3c3 <VAS::~VAS()+0x177>
c000c3c2:	fb                   	sti    
c000c3c3:	90                   	nop
c000c3c4:	83 c4 2c             	add    esp,0x2c
c000c3c7:	c3                   	ret    

c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c3c8:	55                   	push   ebp
c000c3c9:	57                   	push   edi
c000c3ca:	56                   	push   esi
c000c3cb:	53                   	push   ebx
c000c3cc:	83 ec 1c             	sub    esp,0x1c
c000c3cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c3d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3d7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c3dd:	77 08                	ja     c000c3e7 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c3df:	0f 20 d8             	mov    eax,cr3
c000c3e2:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c3e5:	75 47                	jne    c000c42e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c3e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c3eb:	09 d8                	or     eax,ebx
c000c3ed:	a9 ff 0f 00 00       	test   eax,0xfff
c000c3f2:	75 57                	jne    c000c44b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c3f4:	89 de                	mov    esi,ebx
c000c3f6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3f9:	c1 ee 16             	shr    esi,0x16
c000c3fc:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c403:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c407:	74 54                	je     c000c45d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c409:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c40d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c413:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c417:	c1 e6 0c             	shl    esi,0xc
c000c41a:	c1 eb 0a             	shr    ebx,0xa
c000c41d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c423:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c426:	83 c4 1c             	add    esp,0x1c
c000c429:	5b                   	pop    ebx
c000c42a:	5e                   	pop    esi
c000c42b:	5f                   	pop    edi
c000c42c:	5d                   	pop    ebp
c000c42d:	c3                   	ret    
c000c42e:	83 ec 0c             	sub    esp,0xc
c000c431:	68 e0 4b 02 c0       	push   0xc0024be0
c000c436:	e8 0c 0c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000c43b:	83 c4 10             	add    esp,0x10
c000c43e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c442:	09 d8                	or     eax,ebx
c000c444:	a9 ff 0f 00 00       	test   eax,0xfff
c000c449:	74 a9                	je     c000c3f4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c44b:	83 ec 0c             	sub    esp,0xc
c000c44e:	68 48 4c 02 c0       	push   0xc0024c48
c000c453:	e8 8d 8b 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000c458:	83 c4 10             	add    esp,0x10
c000c45b:	eb 97                	jmp    c000c3f4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c461:	e8 ac df ff ff       	call   c000a412 <Phys::allocatePage()>
c000c466:	83 ec 0c             	sub    esp,0xc
c000c469:	89 c5                	mov    ebp,eax
c000c46b:	8b 0d b0 89 02 c0    	mov    ecx,DWORD PTR ds:0xc00289b0
c000c471:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c475:	6a 01                	push   0x1
c000c477:	e8 a5 f8 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c47c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c483:	6a 01                	push   0x1
c000c485:	50                   	push   eax
c000c486:	55                   	push   ebp
c000c487:	81 cd 07 04 00 00    	or     ebp,0x407
c000c48d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c491:	51                   	push   ecx
c000c492:	e8 27 02 00 00       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c497:	83 c4 1c             	add    esp,0x1c
c000c49a:	68 00 10 00 00       	push   0x1000
c000c49f:	6a 00                	push   0x0
c000c4a1:	50                   	push   eax
c000c4a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4a6:	e8 d9 41 ff ff       	call   c0000684 <memset>
c000c4ab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4b2:	e8 9a fb ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c4b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4bb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c4be:	83 c4 10             	add    esp,0x10
c000c4c1:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c4c4:	e9 40 ff ff ff       	jmp    c000c409 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c4c9:	90                   	nop

c000c4ca <VAS::allocatePages(int, int)>:
c000c4ca:	55                   	push   ebp
c000c4cb:	57                   	push   edi
c000c4cc:	56                   	push   esi
c000c4cd:	53                   	push   ebx
c000c4ce:	83 ec 1c             	sub    esp,0x1c
c000c4d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c4d5:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000c4da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c4e0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c4e6:	83 e0 01             	and    eax,0x1
c000c4e9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c4ed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c4f1:	0f 85 cc 00 00 00    	jne    c000c5c3 <VAS::allocatePages(int, int)+0xf9>
c000c4f7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c4fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c4fe:	85 c0                	test   eax,eax
c000c500:	0f 84 a1 00 00 00    	je     c000c5a7 <VAS::allocatePages(int, int)+0xdd>
c000c506:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c50a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c50e:	c1 e6 0c             	shl    esi,0xc
c000c511:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c515:	85 c0                	test   eax,eax
c000c517:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c51a:	7e 33                	jle    c000c54f <VAS::allocatePages(int, int)+0x85>
c000c51c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c520:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c524:	81 cd 00 04 00 00    	or     ebp,0x400
c000c52a:	e8 e3 de ff ff       	call   c000a412 <Phys::allocatePage()>
c000c52f:	55                   	push   ebp
c000c530:	53                   	push   ebx
c000c531:	50                   	push   eax
c000c532:	57                   	push   edi
c000c533:	e8 90 fe ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c538:	83 c4 10             	add    esp,0x10
c000c53b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c540:	74 03                	je     c000c545 <VAS::allocatePages(int, int)+0x7b>
c000c542:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c545:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c54b:	39 de                	cmp    esi,ebx
c000c54d:	75 db                	jne    c000c52a <VAS::allocatePages(int, int)+0x60>
c000c54f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c554:	75 12                	jne    c000c568 <VAS::allocatePages(int, int)+0x9e>
c000c556:	0f 20 d8             	mov    eax,cr3
c000c559:	0f 22 d8             	mov    cr3,eax
c000c55c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c560:	83 c4 1c             	add    esp,0x1c
c000c563:	5b                   	pop    ebx
c000c564:	5e                   	pop    esi
c000c565:	5f                   	pop    edi
c000c566:	5d                   	pop    ebp
c000c567:	c3                   	ret    
c000c568:	c1 ee 0a             	shr    esi,0xa
c000c56b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c56f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c575:	c1 eb 0a             	shr    ebx,0xa
c000c578:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c57e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c584:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c58a:	39 c3                	cmp    ebx,eax
c000c58c:	77 ce                	ja     c000c55c <VAS::allocatePages(int, int)+0x92>
c000c58e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c591:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c597:	39 d8                	cmp    eax,ebx
c000c599:	73 f3                	jae    c000c58e <VAS::allocatePages(int, int)+0xc4>
c000c59b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c59f:	83 c4 1c             	add    esp,0x1c
c000c5a2:	5b                   	pop    ebx
c000c5a3:	5e                   	pop    esi
c000c5a4:	5f                   	pop    edi
c000c5a5:	5d                   	pop    ebp
c000c5a6:	c3                   	ret    
c000c5a7:	83 ec 0c             	sub    esp,0xc
c000c5aa:	68 6c 4c 02 c0       	push   0xc0024c6c
c000c5af:	e8 31 8a 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000c5b4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c5b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5bb:	83 c4 10             	add    esp,0x10
c000c5be:	e9 43 ff ff ff       	jmp    c000c506 <VAS::allocatePages(int, int)+0x3c>
c000c5c3:	83 ec 0c             	sub    esp,0xc
c000c5c6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c5ca:	e8 52 f7 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c5cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5d3:	83 c4 10             	add    esp,0x10
c000c5d6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c5db:	0f 87 9b 00 00 00    	ja     c000c67c <VAS::allocatePages(int, int)+0x1b2>
c000c5e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c5e5:	85 d2                	test   edx,edx
c000c5e7:	7e 3c                	jle    c000c625 <VAS::allocatePages(int, int)+0x15b>
c000c5e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5ed:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c5f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5f5:	c1 e5 0c             	shl    ebp,0xc
c000c5f8:	81 ce 00 04 00 00    	or     esi,0x400
c000c5fe:	01 dd                	add    ebp,ebx
c000c600:	e8 0d de ff ff       	call   c000a412 <Phys::allocatePage()>
c000c605:	56                   	push   esi
c000c606:	53                   	push   ebx
c000c607:	50                   	push   eax
c000c608:	57                   	push   edi
c000c609:	e8 ba fd ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c60e:	83 c4 10             	add    esp,0x10
c000c611:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c616:	74 03                	je     c000c61b <VAS::allocatePages(int, int)+0x151>
c000c618:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c61b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c621:	39 dd                	cmp    ebp,ebx
c000c623:	75 db                	jne    c000c600 <VAS::allocatePages(int, int)+0x136>
c000c625:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c62a:	0f 84 26 ff ff ff    	je     c000c556 <VAS::allocatePages(int, int)+0x8c>
c000c630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c634:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c638:	89 d3                	mov    ebx,edx
c000c63a:	c1 e0 0c             	shl    eax,0xc
c000c63d:	c1 eb 0a             	shr    ebx,0xa
c000c640:	01 d0                	add    eax,edx
c000c642:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c648:	c1 e8 0a             	shr    eax,0xa
c000c64b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c651:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c656:	2d 00 00 40 00       	sub    eax,0x400000
c000c65b:	39 c3                	cmp    ebx,eax
c000c65d:	0f 87 f9 fe ff ff    	ja     c000c55c <VAS::allocatePages(int, int)+0x92>
c000c663:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c666:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c66c:	39 d8                	cmp    eax,ebx
c000c66e:	73 f3                	jae    c000c663 <VAS::allocatePages(int, int)+0x199>
c000c670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c674:	83 c4 1c             	add    esp,0x1c
c000c677:	5b                   	pop    ebx
c000c678:	5e                   	pop    esi
c000c679:	5f                   	pop    edi
c000c67a:	5d                   	pop    ebp
c000c67b:	c3                   	ret    
c000c67c:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000c681:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c687:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c68e:	0f 84 4d ff ff ff    	je     c000c5e1 <VAS::allocatePages(int, int)+0x117>
c000c694:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c69c:	e9 40 ff ff ff       	jmp    c000c5e1 <VAS::allocatePages(int, int)+0x117>
c000c6a1:	90                   	nop

c000c6a2 <VAS::setCPUSpecific(unsigned long)>:
c000c6a2:	83 ec 0c             	sub    esp,0xc
c000c6a5:	6a 05                	push   0x5
c000c6a7:	68 00 00 40 c2       	push   0xc2400000
c000c6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6b4:	e8 0f fd ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6b9:	83 c4 1c             	add    esp,0x1c
c000c6bc:	c3                   	ret    
c000c6bd:	90                   	nop

c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c6be:	55                   	push   ebp
c000c6bf:	57                   	push   edi
c000c6c0:	56                   	push   esi
c000c6c1:	53                   	push   ebx
c000c6c2:	83 ec 1c             	sub    esp,0x1c
c000c6c5:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000c6ca:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c6ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6d4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c6d8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c6de:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c6e2:	83 e0 01             	and    eax,0x1
c000c6e5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c6e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6ed:	85 c0                	test   eax,eax
c000c6ef:	7e 39                	jle    c000c72a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c6f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6f5:	89 f3                	mov    ebx,esi
c000c6f7:	c1 e0 0c             	shl    eax,0xc
c000c6fa:	01 f0                	add    eax,esi
c000c6fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c700:	55                   	push   ebp
c000c701:	53                   	push   ebx
c000c702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c706:	29 f0                	sub    eax,esi
c000c708:	01 d8                	add    eax,ebx
c000c70a:	50                   	push   eax
c000c70b:	57                   	push   edi
c000c70c:	e8 b7 fc ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c711:	83 c4 10             	add    esp,0x10
c000c714:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c719:	74 03                	je     c000c71e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c71b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c71e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c724:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c728:	75 d6                	jne    c000c700 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c72a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c72f:	75 10                	jne    c000c741 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c731:	0f 20 d8             	mov    eax,cr3
c000c734:	0f 22 d8             	mov    cr3,eax
c000c737:	83 c4 1c             	add    esp,0x1c
c000c73a:	89 f0                	mov    eax,esi
c000c73c:	5b                   	pop    ebx
c000c73d:	5e                   	pop    esi
c000c73e:	5f                   	pop    edi
c000c73f:	5d                   	pop    ebp
c000c740:	c3                   	ret    
c000c741:	89 f3                	mov    ebx,esi
c000c743:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c747:	c1 eb 0a             	shr    ebx,0xa
c000c74a:	c1 e0 0c             	shl    eax,0xc
c000c74d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c753:	01 f0                	add    eax,esi
c000c755:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c75b:	c1 e8 0a             	shr    eax,0xa
c000c75e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c763:	2d 00 00 40 00       	sub    eax,0x400000
c000c768:	39 c3                	cmp    ebx,eax
c000c76a:	77 cb                	ja     c000c737 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c76c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c76f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c775:	39 d8                	cmp    eax,ebx
c000c777:	73 f3                	jae    c000c76c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c779:	83 c4 1c             	add    esp,0x1c
c000c77c:	89 f0                	mov    eax,esi
c000c77e:	5b                   	pop    ebx
c000c77f:	5e                   	pop    esi
c000c780:	5f                   	pop    edi
c000c781:	5d                   	pop    ebp
c000c782:	c3                   	ret    
c000c783:	90                   	nop

c000c784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c784:	55                   	push   ebp
c000c785:	57                   	push   edi
c000c786:	56                   	push   esi
c000c787:	53                   	push   ebx
c000c788:	83 ec 1c             	sub    esp,0x1c
c000c78b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c78f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c793:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c797:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c79b:	a9 ff 0f 00 00       	test   eax,0xfff
c000c7a0:	75 4a                	jne    c000c7ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c7a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c7a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7a9:	c1 eb 16             	shr    ebx,0x16
c000c7ac:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c7b3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c7b7:	74 4d                	je     c000c806 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c7b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7bd:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c7c1:	c1 e8 0a             	shr    eax,0xa
c000c7c4:	80 fa 01             	cmp    dl,0x1
c000c7c7:	19 d2                	sbb    edx,edx
c000c7c9:	c1 e3 0c             	shl    ebx,0xc
c000c7cc:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c7d0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c7d6:	25 fc 0f 00 00       	and    eax,0xffc
c000c7db:	01 d8                	add    eax,ebx
c000c7dd:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c7e4:	83 c4 1c             	add    esp,0x1c
c000c7e7:	5b                   	pop    ebx
c000c7e8:	5e                   	pop    esi
c000c7e9:	5f                   	pop    edi
c000c7ea:	5d                   	pop    ebp
c000c7eb:	c3                   	ret    
c000c7ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	68 98 4c 02 c0       	push   0xc0024c98
c000c7f8:	e8 e8 87 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000c7fd:	83 c4 10             	add    esp,0x10
c000c800:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c804:	eb 9c                	jmp    c000c7a2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c806:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c80a:	e8 03 dc ff ff       	call   c000a412 <Phys::allocatePage()>
c000c80f:	83 ec 0c             	sub    esp,0xc
c000c812:	89 c5                	mov    ebp,eax
c000c814:	8b 0d b0 89 02 c0    	mov    ecx,DWORD PTR ds:0xc00289b0
c000c81a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c81e:	6a 01                	push   0x1
c000c820:	e8 fc f4 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c825:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c82c:	6a 01                	push   0x1
c000c82e:	50                   	push   eax
c000c82f:	55                   	push   ebp
c000c830:	81 cd 07 04 00 00    	or     ebp,0x407
c000c836:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c83a:	51                   	push   ecx
c000c83b:	e8 7e fe ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c840:	83 c4 1c             	add    esp,0x1c
c000c843:	68 00 10 00 00       	push   0x1000
c000c848:	6a 00                	push   0x0
c000c84a:	50                   	push   eax
c000c84b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c84f:	e8 30 3e ff ff       	call   c0000684 <memset>
c000c854:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c858:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c85b:	e8 f1 f7 ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c860:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c869:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c86d:	e9 47 ff ff ff       	jmp    c000c7b9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c872 <VAS::VAS(bool)>:
c000c872:	53                   	push   ebx
c000c873:	83 ec 28             	sub    esp,0x28
c000c876:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c87a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c87e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c882:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c889:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c88d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c894:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c898:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c89c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c89f:	e8 6e db ff ff       	call   c000a412 <Phys::allocatePage()>
c000c8a4:	89 c2                	mov    edx,eax
c000c8a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8aa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c8ad:	8b 1d b0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289b0
c000c8b3:	83 ec 0c             	sub    esp,0xc
c000c8b6:	6a 01                	push   0x1
c000c8b8:	e8 64 f4 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c8bd:	83 c4 10             	add    esp,0x10
c000c8c0:	89 c2                	mov    edx,eax
c000c8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c8c9:	83 ec 0c             	sub    esp,0xc
c000c8cc:	6a 03                	push   0x3
c000c8ce:	6a 01                	push   0x1
c000c8d0:	52                   	push   edx
c000c8d1:	50                   	push   eax
c000c8d2:	53                   	push   ebx
c000c8d3:	e8 e6 fd ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8d8:	83 c4 20             	add    esp,0x20
c000c8db:	89 c2                	mov    edx,eax
c000c8dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c8e4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c8ec:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c8f4:	7f 1c                	jg     c000c912 <VAS::VAS(bool)+0xa0>
c000c8f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c901:	c1 e2 02             	shl    edx,0x2
c000c904:	01 d0                	add    eax,edx
c000c906:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c90c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c910:	eb da                	jmp    c000c8ec <VAS::VAS(bool)+0x7a>
c000c912:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c91a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c922:	7f 7a                	jg     c000c99e <VAS::VAS(bool)+0x12c>
c000c924:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c928:	2d 00 02 00 00       	sub    eax,0x200
c000c92d:	c1 e0 0c             	shl    eax,0xc
c000c930:	83 c8 03             	or     eax,0x3
c000c933:	89 c2                	mov    edx,eax
c000c935:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000c93a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c940:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c946:	83 e0 10             	and    eax,0x10
c000c949:	84 c0                	test   al,al
c000c94b:	74 07                	je     c000c954 <VAS::VAS(bool)+0xe2>
c000c94d:	b8 00 01 00 00       	mov    eax,0x100
c000c952:	eb 05                	jmp    c000c959 <VAS::VAS(bool)+0xe7>
c000c954:	b8 00 00 00 00       	mov    eax,0x0
c000c959:	09 d0                	or     eax,edx
c000c95b:	89 c1                	mov    ecx,eax
c000c95d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c961:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c964:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c968:	c1 e2 02             	shl    edx,0x2
c000c96b:	01 d0                	add    eax,edx
c000c96d:	89 ca                	mov    edx,ecx
c000c96f:	89 10                	mov    DWORD PTR [eax],edx
c000c971:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c975:	2d 40 03 00 00       	sub    eax,0x340
c000c97a:	83 f8 7f             	cmp    eax,0x7f
c000c97d:	77 16                	ja     c000c995 <VAS::VAS(bool)+0x123>
c000c97f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c983:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c986:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c98a:	c1 e2 02             	shl    edx,0x2
c000c98d:	01 d0                	add    eax,edx
c000c98f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c995:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c999:	e9 7c ff ff ff       	jmp    c000c91a <VAS::VAS(bool)+0xa8>
c000c99e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000c9a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9a9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9af:	83 e0 10             	and    eax,0x10
c000c9b2:	84 c0                	test   al,al
c000c9b4:	74 07                	je     c000c9bd <VAS::VAS(bool)+0x14b>
c000c9b6:	b8 03 41 00 00       	mov    eax,0x4103
c000c9bb:	eb 05                	jmp    c000c9c2 <VAS::VAS(bool)+0x150>
c000c9bd:	b8 03 40 00 00       	mov    eax,0x4003
c000c9c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9c6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c9c9:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c9cf:	89 02                	mov    DWORD PTR [edx],eax
c000c9d1:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000c9d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9dc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c9e2:	83 ec 08             	sub    esp,0x8
c000c9e5:	50                   	push   eax
c000c9e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9ea:	e8 b3 fc ff ff       	call   c000c6a2 <VAS::setCPUSpecific(unsigned long)>
c000c9ef:	83 c4 10             	add    esp,0x10
c000c9f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9f6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c9f9:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000c9fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca04:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca0a:	83 e0 10             	and    eax,0x10
c000ca0d:	84 c0                	test   al,al
c000ca0f:	74 07                	je     c000ca18 <VAS::VAS(bool)+0x1a6>
c000ca11:	b8 00 01 00 00       	mov    eax,0x100
c000ca16:	eb 05                	jmp    c000ca1d <VAS::VAS(bool)+0x1ab>
c000ca18:	b8 00 00 00 00       	mov    eax,0x0
c000ca1d:	09 c2                	or     edx,eax
c000ca1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca26:	05 fc 0f 00 00       	add    eax,0xffc
c000ca2b:	83 ca 03             	or     edx,0x3
c000ca2e:	89 10                	mov    DWORD PTR [eax],edx
c000ca30:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000ca35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca3b:	83 ec 0c             	sub    esp,0xc
c000ca3e:	50                   	push   eax
c000ca3f:	e8 76 1e 00 00       	call   c000e8ba <Device::getName()>
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	83 ec 08             	sub    esp,0x8
c000ca4a:	68 6c 4d 02 c0       	push   0xc0024d6c
c000ca4f:	50                   	push   eax
c000ca50:	e8 77 3d ff ff       	call   c00007cc <strcmp>
c000ca55:	83 c4 10             	add    esp,0x10
c000ca58:	85 c0                	test   eax,eax
c000ca5a:	0f 94 c0             	sete   al
c000ca5d:	84 c0                	test   al,al
c000ca5f:	0f 84 87 00 00 00    	je     c000caec <VAS::VAS(bool)+0x27a>
c000ca65:	fa                   	cli    
c000ca66:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000ca6b:	40                   	inc    eax
c000ca6c:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000ca71:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000ca76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca7c:	05 7c 09 00 00       	add    eax,0x97c
c000ca81:	83 ec 0c             	sub    esp,0xc
c000ca84:	50                   	push   eax
c000ca85:	e8 c0 cd ff ff       	call   c000984a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ca8a:	83 c4 10             	add    esp,0x10
c000ca8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca92:	89 c3                	mov    ebx,eax
c000ca94:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000ca99:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca9f:	05 7c 09 00 00       	add    eax,0x97c
c000caa4:	83 ec 0c             	sub    esp,0xc
c000caa7:	50                   	push   eax
c000caa8:	e8 9d cd ff ff       	call   c000984a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	83 ec 08             	sub    esp,0x8
c000cab3:	50                   	push   eax
c000cab4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cab8:	e8 75 f5 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cabd:	83 c4 10             	add    esp,0x10
c000cac0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cac2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cac7:	6a 11                	push   0x11
c000cac9:	53                   	push   ebx
c000caca:	50                   	push   eax
c000cacb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cacf:	e8 f4 f8 ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000cad4:	83 c4 10             	add    esp,0x10
c000cad7:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000cadc:	48                   	dec    eax
c000cadd:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000cae2:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000cae7:	85 c0                	test   eax,eax
c000cae9:	75 01                	jne    c000caec <VAS::VAS(bool)+0x27a>
c000caeb:	fb                   	sti    
c000caec:	90                   	nop
c000caed:	83 c4 28             	add    esp,0x28
c000caf0:	5b                   	pop    ebx
c000caf1:	c3                   	ret    

c000caf2 <VAS::evict(unsigned long)>:
c000caf2:	55                   	push   ebp
c000caf3:	57                   	push   edi
c000caf4:	56                   	push   esi
c000caf5:	53                   	push   ebx
c000caf6:	83 ec 1c             	sub    esp,0x1c
c000caf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cafd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb05:	e8 58 f3 ff ff       	call   c000be62 <Virt::allocateSwapfilePage()>
c000cb0a:	89 c7                	mov    edi,eax
c000cb0c:	a1 cc 7c 02 c0       	mov    eax,ds:0xc0027ccc
c000cb11:	85 c0                	test   eax,eax
c000cb13:	7e 3d                	jle    c000cb52 <VAS::evict(unsigned long)+0x60>
c000cb15:	89 ee                	mov    esi,ebp
c000cb17:	31 db                	xor    ebx,ebx
c000cb19:	83 ec 0c             	sub    esp,0xc
c000cb1c:	57                   	push   edi
c000cb1d:	e8 2e f3 ff ff       	call   c000be50 <Virt::swapIDToSector(unsigned long)>
c000cb22:	89 34 24             	mov    DWORD PTR [esp],esi
c000cb25:	01 d8                	add    eax,ebx
c000cb27:	6a 01                	push   0x1
c000cb29:	31 d2                	xor    edx,edx
c000cb2b:	43                   	inc    ebx
c000cb2c:	52                   	push   edx
c000cb2d:	81 c6 00 02 00 00    	add    esi,0x200
c000cb33:	50                   	push   eax
c000cb34:	0f be 05 d8 7c 02 c0 	movsx  eax,BYTE PTR ds:0xc0027cd8
c000cb3b:	ff 34 85 3c 8d 02 c0 	push   DWORD PTR [eax*4-0x3ffd72c4]
c000cb42:	e8 ad 3d 00 00       	call   c00108f4 <LogicalDisk::write(unsigned long long, int, void*)>
c000cb47:	83 c4 20             	add    esp,0x20
c000cb4a:	39 1d cc 7c 02 c0    	cmp    DWORD PTR ds:0xc0027ccc,ebx
c000cb50:	7f c7                	jg     c000cb19 <VAS::evict(unsigned long)+0x27>
c000cb52:	83 ec 08             	sub    esp,0x8
c000cb55:	c1 e7 0b             	shl    edi,0xb
c000cb58:	55                   	push   ebp
c000cb59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb5d:	e8 d0 f4 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cb62:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb64:	89 d3                	mov    ebx,edx
c000cb66:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cb6c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cb72:	09 d7                	or     edi,edx
c000cb74:	89 38                	mov    DWORD PTR [eax],edi
c000cb76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cb79:	ff 05 a8 89 02 c0    	inc    DWORD PTR ds:0xc00289a8
c000cb7f:	e8 0b d8 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000cb84:	0f 20 d8             	mov    eax,cr3
c000cb87:	0f 22 d8             	mov    cr3,eax
c000cb8a:	ff 35 a8 89 02 c0    	push   DWORD PTR ds:0xc00289a8
c000cb90:	55                   	push   ebp
c000cb91:	53                   	push   ebx
c000cb92:	68 bc 4c 02 c0       	push   0xc0024cbc
c000cb97:	e8 ab 04 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cb9c:	a1 a4 89 02 c0       	mov    eax,ds:0xc00289a4
c000cba1:	c7 44 24 50 7a 4d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0024d7a
c000cba9:	8d 50 01             	lea    edx,[eax+0x1]
c000cbac:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cbb0:	89 15 a4 89 02 c0    	mov    DWORD PTR ds:0xc00289a4,edx
c000cbb6:	83 c4 3c             	add    esp,0x3c
c000cbb9:	5b                   	pop    ebx
c000cbba:	5e                   	pop    esi
c000cbbb:	5f                   	pop    edi
c000cbbc:	5d                   	pop    ebp
c000cbbd:	e9 85 04 00 00       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>

c000cbc2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cbc2:	55                   	push   ebp
c000cbc3:	57                   	push   edi
c000cbc4:	56                   	push   esi
c000cbc5:	53                   	push   ebx
c000cbc6:	83 ec 14             	sub    esp,0x14
c000cbc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcd:	68 8b 4d 02 c0       	push   0xc0024d8b
c000cbd2:	e8 70 04 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cbd7:	83 c4 10             	add    esp,0x10
c000cbda:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cbde:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cbe4:	74 20                	je     c000cc06 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbe6:	83 ec 08             	sub    esp,0x8
c000cbe9:	55                   	push   ebp
c000cbea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbee:	e8 3f f4 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cbf3:	83 c4 10             	add    esp,0x10
c000cbf6:	89 c3                	mov    ebx,eax
c000cbf8:	85 c0                	test   eax,eax
c000cbfa:	74 0a                	je     c000cc06 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbfc:	8b 38                	mov    edi,DWORD PTR [eax]
c000cbfe:	f7 c7 01 00 00 00    	test   edi,0x1
c000cc04:	74 0a                	je     c000cc10 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cc06:	31 c0                	xor    eax,eax
c000cc08:	83 c4 0c             	add    esp,0xc
c000cc0b:	5b                   	pop    ebx
c000cc0c:	5e                   	pop    esi
c000cc0d:	5f                   	pop    edi
c000cc0e:	5d                   	pop    ebp
c000cc0f:	c3                   	ret    
c000cc10:	e8 fd d7 ff ff       	call   c000a412 <Phys::allocatePage()>
c000cc15:	c1 ef 0b             	shr    edi,0xb
c000cc18:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc1a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cc20:	09 c2                	or     edx,eax
c000cc22:	81 ca 01 08 00 00    	or     edx,0x801
c000cc28:	89 13                	mov    DWORD PTR [ebx],edx
c000cc2a:	8b 0d cc 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ccc
c000cc30:	85 c9                	test   ecx,ecx
c000cc32:	7e 3d                	jle    c000cc71 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cc34:	89 ee                	mov    esi,ebp
c000cc36:	31 db                	xor    ebx,ebx
c000cc38:	83 ec 0c             	sub    esp,0xc
c000cc3b:	57                   	push   edi
c000cc3c:	e8 0f f2 ff ff       	call   c000be50 <Virt::swapIDToSector(unsigned long)>
c000cc41:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc44:	01 d8                	add    eax,ebx
c000cc46:	6a 01                	push   0x1
c000cc48:	31 d2                	xor    edx,edx
c000cc4a:	43                   	inc    ebx
c000cc4b:	52                   	push   edx
c000cc4c:	81 c6 00 02 00 00    	add    esi,0x200
c000cc52:	50                   	push   eax
c000cc53:	0f be 05 d8 7c 02 c0 	movsx  eax,BYTE PTR ds:0xc0027cd8
c000cc5a:	ff 34 85 3c 8d 02 c0 	push   DWORD PTR [eax*4-0x3ffd72c4]
c000cc61:	e8 22 3c 00 00       	call   c0010888 <LogicalDisk::read(unsigned long long, int, void*)>
c000cc66:	83 c4 20             	add    esp,0x20
c000cc69:	39 1d cc 7c 02 c0    	cmp    DWORD PTR ds:0xc0027ccc,ebx
c000cc6f:	7f c7                	jg     c000cc38 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cc71:	a1 a8 89 02 c0       	mov    eax,ds:0xc00289a8
c000cc76:	48                   	dec    eax
c000cc77:	52                   	push   edx
c000cc78:	a3 a8 89 02 c0       	mov    ds:0xc00289a8,eax
c000cc7d:	50                   	push   eax
c000cc7e:	55                   	push   ebp
c000cc7f:	68 9e 4d 02 c0       	push   0xc0024d9e
c000cc84:	e8 be 03 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cc89:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc8c:	e8 a1 f1 ff ff       	call   c000be32 <Virt::freeSwapfilePage(unsigned long)>
c000cc91:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	48                   	dec    eax
c000cc9a:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000cc9f:	85 c0                	test   eax,eax
c000cca1:	74 1d                	je     c000ccc0 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cca7:	25 ff 0f 00 00       	and    eax,0xfff
c000ccac:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000ccb1:	77 10                	ja     c000ccc3 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000ccb3:	0f 20 d8             	mov    eax,cr3
c000ccb6:	0f 22 d8             	mov    cr3,eax
c000ccb9:	b0 01                	mov    al,0x1
c000ccbb:	e9 48 ff ff ff       	jmp    c000cc08 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000ccc0:	fb                   	sti    
c000ccc1:	eb e0                	jmp    c000cca3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000ccc3:	83 ec 0c             	sub    esp,0xc
c000ccc6:	68 b3 4d 02 c0       	push   0xc0024db3
c000cccb:	e8 77 03 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ccd0:	83 c4 10             	add    esp,0x10
c000ccd3:	eb de                	jmp    c000ccb3 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000ccd5:	90                   	nop

c000ccd6 <VAS::scanForEviction()>:
c000ccd6:	57                   	push   edi
c000ccd7:	31 ff                	xor    edi,edi
c000ccd9:	56                   	push   esi
c000ccda:	53                   	push   ebx
c000ccdb:	83 ec 10             	sub    esp,0x10
c000ccde:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cce2:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cce5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cceb:	75 0e                	jne    c000ccfb <VAS::scanForEviction()+0x25>
c000cced:	89 da                	mov    edx,ebx
c000ccef:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccf2:	c1 ea 16             	shr    edx,0x16
c000ccf5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccf9:	74 4e                	je     c000cd49 <VAS::scanForEviction()+0x73>
c000ccfb:	53                   	push   ebx
c000ccfc:	56                   	push   esi
c000ccfd:	e8 30 f3 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cd02:	5a                   	pop    edx
c000cd03:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd05:	59                   	pop    ecx
c000cd06:	89 d1                	mov    ecx,edx
c000cd08:	81 e1 01 08 00 00    	and    ecx,0x801
c000cd0e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cd14:	74 3e                	je     c000cd54 <VAS::scanForEviction()+0x7e>
c000cd16:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cd1c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cd22:	76 2b                	jbe    c000cd4f <VAS::scanForEviction()+0x79>
c000cd24:	47                   	inc    edi
c000cd25:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cd2c:	83 ff 03             	cmp    edi,0x3
c000cd2f:	74 32                	je     c000cd63 <VAS::scanForEviction()+0x8d>
c000cd31:	31 db                	xor    ebx,ebx
c000cd33:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd39:	75 c0                	jne    c000ccfb <VAS::scanForEviction()+0x25>
c000cd3b:	89 da                	mov    edx,ebx
c000cd3d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd40:	c1 ea 16             	shr    edx,0x16
c000cd43:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd47:	75 b2                	jne    c000ccfb <VAS::scanForEviction()+0x25>
c000cd49:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cd4f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000cd52:	eb 91                	jmp    c000cce5 <VAS::scanForEviction()+0xf>
c000cd54:	f6 c2 20             	test   dl,0x20
c000cd57:	74 13                	je     c000cd6c <VAS::scanForEviction()+0x96>
c000cd59:	83 e2 df             	and    edx,0xffffffdf
c000cd5c:	89 10                	mov    DWORD PTR [eax],edx
c000cd5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd61:	eb b3                	jmp    c000cd16 <VAS::scanForEviction()+0x40>
c000cd63:	83 c4 10             	add    esp,0x10
c000cd66:	31 c0                	xor    eax,eax
c000cd68:	5b                   	pop    ebx
c000cd69:	5e                   	pop    esi
c000cd6a:	5f                   	pop    edi
c000cd6b:	c3                   	ret    
c000cd6c:	83 ec 08             	sub    esp,0x8
c000cd6f:	89 d0                	mov    eax,edx
c000cd71:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cd76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd7a:	53                   	push   ebx
c000cd7b:	68 c3 4d 02 c0       	push   0xc0024dc3
c000cd80:	e8 c2 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cd85:	58                   	pop    eax
c000cd86:	5a                   	pop    edx
c000cd87:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd8a:	56                   	push   esi
c000cd8b:	e8 62 fd ff ff       	call   c000caf2 <VAS::evict(unsigned long)>
c000cd90:	59                   	pop    ecx
c000cd91:	5b                   	pop    ebx
c000cd92:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd95:	68 d7 4d 02 c0       	push   0xc0024dd7
c000cd9a:	e8 a8 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cd9f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cda6:	83 c4 10             	add    esp,0x10
c000cda9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdad:	83 c4 10             	add    esp,0x10
c000cdb0:	5b                   	pop    ebx
c000cdb1:	5e                   	pop    esi
c000cdb2:	5f                   	pop    edi
c000cdb3:	c3                   	ret    

c000cdb4 <mapVASFirstTime>:
c000cdb4:	55                   	push   ebp
c000cdb5:	57                   	push   edi
c000cdb6:	56                   	push   esi
c000cdb7:	53                   	push   ebx
c000cdb8:	83 ec 0c             	sub    esp,0xc
c000cdbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cdc0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cdc3:	4a                   	dec    edx
c000cdc4:	0f 84 fe 00 00 00    	je     c000cec8 <mapVASFirstTime+0x114>
c000cdca:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cdcd:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cdd0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cdd5:	c1 e5 15             	shl    ebp,0x15
c000cdd8:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cddd:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cde3:	29 eb                	sub    ebx,ebp
c000cde5:	29 ef                	sub    edi,ebp
c000cde7:	83 ec 08             	sub    esp,0x8
c000cdea:	53                   	push   ebx
c000cdeb:	68 03 4e 02 c0       	push   0xc0024e03
c000cdf0:	e8 52 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cdf5:	e8 18 d6 ff ff       	call   c000a412 <Phys::allocatePage()>
c000cdfa:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ce01:	6a 01                	push   0x1
c000ce03:	53                   	push   ebx
c000ce04:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce0a:	50                   	push   eax
c000ce0b:	56                   	push   esi
c000ce0c:	e8 ad f8 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce11:	83 c4 20             	add    esp,0x20
c000ce14:	39 fb                	cmp    ebx,edi
c000ce16:	75 cf                	jne    c000cde7 <mapVASFirstTime+0x33>
c000ce18:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ce1d:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ce22:	29 eb                	sub    ebx,ebp
c000ce24:	29 ef                	sub    edi,ebp
c000ce26:	83 ec 08             	sub    esp,0x8
c000ce29:	53                   	push   ebx
c000ce2a:	68 1f 4e 02 c0       	push   0xc0024e1f
c000ce2f:	e8 13 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce34:	58                   	pop    eax
c000ce35:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce39:	5a                   	pop    edx
c000ce3a:	19 c0                	sbb    eax,eax
c000ce3c:	83 e0 04             	and    eax,0x4
c000ce3f:	05 03 04 00 00       	add    eax,0x403
c000ce44:	50                   	push   eax
c000ce45:	68 33 4e 02 c0       	push   0xc0024e33
c000ce4a:	e8 f8 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce4f:	e8 be d5 ff ff       	call   c000a412 <Phys::allocatePage()>
c000ce54:	59                   	pop    ecx
c000ce55:	89 c5                	mov    ebp,eax
c000ce57:	58                   	pop    eax
c000ce58:	55                   	push   ebp
c000ce59:	68 41 4e 02 c0       	push   0xc0024e41
c000ce5e:	e8 e4 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce63:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce67:	19 d2                	sbb    edx,edx
c000ce69:	83 e2 04             	and    edx,0x4
c000ce6c:	81 c2 03 04 00 00    	add    edx,0x403
c000ce72:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce75:	6a 01                	push   0x1
c000ce77:	53                   	push   ebx
c000ce78:	55                   	push   ebp
c000ce79:	56                   	push   esi
c000ce7a:	e8 3f f8 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce7f:	83 c4 18             	add    esp,0x18
c000ce82:	53                   	push   ebx
c000ce83:	56                   	push   esi
c000ce84:	e8 a9 f1 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000ce89:	5a                   	pop    edx
c000ce8a:	59                   	pop    ecx
c000ce8b:	ff 30                	push   DWORD PTR [eax]
c000ce8d:	68 5d 4e 02 c0       	push   0xc0024e5d
c000ce92:	e8 b0 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce97:	0f 20 d8             	mov    eax,cr3
c000ce9a:	83 c4 0c             	add    esp,0xc
c000ce9d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cea3:	56                   	push   esi
c000cea4:	50                   	push   eax
c000cea5:	68 68 4e 02 c0       	push   0xc0024e68
c000ceaa:	e8 98 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	39 df                	cmp    edi,ebx
c000ceb4:	0f 85 6c ff ff ff    	jne    c000ce26 <mapVASFirstTime+0x72>
c000ceba:	0f 20 d8             	mov    eax,cr3
c000cebd:	0f 22 d8             	mov    cr3,eax
c000cec0:	83 c4 0c             	add    esp,0xc
c000cec3:	5b                   	pop    ebx
c000cec4:	5e                   	pop    esi
c000cec5:	5f                   	pop    edi
c000cec6:	5d                   	pop    ebp
c000cec7:	c3                   	ret    
c000cec8:	83 ec 0c             	sub    esp,0xc
c000cecb:	68 ea 4d 02 c0       	push   0xc0024dea
c000ced0:	e8 72 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	83 c4 0c             	add    esp,0xc
c000cedb:	5b                   	pop    ebx
c000cedc:	5e                   	pop    esi
c000cedd:	5f                   	pop    edi
c000cede:	5d                   	pop    ebp
c000cedf:	c3                   	ret    

c000cee0 <__cxa_atexit>:
c000cee0:	31 c0                	xor    eax,eax
c000cee2:	c3                   	ret    

c000cee3 <__cxa_finalize>:
c000cee3:	c3                   	ret    

c000cee4 <__stack_chk_fail>:
c000cee4:	55                   	push   ebp
c000cee5:	89 e5                	mov    ebp,esp
c000cee7:	83 ec 14             	sub    esp,0x14
c000ceea:	68 80 4e 02 c0       	push   0xc0024e80
c000ceef:	e8 53 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cef4:	58                   	pop    eax
c000cef5:	5a                   	pop    edx
c000cef6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cef9:	68 d0 4e 02 c0       	push   0xc0024ed0
c000cefe:	e8 44 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf03:	59                   	pop    ecx
c000cf04:	58                   	pop    eax
c000cf05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf08:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf0b:	68 d0 4e 02 c0       	push   0xc0024ed0
c000cf10:	e8 32 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf15:	5a                   	pop    edx
c000cf16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf19:	59                   	pop    ecx
c000cf1a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf1c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf1f:	68 d0 4e 02 c0       	push   0xc0024ed0
c000cf24:	e8 1e 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf29:	5a                   	pop    edx
c000cf2a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf2d:	59                   	pop    ecx
c000cf2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf30:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf32:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf35:	68 d0 4e 02 c0       	push   0xc0024ed0
c000cf3a:	e8 08 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf3f:	c7 04 24 d8 4e 02 c0 	mov    DWORD PTR [esp],0xc0024ed8
c000cf46:	e8 9a 80 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000cf4b:	83 c4 10             	add    esp,0x10
c000cf4e:	c9                   	leave  
c000cf4f:	c3                   	ret    

c000cf50 <__cxa_pure_virtual>:
c000cf50:	83 ec 18             	sub    esp,0x18
c000cf53:	68 f0 4e 02 c0       	push   0xc0024ef0
c000cf58:	e8 88 80 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000cf5d:	83 c4 1c             	add    esp,0x1c
c000cf60:	c3                   	ret    

c000cf61 <operator new[](unsigned long)>:
c000cf61:	e9 f5 cd ff ff       	jmp    c0009d5b <malloc>

c000cf66 <operator delete(void*, unsigned long)>:
c000cf66:	e9 10 ce ff ff       	jmp    c0009d7b <rfree>

c000cf6b <operator delete[](void*)>:
c000cf6b:	e9 0b ce ff ff       	jmp    c0009d7b <rfree>

c000cf70 <operator delete[](void*, unsigned long)>:
c000cf70:	e9 06 ce ff ff       	jmp    c0009d7b <rfree>

c000cf75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cf75:	55                   	push   ebp
c000cf76:	b9 11 00 00 00       	mov    ecx,0x11
c000cf7b:	57                   	push   edi
c000cf7c:	56                   	push   esi
c000cf7d:	be d6 49 02 c0       	mov    esi,0xc00249d6
c000cf82:	53                   	push   ebx
c000cf83:	83 ec 20             	sub    esp,0x20
c000cf86:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf8a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf8e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf92:	fc                   	cld    
c000cf93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf95:	89 ee                	mov    esi,ebp
c000cf97:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf9b:	eb 02                	jmp    c000cf9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf9d:	89 c6                	mov    esi,eax
c000cf9f:	31 d2                	xor    edx,edx
c000cfa1:	41                   	inc    ecx
c000cfa2:	89 f0                	mov    eax,esi
c000cfa4:	f7 f3                	div    ebx
c000cfa6:	39 de                	cmp    esi,ebx
c000cfa8:	73 f3                	jae    c000cf9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cfaa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cfad:	eb 02                	jmp    c000cfb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cfaf:	89 c5                	mov    ebp,eax
c000cfb1:	31 d2                	xor    edx,edx
c000cfb3:	49                   	dec    ecx
c000cfb4:	89 e8                	mov    eax,ebp
c000cfb6:	f7 f3                	div    ebx
c000cfb8:	39 dd                	cmp    ebp,ebx
c000cfba:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cfbe:	88 11                	mov    BYTE PTR [ecx],dl
c000cfc0:	73 ed                	jae    c000cfaf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cfc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfc6:	83 c4 20             	add    esp,0x20
c000cfc9:	5b                   	pop    ebx
c000cfca:	5e                   	pop    esi
c000cfcb:	5f                   	pop    edi
c000cfcc:	5d                   	pop    ebp
c000cfcd:	c3                   	ret    

c000cfce <Dbg::logc(char)>:
c000cfce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfd2:	f6 05 a0 88 02 c0 10 	test   BYTE PTR ds:0xc00288a0,0x10
c000cfd9:	75 12                	jne    c000cfed <Dbg::logc(char)+0x1f>
c000cfdb:	ba fd 03 00 00       	mov    edx,0x3fd
c000cfe0:	ec                   	in     al,dx
c000cfe1:	a8 20                	test   al,0x20
c000cfe3:	74 fb                	je     c000cfe0 <Dbg::logc(char)+0x12>
c000cfe5:	ba f8 03 00 00       	mov    edx,0x3f8
c000cfea:	88 c8                	mov    al,cl
c000cfec:	ee                   	out    dx,al
c000cfed:	c3                   	ret    

c000cfee <Dbg::logs(char*)>:
c000cfee:	53                   	push   ebx
c000cfef:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cff3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cff6:	84 c0                	test   al,al
c000cff8:	74 0f                	je     c000d009 <Dbg::logs(char*)+0x1b>
c000cffa:	50                   	push   eax
c000cffb:	43                   	inc    ebx
c000cffc:	e8 cd ff ff ff       	call   c000cfce <Dbg::logc(char)>
c000d001:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d004:	5a                   	pop    edx
c000d005:	84 c0                	test   al,al
c000d007:	75 f1                	jne    c000cffa <Dbg::logs(char*)+0xc>
c000d009:	5b                   	pop    ebx
c000d00a:	c3                   	ret    

c000d00b <Dbg::logWriteInt(unsigned int)>:
c000d00b:	83 ec 10             	sub    esp,0x10
c000d00e:	6a 0a                	push   0xa
c000d010:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d014:	50                   	push   eax
c000d015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d019:	e8 57 ff ff ff       	call   c000cf75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d01e:	50                   	push   eax
c000d01f:	e8 ca ff ff ff       	call   c000cfee <Dbg::logs(char*)>
c000d024:	83 c4 20             	add    esp,0x20
c000d027:	c3                   	ret    

c000d028 <Dbg::logWriteIntBase(unsigned int, int)>:
c000d028:	83 ec 10             	sub    esp,0x10
c000d02b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d02f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d033:	50                   	push   eax
c000d034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d038:	e8 38 ff ff ff       	call   c000cf75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d03d:	50                   	push   eax
c000d03e:	e8 ab ff ff ff       	call   c000cfee <Dbg::logs(char*)>
c000d043:	83 c4 20             	add    esp,0x20
c000d046:	c3                   	ret    

c000d047 <Dbg::kprintf(char const*, ...)>:
c000d047:	55                   	push   ebp
c000d048:	57                   	push   edi
c000d049:	56                   	push   esi
c000d04a:	53                   	push   ebx
c000d04b:	83 ec 0c             	sub    esp,0xc
c000d04e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d052:	f6 05 a0 88 02 c0 10 	test   BYTE PTR ds:0xc00288a0,0x10
c000d059:	74 08                	je     c000d063 <Dbg::kprintf(char const*, ...)+0x1c>
c000d05b:	83 c4 0c             	add    esp,0xc
c000d05e:	5b                   	pop    ebx
c000d05f:	5e                   	pop    esi
c000d060:	5f                   	pop    edi
c000d061:	5d                   	pop    ebp
c000d062:	c3                   	ret    
c000d063:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d067:	31 db                	xor    ebx,ebx
c000d069:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d06d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d070:	84 c0                	test   al,al
c000d072:	74 e7                	je     c000d05b <Dbg::kprintf(char const*, ...)+0x14>
c000d074:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d077:	3c 25                	cmp    al,0x25
c000d079:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d07c:	75 44                	jne    c000d0c2 <Dbg::kprintf(char const*, ...)+0x7b>
c000d07e:	83 c3 02             	add    ebx,0x2
c000d081:	8a 07                	mov    al,BYTE PTR [edi]
c000d083:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d086:	83 e8 25             	sub    eax,0x25
c000d089:	3c 53                	cmp    al,0x53
c000d08b:	0f 87 c9 00 00 00    	ja     c000d15a <Dbg::kprintf(char const*, ...)+0x113>
c000d091:	0f b6 c0             	movzx  eax,al
c000d094:	ff 24 85 04 4f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb0fc]
c000d09b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d09f:	89 c8                	mov    eax,ecx
c000d0a1:	83 c1 04             	add    ecx,0x4
c000d0a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a8:	ff 30                	push   DWORD PTR [eax]
c000d0aa:	e8 5c ff ff ff       	call   c000d00b <Dbg::logWriteInt(unsigned int)>
c000d0af:	5f                   	pop    edi
c000d0b0:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d0b4:	84 c0                	test   al,al
c000d0b6:	74 a3                	je     c000d05b <Dbg::kprintf(char const*, ...)+0x14>
c000d0b8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d0bb:	3c 25                	cmp    al,0x25
c000d0bd:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d0c0:	74 bc                	je     c000d07e <Dbg::kprintf(char const*, ...)+0x37>
c000d0c2:	50                   	push   eax
c000d0c3:	89 eb                	mov    ebx,ebp
c000d0c5:	e8 04 ff ff ff       	call   c000cfce <Dbg::logc(char)>
c000d0ca:	89 fd                	mov    ebp,edi
c000d0cc:	58                   	pop    eax
c000d0cd:	eb e1                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d0cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0d3:	89 c8                	mov    eax,ecx
c000d0d5:	83 c1 04             	add    ecx,0x4
c000d0d8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0dc:	ff 30                	push   DWORD PTR [eax]
c000d0de:	e8 0b ff ff ff       	call   c000cfee <Dbg::logs(char*)>
c000d0e3:	58                   	pop    eax
c000d0e4:	eb ca                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d0e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0ea:	89 d0                	mov    eax,edx
c000d0ec:	83 c2 04             	add    edx,0x4
c000d0ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0f3:	ff 30                	push   DWORD PTR [eax]
c000d0f5:	e8 11 ff ff ff       	call   c000d00b <Dbg::logWriteInt(unsigned int)>
c000d0fa:	58                   	pop    eax
c000d0fb:	eb b3                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d0fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d101:	89 d0                	mov    eax,edx
c000d103:	83 c2 04             	add    edx,0x4
c000d106:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d109:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d10d:	50                   	push   eax
c000d10e:	e8 bb fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d113:	58                   	pop    eax
c000d114:	eb 9a                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d116:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d11a:	89 c8                	mov    eax,ecx
c000d11c:	83 c1 04             	add    ecx,0x4
c000d11f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d123:	6a 10                	push   0x10
c000d125:	ff 30                	push   DWORD PTR [eax]
c000d127:	e8 fc fe ff ff       	call   c000d028 <Dbg::logWriteIntBase(unsigned int, int)>
c000d12c:	59                   	pop    ecx
c000d12d:	5f                   	pop    edi
c000d12e:	eb 80                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d130:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d134:	89 d0                	mov    eax,edx
c000d136:	83 c2 08             	add    edx,0x8
c000d139:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d13d:	6a 10                	push   0x10
c000d13f:	ff 30                	push   DWORD PTR [eax]
c000d141:	e8 e2 fe ff ff       	call   c000d028 <Dbg::logWriteIntBase(unsigned int, int)>
c000d146:	58                   	pop    eax
c000d147:	5a                   	pop    edx
c000d148:	e9 63 ff ff ff       	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d14d:	6a 25                	push   0x25
c000d14f:	e8 7a fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d154:	58                   	pop    eax
c000d155:	e9 56 ff ff ff       	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d15a:	6a 25                	push   0x25
c000d15c:	e8 6d fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d161:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d164:	50                   	push   eax
c000d165:	e8 64 fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d16a:	5a                   	pop    edx
c000d16b:	59                   	pop    ecx
c000d16c:	e9 3f ff ff ff       	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d171:	90                   	nop

c000d172 <File::read(unsigned long long, void*, int*)>:
c000d172:	53                   	push   ebx
c000d173:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d177:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d17b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d182:	3c 19                	cmp    al,0x19
c000d184:	77 35                	ja     c000d1bb <File::read(unsigned long long, void*, int*)+0x49>
c000d186:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c000d18d:	85 c0                	test   eax,eax
c000d18f:	74 2a                	je     c000d1bb <File::read(unsigned long long, void*, int*)+0x49>
c000d191:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d197:	85 c0                	test   eax,eax
c000d199:	74 20                	je     c000d1bb <File::read(unsigned long long, void*, int*)+0x49>
c000d19b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d19f:	74 21                	je     c000d1c2 <File::read(unsigned long long, void*, int*)+0x50>
c000d1a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1a3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1a7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1b5:	5b                   	pop    ebx
c000d1b6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d1b9:	ff e0                	jmp    eax
c000d1bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d1c0:	eb 05                	jmp    c000d1c7 <File::read(unsigned long long, void*, int*)+0x55>
c000d1c2:	b8 05 00 00 00       	mov    eax,0x5
c000d1c7:	5b                   	pop    ebx
c000d1c8:	c3                   	ret    
c000d1c9:	90                   	nop

c000d1ca <File::write(unsigned long long, void*, int*)>:
c000d1ca:	53                   	push   ebx
c000d1cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1d3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1da:	3c 19                	cmp    al,0x19
c000d1dc:	77 35                	ja     c000d213 <File::write(unsigned long long, void*, int*)+0x49>
c000d1de:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c000d1e5:	85 c0                	test   eax,eax
c000d1e7:	74 2a                	je     c000d213 <File::write(unsigned long long, void*, int*)+0x49>
c000d1e9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1ef:	85 c0                	test   eax,eax
c000d1f1:	74 20                	je     c000d213 <File::write(unsigned long long, void*, int*)+0x49>
c000d1f3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1f7:	74 21                	je     c000d21a <File::write(unsigned long long, void*, int*)+0x50>
c000d1f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1ff:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d205:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d209:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d20d:	5b                   	pop    ebx
c000d20e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d211:	ff e0                	jmp    eax
c000d213:	b8 0b 00 00 00       	mov    eax,0xb
c000d218:	eb 05                	jmp    c000d21f <File::write(unsigned long long, void*, int*)+0x55>
c000d21a:	b8 05 00 00 00       	mov    eax,0x5
c000d21f:	5b                   	pop    ebx
c000d220:	c3                   	ret    
c000d221:	90                   	nop

c000d222 <Directory::read(unsigned long long, void*, int*)>:
c000d222:	53                   	push   ebx
c000d223:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d227:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d22b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d232:	3c 19                	cmp    al,0x19
c000d234:	77 35                	ja     c000d26b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d236:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c000d23d:	85 c0                	test   eax,eax
c000d23f:	74 2a                	je     c000d26b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d241:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d247:	85 c0                	test   eax,eax
c000d249:	74 20                	je     c000d26b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d24b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d24f:	74 21                	je     c000d272 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d251:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d253:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d257:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d265:	5b                   	pop    ebx
c000d266:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d269:	ff e0                	jmp    eax
c000d26b:	b8 0b 00 00 00       	mov    eax,0xb
c000d270:	eb 05                	jmp    c000d277 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d272:	b8 05 00 00 00       	mov    eax,0x5
c000d277:	5b                   	pop    ebx
c000d278:	c3                   	ret    
c000d279:	90                   	nop

c000d27a <Directory::write(unsigned long long, void*, int*)>:
c000d27a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d27e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d285:	b8 0b 00 00 00       	mov    eax,0xb
c000d28a:	80 fa 19             	cmp    dl,0x19
c000d28d:	77 18                	ja     c000d2a7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d28f:	8b 14 95 40 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd71c0]
c000d296:	85 d2                	test   edx,edx
c000d298:	74 0d                	je     c000d2a7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d29a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d2a1:	19 c0                	sbb    eax,eax
c000d2a3:	83 e0 0a             	and    eax,0xa
c000d2a6:	40                   	inc    eax
c000d2a7:	c3                   	ret    

c000d2a8 <File::isAtty()>:
c000d2a8:	31 c0                	xor    eax,eax
c000d2aa:	c3                   	ret    
c000d2ab:	90                   	nop

c000d2ac <Directory::isAtty()>:
c000d2ac:	31 c0                	xor    eax,eax
c000d2ae:	c3                   	ret    
c000d2af:	90                   	nop

c000d2b0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d2b0:	b8 0a 00 00 00       	mov    eax,0xa
c000d2b5:	c3                   	ret    

c000d2b6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d2b6:	b8 0a 00 00 00       	mov    eax,0xa
c000d2bb:	c3                   	ret    

c000d2bc <Filesystem::allocateSwapfile(char const*, int)>:
c000d2bc:	31 c0                	xor    eax,eax
c000d2be:	31 d2                	xor    edx,edx
c000d2c0:	c3                   	ret    
c000d2c1:	90                   	nop

c000d2c2 <File::~File()>:
c000d2c2:	83 ec 0c             	sub    esp,0xc
c000d2c5:	ba 40 51 02 c0       	mov    edx,0xc0025140
c000d2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ce:	89 10                	mov    DWORD PTR [eax],edx
c000d2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d4:	83 ec 0c             	sub    esp,0xc
c000d2d7:	50                   	push   eax
c000d2d8:	e8 e3 e7 ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000d2dd:	83 c4 10             	add    esp,0x10
c000d2e0:	90                   	nop
c000d2e1:	83 c4 0c             	add    esp,0xc
c000d2e4:	c3                   	ret    
c000d2e5:	90                   	nop

c000d2e6 <File::~File()>:
c000d2e6:	83 ec 0c             	sub    esp,0xc
c000d2e9:	83 ec 0c             	sub    esp,0xc
c000d2ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f0:	e8 cd ff ff ff       	call   c000d2c2 <File::~File()>
c000d2f5:	83 c4 10             	add    esp,0x10
c000d2f8:	83 ec 08             	sub    esp,0x8
c000d2fb:	68 14 01 00 00       	push   0x114
c000d300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d304:	e8 5d fc ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000d309:	83 c4 10             	add    esp,0x10
c000d30c:	83 c4 0c             	add    esp,0xc
c000d30f:	c3                   	ret    

c000d310 <Directory::~Directory()>:
c000d310:	83 ec 0c             	sub    esp,0xc
c000d313:	ba 5c 51 02 c0       	mov    edx,0xc002515c
c000d318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31c:	89 10                	mov    DWORD PTR [eax],edx
c000d31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d322:	83 ec 0c             	sub    esp,0xc
c000d325:	50                   	push   eax
c000d326:	e8 95 e7 ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000d32b:	83 c4 10             	add    esp,0x10
c000d32e:	90                   	nop
c000d32f:	83 c4 0c             	add    esp,0xc
c000d332:	c3                   	ret    
c000d333:	90                   	nop

c000d334 <Directory::~Directory()>:
c000d334:	83 ec 0c             	sub    esp,0xc
c000d337:	83 ec 0c             	sub    esp,0xc
c000d33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33e:	e8 cd ff ff ff       	call   c000d310 <Directory::~Directory()>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	83 ec 08             	sub    esp,0x8
c000d349:	68 14 01 00 00       	push   0x114
c000d34e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d352:	e8 0f fc ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000d357:	83 c4 10             	add    esp,0x10
c000d35a:	83 c4 0c             	add    esp,0xc
c000d35d:	c3                   	ret    

c000d35e <Filesystem::Filesystem()>:
c000d35e:	ba d8 50 02 c0       	mov    edx,0xc00250d8
c000d363:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d367:	89 10                	mov    DWORD PTR [eax],edx
c000d369:	8b 15 b4 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289b4
c000d36f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d373:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d37a:	a3 b4 89 02 c0       	mov    ds:0xc00289b4,eax
c000d37f:	90                   	nop
c000d380:	c3                   	ret    
c000d381:	90                   	nop

c000d382 <Filesystem::~Filesystem()>:
c000d382:	ba d8 50 02 c0       	mov    edx,0xc00250d8
c000d387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d38b:	89 10                	mov    DWORD PTR [eax],edx
c000d38d:	90                   	nop
c000d38e:	c3                   	ret    
c000d38f:	90                   	nop

c000d390 <Filesystem::~Filesystem()>:
c000d390:	83 ec 0c             	sub    esp,0xc
c000d393:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d397:	e8 e6 ff ff ff       	call   c000d382 <Filesystem::~Filesystem()>
c000d39c:	83 c4 04             	add    esp,0x4
c000d39f:	83 ec 08             	sub    esp,0x8
c000d3a2:	6a 08                	push   0x8
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	e8 b9 fb ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000d3ad:	83 c4 10             	add    esp,0x10
c000d3b0:	83 c4 0c             	add    esp,0xc
c000d3b3:	c3                   	ret    

c000d3b4 <Fs::getcwd(Process*, char*, int)>:
c000d3b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3b8:	31 c0                	xor    eax,eax
c000d3ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d3bd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d3c1:	7d 15                	jge    c000d3d8 <Fs::getcwd(Process*, char*, int)+0x24>
c000d3c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d3c7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d3ce:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d3d1:	84 c9                	test   cl,cl
c000d3d3:	74 06                	je     c000d3db <Fs::getcwd(Process*, char*, int)+0x27>
c000d3d5:	40                   	inc    eax
c000d3d6:	eb e2                	jmp    c000d3ba <Fs::getcwd(Process*, char*, int)+0x6>
c000d3d8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d3db:	31 c0                	xor    eax,eax
c000d3dd:	c3                   	ret    

c000d3de <Fs::initVFS()>:
c000d3de:	83 ec 18             	sub    esp,0x18
c000d3e1:	6a 08                	push   0x8
c000d3e3:	e8 73 c9 ff ff       	call   c0009d5b <malloc>
c000d3e8:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3eb:	e8 3c eb 00 00       	call   c001bf2c <FAT::FAT()>
c000d3f0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d3f7:	e8 5f c9 ff ff       	call   c0009d5b <malloc>
c000d3fc:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3ff:	e8 b8 fd 00 00       	call   c001d1bc <ISO9660::ISO9660()>
c000d404:	83 c4 1c             	add    esp,0x1c
c000d407:	c3                   	ret    

c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d408:	55                   	push   ebp
c000d409:	57                   	push   edi
c000d40a:	56                   	push   esi
c000d40b:	53                   	push   ebx
c000d40c:	81 ec 10 04 00 00    	sub    esp,0x410
c000d412:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d419:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d420:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d427:	68 00 04 00 00       	push   0x400
c000d42c:	6a 00                	push   0x0
c000d42e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d432:	56                   	push   esi
c000d433:	e8 4c 32 ff ff       	call   c0000684 <memset>
c000d438:	83 c4 10             	add    esp,0x10
c000d43b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d43f:	75 0b                	jne    c000d44c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d441:	50                   	push   eax
c000d442:	50                   	push   eax
c000d443:	57                   	push   edi
c000d444:	56                   	push   esi
c000d445:	e8 f6 32 ff ff       	call   c0000740 <strcpy>
c000d44a:	eb 41                	jmp    c000d48d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d44c:	8a 07                	mov    al,BYTE PTR [edi]
c000d44e:	3c 5c                	cmp    al,0x5c
c000d450:	74 04                	je     c000d456 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d452:	3c 2f                	cmp    al,0x2f
c000d454:	75 18                	jne    c000d46e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d456:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d459:	3c 60                	cmp    al,0x60
c000d45b:	7e 03                	jle    c000d460 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d45d:	83 e8 20             	sub    eax,0x20
c000d460:	88 04 24             	mov    BYTE PTR [esp],al
c000d463:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d46a:	50                   	push   eax
c000d46b:	50                   	push   eax
c000d46c:	eb 18                	jmp    c000d486 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d46e:	50                   	push   eax
c000d46f:	50                   	push   eax
c000d470:	55                   	push   ebp
c000d471:	56                   	push   esi
c000d472:	e8 c9 32 ff ff       	call   c0000740 <strcpy>
c000d477:	5a                   	pop    edx
c000d478:	59                   	pop    ecx
c000d479:	68 5a 69 02 c0       	push   0xc002695a
c000d47e:	56                   	push   esi
c000d47f:	e8 fc 33 ff ff       	call   c0000880 <strcat>
c000d484:	5d                   	pop    ebp
c000d485:	58                   	pop    eax
c000d486:	57                   	push   edi
c000d487:	56                   	push   esi
c000d488:	e8 f3 33 ff ff       	call   c0000880 <strcat>
c000d48d:	83 c4 10             	add    esp,0x10
c000d490:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d493:	3c 60                	cmp    al,0x60
c000d495:	7e 03                	jle    c000d49a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d497:	83 e8 20             	sub    eax,0x20
c000d49a:	88 04 24             	mov    BYTE PTR [esp],al
c000d49d:	88 03                	mov    BYTE PTR [ebx],al
c000d49f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d4a6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d4ac:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d4b0:	bf 03 00 00 00       	mov    edi,0x3
c000d4b5:	b8 03 00 00 00       	mov    eax,0x3
c000d4ba:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d4bd:	84 d2                	test   dl,dl
c000d4bf:	0f 84 91 00 00 00    	je     c000d556 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d4c5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d4c8:	80 fa 5c             	cmp    dl,0x5c
c000d4cb:	74 05                	je     c000d4d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d4cd:	80 fa 2f             	cmp    dl,0x2f
c000d4d0:	75 12                	jne    c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4d2:	89 c5                	mov    ebp,eax
c000d4d4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d4d9:	74 09                	je     c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4db:	40                   	inc    eax
c000d4dc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d4e0:	89 cf                	mov    edi,ecx
c000d4e2:	eb d6                	jmp    c000d4ba <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d4e4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d4e9:	75 5b                	jne    c000d546 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4eb:	80 fa 2e             	cmp    dl,0x2e
c000d4ee:	75 56                	jne    c000d546 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4f0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d4f4:	74 19                	je     c000d50f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d4f6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d4fb:	74 53                	je     c000d550 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d4fd:	89 f9                	mov    ecx,edi
c000d4ff:	41                   	inc    ecx
c000d500:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d503:	80 fa 2f             	cmp    dl,0x2f
c000d506:	74 f7                	je     c000d4ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d508:	80 fa 5c             	cmp    dl,0x5c
c000d50b:	74 f2                	je     c000d4ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d50d:	eb d1                	jmp    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d50f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d514:	74 3a                	je     c000d550 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d516:	83 f8 03             	cmp    eax,0x3
c000d519:	74 c5                	je     c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d51b:	41                   	inc    ecx
c000d51c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d51f:	80 fa 2f             	cmp    dl,0x2f
c000d522:	74 f7                	je     c000d51b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d524:	80 fa 5c             	cmp    dl,0x5c
c000d527:	74 f2                	je     c000d51b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d529:	48                   	dec    eax
c000d52a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d52e:	75 06                	jne    c000d536 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d530:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d534:	eb f3                	jmp    c000d529 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d536:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d53a:	74 07                	je     c000d543 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d53c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d540:	48                   	dec    eax
c000d541:	eb f3                	jmp    c000d536 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d543:	40                   	inc    eax
c000d544:	eb 9a                	jmp    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d546:	80 fa 2f             	cmp    dl,0x2f
c000d549:	74 95                	je     c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d54b:	80 fa 5c             	cmp    dl,0x5c
c000d54e:	74 90                	je     c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d550:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d553:	40                   	inc    eax
c000d554:	eb 8a                	jmp    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d556:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d55a:	83 ec 0c             	sub    esp,0xc
c000d55d:	53                   	push   ebx
c000d55e:	e8 3d 31 ff ff       	call   c00006a0 <strlen>
c000d563:	83 c4 10             	add    esp,0x10
c000d566:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d56b:	75 26                	jne    c000d593 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d56d:	83 ec 0c             	sub    esp,0xc
c000d570:	53                   	push   ebx
c000d571:	e8 2a 31 ff ff       	call   c00006a0 <strlen>
c000d576:	83 c4 10             	add    esp,0x10
c000d579:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d57e:	74 26                	je     c000d5a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d580:	83 ec 0c             	sub    esp,0xc
c000d583:	53                   	push   ebx
c000d584:	e8 17 31 ff ff       	call   c00006a0 <strlen>
c000d589:	83 c4 10             	add    esp,0x10
c000d58c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d591:	eb c7                	jmp    c000d55a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d593:	83 ec 0c             	sub    esp,0xc
c000d596:	53                   	push   ebx
c000d597:	e8 04 31 ff ff       	call   c00006a0 <strlen>
c000d59c:	83 c4 10             	add    esp,0x10
c000d59f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d5a4:	74 c7                	je     c000d56d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d5a6:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d5ac:	5b                   	pop    ebx
c000d5ad:	5e                   	pop    esi
c000d5ae:	5f                   	pop    edi
c000d5af:	5d                   	pop    ebp
c000d5b0:	c3                   	ret    
c000d5b1:	90                   	nop

c000d5b2 <File::File(char const*, Process*)>:
c000d5b2:	83 ec 0c             	sub    esp,0xc
c000d5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b9:	83 ec 08             	sub    esp,0x8
c000d5bc:	6a 00                	push   0x0
c000d5be:	50                   	push   eax
c000d5bf:	e8 1a e3 ff ff       	call   c000b8de <UnixFile::UnixFile(int)>
c000d5c4:	83 c4 10             	add    esp,0x10
c000d5c7:	ba 40 51 02 c0       	mov    edx,0xc0025140
c000d5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d0:	89 10                	mov    DWORD PTR [eax],edx
c000d5d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e0:	83 c0 0d             	add    eax,0xd
c000d5e3:	83 ec 04             	sub    esp,0x4
c000d5e6:	52                   	push   edx
c000d5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5eb:	50                   	push   eax
c000d5ec:	e8 17 fe ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d5fb:	8d 50 bf             	lea    edx,[eax-0x41]
c000d5fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d602:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d614:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d61a:	0f b6 c0             	movzx  eax,al
c000d61d:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c000d624:	85 c0                	test   eax,eax
c000d626:	74 5e                	je     c000d686 <File::File(char const*, Process*)+0xd4>
c000d628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d62c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d632:	0f b6 c0             	movzx  eax,al
c000d635:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c000d63c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d642:	85 c0                	test   eax,eax
c000d644:	75 40                	jne    c000d686 <File::File(char const*, Process*)+0xd4>
c000d646:	83 ec 0c             	sub    esp,0xc
c000d649:	68 7c 50 02 c0       	push   0xc002507c
c000d64e:	e8 f4 f9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000d653:	83 c4 10             	add    esp,0x10
c000d656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d660:	0f b6 c0             	movzx  eax,al
c000d663:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c000d66a:	83 ec 0c             	sub    esp,0xc
c000d66d:	50                   	push   eax
c000d66e:	e8 13 31 00 00       	call   c0010786 <LogicalDisk::mount()>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	83 ec 0c             	sub    esp,0xc
c000d679:	68 49 73 02 c0       	push   0xc0027349
c000d67e:	e8 c4 f9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000d683:	83 c4 10             	add    esp,0x10
c000d686:	90                   	nop
c000d687:	83 c4 0c             	add    esp,0xc
c000d68a:	c3                   	ret    
c000d68b:	90                   	nop

c000d68c <File::open(FileOpenMode)>:
c000d68c:	53                   	push   ebx
c000d68d:	b8 0b 00 00 00       	mov    eax,0xb
c000d692:	83 ec 08             	sub    esp,0x8
c000d695:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d699:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d6a0:	80 fa 19             	cmp    dl,0x19
c000d6a3:	77 40                	ja     c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6a5:	8b 14 95 40 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd71c0]
c000d6ac:	85 d2                	test   edx,edx
c000d6ae:	74 35                	je     c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6b0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6b6:	85 d2                	test   edx,edx
c000d6b8:	74 2b                	je     c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6ba:	b8 06 00 00 00       	mov    eax,0x6
c000d6bf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d6c3:	75 20                	jne    c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6c5:	8b 02                	mov    eax,DWORD PTR [edx]
c000d6c7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d6cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6d1:	51                   	push   ecx
c000d6d2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d6d5:	51                   	push   ecx
c000d6d6:	52                   	push   edx
c000d6d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d6da:	83 c4 10             	add    esp,0x10
c000d6dd:	85 c0                	test   eax,eax
c000d6df:	75 04                	jne    c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6e1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d6e5:	83 c4 08             	add    esp,0x8
c000d6e8:	5b                   	pop    ebx
c000d6e9:	c3                   	ret    

c000d6ea <File::close()>:
c000d6ea:	53                   	push   ebx
c000d6eb:	b8 0b 00 00 00       	mov    eax,0xb
c000d6f0:	83 ec 08             	sub    esp,0x8
c000d6f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d6f7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d6fe:	80 fa 19             	cmp    dl,0x19
c000d701:	77 41                	ja     c000d744 <File::close()+0x5a>
c000d703:	8b 1c 95 40 8e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd71c0]
c000d70a:	85 db                	test   ebx,ebx
c000d70c:	74 36                	je     c000d744 <File::close()+0x5a>
c000d70e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d715:	74 2d                	je     c000d744 <File::close()+0x5a>
c000d717:	b8 05 00 00 00       	mov    eax,0x5
c000d71c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d720:	74 22                	je     c000d744 <File::close()+0x5a>
c000d722:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d726:	8b 04 95 40 8e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd71c0]
c000d72d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d733:	53                   	push   ebx
c000d734:	53                   	push   ebx
c000d735:	8b 10                	mov    edx,DWORD PTR [eax]
c000d737:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d73d:	50                   	push   eax
c000d73e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d741:	83 c4 10             	add    esp,0x10
c000d744:	83 c4 08             	add    esp,0x8
c000d747:	5b                   	pop    ebx
c000d748:	c3                   	ret    
c000d749:	90                   	nop

c000d74a <File::seek(unsigned long long)>:
c000d74a:	56                   	push   esi
c000d74b:	53                   	push   ebx
c000d74c:	b8 0b 00 00 00       	mov    eax,0xb
c000d751:	51                   	push   ecx
c000d752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d756:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d75a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d761:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d765:	80 fa 19             	cmp    dl,0x19
c000d768:	77 31                	ja     c000d79b <File::seek(unsigned long long)+0x51>
c000d76a:	8b 14 95 40 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd71c0]
c000d771:	85 d2                	test   edx,edx
c000d773:	74 26                	je     c000d79b <File::seek(unsigned long long)+0x51>
c000d775:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d77b:	85 d2                	test   edx,edx
c000d77d:	74 1c                	je     c000d79b <File::seek(unsigned long long)+0x51>
c000d77f:	b8 05 00 00 00       	mov    eax,0x5
c000d784:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d788:	74 11                	je     c000d79b <File::seek(unsigned long long)+0x51>
c000d78a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d78c:	53                   	push   ebx
c000d78d:	51                   	push   ecx
c000d78e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d794:	52                   	push   edx
c000d795:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d798:	83 c4 10             	add    esp,0x10
c000d79b:	5a                   	pop    edx
c000d79c:	5b                   	pop    ebx
c000d79d:	5e                   	pop    esi
c000d79e:	c3                   	ret    
c000d79f:	90                   	nop

c000d7a0 <File::tell(unsigned long long*)>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	b8 0b 00 00 00       	mov    eax,0xb
c000d7a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7ac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d7b3:	80 fa 19             	cmp    dl,0x19
c000d7b6:	77 34                	ja     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7b8:	8b 14 95 40 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd71c0]
c000d7bf:	85 d2                	test   edx,edx
c000d7c1:	74 29                	je     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7c3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7c9:	85 d2                	test   edx,edx
c000d7cb:	74 1f                	je     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7cd:	b8 05 00 00 00       	mov    eax,0x5
c000d7d2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7d6:	74 14                	je     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7d8:	50                   	push   eax
c000d7d9:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7df:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7e5:	52                   	push   edx
c000d7e6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d7e9:	83 c4 10             	add    esp,0x10
c000d7ec:	83 c4 0c             	add    esp,0xc
c000d7ef:	c3                   	ret    

c000d7f0 <File::rewind()>:
c000d7f0:	83 ec 10             	sub    esp,0x10
c000d7f3:	6a 00                	push   0x0
c000d7f5:	6a 00                	push   0x0
c000d7f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7fb:	e8 4a ff ff ff       	call   c000d74a <File::seek(unsigned long long)>
c000d800:	83 c4 1c             	add    esp,0x1c
c000d803:	c3                   	ret    

c000d804 <File::unlink()>:
c000d804:	83 ec 0c             	sub    esp,0xc
c000d807:	b8 0b 00 00 00       	mov    eax,0xb
c000d80c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d810:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d817:	80 f9 19             	cmp    cl,0x19
c000d81a:	77 2f                	ja     c000d84b <File::unlink()+0x47>
c000d81c:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c000d823:	85 c9                	test   ecx,ecx
c000d825:	74 24                	je     c000d84b <File::unlink()+0x47>
c000d827:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d82d:	85 c9                	test   ecx,ecx
c000d82f:	74 1a                	je     c000d84b <File::unlink()+0x47>
c000d831:	b8 06 00 00 00       	mov    eax,0x6
c000d836:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d83a:	75 0f                	jne    c000d84b <File::unlink()+0x47>
c000d83c:	83 c2 0d             	add    edx,0xd
c000d83f:	50                   	push   eax
c000d840:	50                   	push   eax
c000d841:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d843:	52                   	push   edx
c000d844:	51                   	push   ecx
c000d845:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d848:	83 c4 10             	add    esp,0x10
c000d84b:	83 c4 0c             	add    esp,0xc
c000d84e:	c3                   	ret    
c000d84f:	90                   	nop

c000d850 <File::rename(char const*)>:
c000d850:	83 ec 0c             	sub    esp,0xc
c000d853:	b8 0b 00 00 00       	mov    eax,0xb
c000d858:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d85c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d863:	80 f9 19             	cmp    cl,0x19
c000d866:	77 32                	ja     c000d89a <File::rename(char const*)+0x4a>
c000d868:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c000d86f:	85 c9                	test   ecx,ecx
c000d871:	74 27                	je     c000d89a <File::rename(char const*)+0x4a>
c000d873:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d879:	85 c9                	test   ecx,ecx
c000d87b:	74 1d                	je     c000d89a <File::rename(char const*)+0x4a>
c000d87d:	b8 06 00 00 00       	mov    eax,0x6
c000d882:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d886:	75 12                	jne    c000d89a <File::rename(char const*)+0x4a>
c000d888:	83 c2 0d             	add    edx,0xd
c000d88b:	50                   	push   eax
c000d88c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d892:	52                   	push   edx
c000d893:	51                   	push   ecx
c000d894:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d897:	83 c4 10             	add    esp,0x10
c000d89a:	83 c4 0c             	add    esp,0xc
c000d89d:	c3                   	ret    

c000d89e <File::chfatattr(unsigned char, unsigned char)>:
c000d89e:	57                   	push   edi
c000d89f:	b8 0b 00 00 00       	mov    eax,0xb
c000d8a4:	56                   	push   esi
c000d8a5:	53                   	push   ebx
c000d8a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d8b9:	80 f9 19             	cmp    cl,0x19
c000d8bc:	77 37                	ja     c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8be:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c000d8c5:	85 c9                	test   ecx,ecx
c000d8c7:	74 2c                	je     c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8cf:	85 c9                	test   ecx,ecx
c000d8d1:	74 22                	je     c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8d3:	b8 06 00 00 00       	mov    eax,0x6
c000d8d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8dc:	75 17                	jne    c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8de:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d8e0:	89 f0                	mov    eax,esi
c000d8e2:	83 c2 0d             	add    edx,0xd
c000d8e5:	0f b6 f0             	movzx  esi,al
c000d8e8:	0f b6 db             	movzx  ebx,bl
c000d8eb:	56                   	push   esi
c000d8ec:	53                   	push   ebx
c000d8ed:	52                   	push   edx
c000d8ee:	51                   	push   ecx
c000d8ef:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	5b                   	pop    ebx
c000d8f6:	5e                   	pop    esi
c000d8f7:	5f                   	pop    edi
c000d8f8:	c3                   	ret    
c000d8f9:	90                   	nop

c000d8fa <File::exists()>:
c000d8fa:	83 ec 0c             	sub    esp,0xc
c000d8fd:	31 c0                	xor    eax,eax
c000d8ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d903:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d90a:	80 f9 19             	cmp    cl,0x19
c000d90d:	77 24                	ja     c000d933 <File::exists()+0x39>
c000d90f:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c000d916:	85 c9                	test   ecx,ecx
c000d918:	74 19                	je     c000d933 <File::exists()+0x39>
c000d91a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d920:	85 c9                	test   ecx,ecx
c000d922:	74 0f                	je     c000d933 <File::exists()+0x39>
c000d924:	83 c2 0d             	add    edx,0xd
c000d927:	50                   	push   eax
c000d928:	50                   	push   eax
c000d929:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d92b:	52                   	push   edx
c000d92c:	51                   	push   ecx
c000d92d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	83 c4 0c             	add    esp,0xc
c000d936:	c3                   	ret    
c000d937:	90                   	nop

c000d938 <File::stat(unsigned long long*, bool*)>:
c000d938:	56                   	push   esi
c000d939:	53                   	push   ebx
c000d93a:	50                   	push   eax
c000d93b:	b8 0b 00 00 00       	mov    eax,0xb
c000d940:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d944:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d948:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d94f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d953:	80 f9 19             	cmp    cl,0x19
c000d956:	77 3d                	ja     c000d995 <File::stat(unsigned long long*, bool*)+0x5d>
c000d958:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c000d95f:	85 c9                	test   ecx,ecx
c000d961:	74 32                	je     c000d995 <File::stat(unsigned long long*, bool*)+0x5d>
c000d963:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d969:	85 c9                	test   ecx,ecx
c000d96b:	74 28                	je     c000d995 <File::stat(unsigned long long*, bool*)+0x5d>
c000d96d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d96f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d973:	74 13                	je     c000d988 <File::stat(unsigned long long*, bool*)+0x50>
c000d975:	83 ec 04             	sub    esp,0x4
c000d978:	56                   	push   esi
c000d979:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d97f:	51                   	push   ecx
c000d980:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d983:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d986:	eb 0a                	jmp    c000d992 <File::stat(unsigned long long*, bool*)+0x5a>
c000d988:	53                   	push   ebx
c000d989:	83 c2 0d             	add    edx,0xd
c000d98c:	56                   	push   esi
c000d98d:	52                   	push   edx
c000d98e:	51                   	push   ecx
c000d98f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d992:	83 c4 10             	add    esp,0x10
c000d995:	5a                   	pop    edx
c000d996:	5b                   	pop    ebx
c000d997:	5e                   	pop    esi
c000d998:	c3                   	ret    

c000d999 <Fs::setcwd(Process*, char*)>:
c000d999:	55                   	push   ebp
c000d99a:	57                   	push   edi
c000d99b:	56                   	push   esi
c000d99c:	53                   	push   ebx
c000d99d:	81 ec 20 02 00 00    	sub    esp,0x220
c000d9a3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d9aa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d9b0:	57                   	push   edi
c000d9b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d9b8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d9bc:	56                   	push   esi
c000d9bd:	e8 46 fa ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d9c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9c5:	e8 d6 2c ff ff       	call   c00006a0 <strlen>
c000d9ca:	83 c4 10             	add    esp,0x10
c000d9cd:	83 f8 02             	cmp    eax,0x2
c000d9d0:	77 15                	ja     c000d9e7 <Fs::setcwd(Process*, char*)+0x4e>
c000d9d2:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d9d7:	83 eb 41             	sub    ebx,0x41
c000d9da:	8b 04 9d 40 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71c0]
c000d9e1:	85 c0                	test   eax,eax
c000d9e3:	75 1c                	jne    c000da01 <Fs::setcwd(Process*, char*)+0x68>
c000d9e5:	eb 4c                	jmp    c000da33 <Fs::setcwd(Process*, char*)+0x9a>
c000d9e7:	83 ec 0c             	sub    esp,0xc
c000d9ea:	56                   	push   esi
c000d9eb:	e8 b0 2c ff ff       	call   c00006a0 <strlen>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	83 f8 03             	cmp    eax,0x3
c000d9f6:	75 74                	jne    c000da6c <Fs::setcwd(Process*, char*)+0xd3>
c000d9f8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d9fd:	75 6d                	jne    c000da6c <Fs::setcwd(Process*, char*)+0xd3>
c000d9ff:	eb d1                	jmp    c000d9d2 <Fs::setcwd(Process*, char*)+0x39>
c000da01:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000da08:	75 29                	jne    c000da33 <Fs::setcwd(Process*, char*)+0x9a>
c000da0a:	83 ec 0c             	sub    esp,0xc
c000da0d:	68 54 50 02 c0       	push   0xc0025054
c000da12:	e8 30 f6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000da17:	5a                   	pop    edx
c000da18:	ff 34 9d 40 8e 02 c0 	push   DWORD PTR [ebx*4-0x3ffd71c0]
c000da1f:	e8 62 2d 00 00       	call   c0010786 <LogicalDisk::mount()>
c000da24:	c7 04 24 49 73 02 c0 	mov    DWORD PTR [esp],0xc0027349
c000da2b:	e8 17 f6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000da30:	83 c4 10             	add    esp,0x10
c000da33:	b8 03 00 00 00       	mov    eax,0x3
c000da38:	83 fb 19             	cmp    ebx,0x19
c000da3b:	0f 87 c6 00 00 00    	ja     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000da41:	8b 14 9d 40 8e 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd71c0]
c000da48:	b8 05 00 00 00       	mov    eax,0x5
c000da4d:	85 d2                	test   edx,edx
c000da4f:	0f 84 b2 00 00 00    	je     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000da55:	b8 06 00 00 00       	mov    eax,0x6
c000da5a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da61:	0f 85 92 00 00 00    	jne    c000daf9 <Fs::setcwd(Process*, char*)+0x160>
c000da67:	e9 9b 00 00 00       	jmp    c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000da6c:	83 ec 0c             	sub    esp,0xc
c000da6f:	68 14 01 00 00       	push   0x114
c000da74:	e8 e2 c2 ff ff       	call   c0009d5b <malloc>
c000da79:	83 c4 0c             	add    esp,0xc
c000da7c:	89 c3                	mov    ebx,eax
c000da7e:	55                   	push   ebp
c000da7f:	56                   	push   esi
c000da80:	50                   	push   eax
c000da81:	e8 2c fb ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c000da86:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da8b:	83 c4 0c             	add    esp,0xc
c000da8e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da92:	50                   	push   eax
c000da93:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da97:	50                   	push   eax
c000da98:	53                   	push   ebx
c000da99:	e8 9a fe ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c000da9e:	83 c4 10             	add    esp,0x10
c000daa1:	83 f8 02             	cmp    eax,0x2
c000daa4:	74 04                	je     c000daaa <Fs::setcwd(Process*, char*)+0x111>
c000daa6:	85 c0                	test   eax,eax
c000daa8:	74 1c                	je     c000dac6 <Fs::setcwd(Process*, char*)+0x12d>
c000daaa:	b8 01 00 00 00       	mov    eax,0x1
c000daaf:	85 db                	test   ebx,ebx
c000dab1:	74 54                	je     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dab3:	83 ec 0c             	sub    esp,0xc
c000dab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dab8:	53                   	push   ebx
c000dab9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dabc:	83 c4 10             	add    esp,0x10
c000dabf:	b8 01 00 00 00       	mov    eax,0x1
c000dac4:	eb 41                	jmp    c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dac6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000dacb:	75 1c                	jne    c000dae9 <Fs::setcwd(Process*, char*)+0x150>
c000dacd:	b8 02 00 00 00       	mov    eax,0x2
c000dad2:	85 db                	test   ebx,ebx
c000dad4:	74 31                	je     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dad6:	83 ec 0c             	sub    esp,0xc
c000dad9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dadb:	53                   	push   ebx
c000dadc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	b8 02 00 00 00       	mov    eax,0x2
c000dae7:	eb 1e                	jmp    c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dae9:	85 db                	test   ebx,ebx
c000daeb:	74 0c                	je     c000daf9 <Fs::setcwd(Process*, char*)+0x160>
c000daed:	83 ec 0c             	sub    esp,0xc
c000daf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000daf2:	53                   	push   ebx
c000daf3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000daf6:	83 c4 10             	add    esp,0x10
c000daf9:	50                   	push   eax
c000dafa:	50                   	push   eax
c000dafb:	56                   	push   esi
c000dafc:	57                   	push   edi
c000dafd:	e8 3e 2c ff ff       	call   c0000740 <strcpy>
c000db02:	83 c4 10             	add    esp,0x10
c000db05:	31 c0                	xor    eax,eax
c000db07:	81 c4 1c 02 00 00    	add    esp,0x21c
c000db0d:	5b                   	pop    ebx
c000db0e:	5e                   	pop    esi
c000db0f:	5f                   	pop    edi
c000db10:	5d                   	pop    ebp
c000db11:	c3                   	ret    

c000db12 <Directory::Directory(char const*, Process*)>:
c000db12:	83 ec 0c             	sub    esp,0xc
c000db15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db19:	83 ec 08             	sub    esp,0x8
c000db1c:	6a 00                	push   0x0
c000db1e:	50                   	push   eax
c000db1f:	e8 ba dd ff ff       	call   c000b8de <UnixFile::UnixFile(int)>
c000db24:	83 c4 10             	add    esp,0x10
c000db27:	ba 5c 51 02 c0       	mov    edx,0xc002515c
c000db2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db30:	89 10                	mov    DWORD PTR [eax],edx
c000db32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db36:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000db3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db40:	83 c0 0d             	add    eax,0xd
c000db43:	83 ec 04             	sub    esp,0x4
c000db46:	52                   	push   edx
c000db47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4b:	50                   	push   eax
c000db4c:	e8 b7 f8 ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db58:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000db5b:	8d 50 bf             	lea    edx,[eax-0x41]
c000db5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db62:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000db68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000db70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db74:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db7a:	0f b6 c0             	movzx  eax,al
c000db7d:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c000db84:	85 c0                	test   eax,eax
c000db86:	74 5e                	je     c000dbe6 <Directory::Directory(char const*, Process*)+0xd4>
c000db88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db92:	0f b6 c0             	movzx  eax,al
c000db95:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c000db9c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dba2:	85 c0                	test   eax,eax
c000dba4:	75 40                	jne    c000dbe6 <Directory::Directory(char const*, Process*)+0xd4>
c000dba6:	83 ec 0c             	sub    esp,0xc
c000dba9:	68 a4 50 02 c0       	push   0xc00250a4
c000dbae:	e8 94 f4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000dbb3:	83 c4 10             	add    esp,0x10
c000dbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbba:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dbc0:	0f b6 c0             	movzx  eax,al
c000dbc3:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c000dbca:	83 ec 0c             	sub    esp,0xc
c000dbcd:	50                   	push   eax
c000dbce:	e8 b3 2b 00 00       	call   c0010786 <LogicalDisk::mount()>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	83 ec 0c             	sub    esp,0xc
c000dbd9:	68 49 73 02 c0       	push   0xc0027349
c000dbde:	e8 64 f4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000dbe3:	83 c4 10             	add    esp,0x10
c000dbe6:	90                   	nop
c000dbe7:	83 c4 0c             	add    esp,0xc
c000dbea:	c3                   	ret    
c000dbeb:	90                   	nop

c000dbec <Directory::open()>:
c000dbec:	53                   	push   ebx
c000dbed:	b8 0b 00 00 00       	mov    eax,0xb
c000dbf2:	83 ec 08             	sub    esp,0x8
c000dbf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbf9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dc00:	80 fa 19             	cmp    dl,0x19
c000dc03:	77 3d                	ja     c000dc42 <Directory::open()+0x56>
c000dc05:	8b 14 95 40 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd71c0]
c000dc0c:	85 d2                	test   edx,edx
c000dc0e:	74 32                	je     c000dc42 <Directory::open()+0x56>
c000dc10:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dc16:	85 d2                	test   edx,edx
c000dc18:	74 28                	je     c000dc42 <Directory::open()+0x56>
c000dc1a:	b8 06 00 00 00       	mov    eax,0x6
c000dc1f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dc23:	75 1d                	jne    c000dc42 <Directory::open()+0x56>
c000dc25:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dc2b:	50                   	push   eax
c000dc2c:	8b 02                	mov    eax,DWORD PTR [edx]
c000dc2e:	51                   	push   ecx
c000dc2f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dc32:	51                   	push   ecx
c000dc33:	52                   	push   edx
c000dc34:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	85 c0                	test   eax,eax
c000dc3c:	75 04                	jne    c000dc42 <Directory::open()+0x56>
c000dc3e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dc42:	83 c4 08             	add    esp,0x8
c000dc45:	5b                   	pop    ebx
c000dc46:	c3                   	ret    
c000dc47:	90                   	nop

c000dc48 <Directory::close()>:
c000dc48:	53                   	push   ebx
c000dc49:	b8 0b 00 00 00       	mov    eax,0xb
c000dc4e:	83 ec 08             	sub    esp,0x8
c000dc51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dc55:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dc5c:	80 fa 19             	cmp    dl,0x19
c000dc5f:	77 41                	ja     c000dca2 <Directory::close()+0x5a>
c000dc61:	8b 1c 95 40 8e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd71c0]
c000dc68:	85 db                	test   ebx,ebx
c000dc6a:	74 36                	je     c000dca2 <Directory::close()+0x5a>
c000dc6c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dc73:	74 2d                	je     c000dca2 <Directory::close()+0x5a>
c000dc75:	b8 05 00 00 00       	mov    eax,0x5
c000dc7a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dc7e:	74 22                	je     c000dca2 <Directory::close()+0x5a>
c000dc80:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc84:	8b 04 95 40 8e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd71c0]
c000dc8b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc91:	53                   	push   ebx
c000dc92:	53                   	push   ebx
c000dc93:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc95:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc9b:	50                   	push   eax
c000dc9c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc9f:	83 c4 10             	add    esp,0x10
c000dca2:	83 c4 08             	add    esp,0x8
c000dca5:	5b                   	pop    ebx
c000dca6:	c3                   	ret    
c000dca7:	90                   	nop

c000dca8 <Directory::unlink()>:
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	b8 0b 00 00 00       	mov    eax,0xb
c000dcb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcbb:	80 f9 19             	cmp    cl,0x19
c000dcbe:	77 2f                	ja     c000dcef <Directory::unlink()+0x47>
c000dcc0:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c000dcc7:	85 c9                	test   ecx,ecx
c000dcc9:	74 24                	je     c000dcef <Directory::unlink()+0x47>
c000dccb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dcd1:	85 c9                	test   ecx,ecx
c000dcd3:	74 1a                	je     c000dcef <Directory::unlink()+0x47>
c000dcd5:	b8 06 00 00 00       	mov    eax,0x6
c000dcda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dcde:	75 0f                	jne    c000dcef <Directory::unlink()+0x47>
c000dce0:	83 c2 0d             	add    edx,0xd
c000dce3:	50                   	push   eax
c000dce4:	50                   	push   eax
c000dce5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dce7:	52                   	push   edx
c000dce8:	51                   	push   ecx
c000dce9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dcec:	83 c4 10             	add    esp,0x10
c000dcef:	83 c4 0c             	add    esp,0xc
c000dcf2:	c3                   	ret    
c000dcf3:	90                   	nop

c000dcf4 <Directory::rename(char const*)>:
c000dcf4:	83 ec 0c             	sub    esp,0xc
c000dcf7:	b8 0b 00 00 00       	mov    eax,0xb
c000dcfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd07:	80 f9 19             	cmp    cl,0x19
c000dd0a:	77 32                	ja     c000dd3e <Directory::rename(char const*)+0x4a>
c000dd0c:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c000dd13:	85 c9                	test   ecx,ecx
c000dd15:	74 27                	je     c000dd3e <Directory::rename(char const*)+0x4a>
c000dd17:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd1d:	85 c9                	test   ecx,ecx
c000dd1f:	74 1d                	je     c000dd3e <Directory::rename(char const*)+0x4a>
c000dd21:	b8 06 00 00 00       	mov    eax,0x6
c000dd26:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd2a:	75 12                	jne    c000dd3e <Directory::rename(char const*)+0x4a>
c000dd2c:	83 c2 0d             	add    edx,0xd
c000dd2f:	50                   	push   eax
c000dd30:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd36:	52                   	push   edx
c000dd37:	51                   	push   ecx
c000dd38:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dd3b:	83 c4 10             	add    esp,0x10
c000dd3e:	83 c4 0c             	add    esp,0xc
c000dd41:	c3                   	ret    

c000dd42 <Directory::exists()>:
c000dd42:	83 ec 0c             	sub    esp,0xc
c000dd45:	31 c0                	xor    eax,eax
c000dd47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd4b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd52:	80 f9 19             	cmp    cl,0x19
c000dd55:	77 24                	ja     c000dd7b <Directory::exists()+0x39>
c000dd57:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c000dd5e:	85 c9                	test   ecx,ecx
c000dd60:	74 19                	je     c000dd7b <Directory::exists()+0x39>
c000dd62:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd68:	85 c9                	test   ecx,ecx
c000dd6a:	74 0f                	je     c000dd7b <Directory::exists()+0x39>
c000dd6c:	83 c2 0d             	add    edx,0xd
c000dd6f:	50                   	push   eax
c000dd70:	50                   	push   eax
c000dd71:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd73:	52                   	push   edx
c000dd74:	51                   	push   ecx
c000dd75:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dd78:	83 c4 10             	add    esp,0x10
c000dd7b:	83 c4 0c             	add    esp,0xc
c000dd7e:	c3                   	ret    
c000dd7f:	90                   	nop

c000dd80 <Directory::read(dirent*)>:
c000dd80:	83 ec 1c             	sub    esp,0x1c
c000dd83:	b8 0b 00 00 00       	mov    eax,0xb
c000dd88:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd8c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd93:	80 fa 19             	cmp    dl,0x19
c000dd96:	77 30                	ja     c000ddc8 <Directory::read(dirent*)+0x48>
c000dd98:	8b 14 95 40 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd71c0]
c000dd9f:	85 d2                	test   edx,edx
c000dda1:	74 25                	je     c000ddc8 <Directory::read(dirent*)+0x48>
c000dda3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ddaa:	74 1c                	je     c000ddc8 <Directory::read(dirent*)+0x48>
c000ddac:	83 ec 0c             	sub    esp,0xc
c000ddaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddb1:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ddb5:	52                   	push   edx
c000ddb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddba:	6a 00                	push   0x0
c000ddbc:	68 10 01 00 00       	push   0x110
c000ddc1:	51                   	push   ecx
c000ddc2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ddc5:	83 c4 20             	add    esp,0x20
c000ddc8:	83 c4 1c             	add    esp,0x1c
c000ddcb:	c3                   	ret    

c000ddcc <Directory::create()>:
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	b8 0b 00 00 00       	mov    eax,0xb
c000ddd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddd8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dddf:	80 f9 19             	cmp    cl,0x19
c000dde2:	77 2f                	ja     c000de13 <Directory::create()+0x47>
c000dde4:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c000ddeb:	85 c9                	test   ecx,ecx
c000dded:	74 24                	je     c000de13 <Directory::create()+0x47>
c000ddef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ddf5:	85 c9                	test   ecx,ecx
c000ddf7:	74 1a                	je     c000de13 <Directory::create()+0x47>
c000ddf9:	b8 06 00 00 00       	mov    eax,0x6
c000ddfe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000de02:	75 0f                	jne    c000de13 <Directory::create()+0x47>
c000de04:	83 c2 0d             	add    edx,0xd
c000de07:	50                   	push   eax
c000de08:	50                   	push   eax
c000de09:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de0b:	52                   	push   edx
c000de0c:	51                   	push   ecx
c000de0d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000de10:	83 c4 10             	add    esp,0x10
c000de13:	83 c4 0c             	add    esp,0xc
c000de16:	c3                   	ret    
c000de17:	90                   	nop

c000de18 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000de18:	b8 0a 00 00 00       	mov    eax,0xa
c000de1d:	c3                   	ret    
c000de1e:	66 90                	xchg   ax,ax

c000de20 <Bus::Bus(char const*)>:
c000de20:	83 ec 0c             	sub    esp,0xc
c000de23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de27:	83 ec 08             	sub    esp,0x8
c000de2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2e:	50                   	push   eax
c000de2f:	e8 8a 09 00 00       	call   c000e7be <Device::Device(char const*)>
c000de34:	83 c4 10             	add    esp,0x10
c000de37:	ba 78 51 02 c0       	mov    edx,0xc0025178
c000de3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de40:	89 10                	mov    DWORD PTR [eax],edx
c000de42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de46:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000de50:	90                   	nop
c000de51:	83 c4 0c             	add    esp,0xc
c000de54:	c3                   	ret    
c000de55:	90                   	nop
c000de56:	66 90                	xchg   ax,ax

c000de58 <Bus::~Bus()>:
c000de58:	83 ec 0c             	sub    esp,0xc
c000de5b:	ba 78 51 02 c0       	mov    edx,0xc0025178
c000de60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de64:	89 10                	mov    DWORD PTR [eax],edx
c000de66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de6a:	83 ec 0c             	sub    esp,0xc
c000de6d:	50                   	push   eax
c000de6e:	e8 15 06 00 00       	call   c000e488 <Device::~Device()>
c000de73:	83 c4 10             	add    esp,0x10
c000de76:	90                   	nop
c000de77:	83 c4 0c             	add    esp,0xc
c000de7a:	c3                   	ret    
c000de7b:	90                   	nop

c000de7c <Bus::~Bus()>:
c000de7c:	83 ec 0c             	sub    esp,0xc
c000de7f:	83 ec 0c             	sub    esp,0xc
c000de82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de86:	e8 cd ff ff ff       	call   c000de58 <Bus::~Bus()>
c000de8b:	83 c4 10             	add    esp,0x10
c000de8e:	83 ec 08             	sub    esp,0x8
c000de91:	68 58 01 00 00       	push   0x158
c000de96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9a:	e8 c7 f0 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000de9f:	83 c4 10             	add    esp,0x10
c000dea2:	83 c4 0c             	add    esp,0xc
c000dea5:	c3                   	ret    
c000dea6:	66 90                	xchg   ax,ax

c000dea8 <Buzzer::Buzzer(char const*)>:
c000dea8:	83 ec 0c             	sub    esp,0xc
c000deab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deaf:	83 ec 08             	sub    esp,0x8
c000deb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb6:	50                   	push   eax
c000deb7:	e8 02 09 00 00       	call   c000e7be <Device::Device(char const*)>
c000debc:	83 c4 10             	add    esp,0x10
c000debf:	ba a4 51 02 c0       	mov    edx,0xc00251a4
c000dec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec8:	89 10                	mov    DWORD PTR [eax],edx
c000deca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dece:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ded8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dedc:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000dee6:	90                   	nop
c000dee7:	83 c4 0c             	add    esp,0xc
c000deea:	c3                   	ret    
c000deeb:	90                   	nop

c000deec <Buzzer::~Buzzer()>:
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	ba a4 51 02 c0       	mov    edx,0xc00251a4
c000def4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def8:	89 10                	mov    DWORD PTR [eax],edx
c000defa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defe:	83 ec 0c             	sub    esp,0xc
c000df01:	50                   	push   eax
c000df02:	e8 81 05 00 00       	call   c000e488 <Device::~Device()>
c000df07:	83 c4 10             	add    esp,0x10
c000df0a:	90                   	nop
c000df0b:	83 c4 0c             	add    esp,0xc
c000df0e:	c3                   	ret    
c000df0f:	90                   	nop

c000df10 <Buzzer::~Buzzer()>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	83 ec 0c             	sub    esp,0xc
c000df16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1a:	e8 cd ff ff ff       	call   c000deec <Buzzer::~Buzzer()>
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	83 ec 08             	sub    esp,0x8
c000df25:	68 5c 01 00 00       	push   0x15c
c000df2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2e:	e8 33 f0 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	83 c4 0c             	add    esp,0xc
c000df39:	c3                   	ret    

c000df3a <Buzzer::stop()>:
c000df3a:	83 ec 14             	sub    esp,0x14
c000df3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df41:	8b 10                	mov    edx,DWORD PTR [eax]
c000df43:	6a 00                	push   0x0
c000df45:	50                   	push   eax
c000df46:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000df49:	83 c4 1c             	add    esp,0x1c
c000df4c:	c3                   	ret    

c000df4d <beepThread(void*)>:
c000df4d:	53                   	push   ebx
c000df4e:	83 ec 08             	sub    esp,0x8
c000df51:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000df56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df5a:	48                   	dec    eax
c000df5b:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000df60:	75 02                	jne    c000df64 <beepThread(void*)+0x17>
c000df62:	fb                   	sti    
c000df63:	90                   	nop
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000df6e:	50                   	push   eax
c000df6f:	e8 74 af 00 00       	call   c0018ee8 <milliTenthSleep(unsigned int)>
c000df74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000df77:	e8 be ff ff ff       	call   c000df3a <Buzzer::stop()>
c000df7c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000df84:	83 c4 18             	add    esp,0x18
c000df87:	5b                   	pop    ebx
c000df88:	e9 5b ae 00 00       	jmp    c0018de8 <blockTask(TaskState)>
c000df8d:	90                   	nop

c000df8e <Buzzer::beep(int, int, bool)>:
c000df8e:	57                   	push   edi
c000df8f:	56                   	push   esi
c000df90:	53                   	push   ebx
c000df91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df95:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df99:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000df9d:	50                   	push   eax
c000df9e:	50                   	push   eax
c000df9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa5:	53                   	push   ebx
c000dfa6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	89 f8                	mov    eax,edi
c000dfae:	84 c0                	test   al,al
c000dfb0:	74 1e                	je     c000dfd0 <Buzzer::beep(int, int, bool)+0x42>
c000dfb2:	83 ec 0c             	sub    esp,0xc
c000dfb5:	6b f6 0a             	imul   esi,esi,0xa
c000dfb8:	56                   	push   esi
c000dfb9:	e8 2a af 00 00       	call   c0018ee8 <milliTenthSleep(unsigned int)>
c000dfbe:	83 c4 10             	add    esp,0x10
c000dfc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dfc5:	5b                   	pop    ebx
c000dfc6:	5e                   	pop    esi
c000dfc7:	5f                   	pop    edi
c000dfc8:	e9 6d ff ff ff       	jmp    c000df3a <Buzzer::stop()>
c000dfcd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfd0:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dfd6:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000dfdb:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dfe3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dfe7:	c7 44 24 14 4d df 00 c0 	mov    DWORD PTR [esp+0x14],0xc000df4d
c000dfef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff3:	5b                   	pop    ebx
c000dff4:	5e                   	pop    esi
c000dff5:	5f                   	pop    edi
c000dff6:	e9 d9 a9 00 00       	jmp    c00189d4 <Process::createThread(void (*)(void*), void*, int)>
c000dffb:	90                   	nop

c000dffc <User::loadClockSettings(int)>:
c000dffc:	53                   	push   ebx
c000dffd:	83 ec 14             	sub    esp,0x14
c000e000:	68 14 01 00 00       	push   0x114
c000e005:	e8 51 bd ff ff       	call   c0009d5b <malloc>
c000e00a:	83 c4 0c             	add    esp,0xc
c000e00d:	89 c3                	mov    ebx,eax
c000e00f:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c000e015:	68 cc 51 02 c0       	push   0xc00251cc
c000e01a:	50                   	push   eax
c000e01b:	e8 92 f5 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c000e020:	58                   	pop    eax
c000e021:	5a                   	pop    edx
c000e022:	6a 01                	push   0x1
c000e024:	53                   	push   ebx
c000e025:	e8 62 f6 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c000e02a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e02d:	e8 b8 f6 ff ff       	call   c000d6ea <File::close()>
c000e032:	83 c4 10             	add    esp,0x10
c000e035:	85 db                	test   ebx,ebx
c000e037:	74 0f                	je     c000e048 <User::loadClockSettings(int)+0x4c>
c000e039:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e03b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e03f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e042:	83 c4 08             	add    esp,0x8
c000e045:	5b                   	pop    ebx
c000e046:	ff e0                	jmp    eax
c000e048:	83 c4 08             	add    esp,0x8
c000e04b:	5b                   	pop    ebx
c000e04c:	c3                   	ret    
c000e04d:	90                   	nop

c000e04e <Clock::Clock(char const*)>:
c000e04e:	83 ec 0c             	sub    esp,0xc
c000e051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e055:	83 ec 08             	sub    esp,0x8
c000e058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05c:	50                   	push   eax
c000e05d:	e8 5c 07 00 00       	call   c000e7be <Device::Device(char const*)>
c000e062:	83 c4 10             	add    esp,0x10
c000e065:	ba f4 51 02 c0       	mov    edx,0xc00251f4
c000e06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06e:	89 10                	mov    DWORD PTR [eax],edx
c000e070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e074:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e07e:	90                   	nop
c000e07f:	83 c4 0c             	add    esp,0xc
c000e082:	c3                   	ret    
c000e083:	90                   	nop

c000e084 <Clock::~Clock()>:
c000e084:	83 ec 0c             	sub    esp,0xc
c000e087:	ba f4 51 02 c0       	mov    edx,0xc00251f4
c000e08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e090:	89 10                	mov    DWORD PTR [eax],edx
c000e092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e096:	83 ec 0c             	sub    esp,0xc
c000e099:	50                   	push   eax
c000e09a:	e8 e9 03 00 00       	call   c000e488 <Device::~Device()>
c000e09f:	83 c4 10             	add    esp,0x10
c000e0a2:	90                   	nop
c000e0a3:	83 c4 0c             	add    esp,0xc
c000e0a6:	c3                   	ret    
c000e0a7:	90                   	nop

c000e0a8 <Clock::~Clock()>:
c000e0a8:	83 ec 0c             	sub    esp,0xc
c000e0ab:	83 ec 0c             	sub    esp,0xc
c000e0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b2:	e8 cd ff ff ff       	call   c000e084 <Clock::~Clock()>
c000e0b7:	83 c4 10             	add    esp,0x10
c000e0ba:	83 ec 08             	sub    esp,0x8
c000e0bd:	68 58 01 00 00       	push   0x158
c000e0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0c6:	e8 9b ee ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	83 c4 0c             	add    esp,0xc
c000e0d1:	c3                   	ret    

c000e0d2 <Clock::timeInSecondsLocal()>:
c000e0d2:	53                   	push   ebx
c000e0d3:	83 ec 14             	sub    esp,0x14
c000e0d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e0da:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0dc:	50                   	push   eax
c000e0dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e0e0:	0f b6 0d bc 89 02 c0 	movzx  ecx,BYTE PTR ds:0xc00289bc
c000e0e7:	03 0d c0 89 02 c0    	add    ecx,DWORD PTR ds:0xc00289c0
c000e0ed:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e0f3:	89 cb                	mov    ebx,ecx
c000e0f5:	c1 fb 1f             	sar    ebx,0x1f
c000e0f8:	01 c8                	add    eax,ecx
c000e0fa:	11 da                	adc    edx,ebx
c000e0fc:	83 c4 10             	add    esp,0x10
c000e0ff:	31 c9                	xor    ecx,ecx
c000e101:	80 3d bd 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289bd,0x0
c000e108:	74 05                	je     c000e10f <Clock::timeInSecondsLocal()+0x3d>
c000e10a:	b9 08 07 00 00       	mov    ecx,0x708
c000e10f:	31 db                	xor    ebx,ebx
c000e111:	01 c8                	add    eax,ecx
c000e113:	11 da                	adc    edx,ebx
c000e115:	83 c4 08             	add    esp,0x8
c000e118:	5b                   	pop    ebx
c000e119:	c3                   	ret    

c000e11a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e11a:	57                   	push   edi
c000e11b:	56                   	push   esi
c000e11c:	53                   	push   ebx
c000e11d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e121:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e125:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e127:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e12b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e12e:	0f b6 05 bc 89 02 c0 	movzx  eax,BYTE PTR ds:0xc00289bc
c000e135:	03 05 c0 89 02 c0    	add    eax,DWORD PTR ds:0xc00289c0
c000e13b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e141:	99                   	cdq    
c000e142:	29 c6                	sub    esi,eax
c000e144:	19 d7                	sbb    edi,edx
c000e146:	89 f0                	mov    eax,esi
c000e148:	89 fa                	mov    edx,edi
c000e14a:	31 f6                	xor    esi,esi
c000e14c:	80 3d bd 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289bd,0x0
c000e153:	74 05                	je     c000e15a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e155:	be 08 07 00 00       	mov    esi,0x708
c000e15a:	31 ff                	xor    edi,edi
c000e15c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e160:	29 f0                	sub    eax,esi
c000e162:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e166:	19 fa                	sbb    edx,edi
c000e168:	89 d8                	mov    eax,ebx
c000e16a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e16e:	5b                   	pop    ebx
c000e16f:	5e                   	pop    esi
c000e170:	5f                   	pop    edi
c000e171:	ff e0                	jmp    eax

c000e173 <datetimeToSeconds(datetime_t)>:
c000e173:	55                   	push   ebp
c000e174:	57                   	push   edi
c000e175:	56                   	push   esi
c000e176:	53                   	push   ebx
c000e177:	83 ec 14             	sub    esp,0x14
c000e17a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e17e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e182:	89 d3                	mov    ebx,edx
c000e184:	0f b6 c6             	movzx  eax,dh
c000e187:	c1 eb 10             	shr    ebx,0x10
c000e18a:	48                   	dec    eax
c000e18b:	66 81 eb 6c 07       	sub    bx,0x76c
c000e190:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e194:	0f b6 f5             	movzx  esi,ch
c000e197:	89 cf                	mov    edi,ecx
c000e199:	6b f6 3c             	imul   esi,esi,0x3c
c000e19c:	c1 ef 10             	shr    edi,0x10
c000e19f:	0f b6 c9             	movzx  ecx,cl
c000e1a2:	89 f8                	mov    eax,edi
c000e1a4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e1aa:	0f b6 f8             	movzx  edi,al
c000e1ad:	0f b6 d2             	movzx  edx,dl
c000e1b0:	01 fe                	add    esi,edi
c000e1b2:	01 f1                	add    ecx,esi
c000e1b4:	0f b7 f3             	movzx  esi,bx
c000e1b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1bb:	c1 f9 1f             	sar    ecx,0x1f
c000e1be:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e1c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e1c7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e1cc:	8b 0c 8d 40 52 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdadc0]
c000e1d3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e1d7:	76 29                	jbe    c000e202 <datetimeToSeconds(datetime_t)+0x8f>
c000e1d9:	f6 c3 03             	test   bl,0x3
c000e1dc:	75 24                	jne    c000e202 <datetimeToSeconds(datetime_t)+0x8f>
c000e1de:	31 d2                	xor    edx,edx
c000e1e0:	bf 64 00 00 00       	mov    edi,0x64
c000e1e5:	89 d8                	mov    eax,ebx
c000e1e7:	66 f7 f7             	div    di
c000e1ea:	66 85 d2             	test   dx,dx
c000e1ed:	75 12                	jne    c000e201 <datetimeToSeconds(datetime_t)+0x8e>
c000e1ef:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e1f5:	bf 90 01 00 00       	mov    edi,0x190
c000e1fa:	99                   	cdq    
c000e1fb:	f7 ff                	idiv   edi
c000e1fd:	85 d2                	test   edx,edx
c000e1ff:	75 01                	jne    c000e202 <datetimeToSeconds(datetime_t)+0x8f>
c000e201:	41                   	inc    ecx
c000e202:	66 83 fb 46          	cmp    bx,0x46
c000e206:	76 45                	jbe    c000e24d <datetimeToSeconds(datetime_t)+0xda>
c000e208:	bb 46 00 00 00       	mov    ebx,0x46
c000e20d:	bf 64 00 00 00       	mov    edi,0x64
c000e212:	bd 90 01 00 00       	mov    ebp,0x190
c000e217:	b8 6d 01 00 00       	mov    eax,0x16d
c000e21c:	f6 c3 03             	test   bl,0x3
c000e21f:	75 23                	jne    c000e244 <datetimeToSeconds(datetime_t)+0xd1>
c000e221:	89 d8                	mov    eax,ebx
c000e223:	99                   	cdq    
c000e224:	f7 ff                	idiv   edi
c000e226:	b8 6e 01 00 00       	mov    eax,0x16e
c000e22b:	85 d2                	test   edx,edx
c000e22d:	75 15                	jne    c000e244 <datetimeToSeconds(datetime_t)+0xd1>
c000e22f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e235:	99                   	cdq    
c000e236:	f7 fd                	idiv   ebp
c000e238:	83 fa 01             	cmp    edx,0x1
c000e23b:	19 c0                	sbb    eax,eax
c000e23d:	f7 d0                	not    eax
c000e23f:	05 6e 01 00 00       	add    eax,0x16e
c000e244:	01 c1                	add    ecx,eax
c000e246:	43                   	inc    ebx
c000e247:	39 f3                	cmp    ebx,esi
c000e249:	7c cc                	jl     c000e217 <datetimeToSeconds(datetime_t)+0xa4>
c000e24b:	eb 35                	jmp    c000e282 <datetimeToSeconds(datetime_t)+0x10f>
c000e24d:	74 33                	je     c000e282 <datetimeToSeconds(datetime_t)+0x10f>
c000e24f:	b8 45 00 00 00       	mov    eax,0x45
c000e254:	89 c2                	mov    edx,eax
c000e256:	83 e2 03             	and    edx,0x3
c000e259:	39 f0                	cmp    eax,esi
c000e25b:	7e 0f                	jle    c000e26c <datetimeToSeconds(datetime_t)+0xf9>
c000e25d:	83 fa 01             	cmp    edx,0x1
c000e260:	19 d2                	sbb    edx,edx
c000e262:	48                   	dec    eax
c000e263:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e26a:	eb e8                	jmp    c000e254 <datetimeToSeconds(datetime_t)+0xe1>
c000e26c:	b8 6d 01 00 00       	mov    eax,0x16d
c000e271:	85 d2                	test   edx,edx
c000e273:	75 0b                	jne    c000e280 <datetimeToSeconds(datetime_t)+0x10d>
c000e275:	66 83 fb 01          	cmp    bx,0x1
c000e279:	19 c0                	sbb    eax,eax
c000e27b:	05 6e 01 00 00       	add    eax,0x16e
c000e280:	29 c1                	sub    ecx,eax
c000e282:	b8 80 51 01 00       	mov    eax,0x15180
c000e287:	f7 e9                	imul   ecx
c000e289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e28d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e291:	83 c4 14             	add    esp,0x14
c000e294:	5b                   	pop    ebx
c000e295:	5e                   	pop    esi
c000e296:	5f                   	pop    edi
c000e297:	5d                   	pop    ebp
c000e298:	c3                   	ret    
c000e299:	90                   	nop

c000e29a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e29a:	57                   	push   edi
c000e29b:	56                   	push   esi
c000e29c:	53                   	push   ebx
c000e29d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2a1:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2a3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e2a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2ae:	e8 c0 fe ff ff       	call   c000e173 <datetimeToSeconds(datetime_t)>
c000e2b3:	59                   	pop    ecx
c000e2b4:	0f b6 0d bc 89 02 c0 	movzx  ecx,BYTE PTR ds:0xc00289bc
c000e2bb:	5b                   	pop    ebx
c000e2bc:	03 0d c0 89 02 c0    	add    ecx,DWORD PTR ds:0xc00289c0
c000e2c2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e2c8:	89 cb                	mov    ebx,ecx
c000e2ca:	c1 fb 1f             	sar    ebx,0x1f
c000e2cd:	29 c8                	sub    eax,ecx
c000e2cf:	19 da                	sbb    edx,ebx
c000e2d1:	31 c9                	xor    ecx,ecx
c000e2d3:	80 3d bd 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289bd,0x0
c000e2da:	74 05                	je     c000e2e1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e2dc:	b9 08 07 00 00       	mov    ecx,0x708
c000e2e1:	31 db                	xor    ebx,ebx
c000e2e3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e2e7:	29 c8                	sub    eax,ecx
c000e2e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e2ed:	19 da                	sbb    edx,ebx
c000e2ef:	89 f8                	mov    eax,edi
c000e2f1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e2f5:	5b                   	pop    ebx
c000e2f6:	5e                   	pop    esi
c000e2f7:	5f                   	pop    edi
c000e2f8:	ff e0                	jmp    eax

c000e2fa <secondsToDatetime(unsigned long long)>:
c000e2fa:	55                   	push   ebp
c000e2fb:	57                   	push   edi
c000e2fc:	56                   	push   esi
c000e2fd:	53                   	push   ebx
c000e2fe:	83 ec 1c             	sub    esp,0x1c
c000e301:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e305:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e309:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e30d:	6a 00                	push   0x0
c000e30f:	68 80 51 01 00       	push   0x15180
c000e314:	55                   	push   ebp
c000e315:	57                   	push   edi
c000e316:	e8 b9 49 01 00       	call   c0022cd4 <__udivdi3>
c000e31b:	83 c4 10             	add    esp,0x10
c000e31e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e324:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e328:	6a 00                	push   0x0
c000e32a:	68 80 51 01 00       	push   0x15180
c000e32f:	55                   	push   ebp
c000e330:	57                   	push   edi
c000e331:	bf 10 0e 00 00       	mov    edi,0xe10
c000e336:	e8 99 4a 01 00       	call   c0022dd4 <__umoddi3>
c000e33b:	83 c4 10             	add    esp,0x10
c000e33e:	99                   	cdq    
c000e33f:	f7 ff                	idiv   edi
c000e341:	bf 3c 00 00 00       	mov    edi,0x3c
c000e346:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e349:	89 d0                	mov    eax,edx
c000e34b:	99                   	cdq    
c000e34c:	f7 ff                	idiv   edi
c000e34e:	85 db                	test   ebx,ebx
c000e350:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e353:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e356:	79 11                	jns    c000e369 <secondsToDatetime(unsigned long long)+0x6f>
c000e358:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e35c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e362:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e367:	eb 07                	jmp    c000e370 <secondsToDatetime(unsigned long long)+0x76>
c000e369:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e36e:	89 d8                	mov    eax,ebx
c000e370:	bf b4 05 00 00       	mov    edi,0x5b4
c000e375:	99                   	cdq    
c000e376:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e37b:	f7 f9                	idiv   ecx
c000e37d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e382:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e386:	31 d2                	xor    edx,edx
c000e388:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e390:	01 c3                	add    ebx,eax
c000e392:	89 d8                	mov    eax,ebx
c000e394:	f7 f1                	div    ecx
c000e396:	31 d2                	xor    edx,edx
c000e398:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e39b:	89 d8                	mov    eax,ebx
c000e39d:	f7 f7                	div    edi
c000e39f:	31 d2                	xor    edx,edx
c000e3a1:	29 c1                	sub    ecx,eax
c000e3a3:	89 d8                	mov    eax,ebx
c000e3a5:	f7 f5                	div    ebp
c000e3a7:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e3ac:	29 c1                	sub    ecx,eax
c000e3ae:	31 d2                	xor    edx,edx
c000e3b0:	89 c8                	mov    eax,ecx
c000e3b2:	f7 f5                	div    ebp
c000e3b4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e3b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3bd:	31 d2                	xor    edx,edx
c000e3bf:	89 c8                	mov    eax,ecx
c000e3c1:	f7 f5                	div    ebp
c000e3c3:	31 d2                	xor    edx,edx
c000e3c5:	01 c3                	add    ebx,eax
c000e3c7:	89 c8                	mov    eax,ecx
c000e3c9:	f7 f7                	div    edi
c000e3cb:	bf 99 00 00 00       	mov    edi,0x99
c000e3d0:	29 c3                	sub    ebx,eax
c000e3d2:	31 d2                	xor    edx,edx
c000e3d4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e3dc:	29 c3                	sub    ebx,eax
c000e3de:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e3e1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e3e4:	bb 05 00 00 00       	mov    ebx,0x5
c000e3e9:	83 c1 02             	add    ecx,0x2
c000e3ec:	89 c8                	mov    eax,ecx
c000e3ee:	f7 f7                	div    edi
c000e3f0:	31 d2                	xor    edx,edx
c000e3f2:	89 c7                	mov    edi,eax
c000e3f4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e3fa:	83 c0 02             	add    eax,0x2
c000e3fd:	f7 f3                	div    ebx
c000e3ff:	89 eb                	mov    ebx,ebp
c000e401:	29 c3                	sub    ebx,eax
c000e403:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e409:	88 1e                	mov    BYTE PTR [esi],bl
c000e40b:	19 c0                	sbb    eax,eax
c000e40d:	31 d2                	xor    edx,edx
c000e40f:	83 e0 0c             	and    eax,0xc
c000e412:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e416:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e41e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e422:	83 f9 01             	cmp    ecx,0x1
c000e425:	0f 96 c2             	setbe  dl
c000e428:	41                   	inc    ecx
c000e429:	01 d0                	add    eax,edx
c000e42b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e42e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e432:	83 c4 1c             	add    esp,0x1c
c000e435:	89 f0                	mov    eax,esi
c000e437:	5b                   	pop    ebx
c000e438:	5e                   	pop    esi
c000e439:	5f                   	pop    edi
c000e43a:	5d                   	pop    ebp
c000e43b:	c2 04 00             	ret    0x4

c000e43e <Clock::timeInDatetimeLocal()>:
c000e43e:	53                   	push   ebx
c000e43f:	83 ec 14             	sub    esp,0x14
c000e442:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e446:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e44a:	e8 83 fc ff ff       	call   c000e0d2 <Clock::timeInSecondsLocal()>
c000e44f:	83 c4 0c             	add    esp,0xc
c000e452:	52                   	push   edx
c000e453:	50                   	push   eax
c000e454:	53                   	push   ebx
c000e455:	e8 a0 fe ff ff       	call   c000e2fa <secondsToDatetime(unsigned long long)>
c000e45a:	89 d8                	mov    eax,ebx
c000e45c:	83 c4 14             	add    esp,0x14
c000e45f:	5b                   	pop    ebx
c000e460:	c2 04 00             	ret    0x4
c000e463:	90                   	nop

c000e464 <Device::hibernate()>:
c000e464:	c3                   	ret    
c000e465:	90                   	nop

c000e466 <Device::wake()>:
c000e466:	c3                   	ret    
c000e467:	90                   	nop

c000e468 <Device::detect()>:
c000e468:	c3                   	ret    
c000e469:	90                   	nop

c000e46a <Device::disableLegacy()>:
c000e46a:	c3                   	ret    
c000e46b:	90                   	nop

c000e46c <Device::powerSaving(PowerSavingLevel)>:
c000e46c:	c3                   	ret    
c000e46d:	90                   	nop

c000e46e <DriverlessDevice::close(int, int, void*)>:
c000e46e:	31 c0                	xor    eax,eax
c000e470:	c3                   	ret    
c000e471:	90                   	nop

c000e472 <DriverlessDevice::detect()>:
c000e472:	c3                   	ret    
c000e473:	90                   	nop

c000e474 <DriverlessDevice::open(int, int, void*)>:
c000e474:	83 ec 18             	sub    esp,0x18
c000e477:	68 70 52 02 c0       	push   0xc0025270
c000e47c:	e8 64 6b 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000e481:	83 c8 ff             	or     eax,0xffffffff
c000e484:	83 c4 1c             	add    esp,0x1c
c000e487:	c3                   	ret    

c000e488 <Device::~Device()>:
c000e488:	ba d0 52 02 c0       	mov    edx,0xc00252d0
c000e48d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e491:	89 10                	mov    DWORD PTR [eax],edx
c000e493:	90                   	nop
c000e494:	c3                   	ret    
c000e495:	90                   	nop

c000e496 <Device::~Device()>:
c000e496:	83 ec 0c             	sub    esp,0xc
c000e499:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e49d:	e8 e6 ff ff ff       	call   c000e488 <Device::~Device()>
c000e4a2:	83 c4 04             	add    esp,0x4
c000e4a5:	83 ec 08             	sub    esp,0x8
c000e4a8:	68 58 01 00 00       	push   0x158
c000e4ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b1:	e8 b0 ea ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	83 c4 0c             	add    esp,0xc
c000e4bc:	c3                   	ret    
c000e4bd:	90                   	nop

c000e4be <Device::findAndLoadDriver()>:
c000e4be:	c7 44 24 04 8e 52 02 c0 	mov    DWORD PTR [esp+0x4],0xc002528e
c000e4c6:	e9 7c eb ff ff       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>
c000e4cb:	90                   	nop

c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>:
c000e4cc:	57                   	push   edi
c000e4cd:	b9 09 00 00 00       	mov    ecx,0x9
c000e4d2:	56                   	push   esi
c000e4d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e4d7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e4db:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e4e5:	81 c7 18 01 00 00    	add    edi,0x118
c000e4eb:	fc                   	cld    
c000e4ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e4ee:	5e                   	pop    esi
c000e4ef:	5f                   	pop    edi
c000e4f0:	c3                   	ret    
c000e4f1:	90                   	nop

c000e4f2 <Device::preOpenACPI(void*, char*, char*)>:
c000e4f2:	57                   	push   edi
c000e4f3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e4f8:	56                   	push   esi
c000e4f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e501:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e50b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e511:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e517:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e51b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e51d:	b9 0e 00 00 00       	mov    ecx,0xe
c000e522:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e528:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e52c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e52e:	5e                   	pop    esi
c000e52f:	5f                   	pop    edi
c000e530:	c3                   	ret    
c000e531:	90                   	nop

c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e536:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e53b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e542:	75 0b                	jne    c000e54f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e544:	8b 00                	mov    eax,DWORD PTR [eax]
c000e546:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e54a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e54d:	eb 1e                	jmp    c000e56d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e54f:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000e554:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e55a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e560:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e562:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e566:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e56a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e56d:	ff e0                	jmp    eax
c000e56f:	90                   	nop

c000e570 <Device::getParent()>:
c000e570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e574:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e57a:	c3                   	ret    
c000e57b:	90                   	nop

c000e57c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e57c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e580:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e585:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e58c:	75 0b                	jne    c000e599 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e58e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e590:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e594:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e597:	eb 1e                	jmp    c000e5b7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e599:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000e59e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e5a4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e5aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e5ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5b4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e5b7:	ff e0                	jmp    eax
c000e5b9:	90                   	nop

c000e5ba <Device::addChild(Device*)>:
c000e5ba:	53                   	push   ebx
c000e5bb:	83 ec 08             	sub    esp,0x8
c000e5be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e5c6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e5cc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e5d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e5d4:	85 d2                	test   edx,edx
c000e5d6:	74 04                	je     c000e5dc <Device::addChild(Device*)+0x22>
c000e5d8:	89 d3                	mov    ebx,edx
c000e5da:	eb f6                	jmp    c000e5d2 <Device::addChild(Device*)+0x18>
c000e5dc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e5df:	83 ec 0c             	sub    esp,0xc
c000e5e2:	6a 08                	push   0x8
c000e5e4:	e8 72 b7 ff ff       	call   c0009d5b <malloc>
c000e5e9:	89 03                	mov    DWORD PTR [ebx],eax
c000e5eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e5f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e5f8:	83 c4 18             	add    esp,0x18
c000e5fb:	5b                   	pop    ebx
c000e5fc:	c3                   	ret    
c000e5fd:	90                   	nop

c000e5fe <Device::removeAllChildren()>:
c000e5fe:	56                   	push   esi
c000e5ff:	53                   	push   ebx
c000e600:	52                   	push   edx
c000e601:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e605:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e60b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e60e:	74 17                	je     c000e627 <Device::removeAllChildren()+0x29>
c000e610:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e613:	85 c0                	test   eax,eax
c000e615:	74 0c                	je     c000e623 <Device::removeAllChildren()+0x25>
c000e617:	83 ec 0c             	sub    esp,0xc
c000e61a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e61c:	50                   	push   eax
c000e61d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e620:	83 c4 10             	add    esp,0x10
c000e623:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e625:	eb e4                	jmp    c000e60b <Device::removeAllChildren()+0xd>
c000e627:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e62d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e633:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e639:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e640:	58                   	pop    eax
c000e641:	5b                   	pop    ebx
c000e642:	5e                   	pop    esi
c000e643:	c3                   	ret    

c000e644 <Device::hibernateAll()>:
c000e644:	53                   	push   ebx
c000e645:	83 ec 14             	sub    esp,0x14
c000e648:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e64c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e64e:	53                   	push   ebx
c000e64f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e652:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e65e:	74 0f                	je     c000e66f <Device::hibernateAll()+0x2b>
c000e660:	83 ec 0c             	sub    esp,0xc
c000e663:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e666:	e8 d9 ff ff ff       	call   c000e644 <Device::hibernateAll()>
c000e66b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e66d:	eb e9                	jmp    c000e658 <Device::hibernateAll()+0x14>
c000e66f:	83 c4 08             	add    esp,0x8
c000e672:	5b                   	pop    ebx
c000e673:	c3                   	ret    

c000e674 <Device::wakeAll()>:
c000e674:	53                   	push   ebx
c000e675:	83 ec 14             	sub    esp,0x14
c000e678:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e67c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e67e:	53                   	push   ebx
c000e67f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e682:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e688:	83 c4 10             	add    esp,0x10
c000e68b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e68e:	74 0f                	je     c000e69f <Device::wakeAll()+0x2b>
c000e690:	83 ec 0c             	sub    esp,0xc
c000e693:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e696:	e8 d9 ff ff ff       	call   c000e674 <Device::wakeAll()>
c000e69b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e69d:	eb e9                	jmp    c000e688 <Device::wakeAll()+0x14>
c000e69f:	83 c4 08             	add    esp,0x8
c000e6a2:	5b                   	pop    ebx
c000e6a3:	c3                   	ret    

c000e6a4 <Device::detectAll()>:
c000e6a4:	53                   	push   ebx
c000e6a5:	83 ec 14             	sub    esp,0x14
c000e6a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6ae:	53                   	push   ebx
c000e6af:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e6b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6b8:	83 c4 10             	add    esp,0x10
c000e6bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6be:	74 0f                	je     c000e6cf <Device::detectAll()+0x2b>
c000e6c0:	83 ec 0c             	sub    esp,0xc
c000e6c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6c6:	e8 d9 ff ff ff       	call   c000e6a4 <Device::detectAll()>
c000e6cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6cd:	eb e9                	jmp    c000e6b8 <Device::detectAll()+0x14>
c000e6cf:	83 c4 08             	add    esp,0x8
c000e6d2:	5b                   	pop    ebx
c000e6d3:	c3                   	ret    

c000e6d4 <Device::disableLegacyAll()>:
c000e6d4:	53                   	push   ebx
c000e6d5:	83 ec 14             	sub    esp,0x14
c000e6d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6de:	53                   	push   ebx
c000e6df:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e6e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6e8:	83 c4 10             	add    esp,0x10
c000e6eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6ee:	74 0f                	je     c000e6ff <Device::disableLegacyAll()+0x2b>
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6f6:	e8 d9 ff ff ff       	call   c000e6d4 <Device::disableLegacyAll()>
c000e6fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6fd:	eb e9                	jmp    c000e6e8 <Device::disableLegacyAll()+0x14>
c000e6ff:	83 c4 08             	add    esp,0x8
c000e702:	5b                   	pop    ebx
c000e703:	c3                   	ret    

c000e704 <Device::loadDriversForAll()>:
c000e704:	53                   	push   ebx
c000e705:	83 ec 08             	sub    esp,0x8
c000e708:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e70c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e713:	75 0c                	jne    c000e721 <Device::loadDriversForAll()+0x1d>
c000e715:	83 ec 0c             	sub    esp,0xc
c000e718:	53                   	push   ebx
c000e719:	e8 a0 fd ff ff       	call   c000e4be <Device::findAndLoadDriver()>
c000e71e:	83 c4 10             	add    esp,0x10
c000e721:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e727:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e72a:	74 12                	je     c000e73e <Device::loadDriversForAll()+0x3a>
c000e72c:	83 ec 0c             	sub    esp,0xc
c000e72f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e732:	e8 cd ff ff ff       	call   c000e704 <Device::loadDriversForAll()>
c000e737:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e739:	83 c4 10             	add    esp,0x10
c000e73c:	eb e9                	jmp    c000e727 <Device::loadDriversForAll()+0x23>
c000e73e:	83 c4 08             	add    esp,0x8
c000e741:	5b                   	pop    ebx
c000e742:	c3                   	ret    
c000e743:	90                   	nop

c000e744 <Device::closeAll()>:
c000e744:	53                   	push   ebx
c000e745:	83 ec 08             	sub    esp,0x8
c000e748:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e74c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e74e:	6a 00                	push   0x0
c000e750:	6a 00                	push   0x0
c000e752:	6a 00                	push   0x0
c000e754:	53                   	push   ebx
c000e755:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e758:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e75e:	83 c4 10             	add    esp,0x10
c000e761:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e764:	74 0f                	je     c000e775 <Device::closeAll()+0x31>
c000e766:	83 ec 0c             	sub    esp,0xc
c000e769:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e76c:	e8 d3 ff ff ff       	call   c000e744 <Device::closeAll()>
c000e771:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e773:	eb e9                	jmp    c000e75e <Device::closeAll()+0x1a>
c000e775:	83 c4 08             	add    esp,0x8
c000e778:	5b                   	pop    ebx
c000e779:	c3                   	ret    

c000e77a <Device::powerSavingAll(PowerSavingLevel)>:
c000e77a:	56                   	push   esi
c000e77b:	53                   	push   ebx
c000e77c:	83 ec 0c             	sub    esp,0xc
c000e77f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e783:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e787:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e789:	56                   	push   esi
c000e78a:	53                   	push   ebx
c000e78b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e78e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e79a:	74 0f                	je     c000e7ab <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e79c:	52                   	push   edx
c000e79d:	52                   	push   edx
c000e79e:	56                   	push   esi
c000e79f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7a2:	e8 d3 ff ff ff       	call   c000e77a <Device::powerSavingAll(PowerSavingLevel)>
c000e7a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7a9:	eb e9                	jmp    c000e794 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e7ab:	58                   	pop    eax
c000e7ac:	5b                   	pop    ebx
c000e7ad:	5e                   	pop    esi
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <Device::setName(char const*)>:
c000e7b0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e7b8:	e9 83 1f ff ff       	jmp    c0000740 <strcpy>
c000e7bd:	90                   	nop

c000e7be <Device::Device(char const*)>:
c000e7be:	83 ec 1c             	sub    esp,0x1c
c000e7c1:	ba d0 52 02 c0       	mov    edx,0xc00252d0
c000e7c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ca:	89 10                	mov    DWORD PTR [eax],edx
c000e7cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e7da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e7e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e7f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7fa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e804:	83 ec 08             	sub    esp,0x8
c000e807:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80f:	e8 9c ff ff ff       	call   c000e7b0 <Device::setName(char const*)>
c000e814:	83 c4 10             	add    esp,0x10
c000e817:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e81f:	83 ec 0c             	sub    esp,0xc
c000e822:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e826:	e8 30 b5 ff ff       	call   c0009d5b <malloc>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e83b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e83f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e849:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e84f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e859:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e85f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e86a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e875:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e87c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e880:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e88a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e88e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e8a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8aa:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e8b4:	90                   	nop
c000e8b5:	83 c4 1c             	add    esp,0x1c
c000e8b8:	c3                   	ret    
c000e8b9:	90                   	nop

c000e8ba <Device::getName()>:
c000e8ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8be:	05 d0 00 00 00       	add    eax,0xd0
c000e8c3:	c3                   	ret    

c000e8c4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e8c4:	83 ec 0c             	sub    esp,0xc
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	83 ec 08             	sub    esp,0x8
c000e8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d2:	50                   	push   eax
c000e8d3:	e8 e6 fe ff ff       	call   c000e7be <Device::Device(char const*)>
c000e8d8:	83 c4 10             	add    esp,0x10
c000e8db:	ba fc 52 02 c0       	mov    edx,0xc00252fc
c000e8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e4:	89 10                	mov    DWORD PTR [eax],edx
c000e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ea:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e8f4:	90                   	nop
c000e8f5:	83 c4 0c             	add    esp,0xc
c000e8f8:	c3                   	ret    
c000e8f9:	90                   	nop

c000e8fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e8fa:	57                   	push   edi
c000e8fb:	56                   	push   esi
c000e8fc:	53                   	push   ebx
c000e8fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e901:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e905:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e909:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e90f:	75 0c                	jne    c000e91d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e911:	52                   	push   edx
c000e912:	52                   	push   edx
c000e913:	53                   	push   ebx
c000e914:	56                   	push   esi
c000e915:	e8 6c 48 01 00       	call   c0023186 <LinkedList<Device>::addElement(Device*)>
c000e91a:	83 c4 10             	add    esp,0x10
c000e91d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e923:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e926:	74 12                	je     c000e93a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e928:	50                   	push   eax
c000e929:	57                   	push   edi
c000e92a:	56                   	push   esi
c000e92b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e92e:	e8 c7 ff ff ff       	call   c000e8fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e933:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	eb e9                	jmp    c000e923 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e93a:	5b                   	pop    ebx
c000e93b:	5e                   	pop    esi
c000e93c:	5f                   	pop    edi
c000e93d:	c3                   	ret    

c000e93e <getDevicesOfType(DeviceType)>:
c000e93e:	53                   	push   ebx
c000e93f:	83 ec 14             	sub    esp,0x14
c000e942:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e946:	53                   	push   ebx
c000e947:	e8 16 49 01 00       	call   c0023262 <LinkedList<Device>::LinkedList()>
c000e94c:	83 c4 0c             	add    esp,0xc
c000e94f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e953:	53                   	push   ebx
c000e954:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c000e95a:	e8 9b ff ff ff       	call   c000e8fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e95f:	89 d8                	mov    eax,ebx
c000e961:	83 c4 18             	add    esp,0x18
c000e964:	5b                   	pop    ebx
c000e965:	c2 04 00             	ret    0x4

c000e968 <HardDiskController::HardDiskController(char const*)>:
c000e968:	83 ec 0c             	sub    esp,0xc
c000e96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e96f:	83 ec 08             	sub    esp,0x8
c000e972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e976:	50                   	push   eax
c000e977:	e8 42 fe ff ff       	call   c000e7be <Device::Device(char const*)>
c000e97c:	83 c4 10             	add    esp,0x10
c000e97f:	ba 28 53 02 c0       	mov    edx,0xc0025328
c000e984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e988:	89 10                	mov    DWORD PTR [eax],edx
c000e98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e98e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e998:	90                   	nop
c000e999:	83 c4 0c             	add    esp,0xc
c000e99c:	c3                   	ret    
c000e99d:	90                   	nop
c000e99e:	66 90                	xchg   ax,ax

c000e9a0 <HardDiskController::~HardDiskController()>:
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	ba 28 53 02 c0       	mov    edx,0xc0025328
c000e9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ac:	89 10                	mov    DWORD PTR [eax],edx
c000e9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9b2:	83 ec 0c             	sub    esp,0xc
c000e9b5:	50                   	push   eax
c000e9b6:	e8 cd fa ff ff       	call   c000e488 <Device::~Device()>
c000e9bb:	83 c4 10             	add    esp,0x10
c000e9be:	90                   	nop
c000e9bf:	83 c4 0c             	add    esp,0xc
c000e9c2:	c3                   	ret    
c000e9c3:	90                   	nop

c000e9c4 <HardDiskController::~HardDiskController()>:
c000e9c4:	83 ec 0c             	sub    esp,0xc
c000e9c7:	83 ec 0c             	sub    esp,0xc
c000e9ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9ce:	e8 cd ff ff ff       	call   c000e9a0 <HardDiskController::~HardDiskController()>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 ec 08             	sub    esp,0x8
c000e9d9:	68 58 01 00 00       	push   0x158
c000e9de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9e2:	e8 7f e5 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000e9e7:	83 c4 10             	add    esp,0x10
c000e9ea:	83 c4 0c             	add    esp,0xc
c000e9ed:	c3                   	ret    

c000e9ee <PhysicalDisk::eject()>:
c000e9ee:	83 c8 ff             	or     eax,0xffffffff
c000e9f1:	c3                   	ret    

c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e9f2:	83 ec 0c             	sub    esp,0xc
c000e9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f9:	83 ec 08             	sub    esp,0x8
c000e9fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea00:	50                   	push   eax
c000ea01:	e8 b8 fd ff ff       	call   c000e7be <Device::Device(char const*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	ba 54 53 02 c0       	mov    edx,0xc0025354
c000ea0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea12:	89 10                	mov    DWORD PTR [eax],edx
c000ea14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea18:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ea1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea23:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ea2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea2e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ea38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea40:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ea46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea54:	90                   	nop
c000ea55:	83 c4 0c             	add    esp,0xc
c000ea58:	c3                   	ret    
c000ea59:	90                   	nop

c000ea5a <PhysicalDisk::startCache()>:
c000ea5a:	56                   	push   esi
c000ea5b:	53                   	push   ebx
c000ea5c:	83 ec 10             	sub    esp,0x10
c000ea5f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ea63:	6a 44                	push   0x44
c000ea65:	e8 f1 b2 ff ff       	call   c0009d5b <malloc>
c000ea6a:	89 c6                	mov    esi,eax
c000ea6c:	58                   	pop    eax
c000ea6d:	5a                   	pop    edx
c000ea6e:	53                   	push   ebx
c000ea6f:	56                   	push   esi
c000ea70:	e8 27 26 00 00       	call   c001109c <VCache::VCache(PhysicalDisk*)>
c000ea75:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ea7b:	83 c4 14             	add    esp,0x14
c000ea7e:	5b                   	pop    ebx
c000ea7f:	5e                   	pop    esi
c000ea80:	c3                   	ret    
c000ea81:	90                   	nop

c000ea82 <PhysicalDisk::~PhysicalDisk()>:
c000ea82:	83 ec 0c             	sub    esp,0xc
c000ea85:	ba 54 53 02 c0       	mov    edx,0xc0025354
c000ea8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea8e:	89 10                	mov    DWORD PTR [eax],edx
c000ea90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea94:	83 ec 0c             	sub    esp,0xc
c000ea97:	50                   	push   eax
c000ea98:	e8 eb f9 ff ff       	call   c000e488 <Device::~Device()>
c000ea9d:	83 c4 10             	add    esp,0x10
c000eaa0:	90                   	nop
c000eaa1:	83 c4 0c             	add    esp,0xc
c000eaa4:	c3                   	ret    
c000eaa5:	90                   	nop

c000eaa6 <PhysicalDisk::~PhysicalDisk()>:
c000eaa6:	83 ec 0c             	sub    esp,0xc
c000eaa9:	83 ec 0c             	sub    esp,0xc
c000eaac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eab0:	e8 cd ff ff ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c000eab5:	83 c4 10             	add    esp,0x10
c000eab8:	83 ec 08             	sub    esp,0x8
c000eabb:	68 6c 01 00 00       	push   0x16c
c000eac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eac4:	e8 9d e4 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000eac9:	83 c4 10             	add    esp,0x10
c000eacc:	83 c4 0c             	add    esp,0xc
c000eacf:	c3                   	ret    

c000ead0 <FPU::FPU(char const*)>:
c000ead0:	83 ec 0c             	sub    esp,0xc
c000ead3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead7:	83 ec 08             	sub    esp,0x8
c000eada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eade:	50                   	push   eax
c000eadf:	e8 da fc ff ff       	call   c000e7be <Device::Device(char const*)>
c000eae4:	83 c4 10             	add    esp,0x10
c000eae7:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c000eaec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf0:	89 10                	mov    DWORD PTR [eax],edx
c000eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000eb00:	90                   	nop
c000eb01:	83 c4 0c             	add    esp,0xc
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop
c000eb06:	66 90                	xchg   ax,ax

c000eb08 <FPU::~FPU()>:
c000eb08:	83 ec 0c             	sub    esp,0xc
c000eb0b:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c000eb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb14:	89 10                	mov    DWORD PTR [eax],edx
c000eb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1a:	83 ec 0c             	sub    esp,0xc
c000eb1d:	50                   	push   eax
c000eb1e:	e8 65 f9 ff ff       	call   c000e488 <Device::~Device()>
c000eb23:	83 c4 10             	add    esp,0x10
c000eb26:	90                   	nop
c000eb27:	83 c4 0c             	add    esp,0xc
c000eb2a:	c3                   	ret    
c000eb2b:	90                   	nop

c000eb2c <FPU::~FPU()>:
c000eb2c:	83 ec 0c             	sub    esp,0xc
c000eb2f:	83 ec 0c             	sub    esp,0xc
c000eb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb36:	e8 cd ff ff ff       	call   c000eb08 <FPU::~FPU()>
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	83 ec 08             	sub    esp,0x8
c000eb41:	68 58 01 00 00       	push   0x158
c000eb46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb4a:	e8 17 e4 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	83 c4 0c             	add    esp,0xc
c000eb55:	c3                   	ret    

c000eb56 <setupFPU()>:
c000eb56:	83 ec 28             	sub    esp,0x28
c000eb59:	68 84 53 02 c0       	push   0xc0025384
c000eb5e:	e8 e4 e4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000eb63:	8b 15 88 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028888
c000eb69:	83 c4 10             	add    esp,0x10
c000eb6c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000eb72:	a8 10                	test   al,0x10
c000eb74:	74 2e                	je     c000eba4 <setupFPU()+0x4e>
c000eb76:	83 ec 0c             	sub    esp,0xc
c000eb79:	68 97 53 02 c0       	push   0xc0025397
c000eb7e:	e8 c4 e4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000eb83:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000eb8a:	e8 cc b1 ff ff       	call   c0009d5b <malloc>
c000eb8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eb96:	e8 89 2e 01 00       	call   c0021a24 <x87::x87()>
c000eb9b:	83 c4 10             	add    esp,0x10
c000eb9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eba2:	eb 24                	jmp    c000ebc8 <setupFPU()+0x72>
c000eba4:	83 e0 ef             	and    eax,0xffffffef
c000eba7:	83 ec 0c             	sub    esp,0xc
c000ebaa:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000ebb0:	68 a1 53 02 c0       	push   0xc00253a1
c000ebb5:	e8 8d e4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ebba:	0f 20 c0             	mov    eax,cr0
c000ebbd:	83 c8 04             	or     eax,0x4
c000ebc0:	0f 22 c0             	mov    cr0,eax
c000ebc3:	31 c0                	xor    eax,eax
c000ebc5:	83 c4 10             	add    esp,0x10
c000ebc8:	83 c4 1c             	add    esp,0x1c
c000ebcb:	c3                   	ret    

c000ebcc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ebcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebd4:	c1 e0 04             	shl    eax,0x4
c000ebd7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000ebdb:	8d 50 10             	lea    edx,[eax+0x10]
c000ebde:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ebe4:	74 08                	je     c000ebee <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ebe6:	83 c0 04             	add    eax,0x4
c000ebe9:	39 d0                	cmp    eax,edx
c000ebeb:	75 f1                	jne    c000ebde <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ebed:	c3                   	ret    
c000ebee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ebf8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ec02:	eb e2                	jmp    c000ebe6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ec04 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ec04:	57                   	push   edi
c000ec05:	31 c0                	xor    eax,eax
c000ec07:	56                   	push   esi
c000ec08:	53                   	push   ebx
c000ec09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ec0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec11:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec15:	89 da                	mov    edx,ebx
c000ec17:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec1b:	c1 e2 04             	shl    edx,0x4
c000ec1e:	01 ca                	add    edx,ecx
c000ec20:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ec28:	74 16                	je     c000ec40 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ec2a:	40                   	inc    eax
c000ec2b:	83 f8 04             	cmp    eax,0x4
c000ec2e:	75 f0                	jne    c000ec20 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ec30:	c7 44 24 10 e4 53 02 c0 	mov    DWORD PTR [esp+0x10],0xc00253e4
c000ec38:	5b                   	pop    ebx
c000ec39:	5e                   	pop    esi
c000ec3a:	5f                   	pop    edi
c000ec3b:	e9 a5 63 00 00       	jmp    c0014fe5 <Krnl::panic(char const*)>
c000ec40:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ec43:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ec46:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ec4c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ec52:	5b                   	pop    ebx
c000ec53:	5e                   	pop    esi
c000ec54:	5f                   	pop    edi
c000ec55:	c3                   	ret    

c000ec56 <doubleFault(regs*, void*)>:
c000ec56:	55                   	push   ebp
c000ec57:	89 e5                	mov    ebp,esp
c000ec59:	83 ec 08             	sub    esp,0x8
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	68 f1 53 02 c0       	push   0xc00253f1
c000ec64:	e8 7c 63 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000ec69:	83 c4 10             	add    esp,0x10
c000ec6c:	90                   	nop
c000ec6d:	c9                   	leave  
c000ec6e:	c3                   	ret    
c000ec6f:	90                   	nop

c000ec70 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ec70:	56                   	push   esi
c000ec71:	53                   	push   ebx
c000ec72:	50                   	push   eax
c000ec73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ec77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec7b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ec80:	75 35                	jne    c000ecb7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ec82:	8d 43 20             	lea    eax,[ebx+0x20]
c000ec85:	31 d2                	xor    edx,edx
c000ec87:	89 c1                	mov    ecx,eax
c000ec89:	c1 e1 04             	shl    ecx,0x4
c000ec8c:	01 f1                	add    ecx,esi
c000ec8e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ec96:	74 3e                	je     c000ecd6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ec98:	42                   	inc    edx
c000ec99:	83 fa 04             	cmp    edx,0x4
c000ec9c:	75 f0                	jne    c000ec8e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ec9e:	83 ec 0c             	sub    esp,0xc
c000eca1:	68 0b 54 02 c0       	push   0xc002540b
c000eca6:	e8 3a 63 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000ecab:	83 c4 10             	add    esp,0x10
c000ecae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecb3:	5a                   	pop    edx
c000ecb4:	5b                   	pop    ebx
c000ecb5:	5e                   	pop    esi
c000ecb6:	c3                   	ret    
c000ecb7:	83 ec 0c             	sub    esp,0xc
c000ecba:	56                   	push   esi
c000ecbb:	e8 fa fb ff ff       	call   c000e8ba <Device::getName()>
c000ecc0:	83 c4 10             	add    esp,0x10
c000ecc3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ecc6:	75 ba                	jne    c000ec82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ecc8:	83 fb 0f             	cmp    ebx,0xf
c000eccb:	7f 29                	jg     c000ecf6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000eccd:	0f b6 9b 80 7f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8080]
c000ecd4:	eb ac                	jmp    c000ec82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ecd6:	8d 04 82             	lea    eax,[edx+eax*4]
c000ecd9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecdd:	8d 04 86             	lea    eax,[esi+eax*4]
c000ece0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000ece6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ecea:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ecf0:	89 d8                	mov    eax,ebx
c000ecf2:	5a                   	pop    edx
c000ecf3:	5b                   	pop    ebx
c000ecf4:	5e                   	pop    esi
c000ecf5:	c3                   	ret    
c000ecf6:	83 ec 0c             	sub    esp,0xc
c000ecf9:	68 fe 53 02 c0       	push   0xc00253fe
c000ecfe:	e8 e2 62 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000ed03:	83 c4 10             	add    esp,0x10
c000ed06:	e9 77 ff ff ff       	jmp    c000ec82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ed0b:	90                   	nop

c000ed0c <InterruptController::clearAllHandlers(int, bool)>:
c000ed0c:	56                   	push   esi
c000ed0d:	53                   	push   ebx
c000ed0e:	52                   	push   edx
c000ed0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed17:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ed1c:	75 61                	jne    c000ed7f <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ed1e:	8d 46 20             	lea    eax,[esi+0x20]
c000ed21:	c1 e6 04             	shl    esi,0x4
c000ed24:	c1 e0 04             	shl    eax,0x4
c000ed27:	01 de                	add    esi,ebx
c000ed29:	01 d8                	add    eax,ebx
c000ed2b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ed35:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ed3f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ed49:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed53:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ed5d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ed67:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ed71:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ed7b:	58                   	pop    eax
c000ed7c:	5b                   	pop    ebx
c000ed7d:	5e                   	pop    esi
c000ed7e:	c3                   	ret    
c000ed7f:	83 ec 0c             	sub    esp,0xc
c000ed82:	53                   	push   ebx
c000ed83:	e8 32 fb ff ff       	call   c000e8ba <Device::getName()>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ed8e:	75 8e                	jne    c000ed1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed90:	83 fe 0f             	cmp    esi,0xf
c000ed93:	7f 09                	jg     c000ed9e <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ed95:	0f b6 b6 80 7f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8080]
c000ed9c:	eb 80                	jmp    c000ed1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed9e:	83 ec 0c             	sub    esp,0xc
c000eda1:	68 18 54 02 c0       	push   0xc0025418
c000eda6:	e8 3a 62 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000edab:	83 c4 10             	add    esp,0x10
c000edae:	e9 6b ff ff ff       	jmp    c000ed1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000edb3:	90                   	nop

c000edb4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000edb4:	56                   	push   esi
c000edb5:	53                   	push   ebx
c000edb6:	52                   	push   edx
c000edb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000edbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000edbf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000edc4:	75 3a                	jne    c000ee00 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000edc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000edca:	8d 50 20             	lea    edx,[eax+0x20]
c000edcd:	c1 e2 04             	shl    edx,0x4
c000edd0:	8d 04 16             	lea    eax,[esi+edx*1]
c000edd3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000edd7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eddd:	74 0b                	je     c000edea <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eddf:	83 c0 04             	add    eax,0x4
c000ede2:	39 d0                	cmp    eax,edx
c000ede4:	75 f1                	jne    c000edd7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ede6:	58                   	pop    eax
c000ede7:	5b                   	pop    ebx
c000ede8:	5e                   	pop    esi
c000ede9:	c3                   	ret    
c000edea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000edf4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000edfe:	eb df                	jmp    c000eddf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ee00:	83 ec 0c             	sub    esp,0xc
c000ee03:	56                   	push   esi
c000ee04:	e8 b1 fa ff ff       	call   c000e8ba <Device::getName()>
c000ee09:	83 c4 10             	add    esp,0x10
c000ee0c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ee0f:	75 b5                	jne    c000edc6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee11:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ee16:	7f 11                	jg     c000ee29 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ee18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee1c:	0f b6 80 80 7f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8080]
c000ee23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ee27:	eb 9d                	jmp    c000edc6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee29:	83 ec 0c             	sub    esp,0xc
c000ee2c:	68 25 54 02 c0       	push   0xc0025425
c000ee31:	e8 af 61 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000ee36:	83 c4 10             	add    esp,0x10
c000ee39:	eb 8b                	jmp    c000edc6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ee3b <nmiHandler(regs*, void*)>:
c000ee3b:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000ee40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee44:	e9 db a6 ff ff       	jmp    c0009524 <Computer::handleNMI()>

c000ee49 <int_handler>:
c000ee49:	55                   	push   ebp
c000ee4a:	57                   	push   edi
c000ee4b:	56                   	push   esi
c000ee4c:	53                   	push   ebx
c000ee4d:	83 ec 0c             	sub    esp,0xc
c000ee50:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ee54:	80 3d 64 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029364,0x0
c000ee5b:	74 0b                	je     c000ee68 <int_handler+0x1f>
c000ee5d:	fa                   	cli    
c000ee5e:	f4                   	hlt    
c000ee5f:	80 3d 64 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029364,0x0
c000ee66:	75 f5                	jne    c000ee5d <int_handler+0x14>
c000ee68:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000ee6d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ee70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ee76:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ee7c:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ee7f:	83 f8 17             	cmp    eax,0x17
c000ee82:	77 13                	ja     c000ee97 <int_handler+0x4e>
c000ee84:	83 ec 08             	sub    esp,0x8
c000ee87:	8b 17                	mov    edx,DWORD PTR [edi]
c000ee89:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ee8c:	0f b6 c0             	movzx  eax,al
c000ee8f:	50                   	push   eax
c000ee90:	57                   	push   edi
c000ee91:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000ee94:	83 c4 10             	add    esp,0x10
c000ee97:	83 c3 15             	add    ebx,0x15
c000ee9a:	c1 e3 04             	shl    ebx,0x4
c000ee9d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000eea1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eea8:	31 db                	xor    ebx,ebx
c000eeaa:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eeae:	85 c0                	test   eax,eax
c000eeb0:	74 13                	je     c000eec5 <int_handler+0x7c>
c000eeb2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eeb5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000eeb9:	74 1c                	je     c000eed7 <int_handler+0x8e>
c000eebb:	83 ec 08             	sub    esp,0x8
c000eebe:	52                   	push   edx
c000eebf:	56                   	push   esi
c000eec0:	ff d0                	call   eax
c000eec2:	83 c4 10             	add    esp,0x10
c000eec5:	43                   	inc    ebx
c000eec6:	83 fb 04             	cmp    ebx,0x4
c000eec9:	75 df                	jne    c000eeaa <int_handler+0x61>
c000eecb:	83 c4 0c             	add    esp,0xc
c000eece:	31 c0                	xor    eax,eax
c000eed0:	5b                   	pop    ebx
c000eed1:	31 d2                	xor    edx,edx
c000eed3:	5e                   	pop    esi
c000eed4:	5f                   	pop    edi
c000eed5:	5d                   	pop    ebp
c000eed6:	c3                   	ret    
c000eed7:	83 ec 08             	sub    esp,0x8
c000eeda:	52                   	push   edx
c000eedb:	56                   	push   esi
c000eedc:	ff d0                	call   eax
c000eede:	83 c4 10             	add    esp,0x10
c000eee1:	83 c4 0c             	add    esp,0xc
c000eee4:	5b                   	pop    ebx
c000eee5:	5e                   	pop    esi
c000eee6:	5f                   	pop    edi
c000eee7:	5d                   	pop    ebp
c000eee8:	c3                   	ret    
c000eee9:	90                   	nop

c000eeea <InterruptController::InterruptController(char const*)>:
c000eeea:	83 ec 1c             	sub    esp,0x1c
c000eeed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef1:	83 ec 08             	sub    esp,0x8
c000eef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eef8:	50                   	push   eax
c000eef9:	e8 c0 f8 ff ff       	call   c000e7be <Device::Device(char const*)>
c000eefe:	83 c4 10             	add    esp,0x10
c000ef01:	ba dc 56 02 c0       	mov    edx,0xc00256dc
c000ef06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0a:	89 10                	mov    DWORD PTR [eax],edx
c000ef0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef10:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ef1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ef22:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ef2a:	7f 5e                	jg     c000ef8a <InterruptController::InterruptController(char const*)+0xa0>
c000ef2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ef34:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ef39:	7f 49                	jg     c000ef84 <InterruptController::InterruptController(char const*)+0x9a>
c000ef3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef43:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ef4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef4e:	01 ca                	add    edx,ecx
c000ef50:	83 c2 54             	add    edx,0x54
c000ef53:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ef5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef63:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ef6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef6e:	01 ca                	add    edx,ecx
c000ef70:	81 c2 54 04 00 00    	add    edx,0x454
c000ef76:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ef7e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ef82:	eb b0                	jmp    c000ef34 <InterruptController::InterruptController(char const*)+0x4a>
c000ef84:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ef88:	eb 98                	jmp    c000ef22 <InterruptController::InterruptController(char const*)+0x38>
c000ef8a:	90                   	nop
c000ef8b:	83 c4 1c             	add    esp,0x1c
c000ef8e:	c3                   	ret    
c000ef8f:	90                   	nop

c000ef90 <InterruptController::~InterruptController()>:
c000ef90:	83 ec 0c             	sub    esp,0xc
c000ef93:	ba dc 56 02 c0       	mov    edx,0xc00256dc
c000ef98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef9c:	89 10                	mov    DWORD PTR [eax],edx
c000ef9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efa2:	83 ec 0c             	sub    esp,0xc
c000efa5:	50                   	push   eax
c000efa6:	e8 dd f4 ff ff       	call   c000e488 <Device::~Device()>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	90                   	nop
c000efaf:	83 c4 0c             	add    esp,0xc
c000efb2:	c3                   	ret    
c000efb3:	90                   	nop

c000efb4 <InterruptController::~InterruptController()>:
c000efb4:	83 ec 0c             	sub    esp,0xc
c000efb7:	83 ec 0c             	sub    esp,0xc
c000efba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efbe:	e8 cd ff ff ff       	call   c000ef90 <InterruptController::~InterruptController()>
c000efc3:	83 c4 10             	add    esp,0x10
c000efc6:	83 ec 08             	sub    esp,0x8
c000efc9:	68 58 21 00 00       	push   0x2158
c000efce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efd2:	e8 8f df ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000efd7:	83 c4 10             	add    esp,0x10
c000efda:	83 c4 0c             	add    esp,0xc
c000efdd:	c3                   	ret    

c000efde <displayDebugInfo(regs*)>:
c000efde:	55                   	push   ebp
c000efdf:	57                   	push   edi
c000efe0:	56                   	push   esi
c000efe1:	53                   	push   ebx
c000efe2:	83 ec 24             	sub    esp,0x24
c000efe5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000efe9:	0f 20 c2             	mov    edx,cr0
c000efec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000eff0:	0f 20 d7             	mov    edi,cr2
c000eff3:	0f 20 de             	mov    esi,cr3
c000eff6:	0f 20 e5             	mov    ebp,cr4
c000eff9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000effc:	68 32 54 02 c0       	push   0xc0025432
c000f001:	e8 41 e0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f006:	59                   	pop    ecx
c000f007:	58                   	pop    eax
c000f008:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f00b:	68 3d 54 02 c0       	push   0xc002543d
c000f010:	e8 32 e0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f015:	58                   	pop    eax
c000f016:	5a                   	pop    edx
c000f017:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f01a:	68 48 54 02 c0       	push   0xc0025448
c000f01f:	e8 23 e0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f024:	59                   	pop    ecx
c000f025:	58                   	pop    eax
c000f026:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f029:	68 53 54 02 c0       	push   0xc0025453
c000f02e:	e8 14 e0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f033:	58                   	pop    eax
c000f034:	5a                   	pop    edx
c000f035:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f038:	68 5e 54 02 c0       	push   0xc002545e
c000f03d:	e8 05 e0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f042:	59                   	pop    ecx
c000f043:	58                   	pop    eax
c000f044:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f047:	68 69 54 02 c0       	push   0xc0025469
c000f04c:	e8 f6 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f051:	58                   	pop    eax
c000f052:	5a                   	pop    edx
c000f053:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f056:	68 74 54 02 c0       	push   0xc0025474
c000f05b:	e8 e7 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f060:	59                   	pop    ecx
c000f061:	58                   	pop    eax
c000f062:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f065:	68 7f 54 02 c0       	push   0xc002547f
c000f06a:	e8 d8 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f06f:	58                   	pop    eax
c000f070:	5a                   	pop    edx
c000f071:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f074:	68 8a 54 02 c0       	push   0xc002548a
c000f079:	e8 c9 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f07e:	59                   	pop    ecx
c000f07f:	58                   	pop    eax
c000f080:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f083:	68 99 54 02 c0       	push   0xc0025499
c000f088:	e8 ba df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f08d:	58                   	pop    eax
c000f08e:	5a                   	pop    edx
c000f08f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f092:	68 a4 54 02 c0       	push   0xc00254a4
c000f097:	e8 ab df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f09c:	59                   	pop    ecx
c000f09d:	58                   	pop    eax
c000f09e:	57                   	push   edi
c000f09f:	68 af 54 02 c0       	push   0xc00254af
c000f0a4:	e8 9e df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f0a9:	58                   	pop    eax
c000f0aa:	5a                   	pop    edx
c000f0ab:	56                   	push   esi
c000f0ac:	68 ba 54 02 c0       	push   0xc00254ba
c000f0b1:	e8 91 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f0b6:	59                   	pop    ecx
c000f0b7:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f0bc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0c2:	e8 8e bd ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c000f0c7:	58                   	pop    eax
c000f0c8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f0cb:	5a                   	pop    edx
c000f0cc:	c1 e0 05             	shl    eax,0x5
c000f0cf:	05 e0 7c 02 c0       	add    eax,0xc0027ce0
c000f0d4:	50                   	push   eax
c000f0d5:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f0da:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0e0:	e8 7d c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f0e5:	59                   	pop    ecx
c000f0e6:	58                   	pop    eax
c000f0e7:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f0ec:	68 c5 54 02 c0       	push   0xc00254c5
c000f0f1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0f7:	e8 66 c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f0fc:	58                   	pop    eax
c000f0fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f102:	5a                   	pop    edx
c000f103:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f106:	83 c0 0c             	add    eax,0xc
c000f109:	50                   	push   eax
c000f10a:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f10f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f115:	e8 48 c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f11a:	59                   	pop    ecx
c000f11b:	58                   	pop    eax
c000f11c:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f121:	68 ce 54 02 c0       	push   0xc00254ce
c000f126:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f12c:	e8 31 c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f131:	58                   	pop    eax
c000f132:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f137:	5a                   	pop    edx
c000f138:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f13b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f141:	e8 d6 c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f146:	59                   	pop    ecx
c000f147:	58                   	pop    eax
c000f148:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f14d:	68 d6 54 02 c0       	push   0xc00254d6
c000f152:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f158:	e8 05 c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f15d:	58                   	pop    eax
c000f15e:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f163:	5a                   	pop    edx
c000f164:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f167:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f16d:	e8 aa c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f172:	59                   	pop    ecx
c000f173:	58                   	pop    eax
c000f174:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f179:	68 de 54 02 c0       	push   0xc00254de
c000f17e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f184:	e8 d9 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f189:	58                   	pop    eax
c000f18a:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f18f:	5a                   	pop    edx
c000f190:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f193:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f199:	e8 7e c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f19e:	59                   	pop    ecx
c000f19f:	58                   	pop    eax
c000f1a0:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f1a5:	68 e6 54 02 c0       	push   0xc00254e6
c000f1aa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1b0:	e8 ad c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f1b5:	58                   	pop    eax
c000f1b6:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f1bb:	5a                   	pop    edx
c000f1bc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f1bf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1c5:	e8 52 c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f1ca:	59                   	pop    ecx
c000f1cb:	58                   	pop    eax
c000f1cc:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f1d1:	68 ee 54 02 c0       	push   0xc00254ee
c000f1d6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1dc:	e8 81 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f1e1:	58                   	pop    eax
c000f1e2:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f1e7:	5a                   	pop    edx
c000f1e8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f1eb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1f1:	e8 26 c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f1f6:	59                   	pop    ecx
c000f1f7:	58                   	pop    eax
c000f1f8:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f1fd:	68 f6 54 02 c0       	push   0xc00254f6
c000f202:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f208:	e8 55 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f20d:	58                   	pop    eax
c000f20e:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f213:	5a                   	pop    edx
c000f214:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f217:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f21d:	e8 fa c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f222:	59                   	pop    ecx
c000f223:	58                   	pop    eax
c000f224:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f229:	68 fe 54 02 c0       	push   0xc00254fe
c000f22e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f234:	e8 29 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f239:	58                   	pop    eax
c000f23a:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f23f:	5a                   	pop    edx
c000f240:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f244:	52                   	push   edx
c000f245:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f24b:	e8 cc c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f250:	59                   	pop    ecx
c000f251:	58                   	pop    eax
c000f252:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f257:	68 07 55 02 c0       	push   0xc0025507
c000f25c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f262:	e8 fb c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f267:	58                   	pop    eax
c000f268:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f26d:	5a                   	pop    edx
c000f26e:	57                   	push   edi
c000f26f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f275:	e8 a2 c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f27a:	59                   	pop    ecx
c000f27b:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f280:	5f                   	pop    edi
c000f281:	68 0f 55 02 c0       	push   0xc002550f
c000f286:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f28c:	e8 d1 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f291:	58                   	pop    eax
c000f292:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f297:	5a                   	pop    edx
c000f298:	56                   	push   esi
c000f299:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f29f:	e8 78 c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f2a4:	59                   	pop    ecx
c000f2a5:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f2aa:	5e                   	pop    esi
c000f2ab:	68 17 55 02 c0       	push   0xc0025517
c000f2b0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2b6:	e8 a7 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f2bb:	5f                   	pop    edi
c000f2bc:	58                   	pop    eax
c000f2bd:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f2c2:	55                   	push   ebp
c000f2c3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2c9:	e8 4e c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f2ce:	58                   	pop    eax
c000f2cf:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f2d4:	5a                   	pop    edx
c000f2d5:	68 1f 55 02 c0       	push   0xc002551f
c000f2da:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2e0:	e8 7d c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f2e5:	0f 21 c0             	mov    eax,db0
c000f2e8:	59                   	pop    ecx
c000f2e9:	5e                   	pop    esi
c000f2ea:	50                   	push   eax
c000f2eb:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f2f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2f6:	e8 21 c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f2fb:	5f                   	pop    edi
c000f2fc:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f301:	5d                   	pop    ebp
c000f302:	68 28 55 02 c0       	push   0xc0025528
c000f307:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f30d:	e8 50 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f312:	0f 21 c8             	mov    eax,db1
c000f315:	5a                   	pop    edx
c000f316:	59                   	pop    ecx
c000f317:	50                   	push   eax
c000f318:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f31d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f323:	e8 f4 bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f328:	5e                   	pop    esi
c000f329:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f32e:	5f                   	pop    edi
c000f32f:	68 30 55 02 c0       	push   0xc0025530
c000f334:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f33a:	e8 23 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f33f:	0f 21 d0             	mov    eax,db2
c000f342:	5d                   	pop    ebp
c000f343:	5a                   	pop    edx
c000f344:	50                   	push   eax
c000f345:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f34a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f350:	e8 c7 bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f355:	59                   	pop    ecx
c000f356:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f35b:	5e                   	pop    esi
c000f35c:	68 38 55 02 c0       	push   0xc0025538
c000f361:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f367:	e8 f6 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f36c:	0f 21 d8             	mov    eax,db3
c000f36f:	5f                   	pop    edi
c000f370:	5d                   	pop    ebp
c000f371:	50                   	push   eax
c000f372:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f377:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f37d:	e8 9a bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f382:	58                   	pop    eax
c000f383:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f388:	5a                   	pop    edx
c000f389:	68 40 55 02 c0       	push   0xc0025540
c000f38e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f394:	e8 c9 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f399:	0f 21 f0             	mov    eax,db6
c000f39c:	59                   	pop    ecx
c000f39d:	5e                   	pop    esi
c000f39e:	50                   	push   eax
c000f39f:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f3a4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3aa:	e8 6d bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f3af:	5f                   	pop    edi
c000f3b0:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f3b5:	5d                   	pop    ebp
c000f3b6:	68 48 55 02 c0       	push   0xc0025548
c000f3bb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3c1:	e8 9c bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f3c6:	0f 21 f8             	mov    eax,db7
c000f3c9:	5a                   	pop    edx
c000f3ca:	59                   	pop    ecx
c000f3cb:	50                   	push   eax
c000f3cc:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f3d1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3d7:	e8 40 bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f3dc:	5e                   	pop    esi
c000f3dd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f3e0:	e8 d4 8d 00 00       	call   c00181b9 <Thr::getDriverNameFromAddress(unsigned long)>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	85 c0                	test   eax,eax
c000f3ea:	74 7d                	je     c000f469 <displayDebugInfo(regs*)+0x48b>
c000f3ec:	89 c6                	mov    esi,eax
c000f3ee:	50                   	push   eax
c000f3ef:	50                   	push   eax
c000f3f0:	56                   	push   esi
c000f3f1:	68 50 55 02 c0       	push   0xc0025550
c000f3f6:	e8 4c dc ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f3fb:	5a                   	pop    edx
c000f3fc:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f401:	59                   	pop    ecx
c000f402:	68 5e 55 02 c0       	push   0xc002555e
c000f407:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f40d:	e8 50 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f412:	5f                   	pop    edi
c000f413:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f418:	5d                   	pop    ebp
c000f419:	56                   	push   esi
c000f41a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f420:	e8 3d bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f425:	58                   	pop    eax
c000f426:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f42b:	5a                   	pop    edx
c000f42c:	68 6a 55 02 c0       	push   0xc002556a
c000f431:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f437:	e8 26 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f43c:	59                   	pop    ecx
c000f43d:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c000f442:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f448:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f44b:	e8 a0 8d 00 00       	call   c00181f0 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f450:	5b                   	pop    ebx
c000f451:	5d                   	pop    ebp
c000f452:	50                   	push   eax
c000f453:	57                   	push   edi
c000f454:	e8 c3 be ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f459:	58                   	pop    eax
c000f45a:	5a                   	pop    edx
c000f45b:	56                   	push   esi
c000f45c:	68 76 55 02 c0       	push   0xc0025576
c000f461:	e8 e1 db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f466:	83 c4 10             	add    esp,0x10
c000f469:	fa                   	cli    
c000f46a:	f4                   	hlt    
c000f46b:	eb fe                	jmp    c000f46b <displayDebugInfo(regs*)+0x48d>

c000f46d <x87EmulHandler(regs*, void*)>:
c000f46d:	83 ec 0c             	sub    esp,0xc
c000f470:	0f 20 c2             	mov    edx,cr0
c000f473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f478:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f47c:	75 4b                	jne    c000f4c9 <x87EmulHandler(regs*, void*)+0x5c>
c000f47e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000f483:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f489:	85 c0                	test   eax,eax
c000f48b:	74 05                	je     c000f492 <x87EmulHandler(regs*, void*)+0x25>
c000f48d:	83 e2 08             	and    edx,0x8
c000f490:	75 17                	jne    c000f4a9 <x87EmulHandler(regs*, void*)+0x3c>
c000f492:	83 ec 0c             	sub    esp,0xc
c000f495:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f499:	e8 80 b2 00 00       	call   c001a71e <Vm::x87Handler(regs*)>
c000f49e:	83 c4 10             	add    esp,0x10
c000f4a1:	84 c0                	test   al,al
c000f4a3:	74 24                	je     c000f4c9 <x87EmulHandler(regs*, void*)+0x5c>
c000f4a5:	83 c4 0c             	add    esp,0xc
c000f4a8:	c3                   	ret    
c000f4a9:	83 ec 0c             	sub    esp,0xc
c000f4ac:	68 9c 55 02 c0       	push   0xc002559c
c000f4b1:	e8 91 db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f4b6:	0f 06                	clts   
c000f4b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4bd:	83 c4 10             	add    esp,0x10
c000f4c0:	a3 c8 89 02 c0       	mov    ds:0xc00289c8,eax
c000f4c5:	83 c4 0c             	add    esp,0xc
c000f4c8:	c3                   	ret    
c000f4c9:	83 ec 0c             	sub    esp,0xc
c000f4cc:	68 86 55 02 c0       	push   0xc0025586
c000f4d1:	e8 71 db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f4d6:	5a                   	pop    edx
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 fe fa ff ff       	call   c000efde <displayDebugInfo(regs*)>

c000f4e0 <gpFault(regs*, void*)>:
c000f4e0:	53                   	push   ebx
c000f4e1:	83 ec 14             	sub    esp,0x14
c000f4e4:	c7 05 c4 89 02 c0 db 9b 01 c0 	mov    DWORD PTR ds:0xc00289c4,0xc0019bdb
c000f4ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f4f2:	53                   	push   ebx
c000f4f3:	e8 e3 a6 00 00       	call   c0019bdb <Vm::faultHandler(regs*)>
c000f4f8:	83 c4 10             	add    esp,0x10
c000f4fb:	84 c0                	test   al,al
c000f4fd:	74 05                	je     c000f504 <gpFault(regs*, void*)+0x24>
c000f4ff:	83 c4 08             	add    esp,0x8
c000f502:	5b                   	pop    ebx
c000f503:	c3                   	ret    
c000f504:	83 ec 0c             	sub    esp,0xc
c000f507:	68 a9 55 02 c0       	push   0xc00255a9
c000f50c:	e8 36 db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f511:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f514:	e8 c5 fa ff ff       	call   c000efde <displayDebugInfo(regs*)>

c000f519 <pgFault(regs*, void*)>:
c000f519:	53                   	push   ebx
c000f51a:	83 ec 10             	sub    esp,0x10
c000f51d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f521:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f524:	68 c4 55 02 c0       	push   0xc00255c4
c000f529:	e8 19 db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f52e:	0f 20 d0             	mov    eax,cr2
c000f531:	5a                   	pop    edx
c000f532:	59                   	pop    ecx
c000f533:	50                   	push   eax
c000f534:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f539:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f53c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f542:	e8 7b d6 ff ff       	call   c000cbc2 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f547:	83 c4 10             	add    esp,0x10
c000f54a:	84 c0                	test   al,al
c000f54c:	74 05                	je     c000f553 <pgFault(regs*, void*)+0x3a>
c000f54e:	83 c4 08             	add    esp,0x8
c000f551:	5b                   	pop    ebx
c000f552:	c3                   	ret    
c000f553:	83 ec 0c             	sub    esp,0xc
c000f556:	68 d9 55 02 c0       	push   0xc00255d9
c000f55b:	e8 e7 da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f560:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f563:	e8 76 fa ff ff       	call   c000efde <displayDebugInfo(regs*)>

c000f568 <otherISRHandler(regs*, void*)>:
c000f568:	53                   	push   ebx
c000f569:	83 ec 0c             	sub    esp,0xc
c000f56c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f570:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f573:	50                   	push   eax
c000f574:	50                   	push   eax
c000f575:	68 e6 55 02 c0       	push   0xc00255e6
c000f57a:	e8 c8 da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f57f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f582:	e8 57 fa ff ff       	call   c000efde <displayDebugInfo(regs*)>

c000f587 <opcodeFault(regs*, void*)>:
c000f587:	55                   	push   ebp
c000f588:	89 e5                	mov    ebp,esp
c000f58a:	56                   	push   esi
c000f58b:	53                   	push   ebx
c000f58c:	83 ec 30             	sub    esp,0x30
c000f58f:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000f594:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f59a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f5a0:	84 c0                	test   al,al
c000f5a2:	74 24                	je     c000f5c8 <opcodeFault(regs*, void*)+0x41>
c000f5a4:	83 ec 0c             	sub    esp,0xc
c000f5a7:	68 04 56 02 c0       	push   0xc0025604
c000f5ac:	e8 96 da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f5b1:	83 c4 10             	add    esp,0x10
c000f5b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5ba:	8d 50 19             	lea    edx,[eax+0x19]
c000f5bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f5c3:	e9 7b 03 00 00       	jmp    c000f943 <opcodeFault(regs*, void*)+0x3bc>
c000f5c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f5d1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f5d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f5de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5e1:	8a 00                	mov    al,BYTE PTR [eax]
c000f5e3:	3c f0                	cmp    al,0xf0
c000f5e5:	75 17                	jne    c000f5fe <opcodeFault(regs*, void*)+0x77>
c000f5e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f5ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5f0:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f5f9:	e9 d6 00 00 00       	jmp    c000f6d4 <opcodeFault(regs*, void*)+0x14d>
c000f5fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f601:	8a 00                	mov    al,BYTE PTR [eax]
c000f603:	3c f2                	cmp    al,0xf2
c000f605:	74 09                	je     c000f610 <opcodeFault(regs*, void*)+0x89>
c000f607:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f60a:	8a 00                	mov    al,BYTE PTR [eax]
c000f60c:	3c f3                	cmp    al,0xf3
c000f60e:	75 1b                	jne    c000f62b <opcodeFault(regs*, void*)+0xa4>
c000f610:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f614:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f61a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f61d:	8d 50 01             	lea    edx,[eax+0x1]
c000f620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f623:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f626:	e9 a9 00 00 00       	jmp    c000f6d4 <opcodeFault(regs*, void*)+0x14d>
c000f62b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f62e:	8a 00                	mov    al,BYTE PTR [eax]
c000f630:	3c 66                	cmp    al,0x66
c000f632:	75 1b                	jne    c000f64f <opcodeFault(regs*, void*)+0xc8>
c000f634:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f638:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f63e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f641:	8d 50 01             	lea    edx,[eax+0x1]
c000f644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f647:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f64a:	e9 85 00 00 00       	jmp    c000f6d4 <opcodeFault(regs*, void*)+0x14d>
c000f64f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f652:	8a 00                	mov    al,BYTE PTR [eax]
c000f654:	3c 67                	cmp    al,0x67
c000f656:	75 18                	jne    c000f670 <opcodeFault(regs*, void*)+0xe9>
c000f658:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f65c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f65f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f662:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f665:	8d 50 01             	lea    edx,[eax+0x1]
c000f668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f66b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f66e:	eb 64                	jmp    c000f6d4 <opcodeFault(regs*, void*)+0x14d>
c000f670:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f673:	8a 00                	mov    al,BYTE PTR [eax]
c000f675:	3c 2e                	cmp    al,0x2e
c000f677:	74 09                	je     c000f682 <opcodeFault(regs*, void*)+0xfb>
c000f679:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f67c:	8a 00                	mov    al,BYTE PTR [eax]
c000f67e:	3c 3e                	cmp    al,0x3e
c000f680:	75 18                	jne    c000f69a <opcodeFault(regs*, void*)+0x113>
c000f682:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f686:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f68c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f68f:	8d 50 01             	lea    edx,[eax+0x1]
c000f692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f695:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f698:	eb 3a                	jmp    c000f6d4 <opcodeFault(regs*, void*)+0x14d>
c000f69a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f69d:	8a 00                	mov    al,BYTE PTR [eax]
c000f69f:	3c 36                	cmp    al,0x36
c000f6a1:	74 1b                	je     c000f6be <opcodeFault(regs*, void*)+0x137>
c000f6a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6a6:	8a 00                	mov    al,BYTE PTR [eax]
c000f6a8:	3c 26                	cmp    al,0x26
c000f6aa:	74 12                	je     c000f6be <opcodeFault(regs*, void*)+0x137>
c000f6ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6af:	8a 00                	mov    al,BYTE PTR [eax]
c000f6b1:	3c 64                	cmp    al,0x64
c000f6b3:	74 09                	je     c000f6be <opcodeFault(regs*, void*)+0x137>
c000f6b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6b8:	8a 00                	mov    al,BYTE PTR [eax]
c000f6ba:	3c 65                	cmp    al,0x65
c000f6bc:	75 16                	jne    c000f6d4 <opcodeFault(regs*, void*)+0x14d>
c000f6be:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f6c2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f6c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6cb:	8d 50 01             	lea    edx,[eax+0x1]
c000f6ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f6d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6d7:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d9:	3c 0f                	cmp    al,0xf
c000f6db:	0f 85 8d 01 00 00    	jne    c000f86e <opcodeFault(regs*, void*)+0x2e7>
c000f6e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6e4:	40                   	inc    eax
c000f6e5:	8a 00                	mov    al,BYTE PTR [eax]
c000f6e7:	3c c7                	cmp    al,0xc7
c000f6e9:	0f 85 7f 01 00 00    	jne    c000f86e <opcodeFault(regs*, void*)+0x2e7>
c000f6ef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f6f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6f8:	8d 50 01             	lea    edx,[eax+0x1]
c000f6fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f701:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f704:	50                   	push   eax
c000f705:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f708:	50                   	push   eax
c000f709:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f70c:	50                   	push   eax
c000f70d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f710:	e8 e9 4f 00 00       	call   c00146fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f715:	83 c4 10             	add    esp,0x10
c000f718:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f71b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f71e:	83 f0 01             	xor    eax,0x1
c000f721:	84 c0                	test   al,al
c000f723:	0f 84 45 01 00 00    	je     c000f86e <opcodeFault(regs*, void*)+0x2e7>
c000f729:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f72c:	3c 01                	cmp    al,0x1
c000f72e:	0f 85 3a 01 00 00    	jne    c000f86e <opcodeFault(regs*, void*)+0x2e7>
c000f734:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f737:	83 f0 01             	xor    eax,0x1
c000f73a:	84 c0                	test   al,al
c000f73c:	0f 84 2c 01 00 00    	je     c000f86e <opcodeFault(regs*, void*)+0x2e7>
c000f742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f745:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f748:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f74b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f752:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f755:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f758:	89 c2                	mov    edx,eax
c000f75a:	b8 00 00 00 00       	mov    eax,0x0
c000f75f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f762:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f768:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f76b:	ba 00 00 00 00       	mov    edx,0x0
c000f770:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f773:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f779:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f77c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f77f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f786:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f789:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f78c:	89 c2                	mov    edx,eax
c000f78e:	b8 00 00 00 00       	mov    eax,0x0
c000f793:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f796:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f79c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f79f:	ba 00 00 00 00       	mov    edx,0x0
c000f7a4:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f7a7:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f7aa:	fa                   	cli    
c000f7ab:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000f7b0:	40                   	inc    eax
c000f7b1:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000f7b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f7b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7be:	89 c1                	mov    ecx,eax
c000f7c0:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f7c3:	89 cb                	mov    ebx,ecx
c000f7c5:	89 d0                	mov    eax,edx
c000f7c7:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f7ca:	89 c6                	mov    esi,eax
c000f7cc:	89 f0                	mov    eax,esi
c000f7ce:	09 d8                	or     eax,ebx
c000f7d0:	85 c0                	test   eax,eax
c000f7d2:	75 21                	jne    c000f7f5 <opcodeFault(regs*, void*)+0x26e>
c000f7d4:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f7d7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f7da:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f7dd:	89 01                	mov    DWORD PTR [ecx],eax
c000f7df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f7e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f7e8:	83 c8 40             	or     eax,0x40
c000f7eb:	89 c2                	mov    edx,eax
c000f7ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7f0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f7f3:	eb 3e                	jmp    c000f833 <opcodeFault(regs*, void*)+0x2ac>
c000f7f5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f7f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f7fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f800:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f803:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f809:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f80c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f80f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f812:	89 d0                	mov    eax,edx
c000f814:	31 d2                	xor    edx,edx
c000f816:	89 c3                	mov    ebx,eax
c000f818:	89 d6                	mov    esi,edx
c000f81a:	89 da                	mov    edx,ebx
c000f81c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f81f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f825:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f828:	83 e0 bf             	and    eax,0xffffffbf
c000f82b:	89 c2                	mov    edx,eax
c000f82d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f830:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f833:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000f838:	48                   	dec    eax
c000f839:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000f83e:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000f843:	85 c0                	test   eax,eax
c000f845:	75 01                	jne    c000f848 <opcodeFault(regs*, void*)+0x2c1>
c000f847:	fb                   	sti    
c000f848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f84b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f84e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f851:	01 c2                	add    edx,eax
c000f853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f856:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f859:	83 ec 0c             	sub    esp,0xc
c000f85c:	68 27 56 02 c0       	push   0xc0025627
c000f861:	e8 e1 d7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f866:	83 c4 10             	add    esp,0x10
c000f869:	e9 d5 00 00 00       	jmp    c000f943 <opcodeFault(regs*, void*)+0x3bc>
c000f86e:	83 ec 0c             	sub    esp,0xc
c000f871:	68 3a 56 02 c0       	push   0xc002563a
c000f876:	e8 cc d7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f87b:	83 c4 10             	add    esp,0x10
c000f87e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f881:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f887:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f88a:	c1 e0 04             	shl    eax,0x4
c000f88d:	01 d0                	add    eax,edx
c000f88f:	83 c0 03             	add    eax,0x3
c000f892:	8a 00                	mov    al,BYTE PTR [eax]
c000f894:	0f b6 d8             	movzx  ebx,al
c000f897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f89a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f89d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f8a3:	c1 e0 04             	shl    eax,0x4
c000f8a6:	01 d0                	add    eax,edx
c000f8a8:	83 c0 02             	add    eax,0x2
c000f8ab:	8a 00                	mov    al,BYTE PTR [eax]
c000f8ad:	0f b6 c8             	movzx  ecx,al
c000f8b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8b3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f8b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f8bc:	c1 e0 04             	shl    eax,0x4
c000f8bf:	01 d0                	add    eax,edx
c000f8c1:	40                   	inc    eax
c000f8c2:	8a 00                	mov    al,BYTE PTR [eax]
c000f8c4:	0f b6 d0             	movzx  edx,al
c000f8c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8ca:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f8cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f8d3:	c1 e0 04             	shl    eax,0x4
c000f8d6:	01 f0                	add    eax,esi
c000f8d8:	8a 00                	mov    al,BYTE PTR [eax]
c000f8da:	0f b6 c0             	movzx  eax,al
c000f8dd:	83 ec 0c             	sub    esp,0xc
c000f8e0:	53                   	push   ebx
c000f8e1:	51                   	push   ecx
c000f8e2:	52                   	push   edx
c000f8e3:	50                   	push   eax
c000f8e4:	68 4c 56 02 c0       	push   0xc002564c
c000f8e9:	e8 59 d7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f8ee:	83 c4 20             	add    esp,0x20
c000f8f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8f7:	83 c0 03             	add    eax,0x3
c000f8fa:	8a 00                	mov    al,BYTE PTR [eax]
c000f8fc:	0f b6 d8             	movzx  ebx,al
c000f8ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f902:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f905:	83 c0 02             	add    eax,0x2
c000f908:	8a 00                	mov    al,BYTE PTR [eax]
c000f90a:	0f b6 c8             	movzx  ecx,al
c000f90d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f910:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f913:	40                   	inc    eax
c000f914:	8a 00                	mov    al,BYTE PTR [eax]
c000f916:	0f b6 d0             	movzx  edx,al
c000f919:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f91c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f91f:	8a 00                	mov    al,BYTE PTR [eax]
c000f921:	0f b6 c0             	movzx  eax,al
c000f924:	83 ec 0c             	sub    esp,0xc
c000f927:	53                   	push   ebx
c000f928:	51                   	push   ecx
c000f929:	52                   	push   edx
c000f92a:	50                   	push   eax
c000f92b:	68 74 56 02 c0       	push   0xc0025674
c000f930:	e8 12 d7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f935:	83 c4 20             	add    esp,0x20
c000f938:	83 ec 0c             	sub    esp,0xc
c000f93b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f93e:	e8 9b f6 ff ff       	call   c000efde <displayDebugInfo(regs*)>
c000f943:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f946:	5b                   	pop    ebx
c000f947:	5e                   	pop    esi
c000f948:	5d                   	pop    ebp
c000f949:	c3                   	ret    

c000f94a <displayProgramFault(char const*)>:
c000f94a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f94f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f952:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f958:	85 c0                	test   eax,eax
c000f95a:	74 15                	je     c000f971 <displayProgramFault(char const*)+0x27>
c000f95c:	83 ec 0c             	sub    esp,0xc
c000f95f:	6a 04                	push   0x4
c000f961:	6a 0f                	push   0xf
c000f963:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f967:	50                   	push   eax
c000f968:	e8 f1 b6 ff ff       	call   c000b05e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f96d:	83 c4 1c             	add    esp,0x1c
c000f970:	c3                   	ret    
c000f971:	c3                   	ret    

c000f972 <setupInterruptController()>:
c000f972:	55                   	push   ebp
c000f973:	89 e5                	mov    ebp,esp
c000f975:	53                   	push   ebx
c000f976:	83 ec 24             	sub    esp,0x24
c000f979:	b8 00 00 00 00       	mov    eax,0x0
c000f97e:	85 c0                	test   eax,eax
c000f980:	0f 95 c0             	setne  al
c000f983:	84 c0                	test   al,al
c000f985:	74 5b                	je     c000f9e2 <setupInterruptController()+0x70>
c000f987:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f98e:	83 ec 0c             	sub    esp,0xc
c000f991:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f994:	e8 c2 a3 ff ff       	call   c0009d5b <malloc>
c000f999:	83 c4 10             	add    esp,0x10
c000f99c:	89 c3                	mov    ebx,eax
c000f99e:	83 ec 0c             	sub    esp,0xc
c000f9a1:	53                   	push   ebx
c000f9a2:	e8 bb 22 01 00       	call   c0021c62 <APIC::APIC()>
c000f9a7:	83 c4 10             	add    esp,0x10
c000f9aa:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f9ad:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f9b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f9b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9b5:	83 c0 08             	add    eax,0x8
c000f9b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ba:	6a 00                	push   0x0
c000f9bc:	6a 00                	push   0x0
c000f9be:	6a 00                	push   0x0
c000f9c0:	52                   	push   edx
c000f9c1:	ff d0                	call   eax
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000f9cb:	83 ec 08             	sub    esp,0x8
c000f9ce:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f9d1:	50                   	push   eax
c000f9d2:	e8 e3 eb ff ff       	call   c000e5ba <Device::addChild(Device*)>
c000f9d7:	83 c4 10             	add    esp,0x10
c000f9da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f9dd:	e9 79 03 00 00       	jmp    c000fd5b <setupInterruptController()+0x3e9>
c000f9e2:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000f9e7:	84 c0                	test   al,al
c000f9e9:	75 14                	jne    c000f9ff <setupInterruptController()+0x8d>
c000f9eb:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000f9f0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f9f6:	83 e2 fe             	and    edx,0xfffffffe
c000f9f9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f9ff:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000fa04:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fa0a:	83 e0 01             	and    eax,0x1
c000fa0d:	84 c0                	test   al,al
c000fa0f:	0f 95 c0             	setne  al
c000fa12:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000fa15:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fa1c:	83 ec 0c             	sub    esp,0xc
c000fa1f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fa22:	e8 34 a3 ff ff       	call   c0009d5b <malloc>
c000fa27:	83 c4 10             	add    esp,0x10
c000fa2a:	89 c3                	mov    ebx,eax
c000fa2c:	83 ec 0c             	sub    esp,0xc
c000fa2f:	53                   	push   ebx
c000fa30:	e8 85 27 01 00       	call   c00221ba <PIC::PIC()>
c000fa35:	83 c4 10             	add    esp,0x10
c000fa38:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fa3b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fa3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa41:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa43:	83 c0 08             	add    eax,0x8
c000fa46:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa48:	6a 00                	push   0x0
c000fa4a:	6a 00                	push   0x0
c000fa4c:	6a 00                	push   0x0
c000fa4e:	52                   	push   edx
c000fa4f:	ff d0                	call   eax
c000fa51:	83 c4 10             	add    esp,0x10
c000fa54:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fa58:	74 73                	je     c000facd <setupInterruptController()+0x15b>
c000fa5a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fa5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa60:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa62:	83 c0 0c             	add    eax,0xc
c000fa65:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa67:	6a 00                	push   0x0
c000fa69:	6a 00                	push   0x0
c000fa6b:	6a 00                	push   0x0
c000fa6d:	52                   	push   edx
c000fa6e:	ff d0                	call   eax
c000fa70:	83 c4 10             	add    esp,0x10
c000fa73:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fa77:	74 15                	je     c000fa8e <setupInterruptController()+0x11c>
c000fa79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa7e:	83 c0 04             	add    eax,0x4
c000fa81:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa83:	83 ec 0c             	sub    esp,0xc
c000fa86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa89:	ff d0                	call   eax
c000fa8b:	83 c4 10             	add    esp,0x10
c000fa8e:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fa95:	83 ec 0c             	sub    esp,0xc
c000fa98:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fa9b:	e8 bb a2 ff ff       	call   c0009d5b <malloc>
c000faa0:	83 c4 10             	add    esp,0x10
c000faa3:	89 c3                	mov    ebx,eax
c000faa5:	83 ec 0c             	sub    esp,0xc
c000faa8:	53                   	push   ebx
c000faa9:	e8 b4 21 01 00       	call   c0021c62 <APIC::APIC()>
c000faae:	83 c4 10             	add    esp,0x10
c000fab1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fab4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fab7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000faba:	8b 00                	mov    eax,DWORD PTR [eax]
c000fabc:	83 c0 08             	add    eax,0x8
c000fabf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fac1:	6a 00                	push   0x0
c000fac3:	6a 00                	push   0x0
c000fac5:	6a 00                	push   0x0
c000fac7:	52                   	push   edx
c000fac8:	ff d0                	call   eax
c000faca:	83 c4 10             	add    esp,0x10
c000facd:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c000fad2:	83 ec 08             	sub    esp,0x8
c000fad5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fad8:	50                   	push   eax
c000fad9:	e8 dc ea ff ff       	call   c000e5ba <Device::addChild(Device*)>
c000fade:	83 c4 10             	add    esp,0x10
c000fae1:	c7 05 c8 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00289c8,0x0
c000faeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000faee:	8b 00                	mov    eax,DWORD PTR [eax]
c000faf0:	83 c0 24             	add    eax,0x24
c000faf3:	8b 00                	mov    eax,DWORD PTR [eax]
c000faf5:	6a 00                	push   0x0
c000faf7:	68 68 f5 00 c0       	push   0xc000f568
c000fafc:	6a 00                	push   0x0
c000fafe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb01:	ff d0                	call   eax
c000fb03:	83 c4 10             	add    esp,0x10
c000fb06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb09:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb0b:	83 c0 24             	add    eax,0x24
c000fb0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb10:	6a 00                	push   0x0
c000fb12:	68 68 f5 00 c0       	push   0xc000f568
c000fb17:	6a 01                	push   0x1
c000fb19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb1c:	ff d0                	call   eax
c000fb1e:	83 c4 10             	add    esp,0x10
c000fb21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb24:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb26:	83 c0 24             	add    eax,0x24
c000fb29:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb2b:	6a 00                	push   0x0
c000fb2d:	68 3b ee 00 c0       	push   0xc000ee3b
c000fb32:	6a 02                	push   0x2
c000fb34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb37:	ff d0                	call   eax
c000fb39:	83 c4 10             	add    esp,0x10
c000fb3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb41:	83 c0 24             	add    eax,0x24
c000fb44:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb46:	6a 00                	push   0x0
c000fb48:	68 68 f5 00 c0       	push   0xc000f568
c000fb4d:	6a 03                	push   0x3
c000fb4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb52:	ff d0                	call   eax
c000fb54:	83 c4 10             	add    esp,0x10
c000fb57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb5c:	83 c0 24             	add    eax,0x24
c000fb5f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb61:	6a 00                	push   0x0
c000fb63:	68 68 f5 00 c0       	push   0xc000f568
c000fb68:	6a 04                	push   0x4
c000fb6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb6d:	ff d0                	call   eax
c000fb6f:	83 c4 10             	add    esp,0x10
c000fb72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb75:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb77:	83 c0 24             	add    eax,0x24
c000fb7a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb7c:	6a 00                	push   0x0
c000fb7e:	68 68 f5 00 c0       	push   0xc000f568
c000fb83:	6a 05                	push   0x5
c000fb85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb88:	ff d0                	call   eax
c000fb8a:	83 c4 10             	add    esp,0x10
c000fb8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb92:	83 c0 24             	add    eax,0x24
c000fb95:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb97:	6a 00                	push   0x0
c000fb99:	68 87 f5 00 c0       	push   0xc000f587
c000fb9e:	6a 06                	push   0x6
c000fba0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fba3:	ff d0                	call   eax
c000fba5:	83 c4 10             	add    esp,0x10
c000fba8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbab:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbad:	83 c0 24             	add    eax,0x24
c000fbb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbb2:	6a 00                	push   0x0
c000fbb4:	68 6d f4 00 c0       	push   0xc000f46d
c000fbb9:	6a 07                	push   0x7
c000fbbb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbbe:	ff d0                	call   eax
c000fbc0:	83 c4 10             	add    esp,0x10
c000fbc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbc6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbc8:	83 c0 24             	add    eax,0x24
c000fbcb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbcd:	6a 00                	push   0x0
c000fbcf:	68 56 ec 00 c0       	push   0xc000ec56
c000fbd4:	6a 08                	push   0x8
c000fbd6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbd9:	ff d0                	call   eax
c000fbdb:	83 c4 10             	add    esp,0x10
c000fbde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbe1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbe3:	83 c0 24             	add    eax,0x24
c000fbe6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbe8:	6a 00                	push   0x0
c000fbea:	68 68 f5 00 c0       	push   0xc000f568
c000fbef:	6a 09                	push   0x9
c000fbf1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbf4:	ff d0                	call   eax
c000fbf6:	83 c4 10             	add    esp,0x10
c000fbf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbfc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbfe:	83 c0 24             	add    eax,0x24
c000fc01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc03:	6a 00                	push   0x0
c000fc05:	68 68 f5 00 c0       	push   0xc000f568
c000fc0a:	6a 0a                	push   0xa
c000fc0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc0f:	ff d0                	call   eax
c000fc11:	83 c4 10             	add    esp,0x10
c000fc14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc17:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc19:	83 c0 24             	add    eax,0x24
c000fc1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc1e:	6a 00                	push   0x0
c000fc20:	68 68 f5 00 c0       	push   0xc000f568
c000fc25:	6a 0b                	push   0xb
c000fc27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc2a:	ff d0                	call   eax
c000fc2c:	83 c4 10             	add    esp,0x10
c000fc2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc32:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc34:	83 c0 24             	add    eax,0x24
c000fc37:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc39:	6a 00                	push   0x0
c000fc3b:	68 68 f5 00 c0       	push   0xc000f568
c000fc40:	6a 0c                	push   0xc
c000fc42:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc45:	ff d0                	call   eax
c000fc47:	83 c4 10             	add    esp,0x10
c000fc4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc4f:	83 c0 24             	add    eax,0x24
c000fc52:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc54:	6a 00                	push   0x0
c000fc56:	68 e0 f4 00 c0       	push   0xc000f4e0
c000fc5b:	6a 0d                	push   0xd
c000fc5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc60:	ff d0                	call   eax
c000fc62:	83 c4 10             	add    esp,0x10
c000fc65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc68:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc6a:	83 c0 24             	add    eax,0x24
c000fc6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc6f:	6a 00                	push   0x0
c000fc71:	68 19 f5 00 c0       	push   0xc000f519
c000fc76:	6a 0e                	push   0xe
c000fc78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc7b:	ff d0                	call   eax
c000fc7d:	83 c4 10             	add    esp,0x10
c000fc80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc83:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc85:	83 c0 24             	add    eax,0x24
c000fc88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc8a:	6a 00                	push   0x0
c000fc8c:	68 68 f5 00 c0       	push   0xc000f568
c000fc91:	6a 0f                	push   0xf
c000fc93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc96:	ff d0                	call   eax
c000fc98:	83 c4 10             	add    esp,0x10
c000fc9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc9e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca0:	83 c0 24             	add    eax,0x24
c000fca3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca5:	6a 00                	push   0x0
c000fca7:	68 68 f5 00 c0       	push   0xc000f568
c000fcac:	6a 10                	push   0x10
c000fcae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcb1:	ff d0                	call   eax
c000fcb3:	83 c4 10             	add    esp,0x10
c000fcb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcb9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcbb:	83 c0 24             	add    eax,0x24
c000fcbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc0:	6a 00                	push   0x0
c000fcc2:	68 68 f5 00 c0       	push   0xc000f568
c000fcc7:	6a 11                	push   0x11
c000fcc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fccc:	ff d0                	call   eax
c000fcce:	83 c4 10             	add    esp,0x10
c000fcd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcd4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd6:	83 c0 24             	add    eax,0x24
c000fcd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcdb:	6a 00                	push   0x0
c000fcdd:	68 68 f5 00 c0       	push   0xc000f568
c000fce2:	6a 12                	push   0x12
c000fce4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fce7:	ff d0                	call   eax
c000fce9:	83 c4 10             	add    esp,0x10
c000fcec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcef:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf1:	83 c0 24             	add    eax,0x24
c000fcf4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf6:	6a 00                	push   0x0
c000fcf8:	68 68 f5 00 c0       	push   0xc000f568
c000fcfd:	6a 13                	push   0x13
c000fcff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd02:	ff d0                	call   eax
c000fd04:	83 c4 10             	add    esp,0x10
c000fd07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0c:	83 c0 24             	add    eax,0x24
c000fd0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd11:	6a 00                	push   0x0
c000fd13:	68 68 f5 00 c0       	push   0xc000f568
c000fd18:	6a 14                	push   0x14
c000fd1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd1d:	ff d0                	call   eax
c000fd1f:	83 c4 10             	add    esp,0x10
c000fd22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd25:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd27:	83 c0 24             	add    eax,0x24
c000fd2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd2c:	6a 00                	push   0x0
c000fd2e:	68 68 f5 00 c0       	push   0xc000f568
c000fd33:	6a 1e                	push   0x1e
c000fd35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd38:	ff d0                	call   eax
c000fd3a:	83 c4 10             	add    esp,0x10
c000fd3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd40:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd42:	83 c0 24             	add    eax,0x24
c000fd45:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd47:	6a 00                	push   0x0
c000fd49:	68 2f 72 01 c0       	push   0xc001722f
c000fd4e:	6a 60                	push   0x60
c000fd50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd53:	ff d0                	call   eax
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd5b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fd5e:	c9                   	leave  
c000fd5f:	c3                   	ret    

c000fd60 <InterruptController::convertLegacyIRQNumber(int)>:
c000fd60:	55                   	push   ebp
c000fd61:	89 e5                	mov    ebp,esp
c000fd63:	83 ec 08             	sub    esp,0x8
c000fd66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd69:	83 ec 0c             	sub    esp,0xc
c000fd6c:	50                   	push   eax
c000fd6d:	e8 48 eb ff ff       	call   c000e8ba <Device::getName()>
c000fd72:	83 c4 10             	add    esp,0x10
c000fd75:	8a 00                	mov    al,BYTE PTR [eax]
c000fd77:	3c 41                	cmp    al,0x41
c000fd79:	0f 94 c0             	sete   al
c000fd7c:	84 c0                	test   al,al
c000fd7e:	74 28                	je     c000fda8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fd80:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fd84:	7f 12                	jg     c000fd98 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fd86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd89:	05 80 7f 02 c0       	add    eax,0xc0027f80
c000fd8e:	8a 00                	mov    al,BYTE PTR [eax]
c000fd90:	0f b6 c0             	movzx  eax,al
c000fd93:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fd96:	eb 10                	jmp    c000fda8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fd98:	83 ec 0c             	sub    esp,0xc
c000fd9b:	68 9c 56 02 c0       	push   0xc002569c
c000fda0:	e8 40 52 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c000fda5:	83 c4 10             	add    esp,0x10
c000fda8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fdab:	c9                   	leave  
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <startGUI(void*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	89 e5                	mov    ebp,esp
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 04             	sub    esp,0x4
c000fdb5:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000fdba:	48                   	dec    eax
c000fdbb:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000fdc0:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000fdc5:	85 c0                	test   eax,eax
c000fdc7:	75 01                	jne    c000fdca <startGUI(void*)+0x1c>
c000fdc9:	fb                   	sti    
c000fdca:	8b 1d 88 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028888
c000fdd0:	83 ec 08             	sub    esp,0x8
c000fdd3:	6a 01                	push   0x1
c000fdd5:	68 1c 57 02 c0       	push   0xc002571c
c000fdda:	e8 2b 84 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c000fddf:	83 c4 10             	add    esp,0x10
c000fde2:	83 ec 08             	sub    esp,0x8
c000fde5:	53                   	push   ebx
c000fde6:	50                   	push   eax
c000fde7:	e8 4f 86 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c000fdec:	83 c4 10             	add    esp,0x10
c000fdef:	8b 1d 88 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028888
c000fdf5:	83 ec 08             	sub    esp,0x8
c000fdf8:	6a 01                	push   0x1
c000fdfa:	68 36 57 02 c0       	push   0xc0025736
c000fdff:	e8 06 84 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c000fe04:	83 c4 10             	add    esp,0x10
c000fe07:	83 ec 08             	sub    esp,0x8
c000fe0a:	53                   	push   ebx
c000fe0b:	50                   	push   eax
c000fe0c:	e8 2a 86 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c000fe11:	83 c4 10             	add    esp,0x10
c000fe14:	90                   	nop
c000fe15:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fe18:	c9                   	leave  
c000fe19:	c3                   	ret    

c000fe1a <startGUIVESA(void*)>:
c000fe1a:	55                   	push   ebp
c000fe1b:	89 e5                	mov    ebp,esp
c000fe1d:	53                   	push   ebx
c000fe1e:	83 ec 04             	sub    esp,0x4
c000fe21:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000fe26:	48                   	dec    eax
c000fe27:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000fe2c:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000fe31:	85 c0                	test   eax,eax
c000fe33:	75 01                	jne    c000fe36 <startGUIVESA(void*)+0x1c>
c000fe35:	fb                   	sti    
c000fe36:	8b 1d 88 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028888
c000fe3c:	83 ec 08             	sub    esp,0x8
c000fe3f:	6a 01                	push   0x1
c000fe41:	68 54 57 02 c0       	push   0xc0025754
c000fe46:	e8 bf 83 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c000fe4b:	83 c4 10             	add    esp,0x10
c000fe4e:	83 ec 08             	sub    esp,0x8
c000fe51:	53                   	push   ebx
c000fe52:	50                   	push   eax
c000fe53:	e8 e3 85 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c000fe58:	83 c4 10             	add    esp,0x10
c000fe5b:	8b 1d 88 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028888
c000fe61:	83 ec 08             	sub    esp,0x8
c000fe64:	6a 01                	push   0x1
c000fe66:	68 36 57 02 c0       	push   0xc0025736
c000fe6b:	e8 9a 83 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c000fe70:	83 c4 10             	add    esp,0x10
c000fe73:	83 ec 08             	sub    esp,0x8
c000fe76:	53                   	push   ebx
c000fe77:	50                   	push   eax
c000fe78:	e8 be 85 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c000fe7d:	83 c4 10             	add    esp,0x10
c000fe80:	90                   	nop
c000fe81:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fe84:	c9                   	leave  
c000fe85:	c3                   	ret    

c000fe86 <sendKeyToTerminal(unsigned char)>:
c000fe86:	55                   	push   ebp
c000fe87:	89 e5                	mov    ebp,esp
c000fe89:	83 ec 28             	sub    esp,0x28
c000fe8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe8f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fe92:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000fe97:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fe9b:	83 ec 08             	sub    esp,0x8
c000fe9e:	52                   	push   edx
c000fe9f:	50                   	push   eax
c000fea0:	e8 5f b6 ff ff       	call   c000b504 <VgaText::receiveKey(unsigned char)>
c000fea5:	83 c4 10             	add    esp,0x10
c000fea8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000feac:	0f 85 8f 00 00 00    	jne    c000ff41 <sendKeyToTerminal(unsigned char)+0xbb>
c000feb2:	fa                   	cli    
c000feb3:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000feb8:	40                   	inc    eax
c000feb9:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000febe:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c000fec3:	40                   	inc    eax
c000fec4:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c000fec9:	a1 e0 89 02 c0       	mov    eax,ds:0xc00289e0
c000fece:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fed1:	c7 05 e0 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00289e0,0x0
c000fedb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fedf:	74 1f                	je     c000ff00 <sendKeyToTerminal(unsigned char)+0x7a>
c000fee1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fee4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fee7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000feea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000feed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fef0:	83 ec 0c             	sub    esp,0xc
c000fef3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fef6:	e8 b1 91 00 00       	call   c00190ac <unblockTask(ThreadControlBlock*)>
c000fefb:	83 c4 10             	add    esp,0x10
c000fefe:	eb db                	jmp    c000fedb <sendKeyToTerminal(unsigned char)+0x55>
c000ff00:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c000ff05:	48                   	dec    eax
c000ff06:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c000ff0b:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c000ff10:	85 c0                	test   eax,eax
c000ff12:	75 18                	jne    c000ff2c <sendKeyToTerminal(unsigned char)+0xa6>
c000ff14:	a1 a0 9d 02 c0       	mov    eax,ds:0xc0029da0
c000ff19:	85 c0                	test   eax,eax
c000ff1b:	74 0f                	je     c000ff2c <sendKeyToTerminal(unsigned char)+0xa6>
c000ff1d:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c000ff27:	e8 c4 8c 00 00       	call   c0018bf0 <schedule()>
c000ff2c:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000ff31:	48                   	dec    eax
c000ff32:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c000ff37:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c000ff3c:	85 c0                	test   eax,eax
c000ff3e:	75 01                	jne    c000ff41 <sendKeyToTerminal(unsigned char)+0xbb>
c000ff40:	fb                   	sti    
c000ff41:	90                   	nop
c000ff42:	c9                   	leave  
c000ff43:	c3                   	ret    

c000ff44 <sendKeyboardToken(KeyboardToken)>:
c000ff44:	55                   	push   ebp
c000ff45:	89 e5                	mov    ebp,esp
c000ff47:	83 ec 18             	sub    esp,0x18
c000ff4a:	e8 6f 53 00 00       	call   c00152be <Krnl::userIOReceived()>
c000ff4f:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ff52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff55:	0f b7 c0             	movzx  eax,ax
c000ff58:	83 f2 01             	xor    edx,0x1
c000ff5b:	88 90 00 8a 02 c0    	mov    BYTE PTR [eax-0x3ffd7600],dl
c000ff61:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c000ff66:	85 c0                	test   eax,eax
c000ff68:	74 24                	je     c000ff8e <sendKeyboardToken(KeyboardToken)+0x4a>
c000ff6a:	8b 0d e8 89 02 c0    	mov    ecx,DWORD PTR ds:0xc00289e8
c000ff70:	83 ec 04             	sub    esp,0x4
c000ff73:	68 00 8a 02 c0       	push   0xc0028a00
c000ff78:	83 ec 08             	sub    esp,0x8
c000ff7b:	89 e2                	mov    edx,esp
c000ff7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff80:	89 02                	mov    DWORD PTR [edx],eax
c000ff82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ff85:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ff89:	ff d1                	call   ecx
c000ff8b:	83 c4 10             	add    esp,0x10
c000ff8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff91:	66 3d 03 02          	cmp    ax,0x203
c000ff95:	75 07                	jne    c000ff9e <sendKeyboardToken(KeyboardToken)+0x5a>
c000ff97:	a0 00 8b 02 c0       	mov    al,ds:0xc0028b00
c000ff9c:	84 c0                	test   al,al
c000ff9e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ffa2:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ffa5:	a0 08 8e 02 c0       	mov    al,ds:0xc0028e08
c000ffaa:	38 c2                	cmp    dl,al
c000ffac:	74 1c                	je     c000ffca <sendKeyboardToken(KeyboardToken)+0x86>
c000ffae:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ffb1:	a2 08 8e 02 c0       	mov    ds:0xc0028e08,al
c000ffb6:	a0 08 8e 02 c0       	mov    al,ds:0xc0028e08
c000ffbb:	0f b6 c0             	movzx  eax,al
c000ffbe:	83 ec 0c             	sub    esp,0xc
c000ffc1:	50                   	push   eax
c000ffc2:	e8 7f ab ff ff       	call   c000ab46 <setTerminalScrollLock(bool)>
c000ffc7:	83 c4 10             	add    esp,0x10
c000ffca:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ffcd:	84 c0                	test   al,al
c000ffcf:	0f 84 ae 00 00 00    	je     c0010083 <sendKeyboardToken(KeyboardToken)+0x13f>
c000ffd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffd8:	66 3d 10 03          	cmp    ax,0x310
c000ffdc:	75 06                	jne    c000ffe4 <sendKeyboardToken(KeyboardToken)+0xa0>
c000ffde:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ffe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffe7:	66 3d 11 03          	cmp    ax,0x311
c000ffeb:	75 06                	jne    c000fff3 <sendKeyboardToken(KeyboardToken)+0xaf>
c000ffed:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fff6:	66 3d 12 03          	cmp    ax,0x312
c000fffa:	75 06                	jne    c0010002 <sendKeyboardToken(KeyboardToken)+0xbe>
c000fffc:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0010002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010005:	66 3d 13 03          	cmp    ax,0x313
c0010009:	75 06                	jne    c0010011 <sendKeyboardToken(KeyboardToken)+0xcd>
c001000b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0010011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010014:	66 3d 14 03          	cmp    ax,0x314
c0010018:	75 06                	jne    c0010020 <sendKeyboardToken(KeyboardToken)+0xdc>
c001001a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0010020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010023:	66 3d 15 03          	cmp    ax,0x315
c0010027:	75 06                	jne    c001002f <sendKeyboardToken(KeyboardToken)+0xeb>
c0010029:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001002f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010032:	66 3d 16 03          	cmp    ax,0x316
c0010036:	75 06                	jne    c001003e <sendKeyboardToken(KeyboardToken)+0xfa>
c0010038:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001003e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010041:	66 3d 17 03          	cmp    ax,0x317
c0010045:	75 06                	jne    c001004d <sendKeyboardToken(KeyboardToken)+0x109>
c0010047:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001004d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010050:	66 3d 18 03          	cmp    ax,0x318
c0010054:	75 06                	jne    c001005c <sendKeyboardToken(KeyboardToken)+0x118>
c0010056:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001005c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001005f:	66 3d 19 03          	cmp    ax,0x319
c0010063:	75 06                	jne    c001006b <sendKeyboardToken(KeyboardToken)+0x127>
c0010065:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001006e:	66 3d 1a 03          	cmp    ax,0x31a
c0010072:	0f 85 c9 00 00 00    	jne    c0010141 <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010078:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001007e:	e9 be 00 00 00       	jmp    c0010141 <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010086:	66 3d 10 03          	cmp    ax,0x310
c001008a:	75 0a                	jne    c0010096 <sendKeyboardToken(KeyboardToken)+0x152>
c001008c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0010092:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010099:	66 3d 11 03          	cmp    ax,0x311
c001009d:	75 0a                	jne    c00100a9 <sendKeyboardToken(KeyboardToken)+0x165>
c001009f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00100a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100ac:	66 3d 12 03          	cmp    ax,0x312
c00100b0:	75 0a                	jne    c00100bc <sendKeyboardToken(KeyboardToken)+0x178>
c00100b2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00100b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100bf:	66 3d 13 03          	cmp    ax,0x313
c00100c3:	75 0a                	jne    c00100cf <sendKeyboardToken(KeyboardToken)+0x18b>
c00100c5:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00100cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100d2:	66 3d 14 03          	cmp    ax,0x314
c00100d6:	75 0a                	jne    c00100e2 <sendKeyboardToken(KeyboardToken)+0x19e>
c00100d8:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00100de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100e5:	66 3d 15 03          	cmp    ax,0x315
c00100e9:	75 0a                	jne    c00100f5 <sendKeyboardToken(KeyboardToken)+0x1b1>
c00100eb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00100f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100f8:	66 3d 16 03          	cmp    ax,0x316
c00100fc:	75 0a                	jne    c0010108 <sendKeyboardToken(KeyboardToken)+0x1c4>
c00100fe:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0010104:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001010b:	66 3d 17 03          	cmp    ax,0x317
c001010f:	75 0a                	jne    c001011b <sendKeyboardToken(KeyboardToken)+0x1d7>
c0010111:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0010117:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001011b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001011e:	66 3d 18 03          	cmp    ax,0x318
c0010122:	75 0a                	jne    c001012e <sendKeyboardToken(KeyboardToken)+0x1ea>
c0010124:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001012a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001012e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010131:	66 3d 19 03          	cmp    ax,0x319
c0010135:	75 0a                	jne    c0010141 <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010137:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001013d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010144:	66 3d 00 02          	cmp    ax,0x200
c0010148:	75 2c                	jne    c0010176 <sendKeyboardToken(KeyboardToken)+0x232>
c001014a:	a0 00 8e 02 c0       	mov    al,ds:0xc0028e00
c001014f:	83 f0 01             	xor    eax,0x1
c0010152:	84 c0                	test   al,al
c0010154:	74 20                	je     c0010176 <sendKeyboardToken(KeyboardToken)+0x232>
c0010156:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c001015b:	6a 01                	push   0x1
c001015d:	6a 00                	push   0x0
c001015f:	68 ae fd 00 c0       	push   0xc000fdae
c0010164:	50                   	push   eax
c0010165:	e8 6a 88 00 00       	call   c00189d4 <Process::createThread(void (*)(void*), void*, int)>
c001016a:	83 c4 10             	add    esp,0x10
c001016d:	c6 05 00 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e00,0x1
c0010174:	eb 33                	jmp    c00101a9 <sendKeyboardToken(KeyboardToken)+0x265>
c0010176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010179:	66 3d 01 02          	cmp    ax,0x201
c001017d:	75 2a                	jne    c00101a9 <sendKeyboardToken(KeyboardToken)+0x265>
c001017f:	a0 00 8e 02 c0       	mov    al,ds:0xc0028e00
c0010184:	83 f0 01             	xor    eax,0x1
c0010187:	84 c0                	test   al,al
c0010189:	74 1e                	je     c00101a9 <sendKeyboardToken(KeyboardToken)+0x265>
c001018b:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c0010190:	6a 01                	push   0x1
c0010192:	6a 00                	push   0x0
c0010194:	68 1a fe 00 c0       	push   0xc000fe1a
c0010199:	50                   	push   eax
c001019a:	e8 35 88 00 00       	call   c00189d4 <Process::createThread(void (*)(void*), void*, int)>
c001019f:	83 c4 10             	add    esp,0x10
c00101a2:	c6 05 00 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e00,0x1
c00101a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101ac:	66 3d 1d 03          	cmp    ax,0x31d
c00101b0:	75 06                	jne    c00101b8 <sendKeyboardToken(KeyboardToken)+0x274>
c00101b2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00101b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101bb:	66 3d 1c 03          	cmp    ax,0x31c
c00101bf:	75 06                	jne    c00101c7 <sendKeyboardToken(KeyboardToken)+0x283>
c00101c1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00101c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101ca:	66 3d 1b 03          	cmp    ax,0x31b
c00101ce:	75 06                	jne    c00101d6 <sendKeyboardToken(KeyboardToken)+0x292>
c00101d0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00101d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101d9:	66 3d 1e 03          	cmp    ax,0x31e
c00101dd:	75 06                	jne    c00101e5 <sendKeyboardToken(KeyboardToken)+0x2a1>
c00101df:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00101e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101e8:	66 3d 1f 03          	cmp    ax,0x31f
c00101ec:	75 06                	jne    c00101f4 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00101ee:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00101f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101f7:	66 3d 1a 03          	cmp    ax,0x31a
c00101fb:	75 06                	jne    c0010203 <sendKeyboardToken(KeyboardToken)+0x2bf>
c00101fd:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0010203:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0010207:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001020a:	83 f0 01             	xor    eax,0x1
c001020d:	84 c0                	test   al,al
c001020f:	74 77                	je     c0010288 <sendKeyboardToken(KeyboardToken)+0x344>
c0010211:	a0 01 8b 02 c0       	mov    al,ds:0xc0028b01
c0010216:	84 c0                	test   al,al
c0010218:	74 41                	je     c001025b <sendKeyboardToken(KeyboardToken)+0x317>
c001021a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001021e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0010222:	74 2b                	je     c001024f <sendKeyboardToken(KeyboardToken)+0x30b>
c0010224:	8b 15 04 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e04
c001022a:	89 d0                	mov    eax,edx
c001022c:	c1 e0 02             	shl    eax,0x2
c001022f:	01 d0                	add    eax,edx
c0010231:	01 c0                	add    eax,eax
c0010233:	a3 04 8e 02 c0       	mov    ds:0xc0028e04,eax
c0010238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001023b:	0f b7 c0             	movzx  eax,ax
c001023e:	8d 50 d0             	lea    edx,[eax-0x30]
c0010241:	a1 04 8e 02 c0       	mov    eax,ds:0xc0028e04
c0010246:	01 d0                	add    eax,edx
c0010248:	a3 04 8e 02 c0       	mov    ds:0xc0028e04,eax
c001024d:	eb 6d                	jmp    c00102bc <sendKeyboardToken(KeyboardToken)+0x378>
c001024f:	c7 05 04 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028e04,0x0
c0010259:	eb 61                	jmp    c00102bc <sendKeyboardToken(KeyboardToken)+0x378>
c001025b:	a1 04 8e 02 c0       	mov    eax,ds:0xc0028e04
c0010260:	85 c0                	test   eax,eax
c0010262:	74 18                	je     c001027c <sendKeyboardToken(KeyboardToken)+0x338>
c0010264:	a1 04 8e 02 c0       	mov    eax,ds:0xc0028e04
c0010269:	0f b6 c0             	movzx  eax,al
c001026c:	83 ec 0c             	sub    esp,0xc
c001026f:	50                   	push   eax
c0010270:	e8 11 fc ff ff       	call   c000fe86 <sendKeyToTerminal(unsigned char)>
c0010275:	83 c4 10             	add    esp,0x10
c0010278:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001027c:	c7 05 04 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028e04,0x0
c0010286:	eb 34                	jmp    c00102bc <sendKeyboardToken(KeyboardToken)+0x378>
c0010288:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001028b:	66 3d 01 01          	cmp    ax,0x101
c001028f:	75 2b                	jne    c00102bc <sendKeyboardToken(KeyboardToken)+0x378>
c0010291:	a1 04 8e 02 c0       	mov    eax,ds:0xc0028e04
c0010296:	85 c0                	test   eax,eax
c0010298:	74 18                	je     c00102b2 <sendKeyboardToken(KeyboardToken)+0x36e>
c001029a:	a1 04 8e 02 c0       	mov    eax,ds:0xc0028e04
c001029f:	0f b6 c0             	movzx  eax,al
c00102a2:	83 ec 0c             	sub    esp,0xc
c00102a5:	50                   	push   eax
c00102a6:	e8 db fb ff ff       	call   c000fe86 <sendKeyToTerminal(unsigned char)>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00102b2:	c7 05 04 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028e04,0x0
c00102bc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00102bf:	83 f0 01             	xor    eax,0x1
c00102c2:	84 c0                	test   al,al
c00102c4:	74 4c                	je     c0010312 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00102c6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00102c9:	83 f0 01             	xor    eax,0x1
c00102cc:	84 c0                	test   al,al
c00102ce:	74 42                	je     c0010312 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00102d0:	a0 00 8b 02 c0       	mov    al,ds:0xc0028b00
c00102d5:	83 f0 01             	xor    eax,0x1
c00102d8:	84 c0                	test   al,al
c00102da:	74 36                	je     c0010312 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00102dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102df:	66 83 f8 1f          	cmp    ax,0x1f
c00102e3:	76 09                	jbe    c00102ee <sendKeyboardToken(KeyboardToken)+0x3aa>
c00102e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102e8:	66 83 f8 7e          	cmp    ax,0x7e
c00102ec:	76 12                	jbe    c0010300 <sendKeyboardToken(KeyboardToken)+0x3bc>
c00102ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102f1:	66 83 f8 0a          	cmp    ax,0xa
c00102f5:	74 09                	je     c0010300 <sendKeyboardToken(KeyboardToken)+0x3bc>
c00102f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102fa:	66 83 f8 08          	cmp    ax,0x8
c00102fe:	75 12                	jne    c0010312 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0010300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010303:	0f b6 c0             	movzx  eax,al
c0010306:	83 ec 0c             	sub    esp,0xc
c0010309:	50                   	push   eax
c001030a:	e8 77 fb ff ff       	call   c000fe86 <sendKeyToTerminal(unsigned char)>
c001030f:	83 c4 10             	add    esp,0x10
c0010312:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010315:	83 f0 01             	xor    eax,0x1
c0010318:	84 c0                	test   al,al
c001031a:	74 4f                	je     c001036b <sendKeyboardToken(KeyboardToken)+0x427>
c001031c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001031f:	83 f0 01             	xor    eax,0x1
c0010322:	84 c0                	test   al,al
c0010324:	74 45                	je     c001036b <sendKeyboardToken(KeyboardToken)+0x427>
c0010326:	a0 00 8b 02 c0       	mov    al,ds:0xc0028b00
c001032b:	84 c0                	test   al,al
c001032d:	74 3c                	je     c001036b <sendKeyboardToken(KeyboardToken)+0x427>
c001032f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010332:	66 83 f8 3f          	cmp    ax,0x3f
c0010336:	76 33                	jbe    c001036b <sendKeyboardToken(KeyboardToken)+0x427>
c0010338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001033b:	66 83 f8 7f          	cmp    ax,0x7f
c001033f:	77 2a                	ja     c001036b <sendKeyboardToken(KeyboardToken)+0x427>
c0010341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010344:	88 c2                	mov    dl,al
c0010346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010349:	66 83 f8 5f          	cmp    ax,0x5f
c001034d:	76 04                	jbe    c0010353 <sendKeyboardToken(KeyboardToken)+0x40f>
c001034f:	b0 20                	mov    al,0x20
c0010351:	eb 02                	jmp    c0010355 <sendKeyboardToken(KeyboardToken)+0x411>
c0010353:	b0 00                	mov    al,0x0
c0010355:	29 c2                	sub    edx,eax
c0010357:	88 d0                	mov    al,dl
c0010359:	83 e8 40             	sub    eax,0x40
c001035c:	0f b6 c0             	movzx  eax,al
c001035f:	83 ec 0c             	sub    esp,0xc
c0010362:	50                   	push   eax
c0010363:	e8 1e fb ff ff       	call   c000fe86 <sendKeyToTerminal(unsigned char)>
c0010368:	83 c4 10             	add    esp,0x10
c001036b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001036e:	66 3d 00 03          	cmp    ax,0x300
c0010372:	75 0f                	jne    c0010383 <sendKeyboardToken(KeyboardToken)+0x43f>
c0010374:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010377:	83 f0 01             	xor    eax,0x1
c001037a:	84 c0                	test   al,al
c001037c:	74 05                	je     c0010383 <sendKeyboardToken(KeyboardToken)+0x43f>
c001037e:	e8 34 ab ff ff       	call   c000aeb7 <doTerminalCycle()>
c0010383:	90                   	nop
c0010384:	c9                   	leave  
c0010385:	c3                   	ret    

c0010386 <clearInternalKeybuffer(VgaText*)>:
c0010386:	55                   	push   ebp
c0010387:	89 e5                	mov    ebp,esp
c0010389:	83 ec 08             	sub    esp,0x8
c001038c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001038f:	05 32 01 00 00       	add    eax,0x132
c0010394:	83 ec 0c             	sub    esp,0xc
c0010397:	50                   	push   eax
c0010398:	e8 03 03 ff ff       	call   c00006a0 <strlen>
c001039d:	83 c4 10             	add    esp,0x10
c00103a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00103a3:	81 c2 32 01 00 00    	add    edx,0x132
c00103a9:	83 ec 04             	sub    esp,0x4
c00103ac:	50                   	push   eax
c00103ad:	6a 00                	push   0x0
c00103af:	52                   	push   edx
c00103b0:	e8 cf 02 ff ff       	call   c0000684 <memset>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	90                   	nop
c00103b9:	c9                   	leave  
c00103ba:	c3                   	ret    

c00103bb <readKeyboard(VgaText*, char*, unsigned long)>:
c00103bb:	55                   	push   ebp
c00103bc:	89 e5                	mov    ebp,esp
c00103be:	83 ec 18             	sub    esp,0x18
c00103c1:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c00103c6:	85 c0                	test   eax,eax
c00103c8:	74 2a                	je     c00103f4 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00103ca:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00103d0:	8b 0d e8 89 02 c0    	mov    ecx,DWORD PTR ds:0xc00289e8
c00103d6:	83 ec 04             	sub    esp,0x4
c00103d9:	68 00 8a 02 c0       	push   0xc0028a00
c00103de:	83 ec 08             	sub    esp,0x8
c00103e1:	89 e2                	mov    edx,esp
c00103e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00103e6:	89 02                	mov    DWORD PTR [edx],eax
c00103e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00103eb:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00103ef:	ff d1                	call   ecx
c00103f1:	83 c4 10             	add    esp,0x10
c00103f4:	fb                   	sti    
c00103f5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00103fc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0010400:	0f 84 a1 00 00 00    	je     c00104a7 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010409:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001040f:	84 c0                	test   al,al
c0010411:	75 28                	jne    c001043b <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0010413:	fa                   	cli    
c0010414:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0010419:	40                   	inc    eax
c001041a:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c001041f:	e8 cc 87 00 00       	call   c0018bf0 <schedule()>
c0010424:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0010429:	48                   	dec    eax
c001042a:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c001042f:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0010434:	85 c0                	test   eax,eax
c0010436:	75 ce                	jne    c0010406 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010438:	fb                   	sti    
c0010439:	eb cb                	jmp    c0010406 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001043b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001043e:	8d 50 01             	lea    edx,[eax+0x1]
c0010441:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010444:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010447:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c001044d:	88 10                	mov    BYTE PTR [eax],dl
c001044f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010452:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010458:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001045b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001045e:	05 32 01 00 00       	add    eax,0x132
c0010463:	83 ec 0c             	sub    esp,0xc
c0010466:	50                   	push   eax
c0010467:	e8 34 02 ff ff       	call   c00006a0 <strlen>
c001046c:	83 c4 10             	add    esp,0x10
c001046f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010472:	81 c2 32 01 00 00    	add    edx,0x132
c0010478:	8d 4a 01             	lea    ecx,[edx+0x1]
c001047b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001047e:	81 c2 32 01 00 00    	add    edx,0x132
c0010484:	83 ec 04             	sub    esp,0x4
c0010487:	50                   	push   eax
c0010488:	51                   	push   ecx
c0010489:	52                   	push   edx
c001048a:	e8 2d 01 ff ff       	call   c00005bc <memmove>
c001048f:	83 c4 10             	add    esp,0x10
c0010492:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0010495:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0010498:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001049c:	0f 85 5a ff ff ff    	jne    c00103fc <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00104a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00104a5:	eb 03                	jmp    c00104aa <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00104a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00104aa:	c9                   	leave  
c00104ab:	c3                   	ret    

c00104ac <Keyboard::Keyboard(char const*)>:
c00104ac:	83 ec 0c             	sub    esp,0xc
c00104af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b3:	83 ec 08             	sub    esp,0x8
c00104b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ba:	50                   	push   eax
c00104bb:	e8 fe e2 ff ff       	call   c000e7be <Device::Device(char const*)>
c00104c0:	83 c4 10             	add    esp,0x10
c00104c3:	ba 78 57 02 c0       	mov    edx,0xc0025778
c00104c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cc:	89 10                	mov    DWORD PTR [eax],edx
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00104dc:	c6 05 e4 89 02 c0 01 	mov    BYTE PTR ds:0xc00289e4,0x1
c00104e3:	90                   	nop
c00104e4:	83 c4 0c             	add    esp,0xc
c00104e7:	c3                   	ret    

c00104e8 <Keyboard::~Keyboard()>:
c00104e8:	83 ec 0c             	sub    esp,0xc
c00104eb:	ba 78 57 02 c0       	mov    edx,0xc0025778
c00104f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f4:	89 10                	mov    DWORD PTR [eax],edx
c00104f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fa:	83 ec 0c             	sub    esp,0xc
c00104fd:	50                   	push   eax
c00104fe:	e8 85 df ff ff       	call   c000e488 <Device::~Device()>
c0010503:	83 c4 10             	add    esp,0x10
c0010506:	90                   	nop
c0010507:	83 c4 0c             	add    esp,0xc
c001050a:	c3                   	ret    
c001050b:	90                   	nop

c001050c <Keyboard::~Keyboard()>:
c001050c:	83 ec 0c             	sub    esp,0xc
c001050f:	83 ec 0c             	sub    esp,0xc
c0010512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010516:	e8 cd ff ff ff       	call   c00104e8 <Keyboard::~Keyboard()>
c001051b:	83 c4 10             	add    esp,0x10
c001051e:	83 ec 08             	sub    esp,0x8
c0010521:	68 5c 01 00 00       	push   0x15c
c0010526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001052a:	e8 37 ca ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001052f:	83 c4 10             	add    esp,0x10
c0010532:	83 c4 0c             	add    esp,0xc
c0010535:	c3                   	ret    

c0010536 <LogicalDisk::close(int, int, void*)>:
c0010536:	83 c8 ff             	or     eax,0xffffffff
c0010539:	c3                   	ret    

c001053a <LogicalDisk::~LogicalDisk()>:
c001053a:	83 ec 0c             	sub    esp,0xc
c001053d:	ba 48 58 02 c0       	mov    edx,0xc0025848
c0010542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010546:	89 10                	mov    DWORD PTR [eax],edx
c0010548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054c:	83 ec 0c             	sub    esp,0xc
c001054f:	50                   	push   eax
c0010550:	e8 33 df ff ff       	call   c000e488 <Device::~Device()>
c0010555:	83 c4 10             	add    esp,0x10
c0010558:	90                   	nop
c0010559:	83 c4 0c             	add    esp,0xc
c001055c:	c3                   	ret    
c001055d:	90                   	nop

c001055e <LogicalDisk::~LogicalDisk()>:
c001055e:	83 ec 0c             	sub    esp,0xc
c0010561:	83 ec 0c             	sub    esp,0xc
c0010564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010568:	e8 cd ff ff ff       	call   c001053a <LogicalDisk::~LogicalDisk()>
c001056d:	83 c4 10             	add    esp,0x10
c0010570:	83 ec 08             	sub    esp,0x8
c0010573:	68 74 01 00 00       	push   0x174
c0010578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057c:	e8 e5 c9 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0010581:	83 c4 10             	add    esp,0x10
c0010584:	83 c4 0c             	add    esp,0xc
c0010587:	c3                   	ret    

c0010588 <LogicalDisk::open(int, int, void*)>:
c0010588:	83 ec 18             	sub    esp,0x18
c001058b:	68 a4 57 02 c0       	push   0xc00257a4
c0010590:	e8 50 4a 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c0010595:	83 c8 ff             	or     eax,0xffffffff
c0010598:	83 c4 1c             	add    esp,0x1c
c001059b:	c3                   	ret    

c001059c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001059c:	53                   	push   ebx
c001059d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00105a9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00105af:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00105b5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00105bb:	77 10                	ja     c00105cd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00105bd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00105c3:	89 d3                	mov    ebx,edx
c00105c5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00105cb:	72 05                	jb     c00105d2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00105cd:	83 c8 ff             	or     eax,0xffffffff
c00105d0:	89 c2                	mov    edx,eax
c00105d2:	5b                   	pop    ebx
c00105d3:	c3                   	ret    

c00105d4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00105d4:	56                   	push   esi
c00105d5:	83 c8 ff             	or     eax,0xffffffff
c00105d8:	53                   	push   ebx
c00105d9:	89 c2                	mov    edx,eax
c00105db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00105df:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00105e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105e7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00105ed:	77 27                	ja     c0010616 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00105ef:	89 d8                	mov    eax,ebx
c00105f1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00105f7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00105fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010602:	89 c2                	mov    edx,eax
c0010604:	73 10                	jae    c0010616 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010606:	89 c8                	mov    eax,ecx
c0010608:	89 da                	mov    edx,ebx
c001060a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010610:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0010616:	5b                   	pop    ebx
c0010617:	5e                   	pop    esi
c0010618:	c3                   	ret    
c0010619:	90                   	nop

c001061a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001061a:	83 ec 1c             	sub    esp,0x1c
c001061d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010621:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010625:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010629:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001062d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010631:	89 04 24             	mov    DWORD PTR [esp],eax
c0010634:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010638:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001063c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010640:	83 ec 08             	sub    esp,0x8
c0010643:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010647:	50                   	push   eax
c0010648:	e8 71 e1 ff ff       	call   c000e7be <Device::Device(char const*)>
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	ba 48 58 02 c0       	mov    edx,0xc0025848
c0010655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010659:	89 10                	mov    DWORD PTR [eax],edx
c001065b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001065f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001066a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010675:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001067f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010683:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010687:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001068b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010691:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010697:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001069b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001069e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106a2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00106a8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00106ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00106b6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00106bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106c0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00106ca:	90                   	nop
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	c3                   	ret    
c00106cf:	90                   	nop

c00106d0 <LogicalDisk::assignDriveLetter()>:
c00106d0:	55                   	push   ebp
c00106d1:	57                   	push   edi
c00106d2:	56                   	push   esi
c00106d3:	53                   	push   ebx
c00106d4:	83 ec 14             	sub    esp,0x14
c00106d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00106db:	8b 3d 20 8e 02 c0    	mov    edi,DWORD PTR ds:0xc0028e20
c00106e1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00106e7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00106eb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00106f1:	8b 3d 24 8e 02 c0    	mov    edi,DWORD PTR ds:0xc0028e24
c00106f7:	3c 01                	cmp    al,0x1
c00106f9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00106fd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010701:	19 c0                	sbb    eax,eax
c0010703:	83 e0 02             	and    eax,0x2
c0010706:	83 c0 41             	add    eax,0x41
c0010709:	0f be e8             	movsx  ebp,al
c001070c:	3c 43                	cmp    al,0x43
c001070e:	75 10                	jne    c0010720 <LogicalDisk::assignDriveLetter()+0x50>
c0010710:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010717:	75 5d                	jne    c0010776 <LogicalDisk::assignDriveLetter()+0xa6>
c0010719:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001071e:	75 56                	jne    c0010776 <LogicalDisk::assignDriveLetter()+0xa6>
c0010720:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010723:	ba 01 00 00 00       	mov    edx,0x1
c0010728:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001072c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010730:	d3 e2                	shl    edx,cl
c0010732:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010736:	89 d7                	mov    edi,edx
c0010738:	89 d6                	mov    esi,edx
c001073a:	c1 ff 1f             	sar    edi,0x1f
c001073d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010741:	21 f9                	and    ecx,edi
c0010743:	09 d1                	or     ecx,edx
c0010745:	75 2f                	jne    c0010776 <LogicalDisk::assignDriveLetter()+0xa6>
c0010747:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001074b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010755:	09 f2                	or     edx,esi
c0010757:	89 15 20 8e 02 c0    	mov    DWORD PTR ds:0xc0028e20,edx
c001075d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010761:	09 fa                	or     edx,edi
c0010763:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010767:	89 15 24 8e 02 c0    	mov    DWORD PTR ds:0xc0028e24,edx
c001076d:	89 1c bd 40 8e 02 c0 	mov    DWORD PTR [edi*4-0x3ffd71c0],ebx
c0010774:	eb 08                	jmp    c001077e <LogicalDisk::assignDriveLetter()+0xae>
c0010776:	45                   	inc    ebp
c0010777:	40                   	inc    eax
c0010778:	3c 5b                	cmp    al,0x5b
c001077a:	75 90                	jne    c001070c <LogicalDisk::assignDriveLetter()+0x3c>
c001077c:	31 c0                	xor    eax,eax
c001077e:	83 c4 14             	add    esp,0x14
c0010781:	5b                   	pop    ebx
c0010782:	5e                   	pop    esi
c0010783:	5f                   	pop    edi
c0010784:	5d                   	pop    ebp
c0010785:	c3                   	ret    

c0010786 <LogicalDisk::mount()>:
c0010786:	56                   	push   esi
c0010787:	53                   	push   ebx
c0010788:	83 ec 1c             	sub    esp,0x1c
c001078b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001078f:	8b 1d b4 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289b4
c0010795:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001079c:	50                   	push   eax
c001079d:	68 c8 57 02 c0       	push   0xc00257c8
c00107a2:	e8 a0 c8 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00107a7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00107b1:	83 c4 10             	add    esp,0x10
c00107b4:	85 db                	test   ebx,ebx
c00107b6:	74 4e                	je     c0010806 <LogicalDisk::mount()+0x80>
c00107b8:	83 ec 0c             	sub    esp,0xc
c00107bb:	68 e9 57 02 c0       	push   0xc00257e9
c00107c0:	e8 82 c8 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00107c5:	83 c4 0c             	add    esp,0xc
c00107c8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00107cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107d1:	83 e8 41             	sub    eax,0x41
c00107d4:	50                   	push   eax
c00107d5:	56                   	push   esi
c00107d6:	53                   	push   ebx
c00107d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00107da:	83 c4 10             	add    esp,0x10
c00107dd:	84 c0                	test   al,al
c00107df:	74 20                	je     c0010801 <LogicalDisk::mount()+0x7b>
c00107e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00107e5:	83 ec 0c             	sub    esp,0xc
c00107e8:	68 05 58 02 c0       	push   0xc0025805
c00107ed:	e8 55 c8 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00107f2:	83 c4 10             	add    esp,0x10
c00107f5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00107fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00107ff:	eb 07                	jmp    c0010808 <LogicalDisk::mount()+0x82>
c0010801:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010804:	eb ae                	jmp    c00107b4 <LogicalDisk::mount()+0x2e>
c0010806:	31 c0                	xor    eax,eax
c0010808:	83 c4 14             	add    esp,0x14
c001080b:	5b                   	pop    ebx
c001080c:	5e                   	pop    esi
c001080d:	c3                   	ret    

c001080e <LogicalDisk::unmount()>:
c001080e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010812:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001081c:	c3                   	ret    
c001081d:	90                   	nop

c001081e <LogicalDisk::eject()>:
c001081e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010822:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010828:	8b 10                	mov    edx,DWORD PTR [eax]
c001082a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001082e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010831:	90                   	nop

c0010832 <LogicalDisk::unassignDriveLetter()>:
c0010832:	57                   	push   edi
c0010833:	56                   	push   esi
c0010834:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010838:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001083f:	84 c9                	test   cl,cl
c0010841:	75 0f                	jne    c0010852 <LogicalDisk::unassignDriveLetter()+0x20>
c0010843:	c7 44 24 0c 1e 58 02 c0 	mov    DWORD PTR [esp+0xc],0xc002581e
c001084b:	5e                   	pop    esi
c001084c:	5f                   	pop    edi
c001084d:	e9 93 47 00 00       	jmp    c0014fe5 <Krnl::panic(char const*)>
c0010852:	83 e9 41             	sub    ecx,0x41
c0010855:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001085c:	b8 01 00 00 00       	mov    eax,0x1
c0010861:	c7 04 8d 40 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd71c0],0x0
c001086c:	d3 e0                	shl    eax,cl
c001086e:	89 c7                	mov    edi,eax
c0010870:	f7 d0                	not    eax
c0010872:	c1 ff 1f             	sar    edi,0x1f
c0010875:	21 05 20 8e 02 c0    	and    DWORD PTR ds:0xc0028e20,eax
c001087b:	89 fe                	mov    esi,edi
c001087d:	f7 d6                	not    esi
c001087f:	21 35 24 8e 02 c0    	and    DWORD PTR ds:0xc0028e24,esi
c0010885:	5e                   	pop    esi
c0010886:	5f                   	pop    edi
c0010887:	c3                   	ret    

c0010888 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010888:	57                   	push   edi
c0010889:	56                   	push   esi
c001088a:	53                   	push   ebx
c001088b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001088f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010893:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010897:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001089b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00108a1:	77 41                	ja     c00108e4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00108a3:	99                   	cdq    
c00108a4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00108aa:	01 c8                	add    eax,ecx
c00108ac:	11 da                	adc    edx,ebx
c00108ae:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00108b4:	19 d7                	sbb    edi,edx
c00108b6:	72 33                	jb     c00108eb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00108b8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00108be:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00108c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00108c8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00108cc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00108d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00108d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108dc:	5b                   	pop    ebx
c00108dd:	5e                   	pop    esi
c00108de:	5f                   	pop    edi
c00108df:	e9 f2 0a 00 00       	jmp    c00113d6 <VCache::read(unsigned long long, int, void*)>
c00108e4:	b8 05 00 00 00       	mov    eax,0x5
c00108e9:	eb 05                	jmp    c00108f0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00108eb:	b8 07 00 00 00       	mov    eax,0x7
c00108f0:	5b                   	pop    ebx
c00108f1:	5e                   	pop    esi
c00108f2:	5f                   	pop    edi
c00108f3:	c3                   	ret    

c00108f4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00108f4:	57                   	push   edi
c00108f5:	56                   	push   esi
c00108f6:	53                   	push   ebx
c00108f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00108fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108ff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010903:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010907:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001090d:	77 41                	ja     c0010950 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001090f:	99                   	cdq    
c0010910:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010916:	01 c8                	add    eax,ecx
c0010918:	11 da                	adc    edx,ebx
c001091a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010920:	19 d7                	sbb    edi,edx
c0010922:	72 33                	jb     c0010957 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010924:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001092a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010930:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010934:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010938:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001093e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010944:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010948:	5b                   	pop    ebx
c0010949:	5e                   	pop    esi
c001094a:	5f                   	pop    edi
c001094b:	e9 8c 09 00 00       	jmp    c00112dc <VCache::write(unsigned long long, int, void*)>
c0010950:	b8 05 00 00 00       	mov    eax,0x5
c0010955:	eb 05                	jmp    c001095c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010957:	b8 07 00 00 00       	mov    eax,0x7
c001095c:	5b                   	pop    ebx
c001095d:	5e                   	pop    esi
c001095e:	5f                   	pop    edi
c001095f:	c3                   	ret    

c0010960 <Mouse::Mouse(char const*)>:
c0010960:	83 ec 0c             	sub    esp,0xc
c0010963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010967:	83 ec 08             	sub    esp,0x8
c001096a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001096e:	50                   	push   eax
c001096f:	e8 4a de ff ff       	call   c000e7be <Device::Device(char const*)>
c0010974:	83 c4 10             	add    esp,0x10
c0010977:	ba 74 58 02 c0       	mov    edx,0xc0025874
c001097c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010980:	89 10                	mov    DWORD PTR [eax],edx
c0010982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010986:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010990:	90                   	nop
c0010991:	83 c4 0c             	add    esp,0xc
c0010994:	c3                   	ret    
c0010995:	90                   	nop
c0010996:	66 90                	xchg   ax,ax

c0010998 <Mouse::~Mouse()>:
c0010998:	83 ec 0c             	sub    esp,0xc
c001099b:	ba 74 58 02 c0       	mov    edx,0xc0025874
c00109a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a4:	89 10                	mov    DWORD PTR [eax],edx
c00109a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109aa:	83 ec 0c             	sub    esp,0xc
c00109ad:	50                   	push   eax
c00109ae:	e8 d5 da ff ff       	call   c000e488 <Device::~Device()>
c00109b3:	83 c4 10             	add    esp,0x10
c00109b6:	90                   	nop
c00109b7:	83 c4 0c             	add    esp,0xc
c00109ba:	c3                   	ret    
c00109bb:	90                   	nop

c00109bc <Mouse::~Mouse()>:
c00109bc:	83 ec 0c             	sub    esp,0xc
c00109bf:	83 ec 0c             	sub    esp,0xc
c00109c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109c6:	e8 cd ff ff ff       	call   c0010998 <Mouse::~Mouse()>
c00109cb:	83 c4 10             	add    esp,0x10
c00109ce:	83 ec 08             	sub    esp,0x8
c00109d1:	68 58 01 00 00       	push   0x158
c00109d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109da:	e8 87 c5 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00109df:	83 c4 10             	add    esp,0x10
c00109e2:	83 c4 0c             	add    esp,0xc
c00109e5:	c3                   	ret    

c00109e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00109e6:	55                   	push   ebp
c00109e7:	57                   	push   edi
c00109e8:	56                   	push   esi
c00109e9:	53                   	push   ebx
c00109ea:	81 ec 28 01 00 00    	sub    esp,0x128
c00109f0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00109f7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00109fe:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010a05:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010a0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010a10:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010a14:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010a1b:	e8 9a de ff ff       	call   c000e8ba <Device::getName()>
c0010a20:	5a                   	pop    edx
c0010a21:	59                   	pop    ecx
c0010a22:	50                   	push   eax
c0010a23:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010a27:	55                   	push   ebp
c0010a28:	e8 13 fd fe ff       	call   c0000740 <strcpy>
c0010a2d:	5b                   	pop    ebx
c0010a2e:	58                   	pop    eax
c0010a2f:	68 98 58 02 c0       	push   0xc0025898
c0010a34:	55                   	push   ebp
c0010a35:	e8 46 fe fe ff       	call   c0000880 <strcat>
c0010a3a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010a41:	e8 15 93 ff ff       	call   c0009d5b <malloc>
c0010a46:	83 c4 0c             	add    esp,0xc
c0010a49:	89 c3                	mov    ebx,eax
c0010a4b:	57                   	push   edi
c0010a4c:	56                   	push   esi
c0010a4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a55:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010a5c:	55                   	push   ebp
c0010a5d:	50                   	push   eax
c0010a5e:	e8 b7 fb ff ff       	call   c001061a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010a63:	83 c4 14             	add    esp,0x14
c0010a66:	53                   	push   ebx
c0010a67:	e8 64 fc ff ff       	call   c00106d0 <LogicalDisk::assignDriveLetter()>
c0010a6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a6f:	e8 12 fd ff ff       	call   c0010786 <LogicalDisk::mount()>
c0010a74:	58                   	pop    eax
c0010a75:	5a                   	pop    edx
c0010a76:	53                   	push   ebx
c0010a77:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010a7e:	e8 37 db ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0010a83:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010a89:	5b                   	pop    ebx
c0010a8a:	5e                   	pop    esi
c0010a8b:	5f                   	pop    edi
c0010a8c:	5d                   	pop    ebp
c0010a8d:	c3                   	ret    

c0010a8e <createPartitionsForDisk(PhysicalDisk*)>:
c0010a8e:	55                   	push   ebp
c0010a8f:	57                   	push   edi
c0010a90:	56                   	push   esi
c0010a91:	53                   	push   ebx
c0010a92:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010a98:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010a9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010aa5:	3d 00 02 00 00       	cmp    eax,0x200
c0010aaa:	74 27                	je     c0010ad3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010aac:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010ab2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010ab8:	83 ec 10             	sub    esp,0x10
c0010abb:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010abf:	99                   	cdq    
c0010ac0:	c1 e6 0a             	shl    esi,0xa
c0010ac3:	52                   	push   edx
c0010ac4:	89 fd                	mov    ebp,edi
c0010ac6:	50                   	push   eax
c0010ac7:	55                   	push   ebp
c0010ac8:	56                   	push   esi
c0010ac9:	e8 06 22 01 00       	call   c0022cd4 <__udivdi3>
c0010ace:	e9 b1 00 00 00       	jmp    c0010b84 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010ad3:	83 ec 0c             	sub    esp,0xc
c0010ad6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ad8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010adc:	56                   	push   esi
c0010add:	6a 01                	push   0x1
c0010adf:	6a 00                	push   0x0
c0010ae1:	6a 00                	push   0x0
c0010ae3:	53                   	push   ebx
c0010ae4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010ae7:	83 c4 20             	add    esp,0x20
c0010aea:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010af2:	75 0a                	jne    c0010afe <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010af4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010afc:	74 2c                	je     c0010b2a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010afe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010b04:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010b0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010b10:	83 ec 10             	sub    esp,0x10
c0010b13:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010b17:	89 f7                	mov    edi,esi
c0010b19:	c1 e0 0a             	shl    eax,0xa
c0010b1c:	c1 ff 1f             	sar    edi,0x1f
c0010b1f:	57                   	push   edi
c0010b20:	56                   	push   esi
c0010b21:	52                   	push   edx
c0010b22:	50                   	push   eax
c0010b23:	e8 ac 21 01 00       	call   c0022cd4 <__udivdi3>
c0010b28:	eb 5a                	jmp    c0010b84 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010b2a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010b31:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010b38:	83 e1 7f             	and    ecx,0x7f
c0010b3b:	83 e0 7f             	and    eax,0x7f
c0010b3e:	01 c1                	add    ecx,eax
c0010b40:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010b47:	83 e0 7f             	and    eax,0x7f
c0010b4a:	01 c1                	add    ecx,eax
c0010b4c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010b53:	83 e0 7f             	and    eax,0x7f
c0010b56:	00 c1                	add    cl,al
c0010b58:	74 41                	je     c0010b9b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010b5a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010b60:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010b66:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010b6c:	83 ec 10             	sub    esp,0x10
c0010b6f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010b73:	89 f7                	mov    edi,esi
c0010b75:	c1 e0 0a             	shl    eax,0xa
c0010b78:	c1 ff 1f             	sar    edi,0x1f
c0010b7b:	57                   	push   edi
c0010b7c:	56                   	push   esi
c0010b7d:	52                   	push   edx
c0010b7e:	50                   	push   eax
c0010b7f:	e8 50 21 01 00       	call   c0022cd4 <__udivdi3>
c0010b84:	83 c4 14             	add    esp,0x14
c0010b87:	52                   	push   edx
c0010b88:	50                   	push   eax
c0010b89:	6a 00                	push   0x0
c0010b8b:	6a 00                	push   0x0
c0010b8d:	53                   	push   ebx
c0010b8e:	e8 53 fe ff ff       	call   c00109e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010b93:	83 c4 20             	add    esp,0x20
c0010b96:	e9 79 01 00 00       	jmp    c0010d14 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010b9b:	89 f0                	mov    eax,esi
c0010b9d:	31 f6                	xor    esi,esi
c0010b9f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010ba6:	75 02                	jne    c0010baa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010ba8:	89 f1                	mov    ecx,esi
c0010baa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010bb1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010bb8:	c1 e2 08             	shl    edx,0x8
c0010bbb:	c1 e7 10             	shl    edi,0x10
c0010bbe:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010bc6:	09 fa                	or     edx,edi
c0010bc8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010bd0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010bd7:	83 c0 10             	add    eax,0x10
c0010bda:	09 fa                	or     edx,edi
c0010bdc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010be3:	c1 e7 18             	shl    edi,0x18
c0010be6:	09 fa                	or     edx,edi
c0010be8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010bef:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010bf3:	c1 e7 10             	shl    edi,0x10
c0010bf6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010bfd:	c1 e2 08             	shl    edx,0x8
c0010c00:	09 fa                	or     edx,edi
c0010c02:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010c09:	09 fa                	or     edx,edi
c0010c0b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010c12:	c1 e7 18             	shl    edi,0x18
c0010c15:	09 fa                	or     edx,edi
c0010c17:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010c1b:	46                   	inc    esi
c0010c1c:	83 fe 04             	cmp    esi,0x4
c0010c1f:	0f 85 7a ff ff ff    	jne    c0010b9f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c29:	83 f0 01             	xor    eax,0x1
c0010c2c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010c30:	75 57                	jne    c0010c89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010c32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010c36:	83 f0 01             	xor    eax,0x1
c0010c39:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010c3d:	75 4a                	jne    c0010c89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010c3f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010c43:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010c4b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010c53:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010c59:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010c5f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010c65:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010c69:	89 f7                	mov    edi,esi
c0010c6b:	c1 e0 0a             	shl    eax,0xa
c0010c6e:	c1 ff 1f             	sar    edi,0x1f
c0010c71:	57                   	push   edi
c0010c72:	56                   	push   esi
c0010c73:	52                   	push   edx
c0010c74:	50                   	push   eax
c0010c75:	e8 5a 20 01 00       	call   c0022cd4 <__udivdi3>
c0010c7a:	83 c4 10             	add    esp,0x10
c0010c7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010c81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010c85:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010c89:	84 c9                	test   cl,cl
c0010c8b:	74 53                	je     c0010ce0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010c8d:	0f b6 c9             	movzx  ecx,cl
c0010c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010c98:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c9c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010ca0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ca4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010ca8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010cac:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010cb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010cb4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010cb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010cc0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010cc4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010cc8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010ccc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010cd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010cd4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010cd8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010cdc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010ce0:	31 ed                	xor    ebp,ebp
c0010ce2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010ce6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010cea:	89 f8                	mov    eax,edi
c0010cec:	09 f0                	or     eax,esi
c0010cee:	74 1e                	je     c0010d0e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010cf0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010cf4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010cf8:	89 d1                	mov    ecx,edx
c0010cfa:	09 c1                	or     ecx,eax
c0010cfc:	74 10                	je     c0010d0e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010cfe:	83 ec 0c             	sub    esp,0xc
c0010d01:	57                   	push   edi
c0010d02:	56                   	push   esi
c0010d03:	52                   	push   edx
c0010d04:	50                   	push   eax
c0010d05:	53                   	push   ebx
c0010d06:	e8 db fc ff ff       	call   c00109e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010d0b:	83 c4 20             	add    esp,0x20
c0010d0e:	45                   	inc    ebp
c0010d0f:	83 fd 04             	cmp    ebp,0x4
c0010d12:	75 ce                	jne    c0010ce2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010d14:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010d1a:	5b                   	pop    ebx
c0010d1b:	5e                   	pop    esi
c0010d1c:	5f                   	pop    edi
c0010d1d:	5d                   	pop    ebp
c0010d1e:	c3                   	ret    
c0010d1f:	90                   	nop

c0010d20 <Serial::Serial(char const*)>:
c0010d20:	83 ec 0c             	sub    esp,0xc
c0010d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d27:	83 ec 08             	sub    esp,0x8
c0010d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d2e:	50                   	push   eax
c0010d2f:	e8 8a da ff ff       	call   c000e7be <Device::Device(char const*)>
c0010d34:	83 c4 10             	add    esp,0x10
c0010d37:	ba ac 58 02 c0       	mov    edx,0xc00258ac
c0010d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d40:	89 10                	mov    DWORD PTR [eax],edx
c0010d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d46:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010d50:	90                   	nop
c0010d51:	83 c4 0c             	add    esp,0xc
c0010d54:	c3                   	ret    
c0010d55:	90                   	nop
c0010d56:	66 90                	xchg   ax,ax

c0010d58 <Serial::~Serial()>:
c0010d58:	83 ec 0c             	sub    esp,0xc
c0010d5b:	ba ac 58 02 c0       	mov    edx,0xc00258ac
c0010d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d64:	89 10                	mov    DWORD PTR [eax],edx
c0010d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d6a:	83 ec 0c             	sub    esp,0xc
c0010d6d:	50                   	push   eax
c0010d6e:	e8 15 d7 ff ff       	call   c000e488 <Device::~Device()>
c0010d73:	83 c4 10             	add    esp,0x10
c0010d76:	90                   	nop
c0010d77:	83 c4 0c             	add    esp,0xc
c0010d7a:	c3                   	ret    
c0010d7b:	90                   	nop

c0010d7c <Serial::~Serial()>:
c0010d7c:	83 ec 0c             	sub    esp,0xc
c0010d7f:	83 ec 0c             	sub    esp,0xc
c0010d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d86:	e8 cd ff ff ff       	call   c0010d58 <Serial::~Serial()>
c0010d8b:	83 c4 10             	add    esp,0x10
c0010d8e:	83 ec 08             	sub    esp,0x8
c0010d91:	68 58 01 00 00       	push   0x158
c0010d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d9a:	e8 c7 c1 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0010d9f:	83 c4 10             	add    esp,0x10
c0010da2:	83 c4 0c             	add    esp,0xc
c0010da5:	c3                   	ret    
c0010da6:	66 90                	xchg   ax,ax

c0010da8 <Timer::Timer(char const*)>:
c0010da8:	83 ec 0c             	sub    esp,0xc
c0010dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010daf:	83 ec 08             	sub    esp,0x8
c0010db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db6:	50                   	push   eax
c0010db7:	e8 02 da ff ff       	call   c000e7be <Device::Device(char const*)>
c0010dbc:	83 c4 10             	add    esp,0x10
c0010dbf:	ba f0 58 02 c0       	mov    edx,0xc00258f0
c0010dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc8:	89 10                	mov    DWORD PTR [eax],edx
c0010dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dce:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010dd8:	90                   	nop
c0010dd9:	83 c4 0c             	add    esp,0xc
c0010ddc:	c3                   	ret    
c0010ddd:	90                   	nop
c0010dde:	66 90                	xchg   ax,ax

c0010de0 <Timer::~Timer()>:
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	ba f0 58 02 c0       	mov    edx,0xc00258f0
c0010de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dec:	89 10                	mov    DWORD PTR [eax],edx
c0010dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df2:	83 ec 0c             	sub    esp,0xc
c0010df5:	50                   	push   eax
c0010df6:	e8 8d d6 ff ff       	call   c000e488 <Device::~Device()>
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	90                   	nop
c0010dff:	83 c4 0c             	add    esp,0xc
c0010e02:	c3                   	ret    
c0010e03:	90                   	nop

c0010e04 <Timer::~Timer()>:
c0010e04:	83 ec 0c             	sub    esp,0xc
c0010e07:	83 ec 0c             	sub    esp,0xc
c0010e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0e:	e8 cd ff ff ff       	call   c0010de0 <Timer::~Timer()>
c0010e13:	83 c4 10             	add    esp,0x10
c0010e16:	83 ec 08             	sub    esp,0x8
c0010e19:	68 5c 01 00 00       	push   0x15c
c0010e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e22:	e8 3f c1 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0010e27:	83 c4 10             	add    esp,0x10
c0010e2a:	83 c4 0c             	add    esp,0xc
c0010e2d:	c3                   	ret    

c0010e2e <Timer::read()>:
c0010e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e32:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010e38:	c3                   	ret    

c0010e39 <timerHandler(unsigned int)>:
c0010e39:	56                   	push   esi
c0010e3a:	53                   	push   ebx
c0010e3b:	51                   	push   ecx
c0010e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e40:	01 05 ac 8e 02 c0    	add    DWORD PTR ds:0xc0028eac,eax
c0010e46:	80 3d 8d 88 02 c0 00 	cmp    BYTE PTR ds:0xc002888d,0x0
c0010e4d:	0f 84 49 01 00 00    	je     c0010f9c <timerHandler(unsigned int)+0x163>
c0010e53:	fa                   	cli    
c0010e54:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0010e5a:	83 ec 0c             	sub    esp,0xc
c0010e5d:	ff 05 a4 9d 02 c0    	inc    DWORD PTR ds:0xc0029da4
c0010e63:	68 b8 9d 02 c0       	push   0xc0029db8
c0010e68:	e8 37 24 01 00       	call   c00232a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010e6d:	83 c4 10             	add    esp,0x10
c0010e70:	84 c0                	test   al,al
c0010e72:	0f 85 a0 00 00 00    	jne    c0010f18 <timerHandler(unsigned int)+0xdf>
c0010e78:	83 ec 0c             	sub    esp,0xc
c0010e7b:	68 b8 9d 02 c0       	push   0xc0029db8
c0010e80:	e8 3b 24 01 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010e85:	83 c4 10             	add    esp,0x10
c0010e88:	89 c6                	mov    esi,eax
c0010e8a:	66 90                	xchg   ax,ax
c0010e8c:	83 ec 0c             	sub    esp,0xc
c0010e8f:	68 b8 9d 02 c0       	push   0xc0029db8
c0010e94:	e8 27 24 01 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010e99:	c7 04 24 b8 9d 02 c0 	mov    DWORD PTR [esp],0xc0029db8
c0010ea0:	89 c3                	mov    ebx,eax
c0010ea2:	e8 21 24 01 00       	call   c00232c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010ea7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010eaa:	83 c4 10             	add    esp,0x10
c0010ead:	3b 05 ac 8e 02 c0    	cmp    eax,DWORD PTR ds:0xc0028eac
c0010eb3:	77 23                	ja     c0010ed8 <timerHandler(unsigned int)+0x9f>
c0010eb5:	83 ec 0c             	sub    esp,0xc
c0010eb8:	53                   	push   ebx
c0010eb9:	e8 ee 81 00 00       	call   c00190ac <unblockTask(ThreadControlBlock*)>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	39 de                	cmp    esi,ebx
c0010ec3:	75 27                	jne    c0010eec <timerHandler(unsigned int)+0xb3>
c0010ec5:	83 ec 0c             	sub    esp,0xc
c0010ec8:	68 b8 9d 02 c0       	push   0xc0029db8
c0010ecd:	e8 ee 23 01 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010ed2:	89 c6                	mov    esi,eax
c0010ed4:	eb 12                	jmp    c0010ee8 <timerHandler(unsigned int)+0xaf>
c0010ed6:	66 90                	xchg   ax,ax
c0010ed8:	52                   	push   edx
c0010ed9:	52                   	push   edx
c0010eda:	53                   	push   ebx
c0010edb:	68 b8 9d 02 c0       	push   0xc0029db8
c0010ee0:	e8 9b 24 01 00       	call   c0023380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ee8:	83 c4 10             	add    esp,0x10
c0010eeb:	90                   	nop
c0010eec:	83 ec 0c             	sub    esp,0xc
c0010eef:	68 b8 9d 02 c0       	push   0xc0029db8
c0010ef4:	e8 ab 23 01 00       	call   c00232a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010ef9:	83 c4 10             	add    esp,0x10
c0010efc:	84 c0                	test   al,al
c0010efe:	75 18                	jne    c0010f18 <timerHandler(unsigned int)+0xdf>
c0010f00:	83 ec 0c             	sub    esp,0xc
c0010f03:	68 b8 9d 02 c0       	push   0xc0029db8
c0010f08:	e8 b3 23 01 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010f0d:	83 c4 10             	add    esp,0x10
c0010f10:	39 f0                	cmp    eax,esi
c0010f12:	0f 85 74 ff ff ff    	jne    c0010e8c <timerHandler(unsigned int)+0x53>
c0010f18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f1d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010f21:	74 41                	je     c0010f64 <timerHandler(unsigned int)+0x12b>
c0010f23:	80 3d 8c 88 02 c0 00 	cmp    BYTE PTR ds:0xc002888c,0x0
c0010f2a:	74 38                	je     c0010f64 <timerHandler(unsigned int)+0x12b>
c0010f2c:	fa                   	cli    
c0010f2d:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0010f33:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0010f38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010f3e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010f41:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010f47:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010f4a:	72 08                	jb     c0010f54 <timerHandler(unsigned int)+0x11b>
c0010f4c:	e8 9f 7c 00 00       	call   c0018bf0 <schedule()>
c0010f51:	8d 76 00             	lea    esi,[esi+0x0]
c0010f54:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0010f59:	48                   	dec    eax
c0010f5a:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0010f5f:	75 03                	jne    c0010f64 <timerHandler(unsigned int)+0x12b>
c0010f61:	fb                   	sti    
c0010f62:	66 90                	xchg   ax,ax
c0010f64:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c0010f69:	48                   	dec    eax
c0010f6a:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c0010f6f:	75 1b                	jne    c0010f8c <timerHandler(unsigned int)+0x153>
c0010f71:	83 3d a0 9d 02 c0 00 	cmp    DWORD PTR ds:0xc0029da0,0x0
c0010f78:	74 12                	je     c0010f8c <timerHandler(unsigned int)+0x153>
c0010f7a:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c0010f84:	e8 67 7c 00 00       	call   c0018bf0 <schedule()>
c0010f89:	8d 76 00             	lea    esi,[esi+0x0]
c0010f8c:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0010f91:	48                   	dec    eax
c0010f92:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0010f97:	75 03                	jne    c0010f9c <timerHandler(unsigned int)+0x163>
c0010f99:	fb                   	sti    
c0010f9a:	66 90                	xchg   ax,ax
c0010f9c:	58                   	pop    eax
c0010f9d:	5b                   	pop    ebx
c0010f9e:	5e                   	pop    esi
c0010f9f:	c3                   	ret    

c0010fa0 <setupTimer(int)>:
c0010fa0:	57                   	push   edi
c0010fa1:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0010fa6:	56                   	push   esi
c0010fa7:	53                   	push   ebx
c0010fa8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010fb2:	83 ec 0c             	sub    esp,0xc
c0010fb5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010fbb:	e8 fa d8 ff ff       	call   c000e8ba <Device::getName()>
c0010fc0:	83 c4 10             	add    esp,0x10
c0010fc3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010fc6:	0f 85 94 00 00 00    	jne    c0011060 <setupTimer(int)+0xc0>
c0010fcc:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0010fd1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010fd8:	0f 84 82 00 00 00    	je     c0011060 <setupTimer(int)+0xc0>
c0010fde:	83 ec 0c             	sub    esp,0xc
c0010fe1:	68 5c 01 00 00       	push   0x15c
c0010fe6:	e8 70 8d ff ff       	call   c0009d5b <malloc>
c0010feb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fee:	89 c3                	mov    ebx,eax
c0010ff0:	e8 af 18 01 00       	call   c00228a4 <PIT::PIT()>
c0010ff5:	59                   	pop    ecx
c0010ff6:	5f                   	pop    edi
c0010ff7:	53                   	push   ebx
c0010ff8:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c0010ffe:	e8 b7 d5 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0011003:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011005:	6a 00                	push   0x0
c0011007:	6a 00                	push   0x0
c0011009:	56                   	push   esi
c001100a:	53                   	push   ebx
c001100b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001100e:	83 c4 14             	add    esp,0x14
c0011011:	68 60 01 00 00       	push   0x160
c0011016:	e8 40 8d ff ff       	call   c0009d5b <malloc>
c001101b:	89 04 24             	mov    DWORD PTR [esp],eax
c001101e:	89 c7                	mov    edi,eax
c0011020:	e8 33 17 01 00       	call   c0022758 <APICTimer::APICTimer()>
c0011025:	6a 00                	push   0x0
c0011027:	6a 00                	push   0x0
c0011029:	56                   	push   esi
c001102a:	57                   	push   edi
c001102b:	e8 28 16 01 00       	call   c0022658 <APICTimer::open(int, int, void*)>
c0011030:	83 c4 20             	add    esp,0x20
c0011033:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011035:	6a 00                	push   0x0
c0011037:	6a 00                	push   0x0
c0011039:	6a 00                	push   0x0
c001103b:	53                   	push   ebx
c001103c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001103f:	58                   	pop    eax
c0011040:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0011045:	5a                   	pop    edx
c0011046:	57                   	push   edi
c0011047:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001104d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0011053:	e8 62 d5 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0011058:	83 c4 10             	add    esp,0x10
c001105b:	eb 37                	jmp    c0011094 <setupTimer(int)+0xf4>
c001105d:	8d 76 00             	lea    esi,[esi+0x0]
c0011060:	83 ec 0c             	sub    esp,0xc
c0011063:	68 5c 01 00 00       	push   0x15c
c0011068:	e8 ee 8c ff ff       	call   c0009d5b <malloc>
c001106d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011070:	89 c3                	mov    ebx,eax
c0011072:	e8 2d 18 01 00       	call   c00228a4 <PIT::PIT()>
c0011077:	58                   	pop    eax
c0011078:	5a                   	pop    edx
c0011079:	53                   	push   ebx
c001107a:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c0011080:	e8 35 d5 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0011085:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011087:	6a 00                	push   0x0
c0011089:	6a 00                	push   0x0
c001108b:	56                   	push   esi
c001108c:	53                   	push   ebx
c001108d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011090:	83 c4 20             	add    esp,0x20
c0011093:	90                   	nop
c0011094:	89 d8                	mov    eax,ebx
c0011096:	5b                   	pop    ebx
c0011097:	5e                   	pop    esi
c0011098:	5f                   	pop    edi
c0011099:	c3                   	ret    
c001109a:	66 90                	xchg   ax,ax

c001109c <VCache::VCache(PhysicalDisk*)>:
c001109c:	53                   	push   ebx
c001109d:	83 ec 18             	sub    esp,0x18
c00110a0:	ba 20 59 02 c0       	mov    edx,0xc0025920
c00110a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110a9:	89 10                	mov    DWORD PTR [eax],edx
c00110ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110af:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00110b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110ba:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00110c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110c5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00110cc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00110d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110d7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00110de:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00110e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110e9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00110f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110f4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00110f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110fc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0011103:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001110a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001110e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0011112:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011116:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001111a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001111e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011126:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001112d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0011135:	83 ec 0c             	sub    esp,0xc
c0011138:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001113c:	e8 1a 8c ff ff       	call   c0009d5b <malloc>
c0011141:	83 c4 10             	add    esp,0x10
c0011144:	89 c3                	mov    ebx,eax
c0011146:	83 ec 0c             	sub    esp,0xc
c0011149:	53                   	push   ebx
c001114a:	e8 71 78 00 00       	call   c00189c0 <Mutex::Mutex()>
c001114f:	83 c4 10             	add    esp,0x10
c0011152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011156:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0011159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001115d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011161:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011168:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001116f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011173:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0011179:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001117d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011180:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011184:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001118a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011190:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011194:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0011197:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001119a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001119e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00111a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00111a6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111ac:	05 00 01 00 00       	add    eax,0x100
c00111b1:	c1 e0 04             	shl    eax,0x4
c00111b4:	83 ec 0c             	sub    esp,0xc
c00111b7:	50                   	push   eax
c00111b8:	e8 9e 8b ff ff       	call   c0009d5b <malloc>
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	89 c2                	mov    edx,eax
c00111c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00111c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111cd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00111d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111d8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00111dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00111e0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111e6:	c1 e0 06             	shl    eax,0x6
c00111e9:	83 ec 0c             	sub    esp,0xc
c00111ec:	50                   	push   eax
c00111ed:	e8 69 8b ff ff       	call   c0009d5b <malloc>
c00111f2:	83 c4 10             	add    esp,0x10
c00111f5:	89 c2                	mov    edx,eax
c00111f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111fb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00111fe:	90                   	nop
c00111ff:	83 c4 18             	add    esp,0x18
c0011202:	5b                   	pop    ebx
c0011203:	c3                   	ret    

c0011204 <VCache::invalidateReadBuffer()>:
c0011204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011208:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001120e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011212:	c3                   	ret    
c0011213:	90                   	nop

c0011214 <VCache::writeWriteBuffer()>:
c0011214:	53                   	push   ebx
c0011215:	83 ec 08             	sub    esp,0x8
c0011218:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001121c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011220:	74 1e                	je     c0011240 <VCache::writeWriteBuffer()+0x2c>
c0011222:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011225:	83 ec 0c             	sub    esp,0xc
c0011228:	8b 10                	mov    edx,DWORD PTR [eax]
c001122a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001122d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011230:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011233:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011236:	50                   	push   eax
c0011237:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001123a:	83 c4 20             	add    esp,0x20
c001123d:	8d 76 00             	lea    esi,[esi+0x0]
c0011240:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0011247:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001124e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0011252:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0011259:	83 c4 08             	add    esp,0x8
c001125c:	5b                   	pop    ebx
c001125d:	c3                   	ret    
c001125e:	66 90                	xchg   ax,ax

c0011260 <VCache::~VCache()>:
c0011260:	83 ec 0c             	sub    esp,0xc
c0011263:	ba 20 59 02 c0       	mov    edx,0xc0025920
c0011268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126c:	89 10                	mov    DWORD PTR [eax],edx
c001126e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011272:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0011275:	84 c0                	test   al,al
c0011277:	74 0f                	je     c0011288 <VCache::~VCache()+0x28>
c0011279:	83 ec 0c             	sub    esp,0xc
c001127c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011280:	e8 8f ff ff ff       	call   c0011214 <VCache::writeWriteBuffer()>
c0011285:	83 c4 10             	add    esp,0x10
c0011288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001128c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001128f:	83 ec 0c             	sub    esp,0xc
c0011292:	50                   	push   eax
c0011293:	e8 d3 8a ff ff       	call   c0009d6b <free>
c0011298:	83 c4 10             	add    esp,0x10
c001129b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00112a2:	83 ec 0c             	sub    esp,0xc
c00112a5:	50                   	push   eax
c00112a6:	e8 c0 8a ff ff       	call   c0009d6b <free>
c00112ab:	83 c4 10             	add    esp,0x10
c00112ae:	90                   	nop
c00112af:	83 c4 0c             	add    esp,0xc
c00112b2:	c3                   	ret    
c00112b3:	90                   	nop

c00112b4 <VCache::~VCache()>:
c00112b4:	83 ec 0c             	sub    esp,0xc
c00112b7:	83 ec 0c             	sub    esp,0xc
c00112ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112be:	e8 9d ff ff ff       	call   c0011260 <VCache::~VCache()>
c00112c3:	83 c4 10             	add    esp,0x10
c00112c6:	83 ec 08             	sub    esp,0x8
c00112c9:	6a 44                	push   0x44
c00112cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cf:	e8 92 bc ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00112d4:	83 c4 10             	add    esp,0x10
c00112d7:	83 c4 0c             	add    esp,0xc
c00112da:	c3                   	ret    
c00112db:	90                   	nop

c00112dc <VCache::write(unsigned long long, int, void*)>:
c00112dc:	55                   	push   ebp
c00112dd:	31 c0                	xor    eax,eax
c00112df:	57                   	push   edi
c00112e0:	56                   	push   esi
c00112e1:	53                   	push   ebx
c00112e2:	83 ec 0c             	sub    esp,0xc
c00112e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112e9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00112ed:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00112f1:	8d 76 00             	lea    esi,[esi+0x0]
c00112f4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00112f8:	7d 1a                	jge    c0011314 <VCache::write(unsigned long long, int, void*)+0x38>
c00112fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00112fd:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011303:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011307:	0f af c8             	imul   ecx,eax
c001130a:	01 ca                	add    edx,ecx
c001130c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001130e:	40                   	inc    eax
c001130f:	eb e3                	jmp    c00112f4 <VCache::write(unsigned long long, int, void*)+0x18>
c0011311:	8d 76 00             	lea    esi,[esi+0x0]
c0011314:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011318:	74 0a                	je     c0011324 <VCache::write(unsigned long long, int, void*)+0x48>
c001131a:	53                   	push   ebx
c001131b:	e8 e4 fe ff ff       	call   c0011204 <VCache::invalidateReadBuffer()>
c0011320:	58                   	pop    eax
c0011321:	8d 76 00             	lea    esi,[esi+0x0]
c0011324:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011328:	74 5e                	je     c0011388 <VCache::write(unsigned long long, int, void*)+0xac>
c001132a:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001132d:	89 e8                	mov    eax,ebp
c001132f:	99                   	cdq    
c0011330:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0011333:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0011336:	89 c1                	mov    ecx,eax
c0011338:	89 d0                	mov    eax,edx
c001133a:	31 f1                	xor    ecx,esi
c001133c:	31 f8                	xor    eax,edi
c001133e:	09 c1                	or     ecx,eax
c0011340:	75 3a                	jne    c001137c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011342:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0011347:	75 33                	jne    c001137c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011349:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001134c:	89 ef                	mov    edi,ebp
c001134e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011354:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011358:	0f af f9             	imul   edi,ecx
c001135b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001135e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011360:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011363:	40                   	inc    eax
c0011364:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0011367:	83 f8 40             	cmp    eax,0x40
c001136a:	75 60                	jne    c00113cc <VCache::write(unsigned long long, int, void*)+0xf0>
c001136c:	83 ec 0c             	sub    esp,0xc
c001136f:	53                   	push   ebx
c0011370:	e8 9f fe ff ff       	call   c0011214 <VCache::writeWriteBuffer()>
c0011375:	83 c4 10             	add    esp,0x10
c0011378:	eb 52                	jmp    c00113cc <VCache::write(unsigned long long, int, void*)+0xf0>
c001137a:	66 90                	xchg   ax,ax
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	53                   	push   ebx
c0011380:	e8 8f fe ff ff       	call   c0011214 <VCache::writeWriteBuffer()>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001138b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0011390:	7f 22                	jg     c00113b4 <VCache::write(unsigned long long, int, void*)+0xd8>
c0011392:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0011395:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0011398:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001139c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00113a0:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00113a3:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00113a6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00113ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00113b2:	eb 18                	jmp    c00113cc <VCache::write(unsigned long long, int, void*)+0xf0>
c00113b4:	83 ec 0c             	sub    esp,0xc
c00113b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00113b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113c1:	57                   	push   edi
c00113c2:	56                   	push   esi
c00113c3:	50                   	push   eax
c00113c4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00113c7:	83 c4 20             	add    esp,0x20
c00113ca:	66 90                	xchg   ax,ax
c00113cc:	83 c4 0c             	add    esp,0xc
c00113cf:	31 c0                	xor    eax,eax
c00113d1:	5b                   	pop    ebx
c00113d2:	5e                   	pop    esi
c00113d3:	5f                   	pop    edi
c00113d4:	5d                   	pop    ebp
c00113d5:	c3                   	ret    

c00113d6 <VCache::read(unsigned long long, int, void*)>:
c00113d6:	55                   	push   ebp
c00113d7:	31 c0                	xor    eax,eax
c00113d9:	57                   	push   edi
c00113da:	56                   	push   esi
c00113db:	53                   	push   ebx
c00113dc:	83 ec 1c             	sub    esp,0x1c
c00113df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00113e3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00113e7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00113eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00113ef:	90                   	nop
c00113f0:	39 e8                	cmp    eax,ebp
c00113f2:	7d 18                	jge    c001140c <VCache::read(unsigned long long, int, void*)+0x36>
c00113f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00113f7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00113fd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011401:	0f af c8             	imul   ecx,eax
c0011404:	01 ca                	add    edx,ecx
c0011406:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011408:	40                   	inc    eax
c0011409:	eb e5                	jmp    c00113f0 <VCache::read(unsigned long long, int, void*)+0x1a>
c001140b:	90                   	nop
c001140c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011410:	74 0e                	je     c0011420 <VCache::read(unsigned long long, int, void*)+0x4a>
c0011412:	83 ec 0c             	sub    esp,0xc
c0011415:	53                   	push   ebx
c0011416:	e8 f9 fd ff ff       	call   c0011214 <VCache::writeWriteBuffer()>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	66 90                	xchg   ax,ax
c0011420:	83 fd 01             	cmp    ebp,0x1
c0011423:	0f 85 87 00 00 00    	jne    c00114b0 <VCache::read(unsigned long long, int, void*)+0xda>
c0011429:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001142c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011430:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0011437:	75 77                	jne    c00114b0 <VCache::read(unsigned long long, int, void*)+0xda>
c0011439:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001143c:	89 e9                	mov    ecx,ebp
c001143e:	f7 d9                	neg    ecx
c0011440:	89 c8                	mov    eax,ecx
c0011442:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011446:	c1 f8 1f             	sar    eax,0x1f
c0011449:	21 f1                	and    ecx,esi
c001144b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001144f:	89 c8                	mov    eax,ecx
c0011451:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011455:	21 f9                	and    ecx,edi
c0011457:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001145b:	89 ca                	mov    edx,ecx
c001145d:	74 0d                	je     c001146c <VCache::read(unsigned long long, int, void*)+0x96>
c001145f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011462:	75 08                	jne    c001146c <VCache::read(unsigned long long, int, void*)+0x96>
c0011464:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0011467:	74 27                	je     c0011490 <VCache::read(unsigned long long, int, void*)+0xba>
c0011469:	8d 76 00             	lea    esi,[esi+0x0]
c001146c:	83 ec 0c             	sub    esp,0xc
c001146f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0011473:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011477:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001147a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001147d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001147f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011482:	55                   	push   ebp
c0011483:	52                   	push   edx
c0011484:	50                   	push   eax
c0011485:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011489:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001148c:	83 c4 20             	add    esp,0x20
c001148f:	90                   	nop
c0011490:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011493:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011497:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001149d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00114a0:	48                   	dec    eax
c00114a1:	21 c6                	and    esi,eax
c00114a3:	0f af f1             	imul   esi,ecx
c00114a6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00114a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114ab:	eb 23                	jmp    c00114d0 <VCache::read(unsigned long long, int, void*)+0xfa>
c00114ad:	8d 76 00             	lea    esi,[esi+0x0]
c00114b0:	83 ec 0c             	sub    esp,0xc
c00114b3:	53                   	push   ebx
c00114b4:	e8 4b fd ff ff       	call   c0011204 <VCache::invalidateReadBuffer()>
c00114b9:	5a                   	pop    edx
c00114ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00114bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00114bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00114c3:	55                   	push   ebp
c00114c4:	57                   	push   edi
c00114c5:	56                   	push   esi
c00114c6:	50                   	push   eax
c00114c7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00114ca:	83 c4 20             	add    esp,0x20
c00114cd:	8d 76 00             	lea    esi,[esi+0x0]
c00114d0:	83 c4 1c             	add    esp,0x1c
c00114d3:	31 c0                	xor    eax,eax
c00114d5:	5b                   	pop    ebx
c00114d6:	5e                   	pop    esi
c00114d7:	5f                   	pop    edi
c00114d8:	5d                   	pop    ebp
c00114d9:	c3                   	ret    

c00114da <Video::putrect(int, int, int, int, unsigned int)>:
c00114da:	55                   	push   ebp
c00114db:	57                   	push   edi
c00114dc:	56                   	push   esi
c00114dd:	53                   	push   ebx
c00114de:	83 ec 1c             	sub    esp,0x1c
c00114e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00114e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114e9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00114ed:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00114f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00114f9:	01 df                	add    edi,ebx
c00114fb:	39 fb                	cmp    ebx,edi
c00114fd:	7d 1f                	jge    c001151e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00114ff:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011503:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0011507:	7d 12                	jge    c001151b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011509:	8b 16                	mov    edx,DWORD PTR [esi]
c001150b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001150f:	53                   	push   ebx
c0011510:	55                   	push   ebp
c0011511:	45                   	inc    ebp
c0011512:	56                   	push   esi
c0011513:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0011516:	83 c4 10             	add    esp,0x10
c0011519:	eb e8                	jmp    c0011503 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001151b:	43                   	inc    ebx
c001151c:	eb dd                	jmp    c00114fb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001151e:	83 c4 1c             	add    esp,0x1c
c0011521:	5b                   	pop    ebx
c0011522:	5e                   	pop    esi
c0011523:	5f                   	pop    edi
c0011524:	5d                   	pop    ebp
c0011525:	c3                   	ret    

c0011526 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0011526:	55                   	push   ebp
c0011527:	57                   	push   edi
c0011528:	31 ff                	xor    edi,edi
c001152a:	56                   	push   esi
c001152b:	53                   	push   ebx
c001152c:	83 ec 1c             	sub    esp,0x1c
c001152f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0011533:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011537:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001153e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011543:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011547:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001154b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001154f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011552:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011556:	01 f9                	add    ecx,edi
c0011558:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001155c:	7d 2f                	jge    c001158d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001155e:	31 f6                	xor    esi,esi
c0011560:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011564:	01 f2                	add    edx,esi
c0011566:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001156a:	7d 1a                	jge    c0011586 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001156c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001156f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0011572:	46                   	inc    esi
c0011573:	51                   	push   ecx
c0011574:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011578:	52                   	push   edx
c0011579:	55                   	push   ebp
c001157a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011584:	eb da                	jmp    c0011560 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011586:	47                   	inc    edi
c0011587:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001158b:	eb c5                	jmp    c0011552 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001158d:	83 c4 1c             	add    esp,0x1c
c0011590:	5b                   	pop    ebx
c0011591:	5e                   	pop    esi
c0011592:	5f                   	pop    edi
c0011593:	5d                   	pop    ebp
c0011594:	c3                   	ret    
c0011595:	90                   	nop

c0011596 <Video::blit(unsigned int*, int, int, int, int)>:
c0011596:	55                   	push   ebp
c0011597:	57                   	push   edi
c0011598:	56                   	push   esi
c0011599:	53                   	push   ebx
c001159a:	83 ec 1c             	sub    esp,0x1c
c001159d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115a5:	85 c0                	test   eax,eax
c00115a7:	79 02                	jns    c00115ab <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00115a9:	31 c0                	xor    eax,eax
c00115ab:	c1 e0 02             	shl    eax,0x2
c00115ae:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00115b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00115b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115ba:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00115be:	39 d8                	cmp    eax,ebx
c00115c0:	7e 49                	jle    c001160b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00115c2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00115c8:	7c 41                	jl     c001160b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00115ca:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00115ce:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00115d2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00115d6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00115da:	39 f9                	cmp    ecx,edi
c00115dc:	7e 22                	jle    c0011600 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00115de:	83 c5 04             	add    ebp,0x4
c00115e1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00115e7:	7c 14                	jl     c00115fd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00115e9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00115eb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00115ee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00115f2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00115f6:	56                   	push   esi
c00115f7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00115fa:	83 c4 10             	add    esp,0x10
c00115fd:	47                   	inc    edi
c00115fe:	eb d2                	jmp    c00115d2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011600:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011604:	43                   	inc    ebx
c0011605:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011609:	eb ab                	jmp    c00115b6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001160b:	83 c4 1c             	add    esp,0x1c
c001160e:	5b                   	pop    ebx
c001160f:	5e                   	pop    esi
c0011610:	5f                   	pop    edi
c0011611:	5d                   	pop    ebp
c0011612:	c3                   	ret    
c0011613:	90                   	nop

c0011614 <Video::clearScreen(unsigned int)>:
c0011614:	57                   	push   edi
c0011615:	56                   	push   esi
c0011616:	53                   	push   ebx
c0011617:	31 db                	xor    ebx,ebx
c0011619:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001161d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011623:	7e 1f                	jle    c0011644 <Video::clearScreen(unsigned int)+0x30>
c0011625:	31 ff                	xor    edi,edi
c0011627:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001162d:	7e 12                	jle    c0011641 <Video::clearScreen(unsigned int)+0x2d>
c001162f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011635:	53                   	push   ebx
c0011636:	57                   	push   edi
c0011637:	47                   	inc    edi
c0011638:	56                   	push   esi
c0011639:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001163c:	83 c4 10             	add    esp,0x10
c001163f:	eb e6                	jmp    c0011627 <Video::clearScreen(unsigned int)+0x13>
c0011641:	43                   	inc    ebx
c0011642:	eb d9                	jmp    c001161d <Video::clearScreen(unsigned int)+0x9>
c0011644:	5b                   	pop    ebx
c0011645:	5e                   	pop    esi
c0011646:	5f                   	pop    edi
c0011647:	c3                   	ret    

c0011648 <Video::putpixel(int, int, unsigned int)>:
c0011648:	c7 44 24 04 28 59 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025928
c0011650:	e9 90 39 00 00       	jmp    c0014fe5 <Krnl::panic(char const*)>
c0011655:	90                   	nop

c0011656 <Video::Video(char const*)>:
c0011656:	83 ec 0c             	sub    esp,0xc
c0011659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001165d:	83 ec 08             	sub    esp,0x8
c0011660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011664:	50                   	push   eax
c0011665:	e8 54 d1 ff ff       	call   c000e7be <Device::Device(char const*)>
c001166a:	83 c4 10             	add    esp,0x10
c001166d:	ba 98 59 02 c0       	mov    edx,0xc0025998
c0011672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011676:	89 10                	mov    DWORD PTR [eax],edx
c0011678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001167c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011686:	90                   	nop
c0011687:	83 c4 0c             	add    esp,0xc
c001168a:	c3                   	ret    
c001168b:	90                   	nop

c001168c <Video::~Video()>:
c001168c:	83 ec 0c             	sub    esp,0xc
c001168f:	ba 98 59 02 c0       	mov    edx,0xc0025998
c0011694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011698:	89 10                	mov    DWORD PTR [eax],edx
c001169a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001169e:	83 ec 0c             	sub    esp,0xc
c00116a1:	50                   	push   eax
c00116a2:	e8 e1 cd ff ff       	call   c000e488 <Device::~Device()>
c00116a7:	83 c4 10             	add    esp,0x10
c00116aa:	90                   	nop
c00116ab:	83 c4 0c             	add    esp,0xc
c00116ae:	c3                   	ret    
c00116af:	90                   	nop

c00116b0 <Video::~Video()>:
c00116b0:	83 ec 0c             	sub    esp,0xc
c00116b3:	83 ec 0c             	sub    esp,0xc
c00116b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ba:	e8 cd ff ff ff       	call   c001168c <Video::~Video()>
c00116bf:	83 c4 10             	add    esp,0x10
c00116c2:	83 ec 08             	sub    esp,0x8
c00116c5:	68 64 01 00 00       	push   0x164
c00116ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ce:	e8 93 b8 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00116d3:	83 c4 10             	add    esp,0x10
c00116d6:	83 c4 0c             	add    esp,0xc
c00116d9:	c3                   	ret    

c00116da <Video::isMonochrome()>:
c00116da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116de:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00116e4:	c3                   	ret    
c00116e5:	90                   	nop

c00116e6 <Video::getWidth()>:
c00116e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00116f0:	c3                   	ret    
c00116f1:	90                   	nop

c00116f2 <Video::getHeight()>:
c00116f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00116fc:	c3                   	ret    
c00116fd:	90                   	nop

c00116fe <Video::drawCursor(int, int, unsigned char*, int)>:
c00116fe:	55                   	push   ebp
c00116ff:	57                   	push   edi
c0011700:	56                   	push   esi
c0011701:	53                   	push   ebx
c0011702:	83 ec 2c             	sub    esp,0x2c
c0011705:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011709:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001170d:	83 f8 01             	cmp    eax,0x1
c0011710:	19 c9                	sbb    ecx,ecx
c0011712:	31 db                	xor    ebx,ebx
c0011714:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011718:	89 cd                	mov    ebp,ecx
c001171a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011722:	f7 d5                	not    ebp
c0011724:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001172a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001172e:	01 d8                	add    eax,ebx
c0011730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011734:	56                   	push   esi
c0011735:	e8 b8 ff ff ff       	call   c00116f2 <Video::getHeight()>
c001173a:	59                   	pop    ecx
c001173b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001173f:	7e 70                	jle    c00117b1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011741:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011745:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011749:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001174c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011750:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011754:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001175b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001175f:	89 f8                	mov    eax,edi
c0011761:	83 c0 20             	add    eax,0x20
c0011764:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011768:	56                   	push   esi
c0011769:	e8 78 ff ff ff       	call   c00116e6 <Video::getWidth()>
c001176e:	5a                   	pop    edx
c001176f:	39 c7                	cmp    edi,eax
c0011771:	7d 34                	jge    c00117a7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011773:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011778:	74 05                	je     c001177f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001177a:	8b 06                	mov    eax,DWORD PTR [esi]
c001177c:	55                   	push   ebp
c001177d:	eb 0d                	jmp    c001178c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001177f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011784:	74 12                	je     c0011798 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011786:	8b 06                	mov    eax,DWORD PTR [esi]
c0011788:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001178c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011790:	57                   	push   edi
c0011791:	56                   	push   esi
c0011792:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011795:	83 c4 10             	add    esp,0x10
c0011798:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001179c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00117a0:	47                   	inc    edi
c00117a1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00117a5:	75 c1                	jne    c0011768 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00117a7:	43                   	inc    ebx
c00117a8:	83 fb 20             	cmp    ebx,0x20
c00117ab:	0f 85 79 ff ff ff    	jne    c001172a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00117b1:	83 c4 2c             	add    esp,0x2c
c00117b4:	5b                   	pop    ebx
c00117b5:	5e                   	pop    esi
c00117b6:	5f                   	pop    edi
c00117b7:	5d                   	pop    ebp
c00117b8:	c3                   	ret    
c00117b9:	90                   	nop

c00117ba <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00117ba:	55                   	push   ebp
c00117bb:	57                   	push   edi
c00117bc:	56                   	push   esi
c00117bd:	53                   	push   ebx
c00117be:	83 ec 28             	sub    esp,0x28
c00117c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00117c5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00117c9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00117cd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00117d1:	c1 e6 08             	shl    esi,0x8
c00117d4:	01 c6                	add    esi,eax
c00117d6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00117da:	c1 e0 08             	shl    eax,0x8
c00117dd:	01 d0                	add    eax,edx
c00117df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117e7:	0f af c6             	imul   eax,esi
c00117ea:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00117f1:	50                   	push   eax
c00117f2:	e8 64 85 ff ff       	call   c0009d5b <malloc>
c00117f7:	83 c4 10             	add    esp,0x10
c00117fa:	89 c7                	mov    edi,eax
c00117fc:	85 c0                	test   eax,eax
c00117fe:	75 10                	jne    c0011810 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011800:	83 ec 0c             	sub    esp,0xc
c0011803:	68 49 59 02 c0       	push   0xc0025949
c0011808:	e8 d8 37 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011813:	ba 12 00 00 00       	mov    edx,0x12
c0011818:	84 c0                	test   al,al
c001181a:	74 11                	je     c001182d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001181c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011820:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011824:	c1 fa 03             	sar    edx,0x3
c0011827:	0f af d1             	imul   edx,ecx
c001182a:	83 c2 12             	add    edx,0x12
c001182d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011831:	74 04                	je     c0011837 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011833:	85 f6                	test   esi,esi
c0011835:	75 12                	jne    c0011849 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011837:	83 ec 0c             	sub    esp,0xc
c001183a:	68 59 59 02 c0       	push   0xc0025959
c001183f:	e8 03 b8 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0011844:	e9 b8 00 00 00       	jmp    c0011901 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011849:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001184d:	80 f9 02             	cmp    cl,0x2
c0011850:	0f 85 96 00 00 00    	jne    c00118ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011856:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001185b:	75 0e                	jne    c001186b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001185d:	84 c0                	test   al,al
c001185f:	75 0a                	jne    c001186b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011861:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011864:	83 e8 18             	sub    eax,0x18
c0011867:	a8 f7                	test   al,0xf7
c0011869:	74 0a                	je     c0011875 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001186b:	83 ec 0c             	sub    esp,0xc
c001186e:	68 6e 59 02 c0       	push   0xc002596e
c0011873:	eb 7f                	jmp    c00118f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011875:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001187d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011885:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011889:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011891:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011895:	75 0c                	jne    c00118a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011897:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001189c:	c1 e0 18             	shl    eax,0x18
c001189f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118a3:	45                   	inc    ebp
c00118a4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00118a9:	c1 e1 10             	shl    ecx,0x10
c00118ac:	89 c8                	mov    eax,ecx
c00118ae:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00118b3:	c1 e1 08             	shl    ecx,0x8
c00118b6:	09 c1                	or     ecx,eax
c00118b8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00118bc:	09 c1                	or     ecx,eax
c00118be:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00118c2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00118c6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00118ca:	c1 f8 03             	sar    eax,0x3
c00118cd:	01 c2                	add    edx,eax
c00118cf:	89 e8                	mov    eax,ebp
c00118d1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00118d5:	39 c6                	cmp    esi,eax
c00118d7:	7f b0                	jg     c0011889 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00118d9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00118dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00118e1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00118e4:	7e 22                	jle    c0011908 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00118e6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00118ea:	eb 99                	jmp    c0011885 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00118ec:	50                   	push   eax
c00118ed:	50                   	push   eax
c00118ee:	51                   	push   ecx
c00118ef:	68 7c 59 02 c0       	push   0xc002597c
c00118f4:	e8 4e b7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00118f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118fc:	e8 6a 84 ff ff       	call   c0009d6b <free>
c0011901:	83 c4 10             	add    esp,0x10
c0011904:	31 ff                	xor    edi,edi
c0011906:	eb 0f                	jmp    c0011917 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011908:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001190c:	89 30                	mov    DWORD PTR [eax],esi
c001190e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011912:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011915:	89 30                	mov    DWORD PTR [eax],esi
c0011917:	83 c4 1c             	add    esp,0x1c
c001191a:	89 f8                	mov    eax,edi
c001191c:	5b                   	pop    ebx
c001191d:	5e                   	pop    esi
c001191e:	5f                   	pop    edi
c001191f:	5d                   	pop    ebp
c0011920:	c3                   	ret    
c0011921:	90                   	nop

c0011922 <Video::putTGA(int, int, unsigned char*, int)>:
c0011922:	55                   	push   ebp
c0011923:	57                   	push   edi
c0011924:	56                   	push   esi
c0011925:	53                   	push   ebx
c0011926:	83 ec 28             	sub    esp,0x28
c0011929:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001192d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011931:	50                   	push   eax
c0011932:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011936:	50                   	push   eax
c0011937:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001193b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001193f:	56                   	push   esi
c0011940:	e8 75 fe ff ff       	call   c00117ba <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011945:	83 c4 20             	add    esp,0x20
c0011948:	85 c0                	test   eax,eax
c001194a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001194e:	74 35                	je     c0011985 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011950:	89 c7                	mov    edi,eax
c0011952:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011956:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001195a:	39 d8                	cmp    eax,ebx
c001195c:	7e 27                	jle    c0011985 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001195e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011962:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011966:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001196a:	39 e8                	cmp    eax,ebp
c001196c:	7e 14                	jle    c0011982 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001196e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011970:	83 c7 04             	add    edi,0x4
c0011973:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011976:	53                   	push   ebx
c0011977:	55                   	push   ebp
c0011978:	45                   	inc    ebp
c0011979:	56                   	push   esi
c001197a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	eb e0                	jmp    c0011962 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011982:	43                   	inc    ebx
c0011983:	eb cd                	jmp    c0011952 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011985:	83 c4 1c             	add    esp,0x1c
c0011988:	5b                   	pop    ebx
c0011989:	5e                   	pop    esi
c001198a:	5f                   	pop    edi
c001198b:	5d                   	pop    ebp
c001198c:	c3                   	ret    
c001198d:	66 90                	xchg   ax,ax
c001198f:	90                   	nop

c0011990 <ACPI::close(int, int, void*)>:
c0011990:	83 ec 1c             	sub    esp,0x1c
c0011993:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001199b:	74 0b                	je     c00119a8 <ACPI::close(int, int, void*)+0x18>
c001199d:	b8 00 00 00 00       	mov    eax,0x0
c00119a2:	e9 99 00 00 00       	jmp    c0011a40 <ACPI::close(int, int, void*)+0xb0>
c00119a7:	90                   	nop
c00119a8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00119ad:	75 29                	jne    c00119d8 <ACPI::close(int, int, void*)+0x48>
c00119af:	a1 c8 8e 02 c0       	mov    eax,ds:0xc0028ec8
c00119b4:	85 c0                	test   eax,eax
c00119b6:	74 08                	je     c00119c0 <ACPI::close(int, int, void*)+0x30>
c00119b8:	a1 c8 8e 02 c0       	mov    eax,ds:0xc0028ec8
c00119bd:	ff d0                	call   eax
c00119bf:	90                   	nop
c00119c0:	83 ec 0c             	sub    esp,0xc
c00119c3:	68 d8 59 02 c0       	push   0xc00259d8
c00119c8:	e8 18 36 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119d5:	eb 69                	jmp    c0011a40 <ACPI::close(int, int, void*)+0xb0>
c00119d7:	90                   	nop
c00119d8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00119dd:	75 59                	jne    c0011a38 <ACPI::close(int, int, void*)+0xa8>
c00119df:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c00119e4:	85 c0                	test   eax,eax
c00119e6:	74 08                	je     c00119f0 <ACPI::close(int, int, void*)+0x60>
c00119e8:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c00119ed:	ff d0                	call   eax
c00119ef:	90                   	nop
c00119f0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00119f5:	8d 76 00             	lea    esi,[esi+0x0]
c00119f8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119fd:	83 e0 02             	and    eax,0x2
c0011a00:	74 1e                	je     c0011a20 <ACPI::close(int, int, void*)+0x90>
c0011a02:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a0d:	89 c2                	mov    edx,eax
c0011a0f:	ec                   	in     al,dx
c0011a10:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a14:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011a18:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a1c:	eb da                	jmp    c00119f8 <ACPI::close(int, int, void*)+0x68>
c0011a1e:	66 90                	xchg   ax,ax
c0011a20:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011a27:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011a2c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011a30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a34:	ee                   	out    dx,al
c0011a35:	8d 76 00             	lea    esi,[esi+0x0]
c0011a38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a40:	83 c4 1c             	add    esp,0x1c
c0011a43:	c3                   	ret    

c0011a44 <findRSDP()>:
c0011a44:	83 ec 1c             	sub    esp,0x1c
c0011a47:	83 ec 0c             	sub    esp,0xc
c0011a4a:	68 fb 5a 02 c0       	push   0xc0025afb
c0011a4f:	e8 61 83 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0011a5c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a62:	83 e0 04             	and    eax,0x4
c0011a65:	84 c0                	test   al,al
c0011a67:	75 0b                	jne    c0011a74 <findRSDP()+0x30>
c0011a69:	b8 00 00 00 00       	mov    eax,0x0
c0011a6e:	e9 a1 00 00 00       	jmp    c0011b14 <findRSDP()+0xd0>
c0011a73:	90                   	nop
c0011a74:	a1 b8 88 02 c0       	mov    eax,ds:0xc00288b8
c0011a79:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011a7e:	7f 1c                	jg     c0011a9c <findRSDP()+0x58>
c0011a80:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0011a85:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a8b:	83 e2 fb             	and    edx,0xfffffffb
c0011a8e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a94:	b8 00 00 00 00       	mov    eax,0x0
c0011a99:	eb 79                	jmp    c0011b14 <findRSDP()+0xd0>
c0011a9b:	90                   	nop
c0011a9c:	83 ec 0c             	sub    esp,0xc
c0011a9f:	68 0b 5b 02 c0       	push   0xc0025b0b
c0011aa4:	e8 0c 83 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011aa9:	83 c4 10             	add    esp,0x10
c0011aac:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011ab4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011abc:	77 3e                	ja     c0011afc <findRSDP()+0xb8>
c0011abe:	83 ec 04             	sub    esp,0x4
c0011ac1:	6a 08                	push   0x8
c0011ac3:	68 24 5b 02 c0       	push   0xc0025b24
c0011ac8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011acc:	e8 af ea fe ff       	call   c0000580 <memcmp>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	85 c0                	test   eax,eax
c0011ad6:	0f 94 c0             	sete   al
c0011ad9:	84 c0                	test   al,al
c0011adb:	74 17                	je     c0011af4 <findRSDP()+0xb0>
c0011add:	83 ec 0c             	sub    esp,0xc
c0011ae0:	68 2d 5b 02 c0       	push   0xc0025b2d
c0011ae5:	e8 cb 82 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011aea:	83 c4 10             	add    esp,0x10
c0011aed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af1:	eb 21                	jmp    c0011b14 <findRSDP()+0xd0>
c0011af3:	90                   	nop
c0011af4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011af9:	eb b9                	jmp    c0011ab4 <findRSDP()+0x70>
c0011afb:	90                   	nop
c0011afc:	83 ec 0c             	sub    esp,0xc
c0011aff:	68 3b 5b 02 c0       	push   0xc0025b3b
c0011b04:	e8 ac 82 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011b09:	83 c4 10             	add    esp,0x10
c0011b0c:	b8 00 00 00 00       	mov    eax,0x0
c0011b11:	8d 76 00             	lea    esi,[esi+0x0]
c0011b14:	83 c4 1c             	add    esp,0x1c
c0011b17:	c3                   	ret    

c0011b18 <loadACPITables(unsigned char*)>:
c0011b18:	57                   	push   edi
c0011b19:	56                   	push   esi
c0011b1a:	53                   	push   ebx
c0011b1b:	83 ec 60             	sub    esp,0x60
c0011b1e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0011b23:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b29:	83 e0 04             	and    eax,0x4
c0011b2c:	84 c0                	test   al,al
c0011b2e:	0f 84 3c 02 00 00    	je     c0011d70 <loadACPITables(unsigned char*)+0x258>
c0011b34:	a0 e0 90 02 c0       	mov    al,ds:0xc00290e0
c0011b39:	84 c0                	test   al,al
c0011b3b:	74 77                	je     c0011bb4 <loadACPITables(unsigned char*)+0x9c>
c0011b3d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011b41:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011b45:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011b49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b4c:	83 e8 24             	sub    eax,0x24
c0011b4f:	c1 e8 03             	shr    eax,0x3
c0011b52:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011b56:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011b5e:	66 90                	xchg   ax,ax
c0011b60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011b64:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011b68:	0f 8d b6 00 00 00    	jge    c0011c24 <loadACPITables(unsigned char*)+0x10c>
c0011b6e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011b72:	83 c0 24             	add    eax,0x24
c0011b75:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011b79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011b7d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b81:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011b85:	c1 e0 03             	shl    eax,0x3
c0011b88:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011b8c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011b90:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b95:	89 c1                	mov    ecx,eax
c0011b97:	a1 cc 8e 02 c0       	mov    eax,ds:0xc0028ecc
c0011b9c:	8d 50 01             	lea    edx,[eax+0x1]
c0011b9f:	89 15 cc 8e 02 c0    	mov    DWORD PTR ds:0xc0028ecc,edx
c0011ba5:	89 ca                	mov    edx,ecx
c0011ba7:	89 14 c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],edx
c0011bae:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011bb2:	eb ac                	jmp    c0011b60 <loadACPITables(unsigned char*)+0x48>
c0011bb4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011bb8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011bbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bc3:	83 e8 24             	sub    eax,0x24
c0011bc6:	c1 e8 02             	shr    eax,0x2
c0011bc9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011bcd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0011bd8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011bdc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011be0:	7d 42                	jge    c0011c24 <loadACPITables(unsigned char*)+0x10c>
c0011be2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011be6:	83 c0 24             	add    eax,0x24
c0011be9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011bed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011bf5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011bf9:	c1 e0 02             	shl    eax,0x2
c0011bfc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011c00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c04:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c06:	a1 cc 8e 02 c0       	mov    eax,ds:0xc0028ecc
c0011c0b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c0e:	89 15 cc 8e 02 c0    	mov    DWORD PTR ds:0xc0028ecc,edx
c0011c14:	89 ca                	mov    edx,ecx
c0011c16:	89 14 c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],edx
c0011c1d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011c21:	eb b5                	jmp    c0011bd8 <loadACPITables(unsigned char*)+0xc0>
c0011c23:	90                   	nop
c0011c24:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011c2c:	a1 cc 8e 02 c0       	mov    eax,ds:0xc0028ecc
c0011c31:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011c35:	0f 8d 39 01 00 00    	jge    c0011d74 <loadACPITables(unsigned char*)+0x25c>
c0011c3b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011c3f:	8b 04 c5 e4 8e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd711c]
c0011c46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011c52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c56:	25 ff 0f 00 00       	and    eax,0xfff
c0011c5b:	89 c6                	mov    esi,eax
c0011c5d:	8b 1d b0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289b0
c0011c63:	83 ec 0c             	sub    esp,0xc
c0011c66:	6a 01                	push   0x1
c0011c68:	e8 b4 a0 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011c6d:	83 c4 10             	add    esp,0x10
c0011c70:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011c74:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011c7a:	83 ec 0c             	sub    esp,0xc
c0011c7d:	6a 01                	push   0x1
c0011c7f:	6a 01                	push   0x1
c0011c81:	50                   	push   eax
c0011c82:	52                   	push   edx
c0011c83:	53                   	push   ebx
c0011c84:	e8 35 aa ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c89:	83 c4 20             	add    esp,0x20
c0011c8c:	09 f0                	or     eax,esi
c0011c8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011c92:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011c96:	c1 e0 03             	shl    eax,0x3
c0011c99:	05 e0 8e 02 c0       	add    eax,0xc0028ee0
c0011c9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ca2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ca6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011caa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011cb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011cba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011cbe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011cc2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011cc6:	89 c6                	mov    esi,eax
c0011cc8:	89 d7                	mov    edi,edx
c0011cca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ccc:	89 c8                	mov    eax,ecx
c0011cce:	89 fa                	mov    edx,edi
c0011cd0:	89 f3                	mov    ebx,esi
c0011cd2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011cd6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011cda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ce2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ce5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011ce9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ced:	05 00 10 00 00       	add    eax,0x1000
c0011cf2:	c1 e8 0c             	shr    eax,0xc
c0011cf5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011cf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cfd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d05:	25 ff 0f 00 00       	and    eax,0xfff
c0011d0a:	89 c6                	mov    esi,eax
c0011d0c:	8b 1d b0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289b0
c0011d12:	83 ec 0c             	sub    esp,0xc
c0011d15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011d19:	e8 03 a0 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011d1e:	83 c4 10             	add    esp,0x10
c0011d21:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d25:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	6a 01                	push   0x1
c0011d30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d34:	50                   	push   eax
c0011d35:	52                   	push   edx
c0011d36:	53                   	push   ebx
c0011d37:	e8 82 a9 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d3c:	83 c4 20             	add    esp,0x20
c0011d3f:	09 f0                	or     eax,esi
c0011d41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011d45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d49:	83 ec 0c             	sub    esp,0xc
c0011d4c:	50                   	push   eax
c0011d4d:	e8 ff a2 ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d52:	83 c4 10             	add    esp,0x10
c0011d55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d59:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d5d:	89 14 c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],edx
c0011d64:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011d68:	e9 bf fe ff ff       	jmp    c0011c2c <loadACPITables(unsigned char*)+0x114>
c0011d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0011d70:	90                   	nop
c0011d71:	8d 76 00             	lea    esi,[esi+0x0]
c0011d74:	83 c4 60             	add    esp,0x60
c0011d77:	5b                   	pop    ebx
c0011d78:	5e                   	pop    esi
c0011d79:	5f                   	pop    edi
c0011d7a:	c3                   	ret    
c0011d7b:	90                   	nop

c0011d7c <findRSDT(unsigned char*)>:
c0011d7c:	57                   	push   edi
c0011d7d:	56                   	push   esi
c0011d7e:	53                   	push   ebx
c0011d7f:	83 ec 50             	sub    esp,0x50
c0011d82:	83 ec 0c             	sub    esp,0xc
c0011d85:	68 4f 5b 02 c0       	push   0xc0025b4f
c0011d8a:	e8 26 80 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0011d97:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011d9d:	83 e0 04             	and    eax,0x4
c0011da0:	84 c0                	test   al,al
c0011da2:	75 0c                	jne    c0011db0 <findRSDT(unsigned char*)+0x34>
c0011da4:	b8 00 00 00 00       	mov    eax,0x0
c0011da9:	e9 86 01 00 00       	jmp    c0011f34 <findRSDT(unsigned char*)+0x1b8>
c0011dae:	66 90                	xchg   ax,ax
c0011db0:	83 ec 0c             	sub    esp,0xc
c0011db3:	68 61 5b 02 c0       	push   0xc0025b61
c0011db8:	e8 f8 7f ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011dbd:	83 c4 10             	add    esp,0x10
c0011dc0:	89 e0                	mov    eax,esp
c0011dc2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011dc6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011dce:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011dd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011dda:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011dde:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011de2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011de6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011dea:	89 c6                	mov    esi,eax
c0011dec:	89 d7                	mov    edi,edx
c0011dee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011df0:	89 c8                	mov    eax,ecx
c0011df2:	89 fa                	mov    edx,edi
c0011df4:	89 f3                	mov    ebx,esi
c0011df6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011dfa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011dfe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e02:	83 ec 0c             	sub    esp,0xc
c0011e05:	68 73 5b 02 c0       	push   0xc0025b73
c0011e0a:	e8 a6 7f ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011e0f:	83 c4 10             	add    esp,0x10
c0011e12:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011e16:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011e1a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011e22:	83 ec 0c             	sub    esp,0xc
c0011e25:	68 85 5b 02 c0       	push   0xc0025b85
c0011e2a:	e8 86 7f ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011e2f:	83 c4 10             	add    esp,0x10
c0011e32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e3a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e42:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011e46:	83 ec 04             	sub    esp,0x4
c0011e49:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011e4d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011e51:	68 fc 59 02 c0       	push   0xc00259fc
c0011e56:	e8 ec b1 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0011e5b:	83 c4 10             	add    esp,0x10
c0011e5e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011e62:	25 ff 0f 00 00       	and    eax,0xfff
c0011e67:	89 c6                	mov    esi,eax
c0011e69:	8b 1d b0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289b0
c0011e6f:	83 ec 0c             	sub    esp,0xc
c0011e72:	6a 02                	push   0x2
c0011e74:	e8 a8 9e ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011e79:	83 c4 10             	add    esp,0x10
c0011e7c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011e80:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011e86:	83 ec 0c             	sub    esp,0xc
c0011e89:	6a 01                	push   0x1
c0011e8b:	6a 02                	push   0x2
c0011e8d:	50                   	push   eax
c0011e8e:	52                   	push   edx
c0011e8f:	53                   	push   ebx
c0011e90:	e8 29 a8 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e95:	83 c4 20             	add    esp,0x20
c0011e98:	09 f0                	or     eax,esi
c0011e9a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011e9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ea2:	25 ff 0f 00 00       	and    eax,0xfff
c0011ea7:	89 c6                	mov    esi,eax
c0011ea9:	8b 1d b0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289b0
c0011eaf:	83 ec 0c             	sub    esp,0xc
c0011eb2:	6a 02                	push   0x2
c0011eb4:	e8 68 9e ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011eb9:	83 c4 10             	add    esp,0x10
c0011ebc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011ec0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011ec6:	83 ec 0c             	sub    esp,0xc
c0011ec9:	6a 01                	push   0x1
c0011ecb:	6a 02                	push   0x2
c0011ecd:	50                   	push   eax
c0011ece:	52                   	push   edx
c0011ecf:	53                   	push   ebx
c0011ed0:	e8 e9 a7 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ed5:	83 c4 20             	add    esp,0x20
c0011ed8:	09 f0                	or     eax,esi
c0011eda:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011ede:	83 ec 04             	sub    esp,0x4
c0011ee1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ee5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ee9:	68 1c 5a 02 c0       	push   0xc0025a1c
c0011eee:	e8 54 b1 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011efb:	75 13                	jne    c0011f10 <findRSDT(unsigned char*)+0x194>
c0011efd:	c6 05 e0 90 02 c0 00 	mov    BYTE PTR ds:0xc00290e0,0x0
c0011f04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f08:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011f0c:	eb 22                	jmp    c0011f30 <findRSDT(unsigned char*)+0x1b4>
c0011f0e:	66 90                	xchg   ax,ax
c0011f10:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011f15:	75 11                	jne    c0011f28 <findRSDT(unsigned char*)+0x1ac>
c0011f17:	c6 05 e0 90 02 c0 01 	mov    BYTE PTR ds:0xc00290e0,0x1
c0011f1e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011f22:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011f26:	eb 08                	jmp    c0011f30 <findRSDT(unsigned char*)+0x1b4>
c0011f28:	b8 00 00 00 00       	mov    eax,0x0
c0011f2d:	eb 05                	jmp    c0011f34 <findRSDT(unsigned char*)+0x1b8>
c0011f2f:	90                   	nop
c0011f30:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011f34:	83 c4 50             	add    esp,0x50
c0011f37:	5b                   	pop    ebx
c0011f38:	5e                   	pop    esi
c0011f39:	5f                   	pop    edi
c0011f3a:	c3                   	ret    
c0011f3b:	90                   	nop

c0011f3c <findDataTable(unsigned char*, char*)>:
c0011f3c:	83 ec 1c             	sub    esp,0x1c
c0011f3f:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0011f44:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011f4a:	83 e0 04             	and    eax,0x4
c0011f4d:	84 c0                	test   al,al
c0011f4f:	75 07                	jne    c0011f58 <findDataTable(unsigned char*, char*)+0x1c>
c0011f51:	b8 00 00 00 00       	mov    eax,0x0
c0011f56:	eb 58                	jmp    c0011fb0 <findDataTable(unsigned char*, char*)+0x74>
c0011f58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f60:	a1 cc 8e 02 c0       	mov    eax,ds:0xc0028ecc
c0011f65:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011f69:	7d 3d                	jge    c0011fa8 <findDataTable(unsigned char*, char*)+0x6c>
c0011f6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f6f:	c1 e0 03             	shl    eax,0x3
c0011f72:	05 e0 8e 02 c0       	add    eax,0xc0028ee0
c0011f77:	83 ec 04             	sub    esp,0x4
c0011f7a:	6a 04                	push   0x4
c0011f7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011f80:	50                   	push   eax
c0011f81:	e8 fa e5 fe ff       	call   c0000580 <memcmp>
c0011f86:	83 c4 10             	add    esp,0x10
c0011f89:	85 c0                	test   eax,eax
c0011f8b:	0f 94 c0             	sete   al
c0011f8e:	84 c0                	test   al,al
c0011f90:	74 0e                	je     c0011fa0 <findDataTable(unsigned char*, char*)+0x64>
c0011f92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f96:	8b 04 c5 e4 8e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd711c]
c0011f9d:	eb 11                	jmp    c0011fb0 <findDataTable(unsigned char*, char*)+0x74>
c0011f9f:	90                   	nop
c0011fa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011fa4:	eb ba                	jmp    c0011f60 <findDataTable(unsigned char*, char*)+0x24>
c0011fa6:	66 90                	xchg   ax,ax
c0011fa8:	b8 00 00 00 00       	mov    eax,0x0
c0011fad:	8d 76 00             	lea    esi,[esi+0x0]
c0011fb0:	83 c4 1c             	add    esp,0x1c
c0011fb3:	c3                   	ret    

c0011fb4 <scanMADT()>:
c0011fb4:	53                   	push   ebx
c0011fb5:	83 ec 38             	sub    esp,0x38
c0011fb8:	83 ec 0c             	sub    esp,0xc
c0011fbb:	68 97 5b 02 c0       	push   0xc0025b97
c0011fc0:	e8 f0 7d ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011fc5:	83 c4 10             	add    esp,0x10
c0011fc8:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0011fcd:	25 00 04 00 00       	and    eax,0x400
c0011fd2:	74 14                	je     c0011fe8 <scanMADT()+0x34>
c0011fd4:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0011fd9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011fdf:	83 e2 fb             	and    edx,0xfffffffb
c0011fe2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011fe8:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0011fed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ff3:	83 e0 04             	and    eax,0x4
c0011ff6:	84 c0                	test   al,al
c0011ff8:	0f 84 82 04 00 00    	je     c0012480 <scanMADT()+0x4cc>
c0011ffe:	83 ec 0c             	sub    esp,0xc
c0012001:	68 a4 5b 02 c0       	push   0xc0025ba4
c0012006:	e8 aa 7d ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001200b:	83 c4 10             	add    esp,0x10
c001200e:	e8 31 fa ff ff       	call   c0011a44 <findRSDP()>
c0012013:	a3 ec 90 02 c0       	mov    ds:0xc00290ec,eax
c0012018:	a1 ec 90 02 c0       	mov    eax,ds:0xc00290ec
c001201d:	85 c0                	test   eax,eax
c001201f:	75 1b                	jne    c001203c <scanMADT()+0x88>
c0012021:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0012026:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001202c:	83 e2 fb             	and    edx,0xfffffffb
c001202f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012035:	e9 4e 04 00 00       	jmp    c0012488 <scanMADT()+0x4d4>
c001203a:	66 90                	xchg   ax,ax
c001203c:	83 ec 0c             	sub    esp,0xc
c001203f:	68 b6 5b 02 c0       	push   0xc0025bb6
c0012044:	e8 6c 7d ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012049:	83 c4 10             	add    esp,0x10
c001204c:	a1 ec 90 02 c0       	mov    eax,ds:0xc00290ec
c0012051:	83 ec 0c             	sub    esp,0xc
c0012054:	50                   	push   eax
c0012055:	e8 22 fd ff ff       	call   c0011d7c <findRSDT(unsigned char*)>
c001205a:	83 c4 10             	add    esp,0x10
c001205d:	a3 e8 90 02 c0       	mov    ds:0xc00290e8,eax
c0012062:	a1 e8 90 02 c0       	mov    eax,ds:0xc00290e8
c0012067:	85 c0                	test   eax,eax
c0012069:	75 19                	jne    c0012084 <scanMADT()+0xd0>
c001206b:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0012070:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012076:	83 e2 fb             	and    edx,0xfffffffb
c0012079:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001207f:	e9 04 04 00 00       	jmp    c0012488 <scanMADT()+0x4d4>
c0012084:	83 ec 0c             	sub    esp,0xc
c0012087:	68 c6 5b 02 c0       	push   0xc0025bc6
c001208c:	e8 24 7d ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	a1 e8 90 02 c0       	mov    eax,ds:0xc00290e8
c0012099:	83 ec 0c             	sub    esp,0xc
c001209c:	50                   	push   eax
c001209d:	e8 76 fa ff ff       	call   c0011b18 <loadACPITables(unsigned char*)>
c00120a2:	83 c4 10             	add    esp,0x10
c00120a5:	a1 e8 90 02 c0       	mov    eax,ds:0xc00290e8
c00120aa:	83 ec 08             	sub    esp,0x8
c00120ad:	68 de 5b 02 c0       	push   0xc0025bde
c00120b2:	50                   	push   eax
c00120b3:	e8 84 fe ff ff       	call   c0011f3c <findDataTable(unsigned char*, char*)>
c00120b8:	83 c4 10             	add    esp,0x10
c00120bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00120bf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00120c4:	75 1a                	jne    c00120e0 <scanMADT()+0x12c>
c00120c6:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c00120cb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00120d1:	83 e2 fe             	and    edx,0xfffffffe
c00120d4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00120da:	e9 a9 03 00 00       	jmp    c0012488 <scanMADT()+0x4d4>
c00120df:	90                   	nop
c00120e0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120ef:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00120f3:	0f 87 8f 03 00 00    	ja     c0012488 <scanMADT()+0x4d4>
c00120f9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0012101:	0f 87 81 03 00 00    	ja     c0012488 <scanMADT()+0x4d4>
c0012107:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001210b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001210f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012113:	8d 50 01             	lea    edx,[eax+0x1]
c0012116:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001211a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001211e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012122:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0012126:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001212a:	8d 50 01             	lea    edx,[eax+0x1]
c001212d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012131:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012135:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012139:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001213d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0012142:	0f 86 3c 03 00 00    	jbe    c0012484 <scanMADT()+0x4d0>
c0012148:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001214d:	75 59                	jne    c00121a8 <scanMADT()+0x1f4>
c001214f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012153:	8d 50 01             	lea    edx,[eax+0x1]
c0012156:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001215a:	8a 15 e0 92 02 c0    	mov    dl,BYTE PTR ds:0xc00292e0
c0012160:	0f b6 d2             	movzx  edx,dl
c0012163:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012167:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001216b:	88 82 20 93 02 c0    	mov    BYTE PTR [edx-0x3ffd6ce0],al
c0012171:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012175:	8d 50 01             	lea    edx,[eax+0x1]
c0012178:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001217c:	8a 15 e0 92 02 c0    	mov    dl,BYTE PTR ds:0xc00292e0
c0012182:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012185:	88 0d e0 92 02 c0    	mov    BYTE PTR ds:0xc00292e0,cl
c001218b:	0f b6 d2             	movzx  edx,dl
c001218e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012192:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012196:	88 82 00 93 02 c0    	mov    BYTE PTR [edx-0x3ffd6d00],al
c001219c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00121a1:	e9 c6 02 00 00       	jmp    c001246c <scanMADT()+0x4b8>
c00121a6:	66 90                	xchg   ax,ax
c00121a8:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00121ad:	0f 85 15 01 00 00    	jne    c00122c8 <scanMADT()+0x314>
c00121b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121b7:	8d 50 01             	lea    edx,[eax+0x1]
c00121ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00121be:	8a 15 a0 91 02 c0    	mov    dl,BYTE PTR ds:0xc00291a0
c00121c4:	0f b6 d2             	movzx  edx,dl
c00121c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00121cb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00121cf:	88 82 c0 91 02 c0    	mov    BYTE PTR [edx-0x3ffd6e40],al
c00121d5:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00121d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00121dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121e1:	01 d0                	add    eax,edx
c00121e3:	83 c0 2c             	add    eax,0x2c
c00121e6:	8a 00                	mov    al,BYTE PTR [eax]
c00121e8:	0f b6 d0             	movzx  edx,al
c00121eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00121f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00121f6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00121fa:	0f b6 c0             	movzx  eax,al
c00121fd:	c1 e0 08             	shl    eax,0x8
c0012200:	89 d1                	mov    ecx,edx
c0012202:	09 c1                	or     ecx,eax
c0012204:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012208:	8d 50 02             	lea    edx,[eax+0x2]
c001220b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001220f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012213:	0f b6 c0             	movzx  eax,al
c0012216:	c1 e0 10             	shl    eax,0x10
c0012219:	09 c1                	or     ecx,eax
c001221b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001221f:	8d 50 03             	lea    edx,[eax+0x3]
c0012222:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012226:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001222a:	0f b6 c0             	movzx  eax,al
c001222d:	c1 e0 18             	shl    eax,0x18
c0012230:	09 c1                	or     ecx,eax
c0012232:	89 ca                	mov    edx,ecx
c0012234:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c0012239:	0f b6 c0             	movzx  eax,al
c001223c:	89 14 85 e0 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e20],edx
c0012243:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012248:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001224c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012250:	01 d0                	add    eax,edx
c0012252:	83 c0 2c             	add    eax,0x2c
c0012255:	8a 00                	mov    al,BYTE PTR [eax]
c0012257:	0f b6 d0             	movzx  edx,al
c001225a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001225e:	8d 48 01             	lea    ecx,[eax+0x1]
c0012261:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012265:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012269:	0f b6 c0             	movzx  eax,al
c001226c:	c1 e0 08             	shl    eax,0x8
c001226f:	89 d1                	mov    ecx,edx
c0012271:	09 c1                	or     ecx,eax
c0012273:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012277:	8d 50 02             	lea    edx,[eax+0x2]
c001227a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001227e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012282:	0f b6 c0             	movzx  eax,al
c0012285:	c1 e0 10             	shl    eax,0x10
c0012288:	09 c1                	or     ecx,eax
c001228a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001228e:	8d 50 03             	lea    edx,[eax+0x3]
c0012291:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012295:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012299:	0f b6 c0             	movzx  eax,al
c001229c:	c1 e0 18             	shl    eax,0x18
c001229f:	09 c1                	or     ecx,eax
c00122a1:	89 ca                	mov    edx,ecx
c00122a3:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c00122a8:	0f b6 c0             	movzx  eax,al
c00122ab:	89 14 85 60 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6da0],edx
c00122b2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00122b7:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c00122bc:	40                   	inc    eax
c00122bd:	a2 a0 91 02 c0       	mov    ds:0xc00291a0,al
c00122c2:	e9 a5 01 00 00       	jmp    c001246c <scanMADT()+0x4b8>
c00122c7:	90                   	nop
c00122c8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00122cd:	0f 85 e9 00 00 00    	jne    c00123bc <scanMADT()+0x408>
c00122d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122d7:	8d 50 01             	lea    edx,[eax+0x1]
c00122da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00122de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00122e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00122e6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00122ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122ee:	8d 50 01             	lea    edx,[eax+0x1]
c00122f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00122f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00122f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00122fd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0012301:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012305:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012309:	01 d0                	add    eax,edx
c001230b:	83 c0 2c             	add    eax,0x2c
c001230e:	8a 00                	mov    al,BYTE PTR [eax]
c0012310:	0f b6 d0             	movzx  edx,al
c0012313:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012317:	8d 48 01             	lea    ecx,[eax+0x1]
c001231a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001231e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012322:	0f b6 c0             	movzx  eax,al
c0012325:	c1 e0 08             	shl    eax,0x8
c0012328:	89 d1                	mov    ecx,edx
c001232a:	09 c1                	or     ecx,eax
c001232c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012330:	8d 50 02             	lea    edx,[eax+0x2]
c0012333:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012337:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001233b:	0f b6 c0             	movzx  eax,al
c001233e:	c1 e0 10             	shl    eax,0x10
c0012341:	09 c1                	or     ecx,eax
c0012343:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012347:	8d 50 03             	lea    edx,[eax+0x3]
c001234a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001234e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012352:	0f b6 c0             	movzx  eax,al
c0012355:	c1 e0 18             	shl    eax,0x18
c0012358:	09 c8                	or     eax,ecx
c001235a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001235e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012363:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012367:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001236b:	01 d0                	add    eax,edx
c001236d:	83 c0 2c             	add    eax,0x2c
c0012370:	8a 00                	mov    al,BYTE PTR [eax]
c0012372:	0f b6 c0             	movzx  eax,al
c0012375:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012379:	8d 4a 01             	lea    ecx,[edx+0x1]
c001237c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012380:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012384:	0f b6 d2             	movzx  edx,dl
c0012387:	c1 e2 08             	shl    edx,0x8
c001238a:	09 d0                	or     eax,edx
c001238c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0012391:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012396:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001239b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001239f:	88 90 80 7f 02 c0    	mov    BYTE PTR [eax-0x3ffd8080],dl
c00123a5:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00123aa:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00123af:	66 89 84 12 80 91 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6e80],ax
c00123b7:	e9 b0 00 00 00       	jmp    c001246c <scanMADT()+0x4b8>
c00123bc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00123c1:	0f 85 99 00 00 00    	jne    c0012460 <scanMADT()+0x4ac>
c00123c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123cb:	8d 50 01             	lea    edx,[eax+0x1]
c00123ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00123d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00123da:	0f b6 c0             	movzx  eax,al
c00123dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123e9:	01 d0                	add    eax,edx
c00123eb:	83 c0 2c             	add    eax,0x2c
c00123ee:	8a 00                	mov    al,BYTE PTR [eax]
c00123f0:	0f b6 d0             	movzx  edx,al
c00123f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00123fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012402:	0f b6 c0             	movzx  eax,al
c0012405:	c1 e0 08             	shl    eax,0x8
c0012408:	09 d0                	or     eax,edx
c001240a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001240e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012413:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012417:	8d 50 01             	lea    edx,[eax+0x1]
c001241a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001241e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012422:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012426:	0f b6 c0             	movzx  eax,al
c0012429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001242d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012431:	c1 e0 08             	shl    eax,0x8
c0012434:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012438:	89 c1                	mov    ecx,eax
c001243a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001243e:	c1 e0 18             	shl    eax,0x18
c0012441:	89 c3                	mov    ebx,eax
c0012443:	a1 f0 90 02 c0       	mov    eax,ds:0xc00290f0
c0012448:	8d 50 01             	lea    edx,[eax+0x1]
c001244b:	89 15 f0 90 02 c0    	mov    DWORD PTR ds:0xc00290f0,edx
c0012451:	09 d9                	or     ecx,ebx
c0012453:	89 ca                	mov    edx,ecx
c0012455:	89 14 85 00 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f00],edx
c001245c:	eb 0e                	jmp    c001246c <scanMADT()+0x4b8>
c001245e:	66 90                	xchg   ax,ax
c0012460:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012465:	75 05                	jne    c001246c <scanMADT()+0x4b8>
c0012467:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001246c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012471:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012475:	01 d0                	add    eax,edx
c0012477:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001247b:	e9 68 fc ff ff       	jmp    c00120e8 <scanMADT()+0x134>
c0012480:	90                   	nop
c0012481:	eb 05                	jmp    c0012488 <scanMADT()+0x4d4>
c0012483:	90                   	nop
c0012484:	90                   	nop
c0012485:	8d 76 00             	lea    esi,[esi+0x0]
c0012488:	83 c4 38             	add    esp,0x38
c001248b:	5b                   	pop    ebx
c001248c:	c3                   	ret    
c001248d:	90                   	nop
c001248e:	66 90                	xchg   ax,ax

c0012490 <ACPI::ACPI()>:
c0012490:	83 ec 0c             	sub    esp,0xc
c0012493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012497:	83 ec 08             	sub    esp,0x8
c001249a:	68 e3 5b 02 c0       	push   0xc0025be3
c001249f:	50                   	push   eax
c00124a0:	e8 19 c3 ff ff       	call   c000e7be <Device::Device(char const*)>
c00124a5:	83 c4 10             	add    esp,0x10
c00124a8:	ba a4 5d 02 c0       	mov    edx,0xc0025da4
c00124ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b1:	89 10                	mov    DWORD PTR [eax],edx
c00124b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00124be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00124cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00124da:	83 ec 0c             	sub    esp,0xc
c00124dd:	68 e8 5b 02 c0       	push   0xc0025be8
c00124e2:	e8 ce 78 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00124e7:	83 c4 10             	add    esp,0x10
c00124ea:	e8 c5 fa ff ff       	call   c0011fb4 <scanMADT()>
c00124ef:	90                   	nop
c00124f0:	83 c4 0c             	add    esp,0xc
c00124f3:	c3                   	ret    

c00124f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00124f4:	83 ec 2c             	sub    esp,0x2c
c00124f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00124fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00124ff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012503:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012507:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001250c:	88 d0                	mov    al,dl
c001250e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012512:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012517:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001251f:	90                   	nop
c0012520:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012524:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001252a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001252e:	0f 8d 9c 00 00 00    	jge    c00125d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012534:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012538:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001253c:	83 c2 2a             	add    edx,0x2a
c001253f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012543:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012548:	75 7a                	jne    c00125c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001254a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001254e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012552:	83 c2 2a             	add    edx,0x2a
c0012555:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012559:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001255d:	75 65                	jne    c00125c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001255f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012564:	74 3a                	je     c00125a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0012566:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001256a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001256e:	83 c2 2a             	add    edx,0x2a
c0012571:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012575:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012579:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001257c:	39 c2                	cmp    edx,eax
c001257e:	74 10                	je     c0012590 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012580:	83 ec 0c             	sub    esp,0xc
c0012583:	68 3c 5a 02 c0       	push   0xc0025a3c
c0012588:	e8 58 2a 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c001258d:	83 c4 10             	add    esp,0x10
c0012590:	83 ec 0c             	sub    esp,0xc
c0012593:	68 f6 5b 02 c0       	push   0xc0025bf6
c0012598:	e8 48 2a 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c001259d:	83 c4 10             	add    esp,0x10
c00125a0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00125a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00125ac:	83 c2 2a             	add    edx,0x2a
c00125af:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00125b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00125b5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00125b8:	89 01                	mov    DWORD PTR [ecx],eax
c00125ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00125bd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00125c2:	66 90                	xchg   ax,ax
c00125c4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00125c8:	e9 53 ff ff ff       	jmp    c0012520 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00125cd:	8d 76 00             	lea    esi,[esi+0x0]
c00125d0:	90                   	nop
c00125d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125d5:	83 c4 2c             	add    esp,0x2c
c00125d8:	c2 04 00             	ret    0x4
c00125db:	90                   	nop

c00125dc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00125dc:	83 ec 1c             	sub    esp,0x1c
c00125df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125e3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00125e7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00125f0:	88 c8                	mov    al,cl
c00125f2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00125f6:	88 d0                	mov    al,dl
c00125f8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00125fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012600:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001260a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001260d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012611:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012619:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001261f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012623:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0012626:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001262a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001262f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012633:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012639:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001263d:	8d 48 01             	lea    ecx,[eax+0x1]
c0012640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012644:	83 c2 2a             	add    edx,0x2a
c0012647:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001264b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001264f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012659:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001265c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012660:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012668:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001266e:	8d 50 01             	lea    edx,[eax+0x1]
c0012671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012675:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001267b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001267f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012685:	3d 00 02 00 00       	cmp    eax,0x200
c001268a:	75 10                	jne    c001269c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001268c:	83 ec 0c             	sub    esp,0xc
c001268f:	68 05 5c 02 c0       	push   0xc0025c05
c0012694:	e8 4c 29 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c0012699:	83 c4 10             	add    esp,0x10
c001269c:	90                   	nop
c001269d:	83 c4 1c             	add    esp,0x1c
c00126a0:	c3                   	ret    
c00126a1:	90                   	nop
c00126a2:	66 90                	xchg   ax,ax

c00126a4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00126a4:	b8 00 00 00 00       	mov    eax,0x0
c00126a9:	c3                   	ret    
c00126aa:	66 90                	xchg   ax,ax

c00126ac <ACPI::detectPCI()>:
c00126ac:	53                   	push   ebx
c00126ad:	83 ec 68             	sub    esp,0x68
c00126b0:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00126b5:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00126ba:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c00126bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00126c5:	83 e0 04             	and    eax,0x4
c00126c8:	84 c0                	test   al,al
c00126ca:	74 2c                	je     c00126f8 <ACPI::detectPCI()+0x4c>
c00126cc:	a1 e8 90 02 c0       	mov    eax,ds:0xc00290e8
c00126d1:	83 ec 08             	sub    esp,0x8
c00126d4:	68 22 5c 02 c0       	push   0xc0025c22
c00126d9:	50                   	push   eax
c00126da:	e8 5d f8 ff ff       	call   c0011f3c <findDataTable(unsigned char*, char*)>
c00126df:	83 c4 10             	add    esp,0x10
c00126e2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00126e6:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00126eb:	74 0b                	je     c00126f8 <ACPI::detectPCI()+0x4c>
c00126ed:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00126f2:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00126f7:	90                   	nop
c00126f8:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0012700:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012704:	8a 00                	mov    al,BYTE PTR [eax]
c0012706:	3c 01                	cmp    al,0x1
c0012708:	75 0e                	jne    c0012718 <ACPI::detectPCI()+0x6c>
c001270a:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001270f:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012714:	eb 2a                	jmp    c0012740 <ACPI::detectPCI()+0x94>
c0012716:	66 90                	xchg   ax,ax
c0012718:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001271c:	8a 00                	mov    al,BYTE PTR [eax]
c001271e:	3c 02                	cmp    al,0x2
c0012720:	75 1e                	jne    c0012740 <ACPI::detectPCI()+0x94>
c0012722:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012727:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001272c:	74 12                	je     c0012740 <ACPI::detectPCI()+0x94>
c001272e:	83 ec 0c             	sub    esp,0xc
c0012731:	68 6c 5a 02 c0       	push   0xc0025a6c
c0012736:	e8 aa 28 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c001273b:	83 c4 10             	add    esp,0x10
c001273e:	66 90                	xchg   ax,ax
c0012740:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012744:	83 f0 01             	xor    eax,0x1
c0012747:	84 c0                	test   al,al
c0012749:	74 41                	je     c001278c <ACPI::detectPCI()+0xe0>
c001274b:	e8 00 da fe ff       	call   c0000150 <manualPCIProbe>
c0012750:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012754:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012759:	75 0d                	jne    c0012768 <ACPI::detectPCI()+0xbc>
c001275b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012760:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012765:	eb 25                	jmp    c001278c <ACPI::detectPCI()+0xe0>
c0012767:	90                   	nop
c0012768:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c001276d:	75 1d                	jne    c001278c <ACPI::detectPCI()+0xe0>
c001276f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012774:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012779:	74 11                	je     c001278c <ACPI::detectPCI()+0xe0>
c001277b:	83 ec 0c             	sub    esp,0xc
c001277e:	68 6c 5a 02 c0       	push   0xc0025a6c
c0012783:	e8 5d 28 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c0012788:	83 c4 10             	add    esp,0x10
c001278b:	90                   	nop
c001278c:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012791:	0f 84 49 03 00 00    	je     c0012ae0 <ACPI::detectPCI()+0x434>
c0012797:	83 ec 0c             	sub    esp,0xc
c001279a:	68 27 5c 02 c0       	push   0xc0025c27
c001279f:	e8 11 76 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00127a4:	83 c4 10             	add    esp,0x10
c00127a7:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00127ac:	0f 84 8e 00 00 00    	je     c0012840 <ACPI::detectPCI()+0x194>
c00127b2:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c00127b7:	25 00 08 00 00       	and    eax,0x800
c00127bc:	0f 84 16 01 00 00    	je     c00128d8 <ACPI::detectPCI()+0x22c>
c00127c2:	83 ec 0c             	sub    esp,0xc
c00127c5:	68 94 5a 02 c0       	push   0xc0025a94
c00127ca:	e8 e6 75 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00127cf:	83 c4 10             	add    esp,0x10
c00127d2:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c00127d7:	25 80 00 00 00       	and    eax,0x80
c00127dc:	0f 85 f6 00 00 00    	jne    c00128d8 <ACPI::detectPCI()+0x22c>
c00127e2:	66 90                	xchg   ax,ax
c00127e4:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00127eb:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00127f0:	89 c2                	mov    edx,eax
c00127f2:	ec                   	in     al,dx
c00127f3:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00127f7:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00127fb:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00127ff:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012804:	74 0a                	je     c0012810 <ACPI::detectPCI()+0x164>
c0012806:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c001280b:	74 03                	je     c0012810 <ACPI::detectPCI()+0x164>
c001280d:	eb d5                	jmp    c00127e4 <ACPI::detectPCI()+0x138>
c001280f:	90                   	nop
c0012810:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0012817:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c001281c:	89 c2                	mov    edx,eax
c001281e:	ec                   	in     al,dx
c001281f:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0012823:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0012827:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c001282b:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012830:	74 de                	je     c0012810 <ACPI::detectPCI()+0x164>
c0012832:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012837:	0f 85 93 00 00 00    	jne    c00128d0 <ACPI::detectPCI()+0x224>
c001283d:	eb d1                	jmp    c0012810 <ACPI::detectPCI()+0x164>
c001283f:	90                   	nop
c0012840:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012844:	83 f0 01             	xor    eax,0x1
c0012847:	84 c0                	test   al,al
c0012849:	0f 84 89 00 00 00    	je     c00128d8 <ACPI::detectPCI()+0x22c>
c001284f:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0012854:	25 00 08 00 00       	and    eax,0x800
c0012859:	74 7d                	je     c00128d8 <ACPI::detectPCI()+0x22c>
c001285b:	83 ec 0c             	sub    esp,0xc
c001285e:	68 b8 5a 02 c0       	push   0xc0025ab8
c0012863:	e8 4d 75 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012868:	83 c4 10             	add    esp,0x10
c001286b:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0012870:	25 80 00 00 00       	and    eax,0x80
c0012875:	75 61                	jne    c00128d8 <ACPI::detectPCI()+0x22c>
c0012877:	90                   	nop
c0012878:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001287f:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012884:	89 c2                	mov    edx,eax
c0012886:	ec                   	in     al,dx
c0012887:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001288b:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001288f:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012893:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012898:	74 0a                	je     c00128a4 <ACPI::detectPCI()+0x1f8>
c001289a:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c001289f:	74 03                	je     c00128a4 <ACPI::detectPCI()+0x1f8>
c00128a1:	eb d5                	jmp    c0012878 <ACPI::detectPCI()+0x1cc>
c00128a3:	90                   	nop
c00128a4:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00128ab:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00128b0:	89 c2                	mov    edx,eax
c00128b2:	ec                   	in     al,dx
c00128b3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00128b7:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00128bb:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00128bf:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00128c4:	74 de                	je     c00128a4 <ACPI::detectPCI()+0x1f8>
c00128c6:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00128cb:	75 07                	jne    c00128d4 <ACPI::detectPCI()+0x228>
c00128cd:	eb d5                	jmp    c00128a4 <ACPI::detectPCI()+0x1f8>
c00128cf:	90                   	nop
c00128d0:	90                   	nop
c00128d1:	eb 05                	jmp    c00128d8 <ACPI::detectPCI()+0x22c>
c00128d3:	90                   	nop
c00128d4:	90                   	nop
c00128d5:	8d 76 00             	lea    esi,[esi+0x0]
c00128d8:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c00128e0:	83 ec 0c             	sub    esp,0xc
c00128e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00128e7:	e8 6f 74 ff ff       	call   c0009d5b <malloc>
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	89 c3                	mov    ebx,eax
c00128f1:	83 ec 0c             	sub    esp,0xc
c00128f4:	53                   	push   ebx
c00128f5:	e8 9c af 00 00       	call   c001d896 <PCI::PCI()>
c00128fa:	83 c4 10             	add    esp,0x10
c00128fd:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012901:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0012906:	25 00 08 00 00       	and    eax,0x800
c001290b:	74 7b                	je     c0012988 <ACPI::detectPCI()+0x2dc>
c001290d:	83 ec 0c             	sub    esp,0xc
c0012910:	68 3f 5c 02 c0       	push   0xc0025c3f
c0012915:	e8 9b 74 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001291a:	83 c4 10             	add    esp,0x10
c001291d:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0012922:	25 80 00 00 00       	and    eax,0x80
c0012927:	75 5f                	jne    c0012988 <ACPI::detectPCI()+0x2dc>
c0012929:	8d 76 00             	lea    esi,[esi+0x0]
c001292c:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012933:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012938:	89 c2                	mov    edx,eax
c001293a:	ec                   	in     al,dx
c001293b:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001293f:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012943:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012947:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c001294c:	74 0a                	je     c0012958 <ACPI::detectPCI()+0x2ac>
c001294e:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012953:	74 03                	je     c0012958 <ACPI::detectPCI()+0x2ac>
c0012955:	eb d5                	jmp    c001292c <ACPI::detectPCI()+0x280>
c0012957:	90                   	nop
c0012958:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c001295f:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012964:	89 c2                	mov    edx,eax
c0012966:	ec                   	in     al,dx
c0012967:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001296b:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c001296f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012973:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012978:	74 de                	je     c0012958 <ACPI::detectPCI()+0x2ac>
c001297a:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001297f:	75 03                	jne    c0012984 <ACPI::detectPCI()+0x2d8>
c0012981:	eb d5                	jmp    c0012958 <ACPI::detectPCI()+0x2ac>
c0012983:	90                   	nop
c0012984:	90                   	nop
c0012985:	8d 76 00             	lea    esi,[esi+0x0]
c0012988:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001298c:	83 ec 08             	sub    esp,0x8
c001298f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012993:	50                   	push   eax
c0012994:	e8 21 bc ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0012999:	83 c4 10             	add    esp,0x10
c001299c:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c00129a1:	25 00 08 00 00       	and    eax,0x800
c00129a6:	74 78                	je     c0012a20 <ACPI::detectPCI()+0x374>
c00129a8:	83 ec 0c             	sub    esp,0xc
c00129ab:	68 45 5c 02 c0       	push   0xc0025c45
c00129b0:	e8 00 74 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00129b5:	83 c4 10             	add    esp,0x10
c00129b8:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c00129bd:	25 80 00 00 00       	and    eax,0x80
c00129c2:	75 5c                	jne    c0012a20 <ACPI::detectPCI()+0x374>
c00129c4:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c00129cb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00129d0:	89 c2                	mov    edx,eax
c00129d2:	ec                   	in     al,dx
c00129d3:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00129d7:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c00129db:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c00129df:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c00129e4:	74 0a                	je     c00129f0 <ACPI::detectPCI()+0x344>
c00129e6:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c00129eb:	74 03                	je     c00129f0 <ACPI::detectPCI()+0x344>
c00129ed:	eb d5                	jmp    c00129c4 <ACPI::detectPCI()+0x318>
c00129ef:	90                   	nop
c00129f0:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c00129f7:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00129fc:	89 c2                	mov    edx,eax
c00129fe:	ec                   	in     al,dx
c00129ff:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012a03:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012a07:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012a0b:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012a10:	74 de                	je     c00129f0 <ACPI::detectPCI()+0x344>
c0012a12:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012a17:	75 03                	jne    c0012a1c <ACPI::detectPCI()+0x370>
c0012a19:	eb d5                	jmp    c00129f0 <ACPI::detectPCI()+0x344>
c0012a1b:	90                   	nop
c0012a1c:	90                   	nop
c0012a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a20:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012a24:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a26:	83 c0 08             	add    eax,0x8
c0012a29:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a2b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012a30:	74 0a                	je     c0012a3c <ACPI::detectPCI()+0x390>
c0012a32:	ba 01 00 00 00       	mov    edx,0x1
c0012a37:	eb 0b                	jmp    c0012a44 <ACPI::detectPCI()+0x398>
c0012a39:	8d 76 00             	lea    esi,[esi+0x0]
c0012a3c:	ba 02 00 00 00       	mov    edx,0x2
c0012a41:	8d 76 00             	lea    esi,[esi+0x0]
c0012a44:	6a 00                	push   0x0
c0012a46:	6a 00                	push   0x0
c0012a48:	52                   	push   edx
c0012a49:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012a4d:	ff d0                	call   eax
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0012a57:	25 00 08 00 00       	and    eax,0x800
c0012a5c:	0f 84 26 01 00 00    	je     c0012b88 <ACPI::detectPCI()+0x4dc>
c0012a62:	83 ec 0c             	sub    esp,0xc
c0012a65:	68 4b 5c 02 c0       	push   0xc0025c4b
c0012a6a:	e8 46 73 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012a6f:	83 c4 10             	add    esp,0x10
c0012a72:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0012a77:	25 80 00 00 00       	and    eax,0x80
c0012a7c:	0f 85 06 01 00 00    	jne    c0012b88 <ACPI::detectPCI()+0x4dc>
c0012a82:	66 90                	xchg   ax,ax
c0012a84:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012a8b:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012a90:	89 c2                	mov    edx,eax
c0012a92:	ec                   	in     al,dx
c0012a93:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012a97:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012a9b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012a9f:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012aa4:	74 0a                	je     c0012ab0 <ACPI::detectPCI()+0x404>
c0012aa6:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012aab:	74 03                	je     c0012ab0 <ACPI::detectPCI()+0x404>
c0012aad:	eb d5                	jmp    c0012a84 <ACPI::detectPCI()+0x3d8>
c0012aaf:	90                   	nop
c0012ab0:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012ab7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012abc:	89 c2                	mov    edx,eax
c0012abe:	ec                   	in     al,dx
c0012abf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012ac3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012ac7:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012acb:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012ad0:	74 de                	je     c0012ab0 <ACPI::detectPCI()+0x404>
c0012ad2:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012ad7:	0f 85 a7 00 00 00    	jne    c0012b84 <ACPI::detectPCI()+0x4d8>
c0012add:	eb d1                	jmp    c0012ab0 <ACPI::detectPCI()+0x404>
c0012adf:	90                   	nop
c0012ae0:	83 ec 0c             	sub    esp,0xc
c0012ae3:	68 51 5c 02 c0       	push   0xc0025c51
c0012ae8:	e8 5a a5 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	83 ec 0c             	sub    esp,0xc
c0012af3:	68 5c 5c 02 c0       	push   0xc0025c5c
c0012af8:	e8 b8 72 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012afd:	83 c4 10             	add    esp,0x10
c0012b00:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b0f:	e8 47 72 ff ff       	call   c0009d5b <malloc>
c0012b14:	83 c4 10             	add    esp,0x10
c0012b17:	89 c3                	mov    ebx,eax
c0012b19:	83 ec 0c             	sub    esp,0xc
c0012b1c:	53                   	push   ebx
c0012b1d:	e8 de be 00 00       	call   c001ea00 <IDE::IDE()>
c0012b22:	83 c4 10             	add    esp,0x10
c0012b25:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012b29:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012b2d:	83 ec 08             	sub    esp,0x8
c0012b30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012b34:	50                   	push   eax
c0012b35:	e8 80 ba ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0012b3a:	83 c4 10             	add    esp,0x10
c0012b3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b41:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012b4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b4f:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012b58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b5c:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012b65:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b6b:	83 c0 08             	add    eax,0x8
c0012b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b70:	6a 00                	push   0x0
c0012b72:	6a 00                	push   0x0
c0012b74:	6a 00                	push   0x0
c0012b76:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012b7a:	ff d0                	call   eax
c0012b7c:	83 c4 10             	add    esp,0x10
c0012b7f:	eb 07                	jmp    c0012b88 <ACPI::detectPCI()+0x4dc>
c0012b81:	8d 76 00             	lea    esi,[esi+0x0]
c0012b84:	90                   	nop
c0012b85:	8d 76 00             	lea    esi,[esi+0x0]
c0012b88:	90                   	nop
c0012b89:	83 c4 68             	add    esp,0x68
c0012b8c:	5b                   	pop    ebx
c0012b8d:	c3                   	ret    
c0012b8e:	66 90                	xchg   ax,ax

c0012b90 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012b90:	83 ec 1c             	sub    esp,0x1c
c0012b93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b97:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012b9a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012b9e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0012ba3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012ba8:	83 ec 08             	sub    esp,0x8
c0012bab:	52                   	push   edx
c0012bac:	50                   	push   eax
c0012bad:	e8 70 67 ff ff       	call   c0009322 <Computer::readCMOS(unsigned char)>
c0012bb2:	83 c4 10             	add    esp,0x10
c0012bb5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012bb9:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0012bbe:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012bc3:	83 ec 04             	sub    esp,0x4
c0012bc6:	6a 01                	push   0x1
c0012bc8:	52                   	push   edx
c0012bc9:	50                   	push   eax
c0012bca:	e8 37 69 ff ff       	call   c0009506 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012bcf:	83 c4 10             	add    esp,0x10
c0012bd2:	90                   	nop
c0012bd3:	83 c4 1c             	add    esp,0x1c
c0012bd6:	c3                   	ret    
c0012bd7:	90                   	nop

c0012bd8 <ACPI::sleep()>:
c0012bd8:	83 ec 0c             	sub    esp,0xc
c0012bdb:	83 ec 0c             	sub    esp,0xc
c0012bde:	68 71 5c 02 c0       	push   0xc0025c71
c0012be3:	e8 5f a4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0012be8:	83 c4 10             	add    esp,0x10
c0012beb:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0012bf0:	85 c0                	test   eax,eax
c0012bf2:	74 18                	je     c0012c0c <ACPI::sleep()+0x34>
c0012bf4:	83 ec 0c             	sub    esp,0xc
c0012bf7:	68 7e 5c 02 c0       	push   0xc0025c7e
c0012bfc:	e8 46 a4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0012c01:	83 c4 10             	add    esp,0x10
c0012c04:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0012c09:	ff d0                	call   eax
c0012c0b:	90                   	nop
c0012c0c:	90                   	nop
c0012c0d:	83 c4 0c             	add    esp,0xc
c0012c10:	c3                   	ret    
c0012c11:	90                   	nop
c0012c12:	66 90                	xchg   ax,ax

c0012c14 <ACPI::open(int, int, void*)>:
c0012c14:	57                   	push   edi
c0012c15:	56                   	push   esi
c0012c16:	53                   	push   ebx
c0012c17:	81 ec 70 01 00 00    	sub    esp,0x170
c0012c1d:	83 ec 0c             	sub    esp,0xc
c0012c20:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012c27:	e8 80 fa ff ff       	call   c00126ac <ACPI::detectPCI()>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	83 ec 0c             	sub    esp,0xc
c0012c32:	68 dc 5a 02 c0       	push   0xc0025adc
c0012c37:	e8 79 71 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012c3c:	83 c4 10             	add    esp,0x10
c0012c3f:	83 ec 0c             	sub    esp,0xc
c0012c42:	68 98 5c 02 c0       	push   0xc0025c98
c0012c47:	e8 47 4b 00 00       	call   c0017793 <Thr::loadKernelSymbolTable(char const*)>
c0012c4c:	83 c4 10             	add    esp,0x10
c0012c4f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012c57:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012c62:	83 ec 0c             	sub    esp,0xc
c0012c65:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012c6c:	e8 ea 70 ff ff       	call   c0009d5b <malloc>
c0012c71:	83 c4 10             	add    esp,0x10
c0012c74:	89 c3                	mov    ebx,eax
c0012c76:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c0012c7b:	83 ec 04             	sub    esp,0x4
c0012c7e:	50                   	push   eax
c0012c7f:	68 b6 5c 02 c0       	push   0xc0025cb6
c0012c84:	53                   	push   ebx
c0012c85:	e8 28 a9 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0012c8a:	83 c4 10             	add    esp,0x10
c0012c8d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012c94:	83 ec 08             	sub    esp,0x8
c0012c97:	6a 01                	push   0x1
c0012c99:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012ca0:	e8 e7 a9 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0012ca5:	83 c4 10             	add    esp,0x10
c0012ca8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012caf:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012cb7:	75 17                	jne    c0012cd0 <ACPI::open(int, int, void*)+0xbc>
c0012cb9:	83 ec 0c             	sub    esp,0xc
c0012cbc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012cc3:	e8 22 aa ff ff       	call   c000d6ea <File::close()>
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	eb 0b                	jmp    c0012cd8 <ACPI::open(int, int, void*)+0xc4>
c0012ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0012cd0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012cd8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012ce0:	74 1e                	je     c0012d00 <ACPI::open(int, int, void*)+0xec>
c0012ce2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ceb:	83 c0 08             	add    eax,0x8
c0012cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cf0:	83 ec 0c             	sub    esp,0xc
c0012cf3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012cfa:	ff d0                	call   eax
c0012cfc:	83 c4 10             	add    esp,0x10
c0012cff:	90                   	nop
c0012d00:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012d07:	83 f0 01             	xor    eax,0x1
c0012d0a:	84 c0                	test   al,al
c0012d0c:	74 42                	je     c0012d50 <ACPI::open(int, int, void*)+0x13c>
c0012d0e:	83 ec 0c             	sub    esp,0xc
c0012d11:	68 d4 5c 02 c0       	push   0xc0025cd4
c0012d16:	e8 9a 70 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	83 ec 04             	sub    esp,0x4
c0012d21:	6a 0c                	push   0xc
c0012d23:	68 ef 5c 02 c0       	push   0xc0025cef
c0012d28:	68 00 5d 02 c0       	push   0xc0025d00
c0012d2d:	e8 cb 30 00 00       	call   c0015dfd <Reg::readIntWithDefault(char*, char*, int)>
c0012d32:	83 c4 10             	add    esp,0x10
c0012d35:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012d46:	e8 e0 91 ff ff       	call   c000bf2b <Virt::setupPageSwapping(int)>
c0012d4b:	83 c4 10             	add    esp,0x10
c0012d4e:	66 90                	xchg   ax,ax
c0012d50:	83 ec 0c             	sub    esp,0xc
c0012d53:	68 c6 42 02 c0       	push   0xc00242c6
c0012d58:	e8 58 70 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012d5d:	83 c4 10             	add    esp,0x10
c0012d60:	8b 1d 88 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028888
c0012d66:	83 ec 08             	sub    esp,0x8
c0012d69:	6a 01                	push   0x1
c0012d6b:	68 07 5d 02 c0       	push   0xc0025d07
c0012d70:	e8 95 54 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c0012d75:	83 c4 10             	add    esp,0x10
c0012d78:	83 ec 08             	sub    esp,0x8
c0012d7b:	53                   	push   ebx
c0012d7c:	50                   	push   eax
c0012d7d:	e8 b9 56 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c0012d82:	83 c4 10             	add    esp,0x10
c0012d85:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012d8c:	83 ec 08             	sub    esp,0x8
c0012d8f:	6a 12                	push   0x12
c0012d91:	50                   	push   eax
c0012d92:	e8 a7 bb ff ff       	call   c000e93e <getDevicesOfType(DeviceType)>
c0012d97:	83 c4 0c             	add    esp,0xc
c0012d9a:	66 90                	xchg   ax,ax
c0012d9c:	83 ec 0c             	sub    esp,0xc
c0012d9f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012da6:	50                   	push   eax
c0012da7:	e8 04 07 01 00       	call   c00234b0 <LinkedList<Device>::isEmpty()>
c0012dac:	83 c4 10             	add    esp,0x10
c0012daf:	83 f0 01             	xor    eax,0x1
c0012db2:	84 c0                	test   al,al
c0012db4:	0f 84 46 01 00 00    	je     c0012f00 <ACPI::open(int, int, void*)+0x2ec>
c0012dba:	83 ec 0c             	sub    esp,0xc
c0012dbd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012dc4:	50                   	push   eax
c0012dc5:	e8 02 07 01 00       	call   c00234cc <LinkedList<Device>::getFirstElement()>
c0012dca:	83 c4 10             	add    esp,0x10
c0012dcd:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012dd4:	83 ec 0c             	sub    esp,0xc
c0012dd7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012dde:	50                   	push   eax
c0012ddf:	e8 f0 06 01 00       	call   c00234d4 <LinkedList<Device>::removeFirst()>
c0012de4:	83 c4 10             	add    esp,0x10
c0012de7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012dee:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012df5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012dfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e00:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012e06:	ba 09 00 00 00       	mov    edx,0x9
c0012e0b:	fc                   	cld    
c0012e0c:	89 c7                	mov    edi,eax
c0012e0e:	89 de                	mov    esi,ebx
c0012e10:	89 d1                	mov    ecx,edx
c0012e12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012e14:	83 ec 08             	sub    esp,0x8
c0012e17:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012e1b:	50                   	push   eax
c0012e1c:	83 ec 24             	sub    esp,0x24
c0012e1f:	89 e0                	mov    eax,esp
c0012e21:	89 c3                	mov    ebx,eax
c0012e23:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012e27:	ba 09 00 00 00       	mov    edx,0x9
c0012e2c:	89 df                	mov    edi,ebx
c0012e2e:	89 c6                	mov    esi,eax
c0012e30:	89 d1                	mov    ecx,edx
c0012e32:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012e34:	e8 3b af 00 00       	call   c001dd74 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012e39:	83 c4 30             	add    esp,0x30
c0012e3c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012e43:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012e4b:	0f 84 4b ff ff ff    	je     c0012d9c <ACPI::open(int, int, void*)+0x188>
c0012e51:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012e5c:	83 ec 0c             	sub    esp,0xc
c0012e5f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012e66:	e8 f0 6e ff ff       	call   c0009d5b <malloc>
c0012e6b:	83 c4 10             	add    esp,0x10
c0012e6e:	89 c3                	mov    ebx,eax
c0012e70:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c0012e75:	83 ec 04             	sub    esp,0x4
c0012e78:	50                   	push   eax
c0012e79:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012e80:	53                   	push   ebx
c0012e81:	e8 2c a7 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0012e86:	83 c4 10             	add    esp,0x10
c0012e89:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012e90:	83 ec 0c             	sub    esp,0xc
c0012e93:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012e9a:	e8 5b aa ff ff       	call   c000d8fa <File::exists()>
c0012e9f:	83 c4 10             	add    esp,0x10
c0012ea2:	84 c0                	test   al,al
c0012ea4:	74 2a                	je     c0012ed0 <ACPI::open(int, int, void*)+0x2bc>
c0012ea6:	83 ec 08             	sub    esp,0x8
c0012ea9:	6a 01                	push   0x1
c0012eab:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012eb2:	e8 53 53 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c0012eb7:	83 c4 10             	add    esp,0x10
c0012eba:	83 ec 08             	sub    esp,0x8
c0012ebd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012ec4:	50                   	push   eax
c0012ec5:	e8 71 55 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ed0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012ed8:	0f 84 be fe ff ff    	je     c0012d9c <ACPI::open(int, int, void*)+0x188>
c0012ede:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012ee5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ee7:	83 c0 08             	add    eax,0x8
c0012eea:	8b 00                	mov    eax,DWORD PTR [eax]
c0012eec:	83 ec 0c             	sub    esp,0xc
c0012eef:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012ef6:	ff d0                	call   eax
c0012ef8:	83 c4 10             	add    esp,0x10
c0012efb:	e9 9c fe ff ff       	jmp    c0012d9c <ACPI::open(int, int, void*)+0x188>
c0012f00:	83 ec 0c             	sub    esp,0xc
c0012f03:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f0a:	50                   	push   eax
c0012f0b:	e8 9c 05 01 00       	call   c00234ac <LinkedList<Device>::~LinkedList()>
c0012f10:	83 c4 10             	add    esp,0x10
c0012f13:	8b 1d 88 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028888
c0012f19:	83 ec 08             	sub    esp,0x8
c0012f1c:	6a 01                	push   0x1
c0012f1e:	68 22 5d 02 c0       	push   0xc0025d22
c0012f23:	e8 e2 52 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c0012f28:	83 c4 10             	add    esp,0x10
c0012f2b:	83 ec 08             	sub    esp,0x8
c0012f2e:	53                   	push   ebx
c0012f2f:	50                   	push   eax
c0012f30:	e8 06 55 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c0012f35:	83 c4 10             	add    esp,0x10
c0012f38:	8b 1d 88 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028888
c0012f3e:	83 ec 08             	sub    esp,0x8
c0012f41:	6a 01                	push   0x1
c0012f43:	68 3f 5d 02 c0       	push   0xc0025d3f
c0012f48:	e8 bd 52 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c0012f4d:	83 c4 10             	add    esp,0x10
c0012f50:	83 ec 08             	sub    esp,0x8
c0012f53:	53                   	push   ebx
c0012f54:	50                   	push   eax
c0012f55:	e8 e1 54 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c0012f5a:	83 c4 10             	add    esp,0x10
c0012f5d:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0012f62:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012f68:	83 e0 04             	and    eax,0x4
c0012f6b:	84 c0                	test   al,al
c0012f6d:	0f 84 15 01 00 00    	je     c0013088 <ACPI::open(int, int, void*)+0x474>
c0012f73:	83 ec 0c             	sub    esp,0xc
c0012f76:	68 5c 5d 02 c0       	push   0xc0025d5c
c0012f7b:	e8 35 6e ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012f80:	83 c4 10             	add    esp,0x10
c0012f83:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012f8e:	83 ec 0c             	sub    esp,0xc
c0012f91:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012f98:	e8 be 6d ff ff       	call   c0009d5b <malloc>
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	89 c3                	mov    ebx,eax
c0012fa2:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c0012fa7:	83 ec 04             	sub    esp,0x4
c0012faa:	50                   	push   eax
c0012fab:	68 79 5d 02 c0       	push   0xc0025d79
c0012fb0:	53                   	push   ebx
c0012fb1:	e8 fc a5 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0012fb6:	83 c4 10             	add    esp,0x10
c0012fb9:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012fc0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012fc8:	74 1a                	je     c0012fe4 <ACPI::open(int, int, void*)+0x3d0>
c0012fca:	83 ec 0c             	sub    esp,0xc
c0012fcd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012fd4:	e8 21 a9 ff ff       	call   c000d8fa <File::exists()>
c0012fd9:	83 c4 10             	add    esp,0x10
c0012fdc:	84 c0                	test   al,al
c0012fde:	74 04                	je     c0012fe4 <ACPI::open(int, int, void*)+0x3d0>
c0012fe0:	b0 01                	mov    al,0x1
c0012fe2:	eb 04                	jmp    c0012fe8 <ACPI::open(int, int, void*)+0x3d4>
c0012fe4:	b0 00                	mov    al,0x0
c0012fe6:	66 90                	xchg   ax,ax
c0012fe8:	84 c0                	test   al,al
c0012fea:	74 28                	je     c0013014 <ACPI::open(int, int, void*)+0x400>
c0012fec:	83 ec 08             	sub    esp,0x8
c0012fef:	6a 01                	push   0x1
c0012ff1:	68 79 5d 02 c0       	push   0xc0025d79
c0012ff6:	e8 0f 52 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c0012ffb:	83 c4 10             	add    esp,0x10
c0012ffe:	83 ec 08             	sub    esp,0x8
c0013001:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0013008:	50                   	push   eax
c0013009:	e8 2d 54 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c001300e:	83 c4 10             	add    esp,0x10
c0013011:	8d 76 00             	lea    esi,[esi+0x0]
c0013014:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001301c:	74 2a                	je     c0013048 <ACPI::open(int, int, void*)+0x434>
c001301e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013026:	74 20                	je     c0013048 <ACPI::open(int, int, void*)+0x434>
c0013028:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001302f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013031:	83 c0 08             	add    eax,0x8
c0013034:	8b 00                	mov    eax,DWORD PTR [eax]
c0013036:	83 ec 0c             	sub    esp,0xc
c0013039:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013040:	ff d0                	call   eax
c0013042:	83 c4 10             	add    esp,0x10
c0013045:	8d 76 00             	lea    esi,[esi+0x0]
c0013048:	a1 e8 90 02 c0       	mov    eax,ds:0xc00290e8
c001304d:	83 ec 08             	sub    esp,0x8
c0013050:	68 96 5d 02 c0       	push   0xc0025d96
c0013055:	50                   	push   eax
c0013056:	e8 e1 ee ff ff       	call   c0011f3c <findDataTable(unsigned char*, char*)>
c001305b:	83 c4 10             	add    esp,0x10
c001305e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0013065:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001306d:	74 19                	je     c0013088 <ACPI::open(int, int, void*)+0x474>
c001306f:	83 ec 08             	sub    esp,0x8
c0013072:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0013079:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0013080:	e8 0b fb ff ff       	call   c0012b90 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013085:	83 c4 10             	add    esp,0x10
c0013088:	b8 00 00 00 00       	mov    eax,0x0
c001308d:	81 c4 70 01 00 00    	add    esp,0x170
c0013093:	5b                   	pop    ebx
c0013094:	5e                   	pop    esi
c0013095:	5f                   	pop    edi
c0013096:	c3                   	ret    
c0013097:	90                   	nop

c0013098 <CPU::close(int, int, void*)>:
c0013098:	31 c0                	xor    eax,eax
c001309a:	c3                   	ret    
c001309b:	90                   	nop

c001309c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001309c:	55                   	push   ebp
c001309d:	57                   	push   edi
c001309e:	56                   	push   esi
c001309f:	53                   	push   ebx
c00130a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00130a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00130a8:	89 ce                	mov    esi,ecx
c00130aa:	89 d5                	mov    ebp,edx
c00130ac:	80 f9 04             	cmp    cl,0x4
c00130af:	75 28                	jne    c00130d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00130b1:	8d 42 f9             	lea    eax,[edx-0x7]
c00130b4:	3c 03                	cmp    al,0x3
c00130b6:	0f 86 63 01 00 00    	jbe    c001321f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00130bc:	80 fa 03             	cmp    dl,0x3
c00130bf:	0f 84 5a 01 00 00    	je     c001321f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00130c5:	8d 7a f2             	lea    edi,[edx-0xe]
c00130c8:	b8 50 81 02 c0       	mov    eax,0xc0028150
c00130cd:	89 fb                	mov    ebx,edi
c00130cf:	80 fb 01             	cmp    bl,0x1
c00130d2:	77 4e                	ja     c0013122 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00130d4:	e9 52 01 00 00       	jmp    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00130d9:	80 f9 05             	cmp    cl,0x5
c00130dc:	75 4d                	jne    c001312b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00130de:	b8 60 81 02 c0       	mov    eax,0xc0028160
c00130e3:	80 fa 03             	cmp    dl,0x3
c00130e6:	0f 86 3f 01 00 00    	jbe    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00130ec:	8d 7a fa             	lea    edi,[edx-0x6]
c00130ef:	b8 70 81 02 c0       	mov    eax,0xc0028170
c00130f4:	89 fb                	mov    ebx,edi
c00130f6:	80 fb 01             	cmp    bl,0x1
c00130f9:	0f 86 2c 01 00 00    	jbe    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00130ff:	b8 80 81 02 c0       	mov    eax,0xc0028180
c0013104:	80 fa 08             	cmp    dl,0x8
c0013107:	0f 84 1e 01 00 00    	je     c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001310d:	89 d7                	mov    edi,edx
c001310f:	b8 90 81 02 c0       	mov    eax,0xc0028190
c0013114:	83 e7 fb             	and    edi,0xfffffffb
c0013117:	89 fb                	mov    ebx,edi
c0013119:	80 fb 09             	cmp    bl,0x9
c001311c:	0f 84 09 01 00 00    	je     c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013122:	31 c0                	xor    eax,eax
c0013124:	89 eb                	mov    ebx,ebp
c0013126:	0f b6 fb             	movzx  edi,bl
c0013129:	eb 30                	jmp    c001315b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001312b:	31 c0                	xor    eax,eax
c001312d:	80 f9 06             	cmp    cl,0x6
c0013130:	75 f2                	jne    c0013124 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013132:	80 fa 0a             	cmp    dl,0xa
c0013135:	77 ed                	ja     c0013124 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013137:	bf de 05 00 00       	mov    edi,0x5de
c001313c:	0f a3 d7             	bt     edi,edx
c001313f:	73 e3                	jae    c0013124 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013141:	b8 a0 81 02 c0       	mov    eax,0xc00281a0
c0013146:	e9 e0 00 00 00       	jmp    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001314b:	39 c7                	cmp    edi,eax
c001314d:	0f 84 d3 00 00 00    	je     c0013226 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013153:	40                   	inc    eax
c0013154:	3d d0 00 00 00       	cmp    eax,0xd0
c0013159:	74 09                	je     c0013164 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001315b:	89 f3                	mov    ebx,esi
c001315d:	80 fb 0f             	cmp    bl,0xf
c0013160:	75 f1                	jne    c0013153 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0013162:	eb e7                	jmp    c001314b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0013164:	80 f9 10             	cmp    cl,0x10
c0013167:	75 14                	jne    c001317d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0013169:	8d 42 fc             	lea    eax,[edx-0x4]
c001316c:	83 e0 fb             	and    eax,0xfffffffb
c001316f:	3c 02                	cmp    al,0x2
c0013171:	76 34                	jbe    c00131a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0013173:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c0013178:	80 fa 02             	cmp    dl,0x2
c001317b:	eb 24                	jmp    c00131a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001317d:	80 f9 11             	cmp    cl,0x11
c0013180:	75 13                	jne    c0013195 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0013182:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c0013187:	80 fa 03             	cmp    dl,0x3
c001318a:	0f 85 9b 00 00 00    	jne    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013190:	e9 91 00 00 00       	jmp    c0013226 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013195:	80 f9 12             	cmp    cl,0x12
c0013198:	75 14                	jne    c00131ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001319a:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c001319f:	fe ca                	dec    dl
c00131a1:	0f 85 84 00 00 00    	jne    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131a7:	b8 c0 81 02 c0       	mov    eax,0xc00281c0
c00131ac:	eb 7d                	jmp    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131ae:	80 f9 14             	cmp    cl,0x14
c00131b1:	75 12                	jne    c00131c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00131b3:	4a                   	dec    edx
c00131b4:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c00131b9:	80 fa 01             	cmp    dl,0x1
c00131bc:	77 6d                	ja     c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131be:	b8 d0 81 02 c0       	mov    eax,0xc00281d0
c00131c3:	eb 66                	jmp    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131c5:	80 f9 15             	cmp    cl,0x15
c00131c8:	75 31                	jne    c00131fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00131ca:	b8 e0 81 02 c0       	mov    eax,0xc00281e0
c00131cf:	80 fa 01             	cmp    dl,0x1
c00131d2:	74 57                	je     c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131d4:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c00131d9:	80 fa 13             	cmp    dl,0x13
c00131dc:	76 0c                	jbe    c00131ea <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00131de:	80 fa 30             	cmp    dl,0x30
c00131e1:	75 48                	jne    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131e3:	b8 00 82 02 c0       	mov    eax,0xc0028200
c00131e8:	eb 41                	jmp    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131ea:	b9 04 00 09 00       	mov    ecx,0x90004
c00131ef:	0f a3 d1             	bt     ecx,edx
c00131f2:	73 37                	jae    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131f4:	b8 f0 81 02 c0       	mov    eax,0xc00281f0
c00131f9:	eb 30                	jmp    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131fb:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c0013200:	80 f9 16             	cmp    cl,0x16
c0013203:	75 26                	jne    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013205:	b8 10 82 02 c0       	mov    eax,0xc0028210
c001320a:	84 d2                	test   dl,dl
c001320c:	74 1d                	je     c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001320e:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c0013213:	80 fa 30             	cmp    dl,0x30
c0013216:	75 13                	jne    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013218:	b8 20 82 02 c0       	mov    eax,0xc0028220
c001321d:	eb 0c                	jmp    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001321f:	b8 40 81 02 c0       	mov    eax,0xc0028140
c0013224:	eb 05                	jmp    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013226:	b8 b0 81 02 c0       	mov    eax,0xc00281b0
c001322b:	5b                   	pop    ebx
c001322c:	5e                   	pop    esi
c001322d:	5f                   	pop    edi
c001322e:	5d                   	pop    ebp
c001322f:	c3                   	ret    

c0013230 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0013230:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013234:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013238:	80 f9 04             	cmp    cl,0x4
c001323b:	75 6b                	jne    c00132a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001323d:	b8 a0 7f 02 c0       	mov    eax,0xc0027fa0
c0013242:	80 fa 01             	cmp    dl,0x1
c0013245:	0f 86 92 02 00 00    	jbe    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001324b:	b8 b0 7f 02 c0       	mov    eax,0xc0027fb0
c0013250:	80 fa 02             	cmp    dl,0x2
c0013253:	0f 84 84 02 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013259:	b8 c0 7f 02 c0       	mov    eax,0xc0027fc0
c001325e:	80 fa 03             	cmp    dl,0x3
c0013261:	0f 84 76 02 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013267:	b8 d0 7f 02 c0       	mov    eax,0xc0027fd0
c001326c:	80 fa 04             	cmp    dl,0x4
c001326f:	0f 84 68 02 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013275:	b8 e0 7f 02 c0       	mov    eax,0xc0027fe0
c001327a:	80 fa 05             	cmp    dl,0x5
c001327d:	0f 84 5a 02 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013283:	b8 c0 7f 02 c0       	mov    eax,0xc0027fc0
c0013288:	80 fa 07             	cmp    dl,0x7
c001328b:	0f 84 4c 02 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013291:	83 ea 08             	sub    edx,0x8
c0013294:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c0013299:	80 fa 01             	cmp    dl,0x1
c001329c:	0f 87 3b 02 00 00    	ja     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132a2:	b8 f0 7f 02 c0       	mov    eax,0xc0027ff0
c00132a7:	c3                   	ret    
c00132a8:	80 f9 05             	cmp    cl,0x5
c00132ab:	75 45                	jne    c00132f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00132ad:	8d 4a ff             	lea    ecx,[edx-0x1]
c00132b0:	b8 00 80 02 c0       	mov    eax,0xc0028000
c00132b5:	80 f9 02             	cmp    cl,0x2
c00132b8:	0f 86 1f 02 00 00    	jbe    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132be:	80 fa 04             	cmp    dl,0x4
c00132c1:	0f 84 f3 01 00 00    	je     c00134ba <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00132c7:	80 fa 07             	cmp    dl,0x7
c00132ca:	0f 84 0d 02 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132d0:	b8 10 80 02 c0       	mov    eax,0xc0028010
c00132d5:	80 fa 08             	cmp    dl,0x8
c00132d8:	0f 84 ff 01 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132de:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c00132e3:	80 fa 09             	cmp    dl,0x9
c00132e6:	0f 85 f1 01 00 00    	jne    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132ec:	b8 20 80 02 c0       	mov    eax,0xc0028020
c00132f1:	c3                   	ret    
c00132f2:	80 f9 06             	cmp    cl,0x6
c00132f5:	0f 85 85 01 00 00    	jne    c0013480 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00132fb:	b8 30 80 02 c0       	mov    eax,0xc0028030
c0013300:	80 fa 01             	cmp    dl,0x1
c0013303:	0f 84 d4 01 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013309:	8d 42 fb             	lea    eax,[edx-0x5]
c001330c:	3c 01                	cmp    al,0x1
c001330e:	0f 86 ac 01 00 00    	jbe    c00134c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013314:	80 fa 03             	cmp    dl,0x3
c0013317:	0f 84 a3 01 00 00    	je     c00134c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001331d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013320:	b8 50 80 02 c0       	mov    eax,0xc0028050
c0013325:	80 f9 01             	cmp    cl,0x1
c0013328:	0f 86 af 01 00 00    	jbe    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001332e:	80 fa 09             	cmp    dl,0x9
c0013331:	0f 84 8f 01 00 00    	je     c00134c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0013337:	8d 4a f6             	lea    ecx,[edx-0xa]
c001333a:	80 f9 01             	cmp    cl,0x1
c001333d:	0f 86 9a 01 00 00    	jbe    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013343:	b8 60 80 02 c0       	mov    eax,0xc0028060
c0013348:	80 fa 0d             	cmp    dl,0xd
c001334b:	0f 84 8c 01 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013351:	b8 70 80 02 c0       	mov    eax,0xc0028070
c0013356:	80 fa 0e             	cmp    dl,0xe
c0013359:	0f 84 7e 01 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001335f:	b8 80 80 02 c0       	mov    eax,0xc0028080
c0013364:	80 fa 0f             	cmp    dl,0xf
c0013367:	0f 84 70 01 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001336d:	b8 60 80 02 c0       	mov    eax,0xc0028060
c0013372:	80 fa 15             	cmp    dl,0x15
c0013375:	0f 84 62 01 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001337b:	8d 4a ea             	lea    ecx,[edx-0x16]
c001337e:	b8 80 80 02 c0       	mov    eax,0xc0028080
c0013383:	80 f9 01             	cmp    cl,0x1
c0013386:	0f 86 51 01 00 00    	jbe    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001338c:	80 fa 1a             	cmp    dl,0x1a
c001338f:	0f 84 37 01 00 00    	je     c00134cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0013395:	80 fa 1c             	cmp    dl,0x1c
c0013398:	0f 84 34 01 00 00    	je     c00134d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001339e:	80 fa 1d             	cmp    dl,0x1d
c00133a1:	0f 84 36 01 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133a7:	b8 b0 80 02 c0       	mov    eax,0xc00280b0
c00133ac:	80 fa 25             	cmp    dl,0x25
c00133af:	0f 84 28 01 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133b5:	8d 4a da             	lea    ecx,[edx-0x26]
c00133b8:	b8 a0 80 02 c0       	mov    eax,0xc00280a0
c00133bd:	80 f9 01             	cmp    cl,0x1
c00133c0:	0f 86 17 01 00 00    	jbe    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133c6:	b8 c0 80 02 c0       	mov    eax,0xc00280c0
c00133cb:	80 fa 2a             	cmp    dl,0x2a
c00133ce:	0f 84 09 01 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133d4:	b8 b0 80 02 c0       	mov    eax,0xc00280b0
c00133d9:	80 fa 2c             	cmp    dl,0x2c
c00133dc:	0f 84 fb 00 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133e2:	b8 c0 80 02 c0       	mov    eax,0xc00280c0
c00133e7:	80 fa 2d             	cmp    dl,0x2d
c00133ea:	0f 84 ed 00 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133f0:	b8 90 80 02 c0       	mov    eax,0xc0028090
c00133f5:	80 fa 2e             	cmp    dl,0x2e
c00133f8:	0f 84 df 00 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133fe:	b8 b0 80 02 c0       	mov    eax,0xc00280b0
c0013403:	80 fa 2f             	cmp    dl,0x2f
c0013406:	0f 84 d1 00 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001340c:	8d 4a cb             	lea    ecx,[edx-0x35]
c001340f:	b8 a0 80 02 c0       	mov    eax,0xc00280a0
c0013414:	80 f9 01             	cmp    cl,0x1
c0013417:	0f 86 c0 00 00 00    	jbe    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001341d:	b8 d0 80 02 c0       	mov    eax,0xc00280d0
c0013422:	80 fa 37             	cmp    dl,0x37
c0013425:	0f 84 b2 00 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001342b:	b8 e0 80 02 c0       	mov    eax,0xc00280e0
c0013430:	80 fa 3a             	cmp    dl,0x3a
c0013433:	0f 84 a4 00 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013439:	b8 f0 80 02 c0       	mov    eax,0xc00280f0
c001343e:	80 fa 3c             	cmp    dl,0x3c
c0013441:	0f 84 96 00 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013447:	b8 00 81 02 c0       	mov    eax,0xc0028100
c001344c:	80 fa 3d             	cmp    dl,0x3d
c001344f:	0f 84 88 00 00 00    	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013455:	b8 e0 80 02 c0       	mov    eax,0xc00280e0
c001345a:	80 fa 3e             	cmp    dl,0x3e
c001345d:	74 7e                	je     c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001345f:	8d 42 bb             	lea    eax,[edx-0x45]
c0013462:	3c 01                	cmp    al,0x1
c0013464:	76 72                	jbe    c00134d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013466:	80 fa 3f             	cmp    dl,0x3f
c0013469:	74 6d                	je     c00134d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001346b:	80 fa 4a             	cmp    dl,0x4a
c001346e:	74 0a                	je     c001347a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013470:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c0013475:	80 fa 4d             	cmp    dl,0x4d
c0013478:	75 63                	jne    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001347a:	b8 d0 80 02 c0       	mov    eax,0xc00280d0
c001347f:	c3                   	ret    
c0013480:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c0013485:	80 f9 0b             	cmp    cl,0xb
c0013488:	75 0a                	jne    c0013494 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001348a:	fe ca                	dec    dl
c001348c:	75 4f                	jne    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001348e:	b8 10 81 02 c0       	mov    eax,0xc0028110
c0013493:	c3                   	ret    
c0013494:	80 f9 0f             	cmp    cl,0xf
c0013497:	75 44                	jne    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013499:	b8 20 81 02 c0       	mov    eax,0xc0028120
c001349e:	80 fa 02             	cmp    dl,0x2
c00134a1:	76 3a                	jbe    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134a3:	8d 42 fd             	lea    eax,[edx-0x3]
c00134a6:	3c 01                	cmp    al,0x1
c00134a8:	76 0a                	jbe    c00134b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00134aa:	b8 d1 60 02 c0       	mov    eax,0xc00260d1
c00134af:	80 fa 06             	cmp    dl,0x6
c00134b2:	75 29                	jne    c00134dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b4:	b8 30 81 02 c0       	mov    eax,0xc0028130
c00134b9:	c3                   	ret    
c00134ba:	b8 10 80 02 c0       	mov    eax,0xc0028010
c00134bf:	c3                   	ret    
c00134c0:	b8 40 80 02 c0       	mov    eax,0xc0028040
c00134c5:	c3                   	ret    
c00134c6:	b8 60 80 02 c0       	mov    eax,0xc0028060
c00134cb:	c3                   	ret    
c00134cc:	b8 90 80 02 c0       	mov    eax,0xc0028090
c00134d1:	c3                   	ret    
c00134d2:	b8 a0 80 02 c0       	mov    eax,0xc00280a0
c00134d7:	c3                   	ret    
c00134d8:	b8 f0 80 02 c0       	mov    eax,0xc00280f0
c00134dd:	c3                   	ret    

c00134de <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00134de:	60                   	pusha  
c00134df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00134e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00134e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00134eb:	9c                   	pushf  
c00134ec:	fa                   	cli    
c00134ed:	0f 09                	wbinvd 
c00134ef:	0f 30                	wrmsr  
c00134f1:	9d                   	popf   
c00134f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134f6:	89 02                	mov    DWORD PTR [edx],eax
c00134f8:	61                   	popa   
c00134f9:	c3                   	ret    

c00134fa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00134fa:	60                   	pusha  
c00134fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00134ff:	9c                   	pushf  
c0013500:	fa                   	cli    
c0013501:	0f 09                	wbinvd 
c0013503:	31 c0                	xor    eax,eax
c0013505:	31 d2                	xor    edx,edx
c0013507:	0f 32                	rdmsr  
c0013509:	9d                   	popf   
c001350a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001350e:	89 02                	mov    DWORD PTR [edx],eax
c0013510:	61                   	popa   
c0013511:	c3                   	ret    

c0013512 <CPU::AMD_K6_writeback(int, int, int)>:
c0013512:	56                   	push   esi
c0013513:	53                   	push   ebx
c0013514:	83 ec 10             	sub    esp,0x10
c0013517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001351b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013520:	75 5d                	jne    c001357f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013522:	83 f8 08             	cmp    eax,0x8
c0013525:	75 09                	jne    c0013530 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0013527:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001352c:	7e 13                	jle    c0013541 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001352e:	eb 30                	jmp    c0013560 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013530:	83 f8 06             	cmp    eax,0x6
c0013533:	7c 4a                	jl     c001357f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013535:	83 f8 07             	cmp    eax,0x7
c0013538:	7e 07                	jle    c0013541 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001353a:	83 f8 09             	cmp    eax,0x9
c001353d:	74 21                	je     c0013560 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001353f:	eb 3e                	jmp    c001357f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013541:	89 e6                	mov    esi,esp
c0013543:	8b 1d ac 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ac
c0013549:	56                   	push   esi
c001354a:	c1 eb 15             	shr    ebx,0x15
c001354d:	68 82 00 00 c0       	push   0xc0000082
c0013552:	83 e3 7e             	and    ebx,0x7e
c0013555:	e8 a0 ff ff ff       	call   c00134fa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001355a:	56                   	push   esi
c001355b:	6a 00                	push   0x0
c001355d:	53                   	push   ebx
c001355e:	eb 12                	jmp    c0013572 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013560:	89 e3                	mov    ebx,esp
c0013562:	53                   	push   ebx
c0013563:	68 82 00 00 c0       	push   0xc0000082
c0013568:	e8 8d ff ff ff       	call   c00134fa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001356d:	53                   	push   ebx
c001356e:	6a 00                	push   0x0
c0013570:	6a 00                	push   0x0
c0013572:	68 82 00 00 c0       	push   0xc0000082
c0013577:	e8 62 ff ff ff       	call   c00134de <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001357c:	83 c4 18             	add    esp,0x18
c001357f:	83 c4 10             	add    esp,0x10
c0013582:	5b                   	pop    ebx
c0013583:	5e                   	pop    esi
c0013584:	c3                   	ret    
c0013585:	90                   	nop

c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013586:	55                   	push   ebp
c0013587:	57                   	push   edi
c0013588:	56                   	push   esi
c0013589:	53                   	push   ebx
c001358a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001358e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013592:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013596:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001359a:	39 05 40 82 02 c0    	cmp    DWORD PTR ds:0xc0028240,eax
c00135a0:	75 23                	jne    c00135c5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00135a2:	a1 4c 93 02 c0       	mov    eax,ds:0xc002934c
c00135a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00135ab:	89 06                	mov    DWORD PTR [esi],eax
c00135ad:	a1 48 93 02 c0       	mov    eax,ds:0xc0029348
c00135b2:	89 07                	mov    DWORD PTR [edi],eax
c00135b4:	a1 44 93 02 c0       	mov    eax,ds:0xc0029344
c00135b9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00135bc:	a1 40 93 02 c0       	mov    eax,ds:0xc0029340
c00135c1:	89 02                	mov    DWORD PTR [edx],eax
c00135c3:	eb 3f                	jmp    c0013604 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00135c5:	31 c9                	xor    ecx,ecx
c00135c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135cb:	0f a2                	cpuid  
c00135cd:	89 06                	mov    DWORD PTR [esi],eax
c00135cf:	89 1f                	mov    DWORD PTR [edi],ebx
c00135d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00135d5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00135d8:	89 10                	mov    DWORD PTR [eax],edx
c00135da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135de:	a3 40 82 02 c0       	mov    ds:0xc0028240,eax
c00135e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00135e5:	a3 4c 93 02 c0       	mov    ds:0xc002934c,eax
c00135ea:	8b 07                	mov    eax,DWORD PTR [edi]
c00135ec:	a3 48 93 02 c0       	mov    ds:0xc0029348,eax
c00135f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00135f4:	a3 44 93 02 c0       	mov    ds:0xc0029344,eax
c00135f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00135fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00135ff:	a3 40 93 02 c0       	mov    ds:0xc0029340,eax
c0013604:	5b                   	pop    ebx
c0013605:	5e                   	pop    esi
c0013606:	5f                   	pop    edi
c0013607:	5d                   	pop    ebp
c0013608:	c3                   	ret    
c0013609:	90                   	nop

c001360a <CPU::cpuidCheckEDX(unsigned int)>:
c001360a:	83 ec 10             	sub    esp,0x10
c001360d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013611:	50                   	push   eax
c0013612:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013616:	50                   	push   eax
c0013617:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001361b:	50                   	push   eax
c001361c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013620:	50                   	push   eax
c0013621:	6a 01                	push   0x1
c0013623:	e8 5e ff ff ff       	call   c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013628:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001362c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013630:	0f 95 c0             	setne  al
c0013633:	83 c4 24             	add    esp,0x24
c0013636:	c3                   	ret    
c0013637:	90                   	nop

c0013638 <CPU::cpuidCheckECX(unsigned int)>:
c0013638:	83 ec 10             	sub    esp,0x10
c001363b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001363f:	50                   	push   eax
c0013640:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013644:	50                   	push   eax
c0013645:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013649:	50                   	push   eax
c001364a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001364e:	50                   	push   eax
c001364f:	6a 01                	push   0x1
c0013651:	e8 30 ff ff ff       	call   c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013656:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001365a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001365e:	0f 95 c0             	setne  al
c0013661:	83 c4 24             	add    esp,0x24
c0013664:	c3                   	ret    
c0013665:	90                   	nop

c0013666 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0013666:	83 ec 10             	sub    esp,0x10
c0013669:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001366d:	50                   	push   eax
c001366e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013672:	50                   	push   eax
c0013673:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013677:	50                   	push   eax
c0013678:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001367c:	50                   	push   eax
c001367d:	6a 07                	push   0x7
c001367f:	e8 02 ff ff ff       	call   c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013684:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013688:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001368c:	0f 95 c0             	setne  al
c001368f:	83 c4 24             	add    esp,0x24
c0013692:	c3                   	ret    
c0013693:	90                   	nop

c0013694 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013694:	83 ec 10             	sub    esp,0x10
c0013697:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001369b:	50                   	push   eax
c001369c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136a0:	50                   	push   eax
c00136a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136a5:	50                   	push   eax
c00136a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136aa:	50                   	push   eax
c00136ab:	6a 07                	push   0x7
c00136ad:	e8 d4 fe ff ff       	call   c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00136b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136b6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00136ba:	0f 95 c0             	setne  al
c00136bd:	83 c4 24             	add    esp,0x24
c00136c0:	c3                   	ret    
c00136c1:	90                   	nop

c00136c2 <CPU::CPU()>:
c00136c2:	83 ec 0c             	sub    esp,0xc
c00136c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c9:	83 ec 08             	sub    esp,0x8
c00136cc:	68 d1 60 02 c0       	push   0xc00260d1
c00136d1:	50                   	push   eax
c00136d2:	e8 e7 b0 ff ff       	call   c000e7be <Device::Device(char const*)>
c00136d7:	83 c4 10             	add    esp,0x10
c00136da:	ba 34 63 02 c0       	mov    edx,0xc0026334
c00136df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e3:	89 10                	mov    DWORD PTR [eax],edx
c00136e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00136f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136f7:	05 78 01 00 00       	add    eax,0x178
c00136fc:	83 ec 0c             	sub    esp,0xc
c00136ff:	50                   	push   eax
c0013700:	e8 eb 5e ff ff       	call   c00095f0 <GDT::GDT()>
c0013705:	83 c4 10             	add    esp,0x10
c0013708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001370c:	05 7c 09 00 00       	add    eax,0x97c
c0013711:	83 ec 0c             	sub    esp,0xc
c0013714:	50                   	push   eax
c0013715:	e8 2e 61 ff ff       	call   c0009848 <IDT::IDT()>
c001371a:	83 c4 10             	add    esp,0x10
c001371d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013721:	05 7c 11 00 00       	add    eax,0x117c
c0013726:	83 ec 0c             	sub    esp,0xc
c0013729:	50                   	push   eax
c001372a:	e8 35 7f ff ff       	call   c000b664 <TSS::TSS()>
c001372f:	83 c4 10             	add    esp,0x10
c0013732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013736:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001373d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013741:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001374b:	90                   	nop
c001374c:	83 c4 0c             	add    esp,0xc
c001374f:	c3                   	ret    

c0013750 <CPU::displayFeatures()>:
c0013750:	53                   	push   ebx
c0013751:	83 ec 10             	sub    esp,0x10
c0013754:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013758:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001375e:	68 c8 5d 02 c0       	push   0xc0025dc8
c0013763:	e8 df 98 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013768:	58                   	pop    eax
c0013769:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001376f:	5a                   	pop    edx
c0013770:	50                   	push   eax
c0013771:	68 d9 5d 02 c0       	push   0xc0025dd9
c0013776:	e8 cc 98 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001377b:	59                   	pop    ecx
c001377c:	58                   	pop    eax
c001377d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013783:	c1 e8 0e             	shr    eax,0xe
c0013786:	0f b6 c0             	movzx  eax,al
c0013789:	50                   	push   eax
c001378a:	68 ea 5d 02 c0       	push   0xc0025dea
c001378f:	e8 b3 98 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013794:	58                   	pop    eax
c0013795:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001379b:	5a                   	pop    edx
c001379c:	66 c1 e8 06          	shr    ax,0x6
c00137a0:	0f b6 c0             	movzx  eax,al
c00137a3:	50                   	push   eax
c00137a4:	68 fb 5d 02 c0       	push   0xc0025dfb
c00137a9:	e8 99 98 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00137ae:	c7 04 24 fb 63 02 c0 	mov    DWORD PTR [esp],0xc00263fb
c00137b5:	e8 8d 98 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	b8 45 43 02 c0       	mov    eax,0xc0024345
c00137c2:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00137c9:	74 05                	je     c00137d0 <CPU::displayFeatures()+0x80>
c00137cb:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00137d0:	51                   	push   ecx
c00137d1:	51                   	push   ecx
c00137d2:	50                   	push   eax
c00137d3:	68 0c 5e 02 c0       	push   0xc0025e0c
c00137d8:	e8 6a 98 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00137dd:	83 c4 10             	add    esp,0x10
c00137e0:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00137e5:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00137ec:	78 05                	js     c00137f3 <CPU::displayFeatures()+0xa3>
c00137ee:	b8 45 43 02 c0       	mov    eax,0xc0024345
c00137f3:	52                   	push   edx
c00137f4:	52                   	push   edx
c00137f5:	50                   	push   eax
c00137f6:	68 23 5e 02 c0       	push   0xc0025e23
c00137fb:	e8 47 98 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013800:	83 c4 10             	add    esp,0x10
c0013803:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0013808:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001380f:	75 05                	jne    c0013816 <CPU::displayFeatures()+0xc6>
c0013811:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0013816:	51                   	push   ecx
c0013817:	51                   	push   ecx
c0013818:	50                   	push   eax
c0013819:	68 3a 5e 02 c0       	push   0xc0025e3a
c001381e:	e8 24 98 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013823:	83 c4 10             	add    esp,0x10
c0013826:	b8 41 43 02 c0       	mov    eax,0xc0024341
c001382b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0013832:	75 05                	jne    c0013839 <CPU::displayFeatures()+0xe9>
c0013834:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0013839:	52                   	push   edx
c001383a:	52                   	push   edx
c001383b:	50                   	push   eax
c001383c:	68 51 5e 02 c0       	push   0xc0025e51
c0013841:	e8 01 98 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013846:	83 c4 10             	add    esp,0x10
c0013849:	b8 41 43 02 c0       	mov    eax,0xc0024341
c001384e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013855:	75 05                	jne    c001385c <CPU::displayFeatures()+0x10c>
c0013857:	b8 45 43 02 c0       	mov    eax,0xc0024345
c001385c:	51                   	push   ecx
c001385d:	51                   	push   ecx
c001385e:	50                   	push   eax
c001385f:	68 68 5e 02 c0       	push   0xc0025e68
c0013864:	e8 de 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013869:	83 c4 10             	add    esp,0x10
c001386c:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0013871:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013878:	75 05                	jne    c001387f <CPU::displayFeatures()+0x12f>
c001387a:	b8 45 43 02 c0       	mov    eax,0xc0024345
c001387f:	52                   	push   edx
c0013880:	52                   	push   edx
c0013881:	50                   	push   eax
c0013882:	68 7f 5e 02 c0       	push   0xc0025e7f
c0013887:	e8 bb 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001388c:	83 c4 10             	add    esp,0x10
c001388f:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0013894:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001389b:	75 05                	jne    c00138a2 <CPU::displayFeatures()+0x152>
c001389d:	b8 45 43 02 c0       	mov    eax,0xc0024345
c00138a2:	51                   	push   ecx
c00138a3:	51                   	push   ecx
c00138a4:	50                   	push   eax
c00138a5:	68 96 5e 02 c0       	push   0xc0025e96
c00138aa:	e8 98 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00138af:	83 c4 10             	add    esp,0x10
c00138b2:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00138b7:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00138be:	75 05                	jne    c00138c5 <CPU::displayFeatures()+0x175>
c00138c0:	b8 45 43 02 c0       	mov    eax,0xc0024345
c00138c5:	52                   	push   edx
c00138c6:	52                   	push   edx
c00138c7:	50                   	push   eax
c00138c8:	68 ad 5e 02 c0       	push   0xc0025ead
c00138cd:	e8 75 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00138d2:	83 c4 10             	add    esp,0x10
c00138d5:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00138da:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00138e1:	75 05                	jne    c00138e8 <CPU::displayFeatures()+0x198>
c00138e3:	b8 45 43 02 c0       	mov    eax,0xc0024345
c00138e8:	51                   	push   ecx
c00138e9:	51                   	push   ecx
c00138ea:	50                   	push   eax
c00138eb:	68 c4 5e 02 c0       	push   0xc0025ec4
c00138f0:	e8 52 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00138f5:	83 c4 10             	add    esp,0x10
c00138f8:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00138fd:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013904:	75 05                	jne    c001390b <CPU::displayFeatures()+0x1bb>
c0013906:	b8 45 43 02 c0       	mov    eax,0xc0024345
c001390b:	52                   	push   edx
c001390c:	52                   	push   edx
c001390d:	50                   	push   eax
c001390e:	68 db 5e 02 c0       	push   0xc0025edb
c0013913:	e8 2f 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013918:	83 c4 10             	add    esp,0x10
c001391b:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0013920:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013927:	75 05                	jne    c001392e <CPU::displayFeatures()+0x1de>
c0013929:	b8 45 43 02 c0       	mov    eax,0xc0024345
c001392e:	51                   	push   ecx
c001392f:	51                   	push   ecx
c0013930:	50                   	push   eax
c0013931:	68 f2 5e 02 c0       	push   0xc0025ef2
c0013936:	e8 0c 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001393b:	83 c4 10             	add    esp,0x10
c001393e:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0013943:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001394a:	75 05                	jne    c0013951 <CPU::displayFeatures()+0x201>
c001394c:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0013951:	52                   	push   edx
c0013952:	52                   	push   edx
c0013953:	50                   	push   eax
c0013954:	68 09 5f 02 c0       	push   0xc0025f09
c0013959:	e8 e9 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0013966:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001396d:	75 05                	jne    c0013974 <CPU::displayFeatures()+0x224>
c001396f:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0013974:	51                   	push   ecx
c0013975:	51                   	push   ecx
c0013976:	50                   	push   eax
c0013977:	68 20 5f 02 c0       	push   0xc0025f20
c001397c:	e8 c6 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	b8 41 43 02 c0       	mov    eax,0xc0024341
c0013989:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0013990:	78 05                	js     c0013997 <CPU::displayFeatures()+0x247>
c0013992:	b8 45 43 02 c0       	mov    eax,0xc0024345
c0013997:	52                   	push   edx
c0013998:	52                   	push   edx
c0013999:	50                   	push   eax
c001399a:	68 37 5f 02 c0       	push   0xc0025f37
c001399f:	e8 a3 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00139a4:	83 c4 10             	add    esp,0x10
c00139a7:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00139ac:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00139b3:	75 05                	jne    c00139ba <CPU::displayFeatures()+0x26a>
c00139b5:	b8 45 43 02 c0       	mov    eax,0xc0024345
c00139ba:	51                   	push   ecx
c00139bb:	51                   	push   ecx
c00139bc:	50                   	push   eax
c00139bd:	68 4e 5f 02 c0       	push   0xc0025f4e
c00139c2:	e8 80 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00139c7:	83 c4 10             	add    esp,0x10
c00139ca:	b8 41 43 02 c0       	mov    eax,0xc0024341
c00139cf:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00139d6:	75 05                	jne    c00139dd <CPU::displayFeatures()+0x28d>
c00139d8:	b8 45 43 02 c0       	mov    eax,0xc0024345
c00139dd:	52                   	push   edx
c00139de:	52                   	push   edx
c00139df:	50                   	push   eax
c00139e0:	68 65 5f 02 c0       	push   0xc0025f65
c00139e5:	e8 5d 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00139ea:	83 c4 18             	add    esp,0x18
c00139ed:	5b                   	pop    ebx
c00139ee:	c3                   	ret    
c00139ef:	90                   	nop

c00139f0 <CPU::detectFeatures()>:
c00139f0:	55                   	push   ebp
c00139f1:	57                   	push   edi
c00139f2:	56                   	push   esi
c00139f3:	53                   	push   ebx
c00139f4:	83 ec 50             	sub    esp,0x50
c00139f7:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00139fb:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013a05:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013a0c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013a12:	6a 0d                	push   0xd
c0013a14:	6a 00                	push   0x0
c0013a16:	55                   	push   ebp
c0013a17:	e8 68 cc fe ff       	call   c0000684 <memset>
c0013a1c:	83 c4 10             	add    esp,0x10
c0013a1f:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0013a24:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013a2b:	0f 84 22 09 00 00    	je     c0014353 <CPU::detectFeatures()+0x963>
c0013a31:	83 ec 0c             	sub    esp,0xc
c0013a34:	89 ef                	mov    edi,ebp
c0013a36:	6a 10                	push   0x10
c0013a38:	e8 cd fb ff ff       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0013a3d:	83 e0 01             	and    eax,0x1
c0013a40:	8d 14 00             	lea    edx,[eax+eax*1]
c0013a43:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013a49:	83 e0 fd             	and    eax,0xfffffffd
c0013a4c:	09 d0                	or     eax,edx
c0013a4e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013a54:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013a5b:	e8 aa fb ff ff       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0013a60:	83 e0 01             	and    eax,0x1
c0013a63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013a6a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013a70:	83 e0 fb             	and    eax,0xfffffffb
c0013a73:	09 d0                	or     eax,edx
c0013a75:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013a7b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013a82:	e8 83 fb ff ff       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0013a87:	83 e0 01             	and    eax,0x1
c0013a8a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013a91:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013a97:	83 e0 f7             	and    eax,0xfffffff7
c0013a9a:	09 d0                	or     eax,edx
c0013a9c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013aa2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013aa9:	e8 5c fb ff ff       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0013aae:	83 e0 01             	and    eax,0x1
c0013ab1:	c1 e0 04             	shl    eax,0x4
c0013ab4:	88 c2                	mov    dl,al
c0013ab6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013abc:	83 e0 ef             	and    eax,0xffffffef
c0013abf:	09 d0                	or     eax,edx
c0013ac1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ac7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013ace:	e8 37 fb ff ff       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0013ad3:	83 e0 01             	and    eax,0x1
c0013ad6:	c1 e0 05             	shl    eax,0x5
c0013ad9:	88 c2                	mov    dl,al
c0013adb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013ae1:	83 e0 df             	and    eax,0xffffffdf
c0013ae4:	09 d0                	or     eax,edx
c0013ae6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013aec:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013af3:	e8 12 fb ff ff       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0013af8:	83 e0 01             	and    eax,0x1
c0013afb:	8d 14 00             	lea    edx,[eax+eax*1]
c0013afe:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013b04:	83 e0 fd             	and    eax,0xfffffffd
c0013b07:	09 d0                	or     eax,edx
c0013b09:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013b0f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013b16:	e8 ef fa ff ff       	call   c001360a <CPU::cpuidCheckEDX(unsigned int)>
c0013b1b:	83 e0 01             	and    eax,0x1
c0013b1e:	c1 e0 06             	shl    eax,0x6
c0013b21:	88 c2                	mov    dl,al
c0013b23:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013b29:	83 e0 bf             	and    eax,0xffffffbf
c0013b2c:	09 d0                	or     eax,edx
c0013b2e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013b34:	58                   	pop    eax
c0013b35:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b39:	50                   	push   eax
c0013b3a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b3e:	50                   	push   eax
c0013b3f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013b43:	56                   	push   esi
c0013b44:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b48:	50                   	push   eax
c0013b49:	6a 00                	push   0x0
c0013b4b:	e8 36 fa ff ff       	call   c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013b50:	b8 04 00 00 00       	mov    eax,0x4
c0013b55:	89 c1                	mov    ecx,eax
c0013b57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b59:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013b5f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013b63:	89 c1                	mov    ecx,eax
c0013b65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b67:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013b6d:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013b71:	89 c1                	mov    ecx,eax
c0013b73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b75:	83 c4 18             	add    esp,0x18
c0013b78:	68 7c 5f 02 c0       	push   0xc0025f7c
c0013b7d:	55                   	push   ebp
c0013b7e:	e8 49 cc fe ff       	call   c00007cc <strcmp>
c0013b83:	83 c4 10             	add    esp,0x10
c0013b86:	85 c0                	test   eax,eax
c0013b88:	75 0f                	jne    c0013b99 <CPU::detectFeatures()+0x1a9>
c0013b8a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013b94:	e9 22 02 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013b99:	50                   	push   eax
c0013b9a:	50                   	push   eax
c0013b9b:	68 89 5f 02 c0       	push   0xc0025f89
c0013ba0:	55                   	push   ebp
c0013ba1:	e8 26 cc fe ff       	call   c00007cc <strcmp>
c0013ba6:	83 c4 10             	add    esp,0x10
c0013ba9:	85 c0                	test   eax,eax
c0013bab:	74 dd                	je     c0013b8a <CPU::detectFeatures()+0x19a>
c0013bad:	50                   	push   eax
c0013bae:	50                   	push   eax
c0013baf:	68 96 5f 02 c0       	push   0xc0025f96
c0013bb4:	55                   	push   ebp
c0013bb5:	e8 12 cc fe ff       	call   c00007cc <strcmp>
c0013bba:	83 c4 10             	add    esp,0x10
c0013bbd:	85 c0                	test   eax,eax
c0013bbf:	74 2a                	je     c0013beb <CPU::detectFeatures()+0x1fb>
c0013bc1:	50                   	push   eax
c0013bc2:	50                   	push   eax
c0013bc3:	68 a3 5f 02 c0       	push   0xc0025fa3
c0013bc8:	55                   	push   ebp
c0013bc9:	e8 fe cb fe ff       	call   c00007cc <strcmp>
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	85 c0                	test   eax,eax
c0013bd3:	74 16                	je     c0013beb <CPU::detectFeatures()+0x1fb>
c0013bd5:	50                   	push   eax
c0013bd6:	50                   	push   eax
c0013bd7:	68 b0 5f 02 c0       	push   0xc0025fb0
c0013bdc:	55                   	push   ebp
c0013bdd:	e8 ea cb fe ff       	call   c00007cc <strcmp>
c0013be2:	83 c4 10             	add    esp,0x10
c0013be5:	85 c0                	test   eax,eax
c0013be7:	74 48                	je     c0013c31 <CPU::detectFeatures()+0x241>
c0013be9:	eb 0f                	jmp    c0013bfa <CPU::detectFeatures()+0x20a>
c0013beb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013bf5:	e9 c1 01 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013bfa:	50                   	push   eax
c0013bfb:	50                   	push   eax
c0013bfc:	68 bd 5f 02 c0       	push   0xc0025fbd
c0013c01:	55                   	push   ebp
c0013c02:	e8 c5 cb fe ff       	call   c00007cc <strcmp>
c0013c07:	83 c4 10             	add    esp,0x10
c0013c0a:	85 c0                	test   eax,eax
c0013c0c:	74 23                	je     c0013c31 <CPU::detectFeatures()+0x241>
c0013c0e:	57                   	push   edi
c0013c0f:	57                   	push   edi
c0013c10:	68 ca 5f 02 c0       	push   0xc0025fca
c0013c15:	55                   	push   ebp
c0013c16:	e8 b1 cb fe ff       	call   c00007cc <strcmp>
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	85 c0                	test   eax,eax
c0013c20:	75 1e                	jne    c0013c40 <CPU::detectFeatures()+0x250>
c0013c22:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013c2c:	e9 8a 01 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013c31:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013c3b:	e9 7b 01 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013c40:	56                   	push   esi
c0013c41:	56                   	push   esi
c0013c42:	68 d7 5f 02 c0       	push   0xc0025fd7
c0013c47:	55                   	push   ebp
c0013c48:	e8 7f cb fe ff       	call   c00007cc <strcmp>
c0013c4d:	83 c4 10             	add    esp,0x10
c0013c50:	85 c0                	test   eax,eax
c0013c52:	75 0f                	jne    c0013c63 <CPU::detectFeatures()+0x273>
c0013c54:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013c5e:	e9 58 01 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013c63:	51                   	push   ecx
c0013c64:	51                   	push   ecx
c0013c65:	68 96 5f 02 c0       	push   0xc0025f96
c0013c6a:	55                   	push   ebp
c0013c6b:	e8 5c cb fe ff       	call   c00007cc <strcmp>
c0013c70:	83 c4 10             	add    esp,0x10
c0013c73:	85 c0                	test   eax,eax
c0013c75:	75 0f                	jne    c0013c86 <CPU::detectFeatures()+0x296>
c0013c77:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013c81:	e9 35 01 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013c86:	52                   	push   edx
c0013c87:	52                   	push   edx
c0013c88:	68 e4 5f 02 c0       	push   0xc0025fe4
c0013c8d:	55                   	push   ebp
c0013c8e:	e8 39 cb fe ff       	call   c00007cc <strcmp>
c0013c93:	83 c4 10             	add    esp,0x10
c0013c96:	85 c0                	test   eax,eax
c0013c98:	75 0f                	jne    c0013ca9 <CPU::detectFeatures()+0x2b9>
c0013c9a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013ca4:	e9 12 01 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013ca9:	50                   	push   eax
c0013caa:	50                   	push   eax
c0013cab:	68 f1 5f 02 c0       	push   0xc0025ff1
c0013cb0:	55                   	push   ebp
c0013cb1:	e8 16 cb fe ff       	call   c00007cc <strcmp>
c0013cb6:	83 c4 10             	add    esp,0x10
c0013cb9:	85 c0                	test   eax,eax
c0013cbb:	75 0f                	jne    c0013ccc <CPU::detectFeatures()+0x2dc>
c0013cbd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013cc7:	e9 ef 00 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013ccc:	50                   	push   eax
c0013ccd:	50                   	push   eax
c0013cce:	68 fe 5f 02 c0       	push   0xc0025ffe
c0013cd3:	55                   	push   ebp
c0013cd4:	e8 f3 ca fe ff       	call   c00007cc <strcmp>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	85 c0                	test   eax,eax
c0013cde:	75 0f                	jne    c0013cef <CPU::detectFeatures()+0x2ff>
c0013ce0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013cea:	e9 cc 00 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013cef:	50                   	push   eax
c0013cf0:	50                   	push   eax
c0013cf1:	68 0b 60 02 c0       	push   0xc002600b
c0013cf6:	55                   	push   ebp
c0013cf7:	e8 d0 ca fe ff       	call   c00007cc <strcmp>
c0013cfc:	83 c4 10             	add    esp,0x10
c0013cff:	85 c0                	test   eax,eax
c0013d01:	75 0f                	jne    c0013d12 <CPU::detectFeatures()+0x322>
c0013d03:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013d0d:	e9 a9 00 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013d12:	50                   	push   eax
c0013d13:	50                   	push   eax
c0013d14:	68 18 60 02 c0       	push   0xc0026018
c0013d19:	55                   	push   ebp
c0013d1a:	e8 ad ca fe ff       	call   c00007cc <strcmp>
c0013d1f:	83 c4 10             	add    esp,0x10
c0013d22:	85 c0                	test   eax,eax
c0013d24:	75 0f                	jne    c0013d35 <CPU::detectFeatures()+0x345>
c0013d26:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013d30:	e9 86 00 00 00       	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013d35:	50                   	push   eax
c0013d36:	50                   	push   eax
c0013d37:	68 25 60 02 c0       	push   0xc0026025
c0013d3c:	55                   	push   ebp
c0013d3d:	e8 8a ca fe ff       	call   c00007cc <strcmp>
c0013d42:	83 c4 10             	add    esp,0x10
c0013d45:	85 c0                	test   eax,eax
c0013d47:	75 0c                	jne    c0013d55 <CPU::detectFeatures()+0x365>
c0013d49:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013d53:	eb 66                	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013d55:	50                   	push   eax
c0013d56:	50                   	push   eax
c0013d57:	68 32 60 02 c0       	push   0xc0026032
c0013d5c:	55                   	push   ebp
c0013d5d:	e8 6a ca fe ff       	call   c00007cc <strcmp>
c0013d62:	83 c4 10             	add    esp,0x10
c0013d65:	85 c0                	test   eax,eax
c0013d67:	75 0c                	jne    c0013d75 <CPU::detectFeatures()+0x385>
c0013d69:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013d73:	eb 46                	jmp    c0013dbb <CPU::detectFeatures()+0x3cb>
c0013d75:	57                   	push   edi
c0013d76:	57                   	push   edi
c0013d77:	68 3f 60 02 c0       	push   0xc002603f
c0013d7c:	55                   	push   ebp
c0013d7d:	e8 4a ca fe ff       	call   c00007cc <strcmp>
c0013d82:	83 c4 10             	add    esp,0x10
c0013d85:	85 c0                	test   eax,eax
c0013d87:	74 e0                	je     c0013d69 <CPU::detectFeatures()+0x379>
c0013d89:	56                   	push   esi
c0013d8a:	56                   	push   esi
c0013d8b:	68 4c 60 02 c0       	push   0xc002604c
c0013d90:	55                   	push   ebp
c0013d91:	e8 36 ca fe ff       	call   c00007cc <strcmp>
c0013d96:	83 c4 10             	add    esp,0x10
c0013d99:	85 c0                	test   eax,eax
c0013d9b:	74 cc                	je     c0013d69 <CPU::detectFeatures()+0x379>
c0013d9d:	51                   	push   ecx
c0013d9e:	51                   	push   ecx
c0013d9f:	68 59 60 02 c0       	push   0xc0026059
c0013da4:	55                   	push   ebp
c0013da5:	e8 22 ca fe ff       	call   c00007cc <strcmp>
c0013daa:	83 c4 10             	add    esp,0x10
c0013dad:	85 c0                	test   eax,eax
c0013daf:	74 b8                	je     c0013d69 <CPU::detectFeatures()+0x379>
c0013db1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013dbb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013dc0:	0f 86 be 00 00 00    	jbe    c0013e84 <CPU::detectFeatures()+0x494>
c0013dc6:	83 ec 0c             	sub    esp,0xc
c0013dc9:	68 80 00 00 00       	push   0x80
c0013dce:	e8 93 f8 ff ff       	call   c0013666 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013dd3:	83 e0 01             	and    eax,0x1
c0013dd6:	c1 e0 06             	shl    eax,0x6
c0013dd9:	88 c2                	mov    dl,al
c0013ddb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013de1:	83 e0 bf             	and    eax,0xffffffbf
c0013de4:	09 d0                	or     eax,edx
c0013de6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013dec:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013df3:	e8 6e f8 ff ff       	call   c0013666 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013df8:	83 e0 01             	and    eax,0x1
c0013dfb:	c1 e0 04             	shl    eax,0x4
c0013dfe:	88 c2                	mov    dl,al
c0013e00:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013e06:	83 e0 ef             	and    eax,0xffffffef
c0013e09:	09 d0                	or     eax,edx
c0013e0b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013e11:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013e18:	e8 49 f8 ff ff       	call   c0013666 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013e1d:	c1 e0 07             	shl    eax,0x7
c0013e20:	88 c2                	mov    dl,al
c0013e22:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e28:	83 e0 7f             	and    eax,0x7f
c0013e2b:	09 d0                	or     eax,edx
c0013e2d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e33:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013e3a:	e8 55 f8 ff ff       	call   c0013694 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013e3f:	83 e0 01             	and    eax,0x1
c0013e42:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013e49:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013e4f:	83 e0 f7             	and    eax,0xfffffff7
c0013e52:	09 d0                	or     eax,edx
c0013e54:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013e5a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013e61:	e8 2e f8 ff ff       	call   c0013694 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013e66:	83 c4 10             	add    esp,0x10
c0013e69:	83 e0 01             	and    eax,0x1
c0013e6c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013e73:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013e79:	83 e0 fb             	and    eax,0xfffffffb
c0013e7c:	09 d0                	or     eax,edx
c0013e7e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013e8b:	50                   	push   eax
c0013e8c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013e90:	50                   	push   eax
c0013e91:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013e95:	56                   	push   esi
c0013e96:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013e9a:	50                   	push   eax
c0013e9b:	6a 01                	push   0x1
c0013e9d:	e8 e4 f6 ff ff       	call   c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ea2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013ea6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013eac:	88 ca                	mov    dl,cl
c0013eae:	83 e0 f0             	and    eax,0xfffffff0
c0013eb1:	83 e2 0f             	and    edx,0xf
c0013eb4:	09 d0                	or     eax,edx
c0013eb6:	88 ca                	mov    dl,cl
c0013eb8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013ebe:	c0 ea 04             	shr    dl,0x4
c0013ec1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013ec5:	0f b6 c2             	movzx  eax,dl
c0013ec8:	83 c4 20             	add    esp,0x20
c0013ecb:	c1 e0 06             	shl    eax,0x6
c0013ece:	89 c7                	mov    edi,eax
c0013ed0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013ed6:	66 25 3f c0          	and    ax,0xc03f
c0013eda:	09 f8                	or     eax,edi
c0013edc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013ee3:	89 c8                	mov    eax,ecx
c0013ee5:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013eec:	c1 e8 08             	shr    eax,0x8
c0013eef:	83 e5 3f             	and    ebp,0x3f
c0013ef2:	83 e0 0f             	and    eax,0xf
c0013ef5:	89 c7                	mov    edi,eax
c0013ef7:	c1 e7 06             	shl    edi,0x6
c0013efa:	09 ef                	or     edi,ebp
c0013efc:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013f03:	89 fa                	mov    edx,edi
c0013f05:	83 e5 c0             	and    ebp,0xffffffc0
c0013f08:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013f0e:	88 c2                	mov    dl,al
c0013f10:	c0 ea 02             	shr    dl,0x2
c0013f13:	89 d7                	mov    edi,edx
c0013f15:	09 ef                	or     edi,ebp
c0013f17:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013f1d:	89 fa                	mov    edx,edi
c0013f1f:	83 e5 cf             	and    ebp,0xffffffcf
c0013f22:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013f28:	89 cf                	mov    edi,ecx
c0013f2a:	c1 ef 0c             	shr    edi,0xc
c0013f2d:	83 e7 03             	and    edi,0x3
c0013f30:	c1 e7 04             	shl    edi,0x4
c0013f33:	09 ef                	or     edi,ebp
c0013f35:	3c 06                	cmp    al,0x6
c0013f37:	89 fa                	mov    edx,edi
c0013f39:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013f3f:	74 04                	je     c0013f45 <CPU::detectFeatures()+0x555>
c0013f41:	3c 0f                	cmp    al,0xf
c0013f43:	75 5c                	jne    c0013fa1 <CPU::detectFeatures()+0x5b1>
c0013f45:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013f49:	89 cf                	mov    edi,ecx
c0013f4b:	c1 ef 10             	shr    edi,0x10
c0013f4e:	c1 e7 04             	shl    edi,0x4
c0013f51:	09 fa                	or     edx,edi
c0013f53:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013f59:	0f b6 d2             	movzx  edx,dl
c0013f5c:	66 81 e7 3f c0       	and    di,0xc03f
c0013f61:	c1 e2 06             	shl    edx,0x6
c0013f64:	09 fa                	or     edx,edi
c0013f66:	3c 0f                	cmp    al,0xf
c0013f68:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013f6f:	75 30                	jne    c0013fa1 <CPU::detectFeatures()+0x5b1>
c0013f71:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013f77:	c1 e9 14             	shr    ecx,0x14
c0013f7a:	83 e0 3f             	and    eax,0x3f
c0013f7d:	83 c1 0f             	add    ecx,0xf
c0013f80:	88 ca                	mov    dl,cl
c0013f82:	c0 e9 02             	shr    cl,0x2
c0013f85:	c1 e2 06             	shl    edx,0x6
c0013f88:	09 d0                	or     eax,edx
c0013f8a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013f90:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013f96:	83 e0 c0             	and    eax,0xffffffc0
c0013f99:	09 c1                	or     ecx,eax
c0013f9b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013fa1:	83 ec 0c             	sub    esp,0xc
c0013fa4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013fab:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013faf:	50                   	push   eax
c0013fb0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013fb4:	55                   	push   ebp
c0013fb5:	56                   	push   esi
c0013fb6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013fba:	57                   	push   edi
c0013fbb:	68 00 00 00 80       	push   0x80000000
c0013fc0:	e8 c1 f5 ff ff       	call   c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013fc5:	83 c4 20             	add    esp,0x20
c0013fc8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013fd0:	76 22                	jbe    c0013ff4 <CPU::detectFeatures()+0x604>
c0013fd2:	83 ec 0c             	sub    esp,0xc
c0013fd5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013fd9:	50                   	push   eax
c0013fda:	55                   	push   ebp
c0013fdb:	56                   	push   esi
c0013fdc:	57                   	push   edi
c0013fdd:	68 01 00 00 80       	push   0x80000001
c0013fe2:	e8 9f f5 ff ff       	call   c0013586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013fe7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013ff1:	83 c4 20             	add    esp,0x20
c0013ff4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013ffa:	83 f8 01             	cmp    eax,0x1
c0013ffd:	75 6f                	jne    c001406e <CPU::detectFeatures()+0x67e>
c0013fff:	51                   	push   ecx
c0014000:	51                   	push   ecx
c0014001:	68 65 60 02 c0       	push   0xc0026065
c0014006:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001400a:	56                   	push   esi
c001400b:	e8 30 c7 fe ff       	call   c0000740 <strcpy>
c0014010:	5f                   	pop    edi
c0014011:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014017:	5d                   	pop    ebp
c0014018:	66 c1 e8 06          	shr    ax,0x6
c001401c:	0f b6 c0             	movzx  eax,al
c001401f:	50                   	push   eax
c0014020:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014026:	c1 e8 0e             	shr    eax,0xe
c0014029:	0f b6 c0             	movzx  eax,al
c001402c:	50                   	push   eax
c001402d:	e8 fe f1 ff ff       	call   c0013230 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0014032:	5a                   	pop    edx
c0014033:	59                   	pop    ecx
c0014034:	50                   	push   eax
c0014035:	56                   	push   esi
c0014036:	e8 45 c8 fe ff       	call   c0000880 <strcat>
c001403b:	5f                   	pop    edi
c001403c:	5d                   	pop    ebp
c001403d:	56                   	push   esi
c001403e:	53                   	push   ebx
c001403f:	e8 6c a7 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c0014044:	58                   	pop    eax
c0014045:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001404b:	5a                   	pop    edx
c001404c:	68 6c 60 02 c0       	push   0xc002606c
c0014051:	50                   	push   eax
c0014052:	e8 75 c7 fe ff       	call   c00007cc <strcmp>
c0014057:	83 c4 10             	add    esp,0x10
c001405a:	85 c0                	test   eax,eax
c001405c:	0f 85 71 03 00 00    	jne    c00143d3 <CPU::detectFeatures()+0x9e3>
c0014062:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014069:	e9 65 03 00 00       	jmp    c00143d3 <CPU::detectFeatures()+0x9e3>
c001406e:	83 f8 02             	cmp    eax,0x2
c0014071:	0f 85 b5 00 00 00    	jne    c001412c <CPU::detectFeatures()+0x73c>
c0014077:	57                   	push   edi
c0014078:	57                   	push   edi
c0014079:	68 7e 60 02 c0       	push   0xc002607e
c001407e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014082:	56                   	push   esi
c0014083:	e8 b8 c6 fe ff       	call   c0000740 <strcpy>
c0014088:	5d                   	pop    ebp
c0014089:	58                   	pop    eax
c001408a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014090:	66 c1 e8 06          	shr    ax,0x6
c0014094:	0f b6 c0             	movzx  eax,al
c0014097:	50                   	push   eax
c0014098:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001409e:	c1 e8 0e             	shr    eax,0xe
c00140a1:	0f b6 c0             	movzx  eax,al
c00140a4:	50                   	push   eax
c00140a5:	e8 f2 ef ff ff       	call   c001309c <CPU::lookupAMDName(unsigned char, unsigned char)>
c00140aa:	5a                   	pop    edx
c00140ab:	59                   	pop    ecx
c00140ac:	50                   	push   eax
c00140ad:	56                   	push   esi
c00140ae:	e8 cd c7 fe ff       	call   c0000880 <strcat>
c00140b3:	5f                   	pop    edi
c00140b4:	5d                   	pop    ebp
c00140b5:	56                   	push   esi
c00140b6:	53                   	push   ebx
c00140b7:	e8 f4 a6 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c00140bc:	58                   	pop    eax
c00140bd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00140c3:	5a                   	pop    edx
c00140c4:	68 83 60 02 c0       	push   0xc0026083
c00140c9:	50                   	push   eax
c00140ca:	e8 fd c6 fe ff       	call   c00007cc <strcmp>
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	85 c0                	test   eax,eax
c00140d4:	75 20                	jne    c00140f6 <CPU::detectFeatures()+0x706>
c00140d6:	8b 15 88 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028888
c00140dc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140e2:	a8 01                	test   al,0x1
c00140e4:	74 10                	je     c00140f6 <CPU::detectFeatures()+0x706>
c00140e6:	83 e0 fe             	and    eax,0xfffffffe
c00140e9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00140ef:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00140f6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00140fc:	c1 e8 0e             	shr    eax,0xe
c00140ff:	3c 05                	cmp    al,0x5
c0014101:	0f 85 cc 02 00 00    	jne    c00143d3 <CPU::detectFeatures()+0x9e3>
c0014107:	56                   	push   esi
c0014108:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001410e:	83 e0 0f             	and    eax,0xf
c0014111:	50                   	push   eax
c0014112:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014118:	66 c1 e8 06          	shr    ax,0x6
c001411c:	0f b6 c0             	movzx  eax,al
c001411f:	50                   	push   eax
c0014120:	6a 05                	push   0x5
c0014122:	e8 eb f3 ff ff       	call   c0013512 <CPU::AMD_K6_writeback(int, int, int)>
c0014127:	e9 1f 02 00 00       	jmp    c001434b <CPU::detectFeatures()+0x95b>
c001412c:	8d 50 fd             	lea    edx,[eax-0x3]
c001412f:	83 fa 01             	cmp    edx,0x1
c0014132:	76 09                	jbe    c001413d <CPU::detectFeatures()+0x74d>
c0014134:	83 f8 06             	cmp    eax,0x6
c0014137:	0f 85 91 01 00 00    	jne    c00142ce <CPU::detectFeatures()+0x8de>
c001413d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014143:	c1 ea 0e             	shr    edx,0xe
c0014146:	80 fa 05             	cmp    dl,0x5
c0014149:	75 7b                	jne    c00141c6 <CPU::detectFeatures()+0x7d6>
c001414b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014151:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014156:	66 81 fa 00 01       	cmp    dx,0x100
c001415b:	75 0c                	jne    c0014169 <CPU::detectFeatures()+0x779>
c001415d:	51                   	push   ecx
c001415e:	51                   	push   ecx
c001415f:	68 8a 60 02 c0       	push   0xc002608a
c0014164:	e9 dc 01 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c0014169:	66 81 fa 00 02       	cmp    dx,0x200
c001416e:	75 0c                	jne    c001417c <CPU::detectFeatures()+0x78c>
c0014170:	52                   	push   edx
c0014171:	52                   	push   edx
c0014172:	68 9d 60 02 c0       	push   0xc002609d
c0014177:	e9 c9 01 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c001417c:	66 81 fa 40 02       	cmp    dx,0x240
c0014181:	75 0c                	jne    c001418f <CPU::detectFeatures()+0x79f>
c0014183:	50                   	push   eax
c0014184:	50                   	push   eax
c0014185:	68 af 60 02 c0       	push   0xc00260af
c001418a:	e9 b6 01 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c001418f:	83 f8 06             	cmp    eax,0x6
c0014192:	75 0c                	jne    c00141a0 <CPU::detectFeatures()+0x7b0>
c0014194:	50                   	push   eax
c0014195:	50                   	push   eax
c0014196:	68 c1 60 02 c0       	push   0xc00260c1
c001419b:	e9 a5 01 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c00141a0:	83 f8 04             	cmp    eax,0x4
c00141a3:	75 0c                	jne    c00141b1 <CPU::detectFeatures()+0x7c1>
c00141a5:	50                   	push   eax
c00141a6:	50                   	push   eax
c00141a7:	68 cd 60 02 c0       	push   0xc00260cd
c00141ac:	e9 94 01 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c00141b1:	83 f8 03             	cmp    eax,0x3
c00141b4:	0f 85 19 02 00 00    	jne    c00143d3 <CPU::detectFeatures()+0x9e3>
c00141ba:	50                   	push   eax
c00141bb:	50                   	push   eax
c00141bc:	68 d5 60 02 c0       	push   0xc00260d5
c00141c1:	e9 7f 01 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c00141c6:	80 fa 06             	cmp    dl,0x6
c00141c9:	0f 85 db 00 00 00    	jne    c00142aa <CPU::detectFeatures()+0x8ba>
c00141cf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00141d5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00141da:	66 81 fa 80 01       	cmp    dx,0x180
c00141df:	75 0c                	jne    c00141ed <CPU::detectFeatures()+0x7fd>
c00141e1:	50                   	push   eax
c00141e2:	50                   	push   eax
c00141e3:	68 e0 60 02 c0       	push   0xc00260e0
c00141e8:	e9 58 01 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c00141ed:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00141f3:	66 f7 c1 80 ff       	test   cx,0xff80
c00141f8:	75 0c                	jne    c0014206 <CPU::detectFeatures()+0x816>
c00141fa:	50                   	push   eax
c00141fb:	50                   	push   eax
c00141fc:	68 f0 60 02 c0       	push   0xc00260f0
c0014201:	e9 3f 01 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c0014206:	66 81 fa 40 02       	cmp    dx,0x240
c001420b:	75 0c                	jne    c0014219 <CPU::detectFeatures()+0x829>
c001420d:	55                   	push   ebp
c001420e:	55                   	push   ebp
c001420f:	68 f7 60 02 c0       	push   0xc00260f7
c0014214:	e9 2c 01 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c0014219:	66 81 fa 80 02       	cmp    dx,0x280
c001421e:	75 0c                	jne    c001422c <CPU::detectFeatures()+0x83c>
c0014220:	57                   	push   edi
c0014221:	57                   	push   edi
c0014222:	68 00 61 02 c0       	push   0xc0026100
c0014227:	e9 19 01 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c001422c:	66 81 fa 40 03       	cmp    dx,0x340
c0014231:	74 ed                	je     c0014220 <CPU::detectFeatures()+0x830>
c0014233:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014238:	75 0c                	jne    c0014246 <CPU::detectFeatures()+0x856>
c001423a:	56                   	push   esi
c001423b:	56                   	push   esi
c001423c:	68 07 61 02 c0       	push   0xc0026107
c0014241:	e9 ff 00 00 00       	jmp    c0014345 <CPU::detectFeatures()+0x955>
c0014246:	83 f8 06             	cmp    eax,0x6
c0014249:	0f 84 45 ff ff ff    	je     c0014194 <CPU::detectFeatures()+0x7a4>
c001424f:	83 f8 04             	cmp    eax,0x4
c0014252:	0f 84 4d ff ff ff    	je     c00141a5 <CPU::detectFeatures()+0x7b5>
c0014258:	83 f8 03             	cmp    eax,0x3
c001425b:	0f 85 72 01 00 00    	jne    c00143d3 <CPU::detectFeatures()+0x9e3>
c0014261:	51                   	push   ecx
c0014262:	51                   	push   ecx
c0014263:	68 10 61 02 c0       	push   0xc0026110
c0014268:	53                   	push   ebx
c0014269:	e8 42 a5 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c001426e:	b1 c1                	mov    cl,0xc1
c0014270:	88 c8                	mov    al,cl
c0014272:	e6 22                	out    0x22,al
c0014274:	e4 23                	in     al,0x23
c0014276:	88 c2                	mov    dl,al
c0014278:	88 c8                	mov    al,cl
c001427a:	e6 22                	out    0x22,al
c001427c:	88 d0                	mov    al,dl
c001427e:	83 c8 10             	or     eax,0x10
c0014281:	e6 23                	out    0x23,al
c0014283:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001428a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001428d:	89 d0                	mov    eax,edx
c001428f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014295:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014299:	40                   	inc    eax
c001429a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00142a0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00142a5:	e9 a1 00 00 00       	jmp    c001434b <CPU::detectFeatures()+0x95b>
c00142aa:	83 f8 06             	cmp    eax,0x6
c00142ad:	0f 84 e1 fe ff ff    	je     c0014194 <CPU::detectFeatures()+0x7a4>
c00142b3:	83 f8 04             	cmp    eax,0x4
c00142b6:	0f 84 e9 fe ff ff    	je     c00141a5 <CPU::detectFeatures()+0x7b5>
c00142bc:	83 f8 03             	cmp    eax,0x3
c00142bf:	0f 85 0e 01 00 00    	jne    c00143d3 <CPU::detectFeatures()+0x9e3>
c00142c5:	52                   	push   edx
c00142c6:	52                   	push   edx
c00142c7:	68 1b 61 02 c0       	push   0xc002611b
c00142cc:	eb 77                	jmp    c0014345 <CPU::detectFeatures()+0x955>
c00142ce:	83 f8 07             	cmp    eax,0x7
c00142d1:	75 09                	jne    c00142dc <CPU::detectFeatures()+0x8ec>
c00142d3:	50                   	push   eax
c00142d4:	50                   	push   eax
c00142d5:	68 25 61 02 c0       	push   0xc0026125
c00142da:	eb 69                	jmp    c0014345 <CPU::detectFeatures()+0x955>
c00142dc:	83 f8 0a             	cmp    eax,0xa
c00142df:	75 09                	jne    c00142ea <CPU::detectFeatures()+0x8fa>
c00142e1:	50                   	push   eax
c00142e2:	50                   	push   eax
c00142e3:	68 30 61 02 c0       	push   0xc0026130
c00142e8:	eb 5b                	jmp    c0014345 <CPU::detectFeatures()+0x955>
c00142ea:	83 f8 0b             	cmp    eax,0xb
c00142ed:	75 09                	jne    c00142f8 <CPU::detectFeatures()+0x908>
c00142ef:	50                   	push   eax
c00142f0:	50                   	push   eax
c00142f1:	68 38 61 02 c0       	push   0xc0026138
c00142f6:	eb 4d                	jmp    c0014345 <CPU::detectFeatures()+0x955>
c00142f8:	83 f8 08             	cmp    eax,0x8
c00142fb:	75 09                	jne    c0014306 <CPU::detectFeatures()+0x916>
c00142fd:	50                   	push   eax
c00142fe:	50                   	push   eax
c00142ff:	68 41 61 02 c0       	push   0xc0026141
c0014304:	eb 3f                	jmp    c0014345 <CPU::detectFeatures()+0x955>
c0014306:	83 f8 09             	cmp    eax,0x9
c0014309:	75 09                	jne    c0014314 <CPU::detectFeatures()+0x924>
c001430b:	50                   	push   eax
c001430c:	50                   	push   eax
c001430d:	68 49 61 02 c0       	push   0xc0026149
c0014312:	eb 31                	jmp    c0014345 <CPU::detectFeatures()+0x955>
c0014314:	83 f8 05             	cmp    eax,0x5
c0014317:	75 09                	jne    c0014322 <CPU::detectFeatures()+0x932>
c0014319:	50                   	push   eax
c001431a:	50                   	push   eax
c001431b:	68 51 61 02 c0       	push   0xc0026151
c0014320:	eb 23                	jmp    c0014345 <CPU::detectFeatures()+0x955>
c0014322:	83 f8 0c             	cmp    eax,0xc
c0014325:	75 09                	jne    c0014330 <CPU::detectFeatures()+0x940>
c0014327:	55                   	push   ebp
c0014328:	55                   	push   ebp
c0014329:	68 5f 61 02 c0       	push   0xc002615f
c001432e:	eb 15                	jmp    c0014345 <CPU::detectFeatures()+0x955>
c0014330:	83 f8 0d             	cmp    eax,0xd
c0014333:	75 09                	jne    c001433e <CPU::detectFeatures()+0x94e>
c0014335:	57                   	push   edi
c0014336:	57                   	push   edi
c0014337:	68 6a 61 02 c0       	push   0xc002616a
c001433c:	eb 07                	jmp    c0014345 <CPU::detectFeatures()+0x955>
c001433e:	56                   	push   esi
c001433f:	56                   	push   esi
c0014340:	68 7e 61 02 c0       	push   0xc002617e
c0014345:	53                   	push   ebx
c0014346:	e8 65 a4 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c001434b:	83 c4 10             	add    esp,0x10
c001434e:	e9 80 00 00 00       	jmp    c00143d3 <CPU::detectFeatures()+0x9e3>
c0014353:	51                   	push   ecx
c0014354:	51                   	push   ecx
c0014355:	68 ca 5f 02 c0       	push   0xc0025fca
c001435a:	55                   	push   ebp
c001435b:	e8 e0 c3 fe ff       	call   c0000740 <strcpy>
c0014360:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001436a:	e8 74 be fe ff       	call   c00001e3 <is486>
c001436f:	83 c4 10             	add    esp,0x10
c0014372:	85 c0                	test   eax,eax
c0014374:	74 2b                	je     c00143a1 <CPU::detectFeatures()+0x9b1>
c0014376:	52                   	push   edx
c0014377:	52                   	push   edx
c0014378:	68 8a 61 02 c0       	push   0xc002618a
c001437d:	53                   	push   ebx
c001437e:	e8 2d a4 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c0014383:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001438a:	0f 20 c0             	mov    eax,cr0
c001438d:	83 e0 14             	and    eax,0x14
c0014390:	83 c4 10             	add    esp,0x10
c0014393:	83 f8 04             	cmp    eax,0x4
c0014396:	75 1f                	jne    c00143b7 <CPU::detectFeatures()+0x9c7>
c0014398:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001439f:	eb 32                	jmp    c00143d3 <CPU::detectFeatures()+0x9e3>
c00143a1:	50                   	push   eax
c00143a2:	50                   	push   eax
c00143a3:	68 95 61 02 c0       	push   0xc0026195
c00143a8:	53                   	push   ebx
c00143a9:	e8 02 a4 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c00143ae:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00143b5:	eb d3                	jmp    c001438a <CPU::detectFeatures()+0x99a>
c00143b7:	e8 02 be fe ff       	call   c00001be <hasLegacyFPU>
c00143bc:	83 e0 01             	and    eax,0x1
c00143bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00143c2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00143c8:	83 e0 fd             	and    eax,0xfffffffd
c00143cb:	09 d0                	or     eax,edx
c00143cd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00143d3:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00143da:	74 0e                	je     c00143ea <CPU::detectFeatures()+0x9fa>
c00143dc:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c00143e1:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c00143e8:	eb 20                	jmp    c001440a <CPU::detectFeatures()+0xa1a>
c00143ea:	e8 cf bd fe ff       	call   c00001be <hasLegacyFPU>
c00143ef:	83 e0 01             	and    eax,0x1
c00143f2:	8d 14 00             	lea    edx,[eax+eax*1]
c00143f5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00143fb:	83 e0 fd             	and    eax,0xfffffffd
c00143fe:	09 d0                	or     eax,edx
c0014400:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014406:	a8 02                	test   al,0x2
c0014408:	75 d2                	jne    c00143dc <CPU::detectFeatures()+0x9ec>
c001440a:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014411:	83 c4 4c             	add    esp,0x4c
c0014414:	5b                   	pop    ebx
c0014415:	5e                   	pop    esi
c0014416:	5f                   	pop    edi
c0014417:	5d                   	pop    ebp
c0014418:	c3                   	ret    
c0014419:	90                   	nop

c001441a <CPU::setupSMEP()>:
c001441a:	0f 20 e0             	mov    eax,cr4
c001441d:	0d 00 00 10 00       	or     eax,0x100000
c0014422:	0f 22 e0             	mov    cr4,eax
c0014425:	c3                   	ret    

c0014426 <CPU::setupUMIP()>:
c0014426:	0f 20 e0             	mov    eax,cr4
c0014429:	80 cc 08             	or     ah,0x8
c001442c:	0f 22 e0             	mov    cr4,eax
c001442f:	c3                   	ret    

c0014430 <CPU::setupTSC()>:
c0014430:	0f 20 e0             	mov    eax,cr4
c0014433:	83 c8 04             	or     eax,0x4
c0014436:	0f 22 e0             	mov    cr4,eax
c0014439:	c3                   	ret    

c001443a <CPU::setupLargePages()>:
c001443a:	0f 20 e0             	mov    eax,cr4
c001443d:	83 c8 10             	or     eax,0x10
c0014440:	0f 22 e0             	mov    cr4,eax
c0014443:	c3                   	ret    

c0014444 <CPU::setupPAT()>:
c0014444:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0014449:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014450:	74 2c                	je     c001447e <CPU::setupPAT()+0x3a>
c0014452:	53                   	push   ebx
c0014453:	83 ec 10             	sub    esp,0x10
c0014456:	68 77 02 00 00       	push   0x277
c001445b:	50                   	push   eax
c001445c:	e8 0d 4e ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0014461:	83 e2 f8             	and    edx,0xfffffff8
c0014464:	83 ca 01             	or     edx,0x1
c0014467:	52                   	push   edx
c0014468:	50                   	push   eax
c0014469:	68 77 02 00 00       	push   0x277
c001446e:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c0014474:	e8 21 4e ff ff       	call   c000929a <Computer::wrmsr(unsigned int, unsigned long long)>
c0014479:	83 c4 28             	add    esp,0x28
c001447c:	5b                   	pop    ebx
c001447d:	c3                   	ret    
c001447e:	c3                   	ret    
c001447f:	90                   	nop

c0014480 <CPU::setupMTRR()>:
c0014480:	c3                   	ret    
c0014481:	90                   	nop

c0014482 <CPU::setupGlobalPages()>:
c0014482:	0f 20 e0             	mov    eax,cr4
c0014485:	0c 80                	or     al,0x80
c0014487:	0f 22 e0             	mov    cr4,eax
c001448a:	c3                   	ret    
c001448b:	90                   	nop

c001448c <CPU::allowUsermodeDataAccess()>:
c001448c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014490:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014497:	74 03                	je     c001449c <CPU::allowUsermodeDataAccess()+0x10>
c0014499:	0f 01 cb             	stac   
c001449c:	c3                   	ret    
c001449d:	90                   	nop

c001449e <CPU::prohibitUsermodeDataAccess()>:
c001449e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144a2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00144a9:	74 03                	je     c00144ae <CPU::prohibitUsermodeDataAccess()+0x10>
c00144ab:	0f 01 ca             	clac   
c00144ae:	c3                   	ret    
c00144af:	90                   	nop

c00144b0 <CPU::setupSMAP()>:
c00144b0:	0f 20 e0             	mov    eax,cr4
c00144b3:	0d 00 00 20 00       	or     eax,0x200000
c00144b8:	0f 22 e0             	mov    cr4,eax
c00144bb:	eb e1                	jmp    c001449e <CPU::prohibitUsermodeDataAccess()>
c00144bd:	90                   	nop

c00144be <CPU::setupFeatures()>:
c00144be:	53                   	push   ebx
c00144bf:	83 ec 08             	sub    esp,0x8
c00144c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144c6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00144cd:	74 18                	je     c00144e7 <CPU::setupFeatures()+0x29>
c00144cf:	83 ec 0c             	sub    esp,0xc
c00144d2:	68 a0 61 02 c0       	push   0xc00261a0
c00144d7:	e8 6b 8b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00144dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144df:	e8 42 ff ff ff       	call   c0014426 <CPU::setupUMIP()>
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00144ee:	74 18                	je     c0014508 <CPU::setupFeatures()+0x4a>
c00144f0:	83 ec 0c             	sub    esp,0xc
c00144f3:	68 aa 61 02 c0       	push   0xc00261aa
c00144f8:	e8 4a 8b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00144fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014500:	e8 2b ff ff ff       	call   c0014430 <CPU::setupTSC()>
c0014505:	83 c4 10             	add    esp,0x10
c0014508:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001450f:	74 18                	je     c0014529 <CPU::setupFeatures()+0x6b>
c0014511:	83 ec 0c             	sub    esp,0xc
c0014514:	68 b3 61 02 c0       	push   0xc00261b3
c0014519:	e8 29 8b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001451e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014521:	e8 14 ff ff ff       	call   c001443a <CPU::setupLargePages()>
c0014526:	83 c4 10             	add    esp,0x10
c0014529:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014530:	74 18                	je     c001454a <CPU::setupFeatures()+0x8c>
c0014532:	83 ec 0c             	sub    esp,0xc
c0014535:	68 bc 61 02 c0       	push   0xc00261bc
c001453a:	e8 08 8b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001453f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014542:	e8 3b ff ff ff       	call   c0014482 <CPU::setupGlobalPages()>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014551:	74 18                	je     c001456b <CPU::setupFeatures()+0xad>
c0014553:	83 ec 0c             	sub    esp,0xc
c0014556:	68 ce 61 02 c0       	push   0xc00261ce
c001455b:	e8 e7 8a ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0014560:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014563:	e8 dc fe ff ff       	call   c0014444 <CPU::setupPAT()>
c0014568:	83 c4 10             	add    esp,0x10
c001456b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014572:	74 11                	je     c0014585 <CPU::setupFeatures()+0xc7>
c0014574:	c7 44 24 10 d7 61 02 c0 	mov    DWORD PTR [esp+0x10],0xc00261d7
c001457c:	83 c4 08             	add    esp,0x8
c001457f:	5b                   	pop    ebx
c0014580:	e9 c2 8a ff ff       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>
c0014585:	83 c4 08             	add    esp,0x8
c0014588:	5b                   	pop    ebx
c0014589:	c3                   	ret    

c001458a <CPU::open(int, int, void*)>:
c001458a:	57                   	push   edi
c001458b:	56                   	push   esi
c001458c:	53                   	push   ebx
c001458d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014591:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014595:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001459b:	83 ec 0c             	sub    esp,0xc
c001459e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00145a4:	68 e1 61 02 c0       	push   0xc00261e1
c00145a9:	e8 07 58 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00145ae:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00145b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00145b7:	e8 96 50 ff ff       	call   c0009652 <GDT::setup()>
c00145bc:	c7 04 24 f3 61 02 c0 	mov    DWORD PTR [esp],0xc00261f3
c00145c3:	e8 ed 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00145c8:	83 c4 0c             	add    esp,0xc
c00145cb:	6a 00                	push   0x0
c00145cd:	68 ef be ad de       	push   0xdeadbeef
c00145d2:	57                   	push   edi
c00145d3:	e8 d0 70 ff ff       	call   c000b6a8 <TSS::setup(unsigned long, unsigned long)>
c00145d8:	c7 04 24 05 62 02 c0 	mov    DWORD PTR [esp],0xc0026205
c00145df:	e8 d1 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00145e4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145e7:	e8 9c 70 ff ff       	call   c000b688 <TSS::flush()>
c00145ec:	c7 04 24 19 62 02 c0 	mov    DWORD PTR [esp],0xc0026219
c00145f3:	e8 bd 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00145f8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00145fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014601:	e8 b8 52 ff ff       	call   c00098be <IDT::setup()>
c0014606:	c7 04 24 2b 62 02 c0 	mov    DWORD PTR [esp],0xc002622b
c001460d:	e8 a3 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014612:	b8 00 04 00 00       	mov    eax,0x400
c0014617:	0f 23 f8             	mov    db7,eax
c001461a:	c7 04 24 49 62 02 c0 	mov    DWORD PTR [esp],0xc0026249
c0014621:	e8 8f 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014626:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014630:	e8 dd 5d ff ff       	call   c000a412 <Phys::allocatePage()>
c0014635:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001463b:	89 30                	mov    DWORD PTR [eax],esi
c001463d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014643:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014646:	c7 04 24 6b 62 02 c0 	mov    DWORD PTR [esp],0xc002626b
c001464d:	e8 63 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014652:	58                   	pop    eax
c0014653:	5a                   	pop    edx
c0014654:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001465a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001465e:	e8 3f 80 ff ff       	call   c000c6a2 <VAS::setCPUSpecific(unsigned long)>
c0014663:	c7 04 24 93 62 02 c0 	mov    DWORD PTR [esp],0xc0026293
c001466a:	e8 46 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001466f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014672:	e8 79 f3 ff ff       	call   c00139f0 <CPU::detectFeatures()>
c0014677:	c7 04 24 b6 62 02 c0 	mov    DWORD PTR [esp],0xc00262b6
c001467e:	e8 32 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014683:	e8 ea b2 ff ff       	call   c000f972 <setupInterruptController()>
c0014688:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001468e:	c7 04 24 da 62 02 c0 	mov    DWORD PTR [esp],0xc00262da
c0014695:	e8 1b 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001469a:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c001469f:	83 e0 10             	and    eax,0x10
c00146a2:	83 f8 01             	cmp    eax,0x1
c00146a5:	19 c0                	sbb    eax,eax
c00146a7:	83 e0 46             	and    eax,0x46
c00146aa:	83 c0 1e             	add    eax,0x1e
c00146ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00146b0:	e8 eb c8 ff ff       	call   c0010fa0 <setupTimer(int)>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00146be:	f6 05 a0 88 02 c0 20 	test   BYTE PTR ds:0xc00288a0,0x20
c00146c5:	74 18                	je     c00146df <CPU::open(int, int, void*)+0x155>
c00146c7:	83 ec 0c             	sub    esp,0xc
c00146ca:	68 f5 62 02 c0       	push   0xc00262f5
c00146cf:	e8 e1 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00146d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146d7:	e8 e2 fd ff ff       	call   c00144be <CPU::setupFeatures()>
c00146dc:	83 c4 10             	add    esp,0x10
c00146df:	83 ec 0c             	sub    esp,0xc
c00146e2:	68 10 63 02 c0       	push   0xc0026310
c00146e7:	e8 c9 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00146ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146ef:	e8 5c f0 ff ff       	call   c0013750 <CPU::displayFeatures()>
c00146f4:	83 c4 10             	add    esp,0x10
c00146f7:	31 c0                	xor    eax,eax
c00146f9:	5b                   	pop    ebx
c00146fa:	5e                   	pop    esi
c00146fb:	5f                   	pop    edi
c00146fc:	c3                   	ret    
c00146fd:	90                   	nop

c00146fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00146fe:	57                   	push   edi
c00146ff:	56                   	push   esi
c0014700:	53                   	push   ebx
c0014701:	51                   	push   ecx
c0014702:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014706:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0014709:	0f 02 c0             	lar    eax,ax
c001470c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001470f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0014713:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0014716:	88 ca                	mov    dl,cl
c0014718:	c0 ea 06             	shr    dl,0x6
c001471b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001471f:	89 ca                	mov    edx,ecx
c0014721:	66 c1 ea 03          	shr    dx,0x3
c0014725:	83 e2 07             	and    edx,0x7
c0014728:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001472d:	88 17                	mov    BYTE PTR [edi],dl
c001472f:	0f 84 a6 01 00 00    	je     c00148db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014735:	83 e1 07             	and    ecx,0x7
c0014738:	80 f9 04             	cmp    cl,0x4
c001473b:	0f 84 98 00 00 00    	je     c00147d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014741:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014746:	0f 95 c0             	setne  al
c0014749:	80 f9 05             	cmp    cl,0x5
c001474c:	0f 95 c2             	setne  dl
c001474f:	08 c2                	or     dl,al
c0014751:	74 79                	je     c00147cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014753:	84 c9                	test   cl,cl
c0014755:	75 05                	jne    c001475c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014757:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001475a:	eb 3c                	jmp    c0014798 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001475c:	80 f9 01             	cmp    cl,0x1
c001475f:	75 05                	jne    c0014766 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014761:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014764:	eb 32                	jmp    c0014798 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014766:	80 f9 02             	cmp    cl,0x2
c0014769:	75 05                	jne    c0014770 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001476b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001476e:	eb 28                	jmp    c0014798 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014770:	31 c0                	xor    eax,eax
c0014772:	80 f9 03             	cmp    cl,0x3
c0014775:	75 05                	jne    c001477c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014777:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001477a:	eb 1c                	jmp    c0014798 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001477c:	80 f9 05             	cmp    cl,0x5
c001477f:	75 05                	jne    c0014786 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0014781:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014784:	eb 12                	jmp    c0014798 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014786:	80 f9 06             	cmp    cl,0x6
c0014789:	75 05                	jne    c0014790 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001478b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001478e:	eb 08                	jmp    c0014798 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014790:	80 f9 07             	cmp    cl,0x7
c0014793:	75 03                	jne    c0014798 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014795:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014798:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001479d:	75 10                	jne    c00147af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001479f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00147a3:	b9 03 00 00 00       	mov    ecx,0x3
c00147a8:	01 d0                	add    eax,edx
c00147aa:	e9 37 01 00 00       	jmp    c00148e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00147af:	b9 02 00 00 00       	mov    ecx,0x2
c00147b4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00147b9:	0f 85 27 01 00 00    	jne    c00148e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00147bf:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00147c2:	b9 06 00 00 00       	mov    ecx,0x6
c00147c7:	e9 1a 01 00 00       	jmp    c00148e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00147cc:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00147cf:	b9 06 00 00 00       	mov    ecx,0x6
c00147d4:	e9 0f 01 00 00       	jmp    c00148e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00147d9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00147dc:	88 ca                	mov    dl,cl
c00147de:	c0 ea 06             	shr    dl,0x6
c00147e1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00147e5:	89 ca                	mov    edx,ecx
c00147e7:	66 c1 ea 03          	shr    dx,0x3
c00147eb:	83 e2 07             	and    edx,0x7
c00147ee:	80 e1 07             	and    cl,0x7
c00147f1:	75 05                	jne    c00147f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00147f3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00147f6:	eb 4c                	jmp    c0014844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00147f8:	80 f9 01             	cmp    cl,0x1
c00147fb:	75 05                	jne    c0014802 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00147fd:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014800:	eb 42                	jmp    c0014844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014802:	80 f9 02             	cmp    cl,0x2
c0014805:	75 05                	jne    c001480c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014807:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001480a:	eb 38                	jmp    c0014844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001480c:	80 f9 03             	cmp    cl,0x3
c001480f:	75 05                	jne    c0014816 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0014811:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0014814:	eb 2e                	jmp    c0014844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014816:	80 f9 04             	cmp    cl,0x4
c0014819:	75 12                	jne    c001482d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001481b:	f6 c4 60             	test   ah,0x60
c001481e:	75 08                	jne    c0014828 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0014820:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0014823:	8d 78 14             	lea    edi,[eax+0x14]
c0014826:	eb 1c                	jmp    c0014844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014828:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001482b:	eb 17                	jmp    c0014844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001482d:	80 f9 05             	cmp    cl,0x5
c0014830:	75 05                	jne    c0014837 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014832:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014835:	eb 0d                	jmp    c0014844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014837:	80 f9 06             	cmp    cl,0x6
c001483a:	75 05                	jne    c0014841 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001483c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001483f:	eb 03                	jmp    c0014844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014841:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014844:	84 d2                	test   dl,dl
c0014846:	75 05                	jne    c001484d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014848:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001484b:	eb 3c                	jmp    c0014889 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001484d:	80 fa 01             	cmp    dl,0x1
c0014850:	75 05                	jne    c0014857 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014852:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014855:	eb 32                	jmp    c0014889 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014857:	80 fa 02             	cmp    dl,0x2
c001485a:	75 05                	jne    c0014861 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001485c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001485f:	eb 28                	jmp    c0014889 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014861:	80 fa 03             	cmp    dl,0x3
c0014864:	75 05                	jne    c001486b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014866:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014869:	eb 1e                	jmp    c0014889 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001486b:	31 c0                	xor    eax,eax
c001486d:	80 fa 04             	cmp    dl,0x4
c0014870:	74 17                	je     c0014889 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014872:	80 fa 05             	cmp    dl,0x5
c0014875:	75 05                	jne    c001487c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014877:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001487a:	eb 0d                	jmp    c0014889 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001487c:	80 fa 06             	cmp    dl,0x6
c001487f:	75 05                	jne    c0014886 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014881:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014884:	eb 03                	jmp    c0014889 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014886:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014889:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001488e:	0f 94 c2             	sete   dl
c0014891:	80 f9 05             	cmp    cl,0x5
c0014894:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014898:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001489d:	d3 e0                	shl    eax,cl
c001489f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00148a3:	74 0a                	je     c00148af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00148a5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00148a8:	b9 07 00 00 00       	mov    ecx,0x7
c00148ad:	eb 37                	jmp    c00148e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00148af:	01 f8                	add    eax,edi
c00148b1:	b9 03 00 00 00       	mov    ecx,0x3
c00148b6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00148bb:	74 2b                	je     c00148e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148bd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00148c2:	75 0d                	jne    c00148d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00148c4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00148c8:	01 c8                	add    eax,ecx
c00148ca:	b9 04 00 00 00       	mov    ecx,0x4
c00148cf:	eb 17                	jmp    c00148e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148d1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00148d4:	b9 07 00 00 00       	mov    ecx,0x7
c00148d9:	eb 0d                	jmp    c00148e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148db:	b9 02 00 00 00       	mov    ecx,0x2
c00148e0:	b2 01                	mov    dl,0x1
c00148e2:	31 c0                	xor    eax,eax
c00148e4:	eb 02                	jmp    c00148e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148e6:	31 d2                	xor    edx,edx
c00148e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00148ec:	89 0b                	mov    DWORD PTR [ebx],ecx
c00148ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00148f2:	88 11                	mov    BYTE PTR [ecx],dl
c00148f4:	5a                   	pop    edx
c00148f5:	5b                   	pop    ebx
c00148f6:	5e                   	pop    esi
c00148f7:	5f                   	pop    edi
c00148f8:	c3                   	ret    

c00148f9 <Krnl::smpEntry()>:
c00148f9:	eb fe                	jmp    c00148f9 <Krnl::smpEntry()>

c00148fb <Krnl::startCPU(int)>:
c00148fb:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0014900:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014907:	0f 84 36 01 00 00    	je     c0014a43 <Krnl::startCPU(int)+0x148>
c001490d:	53                   	push   ebx
c001490e:	83 ec 10             	sub    esp,0x10
c0014911:	fa                   	cli    
c0014912:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0014918:	6a 1b                	push   0x1b
c001491a:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c0014920:	e8 49 49 ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0014925:	25 00 f0 ff ff       	and    eax,0xfffff000
c001492a:	89 c3                	mov    ebx,eax
c001492c:	58                   	pop    eax
c001492d:	5a                   	pop    edx
c001492e:	53                   	push   ebx
c001492f:	68 58 63 02 c0       	push   0xc0026358
c0014934:	e8 0e 87 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0014939:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014947:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014951:	c1 e0 18             	shl    eax,0x18
c0014954:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001495a:	83 c4 10             	add    esp,0x10
c001495d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014963:	09 c2                	or     edx,eax
c0014965:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001496b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014971:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014977:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001497d:	80 cd c5             	or     ch,0xc5
c0014980:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014986:	f3 90                	pause  
c0014988:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001498a:	0f ba e1 0c          	bt     ecx,0xc
c001498e:	72 f6                	jb     c0014986 <Krnl::startCPU(int)+0x8b>
c0014990:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014996:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001499c:	09 c1                	or     ecx,eax
c001499e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00149a4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00149aa:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00149b0:	80 cd 85             	or     ch,0x85
c00149b3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00149b9:	f3 90                	pause  
c00149bb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00149bd:	0f ba e1 0c          	bt     ecx,0xc
c00149c1:	72 f6                	jb     c00149b9 <Krnl::startCPU(int)+0xbe>
c00149c3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00149cd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00149d3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00149d9:	09 c1                	or     ecx,eax
c00149db:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00149e1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00149e7:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00149ed:	81 c9 02 06 00 00    	or     ecx,0x602
c00149f3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00149f9:	f3 90                	pause  
c00149fb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00149fd:	0f ba e1 0c          	bt     ecx,0xc
c0014a01:	72 f6                	jb     c00149f9 <Krnl::startCPU(int)+0xfe>
c0014a03:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a0d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014a13:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014a19:	09 c8                	or     eax,ecx
c0014a1b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014a21:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014a27:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014a2c:	0d 02 06 00 00       	or     eax,0x602
c0014a31:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014a37:	f3 90                	pause  
c0014a39:	8b 02                	mov    eax,DWORD PTR [edx]
c0014a3b:	0f ba e0 0c          	bt     eax,0xc
c0014a3f:	72 f6                	jb     c0014a37 <Krnl::startCPU(int)+0x13c>
c0014a41:	eb fe                	jmp    c0014a41 <Krnl::startCPU(int)+0x146>
c0014a43:	c3                   	ret    

c0014a44 <Krnl::startCPUs()>:
c0014a44:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0014a49:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014a4f:	88 c2                	mov    dl,al
c0014a51:	83 e2 0a             	and    edx,0xa
c0014a54:	80 fa 0a             	cmp    dl,0xa
c0014a57:	75 09                	jne    c0014a62 <Krnl::startCPUs()+0x1e>
c0014a59:	a8 01                	test   al,0x1
c0014a5b:	74 05                	je     c0014a62 <Krnl::startCPUs()+0x1e>
c0014a5d:	e9 39 b7 fe ff       	jmp    c000019b <prepareTramp>
c0014a62:	c3                   	ret    
c0014a63:	90                   	nop

c0014a64 <EnvVarContainer::getEnv(char const*)>:
c0014a64:	57                   	push   edi
c0014a65:	56                   	push   esi
c0014a66:	53                   	push   ebx
c0014a67:	31 db                	xor    ebx,ebx
c0014a69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a6d:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014a6f:	7e 2b                	jle    c0014a9c <EnvVarContainer::getEnv(char const*)+0x38>
c0014a71:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014a78:	50                   	push   eax
c0014a79:	50                   	push   eax
c0014a7a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014a7d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014a80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a84:	e8 43 bd fe ff       	call   c00007cc <strcmp>
c0014a89:	83 c4 10             	add    esp,0x10
c0014a8c:	85 c0                	test   eax,eax
c0014a8e:	75 09                	jne    c0014a99 <EnvVarContainer::getEnv(char const*)+0x35>
c0014a90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014a93:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014a97:	eb 05                	jmp    c0014a9e <EnvVarContainer::getEnv(char const*)+0x3a>
c0014a99:	43                   	inc    ebx
c0014a9a:	eb d1                	jmp    c0014a6d <EnvVarContainer::getEnv(char const*)+0x9>
c0014a9c:	31 c0                	xor    eax,eax
c0014a9e:	5b                   	pop    ebx
c0014a9f:	5e                   	pop    esi
c0014aa0:	5f                   	pop    edi
c0014aa1:	c3                   	ret    

c0014aa2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014aa2:	55                   	push   ebp
c0014aa3:	57                   	push   edi
c0014aa4:	56                   	push   esi
c0014aa5:	53                   	push   ebx
c0014aa6:	83 ec 28             	sub    esp,0x28
c0014aa9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014aad:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014ab1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014ab5:	56                   	push   esi
c0014ab6:	e8 e5 bb fe ff       	call   c00006a0 <strlen>
c0014abb:	40                   	inc    eax
c0014abc:	89 04 24             	mov    DWORD PTR [esp],eax
c0014abf:	e8 97 52 ff ff       	call   c0009d5b <malloc>
c0014ac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ac7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014acb:	e8 d0 bb fe ff       	call   c00006a0 <strlen>
c0014ad0:	40                   	inc    eax
c0014ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ad4:	e8 82 52 ff ff       	call   c0009d5b <malloc>
c0014ad9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014adc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ae0:	e8 bb bb fe ff       	call   c00006a0 <strlen>
c0014ae5:	83 c4 0c             	add    esp,0xc
c0014ae8:	40                   	inc    eax
c0014ae9:	50                   	push   eax
c0014aea:	6a 00                	push   0x0
c0014aec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014af0:	e8 8f bb fe ff       	call   c0000684 <memset>
c0014af5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014af8:	e8 a3 bb fe ff       	call   c00006a0 <strlen>
c0014afd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014b01:	8d 48 01             	lea    ecx,[eax+0x1]
c0014b04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b09:	89 de                	mov    esi,ebx
c0014b0b:	e8 90 bb fe ff       	call   c00006a0 <strlen>
c0014b10:	83 c4 0c             	add    esp,0xc
c0014b13:	40                   	inc    eax
c0014b14:	50                   	push   eax
c0014b15:	6a 00                	push   0x0
c0014b17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b1b:	e8 64 bb fe ff       	call   c0000684 <memset>
c0014b20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b23:	e8 78 bb fe ff       	call   c00006a0 <strlen>
c0014b28:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014b2c:	8d 48 01             	lea    ecx,[eax+0x1]
c0014b2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b34:	40                   	inc    eax
c0014b35:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014b38:	c1 e0 03             	shl    eax,0x3
c0014b3b:	5a                   	pop    edx
c0014b3c:	59                   	pop    ecx
c0014b3d:	50                   	push   eax
c0014b3e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b41:	e8 01 52 ff ff       	call   c0009d47 <realloc>
c0014b46:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014b4a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014b4d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014b50:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014b54:	b9 08 00 00 00       	mov    ecx,0x8
c0014b59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b5b:	83 c4 2c             	add    esp,0x2c
c0014b5e:	5b                   	pop    ebx
c0014b5f:	5e                   	pop    esi
c0014b60:	5f                   	pop    edi
c0014b61:	5d                   	pop    ebp
c0014b62:	c3                   	ret    
c0014b63:	90                   	nop

c0014b64 <EnvVarContainer::deleteEnv(char const*)>:
c0014b64:	c3                   	ret    
c0014b65:	90                   	nop

c0014b66 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014b66:	55                   	push   ebp
c0014b67:	57                   	push   edi
c0014b68:	56                   	push   esi
c0014b69:	53                   	push   ebx
c0014b6a:	81 ec 38 01 00 00    	sub    esp,0x138
c0014b70:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014b77:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014b7e:	68 14 01 00 00       	push   0x114
c0014b83:	e8 d3 51 ff ff       	call   c0009d5b <malloc>
c0014b88:	83 c4 0c             	add    esp,0xc
c0014b8b:	89 c3                	mov    ebx,eax
c0014b8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b90:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014b97:	50                   	push   eax
c0014b98:	e8 15 8a ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0014b9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ba0:	e8 55 8d ff ff       	call   c000d8fa <File::exists()>
c0014ba5:	83 c4 10             	add    esp,0x10
c0014ba8:	84 c0                	test   al,al
c0014baa:	75 31                	jne    c0014bdd <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014bac:	50                   	push   eax
c0014bad:	50                   	push   eax
c0014bae:	6a 12                	push   0x12
c0014bb0:	53                   	push   ebx
c0014bb1:	e8 d6 8a ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0014bb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bb8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014bbb:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bbe:	e8 dd ba fe ff       	call   c00006a0 <strlen>
c0014bc3:	5a                   	pop    edx
c0014bc4:	31 d2                	xor    edx,edx
c0014bc6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014bca:	51                   	push   ecx
c0014bcb:	56                   	push   esi
c0014bcc:	52                   	push   edx
c0014bcd:	50                   	push   eax
c0014bce:	53                   	push   ebx
c0014bcf:	ff d7                	call   edi
c0014bd1:	83 c4 14             	add    esp,0x14
c0014bd4:	53                   	push   ebx
c0014bd5:	e8 10 8b ff ff       	call   c000d6ea <File::close()>
c0014bda:	83 c4 10             	add    esp,0x10
c0014bdd:	56                   	push   esi
c0014bde:	31 f6                	xor    esi,esi
c0014be0:	68 00 01 00 00       	push   0x100
c0014be5:	6a 00                	push   0x0
c0014be7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014beb:	50                   	push   eax
c0014bec:	e8 93 ba fe ff       	call   c0000684 <memset>
c0014bf1:	5f                   	pop    edi
c0014bf2:	58                   	pop    eax
c0014bf3:	6a 01                	push   0x1
c0014bf5:	53                   	push   ebx
c0014bf6:	e8 91 8a ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0014bfb:	83 c4 10             	add    esp,0x10
c0014bfe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c06:	83 ec 0c             	sub    esp,0xc
c0014c09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c0b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014c0f:	51                   	push   ecx
c0014c10:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014c14:	52                   	push   edx
c0014c15:	6a 00                	push   0x0
c0014c17:	6a 01                	push   0x1
c0014c19:	53                   	push   ebx
c0014c1a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c1d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014c21:	83 c4 20             	add    esp,0x20
c0014c24:	3c 0d                	cmp    al,0xd
c0014c26:	0f 84 09 01 00 00    	je     c0014d35 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014c2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014c31:	0f 84 ef 00 00 00    	je     c0014d26 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014c37:	3c 0a                	cmp    al,0xa
c0014c39:	74 13                	je     c0014c4e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014c3b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c40:	74 0c                	je     c0014c4e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014c42:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014c48:	0f 8e d8 00 00 00    	jle    c0014d26 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014c4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c52:	83 ec 0c             	sub    esp,0xc
c0014c55:	8d 78 01             	lea    edi,[eax+0x1]
c0014c58:	57                   	push   edi
c0014c59:	e8 fd 50 ff ff       	call   c0009d5b <malloc>
c0014c5e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014c62:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014c66:	8d 56 04             	lea    edx,[esi+0x4]
c0014c69:	89 14 24             	mov    DWORD PTR [esp],edx
c0014c6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014c70:	e8 e6 50 ff ff       	call   c0009d5b <malloc>
c0014c75:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c79:	83 c4 0c             	add    esp,0xc
c0014c7c:	57                   	push   edi
c0014c7d:	6a 00                	push   0x0
c0014c7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c83:	e8 fc b9 fe ff       	call   c0000684 <memset>
c0014c88:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014c8c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014c90:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014c94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c96:	83 c4 0c             	add    esp,0xc
c0014c99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014c9d:	52                   	push   edx
c0014c9e:	6a 00                	push   0x0
c0014ca0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014ca4:	e8 db b9 fe ff       	call   c0000684 <memset>
c0014ca9:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014cad:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014cb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cb4:	e8 e7 b9 fe ff       	call   c00006a0 <strlen>
c0014cb9:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014cbd:	89 c1                	mov    ecx,eax
c0014cbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014cc4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014cc7:	40                   	inc    eax
c0014cc8:	83 c4 10             	add    esp,0x10
c0014ccb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014cce:	85 d2                	test   edx,edx
c0014cd0:	75 0c                	jne    c0014cde <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014cd2:	83 ec 0c             	sub    esp,0xc
c0014cd5:	6a 08                	push   0x8
c0014cd7:	e8 7f 50 ff ff       	call   c0009d5b <malloc>
c0014cdc:	eb 0c                	jmp    c0014cea <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014cde:	c1 e0 03             	shl    eax,0x3
c0014ce1:	51                   	push   ecx
c0014ce2:	51                   	push   ecx
c0014ce3:	50                   	push   eax
c0014ce4:	52                   	push   edx
c0014ce5:	e8 5d 50 ff ff       	call   c0009d47 <realloc>
c0014cea:	83 c4 10             	add    esp,0x10
c0014ced:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014cf0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014cf3:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014cf6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014cfa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014cfe:	b9 08 00 00 00       	mov    ecx,0x8
c0014d03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d05:	31 f6                	xor    esi,esi
c0014d07:	50                   	push   eax
c0014d08:	68 00 01 00 00       	push   0x100
c0014d0d:	6a 00                	push   0x0
c0014d0f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014d13:	50                   	push   eax
c0014d14:	e8 6b b9 fe ff       	call   c0000684 <memset>
c0014d19:	83 c4 10             	add    esp,0x10
c0014d1c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d24:	eb 0f                	jmp    c0014d35 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014d26:	3c 3d                	cmp    al,0x3d
c0014d28:	74 07                	je     c0014d31 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014d2a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014d2e:	46                   	inc    esi
c0014d2f:	eb 04                	jmp    c0014d35 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014d31:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014d35:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d3a:	0f 85 c6 fe ff ff    	jne    c0014c06 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014d40:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014d46:	5b                   	pop    ebx
c0014d47:	5e                   	pop    esi
c0014d48:	5f                   	pop    edi
c0014d49:	5d                   	pop    ebp
c0014d4a:	c3                   	ret    
c0014d4b:	90                   	nop

c0014d4c <EnvVarContainer::__loadSystem()>:
c0014d4c:	83 ec 10             	sub    esp,0x10
c0014d4f:	68 60 82 02 c0       	push   0xc0028260
c0014d54:	68 69 63 02 c0       	push   0xc0026369
c0014d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d5d:	e8 04 fe ff ff       	call   c0014b66 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014d62:	83 c4 1c             	add    esp,0x1c
c0014d65:	c3                   	ret    

c0014d66 <EnvVarContainer::__loadUser()>:
c0014d66:	c3                   	ret    
c0014d67:	90                   	nop

c0014d68 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d7a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014d7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014d88:	90                   	nop
c0014d89:	c3                   	ret    

c0014d8a <EnvVarContainer::~EnvVarContainer()>:
c0014d8a:	83 ec 0c             	sub    esp,0xc
c0014d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d94:	85 c0                	test   eax,eax
c0014d96:	74 1d                	je     c0014db5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d9e:	85 c0                	test   eax,eax
c0014da0:	74 13                	je     c0014db5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014da9:	83 ec 0c             	sub    esp,0xc
c0014dac:	50                   	push   eax
c0014dad:	e8 b9 4f ff ff       	call   c0009d6b <free>
c0014db2:	83 c4 10             	add    esp,0x10
c0014db5:	90                   	nop
c0014db6:	83 c4 0c             	add    esp,0xc
c0014db9:	c3                   	ret    

c0014dba <Krnl::getEnv(Process*, char const*)>:
c0014dba:	53                   	push   ebx
c0014dbb:	83 ec 08             	sub    esp,0x8
c0014dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dc2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014dc6:	39 05 d0 9d 02 c0    	cmp    DWORD PTR ds:0xc0029dd0,eax
c0014dcc:	74 04                	je     c0014dd2 <Krnl::getEnv(Process*, char const*)+0x18>
c0014dce:	85 c0                	test   eax,eax
c0014dd0:	75 0b                	jne    c0014ddd <Krnl::getEnv(Process*, char const*)+0x23>
c0014dd2:	a1 54 93 02 c0       	mov    eax,ds:0xc0029354
c0014dd7:	85 c0                	test   eax,eax
c0014dd9:	75 19                	jne    c0014df4 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014ddb:	eb 27                	jmp    c0014e04 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014ddd:	52                   	push   edx
c0014dde:	52                   	push   edx
c0014ddf:	53                   	push   ebx
c0014de0:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014de6:	e8 79 fc ff ff       	call   c0014a64 <EnvVarContainer::getEnv(char const*)>
c0014deb:	83 c4 10             	add    esp,0x10
c0014dee:	85 c0                	test   eax,eax
c0014df0:	75 28                	jne    c0014e1a <Krnl::getEnv(Process*, char const*)+0x60>
c0014df2:	eb de                	jmp    c0014dd2 <Krnl::getEnv(Process*, char const*)+0x18>
c0014df4:	52                   	push   edx
c0014df5:	52                   	push   edx
c0014df6:	53                   	push   ebx
c0014df7:	50                   	push   eax
c0014df8:	e8 67 fc ff ff       	call   c0014a64 <EnvVarContainer::getEnv(char const*)>
c0014dfd:	83 c4 10             	add    esp,0x10
c0014e00:	85 c0                	test   eax,eax
c0014e02:	75 16                	jne    c0014e1a <Krnl::getEnv(Process*, char const*)+0x60>
c0014e04:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014e08:	a1 58 93 02 c0       	mov    eax,ds:0xc0029358
c0014e0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e11:	83 c4 08             	add    esp,0x8
c0014e14:	5b                   	pop    ebx
c0014e15:	e9 4a fc ff ff       	jmp    c0014a64 <EnvVarContainer::getEnv(char const*)>
c0014e1a:	83 c4 08             	add    esp,0x8
c0014e1d:	5b                   	pop    ebx
c0014e1e:	c3                   	ret    

c0014e1f <Krnl::setEnvSystem(char const*, char const*)>:
c0014e1f:	83 ec 10             	sub    esp,0x10
c0014e22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e2a:	ff 35 58 93 02 c0    	push   DWORD PTR ds:0xc0029358
c0014e30:	e8 6d fc ff ff       	call   c0014aa2 <EnvVarContainer::setEnv(char const*, char const*)>
c0014e35:	83 c4 1c             	add    esp,0x1c
c0014e38:	c3                   	ret    

c0014e39 <Krnl::setEnvUser(char const*, char const*)>:
c0014e39:	a1 54 93 02 c0       	mov    eax,ds:0xc0029354
c0014e3e:	85 c0                	test   eax,eax
c0014e40:	74 15                	je     c0014e57 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014e42:	83 ec 10             	sub    esp,0x10
c0014e45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e4d:	50                   	push   eax
c0014e4e:	e8 4f fc ff ff       	call   c0014aa2 <EnvVarContainer::setEnv(char const*, char const*)>
c0014e53:	83 c4 1c             	add    esp,0x1c
c0014e56:	c3                   	ret    
c0014e57:	c3                   	ret    

c0014e58 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014e58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e5c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014e62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e66:	e9 37 fc ff ff       	jmp    c0014aa2 <EnvVarContainer::setEnv(char const*, char const*)>

c0014e6b <Krnl::deleteEnvSystem(char const*)>:
c0014e6b:	c3                   	ret    

c0014e6c <Krnl::deleteEnvUser(char const*)>:
c0014e6c:	c3                   	ret    

c0014e6d <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014e6d:	c3                   	ret    

c0014e6e <Krnl::newProcessEnv(Process*)>:
c0014e6e:	83 ec 28             	sub    esp,0x28
c0014e71:	6a 0c                	push   0xc
c0014e73:	e8 e3 4e ff ff       	call   c0009d5b <malloc>
c0014e78:	5a                   	pop    edx
c0014e79:	59                   	pop    ecx
c0014e7a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014e7e:	50                   	push   eax
c0014e7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e83:	e8 e0 fe ff ff       	call   c0014d68 <EnvVarContainer::EnvVarContainer(Process*)>
c0014e88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e8c:	83 c4 2c             	add    esp,0x2c
c0014e8f:	c3                   	ret    

c0014e90 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014e90:	57                   	push   edi
c0014e91:	56                   	push   esi
c0014e92:	53                   	push   ebx
c0014e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e97:	83 ec 0c             	sub    esp,0xc
c0014e9a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014ea0:	6a 0c                	push   0xc
c0014ea2:	e8 b4 4e ff ff       	call   c0009d5b <malloc>
c0014ea7:	89 c3                	mov    ebx,eax
c0014ea9:	58                   	pop    eax
c0014eaa:	5a                   	pop    edx
c0014eab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014eaf:	53                   	push   ebx
c0014eb0:	e8 b3 fe ff ff       	call   c0014d68 <EnvVarContainer::EnvVarContainer(Process*)>
c0014eb5:	8b 07                	mov    eax,DWORD PTR [edi]
c0014eb7:	89 03                	mov    DWORD PTR [ebx],eax
c0014eb9:	c1 e0 03             	shl    eax,0x3
c0014ebc:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ebf:	e8 97 4e ff ff       	call   c0009d5b <malloc>
c0014ec4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014ec7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014ec9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014ecc:	c1 e1 03             	shl    ecx,0x3
c0014ecf:	89 c7                	mov    edi,eax
c0014ed1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ed3:	83 c4 10             	add    esp,0x10
c0014ed6:	89 d8                	mov    eax,ebx
c0014ed8:	5b                   	pop    ebx
c0014ed9:	5e                   	pop    esi
c0014eda:	5f                   	pop    edi
c0014edb:	c3                   	ret    

c0014edc <Krnl::loadSystemEnv()>:
c0014edc:	53                   	push   ebx
c0014edd:	83 ec 14             	sub    esp,0x14
c0014ee0:	6a 0c                	push   0xc
c0014ee2:	e8 74 4e ff ff       	call   c0009d5b <malloc>
c0014ee7:	89 c3                	mov    ebx,eax
c0014ee9:	58                   	pop    eax
c0014eea:	5a                   	pop    edx
c0014eeb:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c0014ef1:	53                   	push   ebx
c0014ef2:	e8 71 fe ff ff       	call   c0014d68 <EnvVarContainer::EnvVarContainer(Process*)>
c0014ef7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014efa:	89 1d 58 93 02 c0    	mov    DWORD PTR ds:0xc0029358,ebx
c0014f00:	e8 47 fe ff ff       	call   c0014d4c <EnvVarContainer::__loadSystem()>
c0014f05:	83 c4 18             	add    esp,0x18
c0014f08:	5b                   	pop    ebx
c0014f09:	c3                   	ret    

c0014f0a <Krnl::loadUserEnv()>:
c0014f0a:	53                   	push   ebx
c0014f0b:	83 ec 14             	sub    esp,0x14
c0014f0e:	6a 0c                	push   0xc
c0014f10:	e8 46 4e ff ff       	call   c0009d5b <malloc>
c0014f15:	89 c3                	mov    ebx,eax
c0014f17:	58                   	pop    eax
c0014f18:	5a                   	pop    edx
c0014f19:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c0014f1f:	53                   	push   ebx
c0014f20:	e8 43 fe ff ff       	call   c0014d68 <EnvVarContainer::EnvVarContainer(Process*)>
c0014f25:	89 1d 54 93 02 c0    	mov    DWORD PTR ds:0xc0029354,ebx
c0014f2b:	83 c4 18             	add    esp,0x18
c0014f2e:	5b                   	pop    ebx
c0014f2f:	c3                   	ret    

c0014f30 <Krnl::flushEnv()>:
c0014f30:	c3                   	ret    

c0014f31 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014f31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f35:	8b 15 54 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029354
c0014f3b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014f41:	a1 58 93 02 c0       	mov    eax,ds:0xc0029358
c0014f46:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f48:	03 01                	add    eax,DWORD PTR [ecx]
c0014f4a:	85 d2                	test   edx,edx
c0014f4c:	74 02                	je     c0014f50 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014f4e:	03 02                	add    eax,DWORD PTR [edx]
c0014f50:	c3                   	ret    

c0014f51 <Krnl::getProcessEnvPair(Process*, int)>:
c0014f51:	57                   	push   edi
c0014f52:	56                   	push   esi
c0014f53:	8b 35 54 93 02 c0    	mov    esi,DWORD PTR ds:0xc0029354
c0014f59:	53                   	push   ebx
c0014f5a:	85 f6                	test   esi,esi
c0014f5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f64:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014f6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f6e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014f70:	75 16                	jne    c0014f88 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014f72:	39 c2                	cmp    edx,eax
c0014f74:	7c 16                	jl     c0014f8c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014f76:	8b 0d 58 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029358
c0014f7c:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014f7e:	01 c6                	add    esi,eax
c0014f80:	39 d6                	cmp    esi,edx
c0014f82:	7e 3c                	jle    c0014fc0 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014f84:	29 c2                	sub    edx,eax
c0014f86:	eb 04                	jmp    c0014f8c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014f88:	39 c2                	cmp    edx,eax
c0014f8a:	7d 05                	jge    c0014f91 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014f8c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014f8f:	eb 20                	jmp    c0014fb1 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014f91:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014f93:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014f96:	39 d1                	cmp    ecx,edx
c0014f98:	7e 04                	jle    c0014f9e <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014f9a:	29 c2                	sub    edx,eax
c0014f9c:	eb 10                	jmp    c0014fae <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014f9e:	8b 35 58 93 02 c0    	mov    esi,DWORD PTR ds:0xc0029358
c0014fa4:	03 0e                	add    ecx,DWORD PTR [esi]
c0014fa6:	39 d1                	cmp    ecx,edx
c0014fa8:	7e 16                	jle    c0014fc0 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014faa:	29 c2                	sub    edx,eax
c0014fac:	29 fa                	sub    edx,edi
c0014fae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014fb1:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014fb4:	8b 02                	mov    eax,DWORD PTR [edx]
c0014fb6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014fb9:	89 03                	mov    DWORD PTR [ebx],eax
c0014fbb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014fbe:	eb 1d                	jmp    c0014fdd <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014fc0:	83 ec 0c             	sub    esp,0xc
c0014fc3:	68 8b 63 02 c0       	push   0xc002638b
c0014fc8:	e8 18 00 00 00       	call   c0014fe5 <Krnl::panic(char const*)>
c0014fcd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014fd3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014fda:	83 c4 10             	add    esp,0x10
c0014fdd:	89 d8                	mov    eax,ebx
c0014fdf:	5b                   	pop    ebx
c0014fe0:	5e                   	pop    esi
c0014fe1:	5f                   	pop    edi
c0014fe2:	c2 04 00             	ret    0x4

c0014fe5 <Krnl::panic(char const*)>:
c0014fe5:	53                   	push   ebx
c0014fe6:	83 ec 10             	sub    esp,0x10
c0014fe9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014fed:	fa                   	cli    
c0014fee:	c6 05 64 93 02 c0 01 	mov    BYTE PTR ds:0xc0029364,0x1
c0014ff5:	53                   	push   ebx
c0014ff6:	68 a5 63 02 c0       	push   0xc00263a5
c0014ffb:	e8 47 80 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0015000:	83 c4 0c             	add    esp,0xc
c0015003:	6a 01                	push   0x1
c0015005:	6a 0f                	push   0xf
c0015007:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c001500d:	e8 a2 5c ff ff       	call   c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015012:	59                   	pop    ecx
c0015013:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015019:	e8 b8 61 ff ff       	call   c000b1d6 <VgaText::clearScreen()>
c001501e:	58                   	pop    eax
c001501f:	5a                   	pop    edx
c0015020:	68 fc 63 02 c0       	push   0xc00263fc
c0015025:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c001502b:	e8 c4 5c ff ff       	call   c000acf4 <VgaText::setTitle(char*)>
c0015030:	83 c4 0c             	add    esp,0xc
c0015033:	6a 01                	push   0x1
c0015035:	6a 0f                	push   0xf
c0015037:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c001503d:	e8 72 5c ff ff       	call   c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015042:	59                   	pop    ecx
c0015043:	58                   	pop    eax
c0015044:	68 be 63 02 c0       	push   0xc00263be
c0015049:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c001504f:	e8 0e 63 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015054:	58                   	pop    eax
c0015055:	5a                   	pop    edx
c0015056:	68 48 64 02 c0       	push   0xc0026448
c001505b:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015061:	e8 fc 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015066:	59                   	pop    ecx
c0015067:	58                   	pop    eax
c0015068:	68 da 63 02 c0       	push   0xc00263da
c001506d:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015073:	e8 ea 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015078:	58                   	pop    eax
c0015079:	5a                   	pop    edx
c001507a:	53                   	push   ebx
c001507b:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015081:	e8 dc 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015086:	59                   	pop    ecx
c0015087:	5b                   	pop    ebx
c0015088:	68 fa 63 02 c0       	push   0xc00263fa
c001508d:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015093:	e8 ca 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015098:	58                   	pop    eax
c0015099:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001509d:	e8 17 31 00 00       	call   c00181b9 <Thr::getDriverNameFromAddress(unsigned long)>
c00150a2:	83 c4 10             	add    esp,0x10
c00150a5:	85 c0                	test   eax,eax
c00150a7:	0f 84 36 01 00 00    	je     c00151e3 <Krnl::panic(char const*)+0x1fe>
c00150ad:	83 ec 08             	sub    esp,0x8
c00150b0:	89 c3                	mov    ebx,eax
c00150b2:	68 84 64 02 c0       	push   0xc0026484
c00150b7:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c00150bd:	e8 a0 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00150c2:	59                   	pop    ecx
c00150c3:	58                   	pop    eax
c00150c4:	68 da 63 02 c0       	push   0xc00263da
c00150c9:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c00150cf:	e8 8e 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00150d4:	58                   	pop    eax
c00150d5:	5a                   	pop    edx
c00150d6:	53                   	push   ebx
c00150d7:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c00150dd:	e8 80 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00150e2:	83 c4 10             	add    esp,0x10
c00150e5:	83 ec 08             	sub    esp,0x8
c00150e8:	68 f9 63 02 c0       	push   0xc00263f9
c00150ed:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c00150f3:	e8 6a 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00150f8:	58                   	pop    eax
c00150f9:	5a                   	pop    edx
c00150fa:	68 dc 64 02 c0       	push   0xc00264dc
c00150ff:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015105:	e8 58 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c001510a:	59                   	pop    ecx
c001510b:	5b                   	pop    ebx
c001510c:	68 1c 65 02 c0       	push   0xc002651c
c0015111:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015117:	e8 46 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c001511c:	58                   	pop    eax
c001511d:	5a                   	pop    edx
c001511e:	68 e5 63 02 c0       	push   0xc00263e5
c0015123:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015129:	e8 34 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c001512e:	59                   	pop    ecx
c001512f:	5b                   	pop    ebx
c0015130:	68 60 65 02 c0       	push   0xc0026560
c0015135:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c001513b:	e8 22 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015140:	58                   	pop    eax
c0015141:	5a                   	pop    edx
c0015142:	68 fd 63 02 c0       	push   0xc00263fd
c0015147:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c001514d:	e8 10 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015152:	0f 20 c0             	mov    eax,cr0
c0015155:	59                   	pop    ecx
c0015156:	5b                   	pop    ebx
c0015157:	50                   	push   eax
c0015158:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c001515e:	e8 b9 61 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c0015163:	58                   	pop    eax
c0015164:	5a                   	pop    edx
c0015165:	68 07 64 02 c0       	push   0xc0026407
c001516a:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015170:	e8 ed 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015175:	0f 20 d0             	mov    eax,cr2
c0015178:	59                   	pop    ecx
c0015179:	5b                   	pop    ebx
c001517a:	50                   	push   eax
c001517b:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015181:	e8 96 61 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c0015186:	58                   	pop    eax
c0015187:	5a                   	pop    edx
c0015188:	68 11 64 02 c0       	push   0xc0026411
c001518d:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015193:	e8 ca 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015198:	0f 20 d8             	mov    eax,cr3
c001519b:	59                   	pop    ecx
c001519c:	5b                   	pop    ebx
c001519d:	50                   	push   eax
c001519e:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c00151a4:	e8 73 61 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c00151a9:	58                   	pop    eax
c00151aa:	5a                   	pop    edx
c00151ab:	68 24 64 02 c0       	push   0xc0026424
c00151b0:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c00151b6:	e8 a7 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151bb:	0f 20 e0             	mov    eax,cr4
c00151be:	59                   	pop    ecx
c00151bf:	5b                   	pop    ebx
c00151c0:	50                   	push   eax
c00151c1:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c00151c7:	e8 50 61 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c00151cc:	58                   	pop    eax
c00151cd:	5a                   	pop    edx
c00151ce:	68 2e 64 02 c0       	push   0xc002642e
c00151d3:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c00151d9:	e8 84 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	eb fe                	jmp    c00151e1 <Krnl::panic(char const*)+0x1fc>
c00151e3:	51                   	push   ecx
c00151e4:	51                   	push   ecx
c00151e5:	68 b0 64 02 c0       	push   0xc00264b0
c00151ea:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c00151f0:	e8 6d 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151f5:	5b                   	pop    ebx
c00151f6:	58                   	pop    eax
c00151f7:	68 da 63 02 c0       	push   0xc00263da
c00151fc:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c0015202:	e8 5b 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015207:	58                   	pop    eax
c0015208:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001520d:	5a                   	pop    edx
c001520e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015211:	83 c0 0c             	add    eax,0xc
c0015214:	50                   	push   eax
c0015215:	ff 35 04 89 02 c0    	push   DWORD PTR ds:0xc0028904
c001521b:	e8 42 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015220:	83 c4 10             	add    esp,0x10
c0015223:	e9 bd fe ff ff       	jmp    c00150e5 <Krnl::panic(char const*)+0x100>

c0015228 <Krnl::powerThread(void*)>:
c0015228:	53                   	push   ebx
c0015229:	83 ec 08             	sub    esp,0x8
c001522c:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0015231:	48                   	dec    eax
c0015232:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0015237:	75 01                	jne    c001523a <Krnl::powerThread(void*)+0x12>
c0015239:	fb                   	sti    
c001523a:	52                   	push   edx
c001523b:	52                   	push   edx
c001523c:	ff 35 c4 93 02 c0    	push   DWORD PTR ds:0xc00293c4
c0015242:	68 86 65 02 c0       	push   0xc0026586
c0015247:	e8 fb 7d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001524c:	59                   	pop    ecx
c001524d:	8b 1d b4 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293b4
c0015253:	58                   	pop    eax
c0015254:	c6 05 80 93 02 c0 00 	mov    BYTE PTR ds:0xc0029380,0x0
c001525b:	53                   	push   ebx
c001525c:	68 90 65 02 c0       	push   0xc0026590
c0015261:	e8 e1 7d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0015266:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001526d:	e8 86 3c 00 00       	call   c0018ef8 <sleep(unsigned int)>
c0015272:	a1 c4 93 02 c0       	mov    eax,ds:0xc00293c4
c0015277:	83 c4 10             	add    esp,0x10
c001527a:	83 c0 0a             	add    eax,0xa
c001527d:	85 db                	test   ebx,ebx
c001527f:	a3 c4 93 02 c0       	mov    ds:0xc00293c4,eax
c0015284:	74 b4                	je     c001523a <Krnl::powerThread(void*)+0x12>
c0015286:	39 d8                	cmp    eax,ebx
c0015288:	7e b0                	jle    c001523a <Krnl::powerThread(void*)+0x12>
c001528a:	83 ec 0c             	sub    esp,0xc
c001528d:	68 a8 65 02 c0       	push   0xc00265a8
c0015292:	e8 b0 7d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0015297:	58                   	pop    eax
c0015298:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c001529e:	e8 5f 40 ff ff       	call   c0009302 <Computer::sleep()>
c00152a3:	83 c4 10             	add    esp,0x10
c00152a6:	eb 92                	jmp    c001523a <Krnl::powerThread(void*)+0x12>

c00152a8 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00152a8:	57                   	push   edi
c00152a9:	b9 09 00 00 00       	mov    ecx,0x9
c00152ae:	56                   	push   esi
c00152af:	bf a0 93 02 c0       	mov    edi,0xc00293a0
c00152b4:	fc                   	cld    
c00152b5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00152b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00152bb:	5e                   	pop    esi
c00152bc:	5f                   	pop    edi
c00152bd:	c3                   	ret    

c00152be <Krnl::userIOReceived()>:
c00152be:	c7 05 c4 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00293c4,0x0
c00152c8:	c3                   	ret    

c00152c9 <Krnl::handlePowerButton()>:
c00152c9:	83 ec 0c             	sub    esp,0xc
c00152cc:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c00152d1:	83 f8 02             	cmp    eax,0x2
c00152d4:	75 10                	jne    c00152e6 <Krnl::handlePowerButton()+0x1d>
c00152d6:	83 ec 0c             	sub    esp,0xc
c00152d9:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c00152df:	e8 ee 3f ff ff       	call   c00092d2 <Computer::shutdown()>
c00152e4:	eb 11                	jmp    c00152f7 <Krnl::handlePowerButton()+0x2e>
c00152e6:	48                   	dec    eax
c00152e7:	75 11                	jne    c00152fa <Krnl::handlePowerButton()+0x31>
c00152e9:	83 ec 0c             	sub    esp,0xc
c00152ec:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c00152f2:	e8 0b 40 ff ff       	call   c0009302 <Computer::sleep()>
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	83 c4 0c             	add    esp,0xc
c00152fd:	c3                   	ret    

c00152fe <Krnl::handleSleepButton()>:
c00152fe:	83 ec 0c             	sub    esp,0xc
c0015301:	a1 a4 93 02 c0       	mov    eax,ds:0xc00293a4
c0015306:	83 f8 02             	cmp    eax,0x2
c0015309:	75 10                	jne    c001531b <Krnl::handleSleepButton()+0x1d>
c001530b:	83 ec 0c             	sub    esp,0xc
c001530e:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c0015314:	e8 b9 3f ff ff       	call   c00092d2 <Computer::shutdown()>
c0015319:	eb 11                	jmp    c001532c <Krnl::handleSleepButton()+0x2e>
c001531b:	48                   	dec    eax
c001531c:	75 11                	jne    c001532f <Krnl::handleSleepButton()+0x31>
c001531e:	83 ec 0c             	sub    esp,0xc
c0015321:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c0015327:	e8 d6 3f ff ff       	call   c0009302 <Computer::sleep()>
c001532c:	83 c4 10             	add    esp,0x10
c001532f:	83 c4 0c             	add    esp,0xc
c0015332:	c3                   	ret    

c0015333 <Krnl::setupPowerManager()>:
c0015333:	83 ec 0c             	sub    esp,0xc
c0015336:	c7 05 c4 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00293c4,0x0
c0015340:	68 f0 00 00 00       	push   0xf0
c0015345:	c6 05 80 93 02 c0 00 	mov    BYTE PTR ds:0xc0029380,0x0
c001534c:	6a 00                	push   0x0
c001534e:	68 28 52 01 c0       	push   0xc0015228
c0015353:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c0015359:	e8 76 36 00 00       	call   c00189d4 <Process::createThread(void (*)(void*), void*, int)>
c001535e:	c7 05 a0 93 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00293a0,0x2
c0015368:	c7 05 a4 93 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00293a4,0x1
c0015372:	c7 05 a8 93 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00293a8,0x3
c001537c:	c7 05 ac 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00293ac,0x0
c0015386:	c7 05 b8 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00293b8,0x0
c0015390:	c7 05 b0 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00293b0,0x0
c001539a:	c7 05 bc 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00293bc,0x0
c00153a4:	c7 05 b4 93 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00293b4,0x3c
c00153ae:	c7 05 c0 93 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00293c0,0x3c
c00153b8:	83 c4 1c             	add    esp,0x1c
c00153bb:	c3                   	ret    

c00153bc <Net::switchEndian16(unsigned short)>:
c00153bc:	83 ec 04             	sub    esp,0x4
c00153bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153c3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00153c7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00153cb:	c1 f8 08             	sar    eax,0x8
c00153ce:	89 c2                	mov    edx,eax
c00153d0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00153d4:	c1 e0 08             	shl    eax,0x8
c00153d7:	09 d0                	or     eax,edx
c00153d9:	83 c4 04             	add    esp,0x4
c00153dc:	c3                   	ret    
c00153dd:	8d 76 00             	lea    esi,[esi+0x0]

c00153e0 <Net::switchEndian32(unsigned int)>:
c00153e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153e4:	c1 e8 18             	shr    eax,0x18
c00153e7:	89 c2                	mov    edx,eax
c00153e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153ed:	c1 e0 08             	shl    eax,0x8
c00153f0:	25 00 00 ff 00       	and    eax,0xff0000
c00153f5:	09 c2                	or     edx,eax
c00153f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153fb:	c1 e8 08             	shr    eax,0x8
c00153fe:	25 00 ff 00 00       	and    eax,0xff00
c0015403:	09 c2                	or     edx,eax
c0015405:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015409:	c1 e0 18             	shl    eax,0x18
c001540c:	09 d0                	or     eax,edx
c001540e:	c3                   	ret    
c001540f:	90                   	nop

c0015410 <Net::crc32Calc(unsigned char*, int)>:
c0015410:	83 ec 10             	sub    esp,0x10
c0015413:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0015418:	75 0a                	jne    c0015424 <Net::crc32Calc(unsigned char*, int)+0x14>
c001541a:	b8 00 00 00 00       	mov    eax,0x0
c001541f:	e9 8c 00 00 00       	jmp    c00154b0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015424:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015429:	7f 09                	jg     c0015434 <Net::crc32Calc(unsigned char*, int)+0x24>
c001542b:	b8 00 00 00 00       	mov    eax,0x0
c0015430:	eb 7e                	jmp    c00154b0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015432:	66 90                	xchg   ax,ax
c0015434:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001543c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015448:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001544c:	7d 5a                	jge    c00154a8 <Net::crc32Calc(unsigned char*, int)+0x98>
c001544e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015456:	01 d0                	add    eax,edx
c0015458:	8a 00                	mov    al,BYTE PTR [eax]
c001545a:	0f b6 c0             	movzx  eax,al
c001545d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0015461:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015469:	8d 76 00             	lea    esi,[esi+0x0]
c001546c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0015471:	7f 2d                	jg     c00154a0 <Net::crc32Calc(unsigned char*, int)+0x90>
c0015473:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015477:	83 e0 01             	and    eax,0x1
c001547a:	74 10                	je     c001548c <Net::crc32Calc(unsigned char*, int)+0x7c>
c001547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015480:	d1 e8                	shr    eax,1
c0015482:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0015487:	eb 0b                	jmp    c0015494 <Net::crc32Calc(unsigned char*, int)+0x84>
c0015489:	8d 76 00             	lea    esi,[esi+0x0]
c001548c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015490:	d1 e8                	shr    eax,1
c0015492:	66 90                	xchg   ax,ax
c0015494:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015498:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001549c:	eb ce                	jmp    c001546c <Net::crc32Calc(unsigned char*, int)+0x5c>
c001549e:	66 90                	xchg   ax,ax
c00154a0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00154a4:	eb 9e                	jmp    c0015444 <Net::crc32Calc(unsigned char*, int)+0x34>
c00154a6:	66 90                	xchg   ax,ax
c00154a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154ac:	f7 d0                	not    eax
c00154ae:	66 90                	xchg   ax,ax
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	c3                   	ret    

c00154b4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00154b4:	57                   	push   edi
c00154b5:	56                   	push   esi
c00154b6:	53                   	push   ebx
c00154b7:	83 ec 60             	sub    esp,0x60
c00154ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00154c1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00154c5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00154cd:	8d 76 00             	lea    esi,[esi+0x0]
c00154d0:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00154d5:	7f 1d                	jg     c00154f4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00154d7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00154de:	8d 50 01             	lea    edx,[eax+0x1]
c00154e1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00154e8:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00154eb:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00154ef:	eb df                	jmp    c00154d0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c00154f1:	8d 76 00             	lea    esi,[esi+0x0]
c00154f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00154fb:	8d 50 01             	lea    edx,[eax+0x1]
c00154fe:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015505:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0015508:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001550f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015513:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0015517:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001551b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0015523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015527:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001552b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001552f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015533:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015537:	89 c6                	mov    esi,eax
c0015539:	89 d7                	mov    edi,edx
c001553b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001553d:	89 c8                	mov    eax,ecx
c001553f:	89 fa                	mov    edx,edi
c0015541:	89 f3                	mov    ebx,esi
c0015543:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001554b:	89 04 24             	mov    DWORD PTR [esp],eax
c001554e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015556:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001555d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015561:	8d 44 24 78          	lea    eax,[esp+0x78]
c0015565:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015569:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015571:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015575:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001557d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015581:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015585:	89 c6                	mov    esi,eax
c0015587:	89 d7                	mov    edi,edx
c0015589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001558b:	89 c8                	mov    eax,ecx
c001558d:	89 fa                	mov    edx,edi
c001558f:	89 f3                	mov    ebx,esi
c0015591:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015595:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015599:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001559d:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00155a5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00155ac:	0f b7 c0             	movzx  eax,ax
c00155af:	c1 f8 08             	sar    eax,0x8
c00155b2:	89 c1                	mov    ecx,eax
c00155b4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00155bb:	8d 50 01             	lea    edx,[eax+0x1]
c00155be:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00155c5:	88 ca                	mov    dl,cl
c00155c7:	88 10                	mov    BYTE PTR [eax],dl
c00155c9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00155d0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00155d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00155da:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00155e1:	88 10                	mov    BYTE PTR [eax],dl
c00155e3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00155e7:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00155eb:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00155f2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c00155f6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00155fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00155fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015602:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015606:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001560a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001560e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015612:	89 c6                	mov    esi,eax
c0015614:	89 d7                	mov    edi,edx
c0015616:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015618:	89 c8                	mov    eax,ecx
c001561a:	89 fa                	mov    edx,edi
c001561c:	89 f3                	mov    ebx,esi
c001561e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015622:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015626:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001562a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001562e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015635:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001563c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0015640:	50                   	push   eax
c0015641:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015645:	e8 c6 fd ff ff       	call   c0015410 <Net::crc32Calc(unsigned char*, int)>
c001564a:	83 c4 08             	add    esp,0x8
c001564d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015651:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015655:	c1 e8 18             	shr    eax,0x18
c0015658:	89 c1                	mov    ecx,eax
c001565a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015661:	8d 50 01             	lea    edx,[eax+0x1]
c0015664:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001566b:	88 ca                	mov    dl,cl
c001566d:	88 10                	mov    BYTE PTR [eax],dl
c001566f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015673:	c1 e8 10             	shr    eax,0x10
c0015676:	89 c1                	mov    ecx,eax
c0015678:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001567f:	8d 50 01             	lea    edx,[eax+0x1]
c0015682:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015689:	88 ca                	mov    dl,cl
c001568b:	88 10                	mov    BYTE PTR [eax],dl
c001568d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015691:	c1 e8 08             	shr    eax,0x8
c0015694:	89 c1                	mov    ecx,eax
c0015696:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001569d:	8d 50 01             	lea    edx,[eax+0x1]
c00156a0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00156a7:	88 ca                	mov    dl,cl
c00156a9:	88 10                	mov    BYTE PTR [eax],dl
c00156ab:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00156b2:	8d 50 01             	lea    edx,[eax+0x1]
c00156b5:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00156bc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00156c0:	88 10                	mov    BYTE PTR [eax],dl
c00156c2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00156c6:	83 c4 60             	add    esp,0x60
c00156c9:	5b                   	pop    ebx
c00156ca:	5e                   	pop    esi
c00156cb:	5f                   	pop    edi
c00156cc:	c3                   	ret    
c00156cd:	8d 76 00             	lea    esi,[esi+0x0]

c00156d0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00156d0:	57                   	push   edi
c00156d1:	56                   	push   esi
c00156d2:	53                   	push   ebx
c00156d3:	83 ec 70             	sub    esp,0x70
c00156d6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00156dd:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00156e1:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00156e9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00156f0:	83 c0 0e             	add    eax,0xe
c00156f3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00156f7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00156fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015702:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001570a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001570e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015712:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015716:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001571a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001571e:	89 c6                	mov    esi,eax
c0015720:	89 d7                	mov    edi,edx
c0015722:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015724:	89 c8                	mov    eax,ecx
c0015726:	89 fa                	mov    edx,edi
c0015728:	89 f3                	mov    ebx,esi
c001572a:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001572e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015732:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015736:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001573e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015745:	83 c0 08             	add    eax,0x8
c0015748:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001574c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015753:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015757:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001575f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015763:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015767:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001576b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001576f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015773:	89 c6                	mov    esi,eax
c0015775:	89 d7                	mov    edi,edx
c0015777:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015779:	89 c8                	mov    eax,ecx
c001577b:	89 fa                	mov    edx,edi
c001577d:	89 f3                	mov    ebx,esi
c001577f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015783:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015787:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001578b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015793:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001579a:	8d 50 01             	lea    edx,[eax+0x1]
c001579d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00157a4:	8a 00                	mov    al,BYTE PTR [eax]
c00157a6:	0f b6 c0             	movzx  eax,al
c00157a9:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c00157ae:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00157b5:	8d 50 01             	lea    edx,[eax+0x1]
c00157b8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00157bf:	8a 00                	mov    al,BYTE PTR [eax]
c00157c1:	0f b6 c0             	movzx  eax,al
c00157c4:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c00157c9:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c00157ce:	c1 e0 08             	shl    eax,0x8
c00157d1:	89 c2                	mov    edx,eax
c00157d3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00157d7:	09 d0                	or     eax,edx
c00157d9:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00157e0:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00157e4:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c00157ec:	75 46                	jne    c0015834 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c00157ee:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00157f5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00157f8:	66 3d dc 05          	cmp    ax,0x5dc
c00157fc:	77 16                	ja     c0015814 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c00157fe:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015805:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015808:	0f b7 c0             	movzx  eax,ax
c001580b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015812:	eb 20                	jmp    c0015834 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015814:	83 ec 0c             	sub    esp,0xc
c0015817:	68 b8 65 02 c0       	push   0xc00265b8
c001581c:	e8 26 78 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0015821:	83 c4 10             	add    esp,0x10
c0015824:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001582b:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001582f:	e9 18 01 00 00       	jmp    c001594c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015834:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001583b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015842:	8b 12                	mov    edx,DWORD PTR [edx]
c0015844:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015848:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001584f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015853:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001585b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001585f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015863:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015867:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001586b:	89 c6                	mov    esi,eax
c001586d:	89 d7                	mov    edi,edx
c001586f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015871:	89 c8                	mov    eax,ecx
c0015873:	89 fa                	mov    edx,edi
c0015875:	89 f3                	mov    ebx,esi
c0015877:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001587b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001587f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015882:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015889:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015890:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015897:	8d 50 01             	lea    edx,[eax+0x1]
c001589a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158a1:	8a 00                	mov    al,BYTE PTR [eax]
c00158a3:	0f b6 c0             	movzx  eax,al
c00158a6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00158aa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158b1:	8d 50 01             	lea    edx,[eax+0x1]
c00158b4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158bb:	8a 00                	mov    al,BYTE PTR [eax]
c00158bd:	0f b6 c0             	movzx  eax,al
c00158c0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00158c4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158cb:	8d 50 01             	lea    edx,[eax+0x1]
c00158ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158d5:	8a 00                	mov    al,BYTE PTR [eax]
c00158d7:	0f b6 c0             	movzx  eax,al
c00158da:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00158de:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158e5:	8d 50 01             	lea    edx,[eax+0x1]
c00158e8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158ef:	8a 00                	mov    al,BYTE PTR [eax]
c00158f1:	0f b6 c0             	movzx  eax,al
c00158f4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00158f8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00158fc:	c1 e0 18             	shl    eax,0x18
c00158ff:	89 c2                	mov    edx,eax
c0015901:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015905:	c1 e0 10             	shl    eax,0x10
c0015908:	09 c2                	or     edx,eax
c001590a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001590e:	c1 e0 08             	shl    eax,0x8
c0015911:	09 d0                	or     eax,edx
c0015913:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015917:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001591b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015922:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015926:	83 e8 04             	sub    eax,0x4
c0015929:	83 ec 08             	sub    esp,0x8
c001592c:	50                   	push   eax
c001592d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015931:	e8 da fa ff ff       	call   c0015410 <Net::crc32Calc(unsigned char*, int)>
c0015936:	83 c4 10             	add    esp,0x10
c0015939:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001593d:	0f 94 c2             	sete   dl
c0015940:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015947:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001594a:	90                   	nop
c001594b:	90                   	nop
c001594c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015953:	83 c4 70             	add    esp,0x70
c0015956:	5b                   	pop    ebx
c0015957:	5e                   	pop    esi
c0015958:	5f                   	pop    edi
c0015959:	c2 04 00             	ret    0x4

c001595c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001595c:	55                   	push   ebp
c001595d:	57                   	push   edi
c001595e:	56                   	push   esi
c001595f:	53                   	push   ebx
c0015960:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015966:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001596d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001596f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015972:	80 fb 40             	cmp    bl,0x40
c0015975:	75 1b                	jne    c0015992 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015977:	8a 16                	mov    dl,BYTE PTR [esi]
c0015979:	84 d2                	test   dl,dl
c001597b:	0f 84 f1 00 00 00    	je     c0015a72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015981:	8d 46 01             	lea    eax,[esi+0x1]
c0015984:	80 fa 3a             	cmp    dl,0x3a
c0015987:	74 04                	je     c001598d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015989:	89 c6                	mov    esi,eax
c001598b:	eb ea                	jmp    c0015977 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001598d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015990:	89 c6                	mov    esi,eax
c0015992:	50                   	push   eax
c0015993:	6a 40                	push   0x40
c0015995:	6a 00                	push   0x0
c0015997:	8d 44 24 24          	lea    eax,[esp+0x24]
c001599b:	50                   	push   eax
c001599c:	e8 e3 ac fe ff       	call   c0000684 <memset>
c00159a1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00159a8:	31 c0                	xor    eax,eax
c00159aa:	83 c4 10             	add    esp,0x10
c00159ad:	8a 0f                	mov    cl,BYTE PTR [edi]
c00159af:	84 c9                	test   cl,cl
c00159b1:	0f 84 bb 00 00 00    	je     c0015a72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00159b7:	3d c7 00 00 00       	cmp    eax,0xc7
c00159bc:	0f 8f b0 00 00 00    	jg     c0015a72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00159c2:	80 f9 0a             	cmp    cl,0xa
c00159c5:	0f 85 98 00 00 00    	jne    c0015a63 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00159cb:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00159d0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00159d4:	a8 df                	test   al,0xdf
c00159d6:	0f 94 c1             	sete   cl
c00159d9:	3c 23                	cmp    al,0x23
c00159db:	0f 94 c2             	sete   dl
c00159de:	08 d1                	or     cl,dl
c00159e0:	75 4a                	jne    c0015a2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00159e2:	8d 50 f7             	lea    edx,[eax-0x9]
c00159e5:	80 fa 01             	cmp    dl,0x1
c00159e8:	76 42                	jbe    c0015a2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00159ea:	3c 5b                	cmp    al,0x5b
c00159ec:	75 42                	jne    c0015a30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00159ee:	80 fb 40             	cmp    bl,0x40
c00159f1:	75 39                	jne    c0015a2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00159f3:	83 ec 0c             	sub    esp,0xc
c00159f6:	8d 54 24 65          	lea    edx,[esp+0x65]
c00159fa:	52                   	push   edx
c00159fb:	e8 a0 ac fe ff       	call   c00006a0 <strlen>
c0015a00:	83 c4 10             	add    esp,0x10
c0015a03:	83 f8 3f             	cmp    eax,0x3f
c0015a06:	77 6a                	ja     c0015a72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015a08:	50                   	push   eax
c0015a09:	50                   	push   eax
c0015a0a:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015a0e:	52                   	push   edx
c0015a0f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015a13:	52                   	push   edx
c0015a14:	e8 27 ad fe ff       	call   c0000740 <strcpy>
c0015a19:	58                   	pop    eax
c0015a1a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015a1e:	52                   	push   edx
c0015a1f:	e8 7c ac fe ff       	call   c00006a0 <strlen>
c0015a24:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015a29:	83 c4 10             	add    esp,0x10
c0015a2c:	31 d2                	xor    edx,edx
c0015a2e:	eb 3a                	jmp    c0015a6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015a30:	80 fb 40             	cmp    bl,0x40
c0015a33:	74 06                	je     c0015a3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015a35:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015a39:	eb 20                	jmp    c0015a5b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015a3b:	50                   	push   eax
c0015a3c:	50                   	push   eax
c0015a3d:	55                   	push   ebp
c0015a3e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015a42:	50                   	push   eax
c0015a43:	e8 84 ad fe ff       	call   c00007cc <strcmp>
c0015a48:	83 c4 10             	add    esp,0x10
c0015a4b:	85 c0                	test   eax,eax
c0015a4d:	75 dd                	jne    c0015a2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015a4f:	eb e4                	jmp    c0015a35 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015a51:	8d 50 01             	lea    edx,[eax+0x1]
c0015a54:	80 f9 3d             	cmp    cl,0x3d
c0015a57:	74 1d                	je     c0015a76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015a59:	89 d0                	mov    eax,edx
c0015a5b:	8a 08                	mov    cl,BYTE PTR [eax]
c0015a5d:	84 c9                	test   cl,cl
c0015a5f:	75 f0                	jne    c0015a51 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015a61:	eb 0f                	jmp    c0015a72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015a63:	8d 50 01             	lea    edx,[eax+0x1]
c0015a66:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015a6a:	47                   	inc    edi
c0015a6b:	89 d0                	mov    eax,edx
c0015a6d:	e9 3b ff ff ff       	jmp    c00159ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015a72:	31 c0                	xor    eax,eax
c0015a74:	eb 33                	jmp    c0015aa9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015a76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015a7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015a7d:	50                   	push   eax
c0015a7e:	50                   	push   eax
c0015a7f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015a83:	50                   	push   eax
c0015a84:	56                   	push   esi
c0015a85:	e8 42 ad fe ff       	call   c00007cc <strcmp>
c0015a8a:	83 c4 10             	add    esp,0x10
c0015a8d:	85 c0                	test   eax,eax
c0015a8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015a93:	75 97                	jne    c0015a2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015a95:	51                   	push   ecx
c0015a96:	51                   	push   ecx
c0015a97:	52                   	push   edx
c0015a98:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015a9f:	e8 9c ac fe ff       	call   c0000740 <strcpy>
c0015aa4:	83 c4 10             	add    esp,0x10
c0015aa7:	b0 01                	mov    al,0x1
c0015aa9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015aaf:	5b                   	pop    ebx
c0015ab0:	5e                   	pop    esi
c0015ab1:	5f                   	pop    edi
c0015ab2:	5d                   	pop    ebp
c0015ab3:	c3                   	ret    

c0015ab4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015ab4:	57                   	push   edi
c0015ab5:	56                   	push   esi
c0015ab6:	53                   	push   ebx
c0015ab7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015abd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015ac4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015acb:	53                   	push   ebx
c0015acc:	e8 cf ab fe ff       	call   c00006a0 <strlen>
c0015ad1:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ad4:	89 c7                	mov    edi,eax
c0015ad6:	e8 c5 ab fe ff       	call   c00006a0 <strlen>
c0015adb:	83 c4 10             	add    esp,0x10
c0015ade:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015ae2:	3d ff 00 00 00       	cmp    eax,0xff
c0015ae7:	0f 87 d3 00 00 00    	ja     c0015bc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015aed:	57                   	push   edi
c0015aee:	57                   	push   edi
c0015aef:	56                   	push   esi
c0015af0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015af4:	56                   	push   esi
c0015af5:	e8 46 ac fe ff       	call   c0000740 <strcpy>
c0015afa:	58                   	pop    eax
c0015afb:	5a                   	pop    edx
c0015afc:	68 5a 69 02 c0       	push   0xc002695a
c0015b01:	56                   	push   esi
c0015b02:	e8 79 ad fe ff       	call   c0000880 <strcat>
c0015b07:	59                   	pop    ecx
c0015b08:	5f                   	pop    edi
c0015b09:	53                   	push   ebx
c0015b0a:	56                   	push   esi
c0015b0b:	e8 70 ad fe ff       	call   c0000880 <strcat>
c0015b10:	58                   	pop    eax
c0015b11:	5a                   	pop    edx
c0015b12:	68 04 66 02 c0       	push   0xc0026604
c0015b17:	56                   	push   esi
c0015b18:	e8 63 ad fe ff       	call   c0000880 <strcat>
c0015b1d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015b24:	e8 32 42 ff ff       	call   c0009d5b <malloc>
c0015b29:	83 c4 0c             	add    esp,0xc
c0015b2c:	89 c3                	mov    ebx,eax
c0015b2e:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c0015b34:	56                   	push   esi
c0015b35:	50                   	push   eax
c0015b36:	e8 77 7a ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	85 db                	test   ebx,ebx
c0015b40:	74 7e                	je     c0015bc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015b42:	51                   	push   ecx
c0015b43:	51                   	push   ecx
c0015b44:	6a 01                	push   0x1
c0015b46:	53                   	push   ebx
c0015b47:	e8 40 7b ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0015b4c:	83 c4 10             	add    esp,0x10
c0015b4f:	85 c0                	test   eax,eax
c0015b51:	74 08                	je     c0015b5b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015b53:	83 ec 0c             	sub    esp,0xc
c0015b56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b58:	53                   	push   ebx
c0015b59:	eb 5f                	jmp    c0015bba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015b5b:	52                   	push   edx
c0015b5c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015b60:	50                   	push   eax
c0015b61:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015b65:	50                   	push   eax
c0015b66:	53                   	push   ebx
c0015b67:	e8 cc 7d ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c0015b6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015b70:	83 c4 10             	add    esp,0x10
c0015b73:	89 c1                	mov    ecx,eax
c0015b75:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015b79:	74 31                	je     c0015bac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015b7b:	83 ec 0c             	sub    esp,0xc
c0015b7e:	50                   	push   eax
c0015b7f:	e8 d7 41 ff ff       	call   c0009d5b <malloc>
c0015b84:	89 c6                	mov    esi,eax
c0015b86:	58                   	pop    eax
c0015b87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b89:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015b8d:	52                   	push   edx
c0015b8e:	56                   	push   esi
c0015b8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015b93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015b97:	53                   	push   ebx
c0015b98:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b9b:	83 c4 20             	add    esp,0x20
c0015b9e:	85 c0                	test   eax,eax
c0015ba0:	75 0a                	jne    c0015bac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015ba2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ba6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015baa:	74 18                	je     c0015bc4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015bac:	83 ec 0c             	sub    esp,0xc
c0015baf:	53                   	push   ebx
c0015bb0:	e8 35 7b ff ff       	call   c000d6ea <File::close()>
c0015bb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	31 c0                	xor    eax,eax
c0015bc2:	eb 3b                	jmp    c0015bff <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015bc4:	83 ec 0c             	sub    esp,0xc
c0015bc7:	53                   	push   ebx
c0015bc8:	e8 1d 7b ff ff       	call   c000d6ea <File::close()>
c0015bcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bd2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bd5:	83 c4 0c             	add    esp,0xc
c0015bd8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015bdf:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015be6:	56                   	push   esi
c0015be7:	e8 70 fd ff ff       	call   c001595c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015bec:	89 34 24             	mov    DWORD PTR [esp],esi
c0015bef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015bf3:	e8 73 41 ff ff       	call   c0009d6b <free>
c0015bf8:	83 c4 10             	add    esp,0x10
c0015bfb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015bff:	81 c4 20 01 00 00    	add    esp,0x120
c0015c05:	5b                   	pop    ebx
c0015c06:	5e                   	pop    esi
c0015c07:	5f                   	pop    edi
c0015c08:	c3                   	ret    

c0015c09 <Reg::getLine(char*, char*, char*)>:
c0015c09:	57                   	push   edi
c0015c0a:	56                   	push   esi
c0015c0b:	53                   	push   ebx
c0015c0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c10:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015c14:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015c18:	57                   	push   edi
c0015c19:	56                   	push   esi
c0015c1a:	53                   	push   ebx
c0015c1b:	68 09 66 02 c0       	push   0xc0026609
c0015c20:	e8 8f fe ff ff       	call   c0015ab4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015c25:	83 c4 10             	add    esp,0x10
c0015c28:	84 c0                	test   al,al
c0015c2a:	75 10                	jne    c0015c3c <Reg::getLine(char*, char*, char*)+0x33>
c0015c2c:	57                   	push   edi
c0015c2d:	56                   	push   esi
c0015c2e:	53                   	push   ebx
c0015c2f:	68 2e 66 02 c0       	push   0xc002662e
c0015c34:	e8 7b fe ff ff       	call   c0015ab4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015c39:	83 c4 10             	add    esp,0x10
c0015c3c:	5b                   	pop    ebx
c0015c3d:	5e                   	pop    esi
c0015c3e:	5f                   	pop    edi
c0015c3f:	c3                   	ret    

c0015c40 <Reg::readInt(char*, char*, int*)>:
c0015c40:	55                   	push   ebp
c0015c41:	57                   	push   edi
c0015c42:	56                   	push   esi
c0015c43:	53                   	push   ebx
c0015c44:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015c4a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015c4e:	57                   	push   edi
c0015c4f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015c56:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015c5d:	e8 a7 ff ff ff       	call   c0015c09 <Reg::getLine(char*, char*, char*)>
c0015c62:	83 c4 10             	add    esp,0x10
c0015c65:	84 c0                	test   al,al
c0015c67:	0f 84 b3 00 00 00    	je     c0015d20 <Reg::readInt(char*, char*, int*)+0xe0>
c0015c6d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015c71:	80 fa 2b             	cmp    dl,0x2b
c0015c74:	74 0c                	je     c0015c82 <Reg::readInt(char*, char*, int*)+0x42>
c0015c76:	80 fa 2d             	cmp    dl,0x2d
c0015c79:	75 0e                	jne    c0015c89 <Reg::readInt(char*, char*, int*)+0x49>
c0015c7b:	ba 01 00 00 00       	mov    edx,0x1
c0015c80:	eb 0b                	jmp    c0015c8d <Reg::readInt(char*, char*, int*)+0x4d>
c0015c82:	ba 01 00 00 00       	mov    edx,0x1
c0015c87:	eb 02                	jmp    c0015c8b <Reg::readInt(char*, char*, int*)+0x4b>
c0015c89:	31 d2                	xor    edx,edx
c0015c8b:	31 c0                	xor    eax,eax
c0015c8d:	be 0a 00 00 00       	mov    esi,0xa
c0015c92:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015c97:	75 20                	jne    c0015cb9 <Reg::readInt(char*, char*, int*)+0x79>
c0015c99:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015c9d:	80 f9 78             	cmp    cl,0x78
c0015ca0:	75 0a                	jne    c0015cac <Reg::readInt(char*, char*, int*)+0x6c>
c0015ca2:	83 c2 02             	add    edx,0x2
c0015ca5:	be 10 00 00 00       	mov    esi,0x10
c0015caa:	eb 0d                	jmp    c0015cb9 <Reg::readInt(char*, char*, int*)+0x79>
c0015cac:	80 f9 62             	cmp    cl,0x62
c0015caf:	75 08                	jne    c0015cb9 <Reg::readInt(char*, char*, int*)+0x79>
c0015cb1:	83 c2 02             	add    edx,0x2
c0015cb4:	be 02 00 00 00       	mov    esi,0x2
c0015cb9:	01 d7                	add    edi,edx
c0015cbb:	31 d2                	xor    edx,edx
c0015cbd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015cbf:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015cc3:	80 fb 0d             	cmp    bl,0xd
c0015cc6:	0f 94 c3             	sete   bl
c0015cc9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015cce:	0f 94 c1             	sete   cl
c0015cd1:	08 cb                	or     bl,cl
c0015cd3:	75 3a                	jne    c0015d0f <Reg::readInt(char*, char*, int*)+0xcf>
c0015cd5:	0f af d6             	imul   edx,esi
c0015cd8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015cdd:	83 fe 10             	cmp    esi,0x10
c0015ce0:	75 26                	jne    c0015d08 <Reg::readInt(char*, char*, int*)+0xc8>
c0015ce2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015ce6:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015ce9:	89 e9                	mov    ecx,ebp
c0015ceb:	80 f9 05             	cmp    cl,0x5
c0015cee:	77 06                	ja     c0015cf6 <Reg::readInt(char*, char*, int*)+0xb6>
c0015cf0:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015cf4:	eb 16                	jmp    c0015d0c <Reg::readInt(char*, char*, int*)+0xcc>
c0015cf6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015cfa:	83 e9 61             	sub    ecx,0x61
c0015cfd:	80 f9 05             	cmp    cl,0x5
c0015d00:	77 06                	ja     c0015d08 <Reg::readInt(char*, char*, int*)+0xc8>
c0015d02:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015d06:	eb 04                	jmp    c0015d0c <Reg::readInt(char*, char*, int*)+0xcc>
c0015d08:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015d0c:	47                   	inc    edi
c0015d0d:	eb ae                	jmp    c0015cbd <Reg::readInt(char*, char*, int*)+0x7d>
c0015d0f:	84 c0                	test   al,al
c0015d11:	74 02                	je     c0015d15 <Reg::readInt(char*, char*, int*)+0xd5>
c0015d13:	f7 da                	neg    edx
c0015d15:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015d1c:	89 10                	mov    DWORD PTR [eax],edx
c0015d1e:	88 d8                	mov    al,bl
c0015d20:	81 c4 ec 00 00 00    	add    esp,0xec
c0015d26:	5b                   	pop    ebx
c0015d27:	5e                   	pop    esi
c0015d28:	5f                   	pop    edi
c0015d29:	5d                   	pop    ebp
c0015d2a:	c3                   	ret    

c0015d2b <Reg::readString(char*, char*, char*, int)>:
c0015d2b:	57                   	push   edi
c0015d2c:	56                   	push   esi
c0015d2d:	53                   	push   ebx
c0015d2e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015d34:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015d3b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015d3f:	57                   	push   edi
c0015d40:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015d47:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015d4e:	e8 b6 fe ff ff       	call   c0015c09 <Reg::getLine(char*, char*, char*)>
c0015d53:	83 c4 10             	add    esp,0x10
c0015d56:	89 c6                	mov    esi,eax
c0015d58:	84 c0                	test   al,al
c0015d5a:	74 44                	je     c0015da0 <Reg::readString(char*, char*, char*, int)+0x75>
c0015d5c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015d63:	31 c0                	xor    eax,eax
c0015d65:	4a                   	dec    edx
c0015d66:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015d69:	84 c9                	test   cl,cl
c0015d6b:	74 0f                	je     c0015d7c <Reg::readString(char*, char*, char*, int)+0x51>
c0015d6d:	39 c2                	cmp    edx,eax
c0015d6f:	7e 0b                	jle    c0015d7c <Reg::readString(char*, char*, char*, int)+0x51>
c0015d71:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015d74:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015d79:	40                   	inc    eax
c0015d7a:	eb ea                	jmp    c0015d66 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015d7c:	83 ec 0c             	sub    esp,0xc
c0015d7f:	53                   	push   ebx
c0015d80:	e8 1b a9 fe ff       	call   c00006a0 <strlen>
c0015d85:	83 c4 10             	add    esp,0x10
c0015d88:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015d8d:	75 11                	jne    c0015da0 <Reg::readString(char*, char*, char*, int)+0x75>
c0015d8f:	83 ec 0c             	sub    esp,0xc
c0015d92:	53                   	push   ebx
c0015d93:	e8 08 a9 fe ff       	call   c00006a0 <strlen>
c0015d98:	83 c4 10             	add    esp,0x10
c0015d9b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015da0:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015da6:	89 f0                	mov    eax,esi
c0015da8:	5b                   	pop    ebx
c0015da9:	5e                   	pop    esi
c0015daa:	5f                   	pop    edi
c0015dab:	c3                   	ret    

c0015dac <Reg::readBool(char*, char*, bool*)>:
c0015dac:	83 ec 20             	sub    esp,0x20
c0015daf:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015db3:	50                   	push   eax
c0015db4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015db8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dbc:	e8 7f fe ff ff       	call   c0015c40 <Reg::readInt(char*, char*, int*)>
c0015dc1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015dc6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015dca:	0f 95 02             	setne  BYTE PTR [edx]
c0015dcd:	83 c4 2c             	add    esp,0x2c
c0015dd0:	c3                   	ret    

c0015dd1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015dd1:	53                   	push   ebx
c0015dd2:	83 ec 1c             	sub    esp,0x1c
c0015dd5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015dd9:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015ddd:	50                   	push   eax
c0015dde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015de2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015de6:	e8 c1 ff ff ff       	call   c0015dac <Reg::readBool(char*, char*, bool*)>
c0015deb:	83 c4 10             	add    esp,0x10
c0015dee:	84 c0                	test   al,al
c0015df0:	74 04                	je     c0015df6 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015df2:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015df6:	88 d8                	mov    al,bl
c0015df8:	83 c4 18             	add    esp,0x18
c0015dfb:	5b                   	pop    ebx
c0015dfc:	c3                   	ret    

c0015dfd <Reg::readIntWithDefault(char*, char*, int)>:
c0015dfd:	53                   	push   ebx
c0015dfe:	83 ec 1c             	sub    esp,0x1c
c0015e01:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e05:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015e09:	50                   	push   eax
c0015e0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e12:	e8 29 fe ff ff       	call   c0015c40 <Reg::readInt(char*, char*, int*)>
c0015e17:	83 c4 10             	add    esp,0x10
c0015e1a:	84 c0                	test   al,al
c0015e1c:	74 04                	je     c0015e22 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015e1e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015e22:	89 d8                	mov    eax,ebx
c0015e24:	83 c4 18             	add    esp,0x18
c0015e27:	5b                   	pop    ebx
c0015e28:	c3                   	ret    

c0015e29 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015e29:	57                   	push   edi
c0015e2a:	56                   	push   esi
c0015e2b:	56                   	push   esi
c0015e2c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015e30:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015e34:	56                   	push   esi
c0015e35:	57                   	push   edi
c0015e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e3e:	e8 e8 fe ff ff       	call   c0015d2b <Reg::readString(char*, char*, char*, int)>
c0015e43:	83 c4 10             	add    esp,0x10
c0015e46:	84 c0                	test   al,al
c0015e48:	75 1a                	jne    c0015e64 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015e4a:	51                   	push   ecx
c0015e4b:	56                   	push   esi
c0015e4c:	6a 00                	push   0x0
c0015e4e:	57                   	push   edi
c0015e4f:	e8 30 a8 fe ff       	call   c0000684 <memset>
c0015e54:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015e57:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015e5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e5d:	83 c4 10             	add    esp,0x10
c0015e60:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015e64:	89 f8                	mov    eax,edi
c0015e66:	5a                   	pop    edx
c0015e67:	5e                   	pop    esi
c0015e68:	5f                   	pop    edi
c0015e69:	c3                   	ret    

c0015e6a <Sys::eject(regs*)>:
c0015e6a:	83 ec 0c             	sub    esp,0xc
c0015e6d:	83 ca ff             	or     edx,0xffffffff
c0015e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e74:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015e77:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015e7c:	83 e9 41             	sub    ecx,0x41
c0015e7f:	83 f9 19             	cmp    ecx,0x19
c0015e82:	77 18                	ja     c0015e9c <Sys::eject(regs*)+0x32>
c0015e84:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c0015e8b:	85 c9                	test   ecx,ecx
c0015e8d:	74 0d                	je     c0015e9c <Sys::eject(regs*)+0x32>
c0015e8f:	83 ec 0c             	sub    esp,0xc
c0015e92:	51                   	push   ecx
c0015e93:	e8 86 a9 ff ff       	call   c001081e <LogicalDisk::eject()>
c0015e98:	83 c4 10             	add    esp,0x10
c0015e9b:	99                   	cdq    
c0015e9c:	83 c4 0c             	add    esp,0xc
c0015e9f:	c3                   	ret    

c0015ea0 <Sys::exit(regs*)>:
c0015ea0:	83 ec 18             	sub    esp,0x18
c0015ea3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ea7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015eaa:	e8 59 36 00 00       	call   c0019508 <terminateTask(int)>
c0015eaf:	83 c8 ff             	or     eax,0xffffffff
c0015eb2:	83 c4 1c             	add    esp,0x1c
c0015eb5:	89 c2                	mov    edx,eax
c0015eb7:	c3                   	ret    

c0015eb8 <Sys::getCwd(regs*)>:
c0015eb8:	83 ec 10             	sub    esp,0x10
c0015ebb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ebf:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015ec2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015ec5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eca:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ecd:	e8 e2 74 ff ff       	call   c000d3b4 <Fs::getcwd(Process*, char*, int)>
c0015ed2:	83 c4 1c             	add    esp,0x1c
c0015ed5:	99                   	cdq    
c0015ed6:	c3                   	ret    

c0015ed7 <Sys::getPID(regs*)>:
c0015ed7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015edc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015edf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ee1:	99                   	cdq    
c0015ee2:	c3                   	ret    

c0015ee3 <Sys::getRAMData(regs*)>:
c0015ee3:	8b 0d b8 88 02 c0    	mov    ecx,DWORD PTR ds:0xc00288b8
c0015ee9:	69 05 b4 88 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00288b4,0xc8
c0015ef3:	99                   	cdq    
c0015ef4:	f7 f9                	idiv   ecx
c0015ef6:	c1 e0 18             	shl    eax,0x18
c0015ef9:	09 c8                	or     eax,ecx
c0015efb:	99                   	cdq    
c0015efc:	c3                   	ret    

c0015efd <Sys::getVGAPtr(regs*)>:
c0015efd:	55                   	push   ebp
c0015efe:	57                   	push   edi
c0015eff:	56                   	push   esi
c0015f00:	53                   	push   ebx
c0015f01:	83 ec 18             	sub    esp,0x18
c0015f04:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015f08:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015f0b:	e8 fc 30 00 00       	call   c001900c <Thr::processFromPID(int)>
c0015f10:	83 c4 10             	add    esp,0x10
c0015f13:	89 c1                	mov    ecx,eax
c0015f15:	b8 01 00 00 00       	mov    eax,0x1
c0015f1a:	85 c9                	test   ecx,ecx
c0015f1c:	74 59                	je     c0015f77 <Sys::getVGAPtr(regs*)+0x7a>
c0015f1e:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015f24:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015f28:	74 0c                	je     c0015f36 <Sys::getVGAPtr(regs*)+0x39>
c0015f2a:	83 ec 0c             	sub    esp,0xc
c0015f2d:	53                   	push   ebx
c0015f2e:	e8 22 4f ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c0015f33:	83 c4 10             	add    esp,0x10
c0015f36:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015f39:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015f3c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015f41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015f43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015f46:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015f49:	81 c3 82 00 00 00    	add    ebx,0x82
c0015f4f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015f55:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015f58:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015f5b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015f61:	50                   	push   eax
c0015f62:	50                   	push   eax
c0015f63:	53                   	push   ebx
c0015f64:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015f67:	05 a8 0f 00 00       	add    eax,0xfa8
c0015f6c:	50                   	push   eax
c0015f6d:	e8 ce a7 fe ff       	call   c0000740 <strcpy>
c0015f72:	83 c4 10             	add    esp,0x10
c0015f75:	31 c0                	xor    eax,eax
c0015f77:	83 c4 0c             	add    esp,0xc
c0015f7a:	31 d2                	xor    edx,edx
c0015f7c:	5b                   	pop    ebx
c0015f7d:	5e                   	pop    esi
c0015f7e:	5f                   	pop    edi
c0015f7f:	5d                   	pop    ebp
c0015f80:	c3                   	ret    

c0015f81 <Sys::loadDLL(regs*)>:
c0015f81:	56                   	push   esi
c0015f82:	53                   	push   ebx
c0015f83:	31 d2                	xor    edx,edx
c0015f85:	51                   	push   ecx
c0015f86:	b8 01 00 00 00       	mov    eax,0x1
c0015f8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f8f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015f93:	0f 84 8c 00 00 00    	je     c0016025 <Sys::loadDLL(regs*)+0xa4>
c0015f99:	83 ec 0c             	sub    esp,0xc
c0015f9c:	68 14 01 00 00       	push   0x114
c0015fa1:	e8 b5 3d ff ff       	call   c0009d5b <malloc>
c0015fa6:	83 c4 0c             	add    esp,0xc
c0015fa9:	89 c3                	mov    ebx,eax
c0015fab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fb0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015fb3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015fb6:	53                   	push   ebx
c0015fb7:	e8 f6 75 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0015fbc:	83 c4 10             	add    esp,0x10
c0015fbf:	31 d2                	xor    edx,edx
c0015fc1:	b8 02 00 00 00       	mov    eax,0x2
c0015fc6:	85 db                	test   ebx,ebx
c0015fc8:	74 5b                	je     c0016025 <Sys::loadDLL(regs*)+0xa4>
c0015fca:	83 ec 0c             	sub    esp,0xc
c0015fcd:	53                   	push   ebx
c0015fce:	e8 27 79 ff ff       	call   c000d8fa <File::exists()>
c0015fd3:	83 c4 10             	add    esp,0x10
c0015fd6:	84 c0                	test   al,al
c0015fd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fda:	75 11                	jne    c0015fed <Sys::loadDLL(regs*)+0x6c>
c0015fdc:	83 ec 0c             	sub    esp,0xc
c0015fdf:	53                   	push   ebx
c0015fe0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fe3:	83 c4 10             	add    esp,0x10
c0015fe6:	b8 03 00 00 00       	mov    eax,0x3
c0015feb:	eb 36                	jmp    c0016023 <Sys::loadDLL(regs*)+0xa2>
c0015fed:	83 ec 0c             	sub    esp,0xc
c0015ff0:	53                   	push   ebx
c0015ff1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ff4:	58                   	pop    eax
c0015ff5:	5a                   	pop    edx
c0015ff6:	6a 00                	push   0x0
c0015ff8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015ffb:	e8 0a 22 00 00       	call   c001820a <Thr::loadDLL(char const*, bool)>
c0016000:	83 c4 10             	add    esp,0x10
c0016003:	89 c1                	mov    ecx,eax
c0016005:	31 d2                	xor    edx,edx
c0016007:	b8 04 00 00 00       	mov    eax,0x4
c001600c:	85 c9                	test   ecx,ecx
c001600e:	74 15                	je     c0016025 <Sys::loadDLL(regs*)+0xa4>
c0016010:	53                   	push   ebx
c0016011:	53                   	push   ebx
c0016012:	ff 35 88 88 02 c0    	push   DWORD PTR ds:0xc0028888
c0016018:	51                   	push   ecx
c0016019:	e8 1d 24 00 00       	call   c001843b <Thr::executeDLL(unsigned long, void*)>
c001601e:	83 c4 10             	add    esp,0x10
c0016021:	31 c0                	xor    eax,eax
c0016023:	31 d2                	xor    edx,edx
c0016025:	59                   	pop    ecx
c0016026:	5b                   	pop    ebx
c0016027:	5e                   	pop    esi
c0016028:	c3                   	ret    

c0016029 <Sys::read(regs*)>:
c0016029:	57                   	push   edi
c001602a:	56                   	push   esi
c001602b:	53                   	push   ebx
c001602c:	83 ec 10             	sub    esp,0x10
c001602f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016033:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016036:	83 f8 02             	cmp    eax,0x2
c0016039:	77 10                	ja     c001604b <Sys::read(regs*)+0x22>
c001603b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016040:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016043:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016049:	eb 0e                	jmp    c0016059 <Sys::read(regs*)+0x30>
c001604b:	83 ec 0c             	sub    esp,0xc
c001604e:	50                   	push   eax
c001604f:	e8 77 5b ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016054:	83 c4 10             	add    esp,0x10
c0016057:	89 c1                	mov    ecx,eax
c0016059:	83 c8 ff             	or     eax,0xffffffff
c001605c:	85 c9                	test   ecx,ecx
c001605e:	89 c2                	mov    edx,eax
c0016060:	74 28                	je     c001608a <Sys::read(regs*)+0x61>
c0016062:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001606a:	31 ff                	xor    edi,edi
c001606c:	83 ec 0c             	sub    esp,0xc
c001606f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016071:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016075:	52                   	push   edx
c0016076:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016079:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001607c:	57                   	push   edi
c001607d:	56                   	push   esi
c001607e:	51                   	push   ecx
c001607f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016082:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016086:	83 c4 20             	add    esp,0x20
c0016089:	99                   	cdq    
c001608a:	83 c4 10             	add    esp,0x10
c001608d:	5b                   	pop    ebx
c001608e:	5e                   	pop    esi
c001608f:	5f                   	pop    edi
c0016090:	c3                   	ret    

c0016091 <Sys::sbrk(regs*)>:
c0016091:	56                   	push   esi
c0016092:	53                   	push   ebx
c0016093:	50                   	push   eax
c0016094:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016099:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001609d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00160a0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00160a3:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00160a9:	85 db                	test   ebx,ebx
c00160ab:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00160ae:	74 02                	je     c00160b2 <Sys::sbrk(regs*)+0x21>
c00160b0:	79 06                	jns    c00160b8 <Sys::sbrk(regs*)+0x27>
c00160b2:	89 f0                	mov    eax,esi
c00160b4:	31 d2                	xor    edx,edx
c00160b6:	eb 2a                	jmp    c00160e2 <Sys::sbrk(regs*)+0x51>
c00160b8:	83 c8 ff             	or     eax,0xffffffff
c00160bb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00160c1:	89 c2                	mov    edx,eax
c00160c3:	77 1d                	ja     c00160e2 <Sys::sbrk(regs*)+0x51>
c00160c5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00160cb:	50                   	push   eax
c00160cc:	c1 ea 0c             	shr    edx,0xc
c00160cf:	68 07 0c 00 00       	push   0xc07
c00160d4:	52                   	push   edx
c00160d5:	51                   	push   ecx
c00160d6:	e8 ef 63 ff ff       	call   c000c4ca <VAS::allocatePages(int, int)>
c00160db:	89 f0                	mov    eax,esi
c00160dd:	31 d2                	xor    edx,edx
c00160df:	83 c4 10             	add    esp,0x10
c00160e2:	59                   	pop    ecx
c00160e3:	5b                   	pop    ebx
c00160e4:	5e                   	pop    esi
c00160e5:	c3                   	ret    

c00160e6 <Sys::setCwd(regs*)>:
c00160e6:	83 ec 14             	sub    esp,0x14
c00160e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160ed:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00160f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160f5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00160f8:	e8 9c 78 ff ff       	call   c000d999 <Fs::setcwd(Process*, char*)>
c00160fd:	83 c4 1c             	add    esp,0x1c
c0016100:	99                   	cdq    
c0016101:	c3                   	ret    

c0016102 <Sys::setTime(regs*)>:
c0016102:	55                   	push   ebp
c0016103:	31 c9                	xor    ecx,ecx
c0016105:	57                   	push   edi
c0016106:	bd 0c 00 00 00       	mov    ebp,0xc
c001610b:	56                   	push   esi
c001610c:	53                   	push   ebx
c001610d:	31 db                	xor    ebx,ebx
c001610f:	83 ec 10             	sub    esp,0x10
c0016112:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016116:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0016119:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001611c:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001611f:	89 c2                	mov    edx,eax
c0016121:	66 81 ef 6c 07       	sub    di,0x76c
c0016126:	83 e2 1f             	and    edx,0x1f
c0016129:	c1 e7 10             	shl    edi,0x10
c001612c:	42                   	inc    edx
c001612d:	c1 e8 05             	shr    eax,0x5
c0016130:	88 d1                	mov    cl,dl
c0016132:	31 d2                	xor    edx,edx
c0016134:	f7 f5                	div    ebp
c0016136:	89 dd                	mov    ebp,ebx
c0016138:	88 d5                	mov    ch,dl
c001613a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0016140:	0f b7 c1             	movzx  eax,cx
c0016143:	31 d2                	xor    edx,edx
c0016145:	09 f8                	or     eax,edi
c0016147:	bf 3c 00 00 00       	mov    edi,0x3c
c001614c:	89 c1                	mov    ecx,eax
c001614e:	89 f0                	mov    eax,esi
c0016150:	f7 f7                	div    edi
c0016152:	c1 e2 10             	shl    edx,0x10
c0016155:	09 d5                	or     ebp,edx
c0016157:	31 d2                	xor    edx,edx
c0016159:	89 eb                	mov    ebx,ebp
c001615b:	f7 f7                	div    edi
c001615d:	bf 10 0e 00 00       	mov    edi,0xe10
c0016162:	88 d7                	mov    bh,dl
c0016164:	89 f0                	mov    eax,esi
c0016166:	31 d2                	xor    edx,edx
c0016168:	f7 f7                	div    edi
c001616a:	bf 18 00 00 00       	mov    edi,0x18
c001616f:	31 d2                	xor    edx,edx
c0016171:	f7 f7                	div    edi
c0016173:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0016178:	88 d3                	mov    bl,dl
c001617a:	53                   	push   ebx
c001617b:	51                   	push   ecx
c001617c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016182:	e8 13 81 ff ff       	call   c000e29a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0016187:	83 c4 1c             	add    esp,0x1c
c001618a:	83 f0 01             	xor    eax,0x1
c001618d:	5b                   	pop    ebx
c001618e:	0f b6 c0             	movzx  eax,al
c0016191:	5e                   	pop    esi
c0016192:	31 d2                	xor    edx,edx
c0016194:	5f                   	pop    edi
c0016195:	5d                   	pop    ebp
c0016196:	c3                   	ret    

c0016197 <Sys::timezone(regs*)>:
c0016197:	53                   	push   ebx
c0016198:	83 ec 08             	sub    esp,0x8
c001619b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001619f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00161a3:	75 17                	jne    c00161bc <Sys::timezone(regs*)+0x25>
c00161a5:	83 ec 0c             	sub    esp,0xc
c00161a8:	68 49 66 02 c0       	push   0xc0026649
c00161ad:	e8 95 6e ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00161b2:	83 c8 ff             	or     eax,0xffffffff
c00161b5:	83 c4 10             	add    esp,0x10
c00161b8:	89 c2                	mov    edx,eax
c00161ba:	eb 20                	jmp    c00161dc <Sys::timezone(regs*)+0x45>
c00161bc:	83 ec 0c             	sub    esp,0xc
c00161bf:	68 5e 66 02 c0       	push   0xc002665e
c00161c4:	e8 7e 6e ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00161c9:	58                   	pop    eax
c00161ca:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00161cd:	e8 2a 7e ff ff       	call   c000dffc <User::loadClockSettings(int)>
c00161d2:	83 c4 10             	add    esp,0x10
c00161d5:	b8 01 00 00 00       	mov    eax,0x1
c00161da:	31 d2                	xor    edx,edx
c00161dc:	83 c4 08             	add    esp,0x8
c00161df:	5b                   	pop    ebx
c00161e0:	c3                   	ret    

c00161e1 <Sys::write(regs*)>:
c00161e1:	57                   	push   edi
c00161e2:	56                   	push   esi
c00161e3:	53                   	push   ebx
c00161e4:	83 ec 10             	sub    esp,0x10
c00161e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00161eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161ee:	83 f8 02             	cmp    eax,0x2
c00161f1:	77 10                	ja     c0016203 <Sys::write(regs*)+0x22>
c00161f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00161fb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016201:	eb 0e                	jmp    c0016211 <Sys::write(regs*)+0x30>
c0016203:	83 ec 0c             	sub    esp,0xc
c0016206:	50                   	push   eax
c0016207:	e8 bf 59 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c001620c:	83 c4 10             	add    esp,0x10
c001620f:	89 c1                	mov    ecx,eax
c0016211:	83 c8 ff             	or     eax,0xffffffff
c0016214:	85 c9                	test   ecx,ecx
c0016216:	89 c2                	mov    edx,eax
c0016218:	74 28                	je     c0016242 <Sys::write(regs*)+0x61>
c001621a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016222:	31 ff                	xor    edi,edi
c0016224:	83 ec 0c             	sub    esp,0xc
c0016227:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016229:	8d 54 24 18          	lea    edx,[esp+0x18]
c001622d:	52                   	push   edx
c001622e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016231:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016234:	57                   	push   edi
c0016235:	56                   	push   esi
c0016236:	51                   	push   ecx
c0016237:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001623a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001623e:	83 c4 20             	add    esp,0x20
c0016241:	99                   	cdq    
c0016242:	83 c4 10             	add    esp,0x10
c0016245:	5b                   	pop    ebx
c0016246:	5e                   	pop    esi
c0016247:	5f                   	pop    edi
c0016248:	c3                   	ret    

c0016249 <Sys::wsbe(regs*)>:
c0016249:	57                   	push   edi
c001624a:	b9 0b 00 00 00       	mov    ecx,0xb
c001624f:	56                   	push   esi
c0016250:	be 9d 66 02 c0       	mov    esi,0xc002669d
c0016255:	53                   	push   ebx
c0016256:	83 ec 30             	sub    esp,0x30
c0016259:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001625d:	fc                   	cld    
c001625e:	83 ec 0c             	sub    esp,0xc
c0016261:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0016263:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0016267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001626c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001626f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0016275:	8b 06                	mov    eax,DWORD PTR [esi]
c0016277:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001627a:	57                   	push   edi
c001627b:	e8 20 a4 fe ff       	call   c00006a0 <strlen>
c0016280:	5a                   	pop    edx
c0016281:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0016285:	52                   	push   edx
c0016286:	31 d2                	xor    edx,edx
c0016288:	57                   	push   edi
c0016289:	52                   	push   edx
c001628a:	50                   	push   eax
c001628b:	56                   	push   esi
c001628c:	ff d3                	call   ebx
c001628e:	83 c4 14             	add    esp,0x14
c0016291:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016295:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016298:	e8 6b 32 00 00       	call   c0019508 <terminateTask(int)>
c001629d:	83 c4 40             	add    esp,0x40
c00162a0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00162a5:	5b                   	pop    ebx
c00162a6:	31 d2                	xor    edx,edx
c00162a8:	5e                   	pop    esi
c00162a9:	5f                   	pop    edi
c00162aa:	c3                   	ret    

c00162ab <Sys::yield(regs*)>:
c00162ab:	83 ec 0c             	sub    esp,0xc
c00162ae:	fa                   	cli    
c00162af:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c00162b5:	e8 36 29 00 00       	call   c0018bf0 <schedule()>
c00162ba:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c00162bf:	48                   	dec    eax
c00162c0:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c00162c5:	75 01                	jne    c00162c8 <Sys::yield(regs*)+0x1d>
c00162c7:	fb                   	sti    
c00162c8:	8b 15 ac 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028eac
c00162ce:	83 c4 0c             	add    esp,0xc
c00162d1:	89 d0                	mov    eax,edx
c00162d3:	c1 ea 11             	shr    edx,0x11
c00162d6:	c1 e0 07             	shl    eax,0x7
c00162d9:	25 80 30 0f 00       	and    eax,0xf3080
c00162de:	31 d0                	xor    eax,edx
c00162e0:	31 d2                	xor    edx,edx
c00162e2:	c3                   	ret    

c00162e3 <sysCallSeekDir(regs*)>:
c00162e3:	31 c0                	xor    eax,eax
c00162e5:	31 d2                	xor    edx,edx
c00162e7:	c3                   	ret    

c00162e8 <sysCallTellDir(regs*)>:
c00162e8:	31 c0                	xor    eax,eax
c00162ea:	31 d2                	xor    edx,edx
c00162ec:	c3                   	ret    

c00162ed <sysCallVerify(regs*)>:
c00162ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162f1:	31 d2                	xor    edx,edx
c00162f3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00162f6:	c3                   	ret    

c00162f7 <sysCallGetArgc(regs*)>:
c00162f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00162ff:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0016305:	99                   	cdq    
c0016306:	c3                   	ret    

c0016307 <sysFormatDisk(regs*)>:
c0016307:	56                   	push   esi
c0016308:	53                   	push   ebx
c0016309:	53                   	push   ebx
c001630a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001630e:	8b 1d b4 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289b4
c0016314:	eb 25                	jmp    c001633b <sysFormatDisk(regs*)+0x34>
c0016316:	83 ec 0c             	sub    esp,0xc
c0016319:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001631c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001631e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016321:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016324:	50                   	push   eax
c0016325:	ff 34 85 40 8e 02 c0 	push   DWORD PTR [eax*4-0x3ffd71c0]
c001632c:	53                   	push   ebx
c001632d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016330:	83 c4 20             	add    esp,0x20
c0016333:	83 f8 08             	cmp    eax,0x8
c0016336:	75 12                	jne    c001634a <sysFormatDisk(regs*)+0x43>
c0016338:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001633b:	85 db                	test   ebx,ebx
c001633d:	75 d7                	jne    c0016316 <sysFormatDisk(regs*)+0xf>
c001633f:	59                   	pop    ecx
c0016340:	b8 03 00 00 00       	mov    eax,0x3
c0016345:	31 d2                	xor    edx,edx
c0016347:	5b                   	pop    ebx
c0016348:	5e                   	pop    esi
c0016349:	c3                   	ret    
c001634a:	85 c0                	test   eax,eax
c001634c:	74 1b                	je     c0016369 <sysFormatDisk(regs*)+0x62>
c001634e:	83 f8 09             	cmp    eax,0x9
c0016351:	74 0b                	je     c001635e <sysFormatDisk(regs*)+0x57>
c0016353:	59                   	pop    ecx
c0016354:	b8 02 00 00 00       	mov    eax,0x2
c0016359:	31 d2                	xor    edx,edx
c001635b:	5b                   	pop    ebx
c001635c:	5e                   	pop    esi
c001635d:	c3                   	ret    
c001635e:	59                   	pop    ecx
c001635f:	b8 01 00 00 00       	mov    eax,0x1
c0016364:	31 d2                	xor    edx,edx
c0016366:	5b                   	pop    ebx
c0016367:	5e                   	pop    esi
c0016368:	c3                   	ret    
c0016369:	59                   	pop    ecx
c001636a:	31 c0                	xor    eax,eax
c001636c:	31 d2                	xor    edx,edx
c001636e:	5b                   	pop    ebx
c001636f:	5e                   	pop    esi
c0016370:	c3                   	ret    

c0016371 <sysSetDiskVolumeLabel(regs*)>:
c0016371:	56                   	push   esi
c0016372:	53                   	push   ebx
c0016373:	53                   	push   ebx
c0016374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016378:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001637b:	83 f8 19             	cmp    eax,0x19
c001637e:	77 2d                	ja     c00163ad <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016380:	8b 0c 85 40 8e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd71c0]
c0016387:	85 c9                	test   ecx,ecx
c0016389:	74 22                	je     c00163ad <sysSetDiskVolumeLabel(regs*)+0x3c>
c001638b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001638e:	85 db                	test   ebx,ebx
c0016390:	74 1b                	je     c00163ad <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016392:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0016398:	85 d2                	test   edx,edx
c001639a:	74 11                	je     c00163ad <sysSetDiskVolumeLabel(regs*)+0x3c>
c001639c:	8b 32                	mov    esi,DWORD PTR [edx]
c001639e:	53                   	push   ebx
c001639f:	50                   	push   eax
c00163a0:	51                   	push   ecx
c00163a1:	52                   	push   edx
c00163a2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	99                   	cdq    
c00163a9:	59                   	pop    ecx
c00163aa:	5b                   	pop    ebx
c00163ab:	5e                   	pop    esi
c00163ac:	c3                   	ret    
c00163ad:	59                   	pop    ecx
c00163ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00163b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163b8:	5b                   	pop    ebx
c00163b9:	5e                   	pop    esi
c00163ba:	c3                   	ret    

c00163bb <sysGetDiskVolumeLabel(regs*)>:
c00163bb:	57                   	push   edi
c00163bc:	56                   	push   esi
c00163bd:	53                   	push   ebx
c00163be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00163c5:	83 fa 19             	cmp    edx,0x19
c00163c8:	77 38                	ja     c0016402 <sysGetDiskVolumeLabel(regs*)+0x47>
c00163ca:	8b 0c 95 40 8e 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd71c0]
c00163d1:	85 c9                	test   ecx,ecx
c00163d3:	74 2d                	je     c0016402 <sysGetDiskVolumeLabel(regs*)+0x47>
c00163d5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00163d8:	85 db                	test   ebx,ebx
c00163da:	74 26                	je     c0016402 <sysGetDiskVolumeLabel(regs*)+0x47>
c00163dc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00163df:	85 f6                	test   esi,esi
c00163e1:	74 1f                	je     c0016402 <sysGetDiskVolumeLabel(regs*)+0x47>
c00163e3:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00163e9:	85 c0                	test   eax,eax
c00163eb:	74 15                	je     c0016402 <sysGetDiskVolumeLabel(regs*)+0x47>
c00163ed:	83 ec 0c             	sub    esp,0xc
c00163f0:	8b 38                	mov    edi,DWORD PTR [eax]
c00163f2:	56                   	push   esi
c00163f3:	53                   	push   ebx
c00163f4:	52                   	push   edx
c00163f5:	51                   	push   ecx
c00163f6:	50                   	push   eax
c00163f7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00163fa:	83 c4 20             	add    esp,0x20
c00163fd:	99                   	cdq    
c00163fe:	5b                   	pop    ebx
c00163ff:	5e                   	pop    esi
c0016400:	5f                   	pop    edi
c0016401:	c3                   	ret    
c0016402:	5b                   	pop    ebx
c0016403:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016408:	ba ff ff ff ff       	mov    edx,0xffffffff
c001640d:	5e                   	pop    esi
c001640e:	5f                   	pop    edi
c001640f:	c3                   	ret    

c0016410 <sysShutdown(regs*)>:
c0016410:	83 ec 0c             	sub    esp,0xc
c0016413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016417:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001641a:	85 c0                	test   eax,eax
c001641c:	74 18                	je     c0016436 <sysShutdown(regs*)+0x26>
c001641e:	83 f8 01             	cmp    eax,0x1
c0016421:	74 38                	je     c001645b <sysShutdown(regs*)+0x4b>
c0016423:	83 f8 02             	cmp    eax,0x2
c0016426:	74 24                	je     c001644c <sysShutdown(regs*)+0x3c>
c0016428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001642d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016432:	83 c4 0c             	add    esp,0xc
c0016435:	c3                   	ret    
c0016436:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c001643b:	8b 10                	mov    edx,DWORD PTR [eax]
c001643d:	6a 00                	push   0x0
c001643f:	6a 00                	push   0x0
c0016441:	6a 00                	push   0x0
c0016443:	50                   	push   eax
c0016444:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016447:	83 c4 10             	add    esp,0x10
c001644a:	eb dc                	jmp    c0016428 <sysShutdown(regs*)+0x18>
c001644c:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0016451:	8b 10                	mov    edx,DWORD PTR [eax]
c0016453:	6a 00                	push   0x0
c0016455:	6a 00                	push   0x0
c0016457:	6a 01                	push   0x1
c0016459:	eb e8                	jmp    c0016443 <sysShutdown(regs*)+0x33>
c001645b:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0016460:	85 c0                	test   eax,eax
c0016462:	74 02                	je     c0016466 <sysShutdown(regs*)+0x56>
c0016464:	ff d0                	call   eax
c0016466:	31 c0                	xor    eax,eax
c0016468:	31 d2                	xor    edx,edx
c001646a:	83 c4 0c             	add    esp,0xc
c001646d:	c3                   	ret    

c001646e <sysCallRealpath(regs*)>:
c001646e:	83 ec 0c             	sub    esp,0xc
c0016471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016475:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016478:	85 d2                	test   edx,edx
c001647a:	74 07                	je     c0016483 <sysCallRealpath(regs*)+0x15>
c001647c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001647f:	85 c0                	test   eax,eax
c0016481:	75 0b                	jne    c001648e <sysCallRealpath(regs*)+0x20>
c0016483:	b8 01 00 00 00       	mov    eax,0x1
c0016488:	31 d2                	xor    edx,edx
c001648a:	83 c4 0c             	add    esp,0xc
c001648d:	c3                   	ret    
c001648e:	51                   	push   ecx
c001648f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016495:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016498:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001649e:	51                   	push   ecx
c001649f:	52                   	push   edx
c00164a0:	50                   	push   eax
c00164a1:	e8 62 6f ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c00164a6:	83 c4 10             	add    esp,0x10
c00164a9:	31 c0                	xor    eax,eax
c00164ab:	31 d2                	xor    edx,edx
c00164ad:	83 c4 0c             	add    esp,0xc
c00164b0:	c3                   	ret    

c00164b1 <sysCallReadDir(regs*)>:
c00164b1:	53                   	push   ebx
c00164b2:	83 ec 18             	sub    esp,0x18
c00164b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00164b9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00164bc:	83 f8 02             	cmp    eax,0x2
c00164bf:	76 60                	jbe    c0016521 <sysCallReadDir(regs*)+0x70>
c00164c1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00164c8:	77 48                	ja     c0016512 <sysCallReadDir(regs*)+0x61>
c00164ca:	83 ec 0c             	sub    esp,0xc
c00164cd:	50                   	push   eax
c00164ce:	e8 f8 56 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c00164d3:	83 c4 10             	add    esp,0x10
c00164d6:	85 c0                	test   eax,eax
c00164d8:	74 38                	je     c0016512 <sysCallReadDir(regs*)+0x61>
c00164da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00164e2:	83 ec 0c             	sub    esp,0xc
c00164e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00164e7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00164eb:	51                   	push   ecx
c00164ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00164ef:	6a 00                	push   0x0
c00164f1:	68 10 01 00 00       	push   0x110
c00164f6:	50                   	push   eax
c00164f7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00164fa:	83 c4 20             	add    esp,0x20
c00164fd:	85 c0                	test   eax,eax
c00164ff:	74 29                	je     c001652a <sysCallReadDir(regs*)+0x79>
c0016501:	83 f8 07             	cmp    eax,0x7
c0016504:	74 1b                	je     c0016521 <sysCallReadDir(regs*)+0x70>
c0016506:	b8 02 00 00 00       	mov    eax,0x2
c001650b:	31 d2                	xor    edx,edx
c001650d:	83 c4 18             	add    esp,0x18
c0016510:	5b                   	pop    ebx
c0016511:	c3                   	ret    
c0016512:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016517:	ba ff ff ff ff       	mov    edx,0xffffffff
c001651c:	83 c4 18             	add    esp,0x18
c001651f:	5b                   	pop    ebx
c0016520:	c3                   	ret    
c0016521:	b8 01 00 00 00       	mov    eax,0x1
c0016526:	31 d2                	xor    edx,edx
c0016528:	eb e3                	jmp    c001650d <sysCallReadDir(regs*)+0x5c>
c001652a:	31 c0                	xor    eax,eax
c001652c:	31 d2                	xor    edx,edx
c001652e:	eb dd                	jmp    c001650d <sysCallReadDir(regs*)+0x5c>

c0016530 <sysCallIsATTY(regs*)>:
c0016530:	83 ec 0c             	sub    esp,0xc
c0016533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016537:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001653a:	83 f8 02             	cmp    eax,0x2
c001653d:	76 07                	jbe    c0016546 <sysCallIsATTY(regs*)+0x16>
c001653f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016544:	75 26                	jne    c001656c <sysCallIsATTY(regs*)+0x3c>
c0016546:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001654b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001654e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016554:	85 c0                	test   eax,eax
c0016556:	74 24                	je     c001657c <sysCallIsATTY(regs*)+0x4c>
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	8b 10                	mov    edx,DWORD PTR [eax]
c001655d:	50                   	push   eax
c001655e:	ff 12                	call   DWORD PTR [edx]
c0016560:	31 d2                	xor    edx,edx
c0016562:	0f b6 c0             	movzx  eax,al
c0016565:	83 c4 10             	add    esp,0x10
c0016568:	83 c4 0c             	add    esp,0xc
c001656b:	c3                   	ret    
c001656c:	83 ec 0c             	sub    esp,0xc
c001656f:	50                   	push   eax
c0016570:	e8 56 56 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016575:	83 c4 10             	add    esp,0x10
c0016578:	85 c0                	test   eax,eax
c001657a:	75 dc                	jne    c0016558 <sysCallIsATTY(regs*)+0x28>
c001657c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016581:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016586:	83 c4 0c             	add    esp,0xc
c0016589:	c3                   	ret    

c001658a <sysCallSeek(regs*)>:
c001658a:	53                   	push   ebx
c001658b:	83 ec 08             	sub    esp,0x8
c001658e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016592:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016595:	8d 50 fd             	lea    edx,[eax-0x3]
c0016598:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001659e:	77 32                	ja     c00165d2 <sysCallSeek(regs*)+0x48>
c00165a0:	83 ec 0c             	sub    esp,0xc
c00165a3:	50                   	push   eax
c00165a4:	e8 22 56 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c00165a9:	83 c4 0c             	add    esp,0xc
c00165ac:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00165af:	31 db                	xor    ebx,ebx
c00165b1:	53                   	push   ebx
c00165b2:	51                   	push   ecx
c00165b3:	50                   	push   eax
c00165b4:	e8 91 71 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c00165b9:	83 c4 10             	add    esp,0x10
c00165bc:	85 c0                	test   eax,eax
c00165be:	0f 95 c0             	setne  al
c00165c1:	31 d2                	xor    edx,edx
c00165c3:	0f b6 c0             	movzx  eax,al
c00165c6:	f7 d8                	neg    eax
c00165c8:	83 d2 00             	adc    edx,0x0
c00165cb:	83 c4 08             	add    esp,0x8
c00165ce:	f7 da                	neg    edx
c00165d0:	5b                   	pop    ebx
c00165d1:	c3                   	ret    
c00165d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00165dc:	83 c4 08             	add    esp,0x8
c00165df:	5b                   	pop    ebx
c00165e0:	c3                   	ret    

c00165e1 <sysCallTell(regs*)>:
c00165e1:	53                   	push   ebx
c00165e2:	83 ec 08             	sub    esp,0x8
c00165e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00165ec:	83 f8 02             	cmp    eax,0x2
c00165ef:	76 4d                	jbe    c001663e <sysCallTell(regs*)+0x5d>
c00165f1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00165f6:	76 19                	jbe    c0016611 <sysCallTell(regs*)+0x30>
c00165f8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00165fb:	31 d2                	xor    edx,edx
c00165fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016603:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001660a:	31 c0                	xor    eax,eax
c001660c:	83 c4 08             	add    esp,0x8
c001660f:	5b                   	pop    ebx
c0016610:	c3                   	ret    
c0016611:	83 ec 0c             	sub    esp,0xc
c0016614:	50                   	push   eax
c0016615:	e8 b1 55 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c001661a:	5a                   	pop    edx
c001661b:	59                   	pop    ecx
c001661c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001661f:	50                   	push   eax
c0016620:	e8 7b 71 ff ff       	call   c000d7a0 <File::tell(unsigned long long*)>
c0016625:	83 c4 10             	add    esp,0x10
c0016628:	85 c0                	test   eax,eax
c001662a:	0f 95 c0             	setne  al
c001662d:	31 d2                	xor    edx,edx
c001662f:	0f b6 c0             	movzx  eax,al
c0016632:	f7 d8                	neg    eax
c0016634:	83 d2 00             	adc    edx,0x0
c0016637:	83 c4 08             	add    esp,0x8
c001663a:	f7 da                	neg    edx
c001663c:	5b                   	pop    ebx
c001663d:	c3                   	ret    
c001663e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016643:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016648:	83 c4 08             	add    esp,0x8
c001664b:	5b                   	pop    ebx
c001664c:	c3                   	ret    

c001664d <sysCallSize(regs*)>:
c001664d:	53                   	push   ebx
c001664e:	83 ec 18             	sub    esp,0x18
c0016651:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016655:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016658:	83 f8 02             	cmp    eax,0x2
c001665b:	76 53                	jbe    c00166b0 <sysCallSize(regs*)+0x63>
c001665d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016662:	76 19                	jbe    c001667d <sysCallSize(regs*)+0x30>
c0016664:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016667:	31 d2                	xor    edx,edx
c0016669:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001666f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016676:	31 c0                	xor    eax,eax
c0016678:	83 c4 18             	add    esp,0x18
c001667b:	5b                   	pop    ebx
c001667c:	c3                   	ret    
c001667d:	83 ec 0c             	sub    esp,0xc
c0016680:	50                   	push   eax
c0016681:	e8 45 55 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016686:	83 c4 0c             	add    esp,0xc
c0016689:	8d 54 24 13          	lea    edx,[esp+0x13]
c001668d:	52                   	push   edx
c001668e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016691:	50                   	push   eax
c0016692:	e8 a1 72 ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c0016697:	83 c4 10             	add    esp,0x10
c001669a:	85 c0                	test   eax,eax
c001669c:	0f 95 c0             	setne  al
c001669f:	31 d2                	xor    edx,edx
c00166a1:	0f b6 c0             	movzx  eax,al
c00166a4:	f7 d8                	neg    eax
c00166a6:	83 d2 00             	adc    edx,0x0
c00166a9:	83 c4 18             	add    esp,0x18
c00166ac:	f7 da                	neg    edx
c00166ae:	5b                   	pop    ebx
c00166af:	c3                   	ret    
c00166b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00166b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00166ba:	83 c4 18             	add    esp,0x18
c00166bd:	5b                   	pop    ebx
c00166be:	c3                   	ret    

c00166bf <sysCallSizeFromFilename(regs*)>:
c00166bf:	57                   	push   edi
c00166c0:	56                   	push   esi
c00166c1:	53                   	push   ebx
c00166c2:	83 ec 20             	sub    esp,0x20
c00166c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166c9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00166cc:	83 fb 02             	cmp    ebx,0x2
c00166cf:	0f 86 88 00 00 00    	jbe    c001675d <sysCallSizeFromFilename(regs*)+0x9e>
c00166d5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00166db:	76 1b                	jbe    c00166f8 <sysCallSizeFromFilename(regs*)+0x39>
c00166dd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00166e0:	31 d2                	xor    edx,edx
c00166e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00166e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00166ef:	83 c4 20             	add    esp,0x20
c00166f2:	31 c0                	xor    eax,eax
c00166f4:	5b                   	pop    ebx
c00166f5:	5e                   	pop    esi
c00166f6:	5f                   	pop    edi
c00166f7:	c3                   	ret    
c00166f8:	83 ec 0c             	sub    esp,0xc
c00166fb:	68 14 01 00 00       	push   0x114
c0016700:	e8 56 36 ff ff       	call   c0009d5b <malloc>
c0016705:	83 c4 0c             	add    esp,0xc
c0016708:	89 c7                	mov    edi,eax
c001670a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001670f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016712:	53                   	push   ebx
c0016713:	57                   	push   edi
c0016714:	e8 99 6e ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016719:	83 c4 0c             	add    esp,0xc
c001671c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016720:	50                   	push   eax
c0016721:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016724:	57                   	push   edi
c0016725:	e8 0e 72 ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001672a:	83 c4 10             	add    esp,0x10
c001672d:	85 ff                	test   edi,edi
c001672f:	74 14                	je     c0016745 <sysCallSizeFromFilename(regs*)+0x86>
c0016731:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016735:	8b 17                	mov    edx,DWORD PTR [edi]
c0016737:	83 ec 0c             	sub    esp,0xc
c001673a:	57                   	push   edi
c001673b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001673e:	83 c4 10             	add    esp,0x10
c0016741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016745:	85 c0                	test   eax,eax
c0016747:	0f 95 c0             	setne  al
c001674a:	31 d2                	xor    edx,edx
c001674c:	0f b6 c0             	movzx  eax,al
c001674f:	f7 d8                	neg    eax
c0016751:	83 d2 00             	adc    edx,0x0
c0016754:	83 c4 20             	add    esp,0x20
c0016757:	f7 da                	neg    edx
c0016759:	5b                   	pop    ebx
c001675a:	5e                   	pop    esi
c001675b:	5f                   	pop    edi
c001675c:	c3                   	ret    
c001675d:	83 c4 20             	add    esp,0x20
c0016760:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016765:	5b                   	pop    ebx
c0016766:	ba ff ff ff ff       	mov    edx,0xffffffff
c001676b:	5e                   	pop    esi
c001676c:	5f                   	pop    edi
c001676d:	c3                   	ret    

c001676e <sysCallClose(regs*)>:
c001676e:	53                   	push   ebx
c001676f:	83 ec 08             	sub    esp,0x8
c0016772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016776:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016779:	83 f8 02             	cmp    eax,0x2
c001677c:	76 41                	jbe    c00167bf <sysCallClose(regs*)+0x51>
c001677e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016784:	83 fa 01             	cmp    edx,0x1
c0016787:	76 2d                	jbe    c00167b6 <sysCallClose(regs*)+0x48>
c0016789:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001678e:	77 2f                	ja     c00167bf <sysCallClose(regs*)+0x51>
c0016790:	83 ec 0c             	sub    esp,0xc
c0016793:	50                   	push   eax
c0016794:	e8 32 54 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016799:	89 c3                	mov    ebx,eax
c001679b:	89 04 24             	mov    DWORD PTR [esp],eax
c001679e:	e8 47 6f ff ff       	call   c000d6ea <File::close()>
c00167a3:	83 c4 10             	add    esp,0x10
c00167a6:	85 db                	test   ebx,ebx
c00167a8:	74 0c                	je     c00167b6 <sysCallClose(regs*)+0x48>
c00167aa:	83 ec 0c             	sub    esp,0xc
c00167ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167af:	53                   	push   ebx
c00167b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167b3:	83 c4 10             	add    esp,0x10
c00167b6:	31 c0                	xor    eax,eax
c00167b8:	31 d2                	xor    edx,edx
c00167ba:	83 c4 08             	add    esp,0x8
c00167bd:	5b                   	pop    ebx
c00167be:	c3                   	ret    
c00167bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167c9:	83 c4 08             	add    esp,0x8
c00167cc:	5b                   	pop    ebx
c00167cd:	c3                   	ret    

c00167ce <sysCallOpenDir(regs*)>:
c00167ce:	56                   	push   esi
c00167cf:	53                   	push   ebx
c00167d0:	53                   	push   ebx
c00167d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167d5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00167d8:	85 f6                	test   esi,esi
c00167da:	74 59                	je     c0016835 <sysCallOpenDir(regs*)+0x67>
c00167dc:	83 ec 0c             	sub    esp,0xc
c00167df:	68 14 01 00 00       	push   0x114
c00167e4:	e8 72 35 ff ff       	call   c0009d5b <malloc>
c00167e9:	83 c4 0c             	add    esp,0xc
c00167ec:	89 c6                	mov    esi,eax
c00167ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167f3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00167f6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167f9:	56                   	push   esi
c00167fa:	e8 13 73 ff ff       	call   c000db12 <Directory::Directory(char const*, Process*)>
c00167ff:	83 c4 10             	add    esp,0x10
c0016802:	85 f6                	test   esi,esi
c0016804:	74 2f                	je     c0016835 <sysCallOpenDir(regs*)+0x67>
c0016806:	83 ec 0c             	sub    esp,0xc
c0016809:	56                   	push   esi
c001680a:	e8 dd 73 ff ff       	call   c000dbec <Directory::open()>
c001680f:	83 c4 10             	add    esp,0x10
c0016812:	85 c0                	test   eax,eax
c0016814:	75 1f                	jne    c0016835 <sysCallOpenDir(regs*)+0x67>
c0016816:	83 ec 0c             	sub    esp,0xc
c0016819:	56                   	push   esi
c001681a:	e8 b7 50 ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c001681f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016822:	83 c4 10             	add    esp,0x10
c0016825:	89 02                	mov    DWORD PTR [edx],eax
c0016827:	c1 f8 1f             	sar    eax,0x1f
c001682a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001682d:	31 c0                	xor    eax,eax
c001682f:	59                   	pop    ecx
c0016830:	31 d2                	xor    edx,edx
c0016832:	5b                   	pop    ebx
c0016833:	5e                   	pop    esi
c0016834:	c3                   	ret    
c0016835:	59                   	pop    ecx
c0016836:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001683b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016840:	5b                   	pop    ebx
c0016841:	5e                   	pop    esi
c0016842:	c3                   	ret    

c0016843 <sysCallCloseDir(regs*)>:
c0016843:	53                   	push   ebx
c0016844:	83 ec 08             	sub    esp,0x8
c0016847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001684e:	8d 50 fd             	lea    edx,[eax-0x3]
c0016851:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016857:	77 2f                	ja     c0016888 <sysCallCloseDir(regs*)+0x45>
c0016859:	83 ec 0c             	sub    esp,0xc
c001685c:	50                   	push   eax
c001685d:	e8 69 53 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016862:	89 c3                	mov    ebx,eax
c0016864:	89 04 24             	mov    DWORD PTR [esp],eax
c0016867:	e8 dc 73 ff ff       	call   c000dc48 <Directory::close()>
c001686c:	83 c4 10             	add    esp,0x10
c001686f:	85 db                	test   ebx,ebx
c0016871:	74 0c                	je     c001687f <sysCallCloseDir(regs*)+0x3c>
c0016873:	83 ec 0c             	sub    esp,0xc
c0016876:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016878:	53                   	push   ebx
c0016879:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001687c:	83 c4 10             	add    esp,0x10
c001687f:	31 c0                	xor    eax,eax
c0016881:	31 d2                	xor    edx,edx
c0016883:	83 c4 08             	add    esp,0x8
c0016886:	5b                   	pop    ebx
c0016887:	c3                   	ret    
c0016888:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001688d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016892:	83 c4 08             	add    esp,0x8
c0016895:	5b                   	pop    ebx
c0016896:	c3                   	ret    

c0016897 <sysCallMakeDir(regs*)>:
c0016897:	56                   	push   esi
c0016898:	53                   	push   ebx
c0016899:	83 ec 10             	sub    esp,0x10
c001689c:	68 14 01 00 00       	push   0x114
c00168a1:	e8 b5 34 ff ff       	call   c0009d5b <malloc>
c00168a6:	83 c4 0c             	add    esp,0xc
c00168a9:	89 c3                	mov    ebx,eax
c00168ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168b0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00168b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00168b7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00168ba:	53                   	push   ebx
c00168bb:	e8 52 72 ff ff       	call   c000db12 <Directory::Directory(char const*, Process*)>
c00168c0:	83 c4 10             	add    esp,0x10
c00168c3:	85 db                	test   ebx,ebx
c00168c5:	74 32                	je     c00168f9 <sysCallMakeDir(regs*)+0x62>
c00168c7:	83 ec 0c             	sub    esp,0xc
c00168ca:	53                   	push   ebx
c00168cb:	e8 fc 74 ff ff       	call   c000ddcc <Directory::create()>
c00168d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168d3:	89 c6                	mov    esi,eax
c00168d5:	e8 6e 73 ff ff       	call   c000dc48 <Directory::close()>
c00168da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168e2:	83 c4 10             	add    esp,0x10
c00168e5:	31 c0                	xor    eax,eax
c00168e7:	59                   	pop    ecx
c00168e8:	85 f6                	test   esi,esi
c00168ea:	5b                   	pop    ebx
c00168eb:	0f 95 c0             	setne  al
c00168ee:	5e                   	pop    esi
c00168ef:	31 d2                	xor    edx,edx
c00168f1:	f7 d8                	neg    eax
c00168f3:	83 d2 00             	adc    edx,0x0
c00168f6:	f7 da                	neg    edx
c00168f8:	c3                   	ret    
c00168f9:	59                   	pop    ecx
c00168fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016904:	5b                   	pop    ebx
c0016905:	5e                   	pop    esi
c0016906:	c3                   	ret    

c0016907 <sysCallWait(regs*)>:
c0016907:	83 ec 10             	sub    esp,0x10
c001690a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001690e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016911:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016914:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016917:	e8 fc 24 00 00       	call   c0018e18 <waitTask(int, int*, int)>
c001691c:	83 c4 1c             	add    esp,0x1c
c001691f:	99                   	cdq    
c0016920:	c3                   	ret    

c0016921 <sysCallNotImpl(regs*)>:
c0016921:	83 ec 18             	sub    esp,0x18
c0016924:	68 c9 66 02 c0       	push   0xc00266c9
c0016929:	e8 b7 e6 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001692e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016933:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016938:	83 c4 1c             	add    esp,0x1c
c001693b:	c3                   	ret    

c001693c <sysPanic(regs*)>:
c001693c:	83 ec 18             	sub    esp,0x18
c001693f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016943:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016946:	e8 9a e6 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001694b:	b8 01 00 00 00       	mov    eax,0x1
c0016950:	31 d2                	xor    edx,edx
c0016952:	83 c4 1c             	add    esp,0x1c
c0016955:	c3                   	ret    

c0016956 <sysCallRmdir(regs*)>:
c0016956:	56                   	push   esi
c0016957:	53                   	push   ebx
c0016958:	83 ec 20             	sub    esp,0x20
c001695b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001695f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016962:	68 14 01 00 00       	push   0x114
c0016967:	e8 ef 33 ff ff       	call   c0009d5b <malloc>
c001696c:	83 c4 0c             	add    esp,0xc
c001696f:	89 c3                	mov    ebx,eax
c0016971:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016976:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016979:	56                   	push   esi
c001697a:	53                   	push   ebx
c001697b:	e8 32 6c ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016980:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016983:	e8 7c 6e ff ff       	call   c000d804 <File::unlink()>
c0016988:	83 c4 10             	add    esp,0x10
c001698b:	85 db                	test   ebx,ebx
c001698d:	74 14                	je     c00169a3 <sysCallRmdir(regs*)+0x4d>
c001698f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016993:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016995:	83 ec 0c             	sub    esp,0xc
c0016998:	53                   	push   ebx
c0016999:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001699c:	83 c4 10             	add    esp,0x10
c001699f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169a3:	85 c0                	test   eax,eax
c00169a5:	0f 95 c0             	setne  al
c00169a8:	31 d2                	xor    edx,edx
c00169aa:	0f b6 c0             	movzx  eax,al
c00169ad:	f7 d8                	neg    eax
c00169af:	83 d2 00             	adc    edx,0x0
c00169b2:	83 c4 14             	add    esp,0x14
c00169b5:	f7 da                	neg    edx
c00169b7:	5b                   	pop    ebx
c00169b8:	5e                   	pop    esi
c00169b9:	c3                   	ret    

c00169ba <sysCallUnlink(regs*)>:
c00169ba:	56                   	push   esi
c00169bb:	53                   	push   ebx
c00169bc:	83 ec 20             	sub    esp,0x20
c00169bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00169c3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00169c6:	68 14 01 00 00       	push   0x114
c00169cb:	e8 8b 33 ff ff       	call   c0009d5b <malloc>
c00169d0:	83 c4 0c             	add    esp,0xc
c00169d3:	89 c3                	mov    ebx,eax
c00169d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169da:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00169dd:	56                   	push   esi
c00169de:	53                   	push   ebx
c00169df:	e8 ce 6b ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c00169e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169e7:	e8 18 6e ff ff       	call   c000d804 <File::unlink()>
c00169ec:	83 c4 10             	add    esp,0x10
c00169ef:	85 db                	test   ebx,ebx
c00169f1:	74 14                	je     c0016a07 <sysCallUnlink(regs*)+0x4d>
c00169f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00169f9:	83 ec 0c             	sub    esp,0xc
c00169fc:	53                   	push   ebx
c00169fd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016a00:	83 c4 10             	add    esp,0x10
c0016a03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a07:	85 c0                	test   eax,eax
c0016a09:	0f 95 c0             	setne  al
c0016a0c:	31 d2                	xor    edx,edx
c0016a0e:	0f b6 c0             	movzx  eax,al
c0016a11:	f7 d8                	neg    eax
c0016a13:	83 d2 00             	adc    edx,0x0
c0016a16:	83 c4 14             	add    esp,0x14
c0016a19:	f7 da                	neg    edx
c0016a1b:	5b                   	pop    ebx
c0016a1c:	5e                   	pop    esi
c0016a1d:	c3                   	ret    

c0016a1e <sysCallGetArgv(regs*)>:
c0016a1e:	83 ec 0c             	sub    esp,0xc
c0016a21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016a25:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016a28:	85 c0                	test   eax,eax
c0016a2a:	78 2b                	js     c0016a57 <sysCallGetArgv(regs*)+0x39>
c0016a2c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016a32:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016a35:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016a3b:	7d 1a                	jge    c0016a57 <sysCallGetArgv(regs*)+0x39>
c0016a3d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016a44:	85 c0                	test   eax,eax
c0016a46:	74 17                	je     c0016a5f <sysCallGetArgv(regs*)+0x41>
c0016a48:	83 ec 08             	sub    esp,0x8
c0016a4b:	50                   	push   eax
c0016a4c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016a4f:	e8 ec 9c fe ff       	call   c0000740 <strcpy>
c0016a54:	83 c4 10             	add    esp,0x10
c0016a57:	31 c0                	xor    eax,eax
c0016a59:	31 d2                	xor    edx,edx
c0016a5b:	83 c4 0c             	add    esp,0xc
c0016a5e:	c3                   	ret    
c0016a5f:	b8 01 00 00 00       	mov    eax,0x1
c0016a64:	31 d2                	xor    edx,edx
c0016a66:	83 c4 0c             	add    esp,0xc
c0016a69:	c3                   	ret    

c0016a6a <sysCallTTYName(regs*)>:
c0016a6a:	56                   	push   esi
c0016a6b:	53                   	push   ebx
c0016a6c:	53                   	push   ebx
c0016a6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a71:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016a74:	85 c0                	test   eax,eax
c0016a76:	74 5f                	je     c0016ad7 <sysCallTTYName(regs*)+0x6d>
c0016a78:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016a7b:	83 f8 02             	cmp    eax,0x2
c0016a7e:	77 3e                	ja     c0016abe <sysCallTTYName(regs*)+0x54>
c0016a80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016a88:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016a8e:	85 db                	test   ebx,ebx
c0016a90:	74 45                	je     c0016ad7 <sysCallTTYName(regs*)+0x6d>
c0016a92:	83 ec 0c             	sub    esp,0xc
c0016a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a97:	53                   	push   ebx
c0016a98:	ff 10                	call   DWORD PTR [eax]
c0016a9a:	83 c4 10             	add    esp,0x10
c0016a9d:	84 c0                	test   al,al
c0016a9f:	74 41                	je     c0016ae2 <sysCallTTYName(regs*)+0x78>
c0016aa1:	83 ec 08             	sub    esp,0x8
c0016aa4:	81 c3 82 00 00 00    	add    ebx,0x82
c0016aaa:	53                   	push   ebx
c0016aab:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016aae:	e8 8d 9c fe ff       	call   c0000740 <strcpy>
c0016ab3:	83 c4 10             	add    esp,0x10
c0016ab6:	31 c0                	xor    eax,eax
c0016ab8:	59                   	pop    ecx
c0016ab9:	31 d2                	xor    edx,edx
c0016abb:	5b                   	pop    ebx
c0016abc:	5e                   	pop    esi
c0016abd:	c3                   	ret    
c0016abe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016ac3:	74 bb                	je     c0016a80 <sysCallTTYName(regs*)+0x16>
c0016ac5:	83 ec 0c             	sub    esp,0xc
c0016ac8:	50                   	push   eax
c0016ac9:	e8 fd 50 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016ace:	83 c4 10             	add    esp,0x10
c0016ad1:	89 c3                	mov    ebx,eax
c0016ad3:	85 db                	test   ebx,ebx
c0016ad5:	75 bb                	jne    c0016a92 <sysCallTTYName(regs*)+0x28>
c0016ad7:	59                   	pop    ecx
c0016ad8:	b8 01 00 00 00       	mov    eax,0x1
c0016add:	31 d2                	xor    edx,edx
c0016adf:	5b                   	pop    ebx
c0016ae0:	5e                   	pop    esi
c0016ae1:	c3                   	ret    
c0016ae2:	59                   	pop    ecx
c0016ae3:	b8 02 00 00 00       	mov    eax,0x2
c0016ae8:	31 d2                	xor    edx,edx
c0016aea:	5b                   	pop    ebx
c0016aeb:	5e                   	pop    esi
c0016aec:	c3                   	ret    

c0016aed <sysCallUSleep(regs*)>:
c0016aed:	83 ec 1c             	sub    esp,0x1c
c0016af0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016af4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016af7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016afa:	6a 00                	push   0x0
c0016afc:	6a 64                	push   0x64
c0016afe:	52                   	push   edx
c0016aff:	50                   	push   eax
c0016b00:	e8 cf c1 00 00       	call   c0022cd4 <__udivdi3>
c0016b05:	83 c4 14             	add    esp,0x14
c0016b08:	50                   	push   eax
c0016b09:	e8 da 23 00 00       	call   c0018ee8 <milliTenthSleep(unsigned int)>
c0016b0e:	31 c0                	xor    eax,eax
c0016b10:	31 d2                	xor    edx,edx
c0016b12:	83 c4 1c             	add    esp,0x1c
c0016b15:	c3                   	ret    

c0016b16 <sysCallSpawn(regs*)>:
c0016b16:	56                   	push   esi
c0016b17:	53                   	push   ebx
c0016b18:	50                   	push   eax
c0016b19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b1d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b20:	85 c0                	test   eax,eax
c0016b22:	75 08                	jne    c0016b2c <sysCallSpawn(regs*)+0x16>
c0016b24:	59                   	pop    ecx
c0016b25:	31 c0                	xor    eax,eax
c0016b27:	31 d2                	xor    edx,edx
c0016b29:	5b                   	pop    ebx
c0016b2a:	5e                   	pop    esi
c0016b2b:	c3                   	ret    
c0016b2c:	83 ec 0c             	sub    esp,0xc
c0016b2f:	68 1f 07 00 00       	push   0x71f
c0016b34:	e8 22 32 ff ff       	call   c0009d5b <malloc>
c0016b39:	83 c4 10             	add    esp,0x10
c0016b3c:	89 c6                	mov    esi,eax
c0016b3e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016b41:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016b44:	85 c0                	test   eax,eax
c0016b46:	75 32                	jne    c0016b7a <sysCallSpawn(regs*)+0x64>
c0016b48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b50:	52                   	push   edx
c0016b51:	50                   	push   eax
c0016b52:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b55:	56                   	push   esi
c0016b56:	e8 85 1a 00 00       	call   c00185e0 <Process::Process(char const*, Process*, char**)>
c0016b5b:	83 c4 10             	add    esp,0x10
c0016b5e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016b65:	75 bd                	jne    c0016b24 <sysCallSpawn(regs*)+0xe>
c0016b67:	83 ec 0c             	sub    esp,0xc
c0016b6a:	56                   	push   esi
c0016b6b:	e8 5c 1f 00 00       	call   c0018acc <Process::createUserThread()>
c0016b70:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	99                   	cdq    
c0016b76:	59                   	pop    ecx
c0016b77:	5b                   	pop    ebx
c0016b78:	5e                   	pop    esi
c0016b79:	c3                   	ret    
c0016b7a:	31 c0                	xor    eax,eax
c0016b7c:	eb d2                	jmp    c0016b50 <sysCallSpawn(regs*)+0x3a>

c0016b7e <sysCallGetEnv(regs*)>:
c0016b7e:	57                   	push   edi
c0016b7f:	56                   	push   esi
c0016b80:	53                   	push   ebx
c0016b81:	83 ec 1c             	sub    esp,0x1c
c0016b84:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b8d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016b90:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016b93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016b96:	e8 96 e3 ff ff       	call   c0014f31 <Krnl::getProcessTotalEnvCount(Process*)>
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	39 c7                	cmp    edi,eax
c0016ba0:	7c 14                	jl     c0016bb6 <sysCallGetEnv(regs*)+0x38>
c0016ba2:	85 f6                	test   esi,esi
c0016ba4:	75 0b                	jne    c0016bb1 <sysCallGetEnv(regs*)+0x33>
c0016ba6:	83 c4 10             	add    esp,0x10
c0016ba9:	31 c0                	xor    eax,eax
c0016bab:	5b                   	pop    ebx
c0016bac:	31 d2                	xor    edx,edx
c0016bae:	5e                   	pop    esi
c0016baf:	5f                   	pop    edi
c0016bb0:	c3                   	ret    
c0016bb1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016bb4:	eb f0                	jmp    c0016ba6 <sysCallGetEnv(regs*)+0x28>
c0016bb6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bba:	52                   	push   edx
c0016bbb:	57                   	push   edi
c0016bbc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016bc2:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016bc5:	50                   	push   eax
c0016bc6:	e8 86 e3 ff ff       	call   c0014f51 <Krnl::getProcessEnvPair(Process*, int)>
c0016bcb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016bce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bd2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016bd6:	83 c4 0c             	add    esp,0xc
c0016bd9:	85 c9                	test   ecx,ecx
c0016bdb:	75 23                	jne    c0016c00 <sysCallGetEnv(regs*)+0x82>
c0016bdd:	83 ec 0c             	sub    esp,0xc
c0016be0:	50                   	push   eax
c0016be1:	e8 ba 9a fe ff       	call   c00006a0 <strlen>
c0016be6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016be9:	89 c3                	mov    ebx,eax
c0016beb:	e8 b0 9a fe ff       	call   c00006a0 <strlen>
c0016bf0:	83 c4 10             	add    esp,0x10
c0016bf3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016bf7:	83 c4 10             	add    esp,0x10
c0016bfa:	31 d2                	xor    edx,edx
c0016bfc:	5b                   	pop    ebx
c0016bfd:	5e                   	pop    esi
c0016bfe:	5f                   	pop    edi
c0016bff:	c3                   	ret    
c0016c00:	83 ec 08             	sub    esp,0x8
c0016c03:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016c06:	50                   	push   eax
c0016c07:	56                   	push   esi
c0016c08:	e8 33 9b fe ff       	call   c0000740 <strcpy>
c0016c0d:	58                   	pop    eax
c0016c0e:	5a                   	pop    edx
c0016c0f:	68 e3 66 02 c0       	push   0xc00266e3
c0016c14:	56                   	push   esi
c0016c15:	e8 66 9c fe ff       	call   c0000880 <strcat>
c0016c1a:	59                   	pop    ecx
c0016c1b:	5b                   	pop    ebx
c0016c1c:	57                   	push   edi
c0016c1d:	56                   	push   esi
c0016c1e:	e8 5d 9c fe ff       	call   c0000880 <strcat>
c0016c23:	83 c4 10             	add    esp,0x10
c0016c26:	e9 7b ff ff ff       	jmp    c0016ba6 <sysCallGetEnv(regs*)+0x28>

c0016c2b <sysAppSettings(regs*)>:
c0016c2b:	57                   	push   edi
c0016c2c:	56                   	push   esi
c0016c2d:	56                   	push   esi
c0016c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c32:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c35:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016c3b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016c40:	66 3d c0 09          	cmp    ax,0x9c0
c0016c44:	75 2e                	jne    c0016c74 <sysAppSettings(regs*)+0x49>
c0016c46:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016c4c:	83 e0 1f             	and    eax,0x1f
c0016c4f:	3c 01                	cmp    al,0x1
c0016c51:	74 2c                	je     c0016c7f <sysAppSettings(regs*)+0x54>
c0016c53:	3c 07                	cmp    al,0x7
c0016c55:	0f 84 b3 00 00 00    	je     c0016d0e <sysAppSettings(regs*)+0xe3>
c0016c5b:	84 c0                	test   al,al
c0016c5d:	0f 84 d2 00 00 00    	je     c0016d35 <sysAppSettings(regs*)+0x10a>
c0016c63:	3c 08                	cmp    al,0x8
c0016c65:	74 63                	je     c0016cca <sysAppSettings(regs*)+0x9f>
c0016c67:	59                   	pop    ecx
c0016c68:	0f b6 c0             	movzx  eax,al
c0016c6b:	5e                   	pop    esi
c0016c6c:	05 e8 03 00 00       	add    eax,0x3e8
c0016c71:	5f                   	pop    edi
c0016c72:	99                   	cdq    
c0016c73:	c3                   	ret    
c0016c74:	b8 01 00 00 00       	mov    eax,0x1
c0016c79:	59                   	pop    ecx
c0016c7a:	31 d2                	xor    edx,edx
c0016c7c:	5e                   	pop    esi
c0016c7d:	5f                   	pop    edi
c0016c7e:	c3                   	ret    
c0016c7f:	50                   	push   eax
c0016c80:	68 00 01 00 00       	push   0x100
c0016c85:	6a 00                	push   0x0
c0016c87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c8f:	83 c0 0c             	add    eax,0xc
c0016c92:	50                   	push   eax
c0016c93:	e8 ec 99 fe ff       	call   c0000684 <memset>
c0016c98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c9d:	b9 ff 00 00 00       	mov    ecx,0xff
c0016ca2:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016ca5:	83 c7 0c             	add    edi,0xc
c0016ca8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016caa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016caf:	5a                   	pop    edx
c0016cb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cb3:	59                   	pop    ecx
c0016cb4:	8d 50 0c             	lea    edx,[eax+0xc]
c0016cb7:	52                   	push   edx
c0016cb8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016cbe:	e8 31 40 ff ff       	call   c000acf4 <VgaText::setTitle(char*)>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	31 c0                	xor    eax,eax
c0016cc8:	eb af                	jmp    c0016c79 <sysAppSettings(regs*)+0x4e>
c0016cca:	83 ec 08             	sub    esp,0x8
c0016ccd:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016cd3:	83 e0 0f             	and    eax,0xf
c0016cd6:	50                   	push   eax
c0016cd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cdc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cdf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016ce5:	e8 fa 3f ff ff       	call   c000ace4 <VgaText::setTitleColour(VgaColour)>
c0016cea:	5f                   	pop    edi
c0016ceb:	58                   	pop    eax
c0016cec:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016cf2:	c1 e8 04             	shr    eax,0x4
c0016cf5:	83 e0 0f             	and    eax,0xf
c0016cf8:	50                   	push   eax
c0016cf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cfe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d01:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016d07:	e8 c8 3f ff ff       	call   c000acd4 <VgaText::setTitleTextColour(VgaColour)>
c0016d0c:	eb b5                	jmp    c0016cc3 <sysAppSettings(regs*)+0x98>
c0016d0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d16:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016d1c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016d22:	c0 e8 06             	shr    al,0x6
c0016d25:	83 e0 01             	and    eax,0x1
c0016d28:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016d2e:	31 c0                	xor    eax,eax
c0016d30:	e9 44 ff ff ff       	jmp    c0016c79 <sysAppSettings(regs*)+0x4e>
c0016d35:	b8 02 00 00 00       	mov    eax,0x2
c0016d3a:	e9 3a ff ff ff       	jmp    c0016c79 <sysAppSettings(regs*)+0x4e>

c0016d3f <sysSetFatAttrib(regs*)>:
c0016d3f:	57                   	push   edi
c0016d40:	56                   	push   esi
c0016d41:	53                   	push   ebx
c0016d42:	83 ec 1c             	sub    esp,0x1c
c0016d45:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016d49:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016d4c:	68 14 01 00 00       	push   0x114
c0016d51:	e8 05 30 ff ff       	call   c0009d5b <malloc>
c0016d56:	83 c4 0c             	add    esp,0xc
c0016d59:	89 c3                	mov    ebx,eax
c0016d5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d60:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016d63:	57                   	push   edi
c0016d64:	53                   	push   ebx
c0016d65:	e8 48 68 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016d6a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016d6d:	83 c4 0c             	add    esp,0xc
c0016d70:	0f b6 d4             	movzx  edx,ah
c0016d73:	0f b6 c0             	movzx  eax,al
c0016d76:	52                   	push   edx
c0016d77:	50                   	push   eax
c0016d78:	53                   	push   ebx
c0016d79:	e8 20 6b ff ff       	call   c000d89e <File::chfatattr(unsigned char, unsigned char)>
c0016d7e:	83 c4 10             	add    esp,0x10
c0016d81:	85 db                	test   ebx,ebx
c0016d83:	74 14                	je     c0016d99 <sysSetFatAttrib(regs*)+0x5a>
c0016d85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d89:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016d8b:	83 ec 0c             	sub    esp,0xc
c0016d8e:	53                   	push   ebx
c0016d8f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016d92:	83 c4 10             	add    esp,0x10
c0016d95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d99:	85 c0                	test   eax,eax
c0016d9b:	0f 95 c0             	setne  al
c0016d9e:	31 d2                	xor    edx,edx
c0016da0:	0f b6 c0             	movzx  eax,al
c0016da3:	f7 d8                	neg    eax
c0016da5:	83 d2 00             	adc    edx,0x0
c0016da8:	83 c4 10             	add    esp,0x10
c0016dab:	f7 da                	neg    edx
c0016dad:	5b                   	pop    ebx
c0016dae:	5e                   	pop    esi
c0016daf:	5f                   	pop    edi
c0016db0:	c3                   	ret    

c0016db1 <sysPipe(regs*)>:
c0016db1:	57                   	push   edi
c0016db2:	56                   	push   esi
c0016db3:	53                   	push   ebx
c0016db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016dbe:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016dc1:	6a 20                	push   0x20
c0016dc3:	e8 93 2f ff ff       	call   c0009d5b <malloc>
c0016dc8:	89 c3                	mov    ebx,eax
c0016dca:	58                   	pop    eax
c0016dcb:	5a                   	pop    edx
c0016dcc:	68 00 50 00 00       	push   0x5000
c0016dd1:	53                   	push   ebx
c0016dd2:	e8 95 3c ff ff       	call   c000aa6c <Pipe::Pipe(int)>
c0016dd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016dda:	e8 f7 4a ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c0016ddf:	89 07                	mov    DWORD PTR [edi],eax
c0016de1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016de4:	e8 ed 4a ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c0016de9:	83 c4 10             	add    esp,0x10
c0016dec:	89 06                	mov    DWORD PTR [esi],eax
c0016dee:	31 d2                	xor    edx,edx
c0016df0:	5b                   	pop    ebx
c0016df1:	31 c0                	xor    eax,eax
c0016df3:	5e                   	pop    esi
c0016df4:	5f                   	pop    edi
c0016df5:	c3                   	ret    

c0016df6 <sysGetUnixTime(regs*)>:
c0016df6:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0016dfb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e05:	e9 c8 72 ff ff       	jmp    c000e0d2 <Clock::timeInSecondsLocal()>

c0016e0a <string_ends_with(char const*, char const*)>:
c0016e0a:	57                   	push   edi
c0016e0b:	56                   	push   esi
c0016e0c:	53                   	push   ebx
c0016e0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e11:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016e15:	83 ec 0c             	sub    esp,0xc
c0016e18:	53                   	push   ebx
c0016e19:	e8 82 98 fe ff       	call   c00006a0 <strlen>
c0016e1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e21:	89 c6                	mov    esi,eax
c0016e23:	e8 78 98 fe ff       	call   c00006a0 <strlen>
c0016e28:	83 c4 10             	add    esp,0x10
c0016e2b:	39 c6                	cmp    esi,eax
c0016e2d:	7d 06                	jge    c0016e35 <string_ends_with(char const*, char const*)+0x2b>
c0016e2f:	5b                   	pop    ebx
c0016e30:	31 c0                	xor    eax,eax
c0016e32:	5e                   	pop    esi
c0016e33:	5f                   	pop    edi
c0016e34:	c3                   	ret    
c0016e35:	83 ec 08             	sub    esp,0x8
c0016e38:	29 c6                	sub    esi,eax
c0016e3a:	57                   	push   edi
c0016e3b:	01 f3                	add    ebx,esi
c0016e3d:	53                   	push   ebx
c0016e3e:	e8 89 99 fe ff       	call   c00007cc <strcmp>
c0016e43:	83 c4 10             	add    esp,0x10
c0016e46:	85 c0                	test   eax,eax
c0016e48:	5b                   	pop    ebx
c0016e49:	0f 94 c0             	sete   al
c0016e4c:	5e                   	pop    esi
c0016e4d:	0f b6 c0             	movzx  eax,al
c0016e50:	5f                   	pop    edi
c0016e51:	c3                   	ret    

c0016e52 <sysCallOpen(regs*)>:
c0016e52:	56                   	push   esi
c0016e53:	53                   	push   ebx
c0016e54:	81 ec 04 01 00 00    	sub    esp,0x104
c0016e5a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016e61:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016e64:	85 c9                	test   ecx,ecx
c0016e66:	0f 84 ad 01 00 00    	je     c0017019 <sysCallOpen(regs*)+0x1c7>
c0016e6c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e6f:	85 c0                	test   eax,eax
c0016e71:	0f 84 a2 01 00 00    	je     c0017019 <sysCallOpen(regs*)+0x1c7>
c0016e77:	52                   	push   edx
c0016e78:	68 e5 66 02 c0       	push   0xc00266e5
c0016e7d:	50                   	push   eax
c0016e7e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016e82:	56                   	push   esi
c0016e83:	e8 80 65 ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016e88:	89 34 24             	mov    DWORD PTR [esp],esi
c0016e8b:	e8 10 98 fe ff       	call   c00006a0 <strlen>
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	48                   	dec    eax
c0016e94:	74 1d                	je     c0016eb3 <sysCallOpen(regs*)+0x61>
c0016e96:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016e99:	eb 0f                	jmp    c0016eaa <sysCallOpen(regs*)+0x58>
c0016e9b:	80 fa 3a             	cmp    dl,0x3a
c0016e9e:	74 0f                	je     c0016eaf <sysCallOpen(regs*)+0x5d>
c0016ea0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016ea4:	48                   	dec    eax
c0016ea5:	74 0c                	je     c0016eb3 <sysCallOpen(regs*)+0x61>
c0016ea7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016eaa:	80 fa 2e             	cmp    dl,0x2e
c0016ead:	75 ec                	jne    c0016e9b <sysCallOpen(regs*)+0x49>
c0016eaf:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016eb3:	83 ec 08             	sub    esp,0x8
c0016eb6:	68 e9 66 02 c0       	push   0xc00266e9
c0016ebb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ebe:	e8 47 ff ff ff       	call   c0016e0a <string_ends_with(char const*, char const*)>
c0016ec3:	83 c4 10             	add    esp,0x10
c0016ec6:	85 c0                	test   eax,eax
c0016ec8:	74 1d                	je     c0016ee7 <sysCallOpen(regs*)+0x95>
c0016eca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016ecd:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016ed3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016eda:	81 c4 04 01 00 00    	add    esp,0x104
c0016ee0:	31 c0                	xor    eax,eax
c0016ee2:	31 d2                	xor    edx,edx
c0016ee4:	5b                   	pop    ebx
c0016ee5:	5e                   	pop    esi
c0016ee6:	c3                   	ret    
c0016ee7:	83 ec 08             	sub    esp,0x8
c0016eea:	68 ee 66 02 c0       	push   0xc00266ee
c0016eef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ef2:	e8 13 ff ff ff       	call   c0016e0a <string_ends_with(char const*, char const*)>
c0016ef7:	83 c4 10             	add    esp,0x10
c0016efa:	85 c0                	test   eax,eax
c0016efc:	75 cc                	jne    c0016eca <sysCallOpen(regs*)+0x78>
c0016efe:	83 ec 08             	sub    esp,0x8
c0016f01:	68 ea 66 02 c0       	push   0xc00266ea
c0016f06:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f09:	e8 be 98 fe ff       	call   c00007cc <strcmp>
c0016f0e:	83 c4 10             	add    esp,0x10
c0016f11:	85 c0                	test   eax,eax
c0016f13:	74 b5                	je     c0016eca <sysCallOpen(regs*)+0x78>
c0016f15:	83 ec 08             	sub    esp,0x8
c0016f18:	68 e9 66 02 c0       	push   0xc00266e9
c0016f1d:	56                   	push   esi
c0016f1e:	e8 e7 fe ff ff       	call   c0016e0a <string_ends_with(char const*, char const*)>
c0016f23:	83 c4 10             	add    esp,0x10
c0016f26:	85 c0                	test   eax,eax
c0016f28:	75 a0                	jne    c0016eca <sysCallOpen(regs*)+0x78>
c0016f2a:	83 ec 08             	sub    esp,0x8
c0016f2d:	68 f3 66 02 c0       	push   0xc00266f3
c0016f32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f35:	e8 d0 fe ff ff       	call   c0016e0a <string_ends_with(char const*, char const*)>
c0016f3a:	83 c4 10             	add    esp,0x10
c0016f3d:	85 c0                	test   eax,eax
c0016f3f:	0f 85 e7 00 00 00    	jne    c001702c <sysCallOpen(regs*)+0x1da>
c0016f45:	83 ec 08             	sub    esp,0x8
c0016f48:	68 f8 66 02 c0       	push   0xc00266f8
c0016f4d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f50:	e8 b5 fe ff ff       	call   c0016e0a <string_ends_with(char const*, char const*)>
c0016f55:	83 c4 10             	add    esp,0x10
c0016f58:	85 c0                	test   eax,eax
c0016f5a:	0f 85 cc 00 00 00    	jne    c001702c <sysCallOpen(regs*)+0x1da>
c0016f60:	83 ec 08             	sub    esp,0x8
c0016f63:	68 f4 66 02 c0       	push   0xc00266f4
c0016f68:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f6b:	e8 5c 98 fe ff       	call   c00007cc <strcmp>
c0016f70:	83 c4 10             	add    esp,0x10
c0016f73:	85 c0                	test   eax,eax
c0016f75:	0f 84 b1 00 00 00    	je     c001702c <sysCallOpen(regs*)+0x1da>
c0016f7b:	83 ec 08             	sub    esp,0x8
c0016f7e:	68 f3 66 02 c0       	push   0xc00266f3
c0016f83:	56                   	push   esi
c0016f84:	e8 81 fe ff ff       	call   c0016e0a <string_ends_with(char const*, char const*)>
c0016f89:	83 c4 10             	add    esp,0x10
c0016f8c:	85 c0                	test   eax,eax
c0016f8e:	0f 85 98 00 00 00    	jne    c001702c <sysCallOpen(regs*)+0x1da>
c0016f94:	83 ec 0c             	sub    esp,0xc
c0016f97:	68 14 01 00 00       	push   0x114
c0016f9c:	e8 ba 2d ff ff       	call   c0009d5b <malloc>
c0016fa1:	83 c4 0c             	add    esp,0xc
c0016fa4:	89 c6                	mov    esi,eax
c0016fa6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fab:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016fae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fb1:	56                   	push   esi
c0016fb2:	e8 fb 65 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016fb7:	83 c4 10             	add    esp,0x10
c0016fba:	85 f6                	test   esi,esi
c0016fbc:	74 5b                	je     c0017019 <sysCallOpen(regs*)+0x1c7>
c0016fbe:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016fc1:	0f b6 c2             	movzx  eax,dl
c0016fc4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016fc7:	89 d0                	mov    eax,edx
c0016fc9:	83 e0 01             	and    eax,0x1
c0016fcc:	f6 c2 02             	test   dl,0x2
c0016fcf:	74 03                	je     c0016fd4 <sysCallOpen(regs*)+0x182>
c0016fd1:	83 c8 02             	or     eax,0x2
c0016fd4:	f6 c2 04             	test   dl,0x4
c0016fd7:	74 03                	je     c0016fdc <sysCallOpen(regs*)+0x18a>
c0016fd9:	83 c8 04             	or     eax,0x4
c0016fdc:	f6 c2 08             	test   dl,0x8
c0016fdf:	74 03                	je     c0016fe4 <sysCallOpen(regs*)+0x192>
c0016fe1:	83 c8 0a             	or     eax,0xa
c0016fe4:	83 e2 10             	and    edx,0x10
c0016fe7:	74 03                	je     c0016fec <sysCallOpen(regs*)+0x19a>
c0016fe9:	83 c8 12             	or     eax,0x12
c0016fec:	83 ec 08             	sub    esp,0x8
c0016fef:	50                   	push   eax
c0016ff0:	56                   	push   esi
c0016ff1:	e8 96 66 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0016ff6:	83 c4 10             	add    esp,0x10
c0016ff9:	85 c0                	test   eax,eax
c0016ffb:	75 1c                	jne    c0017019 <sysCallOpen(regs*)+0x1c7>
c0016ffd:	83 ec 0c             	sub    esp,0xc
c0017000:	56                   	push   esi
c0017001:	e8 d0 48 ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c0017006:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017009:	83 c4 10             	add    esp,0x10
c001700c:	89 02                	mov    DWORD PTR [edx],eax
c001700e:	c1 f8 1f             	sar    eax,0x1f
c0017011:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017014:	e9 c1 fe ff ff       	jmp    c0016eda <sysCallOpen(regs*)+0x88>
c0017019:	81 c4 04 01 00 00    	add    esp,0x104
c001701f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017024:	ba ff ff ff ff       	mov    edx,0xffffffff
c0017029:	5b                   	pop    ebx
c001702a:	5e                   	pop    esi
c001702b:	c3                   	ret    
c001702c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001702f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017035:	e9 99 fe ff ff       	jmp    c0016ed3 <sysCallOpen(regs*)+0x81>

c001703a <Sys::loadSyscalls()>:
c001703a:	c7 05 e0 93 02 c0 ab 62 01 c0 	mov    DWORD PTR ds:0xc00293e0,0xc00162ab
c0017044:	c7 05 e4 93 02 c0 a0 5e 01 c0 	mov    DWORD PTR ds:0xc00293e4,0xc0015ea0
c001704e:	c7 05 e8 93 02 c0 91 60 01 c0 	mov    DWORD PTR ds:0xc00293e8,0xc0016091
c0017058:	c7 05 ec 93 02 c0 e1 61 01 c0 	mov    DWORD PTR ds:0xc00293ec,0xc00161e1
c0017062:	c7 05 f0 93 02 c0 29 60 01 c0 	mov    DWORD PTR ds:0xc00293f0,0xc0016029
c001706c:	c7 05 f4 93 02 c0 d7 5e 01 c0 	mov    DWORD PTR ds:0xc00293f4,0xc0015ed7
c0017076:	c7 05 f8 93 02 c0 b8 5e 01 c0 	mov    DWORD PTR ds:0xc00293f8,0xc0015eb8
c0017080:	c7 05 fc 93 02 c0 e6 60 01 c0 	mov    DWORD PTR ds:0xc00293fc,0xc00160e6
c001708a:	c7 05 04 94 02 c0 6e 67 01 c0 	mov    DWORD PTR ds:0xc0029404,0xc001676e
c0017094:	c7 05 00 94 02 c0 52 6e 01 c0 	mov    DWORD PTR ds:0xc0029400,0xc0016e52
c001709e:	c7 05 08 94 02 c0 ce 67 01 c0 	mov    DWORD PTR ds:0xc0029408,0xc00167ce
c00170a8:	c7 05 0c 94 02 c0 b1 64 01 c0 	mov    DWORD PTR ds:0xc002940c,0xc00164b1
c00170b2:	c7 05 10 94 02 c0 e3 62 01 c0 	mov    DWORD PTR ds:0xc0029410,0xc00162e3
c00170bc:	c7 05 14 94 02 c0 e8 62 01 c0 	mov    DWORD PTR ds:0xc0029414,0xc00162e8
c00170c6:	c7 05 18 94 02 c0 97 68 01 c0 	mov    DWORD PTR ds:0xc0029418,0xc0016897
c00170d0:	c7 05 1c 94 02 c0 43 68 01 c0 	mov    DWORD PTR ds:0xc002941c,0xc0016843
c00170da:	c7 05 20 94 02 c0 8a 65 01 c0 	mov    DWORD PTR ds:0xc0029420,0xc001658a
c00170e4:	c7 05 24 94 02 c0 e1 65 01 c0 	mov    DWORD PTR ds:0xc0029424,0xc00165e1
c00170ee:	c7 05 28 94 02 c0 4d 66 01 c0 	mov    DWORD PTR ds:0xc0029428,0xc001664d
c00170f8:	c7 05 2c 94 02 c0 ed 62 01 c0 	mov    DWORD PTR ds:0xc002942c,0xc00162ed
c0017102:	c7 05 30 94 02 c0 07 69 01 c0 	mov    DWORD PTR ds:0xc0029430,0xc0016907
c001710c:	c7 05 34 94 02 c0 21 69 01 c0 	mov    DWORD PTR ds:0xc0029434,0xc0016921
c0017116:	c7 05 38 94 02 c0 21 69 01 c0 	mov    DWORD PTR ds:0xc0029438,0xc0016921
c0017120:	c7 05 3c 94 02 c0 56 69 01 c0 	mov    DWORD PTR ds:0xc002943c,0xc0016956
c001712a:	c7 05 40 94 02 c0 ba 69 01 c0 	mov    DWORD PTR ds:0xc0029440,0xc00169ba
c0017134:	c7 05 44 94 02 c0 f7 62 01 c0 	mov    DWORD PTR ds:0xc0029444,0xc00162f7
c001713e:	c7 05 48 94 02 c0 1e 6a 01 c0 	mov    DWORD PTR ds:0xc0029448,0xc0016a1e
c0017148:	c7 05 4c 94 02 c0 6e 64 01 c0 	mov    DWORD PTR ds:0xc002944c,0xc001646e
c0017152:	c7 05 50 94 02 c0 6a 6a 01 c0 	mov    DWORD PTR ds:0xc0029450,0xc0016a6a
c001715c:	c7 05 54 94 02 c0 30 65 01 c0 	mov    DWORD PTR ds:0xc0029454,0xc0016530
c0017166:	c7 05 58 94 02 c0 ed 6a 01 c0 	mov    DWORD PTR ds:0xc0029458,0xc0016aed
c0017170:	c7 05 5c 94 02 c0 bf 66 01 c0 	mov    DWORD PTR ds:0xc002945c,0xc00166bf
c001717a:	c7 05 60 94 02 c0 16 6b 01 c0 	mov    DWORD PTR ds:0xc0029460,0xc0016b16
c0017184:	c7 05 64 94 02 c0 7e 6b 01 c0 	mov    DWORD PTR ds:0xc0029464,0xc0016b7e
c001718e:	c7 05 68 94 02 c0 2b 6c 01 c0 	mov    DWORD PTR ds:0xc0029468,0xc0016c2b
c0017198:	c7 05 6c 94 02 c0 07 63 01 c0 	mov    DWORD PTR ds:0xc002946c,0xc0016307
c00171a2:	c7 05 70 94 02 c0 71 63 01 c0 	mov    DWORD PTR ds:0xc0029470,0xc0016371
c00171ac:	c7 05 74 94 02 c0 bb 63 01 c0 	mov    DWORD PTR ds:0xc0029474,0xc00163bb
c00171b6:	c7 05 78 94 02 c0 3f 6d 01 c0 	mov    DWORD PTR ds:0xc0029478,0xc0016d3f
c00171c0:	c7 05 7c 94 02 c0 3c 69 01 c0 	mov    DWORD PTR ds:0xc002947c,0xc001693c
c00171ca:	c7 05 80 94 02 c0 10 64 01 c0 	mov    DWORD PTR ds:0xc0029480,0xc0016410
c00171d4:	c7 05 84 94 02 c0 b1 6d 01 c0 	mov    DWORD PTR ds:0xc0029484,0xc0016db1
c00171de:	c7 05 88 94 02 c0 f6 6d 01 c0 	mov    DWORD PTR ds:0xc0029488,0xc0016df6
c00171e8:	c7 05 8c 94 02 c0 81 5f 01 c0 	mov    DWORD PTR ds:0xc002948c,0xc0015f81
c00171f2:	c7 05 90 94 02 c0 02 61 01 c0 	mov    DWORD PTR ds:0xc0029490,0xc0016102
c00171fc:	c7 05 94 94 02 c0 97 61 01 c0 	mov    DWORD PTR ds:0xc0029494,0xc0016197
c0017206:	c7 05 98 94 02 c0 6a 5e 01 c0 	mov    DWORD PTR ds:0xc0029498,0xc0015e6a
c0017210:	c7 05 9c 94 02 c0 49 62 01 c0 	mov    DWORD PTR ds:0xc002949c,0xc0016249
c001721a:	c7 05 a0 94 02 c0 e3 5e 01 c0 	mov    DWORD PTR ds:0xc00294a0,0xc0015ee3
c0017224:	c7 05 a4 94 02 c0 fd 5e 01 c0 	mov    DWORD PTR ds:0xc00294a4,0xc0015efd
c001722e:	c3                   	ret    

c001722f <Sys::systemCall(regs*, void*)>:
c001722f:	53                   	push   ebx
c0017230:	83 ec 08             	sub    esp,0x8
c0017233:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017237:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001723a:	83 f8 7f             	cmp    eax,0x7f
c001723d:	77 16                	ja     c0017255 <Sys::systemCall(regs*, void*)+0x26>
c001723f:	8b 14 85 e0 93 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6c20]
c0017246:	85 d2                	test   edx,edx
c0017248:	74 0b                	je     c0017255 <Sys::systemCall(regs*, void*)+0x26>
c001724a:	83 ec 0c             	sub    esp,0xc
c001724d:	53                   	push   ebx
c001724e:	ff d2                	call   edx
c0017250:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017253:	eb 0d                	jmp    c0017262 <Sys::systemCall(regs*, void*)+0x33>
c0017255:	52                   	push   edx
c0017256:	52                   	push   edx
c0017257:	50                   	push   eax
c0017258:	68 fd 66 02 c0       	push   0xc00266fd
c001725d:	e8 e5 5d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0017262:	83 c4 10             	add    esp,0x10
c0017265:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001726a:	31 d2                	xor    edx,edx
c001726c:	83 c4 08             	add    esp,0x8
c001726f:	5b                   	pop    ebx
c0017270:	c3                   	ret    

c0017271 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017271:	55                   	push   ebp
c0017272:	57                   	push   edi
c0017273:	56                   	push   esi
c0017274:	53                   	push   ebx
c0017275:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001727b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017282:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0017289:	85 c0                	test   eax,eax
c001728b:	0f 95 c1             	setne  cl
c001728e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0017296:	0f 94 c2             	sete   dl
c0017299:	84 d1                	test   cl,dl
c001729b:	74 23                	je     c00172c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001729d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00172a3:	74 1b                	je     c00172c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00172a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00172ab:	89 da                	mov    edx,ebx
c00172ad:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00172b3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00172b9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00172c0:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00172c7:	05 ff 0f 00 00       	add    eax,0xfff
c00172cc:	83 ec 0c             	sub    esp,0xc
c00172cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172d3:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00172d9:	c1 e8 0c             	shr    eax,0xc
c00172dc:	89 fe                	mov    esi,edi
c00172de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00172e2:	c1 ee 0c             	shr    esi,0xc
c00172e5:	6a 01                	push   0x1
c00172e7:	e8 35 4a ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c00172ec:	89 c5                	mov    ebp,eax
c00172ee:	58                   	pop    eax
c00172ef:	5a                   	pop    edx
c00172f0:	56                   	push   esi
c00172f1:	68 11 67 02 c0       	push   0xc0026711
c00172f6:	e8 4c 5d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00172fb:	59                   	pop    ecx
c00172fc:	58                   	pop    eax
c00172fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017301:	68 23 67 02 c0       	push   0xc0026723
c0017306:	e8 3c 5d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001730b:	83 c4 10             	add    esp,0x10
c001730e:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0017314:	0f 86 31 01 00 00    	jbe    c001744b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001731a:	c1 e6 0c             	shl    esi,0xc
c001731d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017320:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0017323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017327:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001732e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017331:	01 df                	add    edi,ebx
c0017333:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0017336:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001733a:	0f 84 08 01 00 00    	je     c0017448 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0017340:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0017346:	76 05                	jbe    c001734d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0017348:	bf 00 10 00 00       	mov    edi,0x1000
c001734d:	83 ec 0c             	sub    esp,0xc
c0017350:	31 d2                	xor    edx,edx
c0017352:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017359:	8b 08                	mov    ecx,DWORD PTR [eax]
c001735b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001735f:	50                   	push   eax
c0017360:	8d 74 24 30          	lea    esi,[esp+0x30]
c0017364:	56                   	push   esi
c0017365:	52                   	push   edx
c0017366:	57                   	push   edi
c0017367:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001736e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017371:	83 c4 20             	add    esp,0x20
c0017374:	85 c0                	test   eax,eax
c0017376:	74 0a                	je     c0017382 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0017378:	53                   	push   ebx
c0017379:	53                   	push   ebx
c001737a:	50                   	push   eax
c001737b:	68 35 67 02 c0       	push   0xc0026735
c0017380:	eb 0f                	jmp    c0017391 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0017382:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017386:	74 20                	je     c00173a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0017388:	51                   	push   ecx
c0017389:	51                   	push   ecx
c001738a:	6a 00                	push   0x0
c001738c:	68 60 67 02 c0       	push   0xc0026760
c0017391:	e8 b1 5c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0017396:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017399:	e8 b3 4c ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c001739e:	83 c4 10             	add    esp,0x10
c00173a1:	31 c0                	xor    eax,eax
c00173a3:	e9 68 01 00 00       	jmp    c0017510 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00173a8:	fa                   	cli    
c00173a9:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c00173af:	e8 5e 30 ff ff       	call   c000a412 <Phys::allocatePage()>
c00173b4:	6a 07                	push   0x7
c00173b6:	89 c7                	mov    edi,eax
c00173b8:	55                   	push   ebp
c00173b9:	50                   	push   eax
c00173ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00173c2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00173c8:	e8 fb 4f ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00173cd:	83 c4 0c             	add    esp,0xc
c00173d0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00173d7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00173dd:	6a 00                	push   0x0
c00173df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00173e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00173ed:	e8 30 4e ff ff       	call   c000c222 <VAS::mapOtherVASIn(bool, VAS*)>
c00173f2:	58                   	pop    eax
c00173f3:	5a                   	pop    edx
c00173f4:	68 07 0c 00 00       	push   0xc07
c00173f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00173fd:	57                   	push   edi
c00173fe:	89 ef                	mov    edi,ebp
c0017400:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0017407:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001740d:	6a 00                	push   0x0
c001740f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017414:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017417:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001741d:	e8 62 53 ff ff       	call   c000c784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017422:	b9 00 10 00 00       	mov    ecx,0x1000
c0017427:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017429:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c001742e:	83 c4 20             	add    esp,0x20
c0017431:	48                   	dec    eax
c0017432:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0017437:	85 c0                	test   eax,eax
c0017439:	75 01                	jne    c001743c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001743b:	fb                   	sti    
c001743c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0017443:	e9 df fe ff ff       	jmp    c0017327 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0017448:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001744b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0017453:	0f 86 a9 00 00 00    	jbe    c0017502 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017459:	fa                   	cli    
c001745a:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0017460:	51                   	push   ecx
c0017461:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0017468:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001746e:	6a 00                	push   0x0
c0017470:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017475:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017478:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001747e:	e8 9f 4d ff ff       	call   c000c222 <VAS::mapOtherVASIn(bool, VAS*)>
c0017483:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017487:	c1 e6 0c             	shl    esi,0xc
c001748a:	01 de                	add    esi,ebx
c001748c:	83 c4 10             	add    esp,0x10
c001748f:	39 de                	cmp    esi,ebx
c0017491:	74 61                	je     c00174f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0017493:	e8 7a 2f ff ff       	call   c000a412 <Phys::allocatePage()>
c0017498:	6a 07                	push   0x7
c001749a:	89 c7                	mov    edi,eax
c001749c:	55                   	push   ebp
c001749d:	50                   	push   eax
c001749e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00174a6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174ac:	e8 17 4f ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00174b1:	58                   	pop    eax
c00174b2:	5a                   	pop    edx
c00174b3:	68 07 0c 00 00       	push   0xc07
c00174b8:	53                   	push   ebx
c00174b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00174bf:	57                   	push   edi
c00174c0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00174c7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174cd:	6a 00                	push   0x0
c00174cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00174d7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174dd:	e8 a2 52 ff ff       	call   c000c784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00174e2:	83 c4 1c             	add    esp,0x1c
c00174e5:	68 00 10 00 00       	push   0x1000
c00174ea:	6a 00                	push   0x0
c00174ec:	55                   	push   ebp
c00174ed:	e8 92 91 fe ff       	call   c0000684 <memset>
c00174f2:	eb 98                	jmp    c001748c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00174f4:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c00174f9:	48                   	dec    eax
c00174fa:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c00174ff:	75 01                	jne    c0017502 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017501:	fb                   	sti    
c0017502:	83 ec 0c             	sub    esp,0xc
c0017505:	55                   	push   ebp
c0017506:	e8 46 4b ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	b0 01                	mov    al,0x1
c0017510:	81 c4 2c 10 00 00    	add    esp,0x102c
c0017516:	5b                   	pop    ebx
c0017517:	5e                   	pop    esi
c0017518:	5f                   	pop    edi
c0017519:	5d                   	pop    ebp
c001751a:	c3                   	ret    

c001751b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001751b:	55                   	push   ebp
c001751c:	57                   	push   edi
c001751d:	56                   	push   esi
c001751e:	53                   	push   ebx
c001751f:	83 ec 48             	sub    esp,0x48
c0017522:	68 14 01 00 00       	push   0x114
c0017527:	e8 2f 28 ff ff       	call   c0009d5b <malloc>
c001752c:	83 c4 0c             	add    esp,0xc
c001752f:	89 c6                	mov    esi,eax
c0017531:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017535:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017539:	50                   	push   eax
c001753a:	e8 73 60 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001753f:	58                   	pop    eax
c0017540:	5a                   	pop    edx
c0017541:	6a 01                	push   0x1
c0017543:	56                   	push   esi
c0017544:	e8 43 61 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0017549:	83 c4 10             	add    esp,0x10
c001754c:	85 c0                	test   eax,eax
c001754e:	0f 85 47 01 00 00    	jne    c001769b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017554:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001755c:	83 ec 0c             	sub    esp,0xc
c001755f:	6a 34                	push   0x34
c0017561:	e8 f5 27 ff ff       	call   c0009d5b <malloc>
c0017566:	89 c3                	mov    ebx,eax
c0017568:	58                   	pop    eax
c0017569:	8b 06                	mov    eax,DWORD PTR [esi]
c001756b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001756f:	57                   	push   edi
c0017570:	53                   	push   ebx
c0017571:	6a 00                	push   0x0
c0017573:	6a 34                	push   0x34
c0017575:	56                   	push   esi
c0017576:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017579:	83 c4 20             	add    esp,0x20
c001757c:	85 c0                	test   eax,eax
c001757e:	0f 85 17 01 00 00    	jne    c001769b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017584:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001758a:	0f 85 0b 01 00 00    	jne    c001769b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017590:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017593:	85 c0                	test   eax,eax
c0017595:	0f 84 00 01 00 00    	je     c001769b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001759b:	31 d2                	xor    edx,edx
c001759d:	55                   	push   ebp
c001759e:	52                   	push   edx
c001759f:	50                   	push   eax
c00175a0:	56                   	push   esi
c00175a1:	e8 a4 61 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c00175a6:	83 c4 10             	add    esp,0x10
c00175a9:	85 c0                	test   eax,eax
c00175ab:	0f 85 ea 00 00 00    	jne    c001769b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175b1:	83 ec 0c             	sub    esp,0xc
c00175b4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00175b7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175bf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175c3:	0f af c2             	imul   eax,edx
c00175c6:	50                   	push   eax
c00175c7:	e8 8f 27 ff ff       	call   c0009d5b <malloc>
c00175cc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00175ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175d9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175dd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175e1:	0f af c2             	imul   eax,edx
c00175e4:	99                   	cdq    
c00175e5:	52                   	push   edx
c00175e6:	50                   	push   eax
c00175e7:	56                   	push   esi
c00175e8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175eb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00175ee:	83 c4 20             	add    esp,0x20
c00175f1:	85 c0                	test   eax,eax
c00175f3:	0f 84 a2 00 00 00    	je     c001769b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175f9:	31 d2                	xor    edx,edx
c00175fb:	51                   	push   ecx
c00175fc:	52                   	push   edx
c00175fd:	50                   	push   eax
c00175fe:	56                   	push   esi
c00175ff:	e8 46 61 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017604:	83 c4 10             	add    esp,0x10
c0017607:	85 c0                	test   eax,eax
c0017609:	0f 85 8c 00 00 00    	jne    c001769b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001760f:	83 ec 0c             	sub    esp,0xc
c0017612:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017616:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001761a:	31 ed                	xor    ebp,ebp
c001761c:	0f af c2             	imul   eax,edx
c001761f:	50                   	push   eax
c0017620:	e8 36 27 ff ff       	call   c0009d5b <malloc>
c0017625:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017627:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001762b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001762e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017632:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017636:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001763a:	0f af c2             	imul   eax,edx
c001763d:	99                   	cdq    
c001763e:	52                   	push   edx
c001763f:	50                   	push   eax
c0017640:	56                   	push   esi
c0017641:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017644:	83 c4 20             	add    esp,0x20
c0017647:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001764f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017653:	0f 86 80 00 00 00    	jbe    c00176d9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017659:	0f b7 fd             	movzx  edi,bp
c001765c:	c1 e7 05             	shl    edi,0x5
c001765f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017663:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017666:	75 6b                	jne    c00176d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017668:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001766b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001766f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017672:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017676:	52                   	push   edx
c0017677:	31 d2                	xor    edx,edx
c0017679:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001767c:	52                   	push   edx
c001767d:	50                   	push   eax
c001767e:	56                   	push   esi
c001767f:	e8 c6 60 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017684:	83 c4 10             	add    esp,0x10
c0017687:	85 c0                	test   eax,eax
c0017689:	74 17                	je     c00176a2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001768b:	83 ec 0c             	sub    esp,0xc
c001768e:	68 8c 67 02 c0       	push   0xc002678c
c0017693:	e8 af 59 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0017698:	83 c4 10             	add    esp,0x10
c001769b:	31 c0                	xor    eax,eax
c001769d:	e9 87 00 00 00       	jmp    c0017729 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00176a2:	83 ec 0c             	sub    esp,0xc
c00176a5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00176a8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00176ab:	50                   	push   eax
c00176ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00176b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176b4:	56                   	push   esi
c00176b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00176b9:	e8 b3 fb ff ff       	call   c0017271 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00176be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176c2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00176c6:	83 c4 20             	add    esp,0x20
c00176c9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00176cd:	73 04                	jae    c00176d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00176cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176d3:	45                   	inc    ebp
c00176d4:	e9 76 ff ff ff       	jmp    c001764f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00176d9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00176dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176e5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00176eb:	83 ec 0c             	sub    esp,0xc
c00176ee:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00176f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176f9:	05 00 10 00 00       	add    eax,0x1000
c00176fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017701:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017705:	e8 61 26 ff ff       	call   c0009d6b <free>
c001770a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001770d:	e8 59 26 ff ff       	call   c0009d6b <free>
c0017712:	58                   	pop    eax
c0017713:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017717:	e8 4f 26 ff ff       	call   c0009d6b <free>
c001771c:	89 34 24             	mov    DWORD PTR [esp],esi
c001771f:	e8 c6 5f ff ff       	call   c000d6ea <File::close()>
c0017724:	83 c4 10             	add    esp,0x10
c0017727:	b0 01                	mov    al,0x1
c0017729:	83 c4 3c             	add    esp,0x3c
c001772c:	5b                   	pop    ebx
c001772d:	5e                   	pop    esi
c001772e:	5f                   	pop    edi
c001772f:	5d                   	pop    ebp
c0017730:	c3                   	ret    

c0017731 <Thr::runtimeReferenceHelper()>:
c0017731:	83 ec 18             	sub    esp,0x18
c0017734:	68 94 67 02 c0       	push   0xc0026794
c0017739:	e8 09 59 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001773e:	fa                   	cli    
c001773f:	83 c4 10             	add    esp,0x10
c0017742:	eb fe                	jmp    c0017742 <Thr::runtimeReferenceHelper()+0x11>

c0017744 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017744:	57                   	push   edi
c0017745:	56                   	push   esi
c0017746:	53                   	push   ebx
c0017747:	31 db                	xor    ebx,ebx
c0017749:	39 1d 80 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d80,ebx
c001774f:	7e 3c                	jle    c001778d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017751:	8b 34 9d 00 9d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6300]
c0017758:	31 ff                	xor    edi,edi
c001775a:	39 3c 9d 00 9c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6400],edi
c0017761:	7e 27                	jle    c001778a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017763:	50                   	push   eax
c0017764:	50                   	push   eax
c0017765:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017769:	8b 06                	mov    eax,DWORD PTR [esi]
c001776b:	03 04 9d 80 9c 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6380]
c0017772:	50                   	push   eax
c0017773:	e8 54 90 fe ff       	call   c00007cc <strcmp>
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	85 c0                	test   eax,eax
c001777d:	75 05                	jne    c0017784 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001777f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017782:	eb 0b                	jmp    c001778f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017784:	83 c6 10             	add    esi,0x10
c0017787:	47                   	inc    edi
c0017788:	eb d0                	jmp    c001775a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001778a:	43                   	inc    ebx
c001778b:	eb bc                	jmp    c0017749 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001778d:	31 c0                	xor    eax,eax
c001778f:	5b                   	pop    ebx
c0017790:	5e                   	pop    esi
c0017791:	5f                   	pop    edi
c0017792:	c3                   	ret    

c0017793 <Thr::loadKernelSymbolTable(char const*)>:
c0017793:	55                   	push   ebp
c0017794:	57                   	push   edi
c0017795:	56                   	push   esi
c0017796:	53                   	push   ebx
c0017797:	83 ec 68             	sub    esp,0x68
c001779a:	8b 35 d0 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029dd0
c00177a0:	68 14 01 00 00       	push   0x114
c00177a5:	e8 b1 25 ff ff       	call   c0009d5b <malloc>
c00177aa:	83 c4 0c             	add    esp,0xc
c00177ad:	89 c3                	mov    ebx,eax
c00177af:	56                   	push   esi
c00177b0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00177b4:	50                   	push   eax
c00177b5:	e8 f8 5d ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c00177ba:	5e                   	pop    esi
c00177bb:	5f                   	pop    edi
c00177bc:	6a 01                	push   0x1
c00177be:	53                   	push   ebx
c00177bf:	e8 c8 5e ff ff       	call   c000d68c <File::open(FileOpenMode)>
c00177c4:	83 c4 10             	add    esp,0x10
c00177c7:	85 c0                	test   eax,eax
c00177c9:	74 0a                	je     c00177d5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00177cb:	83 ec 0c             	sub    esp,0xc
c00177ce:	68 b6 67 02 c0       	push   0xc00267b6
c00177d3:	eb 34                	jmp    c0017809 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00177d5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00177dd:	83 ec 0c             	sub    esp,0xc
c00177e0:	6a 34                	push   0x34
c00177e2:	e8 74 25 ff ff       	call   c0009d5b <malloc>
c00177e7:	59                   	pop    ecx
c00177e8:	89 c7                	mov    edi,eax
c00177ea:	8d 74 24 34          	lea    esi,[esp+0x34]
c00177ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00177f0:	56                   	push   esi
c00177f1:	57                   	push   edi
c00177f2:	6a 00                	push   0x0
c00177f4:	6a 34                	push   0x34
c00177f6:	53                   	push   ebx
c00177f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00177fa:	83 c4 20             	add    esp,0x20
c00177fd:	85 c0                	test   eax,eax
c00177ff:	74 17                	je     c0017818 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017801:	83 ec 0c             	sub    esp,0xc
c0017804:	68 cd 67 02 c0       	push   0xc00267cd
c0017809:	e8 d7 d7 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001780e:	83 c4 10             	add    esp,0x10
c0017811:	31 c0                	xor    eax,eax
c0017813:	e9 31 02 00 00       	jmp    c0017a49 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017818:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001781e:	75 e1                	jne    c0017801 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017820:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017823:	85 c0                	test   eax,eax
c0017825:	74 da                	je     c0017801 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017827:	52                   	push   edx
c0017828:	31 d2                	xor    edx,edx
c001782a:	52                   	push   edx
c001782b:	50                   	push   eax
c001782c:	53                   	push   ebx
c001782d:	e8 18 5f ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017832:	83 c4 10             	add    esp,0x10
c0017835:	85 c0                	test   eax,eax
c0017837:	75 c8                	jne    c0017801 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017839:	83 ec 0c             	sub    esp,0xc
c001783c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017840:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017844:	31 ed                	xor    ebp,ebp
c0017846:	0f af c2             	imul   eax,edx
c0017849:	50                   	push   eax
c001784a:	e8 0c 25 ff ff       	call   c0009d5b <malloc>
c001784f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017851:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017855:	89 34 24             	mov    DWORD PTR [esp],esi
c0017858:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001785c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017860:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017864:	0f af c2             	imul   eax,edx
c0017867:	99                   	cdq    
c0017868:	52                   	push   edx
c0017869:	50                   	push   eax
c001786a:	53                   	push   ebx
c001786b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001786e:	83 c4 20             	add    esp,0x20
c0017871:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017879:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017881:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017889:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017891:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017895:	0f 86 aa 00 00 00    	jbe    c0017945 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001789b:	0f b7 f5             	movzx  esi,bp
c001789e:	6b f6 28             	imul   esi,esi,0x28
c00178a1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00178a5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00178a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178ac:	50                   	push   eax
c00178ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00178b1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00178b5:	8b 16                	mov    edx,DWORD PTR [esi]
c00178b7:	6b c0 28             	imul   eax,eax,0x28
c00178ba:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00178be:	89 d0                	mov    eax,edx
c00178c0:	31 d2                	xor    edx,edx
c00178c2:	52                   	push   edx
c00178c3:	50                   	push   eax
c00178c4:	53                   	push   ebx
c00178c5:	e8 80 5e ff ff       	call   c000d74a <File::seek(unsigned long long)>
c00178ca:	83 c4 0c             	add    esp,0xc
c00178cd:	6a 20                	push   0x20
c00178cf:	6a 00                	push   0x0
c00178d1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00178d5:	52                   	push   edx
c00178d6:	e8 a9 8d fe ff       	call   c0000684 <memset>
c00178db:	58                   	pop    eax
c00178dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00178de:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00178e2:	51                   	push   ecx
c00178e3:	8d 54 24 40          	lea    edx,[esp+0x40]
c00178e7:	52                   	push   edx
c00178e8:	6a 00                	push   0x0
c00178ea:	6a 1f                	push   0x1f
c00178ec:	53                   	push   ebx
c00178ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00178f0:	83 c4 18             	add    esp,0x18
c00178f3:	68 e4 67 02 c0       	push   0xc00267e4
c00178f8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00178fc:	52                   	push   edx
c00178fd:	e8 ca 8e fe ff       	call   c00007cc <strcmp>
c0017902:	83 c4 10             	add    esp,0x10
c0017905:	85 c0                	test   eax,eax
c0017907:	75 0f                	jne    c0017918 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017909:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001790c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017910:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017918:	50                   	push   eax
c0017919:	50                   	push   eax
c001791a:	68 ec 67 02 c0       	push   0xc00267ec
c001791f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017923:	50                   	push   eax
c0017924:	e8 a3 8e fe ff       	call   c00007cc <strcmp>
c0017929:	83 c4 10             	add    esp,0x10
c001792c:	85 c0                	test   eax,eax
c001792e:	75 0f                	jne    c001793f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017930:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017933:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017937:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001793b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001793f:	45                   	inc    ebp
c0017940:	e9 4c ff ff ff       	jmp    c0017891 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017945:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001794a:	75 10                	jne    c001795c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001794c:	83 ec 0c             	sub    esp,0xc
c001794f:	68 f4 67 02 c0       	push   0xc00267f4
c0017954:	e8 8c d6 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0017959:	83 c4 10             	add    esp,0x10
c001795c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017961:	75 10                	jne    c0017973 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017963:	83 ec 0c             	sub    esp,0xc
c0017966:	68 f4 67 02 c0       	push   0xc00267f4
c001796b:	e8 75 d6 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0017970:	83 c4 10             	add    esp,0x10
c0017973:	31 d2                	xor    edx,edx
c0017975:	50                   	push   eax
c0017976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001797a:	52                   	push   edx
c001797b:	50                   	push   eax
c001797c:	53                   	push   ebx
c001797d:	e8 c8 5d ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017982:	5a                   	pop    edx
c0017983:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017987:	e8 cf 23 ff ff       	call   c0009d5b <malloc>
c001798c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017990:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017994:	31 c9                	xor    ecx,ecx
c0017996:	5e                   	pop    esi
c0017997:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017999:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001799d:	55                   	push   ebp
c001799e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179a2:	51                   	push   ecx
c00179a3:	52                   	push   edx
c00179a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00179a8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00179ac:	53                   	push   ebx
c00179ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179b0:	83 c4 14             	add    esp,0x14
c00179b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179b7:	e8 9f 23 ff ff       	call   c0009d5b <malloc>
c00179bc:	89 c6                	mov    esi,eax
c00179be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179c3:	56                   	push   esi
c00179c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00179c8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00179cc:	51                   	push   ecx
c00179cd:	52                   	push   edx
c00179ce:	53                   	push   ebx
c00179cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179d6:	8b 15 80 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d80
c00179dc:	83 c4 1c             	add    esp,0x1c
c00179df:	c1 e8 04             	shr    eax,0x4
c00179e2:	89 04 95 00 9c 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6400],eax
c00179e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179ed:	31 d2                	xor    edx,edx
c00179ef:	52                   	push   edx
c00179f0:	50                   	push   eax
c00179f1:	53                   	push   ebx
c00179f2:	e8 53 5d ff ff       	call   c000d74a <File::seek(unsigned long long)>
c00179f7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00179f9:	31 d2                	xor    edx,edx
c00179fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179fe:	56                   	push   esi
c00179ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a03:	52                   	push   edx
c0017a04:	50                   	push   eax
c0017a05:	53                   	push   ebx
c0017a06:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a09:	83 c4 14             	add    esp,0x14
c0017a0c:	53                   	push   ebx
c0017a0d:	e8 d8 5c ff ff       	call   c000d6ea <File::close()>
c0017a12:	5d                   	pop    ebp
c0017a13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a17:	e8 4f 23 ff ff       	call   c0009d6b <free>
c0017a1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017a1f:	e8 47 23 ff ff       	call   c0009d6b <free>
c0017a24:	a1 80 9d 02 c0       	mov    eax,ds:0xc0029d80
c0017a29:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a2d:	8d 50 01             	lea    edx,[eax+0x1]
c0017a30:	89 0c 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],ecx
c0017a37:	89 34 85 80 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6380],esi
c0017a3e:	89 15 80 9d 02 c0    	mov    DWORD PTR ds:0xc0029d80,edx
c0017a44:	83 c4 10             	add    esp,0x10
c0017a47:	b0 01                	mov    al,0x1
c0017a49:	83 c4 5c             	add    esp,0x5c
c0017a4c:	5b                   	pop    ebx
c0017a4d:	5e                   	pop    esi
c0017a4e:	5f                   	pop    edi
c0017a4f:	5d                   	pop    ebp
c0017a50:	c3                   	ret    

c0017a51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017a51:	55                   	push   ebp
c0017a52:	57                   	push   edi
c0017a53:	56                   	push   esi
c0017a54:	53                   	push   ebx
c0017a55:	81 ec 68 03 00 00    	sub    esp,0x368
c0017a5b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017a62:	8b 1d d0 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029dd0
c0017a68:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017a6c:	68 14 01 00 00       	push   0x114
c0017a71:	e8 e5 22 ff ff       	call   c0009d5b <malloc>
c0017a76:	83 c4 0c             	add    esp,0xc
c0017a79:	89 c5                	mov    ebp,eax
c0017a7b:	53                   	push   ebx
c0017a7c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017a83:	50                   	push   eax
c0017a84:	e8 29 5b ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0017a89:	5e                   	pop    esi
c0017a8a:	5f                   	pop    edi
c0017a8b:	6a 01                	push   0x1
c0017a8d:	55                   	push   ebp
c0017a8e:	e8 f9 5b ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0017a93:	83 c4 10             	add    esp,0x10
c0017a96:	85 c0                	test   eax,eax
c0017a98:	0f 85 a7 06 00 00    	jne    c0018145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017a9e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017aa6:	83 ec 0c             	sub    esp,0xc
c0017aa9:	6a 34                	push   0x34
c0017aab:	e8 ab 22 ff ff       	call   c0009d5b <malloc>
c0017ab0:	5b                   	pop    ebx
c0017ab1:	89 c7                	mov    edi,eax
c0017ab3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ab7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017aba:	53                   	push   ebx
c0017abb:	57                   	push   edi
c0017abc:	6a 00                	push   0x0
c0017abe:	6a 34                	push   0x34
c0017ac0:	55                   	push   ebp
c0017ac1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ac4:	83 c4 20             	add    esp,0x20
c0017ac7:	85 c0                	test   eax,eax
c0017ac9:	0f 85 76 06 00 00    	jne    c0018145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017acf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017ad5:	0f 85 6a 06 00 00    	jne    c0018145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017adb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017ade:	85 c0                	test   eax,eax
c0017ae0:	0f 84 5f 06 00 00    	je     c0018145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017ae6:	31 d2                	xor    edx,edx
c0017ae8:	51                   	push   ecx
c0017ae9:	52                   	push   edx
c0017aea:	50                   	push   eax
c0017aeb:	55                   	push   ebp
c0017aec:	e8 59 5c ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017af1:	83 c4 10             	add    esp,0x10
c0017af4:	85 c0                	test   eax,eax
c0017af6:	0f 85 49 06 00 00    	jne    c0018145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017afc:	83 ec 0c             	sub    esp,0xc
c0017aff:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017b02:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b06:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b0a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b0e:	0f af c2             	imul   eax,edx
c0017b11:	50                   	push   eax
c0017b12:	e8 44 22 ff ff       	call   c0009d5b <malloc>
c0017b17:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017b1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b25:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b29:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b2d:	0f af c2             	imul   eax,edx
c0017b30:	99                   	cdq    
c0017b31:	52                   	push   edx
c0017b32:	50                   	push   eax
c0017b33:	55                   	push   ebp
c0017b34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b37:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017b3a:	83 c4 20             	add    esp,0x20
c0017b3d:	85 c0                	test   eax,eax
c0017b3f:	0f 84 00 06 00 00    	je     c0018145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b45:	52                   	push   edx
c0017b46:	31 d2                	xor    edx,edx
c0017b48:	52                   	push   edx
c0017b49:	50                   	push   eax
c0017b4a:	55                   	push   ebp
c0017b4b:	e8 fa 5b ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017b50:	83 c4 10             	add    esp,0x10
c0017b53:	85 c0                	test   eax,eax
c0017b55:	0f 85 ea 05 00 00    	jne    c0018145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b5b:	83 ec 0c             	sub    esp,0xc
c0017b5e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017b62:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017b66:	31 f6                	xor    esi,esi
c0017b68:	0f af c2             	imul   eax,edx
c0017b6b:	50                   	push   eax
c0017b6c:	e8 ea 21 ff ff       	call   c0009d5b <malloc>
c0017b71:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017b74:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b7b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b7f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017b83:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017b87:	0f af c2             	imul   eax,edx
c0017b8a:	99                   	cdq    
c0017b8b:	52                   	push   edx
c0017b8c:	50                   	push   eax
c0017b8d:	55                   	push   ebp
c0017b8e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b91:	83 c4 20             	add    esp,0x20
c0017b94:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017b98:	0f 86 8a 00 00 00    	jbe    c0017c28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017b9e:	0f b7 de             	movzx  ebx,si
c0017ba1:	c1 e3 05             	shl    ebx,0x5
c0017ba4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017ba8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017bab:	75 75                	jne    c0017c22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017bad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017bb0:	31 d2                	xor    edx,edx
c0017bb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bbd:	50                   	push   eax
c0017bbe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017bc1:	52                   	push   edx
c0017bc2:	50                   	push   eax
c0017bc3:	55                   	push   ebp
c0017bc4:	e8 81 5b ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017bc9:	83 c4 10             	add    esp,0x10
c0017bcc:	85 c0                	test   eax,eax
c0017bce:	0f 85 71 05 00 00    	jne    c0018145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017bd4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017bdb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017bde:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017be2:	31 d2                	xor    edx,edx
c0017be4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017be8:	83 ec 0c             	sub    esp,0xc
c0017beb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017bf6:	50                   	push   eax
c0017bf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bff:	52                   	push   edx
c0017c00:	50                   	push   eax
c0017c01:	55                   	push   ebp
c0017c02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c05:	83 c4 1c             	add    esp,0x1c
c0017c08:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017c0b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017c0e:	50                   	push   eax
c0017c0f:	6a 00                	push   0x0
c0017c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c15:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017c19:	50                   	push   eax
c0017c1a:	e8 65 8a fe ff       	call   c0000684 <memset>
c0017c1f:	83 c4 10             	add    esp,0x10
c0017c22:	46                   	inc    esi
c0017c23:	e9 6c ff ff ff       	jmp    c0017b94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017c28:	53                   	push   ebx
c0017c29:	31 db                	xor    ebx,ebx
c0017c2b:	68 00 01 00 00       	push   0x100
c0017c30:	6a 00                	push   0x0
c0017c32:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017c36:	50                   	push   eax
c0017c37:	e8 48 8a fe ff       	call   c0000684 <memset>
c0017c3c:	83 c4 0c             	add    esp,0xc
c0017c3f:	68 00 01 00 00       	push   0x100
c0017c44:	6a 00                	push   0x0
c0017c46:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017c4d:	50                   	push   eax
c0017c4e:	e8 31 8a fe ff       	call   c0000684 <memset>
c0017c53:	83 c4 10             	add    esp,0x10
c0017c56:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017c5e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017c66:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017c6e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017c76:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c7e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017c82:	0f 86 30 01 00 00    	jbe    c0017db8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017c88:	0f b7 f3             	movzx  esi,bx
c0017c8b:	6b f6 28             	imul   esi,esi,0x28
c0017c8e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017c92:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017c95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c99:	52                   	push   edx
c0017c9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c9e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017ca2:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ca4:	6b d2 28             	imul   edx,edx,0x28
c0017ca7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017cab:	31 d2                	xor    edx,edx
c0017cad:	52                   	push   edx
c0017cae:	50                   	push   eax
c0017caf:	55                   	push   ebp
c0017cb0:	e8 95 5a ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017cb5:	83 c4 0c             	add    esp,0xc
c0017cb8:	6a 20                	push   0x20
c0017cba:	6a 00                	push   0x0
c0017cbc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017cc3:	51                   	push   ecx
c0017cc4:	e8 bb 89 fe ff       	call   c0000684 <memset>
c0017cc9:	59                   	pop    ecx
c0017cca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017ccd:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017cd1:	52                   	push   edx
c0017cd2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017cd9:	51                   	push   ecx
c0017cda:	6a 00                	push   0x0
c0017cdc:	6a 1f                	push   0x1f
c0017cde:	55                   	push   ebp
c0017cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ce2:	83 c4 1c             	add    esp,0x1c
c0017ce5:	6a 09                	push   0x9
c0017ce7:	68 0e 68 02 c0       	push   0xc002680e
c0017cec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017cf3:	51                   	push   ecx
c0017cf4:	e8 87 88 fe ff       	call   c0000580 <memcmp>
c0017cf9:	83 c4 10             	add    esp,0x10
c0017cfc:	85 c0                	test   eax,eax
c0017cfe:	75 21                	jne    c0017d21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d08:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017d10:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d13:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017d1a:	89 d0                	mov    eax,edx
c0017d1c:	40                   	inc    eax
c0017d1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d21:	50                   	push   eax
c0017d22:	6a 09                	push   0x9
c0017d24:	68 18 68 02 c0       	push   0xc0026818
c0017d29:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d30:	50                   	push   eax
c0017d31:	e8 4a 88 fe ff       	call   c0000580 <memcmp>
c0017d36:	83 c4 10             	add    esp,0x10
c0017d39:	85 c0                	test   eax,eax
c0017d3b:	75 21                	jne    c0017d5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017d3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d45:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017d4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d50:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017d57:	89 d0                	mov    eax,edx
c0017d59:	40                   	inc    eax
c0017d5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d5e:	50                   	push   eax
c0017d5f:	50                   	push   eax
c0017d60:	68 e4 67 02 c0       	push   0xc00267e4
c0017d65:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d6c:	50                   	push   eax
c0017d6d:	e8 5a 8a fe ff       	call   c00007cc <strcmp>
c0017d72:	83 c4 10             	add    esp,0x10
c0017d75:	85 c0                	test   eax,eax
c0017d77:	75 0f                	jne    c0017d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017d79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d88:	50                   	push   eax
c0017d89:	50                   	push   eax
c0017d8a:	68 ec 67 02 c0       	push   0xc00267ec
c0017d8f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d96:	50                   	push   eax
c0017d97:	e8 30 8a fe ff       	call   c00007cc <strcmp>
c0017d9c:	83 c4 10             	add    esp,0x10
c0017d9f:	85 c0                	test   eax,eax
c0017da1:	75 0f                	jne    c0017db2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017da3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017da6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017daa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017db2:	43                   	inc    ebx
c0017db3:	e9 c6 fe ff ff       	jmp    c0017c7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017db8:	31 d2                	xor    edx,edx
c0017dba:	50                   	push   eax
c0017dbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dbf:	52                   	push   edx
c0017dc0:	50                   	push   eax
c0017dc1:	55                   	push   ebp
c0017dc2:	e8 83 59 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017dc7:	58                   	pop    eax
c0017dc8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017dcc:	e8 8a 1f ff ff       	call   c0009d5b <malloc>
c0017dd1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017dd4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017dd8:	31 d2                	xor    edx,edx
c0017dda:	58                   	pop    eax
c0017ddb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ddf:	53                   	push   ebx
c0017de0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017de4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017de8:	52                   	push   edx
c0017de9:	50                   	push   eax
c0017dea:	55                   	push   ebp
c0017deb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017dee:	83 c4 14             	add    esp,0x14
c0017df1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017df5:	e8 61 1f ff ff       	call   c0009d5b <malloc>
c0017dfa:	31 d2                	xor    edx,edx
c0017dfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e00:	83 c4 0c             	add    esp,0xc
c0017e03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e07:	52                   	push   edx
c0017e08:	50                   	push   eax
c0017e09:	55                   	push   ebp
c0017e0a:	e8 3b 59 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017e0f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e12:	31 d2                	xor    edx,edx
c0017e14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e17:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017e1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e1f:	52                   	push   edx
c0017e20:	50                   	push   eax
c0017e21:	55                   	push   ebp
c0017e22:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e25:	83 c4 20             	add    esp,0x20
c0017e28:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017e34:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017e38:	0f 84 0b 03 00 00    	je     c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017e3e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017e45:	31 d2                	xor    edx,edx
c0017e47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e4b:	c1 e8 03             	shr    eax,0x3
c0017e4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017e52:	51                   	push   ecx
c0017e53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e57:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017e5b:	52                   	push   edx
c0017e5c:	50                   	push   eax
c0017e5d:	55                   	push   ebp
c0017e5e:	e8 e7 58 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017e63:	5b                   	pop    ebx
c0017e64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e68:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017e6f:	e8 e7 1e ff ff       	call   c0009d5b <malloc>
c0017e74:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e7b:	31 d2                	xor    edx,edx
c0017e7d:	5e                   	pop    esi
c0017e7e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017e82:	50                   	push   eax
c0017e83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e8b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017e92:	52                   	push   edx
c0017e93:	50                   	push   eax
c0017e94:	55                   	push   ebp
c0017e95:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e98:	83 c4 20             	add    esp,0x20
c0017e9b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ea3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017ea7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017eab:	0f 8d 7c 02 00 00    	jge    c001812d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017eb1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017eb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017eb9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017ebe:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017ec1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017ec5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ec9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017ecd:	89 d8                	mov    eax,ebx
c0017ecf:	c1 e8 08             	shr    eax,0x8
c0017ed2:	89 c6                	mov    esi,eax
c0017ed4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ed8:	c1 e6 04             	shl    esi,0x4
c0017edb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017edf:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017ee2:	85 d2                	test   edx,edx
c0017ee4:	0f 85 bf 00 00 00    	jne    c0017fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017eea:	83 ec 0c             	sub    esp,0xc
c0017eed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ef1:	03 06                	add    eax,DWORD PTR [esi]
c0017ef3:	50                   	push   eax
c0017ef4:	e8 4b f8 ff ff       	call   c0017744 <Thr::getAddressOfKernelSymbol(char const*)>
c0017ef9:	83 c4 10             	add    esp,0x10
c0017efc:	89 c2                	mov    edx,eax
c0017efe:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017f03:	85 c0                	test   eax,eax
c0017f05:	0f 85 9e 00 00 00    	jne    c0017fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f12:	03 06                	add    eax,DWORD PTR [esi]
c0017f14:	50                   	push   eax
c0017f15:	e8 f6 09 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	89 c2                	mov    edx,eax
c0017f1f:	85 c0                	test   eax,eax
c0017f21:	0f 85 82 00 00 00    	jne    c0017fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017f27:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f2b:	50                   	push   eax
c0017f2c:	50                   	push   eax
c0017f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f31:	03 06                	add    eax,DWORD PTR [esi]
c0017f33:	50                   	push   eax
c0017f34:	68 22 68 02 c0       	push   0xc0026822
c0017f39:	e8 09 51 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0017f3e:	58                   	pop    eax
c0017f3f:	5a                   	pop    edx
c0017f40:	68 3c 68 02 c0       	push   0xc002683c
c0017f45:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f4c:	50                   	push   eax
c0017f4d:	e8 ee 87 fe ff       	call   c0000740 <strcpy>
c0017f52:	59                   	pop    ecx
c0017f53:	58                   	pop    eax
c0017f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f58:	03 06                	add    eax,DWORD PTR [esi]
c0017f5a:	50                   	push   eax
c0017f5b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f62:	50                   	push   eax
c0017f63:	e8 18 89 fe ff       	call   c0000880 <strcat>
c0017f68:	58                   	pop    eax
c0017f69:	5a                   	pop    edx
c0017f6a:	68 d2 68 02 c0       	push   0xc00268d2
c0017f6f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f76:	50                   	push   eax
c0017f77:	e8 04 89 fe ff       	call   c0000880 <strcat>
c0017f7c:	83 c4 10             	add    esp,0x10
c0017f7f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017f84:	0f 84 5d 01 00 00    	je     c00180e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017f8a:	83 ec 0c             	sub    esp,0xc
c0017f8d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f94:	50                   	push   eax
c0017f95:	e8 4b d0 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0017f9a:	83 c4 10             	add    esp,0x10
c0017f9d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017fa1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017fa5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017fa9:	80 fb 01             	cmp    bl,0x1
c0017fac:	0f 85 88 00 00 00    	jne    c001803a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017fb2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017fb9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017fbd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017fc1:	01 ce                	add    esi,ecx
c0017fc3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017fc9:	0f 94 c0             	sete   al
c0017fcc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017fd2:	0f 94 c3             	sete   bl
c0017fd5:	09 c3                	or     ebx,eax
c0017fd7:	8b 06                	mov    eax,DWORD PTR [esi]
c0017fd9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017fde:	74 41                	je     c0018021 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017fe0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017fe3:	84 db                	test   bl,bl
c0017fe5:	75 15                	jne    c0017ffc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017fe7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017feb:	66 83 f8 0c          	cmp    ax,0xc
c0017fef:	76 05                	jbe    c0017ff6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017ff1:	b8 0c 00 00 00       	mov    eax,0xc
c0017ff6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017ffa:	76 37                	jbe    c0018033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017ffc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0018000:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018005:	0f 84 dc 00 00 00    	je     c00180e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001800b:	83 ec 0c             	sub    esp,0xc
c001800e:	68 53 68 02 c0       	push   0xc0026853
c0018013:	e8 cd cf ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0018018:	83 c4 10             	add    esp,0x10
c001801b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001801f:	eb 12                	jmp    c0018033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018021:	01 c1                	add    ecx,eax
c0018023:	84 db                	test   bl,bl
c0018025:	75 0c                	jne    c0018033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018027:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001802b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001802f:	77 02                	ja     c0018033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018031:	01 d1                	add    ecx,edx
c0018033:	89 0e                	mov    DWORD PTR [esi],ecx
c0018035:	e9 ea 00 00 00       	jmp    c0018124 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001803a:	80 fb 02             	cmp    bl,0x2
c001803d:	75 7c                	jne    c00180bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001803f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0018046:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001804a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001804e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0018054:	74 20                	je     c0018076 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0018056:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001805c:	74 18                	je     c0018076 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001805e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0018062:	b9 0a 00 00 00       	mov    ecx,0xa
c0018067:	66 83 f8 0e          	cmp    ax,0xe
c001806b:	77 03                	ja     c0018070 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001806d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0018070:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0018074:	76 1f                	jbe    c0018095 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0018076:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001807a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001807f:	74 66                	je     c00180e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018081:	83 ec 0c             	sub    esp,0xc
c0018084:	68 6f 68 02 c0       	push   0xc002686f
c0018089:	e8 57 cf ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001808e:	83 c4 10             	add    esp,0x10
c0018091:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018095:	8b 06                	mov    eax,DWORD PTR [esi]
c0018097:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001809c:	74 13                	je     c00180b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001809e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00180a2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00180a9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00180ad:	01 c8                	add    eax,ecx
c00180af:	eb 04                	jmp    c00180b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00180b1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00180b5:	01 c2                	add    edx,eax
c00180b7:	89 16                	mov    DWORD PTR [esi],edx
c00180b9:	eb 69                	jmp    c0018124 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00180bb:	0f b6 db             	movzx  ebx,bl
c00180be:	50                   	push   eax
c00180bf:	50                   	push   eax
c00180c0:	53                   	push   ebx
c00180c1:	68 8b 68 02 c0       	push   0xc002688b
c00180c6:	e8 7c 4f ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00180cb:	83 c4 10             	add    esp,0x10
c00180ce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00180d3:	74 12                	je     c00180e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00180d5:	83 ec 0c             	sub    esp,0xc
c00180d8:	68 96 68 02 c0       	push   0xc0026896
c00180dd:	e8 03 cf ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c00180e2:	83 c4 10             	add    esp,0x10
c00180e5:	eb 3d                	jmp    c0018124 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00180e7:	83 ec 0c             	sub    esp,0xc
c00180ea:	55                   	push   ebp
c00180eb:	e8 fa 55 ff ff       	call   c000d6ea <File::close()>
c00180f0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00180f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00180f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180f9:	59                   	pop    ecx
c00180fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180fe:	e8 68 1c ff ff       	call   c0009d6b <free>
c0018103:	5b                   	pop    ebx
c0018104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018108:	e8 5e 1c ff ff       	call   c0009d6b <free>
c001810d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018110:	e8 56 1c ff ff       	call   c0009d6b <free>
c0018115:	5e                   	pop    esi
c0018116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001811a:	e8 4c 1c ff ff       	call   c0009d6b <free>
c001811f:	83 c4 10             	add    esp,0x10
c0018122:	eb 21                	jmp    c0018145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0018124:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0018128:	e9 76 fd ff ff       	jmp    c0017ea3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001812d:	83 ec 0c             	sub    esp,0xc
c0018130:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018134:	e8 32 1c ff ff       	call   c0009d6b <free>
c0018139:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001813d:	83 c4 10             	add    esp,0x10
c0018140:	e9 eb fc ff ff       	jmp    c0017e30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0018145:	31 c0                	xor    eax,eax
c0018147:	eb 33                	jmp    c001817c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0018149:	83 ec 0c             	sub    esp,0xc
c001814c:	55                   	push   ebp
c001814d:	e8 98 55 ff ff       	call   c000d6ea <File::close()>
c0018152:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018155:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018158:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001815b:	58                   	pop    eax
c001815c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018160:	e8 06 1c ff ff       	call   c0009d6b <free>
c0018165:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018168:	e8 fe 1b ff ff       	call   c0009d6b <free>
c001816d:	5a                   	pop    edx
c001816e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018172:	e8 f4 1b ff ff       	call   c0009d6b <free>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	b0 01                	mov    al,0x1
c001817c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0018182:	5b                   	pop    ebx
c0018183:	5e                   	pop    esi
c0018184:	5f                   	pop    edi
c0018185:	5d                   	pop    ebp
c0018186:	c3                   	ret    

c0018187 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0018187:	56                   	push   esi
c0018188:	31 d2                	xor    edx,edx
c001818a:	53                   	push   ebx
c001818b:	8b 1d e0 95 02 c0    	mov    ebx,DWORD PTR ds:0xc00295e0
c0018191:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018195:	39 d3                	cmp    ebx,edx
c0018197:	7e 1b                	jle    c00181b4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0018199:	8b 04 95 00 98 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6800]
c00181a0:	39 c8                	cmp    eax,ecx
c00181a2:	77 0d                	ja     c00181b1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00181a4:	8b 34 95 00 96 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6a00]
c00181ab:	01 c6                	add    esi,eax
c00181ad:	39 ce                	cmp    esi,ecx
c00181af:	77 05                	ja     c00181b6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00181b1:	42                   	inc    edx
c00181b2:	eb e1                	jmp    c0018195 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00181b4:	31 c0                	xor    eax,eax
c00181b6:	5b                   	pop    ebx
c00181b7:	5e                   	pop    esi
c00181b8:	c3                   	ret    

c00181b9 <Thr::getDriverNameFromAddress(unsigned long)>:
c00181b9:	53                   	push   ebx
c00181ba:	31 c0                	xor    eax,eax
c00181bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00181c0:	8b 1d e0 95 02 c0    	mov    ebx,DWORD PTR ds:0xc00295e0
c00181c6:	39 c3                	cmp    ebx,eax
c00181c8:	7e 22                	jle    c00181ec <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00181ca:	8b 14 85 00 98 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6800]
c00181d1:	39 ca                	cmp    edx,ecx
c00181d3:	77 14                	ja     c00181e9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00181d5:	03 14 85 00 96 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6a00]
c00181dc:	39 ca                	cmp    edx,ecx
c00181de:	76 09                	jbe    c00181e9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00181e0:	8b 04 85 00 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6600]
c00181e7:	eb 05                	jmp    c00181ee <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00181e9:	40                   	inc    eax
c00181ea:	eb da                	jmp    c00181c6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00181ec:	31 c0                	xor    eax,eax
c00181ee:	5b                   	pop    ebx
c00181ef:	c3                   	ret    

c00181f0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00181f0:	53                   	push   ebx
c00181f1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00181f5:	53                   	push   ebx
c00181f6:	e8 8c ff ff ff       	call   c0018187 <Thr::getDriverBaseFromAddress(unsigned long)>
c00181fb:	5a                   	pop    edx
c00181fc:	31 d2                	xor    edx,edx
c00181fe:	85 c0                	test   eax,eax
c0018200:	74 04                	je     c0018206 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018202:	89 da                	mov    edx,ebx
c0018204:	29 c2                	sub    edx,eax
c0018206:	89 d0                	mov    eax,edx
c0018208:	5b                   	pop    ebx
c0018209:	c3                   	ret    

c001820a <Thr::loadDLL(char const*, bool)>:
c001820a:	55                   	push   ebp
c001820b:	57                   	push   edi
c001820c:	56                   	push   esi
c001820d:	53                   	push   ebx
c001820e:	81 ec 34 01 00 00    	sub    esp,0x134
c0018214:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001821b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0018222:	56                   	push   esi
c0018223:	68 ae 68 02 c0       	push   0xc00268ae
c0018228:	e8 1a 4e ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001822d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018234:	e8 22 1b ff ff       	call   c0009d5b <malloc>
c0018239:	83 c4 0c             	add    esp,0xc
c001823c:	89 c3                	mov    ebx,eax
c001823e:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c0018244:	56                   	push   esi
c0018245:	50                   	push   eax
c0018246:	e8 67 53 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001824b:	83 c4 10             	add    esp,0x10
c001824e:	85 db                	test   ebx,ebx
c0018250:	75 3c                	jne    c001828e <Thr::loadDLL(char const*, bool)+0x84>
c0018252:	89 f8                	mov    eax,edi
c0018254:	84 c0                	test   al,al
c0018256:	0f 84 d2 01 00 00    	je     c001842e <Thr::loadDLL(char const*, bool)+0x224>
c001825c:	55                   	push   ebp
c001825d:	55                   	push   ebp
c001825e:	68 bf 68 02 c0       	push   0xc00268bf
c0018263:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0018267:	55                   	push   ebp
c0018268:	e8 d3 84 fe ff       	call   c0000740 <strcpy>
c001826d:	58                   	pop    eax
c001826e:	5a                   	pop    edx
c001826f:	56                   	push   esi
c0018270:	55                   	push   ebp
c0018271:	e8 0a 86 fe ff       	call   c0000880 <strcat>
c0018276:	59                   	pop    ecx
c0018277:	58                   	pop    eax
c0018278:	68 d2 68 02 c0       	push   0xc00268d2
c001827d:	55                   	push   ebp
c001827e:	e8 fd 85 fe ff       	call   c0000880 <strcat>
c0018283:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018286:	e8 5a cd ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001828b:	83 c4 10             	add    esp,0x10
c001828e:	51                   	push   ecx
c001828f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0018293:	50                   	push   eax
c0018294:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018298:	50                   	push   eax
c0018299:	53                   	push   ebx
c001829a:	e8 99 56 ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001829f:	83 c4 10             	add    esp,0x10
c00182a2:	85 db                	test   ebx,ebx
c00182a4:	74 0c                	je     c00182b2 <Thr::loadDLL(char const*, bool)+0xa8>
c00182a6:	83 ec 0c             	sub    esp,0xc
c00182a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182ab:	53                   	push   ebx
c00182ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182af:	83 c4 10             	add    esp,0x10
c00182b2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00182b7:	75 0a                	jne    c00182c3 <Thr::loadDLL(char const*, bool)+0xb9>
c00182b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182bd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00182c1:	75 3c                	jne    c00182ff <Thr::loadDLL(char const*, bool)+0xf5>
c00182c3:	89 f8                	mov    eax,edi
c00182c5:	84 c0                	test   al,al
c00182c7:	0f 84 49 01 00 00    	je     c0018416 <Thr::loadDLL(char const*, bool)+0x20c>
c00182cd:	51                   	push   ecx
c00182ce:	51                   	push   ecx
c00182cf:	68 bf 68 02 c0       	push   0xc00268bf
c00182d4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00182d8:	53                   	push   ebx
c00182d9:	e8 62 84 fe ff       	call   c0000740 <strcpy>
c00182de:	5d                   	pop    ebp
c00182df:	58                   	pop    eax
c00182e0:	56                   	push   esi
c00182e1:	53                   	push   ebx
c00182e2:	e8 99 85 fe ff       	call   c0000880 <strcat>
c00182e7:	58                   	pop    eax
c00182e8:	5a                   	pop    edx
c00182e9:	68 d2 68 02 c0       	push   0xc00268d2
c00182ee:	53                   	push   ebx
c00182ef:	e8 8c 85 fe ff       	call   c0000880 <strcat>
c00182f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00182f7:	e8 e9 cc ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	52                   	push   edx
c0018300:	6a 03                	push   0x3
c0018302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018306:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001830a:	05 ff 0f 00 00       	add    eax,0xfff
c001830f:	83 d2 00             	adc    edx,0x0
c0018312:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018316:	50                   	push   eax
c0018317:	ff 35 b0 89 02 c0    	push   DWORD PTR ds:0xc00289b0
c001831d:	e8 a8 41 ff ff       	call   c000c4ca <VAS::allocatePages(int, int)>
c0018322:	59                   	pop    ecx
c0018323:	89 c3                	mov    ebx,eax
c0018325:	5d                   	pop    ebp
c0018326:	50                   	push   eax
c0018327:	68 6e 48 02 c0       	push   0xc002486e
c001832c:	e8 16 4d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0018331:	89 34 24             	mov    DWORD PTR [esp],esi
c0018334:	e8 67 83 fe ff       	call   c00006a0 <strlen>
c0018339:	8b 2d e0 95 02 c0    	mov    ebp,DWORD PTR ds:0xc00295e0
c001833f:	40                   	inc    eax
c0018340:	89 04 24             	mov    DWORD PTR [esp],eax
c0018343:	e8 13 1a ff ff       	call   c0009d5b <malloc>
c0018348:	89 04 ad 00 9a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6600],eax
c001834f:	58                   	pop    eax
c0018350:	a1 e0 95 02 c0       	mov    eax,ds:0xc00295e0
c0018355:	5a                   	pop    edx
c0018356:	56                   	push   esi
c0018357:	ff 34 85 00 9a 02 c0 	push   DWORD PTR [eax*4-0x3ffd6600]
c001835e:	e8 dd 83 fe ff       	call   c0000740 <strcpy>
c0018363:	a1 e0 95 02 c0       	mov    eax,ds:0xc00295e0
c0018368:	8d 50 01             	lea    edx,[eax+0x1]
c001836b:	89 1c 85 00 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6800],ebx
c0018372:	89 15 e0 95 02 c0    	mov    DWORD PTR ds:0xc00295e0,edx
c0018378:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001837c:	83 c4 0c             	add    esp,0xc
c001837f:	89 14 85 00 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a00],edx
c0018386:	6a 01                	push   0x1
c0018388:	53                   	push   ebx
c0018389:	56                   	push   esi
c001838a:	e8 c2 f6 ff ff       	call   c0017a51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001838f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018393:	83 c4 10             	add    esp,0x10
c0018396:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001839b:	0f 85 89 00 00 00    	jne    c001842a <Thr::loadDLL(char const*, bool)+0x220>
c00183a1:	89 f8                	mov    eax,edi
c00183a3:	84 c0                	test   al,al
c00183a5:	74 73                	je     c001841a <Thr::loadDLL(char const*, bool)+0x210>
c00183a7:	83 ec 0c             	sub    esp,0xc
c00183aa:	68 d4 68 02 c0       	push   0xc00268d4
c00183af:	e8 31 cc ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c00183b4:	83 c4 10             	add    esp,0x10
c00183b7:	eb 61                	jmp    c001841a <Thr::loadDLL(char const*, bool)+0x210>
c00183b9:	50                   	push   eax
c00183ba:	50                   	push   eax
c00183bb:	89 e8                	mov    eax,ebp
c00183bd:	c1 e0 0c             	shl    eax,0xc
c00183c0:	01 d8                	add    eax,ebx
c00183c2:	50                   	push   eax
c00183c3:	ff 35 b0 89 02 c0    	push   DWORD PTR ds:0xc00289b0
c00183c9:	e8 64 3c ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c00183ce:	83 c4 10             	add    esp,0x10
c00183d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00183d3:	a8 60                	test   al,0x60
c00183d5:	75 11                	jne    c00183e8 <Thr::loadDLL(char const*, bool)+0x1de>
c00183d7:	83 ec 0c             	sub    esp,0xc
c00183da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183df:	50                   	push   eax
c00183e0:	e8 aa 1f ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c00183e5:	83 c4 10             	add    esp,0x10
c00183e8:	45                   	inc    ebp
c00183e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183f1:	05 ff 0f 00 00       	add    eax,0xfff
c00183f6:	bf 00 00 00 00       	mov    edi,0x0
c00183fb:	83 d2 00             	adc    edx,0x0
c00183fe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018402:	c1 ea 0c             	shr    edx,0xc
c0018405:	39 c5                	cmp    ebp,eax
c0018407:	89 d1                	mov    ecx,edx
c0018409:	89 f8                	mov    eax,edi
c001840b:	19 c8                	sbb    eax,ecx
c001840d:	72 aa                	jb     c00183b9 <Thr::loadDLL(char const*, bool)+0x1af>
c001840f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018414:	75 18                	jne    c001842e <Thr::loadDLL(char const*, bool)+0x224>
c0018416:	31 db                	xor    ebx,ebx
c0018418:	eb 14                	jmp    c001842e <Thr::loadDLL(char const*, bool)+0x224>
c001841a:	83 ec 0c             	sub    esp,0xc
c001841d:	68 f3 68 02 c0       	push   0xc00268f3
c0018422:	e8 be cb ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0018427:	83 c4 10             	add    esp,0x10
c001842a:	31 ed                	xor    ebp,ebp
c001842c:	eb bb                	jmp    c00183e9 <Thr::loadDLL(char const*, bool)+0x1df>
c001842e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018434:	89 d8                	mov    eax,ebx
c0018436:	5b                   	pop    ebx
c0018437:	5e                   	pop    esi
c0018438:	5f                   	pop    edi
c0018439:	5d                   	pop    ebp
c001843a:	c3                   	ret    

c001843b <Thr::executeDLL(unsigned long, void*)>:
c001843b:	56                   	push   esi
c001843c:	53                   	push   ebx
c001843d:	52                   	push   edx
c001843e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018442:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018446:	85 db                	test   ebx,ebx
c0018448:	75 10                	jne    c001845a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001844a:	83 ec 0c             	sub    esp,0xc
c001844d:	68 0f 69 02 c0       	push   0xc002690f
c0018452:	e8 8e cb ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0018457:	83 c4 10             	add    esp,0x10
c001845a:	50                   	push   eax
c001845b:	50                   	push   eax
c001845c:	53                   	push   ebx
c001845d:	68 39 69 02 c0       	push   0xc0026939
c0018462:	e8 e0 4b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0018467:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001846b:	89 d8                	mov    eax,ebx
c001846d:	83 c4 14             	add    esp,0x14
c0018470:	5b                   	pop    ebx
c0018471:	5e                   	pop    esi
c0018472:	ff e0                	jmp    eax

c0018474 <userModeEntryPoint(void*)>:
c0018474:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0018479:	48                   	dec    eax
c001847a:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c001847f:	75 03                	jne    c0018484 <userModeEntryPoint(void*)+0x10>
c0018481:	fb                   	sti    
c0018482:	66 90                	xchg   ax,ax
c0018484:	fb                   	sti    
c0018485:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001848a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001848d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0018493:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018497:	e9 c3 7d fe ff       	jmp    c000025f <goToUsermode>

c001849c <changeTSS>:
c001849c:	83 ec 14             	sub    esp,0x14
c001849f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184a4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00184a7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00184ac:	c1 e2 15             	shl    edx,0x15
c00184af:	29 d0                	sub    eax,edx
c00184b1:	50                   	push   eax
c00184b2:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c00184b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00184bd:	05 7c 11 00 00       	add    eax,0x117c
c00184c2:	50                   	push   eax
c00184c3:	e8 ac 31 ff ff       	call   c000b674 <TSS::setESP(unsigned long)>
c00184c8:	83 c4 1c             	add    esp,0x1c
c00184cb:	c3                   	ret    

c00184cc <switchToThread(ThreadControlBlock*)>:
c00184cc:	57                   	push   edi
c00184cd:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c00184d2:	56                   	push   esi
c00184d3:	85 c0                	test   eax,eax
c00184d5:	53                   	push   ebx
c00184d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184da:	0f 85 90 00 00 00    	jne    c0018570 <switchToThread(ThreadControlBlock*)+0xa4>
c00184e0:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00184e3:	3c ff                	cmp    al,0xff
c00184e5:	0f 84 81 00 00 00    	je     c001856c <switchToThread(ThreadControlBlock*)+0xa0>
c00184eb:	0f b6 d0             	movzx  edx,al
c00184ee:	b8 00 04 00 00       	mov    eax,0x400
c00184f3:	29 d0                	sub    eax,edx
c00184f5:	d1 f8                	sar    eax,1
c00184f7:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c00184fa:	66 90                	xchg   ax,ax
c00184fc:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c00184ff:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0018504:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001850a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018511:	74 4d                	je     c0018560 <switchToThread(ThreadControlBlock*)+0x94>
c0018513:	0f 31                	rdtsc  
c0018515:	a3 e8 9d 02 c0       	mov    ds:0xc0029de8,eax
c001851a:	89 c6                	mov    esi,eax
c001851c:	89 d7                	mov    edi,edx
c001851e:	2b 35 d8 9d 02 c0    	sub    esi,DWORD PTR ds:0xc0029dd8
c0018524:	89 15 ec 9d 02 c0    	mov    DWORD PTR ds:0xc0029dec,edx
c001852a:	1b 3d dc 9d 02 c0    	sbb    edi,DWORD PTR ds:0xc0029ddc
c0018530:	89 35 e0 9d 02 c0    	mov    DWORD PTR ds:0xc0029de0,esi
c0018536:	a3 d8 9d 02 c0       	mov    ds:0xc0029dd8,eax
c001853b:	89 3d e4 9d 02 c0    	mov    DWORD PTR ds:0xc0029de4,edi
c0018541:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018547:	89 15 dc 9d 02 c0    	mov    DWORD PTR ds:0xc0029ddc,edx
c001854d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018550:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0018553:	01 c6                	add    esi,eax
c0018555:	11 d7                	adc    edi,edx
c0018557:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001855a:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001855d:	8d 76 00             	lea    esi,[esi+0x0]
c0018560:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018564:	5b                   	pop    ebx
c0018565:	5e                   	pop    esi
c0018566:	5f                   	pop    edi
c0018567:	e9 2b 7d fe ff       	jmp    c0000297 <switchToThreadASM>
c001856c:	31 c0                	xor    eax,eax
c001856e:	eb 8c                	jmp    c00184fc <switchToThread(ThreadControlBlock*)+0x30>
c0018570:	5b                   	pop    ebx
c0018571:	c7 05 a0 9d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x1
c001857b:	5e                   	pop    esi
c001857c:	5f                   	pop    edi
c001857d:	c3                   	ret    
c001857e:	66 90                	xchg   ax,ax

c0018580 <Process::addArgs(char**)>:
c0018580:	57                   	push   edi
c0018581:	56                   	push   esi
c0018582:	53                   	push   ebx
c0018583:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018587:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001858b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0018595:	85 ff                	test   edi,edi
c0018597:	74 43                	je     c00185dc <Process::addArgs(char**)+0x5c>
c0018599:	8b 07                	mov    eax,DWORD PTR [edi]
c001859b:	85 c0                	test   eax,eax
c001859d:	74 3d                	je     c00185dc <Process::addArgs(char**)+0x5c>
c001859f:	31 db                	xor    ebx,ebx
c00185a1:	8d 76 00             	lea    esi,[esi+0x0]
c00185a4:	83 ec 0c             	sub    esp,0xc
c00185a7:	50                   	push   eax
c00185a8:	e8 f3 80 fe ff       	call   c00006a0 <strlen>
c00185ad:	40                   	inc    eax
c00185ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00185b1:	e8 a5 17 ff ff       	call   c0009d5b <malloc>
c00185b6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00185bd:	5a                   	pop    edx
c00185be:	59                   	pop    ecx
c00185bf:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00185c2:	43                   	inc    ebx
c00185c3:	50                   	push   eax
c00185c4:	e8 77 81 fe ff       	call   c0000740 <strcpy>
c00185c9:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00185cf:	83 c4 10             	add    esp,0x10
c00185d2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00185d5:	85 c0                	test   eax,eax
c00185d7:	75 cb                	jne    c00185a4 <Process::addArgs(char**)+0x24>
c00185d9:	8d 76 00             	lea    esi,[esi+0x0]
c00185dc:	5b                   	pop    ebx
c00185dd:	5e                   	pop    esi
c00185de:	5f                   	pop    edi
c00185df:	c3                   	ret    

c00185e0 <Process::Process(char const*, Process*, char**)>:
c00185e0:	56                   	push   esi
c00185e1:	53                   	push   ebx
c00185e2:	83 ec 14             	sub    esp,0x14
c00185e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185e9:	05 0c 02 00 00       	add    eax,0x20c
c00185ee:	bb 07 00 00 00       	mov    ebx,0x7
c00185f3:	89 c6                	mov    esi,eax
c00185f5:	8d 76 00             	lea    esi,[esi+0x0]
c00185f8:	85 db                	test   ebx,ebx
c00185fa:	78 14                	js     c0018610 <Process::Process(char const*, Process*, char**)+0x30>
c00185fc:	83 ec 0c             	sub    esp,0xc
c00185ff:	56                   	push   esi
c0018600:	e8 db af 00 00       	call   c00235e0 <ThreadControlBlock::ThreadControlBlock()>
c0018605:	83 c4 10             	add    esp,0x10
c0018608:	83 c6 5f             	add    esi,0x5f
c001860b:	4b                   	dec    ebx
c001860c:	eb ea                	jmp    c00185f8 <Process::Process(char const*, Process*, char**)+0x18>
c001860e:	66 90                	xchg   ax,ax
c0018610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018614:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001861b:	83 ec 0c             	sub    esp,0xc
c001861e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018622:	e8 47 c8 ff ff       	call   c0014e6e <Krnl::newProcessEnv(Process*)>
c0018627:	83 c4 10             	add    esp,0x10
c001862a:	89 c2                	mov    edx,eax
c001862c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018630:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001863a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018643:	a1 b0 82 02 c0       	mov    eax,ds:0xc00282b0
c0018648:	8d 50 01             	lea    edx,[eax+0x1]
c001864b:	89 15 b0 82 02 c0    	mov    DWORD PTR ds:0xc00282b0,edx
c0018651:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018655:	89 02                	mov    DWORD PTR [edx],eax
c0018657:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001865f:	83 ec 0c             	sub    esp,0xc
c0018662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018666:	e8 f0 16 ff ff       	call   c0009d5b <malloc>
c001866b:	83 c4 10             	add    esp,0x10
c001866e:	89 c3                	mov    ebx,eax
c0018670:	83 ec 08             	sub    esp,0x8
c0018673:	6a 00                	push   0x0
c0018675:	53                   	push   ebx
c0018676:	e8 f7 41 ff ff       	call   c000c872 <VAS::VAS(bool)>
c001867b:	83 c4 10             	add    esp,0x10
c001867e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018682:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001868c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001869a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001869e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00186a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00186ae:	85 c0                	test   eax,eax
c00186b0:	74 42                	je     c00186f4 <Process::Process(char const*, Process*, char**)+0x114>
c00186b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186b6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00186bc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00186c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00186cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186d0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00186d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00186dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e0:	05 0c 01 00 00       	add    eax,0x10c
c00186e5:	83 ec 08             	sub    esp,0x8
c00186e8:	52                   	push   edx
c00186e9:	50                   	push   eax
c00186ea:	e8 51 80 fe ff       	call   c0000740 <strcpy>
c00186ef:	83 c4 10             	add    esp,0x10
c00186f2:	eb 64                	jmp    c0018758 <Process::Process(char const*, Process*, char**)+0x178>
c00186f4:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c00186fc:	83 ec 0c             	sub    esp,0xc
c00186ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018703:	e8 53 16 ff ff       	call   c0009d5b <malloc>
c0018708:	83 c4 10             	add    esp,0x10
c001870b:	89 c3                	mov    ebx,eax
c001870d:	83 ec 08             	sub    esp,0x8
c0018710:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018714:	53                   	push   ebx
c0018715:	e8 6e 2c ff ff       	call   c000b388 <VgaText::VgaText(char const*)>
c001871a:	83 c4 10             	add    esp,0x10
c001871d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018721:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001872b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018731:	83 ec 0c             	sub    esp,0xc
c0018734:	50                   	push   eax
c0018735:	e8 0d 24 ff ff       	call   c000ab47 <addToTerminalCycle(VgaText*)>
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018741:	05 0c 01 00 00       	add    eax,0x10c
c0018746:	83 ec 08             	sub    esp,0x8
c0018749:	68 58 69 02 c0       	push   0xc0026958
c001874e:	50                   	push   eax
c001874f:	e8 ec 7f fe ff       	call   c0000740 <strcpy>
c0018754:	83 c4 10             	add    esp,0x10
c0018757:	90                   	nop
c0018758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875c:	83 c0 0c             	add    eax,0xc
c001875f:	83 ec 08             	sub    esp,0x8
c0018762:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018766:	50                   	push   eax
c0018767:	e8 d4 7f fe ff       	call   c0000740 <strcpy>
c001876c:	83 c4 10             	add    esp,0x10
c001876f:	83 ec 08             	sub    esp,0x8
c0018772:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018776:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001877a:	e8 01 fe ff ff       	call   c0018580 <Process::addArgs(char**)>
c001877f:	83 c4 10             	add    esp,0x10
c0018782:	83 ec 08             	sub    esp,0x8
c0018785:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018789:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001878d:	e8 89 ed ff ff       	call   c001751b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018792:	83 c4 10             	add    esp,0x10
c0018795:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018799:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001879d:	83 f0 01             	xor    eax,0x1
c00187a0:	88 c2                	mov    dl,al
c00187a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00187ac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00187b1:	83 ec 08             	sub    esp,0x8
c00187b4:	50                   	push   eax
c00187b5:	68 b0 69 02 c0       	push   0xc00269b0
c00187ba:	e8 88 48 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00187bf:	83 c4 10             	add    esp,0x10
c00187c2:	90                   	nop
c00187c3:	83 c4 14             	add    esp,0x14
c00187c6:	5b                   	pop    ebx
c00187c7:	5e                   	pop    esi
c00187c8:	c3                   	ret    
c00187c9:	90                   	nop
c00187ca:	66 90                	xchg   ax,ax

c00187cc <Process::Process(bool, char const*, Process*, char**)>:
c00187cc:	56                   	push   esi
c00187cd:	53                   	push   ebx
c00187ce:	83 ec 24             	sub    esp,0x24
c00187d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00187d5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00187d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187dd:	05 0c 02 00 00       	add    eax,0x20c
c00187e2:	bb 07 00 00 00       	mov    ebx,0x7
c00187e7:	89 c6                	mov    esi,eax
c00187e9:	8d 76 00             	lea    esi,[esi+0x0]
c00187ec:	85 db                	test   ebx,ebx
c00187ee:	78 14                	js     c0018804 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00187f0:	83 ec 0c             	sub    esp,0xc
c00187f3:	56                   	push   esi
c00187f4:	e8 e7 ad 00 00       	call   c00235e0 <ThreadControlBlock::ThreadControlBlock()>
c00187f9:	83 c4 10             	add    esp,0x10
c00187fc:	83 c6 5f             	add    esi,0x5f
c00187ff:	4b                   	dec    ebx
c0018800:	eb ea                	jmp    c00187ec <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018802:	66 90                	xchg   ax,ax
c0018804:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018808:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001880f:	83 ec 0c             	sub    esp,0xc
c0018812:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018816:	e8 53 c6 ff ff       	call   c0014e6e <Krnl::newProcessEnv(Process*)>
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	89 c2                	mov    edx,eax
c0018820:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018824:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001882a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001882e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018837:	a1 b0 82 02 c0       	mov    eax,ds:0xc00282b0
c001883c:	8d 50 01             	lea    edx,[eax+0x1]
c001883f:	89 15 b0 82 02 c0    	mov    DWORD PTR ds:0xc00282b0,edx
c0018845:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018849:	89 02                	mov    DWORD PTR [edx],eax
c001884b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018853:	83 ec 0c             	sub    esp,0xc
c0018856:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001885a:	e8 fc 14 ff ff       	call   c0009d5b <malloc>
c001885f:	83 c4 10             	add    esp,0x10
c0018862:	89 c3                	mov    ebx,eax
c0018864:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018869:	83 ec 08             	sub    esp,0x8
c001886c:	50                   	push   eax
c001886d:	53                   	push   ebx
c001886e:	e8 ff 3f ff ff       	call   c000c872 <VAS::VAS(bool)>
c0018873:	83 c4 10             	add    esp,0x10
c0018876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001887a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018884:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001888e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018892:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018896:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001889c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00188a6:	85 c0                	test   eax,eax
c00188a8:	74 42                	je     c00188ec <Process::Process(bool, char const*, Process*, char**)+0x120>
c00188aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188ae:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00188b4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00188ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188be:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00188c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00188ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00188d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188d8:	05 0c 01 00 00       	add    eax,0x10c
c00188dd:	83 ec 08             	sub    esp,0x8
c00188e0:	52                   	push   edx
c00188e1:	50                   	push   eax
c00188e2:	e8 59 7e fe ff       	call   c0000740 <strcpy>
c00188e7:	83 c4 10             	add    esp,0x10
c00188ea:	eb 64                	jmp    c0018950 <Process::Process(bool, char const*, Process*, char**)+0x184>
c00188ec:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c00188f4:	83 ec 0c             	sub    esp,0xc
c00188f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00188fb:	e8 5b 14 ff ff       	call   c0009d5b <malloc>
c0018900:	83 c4 10             	add    esp,0x10
c0018903:	89 c3                	mov    ebx,eax
c0018905:	83 ec 08             	sub    esp,0x8
c0018908:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001890c:	53                   	push   ebx
c001890d:	e8 76 2a ff ff       	call   c000b388 <VgaText::VgaText(char const*)>
c0018912:	83 c4 10             	add    esp,0x10
c0018915:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018919:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001891f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018923:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018929:	83 ec 0c             	sub    esp,0xc
c001892c:	50                   	push   eax
c001892d:	e8 15 22 ff ff       	call   c000ab47 <addToTerminalCycle(VgaText*)>
c0018932:	83 c4 10             	add    esp,0x10
c0018935:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018939:	05 0c 01 00 00       	add    eax,0x10c
c001893e:	83 ec 08             	sub    esp,0x8
c0018941:	68 58 69 02 c0       	push   0xc0026958
c0018946:	50                   	push   eax
c0018947:	e8 f4 7d fe ff       	call   c0000740 <strcpy>
c001894c:	83 c4 10             	add    esp,0x10
c001894f:	90                   	nop
c0018950:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018954:	83 c0 0c             	add    eax,0xc
c0018957:	83 ec 08             	sub    esp,0x8
c001895a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001895e:	50                   	push   eax
c001895f:	e8 dc 7d fe ff       	call   c0000740 <strcpy>
c0018964:	83 c4 10             	add    esp,0x10
c0018967:	83 ec 08             	sub    esp,0x8
c001896a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001896e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018972:	e8 09 fc ff ff       	call   c0018580 <Process::addArgs(char**)>
c0018977:	83 c4 10             	add    esp,0x10
c001897a:	90                   	nop
c001897b:	83 c4 24             	add    esp,0x24
c001897e:	5b                   	pop    ebx
c001897f:	5e                   	pop    esi
c0018980:	c3                   	ret    
c0018981:	8d 76 00             	lea    esi,[esi+0x0]

c0018984 <taskStartupFunction>:
c0018984:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018989:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001898c:	c3                   	ret    
c001898d:	90                   	nop
c001898e:	66 90                	xchg   ax,ax

c0018990 <Semaphore::Semaphore(int)>:
c0018990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018994:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018998:	89 10                	mov    DWORD PTR [eax],edx
c001899a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001899e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00189a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00189b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00189bb:	90                   	nop
c00189bc:	c3                   	ret    
c00189bd:	90                   	nop
c00189be:	66 90                	xchg   ax,ax

c00189c0 <Mutex::Mutex()>:
c00189c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189c4:	6a 01                	push   0x1
c00189c6:	50                   	push   eax
c00189c7:	e8 c4 ff ff ff       	call   c0018990 <Semaphore::Semaphore(int)>
c00189cc:	83 c4 08             	add    esp,0x8
c00189cf:	90                   	nop
c00189d0:	c3                   	ret    
c00189d1:	90                   	nop
c00189d2:	66 90                	xchg   ax,ax

c00189d4 <Process::createThread(void (*)(void*), void*, int)>:
c00189d4:	57                   	push   edi
c00189d5:	31 c9                	xor    ecx,ecx
c00189d7:	56                   	push   esi
c00189d8:	53                   	push   ebx
c00189d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00189dd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00189e4:	89 f2                	mov    edx,esi
c00189e6:	66 90                	xchg   ax,ax
c00189e8:	0f b7 c2             	movzx  eax,dx
c00189eb:	83 e2 01             	and    edx,0x1
c00189ee:	74 14                	je     c0018a04 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00189f0:	d1 f8                	sar    eax,1
c00189f2:	41                   	inc    ecx
c00189f3:	89 c2                	mov    edx,eax
c00189f5:	83 f9 10             	cmp    ecx,0x10
c00189f8:	75 ee                	jne    c00189e8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00189fa:	31 db                	xor    ebx,ebx
c00189fc:	89 d8                	mov    eax,ebx
c00189fe:	5b                   	pop    ebx
c00189ff:	5e                   	pop    esi
c0018a00:	5f                   	pop    edi
c0018a01:	c3                   	ret    
c0018a02:	66 90                	xchg   ax,ax
c0018a04:	b8 01 00 00 00       	mov    eax,0x1
c0018a09:	d3 e0                	shl    eax,cl
c0018a0b:	09 c6                	or     esi,eax
c0018a0d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018a10:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018a17:	01 c0                	add    eax,eax
c0018a19:	01 c8                	add    eax,ecx
c0018a1b:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a1e:	01 d8                	add    eax,ebx
c0018a20:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018a27:	75 0b                	jne    c0018a34 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018a29:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018a33:	90                   	nop
c0018a34:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018a3a:	83 ec 08             	sub    esp,0x8
c0018a3d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018a40:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018a43:	01 c0                	add    eax,eax
c0018a45:	01 c8                	add    eax,ecx
c0018a47:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018a4a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018a4d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018a53:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018a59:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018a5d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018a63:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018a69:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018a70:	89 ca                	mov    edx,ecx
c0018a72:	f7 da                	neg    edx
c0018a74:	c1 e2 15             	shl    edx,0x15
c0018a77:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018a7d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018a83:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a87:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018a91:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018a97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a9b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018aa1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018aab:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018ab5:	53                   	push   ebx
c0018ab6:	68 c4 9d 02 c0       	push   0xc0029dc4
c0018abb:	e8 c0 a8 00 00       	call   c0023380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ac0:	83 c4 10             	add    esp,0x10
c0018ac3:	89 d8                	mov    eax,ebx
c0018ac5:	5b                   	pop    ebx
c0018ac6:	5e                   	pop    esi
c0018ac7:	5f                   	pop    edi
c0018ac8:	c3                   	ret    
c0018ac9:	90                   	nop
c0018aca:	66 90                	xchg   ax,ax

c0018acc <Process::createUserThread()>:
c0018acc:	83 ec 0c             	sub    esp,0xc
c0018acf:	68 80 00 00 00       	push   0x80
c0018ad4:	6a 00                	push   0x0
c0018ad6:	68 74 84 01 c0       	push   0xc0018474
c0018adb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018adf:	e8 f0 fe ff ff       	call   c00189d4 <Process::createThread(void (*)(void*), void*, int)>
c0018ae4:	83 c4 1c             	add    esp,0x1c
c0018ae7:	c3                   	ret    

c0018ae8 <setupMultitasking(void (*)())>:
c0018ae8:	56                   	push   esi
c0018ae9:	53                   	push   ebx
c0018aea:	51                   	push   ecx
c0018aeb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018aef:	eb 13                	jmp    c0018b04 <setupMultitasking(void (*)())+0x1c>
c0018af1:	8d 76 00             	lea    esi,[esi+0x0]
c0018af4:	83 ec 0c             	sub    esp,0xc
c0018af7:	68 c4 9d 02 c0       	push   0xc0029dc4
c0018afc:	e8 c7 a7 00 00       	call   c00232c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b01:	83 c4 10             	add    esp,0x10
c0018b04:	83 ec 0c             	sub    esp,0xc
c0018b07:	68 c4 9d 02 c0       	push   0xc0029dc4
c0018b0c:	e8 93 a7 00 00       	call   c00232a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b11:	83 c4 10             	add    esp,0x10
c0018b14:	84 c0                	test   al,al
c0018b16:	74 dc                	je     c0018af4 <setupMultitasking(void (*)())+0xc>
c0018b18:	83 ec 0c             	sub    esp,0xc
c0018b1b:	68 1f 07 00 00       	push   0x71f
c0018b20:	e8 36 12 ff ff       	call   c0009d5b <malloc>
c0018b25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018b2c:	89 c3                	mov    ebx,eax
c0018b2e:	6a 00                	push   0x0
c0018b30:	68 5c 69 02 c0       	push   0xc002695c
c0018b35:	6a 01                	push   0x1
c0018b37:	50                   	push   eax
c0018b38:	e8 8f fc ff ff       	call   c00187cc <Process::Process(bool, char const*, Process*, char**)>
c0018b3d:	83 c4 14             	add    esp,0x14
c0018b40:	89 1d d0 9d 02 c0    	mov    DWORD PTR ds:0xc0029dd0,ebx
c0018b46:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018b4c:	e8 04 23 ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c0018b51:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018b59:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018b63:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018b69:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018b6c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018b76:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018b7c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018b82:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018b8c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018b96:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018ba0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018ba6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018bb0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018bb6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018bc0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018bc6:	58                   	pop    eax
c0018bc7:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018bcd:	5a                   	pop    edx
c0018bce:	68 58 69 02 c0       	push   0xc0026958
c0018bd3:	50                   	push   eax
c0018bd4:	e8 67 7b fe ff       	call   c0000740 <strcpy>
c0018bd9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018be0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018be4:	83 c4 14             	add    esp,0x14
c0018be7:	5b                   	pop    ebx
c0018be8:	5e                   	pop    esi
c0018be9:	e9 9b 76 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0018bee:	66 90                	xchg   ax,ax

c0018bf0 <schedule()>:
c0018bf0:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c0018bf5:	85 c0                	test   eax,eax
c0018bf7:	74 0b                	je     c0018c04 <schedule()+0x14>
c0018bf9:	c7 05 a0 9d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x1
c0018c03:	c3                   	ret    
c0018c04:	53                   	push   ebx
c0018c05:	83 ec 14             	sub    esp,0x14
c0018c08:	68 c4 9d 02 c0       	push   0xc0029dc4
c0018c0d:	e8 92 a6 00 00       	call   c00232a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c12:	83 c4 10             	add    esp,0x10
c0018c15:	84 c0                	test   al,al
c0018c17:	75 3b                	jne    c0018c54 <schedule()+0x64>
c0018c19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c1e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018c21:	4a                   	dec    edx
c0018c22:	74 38                	je     c0018c5c <schedule()+0x6c>
c0018c24:	83 ec 0c             	sub    esp,0xc
c0018c27:	68 c4 9d 02 c0       	push   0xc0029dc4
c0018c2c:	e8 8f a6 00 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c31:	c7 04 24 c4 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dc4
c0018c38:	89 c3                	mov    ebx,eax
c0018c3a:	e8 89 a6 00 00       	call   c00232c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c3f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018c46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c49:	e8 7e f8 ff ff       	call   c00184cc <switchToThread(ThreadControlBlock*)>
c0018c4e:	83 c4 10             	add    esp,0x10
c0018c51:	8d 76 00             	lea    esi,[esi+0x0]
c0018c54:	83 c4 08             	add    esp,0x8
c0018c57:	5b                   	pop    ebx
c0018c58:	c3                   	ret    
c0018c59:	8d 76 00             	lea    esi,[esi+0x0]
c0018c5c:	83 ec 08             	sub    esp,0x8
c0018c5f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018c66:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018c6c:	68 c4 9d 02 c0       	push   0xc0029dc4
c0018c71:	e8 0a a7 00 00       	call   c0023380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c76:	83 c4 10             	add    esp,0x10
c0018c79:	eb a9                	jmp    c0018c24 <schedule()+0x34>
c0018c7b:	90                   	nop

c0018c7c <Semaphore::tryAcquire()>:
c0018c7c:	53                   	push   ebx
c0018c7d:	83 ec 08             	sub    esp,0x8
c0018c80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018c84:	fa                   	cli    
c0018c85:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0018c8a:	8d 50 01             	lea    edx,[eax+0x1]
c0018c8d:	89 15 a8 9d 02 c0    	mov    DWORD PTR ds:0xc0029da8,edx
c0018c93:	8b 15 a4 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029da4
c0018c99:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018c9c:	89 1d a4 9d 02 c0    	mov    DWORD PTR ds:0xc0029da4,ebx
c0018ca2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018ca5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018ca7:	7c 33                	jl     c0018cdc <Semaphore::tryAcquire()+0x60>
c0018ca9:	89 15 a4 9d 02 c0    	mov    DWORD PTR ds:0xc0029da4,edx
c0018caf:	85 d2                	test   edx,edx
c0018cb1:	75 0d                	jne    c0018cc0 <Semaphore::tryAcquire()+0x44>
c0018cb3:	8b 15 a0 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029da0
c0018cb9:	85 d2                	test   edx,edx
c0018cbb:	75 6b                	jne    c0018d28 <Semaphore::tryAcquire()+0xac>
c0018cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0018cc0:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0018cc5:	85 c0                	test   eax,eax
c0018cc7:	74 0b                	je     c0018cd4 <Semaphore::tryAcquire()+0x58>
c0018cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ccc:	31 c0                	xor    eax,eax
c0018cce:	83 c4 08             	add    esp,0x8
c0018cd1:	5b                   	pop    ebx
c0018cd2:	c3                   	ret    
c0018cd3:	90                   	nop
c0018cd4:	fb                   	sti    
c0018cd5:	83 c4 08             	add    esp,0x8
c0018cd8:	5b                   	pop    ebx
c0018cd9:	c3                   	ret    
c0018cda:	66 90                	xchg   ax,ax
c0018cdc:	43                   	inc    ebx
c0018cdd:	89 15 a4 9d 02 c0    	mov    DWORD PTR ds:0xc0029da4,edx
c0018ce3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018ce6:	85 d2                	test   edx,edx
c0018ce8:	75 22                	jne    c0018d0c <Semaphore::tryAcquire()+0x90>
c0018cea:	8b 0d a0 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029da0
c0018cf0:	85 c9                	test   ecx,ecx
c0018cf2:	74 18                	je     c0018d0c <Semaphore::tryAcquire()+0x90>
c0018cf4:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c0018cfe:	e8 ed fe ff ff       	call   c0018bf0 <schedule()>
c0018d03:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0018d08:	48                   	dec    eax
c0018d09:	8d 76 00             	lea    esi,[esi+0x0]
c0018d0c:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0018d11:	85 c0                	test   eax,eax
c0018d13:	75 0b                	jne    c0018d20 <Semaphore::tryAcquire()+0xa4>
c0018d15:	fb                   	sti    
c0018d16:	b0 01                	mov    al,0x1
c0018d18:	83 c4 08             	add    esp,0x8
c0018d1b:	5b                   	pop    ebx
c0018d1c:	c3                   	ret    
c0018d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d20:	b0 01                	mov    al,0x1
c0018d22:	83 c4 08             	add    esp,0x8
c0018d25:	5b                   	pop    ebx
c0018d26:	c3                   	ret    
c0018d27:	90                   	nop
c0018d28:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c0018d32:	e8 b9 fe ff ff       	call   c0018bf0 <schedule()>
c0018d37:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0018d3c:	48                   	dec    eax
c0018d3d:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0018d42:	85 c0                	test   eax,eax
c0018d44:	75 86                	jne    c0018ccc <Semaphore::tryAcquire()+0x50>
c0018d46:	eb 8c                	jmp    c0018cd4 <Semaphore::tryAcquire()+0x58>

c0018d48 <Semaphore::assertLocked(char const*)>:
c0018d48:	83 ec 0c             	sub    esp,0xc
c0018d4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d4f:	fa                   	cli    
c0018d50:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0018d56:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c0018d5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0018d5e:	89 0d a4 9d 02 c0    	mov    DWORD PTR ds:0xc0029da4,ecx
c0018d64:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018d66:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018d69:	7c 29                	jl     c0018d94 <Semaphore::assertLocked(char const*)+0x4c>
c0018d6b:	90                   	nop
c0018d6c:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c0018d71:	85 c0                	test   eax,eax
c0018d73:	75 0b                	jne    c0018d80 <Semaphore::assertLocked(char const*)+0x38>
c0018d75:	a1 a0 9d 02 c0       	mov    eax,ds:0xc0029da0
c0018d7a:	85 c0                	test   eax,eax
c0018d7c:	75 2e                	jne    c0018dac <Semaphore::assertLocked(char const*)+0x64>
c0018d7e:	66 90                	xchg   ax,ax
c0018d80:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0018d85:	48                   	dec    eax
c0018d86:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0018d8b:	75 03                	jne    c0018d90 <Semaphore::assertLocked(char const*)+0x48>
c0018d8d:	fb                   	sti    
c0018d8e:	66 90                	xchg   ax,ax
c0018d90:	83 c4 0c             	add    esp,0xc
c0018d93:	c3                   	ret    
c0018d94:	83 ec 0c             	sub    esp,0xc
c0018d97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018d9b:	e8 45 c2 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0018da0:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c0018da5:	83 c4 10             	add    esp,0x10
c0018da8:	48                   	dec    eax
c0018da9:	eb c1                	jmp    c0018d6c <Semaphore::assertLocked(char const*)+0x24>
c0018dab:	90                   	nop
c0018dac:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c0018db6:	e8 35 fe ff ff       	call   c0018bf0 <schedule()>
c0018dbb:	eb c3                	jmp    c0018d80 <Semaphore::assertLocked(char const*)+0x38>
c0018dbd:	8d 76 00             	lea    esi,[esi+0x0]

c0018dc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018dc0:	83 ec 0c             	sub    esp,0xc
c0018dc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018dcc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018dcf:	e8 1c fe ff ff       	call   c0018bf0 <schedule()>
c0018dd4:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0018dd9:	48                   	dec    eax
c0018dda:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0018ddf:	75 03                	jne    c0018de4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018de1:	fb                   	sti    
c0018de2:	66 90                	xchg   ax,ax
c0018de4:	83 c4 0c             	add    esp,0xc
c0018de7:	c3                   	ret    

c0018de8 <blockTask(TaskState)>:
c0018de8:	83 ec 0c             	sub    esp,0xc
c0018deb:	fa                   	cli    
c0018dec:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0018df2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018df6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dfb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018dfe:	e8 ed fd ff ff       	call   c0018bf0 <schedule()>
c0018e03:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0018e08:	48                   	dec    eax
c0018e09:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0018e0e:	75 04                	jne    c0018e14 <blockTask(TaskState)+0x2c>
c0018e10:	fb                   	sti    
c0018e11:	8d 76 00             	lea    esi,[esi+0x0]
c0018e14:	83 c4 0c             	add    esp,0xc
c0018e17:	c3                   	ret    

c0018e18 <waitTask(int, int*, int)>:
c0018e18:	83 ec 18             	sub    esp,0x18
c0018e1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e24:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018e27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e30:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018e33:	6a 07                	push   0x7
c0018e35:	e8 ae ff ff ff       	call   c0018de8 <blockTask(TaskState)>
c0018e3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e3f:	83 c4 10             	add    esp,0x10
c0018e42:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018e45:	85 d2                	test   edx,edx
c0018e47:	74 0b                	je     c0018e54 <waitTask(int, int*, int)+0x3c>
c0018e49:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018e4c:	89 02                	mov    DWORD PTR [edx],eax
c0018e4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e53:	90                   	nop
c0018e54:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018e57:	83 c4 0c             	add    esp,0xc
c0018e5a:	c3                   	ret    
c0018e5b:	90                   	nop

c0018e5c <milliTenthSleepUntil(unsigned int)>:
c0018e5c:	83 ec 0c             	sub    esp,0xc
c0018e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e63:	39 05 ac 8e 02 c0    	cmp    DWORD PTR ds:0xc0028eac,eax
c0018e69:	76 05                	jbe    c0018e70 <milliTenthSleepUntil(unsigned int)+0x14>
c0018e6b:	90                   	nop
c0018e6c:	83 c4 0c             	add    esp,0xc
c0018e6f:	c3                   	ret    
c0018e70:	fa                   	cli    
c0018e71:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0018e77:	83 ec 08             	sub    esp,0x8
c0018e7a:	ff 05 a4 9d 02 c0    	inc    DWORD PTR ds:0xc0029da4
c0018e80:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018e86:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018e89:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018e8f:	68 b8 9d 02 c0       	push   0xc0029db8
c0018e94:	e8 e7 a4 00 00       	call   c0023380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e99:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018ea0:	e8 43 ff ff ff       	call   c0018de8 <blockTask(TaskState)>
c0018ea5:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c0018eaa:	83 c4 10             	add    esp,0x10
c0018ead:	48                   	dec    eax
c0018eae:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c0018eb3:	85 c0                	test   eax,eax
c0018eb5:	75 09                	jne    c0018ec0 <milliTenthSleepUntil(unsigned int)+0x64>
c0018eb7:	a1 a0 9d 02 c0       	mov    eax,ds:0xc0029da0
c0018ebc:	85 c0                	test   eax,eax
c0018ebe:	75 14                	jne    c0018ed4 <milliTenthSleepUntil(unsigned int)+0x78>
c0018ec0:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0018ec5:	48                   	dec    eax
c0018ec6:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0018ecb:	75 9f                	jne    c0018e6c <milliTenthSleepUntil(unsigned int)+0x10>
c0018ecd:	fb                   	sti    
c0018ece:	83 c4 0c             	add    esp,0xc
c0018ed1:	c3                   	ret    
c0018ed2:	66 90                	xchg   ax,ax
c0018ed4:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c0018ede:	e8 0d fd ff ff       	call   c0018bf0 <schedule()>
c0018ee3:	eb db                	jmp    c0018ec0 <milliTenthSleepUntil(unsigned int)+0x64>
c0018ee5:	8d 76 00             	lea    esi,[esi+0x0]

c0018ee8 <milliTenthSleep(unsigned int)>:
c0018ee8:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0018eed:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018ef1:	e9 66 ff ff ff       	jmp    c0018e5c <milliTenthSleepUntil(unsigned int)>
c0018ef6:	66 90                	xchg   ax,ax

c0018ef8 <sleep(unsigned int)>:
c0018ef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018efc:	8d 04 80             	lea    eax,[eax+eax*4]
c0018eff:	8d 04 80             	lea    eax,[eax+eax*4]
c0018f02:	8d 04 80             	lea    eax,[eax+eax*4]
c0018f05:	8d 04 80             	lea    eax,[eax+eax*4]
c0018f08:	c1 e0 04             	shl    eax,0x4
c0018f0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f0f:	eb d7                	jmp    c0018ee8 <milliTenthSleep(unsigned int)>
c0018f11:	90                   	nop
c0018f12:	66 90                	xchg   ax,ax

c0018f14 <Semaphore::acquire()>:
c0018f14:	83 ec 0c             	sub    esp,0xc
c0018f17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f1b:	fa                   	cli    
c0018f1c:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c0018f21:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0018f27:	8d 48 01             	lea    ecx,[eax+0x1]
c0018f2a:	89 0d a4 9d 02 c0    	mov    DWORD PTR ds:0xc0029da4,ecx
c0018f30:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018f33:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018f35:	7d 2d                	jge    c0018f64 <Semaphore::acquire()+0x50>
c0018f37:	41                   	inc    ecx
c0018f38:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018f3b:	90                   	nop
c0018f3c:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c0018f41:	85 c0                	test   eax,eax
c0018f43:	75 0b                	jne    c0018f50 <Semaphore::acquire()+0x3c>
c0018f45:	a1 a0 9d 02 c0       	mov    eax,ds:0xc0029da0
c0018f4a:	85 c0                	test   eax,eax
c0018f4c:	75 62                	jne    c0018fb0 <Semaphore::acquire()+0x9c>
c0018f4e:	66 90                	xchg   ax,ax
c0018f50:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0018f55:	48                   	dec    eax
c0018f56:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0018f5b:	75 03                	jne    c0018f60 <Semaphore::acquire()+0x4c>
c0018f5d:	fb                   	sti    
c0018f5e:	66 90                	xchg   ax,ax
c0018f60:	83 c4 0c             	add    esp,0xc
c0018f63:	c3                   	ret    
c0018f64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018f70:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018f73:	85 c9                	test   ecx,ecx
c0018f75:	74 4d                	je     c0018fc4 <Semaphore::acquire()+0xb0>
c0018f77:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018f7a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018f80:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018f83:	90                   	nop
c0018f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f89:	83 ec 0c             	sub    esp,0xc
c0018f8c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018f8f:	68 d8 69 02 c0       	push   0xc00269d8
c0018f94:	e8 ae 40 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0018f99:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018fa0:	e8 43 fe ff ff       	call   c0018de8 <blockTask(TaskState)>
c0018fa5:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c0018faa:	83 c4 10             	add    esp,0x10
c0018fad:	48                   	dec    eax
c0018fae:	eb 8c                	jmp    c0018f3c <Semaphore::acquire()+0x28>
c0018fb0:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c0018fba:	e8 31 fc ff ff       	call   c0018bf0 <schedule()>
c0018fbf:	eb 8f                	jmp    c0018f50 <Semaphore::acquire()+0x3c>
c0018fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fc9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018fcc:	eb b6                	jmp    c0018f84 <Semaphore::acquire()+0x70>
c0018fce:	66 90                	xchg   ax,ax

c0018fd0 <taskReturned>:
c0018fd0:	83 ec 18             	sub    esp,0x18
c0018fd3:	68 f8 69 02 c0       	push   0xc00269f8
c0018fd8:	e8 08 c0 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0018fdd:	83 c4 10             	add    esp,0x10
c0018fe0:	83 ec 0c             	sub    esp,0xc
c0018fe3:	6a 02                	push   0x2
c0018fe5:	e8 fe fd ff ff       	call   c0018de8 <blockTask(TaskState)>
c0018fea:	fa                   	cli    
c0018feb:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0018ff1:	e8 fa fb ff ff       	call   c0018bf0 <schedule()>
c0018ff6:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0018ffb:	83 c4 10             	add    esp,0x10
c0018ffe:	48                   	dec    eax
c0018fff:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0019004:	85 c0                	test   eax,eax
c0019006:	75 d8                	jne    c0018fe0 <taskReturned+0x10>
c0019008:	fb                   	sti    
c0019009:	eb d5                	jmp    c0018fe0 <taskReturned+0x10>
c001900b:	90                   	nop

c001900c <Thr::processFromPID(int)>:
c001900c:	57                   	push   edi
c001900d:	56                   	push   esi
c001900e:	53                   	push   ebx
c001900f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019013:	fa                   	cli    
c0019014:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c001901a:	83 ec 0c             	sub    esp,0xc
c001901d:	68 c4 9d 02 c0       	push   0xc0029dc4
c0019022:	e8 99 a2 00 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019027:	83 c4 10             	add    esp,0x10
c001902a:	89 c7                	mov    edi,eax
c001902c:	eb 16                	jmp    c0019044 <Thr::processFromPID(int)+0x38>
c001902e:	66 90                	xchg   ax,ax
c0019030:	83 ec 0c             	sub    esp,0xc
c0019033:	68 c4 9d 02 c0       	push   0xc0029dc4
c0019038:	e8 83 a2 00 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001903d:	83 c4 10             	add    esp,0x10
c0019040:	39 f8                	cmp    eax,edi
c0019042:	74 4c                	je     c0019090 <Thr::processFromPID(int)+0x84>
c0019044:	83 ec 0c             	sub    esp,0xc
c0019047:	68 c4 9d 02 c0       	push   0xc0029dc4
c001904c:	e8 6f a2 00 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019051:	c7 04 24 c4 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dc4
c0019058:	89 c3                	mov    ebx,eax
c001905a:	e8 69 a2 00 00       	call   c00232c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001905f:	58                   	pop    eax
c0019060:	5a                   	pop    edx
c0019061:	53                   	push   ebx
c0019062:	68 c4 9d 02 c0       	push   0xc0029dc4
c0019067:	e8 14 a3 00 00       	call   c0023380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001906c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001906f:	83 c4 10             	add    esp,0x10
c0019072:	39 30                	cmp    DWORD PTR [eax],esi
c0019074:	75 ba                	jne    c0019030 <Thr::processFromPID(int)+0x24>
c0019076:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c001907b:	48                   	dec    eax
c001907c:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0019081:	74 09                	je     c001908c <Thr::processFromPID(int)+0x80>
c0019083:	90                   	nop
c0019084:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019087:	5b                   	pop    ebx
c0019088:	5e                   	pop    esi
c0019089:	5f                   	pop    edi
c001908a:	c3                   	ret    
c001908b:	90                   	nop
c001908c:	fb                   	sti    
c001908d:	eb f5                	jmp    c0019084 <Thr::processFromPID(int)+0x78>
c001908f:	90                   	nop
c0019090:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0019095:	48                   	dec    eax
c0019096:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c001909b:	75 07                	jne    c00190a4 <Thr::processFromPID(int)+0x98>
c001909d:	fb                   	sti    
c001909e:	5b                   	pop    ebx
c001909f:	5e                   	pop    esi
c00190a0:	5f                   	pop    edi
c00190a1:	c3                   	ret    
c00190a2:	66 90                	xchg   ax,ax
c00190a4:	5b                   	pop    ebx
c00190a5:	31 c0                	xor    eax,eax
c00190a7:	5e                   	pop    esi
c00190a8:	5f                   	pop    edi
c00190a9:	c3                   	ret    
c00190aa:	66 90                	xchg   ax,ax

c00190ac <unblockTask(ThreadControlBlock*)>:
c00190ac:	53                   	push   ebx
c00190ad:	83 ec 08             	sub    esp,0x8
c00190b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00190b4:	fa                   	cli    
c00190b5:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c00190bb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00190be:	85 c0                	test   eax,eax
c00190c0:	74 66                	je     c0019128 <unblockTask(ThreadControlBlock*)+0x7c>
c00190c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00190c5:	48                   	dec    eax
c00190c6:	74 38                	je     c0019100 <unblockTask(ThreadControlBlock*)+0x54>
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	68 c4 9d 02 c0       	push   0xc0029dc4
c00190d0:	e8 eb a1 00 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00190d5:	83 c4 10             	add    esp,0x10
c00190d8:	85 c0                	test   eax,eax
c00190da:	75 1c                	jne    c00190f8 <unblockTask(ThreadControlBlock*)+0x4c>
c00190dc:	eb 5e                	jmp    c001913c <unblockTask(ThreadControlBlock*)+0x90>
c00190de:	66 90                	xchg   ax,ax
c00190e0:	83 ec 08             	sub    esp,0x8
c00190e3:	50                   	push   eax
c00190e4:	68 c4 9d 02 c0       	push   0xc0029dc4
c00190e9:	e8 82 a5 00 00       	call   c0023670 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00190ee:	83 c4 10             	add    esp,0x10
c00190f1:	85 c0                	test   eax,eax
c00190f3:	74 47                	je     c001913c <unblockTask(ThreadControlBlock*)+0x90>
c00190f5:	8d 76 00             	lea    esi,[esi+0x0]
c00190f8:	39 c3                	cmp    ebx,eax
c00190fa:	75 e4                	jne    c00190e0 <unblockTask(ThreadControlBlock*)+0x34>
c00190fc:	eb 12                	jmp    c0019110 <unblockTask(ThreadControlBlock*)+0x64>
c00190fe:	66 90                	xchg   ax,ax
c0019100:	83 ec 0c             	sub    esp,0xc
c0019103:	68 7a 69 02 c0       	push   0xc002697a
c0019108:	e8 3a 3f ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001910d:	83 c4 10             	add    esp,0x10
c0019110:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0019115:	48                   	dec    eax
c0019116:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c001911b:	75 03                	jne    c0019120 <unblockTask(ThreadControlBlock*)+0x74>
c001911d:	fb                   	sti    
c001911e:	66 90                	xchg   ax,ax
c0019120:	83 c4 08             	add    esp,0x8
c0019123:	5b                   	pop    ebx
c0019124:	c3                   	ret    
c0019125:	8d 76 00             	lea    esi,[esi+0x0]
c0019128:	83 ec 0c             	sub    esp,0xc
c001912b:	68 63 69 02 c0       	push   0xc0026963
c0019130:	e8 12 3f ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0019135:	83 c4 10             	add    esp,0x10
c0019138:	eb d6                	jmp    c0019110 <unblockTask(ThreadControlBlock*)+0x64>
c001913a:	66 90                	xchg   ax,ax
c001913c:	83 ec 08             	sub    esp,0x8
c001913f:	53                   	push   ebx
c0019140:	68 c4 9d 02 c0       	push   0xc0029dc4
c0019145:	e8 36 a2 00 00       	call   c0023380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001914a:	83 c4 10             	add    esp,0x10
c001914d:	eb c1                	jmp    c0019110 <unblockTask(ThreadControlBlock*)+0x64>
c001914f:	90                   	nop

c0019150 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019150:	55                   	push   ebp
c0019151:	57                   	push   edi
c0019152:	56                   	push   esi
c0019153:	53                   	push   ebx
c0019154:	83 ec 1c             	sub    esp,0x1c
c0019157:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001915b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001915e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0019164:	85 ff                	test   edi,edi
c0019166:	7e 24                	jle    c001918c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0019168:	31 f6                	xor    esi,esi
c001916a:	66 90                	xchg   ax,ax
c001916c:	83 ec 0c             	sub    esp,0xc
c001916f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0019176:	46                   	inc    esi
c0019177:	e8 ef 0b ff ff       	call   c0009d6b <free>
c001917c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001917f:	83 c4 10             	add    esp,0x10
c0019182:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0019188:	7f e2                	jg     c001916c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001918a:	66 90                	xchg   ax,ax
c001918c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0019196:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001919b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001919e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00191a1:	d3 c0                	rol    eax,cl
c00191a3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00191aa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00191ad:	89 f7                	mov    edi,esi
c00191af:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00191b7:	0f 85 73 01 00 00    	jne    c0019330 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00191bd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00191c3:	85 ed                	test   ebp,ebp
c00191c5:	74 1d                	je     c00191e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00191c7:	83 ec 0c             	sub    esp,0xc
c00191ca:	55                   	push   ebp
c00191cb:	e8 ba bb ff ff       	call   c0014d8a <EnvVarContainer::~EnvVarContainer()>
c00191d0:	59                   	pop    ecx
c00191d1:	5e                   	pop    esi
c00191d2:	6a 0c                	push   0xc
c00191d4:	55                   	push   ebp
c00191d5:	e8 8c 3d ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00191da:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00191dd:	83 c4 10             	add    esp,0x10
c00191e0:	89 f7                	mov    edi,esi
c00191e2:	66 90                	xchg   ax,ax
c00191e4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00191ea:	85 c0                	test   eax,eax
c00191ec:	0f 84 b2 00 00 00    	je     c00192a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00191f2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00191f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00191f9:	31 c9                	xor    ecx,ecx
c00191fb:	eb 17                	jmp    c0019214 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00191fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019200:	41                   	inc    ecx
c0019201:	83 f9 10             	cmp    ecx,0x10
c0019204:	0f 84 9a 00 00 00    	je     c00192a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001920a:	66 90                	xchg   ax,ax
c001920c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019212:	66 90                	xchg   ax,ax
c0019214:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001921b:	d3 fa                	sar    edx,cl
c001921d:	83 e2 01             	and    edx,0x1
c0019220:	74 de                	je     c0019200 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019222:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0019225:	01 d2                	add    edx,edx
c0019227:	01 ca                	add    edx,ecx
c0019229:	8d 14 92             	lea    edx,[edx+edx*4]
c001922c:	01 d0                	add    eax,edx
c001922e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0019234:	83 fd 07             	cmp    ebp,0x7
c0019237:	75 c7                	jne    c0019200 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019239:	05 40 02 00 00       	add    eax,0x240
c001923e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0019241:	83 fd ff             	cmp    ebp,0xffffffff
c0019244:	0f 8c ee 00 00 00    	jl     c0019338 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001924a:	0f 84 ac 01 00 00    	je     c00193fc <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0019250:	85 ed                	test   ebp,ebp
c0019252:	0f 84 90 01 00 00    	je     c00193e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0019258:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001925a:	75 a4                	jne    c0019200 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001925c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019262:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019266:	01 d0                	add    eax,edx
c0019268:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001926c:	83 ec 0c             	sub    esp,0xc
c001926f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0019275:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019278:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001927e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019285:	50                   	push   eax
c0019286:	e8 21 fe ff ff       	call   c00190ac <unblockTask(ThreadControlBlock*)>
c001928b:	83 c4 10             	add    esp,0x10
c001928e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019291:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019295:	89 f7                	mov    edi,esi
c0019297:	41                   	inc    ecx
c0019298:	83 f9 10             	cmp    ecx,0x10
c001929b:	0f 85 6b ff ff ff    	jne    c001920c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00192a1:	8d 76 00             	lea    esi,[esi+0x0]
c00192a4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00192aa:	85 c0                	test   eax,eax
c00192ac:	74 62                	je     c0019310 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00192ae:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00192b4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00192ba:	74 54                	je     c0019310 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00192bc:	83 ec 0c             	sub    esp,0xc
c00192bf:	68 c4 9d 02 c0       	push   0xc0029dc4
c00192c4:	e8 f7 9f 00 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00192c9:	c7 04 24 c4 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dc4
c00192d0:	89 c7                	mov    edi,eax
c00192d2:	e8 cd 9f 00 00       	call   c00232a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	84 c0                	test   al,al
c00192dc:	0f 84 ce 00 00 00    	je     c00193b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00192e2:	66 90                	xchg   ax,ax
c00192e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00192e7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00192ed:	85 d2                	test   edx,edx
c00192ef:	74 0f                	je     c0019300 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00192f1:	83 ec 0c             	sub    esp,0xc
c00192f4:	8b 02                	mov    eax,DWORD PTR [edx]
c00192f6:	52                   	push   edx
c00192f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00192fa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001930a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001930d:	8d 76 00             	lea    esi,[esi+0x0]
c0019310:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0019316:	85 db                	test   ebx,ebx
c0019318:	74 16                	je     c0019330 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001931a:	83 ec 0c             	sub    esp,0xc
c001931d:	53                   	push   ebx
c001931e:	e8 29 2f ff ff       	call   c000c24c <VAS::~VAS()>
c0019323:	58                   	pop    eax
c0019324:	5a                   	pop    edx
c0019325:	6a 14                	push   0x14
c0019327:	53                   	push   ebx
c0019328:	e8 39 3c ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001932d:	83 c4 10             	add    esp,0x10
c0019330:	83 c4 1c             	add    esp,0x1c
c0019333:	5b                   	pop    ebx
c0019334:	5e                   	pop    esi
c0019335:	5f                   	pop    edi
c0019336:	5d                   	pop    ebp
c0019337:	c3                   	ret    
c0019338:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001933c:	83 ec 0c             	sub    esp,0xc
c001933f:	68 2c 6a 02 c0       	push   0xc0026a2c
c0019344:	e8 9c bc ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0019349:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001934c:	83 c4 10             	add    esp,0x10
c001934f:	89 f7                	mov    edi,esi
c0019351:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019355:	e9 a6 fe ff ff       	jmp    c0019200 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001935a:	66 90                	xchg   ax,ax
c001935c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019362:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0019368:	75 1e                	jne    c0019388 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001936a:	83 ec 0c             	sub    esp,0xc
c001936d:	68 94 6a 02 c0       	push   0xc0026a94
c0019372:	e8 d0 3c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0019377:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001937e:	e8 65 fa ff ff       	call   c0018de8 <blockTask(TaskState)>
c0019383:	83 c4 10             	add    esp,0x10
c0019386:	66 90                	xchg   ax,ax
c0019388:	83 ec 08             	sub    esp,0x8
c001938b:	56                   	push   esi
c001938c:	68 c4 9d 02 c0       	push   0xc0029dc4
c0019391:	e8 ea 9f 00 00       	call   c0023380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019396:	c7 04 24 c4 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dc4
c001939d:	e8 1e 9f 00 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193a2:	83 c4 10             	add    esp,0x10
c00193a5:	39 f8                	cmp    eax,edi
c00193a7:	0f 84 37 ff ff ff    	je     c00192e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00193ad:	8d 76 00             	lea    esi,[esi+0x0]
c00193b0:	83 ec 0c             	sub    esp,0xc
c00193b3:	68 c4 9d 02 c0       	push   0xc0029dc4
c00193b8:	e8 03 9f 00 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193bd:	c7 04 24 c4 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dc4
c00193c4:	89 c6                	mov    esi,eax
c00193c6:	e8 fd 9e 00 00       	call   c00232c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00193cb:	83 c4 10             	add    esp,0x10
c00193ce:	39 f3                	cmp    ebx,esi
c00193d0:	74 b6                	je     c0019388 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00193d2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00193d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193d8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00193de:	75 a8                	jne    c0019388 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00193e0:	e9 77 ff ff ff       	jmp    c001935c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00193e5:	8d 76 00             	lea    esi,[esi+0x0]
c00193e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193ec:	83 ec 0c             	sub    esp,0xc
c00193ef:	68 60 6a 02 c0       	push   0xc0026a60
c00193f4:	e9 4b ff ff ff       	jmp    c0019344 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00193f9:	8d 76 00             	lea    esi,[esi+0x0]
c00193fc:	8b 36                	mov    esi,DWORD PTR [esi]
c00193fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019402:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0019405:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019408:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001940e:	01 d7                	add    edi,edx
c0019410:	89 f8                	mov    eax,edi
c0019412:	e9 51 fe ff ff       	jmp    c0019268 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0019417:	90                   	nop

c0019418 <cleanerTaskFunction(void*)>:
c0019418:	53                   	push   ebx
c0019419:	83 ec 08             	sub    esp,0x8
c001941c:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0019421:	48                   	dec    eax
c0019422:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0019427:	75 03                	jne    c001942c <cleanerTaskFunction(void*)+0x14>
c0019429:	fb                   	sti    
c001942a:	66 90                	xchg   ax,ax
c001942c:	fa                   	cli    
c001942d:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0019432:	80 3d 8c 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d8c,0x0
c0019439:	8d 50 01             	lea    edx,[eax+0x1]
c001943c:	89 15 a8 9d 02 c0    	mov    DWORD PTR ds:0xc0029da8,edx
c0019442:	0f 84 ac 00 00 00    	je     c00194f4 <cleanerTaskFunction(void*)+0xdc>
c0019448:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c001944d:	85 c0                	test   eax,eax
c001944f:	75 03                	jne    c0019454 <cleanerTaskFunction(void*)+0x3c>
c0019451:	fb                   	sti    
c0019452:	66 90                	xchg   ax,ax
c0019454:	c6 05 8c 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d8c,0x0
c001945b:	fa                   	cli    
c001945c:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0019462:	ff 05 a4 9d 02 c0    	inc    DWORD PTR ds:0xc0029da4
c0019468:	fa                   	cli    
c0019469:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c001946f:	eb 2b                	jmp    c001949c <cleanerTaskFunction(void*)+0x84>
c0019471:	8d 76 00             	lea    esi,[esi+0x0]
c0019474:	83 ec 0c             	sub    esp,0xc
c0019477:	68 ac 9d 02 c0       	push   0xc0029dac
c001947c:	e8 3f 9e 00 00       	call   c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019481:	c7 04 24 ac 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dac
c0019488:	89 c3                	mov    ebx,eax
c001948a:	e8 39 9e 00 00       	call   c00232c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001948f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019492:	e8 b9 fc ff ff       	call   c0019150 <cleanupTerminatedTask(ThreadControlBlock*)>
c0019497:	83 c4 10             	add    esp,0x10
c001949a:	66 90                	xchg   ax,ax
c001949c:	83 ec 0c             	sub    esp,0xc
c001949f:	68 ac 9d 02 c0       	push   0xc0029dac
c00194a4:	e8 fb 9d 00 00       	call   c00232a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00194a9:	83 c4 10             	add    esp,0x10
c00194ac:	84 c0                	test   al,al
c00194ae:	74 c4                	je     c0019474 <cleanerTaskFunction(void*)+0x5c>
c00194b0:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c00194b5:	48                   	dec    eax
c00194b6:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c00194bb:	75 03                	jne    c00194c0 <cleanerTaskFunction(void*)+0xa8>
c00194bd:	fb                   	sti    
c00194be:	66 90                	xchg   ax,ax
c00194c0:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c00194c5:	48                   	dec    eax
c00194c6:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c00194cb:	0f 85 4b ff ff ff    	jne    c001941c <cleanerTaskFunction(void*)+0x4>
c00194d1:	a1 a0 9d 02 c0       	mov    eax,ds:0xc0029da0
c00194d6:	85 c0                	test   eax,eax
c00194d8:	0f 84 3e ff ff ff    	je     c001941c <cleanerTaskFunction(void*)+0x4>
c00194de:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c00194e8:	e8 03 f7 ff ff       	call   c0018bf0 <schedule()>
c00194ed:	e9 2a ff ff ff       	jmp    c001941c <cleanerTaskFunction(void*)+0x4>
c00194f2:	66 90                	xchg   ax,ax
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	6a 02                	push   0x2
c00194f9:	e8 c2 f8 ff ff       	call   c0018dc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00194fe:	83 c4 10             	add    esp,0x10
c0019501:	e9 4e ff ff ff       	jmp    c0019454 <cleanerTaskFunction(void*)+0x3c>
c0019506:	66 90                	xchg   ax,ax

c0019508 <terminateTask(int)>:
c0019508:	83 ec 14             	sub    esp,0x14
c001950b:	fa                   	cli    
c001950c:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0019512:	ff 05 a4 9d 02 c0    	inc    DWORD PTR ds:0xc0029da4
c0019518:	fa                   	cli    
c0019519:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c001951f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019523:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019528:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001952b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019530:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019533:	50                   	push   eax
c0019534:	68 ac 9d 02 c0       	push   0xc0029dac
c0019539:	e8 42 9e 00 00       	call   c0023380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001953e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019543:	83 c4 10             	add    esp,0x10
c0019546:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001954d:	a1 88 9d 02 c0       	mov    eax,ds:0xc0029d88
c0019552:	85 c0                	test   eax,eax
c0019554:	74 5e                	je     c00195b4 <terminateTask(int)+0xac>
c0019556:	83 ec 0c             	sub    esp,0xc
c0019559:	c6 05 8c 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d8c,0x1
c0019560:	50                   	push   eax
c0019561:	e8 46 fb ff ff       	call   c00190ac <unblockTask(ThreadControlBlock*)>
c0019566:	83 c4 10             	add    esp,0x10
c0019569:	8d 76 00             	lea    esi,[esi+0x0]
c001956c:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0019571:	48                   	dec    eax
c0019572:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0019577:	75 03                	jne    c001957c <terminateTask(int)+0x74>
c0019579:	fb                   	sti    
c001957a:	66 90                	xchg   ax,ax
c001957c:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c0019581:	48                   	dec    eax
c0019582:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c0019587:	75 0b                	jne    c0019594 <terminateTask(int)+0x8c>
c0019589:	83 3d a0 9d 02 c0 00 	cmp    DWORD PTR ds:0xc0029da0,0x0
c0019590:	75 36                	jne    c00195c8 <terminateTask(int)+0xc0>
c0019592:	66 90                	xchg   ax,ax
c0019594:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0019599:	48                   	dec    eax
c001959a:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c001959f:	75 03                	jne    c00195a4 <terminateTask(int)+0x9c>
c00195a1:	fb                   	sti    
c00195a2:	66 90                	xchg   ax,ax
c00195a4:	fa                   	cli    
c00195a5:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c00195ab:	90                   	nop
c00195ac:	e8 3f f6 ff ff       	call   c0018bf0 <schedule()>
c00195b1:	eb e1                	jmp    c0019594 <terminateTask(int)+0x8c>
c00195b3:	90                   	nop
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	68 91 69 02 c0       	push   0xc0026991
c00195bc:	e8 86 3a ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00195c1:	83 c4 10             	add    esp,0x10
c00195c4:	eb a6                	jmp    c001956c <terminateTask(int)+0x64>
c00195c6:	66 90                	xchg   ax,ax
c00195c8:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c00195d2:	eb d8                	jmp    c00195ac <terminateTask(int)+0xa4>

c00195d4 <Thr::terminateFromIRQ(int)>:
c00195d4:	83 ec 18             	sub    esp,0x18
c00195d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00195db:	e8 28 ff ff ff       	call   c0019508 <terminateTask(int)>

c00195e0 <Semaphore::release()>:
c00195e0:	83 ec 0c             	sub    esp,0xc
c00195e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195e7:	fa                   	cli    
c00195e8:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c00195ed:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c00195f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00195f6:	89 0d a4 9d 02 c0    	mov    DWORD PTR ds:0xc0029da4,ecx
c00195fc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00195ff:	85 c9                	test   ecx,ecx
c0019601:	74 41                	je     c0019644 <Semaphore::release()+0x64>
c0019603:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0019606:	83 ec 0c             	sub    esp,0xc
c0019609:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001960c:	51                   	push   ecx
c001960d:	e8 9a fa ff ff       	call   c00190ac <unblockTask(ThreadControlBlock*)>
c0019612:	a1 a4 9d 02 c0       	mov    eax,ds:0xc0029da4
c0019617:	83 c4 10             	add    esp,0x10
c001961a:	48                   	dec    eax
c001961b:	90                   	nop
c001961c:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c0019621:	85 c0                	test   eax,eax
c0019623:	75 0b                	jne    c0019630 <Semaphore::release()+0x50>
c0019625:	a1 a0 9d 02 c0       	mov    eax,ds:0xc0029da0
c001962a:	85 c0                	test   eax,eax
c001962c:	75 1e                	jne    c001964c <Semaphore::release()+0x6c>
c001962e:	66 90                	xchg   ax,ax
c0019630:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0019635:	48                   	dec    eax
c0019636:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c001963b:	75 03                	jne    c0019640 <Semaphore::release()+0x60>
c001963d:	fb                   	sti    
c001963e:	66 90                	xchg   ax,ax
c0019640:	83 c4 0c             	add    esp,0xc
c0019643:	c3                   	ret    
c0019644:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0019647:	eb d3                	jmp    c001961c <Semaphore::release()+0x3c>
c0019649:	8d 76 00             	lea    esi,[esi+0x0]
c001964c:	c7 05 a0 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029da0,0x0
c0019656:	e8 95 f5 ff ff       	call   c0018bf0 <schedule()>
c001965b:	eb d3                	jmp    c0019630 <Semaphore::release()+0x50>
c001965d:	8d 76 00             	lea    esi,[esi+0x0]

c0019660 <__static_initialization_and_destruction_0(int, int)>:
c0019660:	83 ec 0c             	sub    esp,0xc
c0019663:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019668:	0f 85 8e 00 00 00    	jne    c00196fc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001966e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019676:	0f 85 80 00 00 00    	jne    c00196fc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001967c:	83 ec 0c             	sub    esp,0xc
c001967f:	68 c4 9d 02 c0       	push   0xc0029dc4
c0019684:	e8 a3 9f 00 00       	call   c002362c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019689:	83 c4 10             	add    esp,0x10
c001968c:	83 ec 04             	sub    esp,0x4
c001968f:	68 dc 7a 02 c0       	push   0xc0027adc
c0019694:	68 c4 9d 02 c0       	push   0xc0029dc4
c0019699:	68 dc 35 02 c0       	push   0xc00235dc
c001969e:	e8 3d 38 ff ff       	call   c000cee0 <__cxa_atexit>
c00196a3:	83 c4 10             	add    esp,0x10
c00196a6:	83 ec 0c             	sub    esp,0xc
c00196a9:	68 b8 9d 02 c0       	push   0xc0029db8
c00196ae:	e8 79 9f 00 00       	call   c002362c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00196b3:	83 c4 10             	add    esp,0x10
c00196b6:	83 ec 04             	sub    esp,0x4
c00196b9:	68 dc 7a 02 c0       	push   0xc0027adc
c00196be:	68 b8 9d 02 c0       	push   0xc0029db8
c00196c3:	68 dc 35 02 c0       	push   0xc00235dc
c00196c8:	e8 13 38 ff ff       	call   c000cee0 <__cxa_atexit>
c00196cd:	83 c4 10             	add    esp,0x10
c00196d0:	83 ec 0c             	sub    esp,0xc
c00196d3:	68 ac 9d 02 c0       	push   0xc0029dac
c00196d8:	e8 4f 9f 00 00       	call   c002362c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00196dd:	83 c4 10             	add    esp,0x10
c00196e0:	83 ec 04             	sub    esp,0x4
c00196e3:	68 dc 7a 02 c0       	push   0xc0027adc
c00196e8:	68 ac 9d 02 c0       	push   0xc0029dac
c00196ed:	68 dc 35 02 c0       	push   0xc00235dc
c00196f2:	e8 e9 37 ff ff       	call   c000cee0 <__cxa_atexit>
c00196f7:	83 c4 10             	add    esp,0x10
c00196fa:	66 90                	xchg   ax,ax
c00196fc:	90                   	nop
c00196fd:	83 c4 0c             	add    esp,0xc
c0019700:	c3                   	ret    
c0019701:	8d 76 00             	lea    esi,[esi+0x0]

c0019704 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019704:	83 ec 0c             	sub    esp,0xc
c0019707:	83 ec 08             	sub    esp,0x8
c001970a:	68 ff ff 00 00       	push   0xffff
c001970f:	6a 01                	push   0x1
c0019711:	e8 4a ff ff ff       	call   c0019660 <__static_initialization_and_destruction_0(int, int)>
c0019716:	83 c4 10             	add    esp,0x10
c0019719:	83 c4 0c             	add    esp,0xc
c001971c:	c3                   	ret    

c001971d <Vm::inbv(unsigned short)>:
c001971d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019721:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019726:	75 06                	jne    c001972e <Vm::inbv(unsigned short)+0x11>
c0019728:	a0 0c 9e 02 c0       	mov    al,ds:0xc0029e0c
c001972d:	c3                   	ret    
c001972e:	ec                   	in     al,dx
c001972f:	c3                   	ret    

c0019730 <Vm::outbv(unsigned short, unsigned char)>:
c0019730:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019734:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019738:	66 81 fa fe fe       	cmp    dx,0xfefe
c001973d:	75 25                	jne    c0019764 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001973f:	8b 0d 0c 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029e0c
c0019745:	8d 51 01             	lea    edx,[ecx+0x1]
c0019748:	88 81 20 9e 02 c0    	mov    BYTE PTR [ecx-0x3ffd61e0],al
c001974e:	89 15 0c 9e 02 c0    	mov    DWORD PTR ds:0xc0029e0c,edx
c0019754:	83 fa 20             	cmp    edx,0x20
c0019757:	75 0c                	jne    c0019765 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019759:	c7 05 0c 9e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0029e0c,0x1f
c0019763:	c3                   	ret    
c0019764:	ee                   	out    dx,al
c0019765:	c3                   	ret    

c0019766 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019766:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001976b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019770:	c1 e0 04             	shl    eax,0x4
c0019773:	01 d0                	add    eax,edx
c0019775:	c3                   	ret    

c0019776 <Vm::getSegment(unsigned int)>:
c0019776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001977a:	c1 e8 10             	shr    eax,0x10
c001977d:	c3                   	ret    

c001977e <Vm::getOffset(unsigned int)>:
c001977e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019782:	c3                   	ret    

c0019783 <Vm::mainloop2()>:
c0019783:	83 ec 18             	sub    esp,0x18
c0019786:	fa                   	cli    
c0019787:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c001978d:	6a 02                	push   0x2
c001978f:	c6 05 05 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029e05,0x1
c0019796:	e8 25 f6 ff ff       	call   c0018dc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001979b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00197a0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00197a4:	52                   	push   edx
c00197a5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00197a9:	52                   	push   edx
c00197aa:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00197ae:	52                   	push   edx
c00197af:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00197b3:	50                   	push   eax
c00197b4:	e8 76 6a fe ff       	call   c000022f <goToVM86>
c00197b9:	83 c4 2c             	add    esp,0x2c
c00197bc:	c3                   	ret    

c00197bd <Vm::mainVm8086Loop(void*)>:
c00197bd:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c00197c2:	48                   	dec    eax
c00197c3:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c00197c8:	75 01                	jne    c00197cb <Vm::mainVm8086Loop(void*)+0xe>
c00197ca:	fb                   	sti    
c00197cb:	eb b6                	jmp    c0019783 <Vm::mainloop2()>

c00197cd <Vm::mainloop3(unsigned long)>:
c00197cd:	83 ec 18             	sub    esp,0x18
c00197d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197d4:	fa                   	cli    
c00197d5:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c00197db:	6a 02                	push   0x2
c00197dd:	c6 05 04 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029e04,0x1
c00197e4:	a3 00 9e 02 c0       	mov    ds:0xc0029e00,eax
c00197e9:	e8 d2 f5 ff ff       	call   c0018dc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00197ee:	83 c4 1c             	add    esp,0x1c
c00197f1:	eb 90                	jmp    c0019783 <Vm::mainloop2()>

c00197f3 <Vm::initialise8086()>:
c00197f3:	83 ec 0c             	sub    esp,0xc
c00197f6:	68 80 00 00 00       	push   0x80
c00197fb:	6a 00                	push   0x0
c00197fd:	68 bd 97 01 c0       	push   0xc00197bd
c0019802:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c0019808:	e8 c7 f1 ff ff       	call   c00189d4 <Process::createThread(void (*)(void*), void*, int)>
c001980d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019814:	a3 08 9e 02 c0       	mov    ds:0xc0029e08,eax
c0019819:	68 00 01 00 00       	push   0x100
c001981e:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c0019823:	6a 00                	push   0x0
c0019825:	6a 00                	push   0x0
c0019827:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001982d:	e8 8c 2e ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019832:	83 c4 2c             	add    esp,0x2c
c0019835:	c3                   	ret    

c0019836 <Vm::finish8086()>:
c0019836:	53                   	push   ebx
c0019837:	83 ec 08             	sub    esp,0x8
c001983a:	fa                   	cli    
c001983b:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0019841:	80 3d 04 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029e04,0x0
c0019848:	75 15                	jne    c001985f <Vm::finish8086()+0x29>
c001984a:	e8 a1 f3 ff ff       	call   c0018bf0 <schedule()>
c001984f:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0019854:	48                   	dec    eax
c0019855:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c001985a:	75 de                	jne    c001983a <Vm::finish8086()+0x4>
c001985c:	fb                   	sti    
c001985d:	eb db                	jmp    c001983a <Vm::finish8086()+0x4>
c001985f:	83 ec 0c             	sub    esp,0xc
c0019862:	8b 1d 00 9e 02 c0    	mov    ebx,DWORD PTR ds:0xc0029e00
c0019868:	ff 35 08 9e 02 c0    	push   DWORD PTR ds:0xc0029e08
c001986e:	c6 05 04 9e 02 c0 00 	mov    BYTE PTR ds:0xc0029e04,0x0
c0019875:	e8 32 f8 ff ff       	call   c00190ac <unblockTask(ThreadControlBlock*)>
c001987a:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c001987f:	83 c4 10             	add    esp,0x10
c0019882:	8d 50 ff             	lea    edx,[eax-0x1]
c0019885:	89 15 a8 9d 02 c0    	mov    DWORD PTR ds:0xc0029da8,edx
c001988b:	85 d2                	test   edx,edx
c001988d:	75 01                	jne    c0019890 <Vm::finish8086()+0x5a>
c001988f:	fb                   	sti    
c0019890:	89 d8                	mov    eax,ebx
c0019892:	83 c4 08             	add    esp,0x8
c0019895:	5b                   	pop    ebx
c0019896:	c3                   	ret    

c0019897 <Vm::getOutput8086(unsigned char*)>:
c0019897:	57                   	push   edi
c0019898:	8b 0d 0c 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029e0c
c001989e:	56                   	push   esi
c001989f:	be 20 9e 02 c0       	mov    esi,0xc0029e20
c00198a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00198a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198aa:	a1 0c 9e 02 c0       	mov    eax,ds:0xc0029e0c
c00198af:	5e                   	pop    esi
c00198b0:	c7 05 0c 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e0c,0x0
c00198ba:	5f                   	pop    edi
c00198bb:	c3                   	ret    

c00198bc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00198bc:	55                   	push   ebp
c00198bd:	57                   	push   edi
c00198be:	56                   	push   esi
c00198bf:	53                   	push   ebx
c00198c0:	83 ec 0c             	sub    esp,0xc
c00198c3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00198c7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00198cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00198cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00198d3:	fa                   	cli    
c00198d4:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c00198da:	80 3d 05 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029e05,0x0
c00198e1:	75 15                	jne    c00198f8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00198e3:	e8 08 f3 ff ff       	call   c0018bf0 <schedule()>
c00198e8:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c00198ed:	48                   	dec    eax
c00198ee:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c00198f3:	75 de                	jne    c00198d3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00198f5:	fb                   	sti    
c00198f6:	eb db                	jmp    c00198d3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00198f8:	a1 08 9e 02 c0       	mov    eax,ds:0xc0029e08
c00198fd:	c7 05 0c 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e0c,0x0
c0019907:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001990b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001990f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019913:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019917:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001991b:	0f b7 ff             	movzx  edi,di
c001991e:	0f b7 f6             	movzx  esi,si
c0019921:	50                   	push   eax
c0019922:	6a 20                	push   0x20
c0019924:	6a 00                	push   0x0
c0019926:	68 20 9e 02 c0       	push   0xc0029e20
c001992b:	e8 54 6d fe ff       	call   c0000684 <memset>
c0019930:	5a                   	pop    edx
c0019931:	59                   	pop    ecx
c0019932:	57                   	push   edi
c0019933:	56                   	push   esi
c0019934:	e8 2d fe ff ff       	call   c0019766 <Vm::realToLinear(unsigned short, unsigned short)>
c0019939:	83 c4 10             	add    esp,0x10
c001993c:	89 c7                	mov    edi,eax
c001993e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019942:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019946:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019948:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c001994d:	c6 05 05 9e 02 c0 00 	mov    BYTE PTR ds:0xc0029e05,0x0
c0019954:	48                   	dec    eax
c0019955:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c001995a:	75 01                	jne    c001995d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001995c:	fb                   	sti    
c001995d:	83 ec 0c             	sub    esp,0xc
c0019960:	ff 35 08 9e 02 c0    	push   DWORD PTR ds:0xc0029e08
c0019966:	e8 41 f7 ff ff       	call   c00190ac <unblockTask(ThreadControlBlock*)>
c001996b:	83 c4 1c             	add    esp,0x1c
c001996e:	b0 01                	mov    al,0x1
c0019970:	5b                   	pop    ebx
c0019971:	5e                   	pop    esi
c0019972:	5f                   	pop    edi
c0019973:	5d                   	pop    ebp
c0019974:	c3                   	ret    

c0019975 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019975:	55                   	push   ebp
c0019976:	57                   	push   edi
c0019977:	56                   	push   esi
c0019978:	53                   	push   ebx
c0019979:	83 ec 2c             	sub    esp,0x2c
c001997c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019980:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019984:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019988:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001998c:	fa                   	cli    
c001998d:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0019993:	0f b6 35 05 9e 02 c0 	movzx  esi,BYTE PTR ds:0xc0029e05
c001999a:	89 f0                	mov    eax,esi
c001999c:	84 c0                	test   al,al
c001999e:	75 1d                	jne    c00199bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00199a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00199a4:	e8 47 f2 ff ff       	call   c0018bf0 <schedule()>
c00199a9:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c00199ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00199b2:	48                   	dec    eax
c00199b3:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c00199b8:	75 d2                	jne    c001998c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00199ba:	fb                   	sti    
c00199bb:	eb cf                	jmp    c001998c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00199bd:	a1 08 9e 02 c0       	mov    eax,ds:0xc0029e08
c00199c2:	c7 05 0c 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e0c,0x0
c00199cc:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00199d0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00199d4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00199d8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00199dc:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00199e0:	50                   	push   eax
c00199e1:	6a 20                	push   0x20
c00199e3:	6a 00                	push   0x0
c00199e5:	68 20 9e 02 c0       	push   0xc0029e20
c00199ea:	e8 95 6c fe ff       	call   c0000684 <memset>
c00199ef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00199f6:	e8 60 03 ff ff       	call   c0009d5b <malloc>
c00199fb:	83 c4 0c             	add    esp,0xc
c00199fe:	89 c3                	mov    ebx,eax
c0019a00:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c0019a06:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019a0a:	50                   	push   eax
c0019a0b:	e8 a2 3b ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	85 db                	test   ebx,ebx
c0019a15:	75 0a                	jne    c0019a21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019a17:	83 ec 0c             	sub    esp,0xc
c0019a1a:	68 bc 6a 02 c0       	push   0xc0026abc
c0019a1f:	eb 3e                	jmp    c0019a5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019a21:	50                   	push   eax
c0019a22:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019a26:	50                   	push   eax
c0019a27:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019a2b:	50                   	push   eax
c0019a2c:	53                   	push   ebx
c0019a2d:	e8 06 3f ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c0019a32:	83 c4 10             	add    esp,0x10
c0019a35:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019a3a:	74 0a                	je     c0019a46 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019a3c:	83 ec 0c             	sub    esp,0xc
c0019a3f:	68 d0 6a 02 c0       	push   0xc0026ad0
c0019a44:	eb 19                	jmp    c0019a5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019a46:	51                   	push   ecx
c0019a47:	51                   	push   ecx
c0019a48:	6a 01                	push   0x1
c0019a4a:	53                   	push   ebx
c0019a4b:	e8 3c 3c ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0019a50:	83 c4 10             	add    esp,0x10
c0019a53:	85 c0                	test   eax,eax
c0019a55:	74 24                	je     c0019a7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019a57:	83 ec 0c             	sub    esp,0xc
c0019a5a:	68 e9 6a 02 c0       	push   0xc0026ae9
c0019a5f:	e8 81 b5 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0019a64:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0019a69:	83 c4 10             	add    esp,0x10
c0019a6c:	48                   	dec    eax
c0019a6d:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0019a72:	85 c0                	test   eax,eax
c0019a74:	75 01                	jne    c0019a77 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019a76:	fb                   	sti    
c0019a77:	31 f6                	xor    esi,esi
c0019a79:	eb 58                	jmp    c0019ad3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019a7b:	0f b7 ed             	movzx  ebp,bp
c0019a7e:	50                   	push   eax
c0019a7f:	0f b7 ff             	movzx  edi,di
c0019a82:	50                   	push   eax
c0019a83:	55                   	push   ebp
c0019a84:	57                   	push   edi
c0019a85:	e8 dc fc ff ff       	call   c0019766 <Vm::realToLinear(unsigned short, unsigned short)>
c0019a8a:	5a                   	pop    edx
c0019a8b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019a8d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a91:	51                   	push   ecx
c0019a92:	50                   	push   eax
c0019a93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a9b:	53                   	push   ebx
c0019a9c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019a9f:	83 c4 14             	add    esp,0x14
c0019aa2:	53                   	push   ebx
c0019aa3:	e8 42 3c ff ff       	call   c000d6ea <File::close()>
c0019aa8:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0019aad:	83 c4 10             	add    esp,0x10
c0019ab0:	48                   	dec    eax
c0019ab1:	c6 05 05 9e 02 c0 00 	mov    BYTE PTR ds:0xc0029e05,0x0
c0019ab8:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0019abd:	85 c0                	test   eax,eax
c0019abf:	75 01                	jne    c0019ac2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019ac1:	fb                   	sti    
c0019ac2:	83 ec 0c             	sub    esp,0xc
c0019ac5:	ff 35 08 9e 02 c0    	push   DWORD PTR ds:0xc0029e08
c0019acb:	e8 dc f5 ff ff       	call   c00190ac <unblockTask(ThreadControlBlock*)>
c0019ad0:	83 c4 10             	add    esp,0x10
c0019ad3:	83 c4 2c             	add    esp,0x2c
c0019ad6:	89 f0                	mov    eax,esi
c0019ad8:	5b                   	pop    ebx
c0019ad9:	5e                   	pop    esi
c0019ada:	5f                   	pop    edi
c0019adb:	5d                   	pop    ebp
c0019adc:	c3                   	ret    

c0019add <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019add:	57                   	push   edi
c0019ade:	56                   	push   esi
c0019adf:	53                   	push   ebx
c0019ae0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ae8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019aec:	83 e8 06             	sub    eax,0x6
c0019aef:	0f b7 c0             	movzx  eax,ax
c0019af2:	50                   	push   eax
c0019af3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019af8:	50                   	push   eax
c0019af9:	e8 68 fc ff ff       	call   c0019766 <Vm::realToLinear(unsigned short, unsigned short)>
c0019afe:	5a                   	pop    edx
c0019aff:	5e                   	pop    esi
c0019b00:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019b03:	8d 56 fa             	lea    edx,[esi-0x6]
c0019b06:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019b0c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019b0f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019b12:	83 c2 02             	add    edx,0x2
c0019b15:	66 89 10             	mov    WORD PTR [eax],dx
c0019b18:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019b1b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019b1f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019b22:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019b26:	89 d6                	mov    esi,edx
c0019b28:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019b2e:	66 81 e6 ff fd       	and    si,0xfdff
c0019b33:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019b37:	74 07                	je     c0019b40 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019b39:	89 d6                	mov    esi,edx
c0019b3b:	66 81 ce 00 02       	or     si,0x200
c0019b40:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019b44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b49:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019b4d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019b55:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019b58:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019b60:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019b63:	5b                   	pop    ebx
c0019b64:	5e                   	pop    esi
c0019b65:	5f                   	pop    edi
c0019b66:	c3                   	ret    

c0019b67 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019b67:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019b6c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019b71:	c1 e0 04             	shl    eax,0x4
c0019b74:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019b77:	c3                   	ret    

c0019b78 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019b78:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019b7d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019b82:	c1 e0 04             	shl    eax,0x4
c0019b85:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019b89:	c3                   	ret    

c0019b8a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019b8a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019b8f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019b94:	c1 e0 04             	shl    eax,0x4
c0019b97:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019b9a:	c3                   	ret    

c0019b9b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019b9b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ba0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ba5:	c1 e0 04             	shl    eax,0x4
c0019ba8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019bac:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019baf:	c3                   	ret    

c0019bb0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019bb0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019bb5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019bba:	c1 e0 04             	shl    eax,0x4
c0019bbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019bc1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019bc5:	c3                   	ret    

c0019bc6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019bc6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019bcb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019bd0:	c1 e0 04             	shl    eax,0x4
c0019bd3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019bd7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019bda:	c3                   	ret    

c0019bdb <Vm::faultHandler(regs*)>:
c0019bdb:	55                   	push   ebp
c0019bdc:	57                   	push   edi
c0019bdd:	56                   	push   esi
c0019bde:	53                   	push   ebx
c0019bdf:	83 ec 1c             	sub    esp,0x1c
c0019be2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019be6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019be9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019bed:	0f b7 f8             	movzx  edi,ax
c0019bf0:	52                   	push   edx
c0019bf1:	0f b7 c0             	movzx  eax,ax
c0019bf4:	50                   	push   eax
c0019bf5:	e8 6c fb ff ff       	call   c0019766 <Vm::realToLinear(unsigned short, unsigned short)>
c0019bfa:	5a                   	pop    edx
c0019bfb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019bfe:	59                   	pop    ecx
c0019bff:	89 c1                	mov    ecx,eax
c0019c01:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019c04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c08:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019c11:	0f b7 c5             	movzx  eax,bp
c0019c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019c18:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019c1c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019c20:	e8 41 fb ff ff       	call   c0019766 <Vm::realToLinear(unsigned short, unsigned short)>
c0019c25:	5e                   	pop    esi
c0019c26:	be 06 00 00 00       	mov    esi,0x6
c0019c2b:	5a                   	pop    edx
c0019c2c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019c31:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019c36:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019c39:	80 fa 9d             	cmp    dl,0x9d
c0019c3c:	0f 84 2c 02 00 00    	je     c0019e6e <Vm::faultHandler(regs*)+0x293>
c0019c42:	0f 87 91 00 00 00    	ja     c0019cd9 <Vm::faultHandler(regs*)+0xfe>
c0019c48:	80 fa 66             	cmp    dl,0x66
c0019c4b:	0f 84 98 01 00 00    	je     c0019de9 <Vm::faultHandler(regs*)+0x20e>
c0019c51:	77 47                	ja     c0019c9a <Vm::faultHandler(regs*)+0xbf>
c0019c53:	80 fa 36             	cmp    dl,0x36
c0019c56:	0f 84 80 01 00 00    	je     c0019ddc <Vm::faultHandler(regs*)+0x201>
c0019c5c:	77 1a                	ja     c0019c78 <Vm::faultHandler(regs*)+0x9d>
c0019c5e:	80 fa 26             	cmp    dl,0x26
c0019c61:	0f 84 4e 01 00 00    	je     c0019db5 <Vm::faultHandler(regs*)+0x1da>
c0019c67:	80 fa 2e             	cmp    dl,0x2e
c0019c6a:	0f 85 e2 05 00 00    	jne    c001a252 <Vm::faultHandler(regs*)+0x677>
c0019c70:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019c73:	31 f6                	xor    esi,esi
c0019c75:	41                   	inc    ecx
c0019c76:	eb be                	jmp    c0019c36 <Vm::faultHandler(regs*)+0x5b>
c0019c78:	80 fa 64             	cmp    dl,0x64
c0019c7b:	0f 84 41 01 00 00    	je     c0019dc2 <Vm::faultHandler(regs*)+0x1e7>
c0019c81:	0f 87 48 01 00 00    	ja     c0019dcf <Vm::faultHandler(regs*)+0x1f4>
c0019c87:	80 fa 3e             	cmp    dl,0x3e
c0019c8a:	0f 85 c2 05 00 00    	jne    c001a252 <Vm::faultHandler(regs*)+0x677>
c0019c90:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019c93:	be 01 00 00 00       	mov    esi,0x1
c0019c98:	eb db                	jmp    c0019c75 <Vm::faultHandler(regs*)+0x9a>
c0019c9a:	80 fa 6d             	cmp    dl,0x6d
c0019c9d:	0f 84 ec 02 00 00    	je     c0019f8f <Vm::faultHandler(regs*)+0x3b4>
c0019ca3:	77 17                	ja     c0019cbc <Vm::faultHandler(regs*)+0xe1>
c0019ca5:	80 fa 67             	cmp    dl,0x67
c0019ca8:	0f 84 48 01 00 00    	je     c0019df6 <Vm::faultHandler(regs*)+0x21b>
c0019cae:	80 fa 6c             	cmp    dl,0x6c
c0019cb1:	0f 84 69 02 00 00    	je     c0019f20 <Vm::faultHandler(regs*)+0x345>
c0019cb7:	e9 96 05 00 00       	jmp    c001a252 <Vm::faultHandler(regs*)+0x677>
c0019cbc:	80 fa 6f             	cmp    dl,0x6f
c0019cbf:	0f 84 f4 03 00 00    	je     c001a0b9 <Vm::faultHandler(regs*)+0x4de>
c0019cc5:	0f 82 59 03 00 00    	jb     c001a024 <Vm::faultHandler(regs*)+0x449>
c0019ccb:	80 fa 9c             	cmp    dl,0x9c
c0019cce:	0f 84 2f 01 00 00    	je     c0019e03 <Vm::faultHandler(regs*)+0x228>
c0019cd4:	e9 79 05 00 00       	jmp    c001a252 <Vm::faultHandler(regs*)+0x677>
c0019cd9:	80 fa ec             	cmp    dl,0xec
c0019cdc:	0f 84 14 05 00 00    	je     c001a1f6 <Vm::faultHandler(regs*)+0x61b>
c0019ce2:	77 7b                	ja     c0019d5f <Vm::faultHandler(regs*)+0x184>
c0019ce4:	80 fa e4             	cmp    dl,0xe4
c0019ce7:	0f 84 93 04 00 00    	je     c001a180 <Vm::faultHandler(regs*)+0x5a5>
c0019ced:	77 53                	ja     c0019d42 <Vm::faultHandler(regs*)+0x167>
c0019cef:	80 fa cd             	cmp    dl,0xcd
c0019cf2:	0f 84 d9 01 00 00    	je     c0019ed1 <Vm::faultHandler(regs*)+0x2f6>
c0019cf8:	80 fa cf             	cmp    dl,0xcf
c0019cfb:	0f 85 51 05 00 00    	jne    c001a252 <Vm::faultHandler(regs*)+0x677>
c0019d01:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019d04:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019d07:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019d0b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019d0e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019d12:	81 ca 00 02 02 00    	or     edx,0x20200
c0019d18:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019d1b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019d1f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019d25:	66 c1 e8 09          	shr    ax,0x9
c0019d29:	83 e0 01             	and    eax,0x1
c0019d2c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019d2f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019d32:	83 c0 06             	add    eax,0x6
c0019d35:	25 ff ff 00 00       	and    eax,0xffff
c0019d3a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019d3d:	e9 0c 05 00 00       	jmp    c001a24e <Vm::faultHandler(regs*)+0x673>
c0019d42:	80 fa e6             	cmp    dl,0xe6
c0019d45:	0f 84 7f 04 00 00    	je     c001a1ca <Vm::faultHandler(regs*)+0x5ef>
c0019d4b:	0f 82 4b 04 00 00    	jb     c001a19c <Vm::faultHandler(regs*)+0x5c1>
c0019d51:	80 fa e7             	cmp    dl,0xe7
c0019d54:	0f 84 87 04 00 00    	je     c001a1e1 <Vm::faultHandler(regs*)+0x606>
c0019d5a:	e9 f3 04 00 00       	jmp    c001a252 <Vm::faultHandler(regs*)+0x677>
c0019d5f:	80 fa ef             	cmp    dl,0xef
c0019d62:	0f 84 d1 04 00 00    	je     c001a239 <Vm::faultHandler(regs*)+0x65e>
c0019d68:	77 28                	ja     c0019d92 <Vm::faultHandler(regs*)+0x1b7>
c0019d6a:	80 fa ed             	cmp    dl,0xed
c0019d6d:	0f 84 9f 04 00 00    	je     c001a212 <Vm::faultHandler(regs*)+0x637>
c0019d73:	80 fa ee             	cmp    dl,0xee
c0019d76:	0f 85 d6 04 00 00    	jne    c001a252 <Vm::faultHandler(regs*)+0x677>
c0019d7c:	50                   	push   eax
c0019d7d:	50                   	push   eax
c0019d7e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019d82:	50                   	push   eax
c0019d83:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d87:	50                   	push   eax
c0019d88:	e8 a3 f9 ff ff       	call   c0019730 <Vm::outbv(unsigned short, unsigned char)>
c0019d8d:	e9 9f 04 00 00       	jmp    c001a231 <Vm::faultHandler(regs*)+0x656>
c0019d92:	80 fa fa             	cmp    dl,0xfa
c0019d95:	0f 84 69 01 00 00    	je     c0019f04 <Vm::faultHandler(regs*)+0x329>
c0019d9b:	80 fa fb             	cmp    dl,0xfb
c0019d9e:	0f 84 6e 01 00 00    	je     c0019f12 <Vm::faultHandler(regs*)+0x337>
c0019da4:	80 fa f3             	cmp    dl,0xf3
c0019da7:	0f 85 a5 04 00 00    	jne    c001a252 <Vm::faultHandler(regs*)+0x677>
c0019dad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019db0:	e9 c0 fe ff ff       	jmp    c0019c75 <Vm::faultHandler(regs*)+0x9a>
c0019db5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019db8:	be 02 00 00 00       	mov    esi,0x2
c0019dbd:	e9 b3 fe ff ff       	jmp    c0019c75 <Vm::faultHandler(regs*)+0x9a>
c0019dc2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019dc5:	be 03 00 00 00       	mov    esi,0x3
c0019dca:	e9 a6 fe ff ff       	jmp    c0019c75 <Vm::faultHandler(regs*)+0x9a>
c0019dcf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019dd2:	be 04 00 00 00       	mov    esi,0x4
c0019dd7:	e9 99 fe ff ff       	jmp    c0019c75 <Vm::faultHandler(regs*)+0x9a>
c0019ddc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ddf:	be 05 00 00 00       	mov    esi,0x5
c0019de4:	e9 8c fe ff ff       	jmp    c0019c75 <Vm::faultHandler(regs*)+0x9a>
c0019de9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019dec:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019df1:	e9 7f fe ff ff       	jmp    c0019c75 <Vm::faultHandler(regs*)+0x9a>
c0019df6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019df9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019dfe:	e9 72 fe ff ff       	jmp    c0019c75 <Vm::faultHandler(regs*)+0x9a>
c0019e03:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019e06:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019e0a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e0f:	74 30                	je     c0019e41 <Vm::faultHandler(regs*)+0x266>
c0019e11:	83 e9 04             	sub    ecx,0x4
c0019e14:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019e1a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019e20:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019e23:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019e26:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019e2c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019e30:	0f 84 15 04 00 00    	je     c001a24b <Vm::faultHandler(regs*)+0x670>
c0019e36:	80 ce 02             	or     dh,0x2
c0019e39:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019e3c:	e9 0a 04 00 00       	jmp    c001a24b <Vm::faultHandler(regs*)+0x670>
c0019e41:	83 e9 02             	sub    ecx,0x2
c0019e44:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019e4a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019e4d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019e51:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019e57:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019e5b:	74 05                	je     c0019e62 <Vm::faultHandler(regs*)+0x287>
c0019e5d:	80 ce 02             	or     dh,0x2
c0019e60:	eb 03                	jmp    c0019e65 <Vm::faultHandler(regs*)+0x28a>
c0019e62:	80 e6 fd             	and    dh,0xfd
c0019e65:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019e69:	e9 dd 03 00 00       	jmp    c001a24b <Vm::faultHandler(regs*)+0x670>
c0019e6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e73:	74 2a                	je     c0019e9f <Vm::faultHandler(regs*)+0x2c4>
c0019e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e77:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019e7d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019e83:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019e86:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e88:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019e8e:	c1 e8 09             	shr    eax,0x9
c0019e91:	83 e0 01             	and    eax,0x1
c0019e94:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019e97:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019e9a:	83 c0 04             	add    eax,0x4
c0019e9d:	eb 25                	jmp    c0019ec4 <Vm::faultHandler(regs*)+0x2e9>
c0019e9f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019ea2:	81 ca 00 02 02 00    	or     edx,0x20200
c0019ea8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019eab:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019eae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019eb4:	66 c1 e8 09          	shr    ax,0x9
c0019eb8:	83 e0 01             	and    eax,0x1
c0019ebb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019ebe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019ec1:	83 c0 02             	add    eax,0x2
c0019ec4:	25 ff ff 00 00       	and    eax,0xffff
c0019ec9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019ecc:	e9 7a 03 00 00       	jmp    c001a24b <Vm::faultHandler(regs*)+0x670>
c0019ed1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019ed5:	3c ee                	cmp    al,0xee
c0019ed7:	75 10                	jne    c0019ee9 <Vm::faultHandler(regs*)+0x30e>
c0019ed9:	83 ec 0c             	sub    esp,0xc
c0019edc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019edf:	e8 e9 f8 ff ff       	call   c00197cd <Vm::mainloop3(unsigned long)>
c0019ee4:	e9 4b 03 00 00       	jmp    c001a234 <Vm::faultHandler(regs*)+0x659>
c0019ee9:	83 ec 0c             	sub    esp,0xc
c0019eec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ef4:	51                   	push   ecx
c0019ef5:	50                   	push   eax
c0019ef6:	53                   	push   ebx
c0019ef7:	e8 e1 fb ff ff       	call   c0019add <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019efc:	83 c4 20             	add    esp,0x20
c0019eff:	e9 4a 03 00 00       	jmp    c001a24e <Vm::faultHandler(regs*)+0x673>
c0019f04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f09:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019f0d:	e9 39 03 00 00       	jmp    c001a24b <Vm::faultHandler(regs*)+0x670>
c0019f12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f17:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0019f1b:	e9 2b 03 00 00       	jmp    c001a24b <Vm::faultHandler(regs*)+0x670>
c0019f20:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019f23:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019f28:	74 2b                	je     c0019f55 <Vm::faultHandler(regs*)+0x37a>
c0019f2a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019f31:	76 22                	jbe    c0019f55 <Vm::faultHandler(regs*)+0x37a>
c0019f33:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019f37:	50                   	push   eax
c0019f38:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019f3c:	50                   	push   eax
c0019f3d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019f41:	50                   	push   eax
c0019f42:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019f46:	50                   	push   eax
c0019f47:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019f4b:	50                   	push   eax
c0019f4c:	6a 6c                	push   0x6c
c0019f4e:	6a 6c                	push   0x6c
c0019f50:	e9 b9 01 00 00       	jmp    c001a10e <Vm::faultHandler(regs*)+0x533>
c0019f55:	83 ec 0c             	sub    esp,0xc
c0019f58:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019f5c:	0f b7 f6             	movzx  esi,si
c0019f5f:	50                   	push   eax
c0019f60:	e8 b8 f7 ff ff       	call   c001971d <Vm::inbv(unsigned short)>
c0019f65:	83 c4 0c             	add    esp,0xc
c0019f68:	0f b6 c0             	movzx  eax,al
c0019f6b:	50                   	push   eax
c0019f6c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019f70:	50                   	push   eax
c0019f71:	56                   	push   esi
c0019f72:	e8 24 fc ff ff       	call   c0019b9b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019f77:	83 c4 10             	add    esp,0x10
c0019f7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f7d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019f81:	74 03                	je     c0019f86 <Vm::faultHandler(regs*)+0x3ab>
c0019f83:	48                   	dec    eax
c0019f84:	eb 01                	jmp    c0019f87 <Vm::faultHandler(regs*)+0x3ac>
c0019f86:	40                   	inc    eax
c0019f87:	0f b7 c0             	movzx  eax,ax
c0019f8a:	e9 8d 00 00 00       	jmp    c001a01c <Vm::faultHandler(regs*)+0x441>
c0019f8f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019f92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f95:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019f9a:	74 29                	je     c0019fc5 <Vm::faultHandler(regs*)+0x3ea>
c0019f9c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019fa1:	76 22                	jbe    c0019fc5 <Vm::faultHandler(regs*)+0x3ea>
c0019fa3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019fa7:	50                   	push   eax
c0019fa8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019fac:	50                   	push   eax
c0019fad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019fb1:	50                   	push   eax
c0019fb2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019fb6:	50                   	push   eax
c0019fb7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019fbb:	50                   	push   eax
c0019fbc:	6a 6d                	push   0x6d
c0019fbe:	6a 6d                	push   0x6d
c0019fc0:	e9 49 01 00 00       	jmp    c001a10e <Vm::faultHandler(regs*)+0x533>
c0019fc5:	0f b7 c8             	movzx  ecx,ax
c0019fc8:	0f b7 f6             	movzx  esi,si
c0019fcb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019fce:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019fd3:	74 20                	je     c0019ff5 <Vm::faultHandler(regs*)+0x41a>
c0019fd5:	ed                   	in     eax,dx
c0019fd6:	55                   	push   ebp
c0019fd7:	50                   	push   eax
c0019fd8:	51                   	push   ecx
c0019fd9:	56                   	push   esi
c0019fda:	e8 e7 fb ff ff       	call   c0019bc6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019fdf:	83 c4 10             	add    esp,0x10
c0019fe2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019fe5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019fe9:	74 05                	je     c0019ff0 <Vm::faultHandler(regs*)+0x415>
c0019feb:	83 e8 04             	sub    eax,0x4
c0019fee:	eb 27                	jmp    c001a017 <Vm::faultHandler(regs*)+0x43c>
c0019ff0:	83 c0 04             	add    eax,0x4
c0019ff3:	eb 22                	jmp    c001a017 <Vm::faultHandler(regs*)+0x43c>
c0019ff5:	66 ed                	in     ax,dx
c0019ff7:	0f b7 c0             	movzx  eax,ax
c0019ffa:	57                   	push   edi
c0019ffb:	50                   	push   eax
c0019ffc:	51                   	push   ecx
c0019ffd:	56                   	push   esi
c0019ffe:	e8 ad fb ff ff       	call   c0019bb0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a003:	83 c4 10             	add    esp,0x10
c001a006:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a009:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a00d:	74 05                	je     c001a014 <Vm::faultHandler(regs*)+0x439>
c001a00f:	83 e8 02             	sub    eax,0x2
c001a012:	eb 03                	jmp    c001a017 <Vm::faultHandler(regs*)+0x43c>
c001a014:	83 c0 02             	add    eax,0x2
c001a017:	25 ff ff 00 00       	and    eax,0xffff
c001a01c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a01f:	e9 27 02 00 00       	jmp    c001a24b <Vm::faultHandler(regs*)+0x670>
c001a024:	8d 46 ff             	lea    eax,[esi-0x1]
c001a027:	3c 05                	cmp    al,0x5
c001a029:	77 24                	ja     c001a04f <Vm::faultHandler(regs*)+0x474>
c001a02b:	0f b6 c0             	movzx  eax,al
c001a02e:	ff 24 85 5c 6b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd94a4]
c001a035:	0f b7 fd             	movzx  edi,bp
c001a038:	eb 15                	jmp    c001a04f <Vm::faultHandler(regs*)+0x474>
c001a03a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a03e:	eb 0f                	jmp    c001a04f <Vm::faultHandler(regs*)+0x474>
c001a040:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a044:	eb 09                	jmp    c001a04f <Vm::faultHandler(regs*)+0x474>
c001a046:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a04a:	eb 03                	jmp    c001a04f <Vm::faultHandler(regs*)+0x474>
c001a04c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a04f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a052:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a057:	74 29                	je     c001a082 <Vm::faultHandler(regs*)+0x4a7>
c001a059:	3d ff ff 00 00       	cmp    eax,0xffff
c001a05e:	76 22                	jbe    c001a082 <Vm::faultHandler(regs*)+0x4a7>
c001a060:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a064:	50                   	push   eax
c001a065:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a069:	50                   	push   eax
c001a06a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a06e:	50                   	push   eax
c001a06f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a073:	50                   	push   eax
c001a074:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a078:	50                   	push   eax
c001a079:	6a 6e                	push   0x6e
c001a07b:	6a 6e                	push   0x6e
c001a07d:	e9 8c 00 00 00       	jmp    c001a10e <Vm::faultHandler(regs*)+0x533>
c001a082:	0f b7 c0             	movzx  eax,ax
c001a085:	52                   	push   edx
c001a086:	52                   	push   edx
c001a087:	50                   	push   eax
c001a088:	57                   	push   edi
c001a089:	e8 d9 fa ff ff       	call   c0019b67 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a08e:	59                   	pop    ecx
c001a08f:	0f b6 c0             	movzx  eax,al
c001a092:	5e                   	pop    esi
c001a093:	50                   	push   eax
c001a094:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a098:	50                   	push   eax
c001a099:	e8 92 f6 ff ff       	call   c0019730 <Vm::outbv(unsigned short, unsigned char)>
c001a09e:	83 c4 10             	add    esp,0x10
c001a0a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a0a4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a0a8:	74 03                	je     c001a0ad <Vm::faultHandler(regs*)+0x4d2>
c001a0aa:	48                   	dec    eax
c001a0ab:	eb 01                	jmp    c001a0ae <Vm::faultHandler(regs*)+0x4d3>
c001a0ad:	40                   	inc    eax
c001a0ae:	0f b7 c0             	movzx  eax,ax
c001a0b1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a0b4:	e9 92 01 00 00       	jmp    c001a24b <Vm::faultHandler(regs*)+0x670>
c001a0b9:	8d 46 ff             	lea    eax,[esi-0x1]
c001a0bc:	3c 05                	cmp    al,0x5
c001a0be:	77 1f                	ja     c001a0df <Vm::faultHandler(regs*)+0x504>
c001a0c0:	0f b6 c0             	movzx  eax,al
c001a0c3:	ff 24 85 74 6b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd948c]
c001a0ca:	89 ef                	mov    edi,ebp
c001a0cc:	eb 11                	jmp    c001a0df <Vm::faultHandler(regs*)+0x504>
c001a0ce:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a0d1:	eb 0c                	jmp    c001a0df <Vm::faultHandler(regs*)+0x504>
c001a0d3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a0d6:	eb 07                	jmp    c001a0df <Vm::faultHandler(regs*)+0x504>
c001a0d8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a0db:	eb 02                	jmp    c001a0df <Vm::faultHandler(regs*)+0x504>
c001a0dd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a0df:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a0e2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a0e7:	74 37                	je     c001a120 <Vm::faultHandler(regs*)+0x545>
c001a0e9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a0ef:	76 2f                	jbe    c001a120 <Vm::faultHandler(regs*)+0x545>
c001a0f1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a0f5:	50                   	push   eax
c001a0f6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a0fa:	50                   	push   eax
c001a0fb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a0ff:	50                   	push   eax
c001a100:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a104:	50                   	push   eax
c001a105:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a109:	50                   	push   eax
c001a10a:	6a 6f                	push   0x6f
c001a10c:	6a 6f                	push   0x6f
c001a10e:	68 02 6b 02 c0       	push   0xc0026b02
c001a113:	e8 2f 2f ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001a118:	83 c4 20             	add    esp,0x20
c001a11b:	e9 86 01 00 00       	jmp    c001a2a6 <Vm::faultHandler(regs*)+0x6cb>
c001a120:	0f b7 d7             	movzx  edx,di
c001a123:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a126:	0f b7 c6             	movzx  eax,si
c001a129:	81 e1 00 04 00 00    	and    ecx,0x400
c001a12f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a132:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a137:	74 1d                	je     c001a156 <Vm::faultHandler(regs*)+0x57b>
c001a139:	55                   	push   ebp
c001a13a:	55                   	push   ebp
c001a13b:	50                   	push   eax
c001a13c:	52                   	push   edx
c001a13d:	e8 48 fa ff ff       	call   c0019b8a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a142:	83 c4 10             	add    esp,0x10
c001a145:	89 fa                	mov    edx,edi
c001a147:	ef                   	out    dx,eax
c001a148:	85 c9                	test   ecx,ecx
c001a14a:	74 05                	je     c001a151 <Vm::faultHandler(regs*)+0x576>
c001a14c:	83 ee 04             	sub    esi,0x4
c001a14f:	eb 21                	jmp    c001a172 <Vm::faultHandler(regs*)+0x597>
c001a151:	83 c6 04             	add    esi,0x4
c001a154:	eb 1c                	jmp    c001a172 <Vm::faultHandler(regs*)+0x597>
c001a156:	55                   	push   ebp
c001a157:	55                   	push   ebp
c001a158:	50                   	push   eax
c001a159:	52                   	push   edx
c001a15a:	e8 19 fa ff ff       	call   c0019b78 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a15f:	83 c4 10             	add    esp,0x10
c001a162:	89 fa                	mov    edx,edi
c001a164:	66 ef                	out    dx,ax
c001a166:	85 c9                	test   ecx,ecx
c001a168:	74 05                	je     c001a16f <Vm::faultHandler(regs*)+0x594>
c001a16a:	83 ee 02             	sub    esi,0x2
c001a16d:	eb 03                	jmp    c001a172 <Vm::faultHandler(regs*)+0x597>
c001a16f:	83 c6 02             	add    esi,0x2
c001a172:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a178:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a17b:	e9 cb 00 00 00       	jmp    c001a24b <Vm::faultHandler(regs*)+0x670>
c001a180:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a187:	83 ec 0c             	sub    esp,0xc
c001a18a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a18e:	50                   	push   eax
c001a18f:	e8 89 f5 ff ff       	call   c001971d <Vm::inbv(unsigned short)>
c001a194:	0f b6 c0             	movzx  eax,al
c001a197:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a19a:	eb 3f                	jmp    c001a1db <Vm::faultHandler(regs*)+0x600>
c001a19c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a1a1:	74 07                	je     c001a1aa <Vm::faultHandler(regs*)+0x5cf>
c001a1a3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a1a7:	ed                   	in     eax,dx
c001a1a8:	eb 14                	jmp    c001a1be <Vm::faultHandler(regs*)+0x5e3>
c001a1aa:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a1ad:	66 31 f6             	xor    si,si
c001a1b0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a1b3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a1b7:	66 ed                	in     ax,dx
c001a1b9:	0f b7 c0             	movzx  eax,ax
c001a1bc:	09 f0                	or     eax,esi
c001a1be:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a1c1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a1c5:	e9 84 00 00 00       	jmp    c001a24e <Vm::faultHandler(regs*)+0x673>
c001a1ca:	52                   	push   edx
c001a1cb:	52                   	push   edx
c001a1cc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a1d0:	50                   	push   eax
c001a1d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a1d5:	50                   	push   eax
c001a1d6:	e8 55 f5 ff ff       	call   c0019730 <Vm::outbv(unsigned short, unsigned char)>
c001a1db:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a1df:	eb 53                	jmp    c001a234 <Vm::faultHandler(regs*)+0x659>
c001a1e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a1e4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a1e8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a1ed:	74 03                	je     c001a1f2 <Vm::faultHandler(regs*)+0x617>
c001a1ef:	ef                   	out    dx,eax
c001a1f0:	eb cf                	jmp    c001a1c1 <Vm::faultHandler(regs*)+0x5e6>
c001a1f2:	66 ef                	out    dx,ax
c001a1f4:	eb cb                	jmp    c001a1c1 <Vm::faultHandler(regs*)+0x5e6>
c001a1f6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a1fd:	83 ec 0c             	sub    esp,0xc
c001a200:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a204:	50                   	push   eax
c001a205:	e8 13 f5 ff ff       	call   c001971d <Vm::inbv(unsigned short)>
c001a20a:	0f b6 c0             	movzx  eax,al
c001a20d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a210:	eb 1f                	jmp    c001a231 <Vm::faultHandler(regs*)+0x656>
c001a212:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a215:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a21a:	74 03                	je     c001a21f <Vm::faultHandler(regs*)+0x644>
c001a21c:	ed                   	in     eax,dx
c001a21d:	eb 0d                	jmp    c001a22c <Vm::faultHandler(regs*)+0x651>
c001a21f:	66 ed                	in     ax,dx
c001a221:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a224:	0f b7 c0             	movzx  eax,ax
c001a227:	66 31 d2             	xor    dx,dx
c001a22a:	09 d0                	or     eax,edx
c001a22c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a22f:	eb 1a                	jmp    c001a24b <Vm::faultHandler(regs*)+0x670>
c001a231:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a234:	83 c4 10             	add    esp,0x10
c001a237:	eb 15                	jmp    c001a24e <Vm::faultHandler(regs*)+0x673>
c001a239:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a23c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a23f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a244:	74 03                	je     c001a249 <Vm::faultHandler(regs*)+0x66e>
c001a246:	ef                   	out    dx,eax
c001a247:	eb 02                	jmp    c001a24b <Vm::faultHandler(regs*)+0x670>
c001a249:	66 ef                	out    dx,ax
c001a24b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a24e:	b0 01                	mov    al,0x1
c001a250:	eb 56                	jmp    c001a2a8 <Vm::faultHandler(regs*)+0x6cd>
c001a252:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a256:	50                   	push   eax
c001a257:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a25b:	50                   	push   eax
c001a25c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a260:	50                   	push   eax
c001a261:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a265:	50                   	push   eax
c001a266:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a26a:	50                   	push   eax
c001a26b:	52                   	push   edx
c001a26c:	52                   	push   edx
c001a26d:	68 2f 6b 02 c0       	push   0xc0026b2f
c001a272:	e8 d0 2d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001a277:	83 c4 20             	add    esp,0x20
c001a27a:	83 ec 0c             	sub    esp,0xc
c001a27d:	6a 60                	push   0x60
c001a27f:	e8 99 f4 ff ff       	call   c001971d <Vm::inbv(unsigned short)>
c001a284:	83 c4 10             	add    esp,0x10
c001a287:	3c 1c                	cmp    al,0x1c
c001a289:	74 04                	je     c001a28f <Vm::faultHandler(regs*)+0x6b4>
c001a28b:	3c 5a                	cmp    al,0x5a
c001a28d:	75 eb                	jne    c001a27a <Vm::faultHandler(regs*)+0x69f>
c001a28f:	3c 5a                	cmp    al,0x5a
c001a291:	74 04                	je     c001a297 <Vm::faultHandler(regs*)+0x6bc>
c001a293:	3c 1c                	cmp    al,0x1c
c001a295:	75 0f                	jne    c001a2a6 <Vm::faultHandler(regs*)+0x6cb>
c001a297:	83 ec 0c             	sub    esp,0xc
c001a29a:	6a 60                	push   0x60
c001a29c:	e8 7c f4 ff ff       	call   c001971d <Vm::inbv(unsigned short)>
c001a2a1:	83 c4 10             	add    esp,0x10
c001a2a4:	eb e9                	jmp    c001a28f <Vm::faultHandler(regs*)+0x6b4>
c001a2a6:	31 c0                	xor    eax,eax
c001a2a8:	83 c4 1c             	add    esp,0x1c
c001a2ab:	5b                   	pop    ebx
c001a2ac:	5e                   	pop    esi
c001a2ad:	5f                   	pop    edi
c001a2ae:	5d                   	pop    ebp
c001a2af:	c3                   	ret    

c001a2b0 <Vm::fpuInternalTo32(unsigned long long)>:
c001a2b0:	57                   	push   edi
c001a2b1:	56                   	push   esi
c001a2b2:	53                   	push   ebx
c001a2b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2bb:	89 d6                	mov    esi,edx
c001a2bd:	89 d7                	mov    edi,edx
c001a2bf:	89 c1                	mov    ecx,eax
c001a2c1:	c1 ef 14             	shr    edi,0x14
c001a2c4:	89 d3                	mov    ebx,edx
c001a2c6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a2cc:	31 d2                	xor    edx,edx
c001a2ce:	89 f8                	mov    eax,edi
c001a2d0:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a2d6:	bf ff 00 00 00       	mov    edi,0xff
c001a2db:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a2e0:	83 d2 ff             	adc    edx,0xffffffff
c001a2e3:	39 c7                	cmp    edi,eax
c001a2e5:	bf 00 00 00 00       	mov    edi,0x0
c001a2ea:	19 d7                	sbb    edi,edx
c001a2ec:	72 16                	jb     c001a304 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a2ee:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a2f2:	c1 e0 17             	shl    eax,0x17
c001a2f5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a2fb:	09 f1                	or     ecx,esi
c001a2fd:	09 c1                	or     ecx,eax
c001a2ff:	89 cf                	mov    edi,ecx
c001a301:	eb 05                	jmp    c001a308 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a303:	90                   	nop
c001a304:	31 ff                	xor    edi,edi
c001a306:	66 90                	xchg   ax,ax
c001a308:	89 f8                	mov    eax,edi
c001a30a:	5b                   	pop    ebx
c001a30b:	5e                   	pop    esi
c001a30c:	5f                   	pop    edi
c001a30d:	c3                   	ret    

c001a30e <Vm::fpuInternalTo64(unsigned long long)>:
c001a30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a312:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a316:	c3                   	ret    

c001a317 <Vm::fpu32ToInternal(unsigned int)>:
c001a317:	57                   	push   edi
c001a318:	31 ff                	xor    edi,edi
c001a31a:	56                   	push   esi
c001a31b:	53                   	push   ebx
c001a31c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a320:	89 cb                	mov    ebx,ecx
c001a322:	89 ce                	mov    esi,ecx
c001a324:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a32a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a330:	c1 e9 17             	shr    ecx,0x17
c001a333:	89 f0                	mov    eax,esi
c001a335:	0f b6 d1             	movzx  edx,cl
c001a338:	81 c2 80 03 00 00    	add    edx,0x380
c001a33e:	89 d1                	mov    ecx,edx
c001a340:	89 fa                	mov    edx,edi
c001a342:	c1 e1 14             	shl    ecx,0x14
c001a345:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a349:	c1 e0 1d             	shl    eax,0x1d
c001a34c:	89 d7                	mov    edi,edx
c001a34e:	89 c6                	mov    esi,eax
c001a350:	89 ca                	mov    edx,ecx
c001a352:	89 f0                	mov    eax,esi
c001a354:	09 fa                	or     edx,edi
c001a356:	09 da                	or     edx,ebx
c001a358:	5b                   	pop    ebx
c001a359:	5e                   	pop    esi
c001a35a:	5f                   	pop    edi
c001a35b:	c3                   	ret    

c001a35c <Vm::fpu64ToInternal(unsigned long long)>:
c001a35c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a364:	c3                   	ret    

c001a365 <Vm::fpuFloatToLong(unsigned long long)>:
c001a365:	57                   	push   edi
c001a366:	31 c0                	xor    eax,eax
c001a368:	56                   	push   esi
c001a369:	31 d2                	xor    edx,edx
c001a36b:	53                   	push   ebx
c001a36c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a370:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a374:	89 d9                	mov    ecx,ebx
c001a376:	c1 e9 14             	shr    ecx,0x14
c001a379:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a37f:	89 cf                	mov    edi,ecx
c001a381:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a387:	78 37                	js     c001a3c0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a389:	89 d9                	mov    ecx,ebx
c001a38b:	89 f0                	mov    eax,esi
c001a38d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a393:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a399:	89 ca                	mov    edx,ecx
c001a39b:	b9 34 00 00 00       	mov    ecx,0x34
c001a3a0:	29 f9                	sub    ecx,edi
c001a3a2:	0f ad d0             	shrd   eax,edx,cl
c001a3a5:	d3 fa                	sar    edx,cl
c001a3a7:	f6 c1 20             	test   cl,0x20
c001a3aa:	74 08                	je     c001a3b4 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a3ac:	89 d0                	mov    eax,edx
c001a3ae:	c1 fa 1f             	sar    edx,0x1f
c001a3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b4:	85 db                	test   ebx,ebx
c001a3b6:	79 08                	jns    c001a3c0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a3b8:	f7 d8                	neg    eax
c001a3ba:	83 d2 00             	adc    edx,0x0
c001a3bd:	f7 da                	neg    edx
c001a3bf:	90                   	nop
c001a3c0:	5b                   	pop    ebx
c001a3c1:	5e                   	pop    esi
c001a3c2:	5f                   	pop    edi
c001a3c3:	c3                   	ret    

c001a3c4 <Vm::fpuULongToFloat(unsigned long long)>:
c001a3c4:	57                   	push   edi
c001a3c5:	31 c9                	xor    ecx,ecx
c001a3c7:	56                   	push   esi
c001a3c8:	53                   	push   ebx
c001a3c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3cd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d4:	0f ba e7 14          	bt     edi,0x14
c001a3d8:	72 0a                	jb     c001a3e4 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a3da:	01 f6                	add    esi,esi
c001a3dc:	11 ff                	adc    edi,edi
c001a3de:	41                   	inc    ecx
c001a3df:	eb f3                	jmp    c001a3d4 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e4:	89 fa                	mov    edx,edi
c001a3e6:	89 f0                	mov    eax,esi
c001a3e8:	bb 33 04 00 00       	mov    ebx,0x433
c001a3ed:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a3f3:	29 cb                	sub    ebx,ecx
c001a3f5:	89 d9                	mov    ecx,ebx
c001a3f7:	5b                   	pop    ebx
c001a3f8:	c1 e1 14             	shl    ecx,0x14
c001a3fb:	5e                   	pop    esi
c001a3fc:	09 ca                	or     edx,ecx
c001a3fe:	5f                   	pop    edi
c001a3ff:	c3                   	ret    

c001a400 <Vm::fpuLongToFloat(long long)>:
c001a400:	56                   	push   esi
c001a401:	31 c0                	xor    eax,eax
c001a403:	53                   	push   ebx
c001a404:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a408:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a40c:	39 c8                	cmp    eax,ecx
c001a40e:	19 d8                	sbb    eax,ebx
c001a410:	7d 06                	jge    c001a418 <Vm::fpuLongToFloat(long long)+0x18>
c001a412:	31 f6                	xor    esi,esi
c001a414:	eb 0e                	jmp    c001a424 <Vm::fpuLongToFloat(long long)+0x24>
c001a416:	66 90                	xchg   ax,ax
c001a418:	f7 d9                	neg    ecx
c001a41a:	be 01 00 00 00       	mov    esi,0x1
c001a41f:	83 d3 00             	adc    ebx,0x0
c001a422:	f7 db                	neg    ebx
c001a424:	31 c0                	xor    eax,eax
c001a426:	66 90                	xchg   ax,ax
c001a428:	0f ba e3 14          	bt     ebx,0x14
c001a42c:	72 0a                	jb     c001a438 <Vm::fpuLongToFloat(long long)+0x38>
c001a42e:	01 c9                	add    ecx,ecx
c001a430:	11 db                	adc    ebx,ebx
c001a432:	40                   	inc    eax
c001a433:	eb f3                	jmp    c001a428 <Vm::fpuLongToFloat(long long)+0x28>
c001a435:	8d 76 00             	lea    esi,[esi+0x0]
c001a438:	ba 33 04 00 00       	mov    edx,0x433
c001a43d:	29 c2                	sub    edx,eax
c001a43f:	89 c8                	mov    eax,ecx
c001a441:	c1 e2 14             	shl    edx,0x14
c001a444:	89 d9                	mov    ecx,ebx
c001a446:	89 f3                	mov    ebx,esi
c001a448:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a44e:	09 ca                	or     edx,ecx
c001a450:	84 db                	test   bl,bl
c001a452:	74 08                	je     c001a45c <Vm::fpuLongToFloat(long long)+0x5c>
c001a454:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a45a:	66 90                	xchg   ax,ax
c001a45c:	5b                   	pop    ebx
c001a45d:	5e                   	pop    esi
c001a45e:	c3                   	ret    

c001a45f <Vm::fpuGet0()>:
c001a45f:	31 c0                	xor    eax,eax
c001a461:	31 d2                	xor    edx,edx
c001a463:	c3                   	ret    

c001a464 <Vm::fpuGet1()>:
c001a464:	b8 01 00 00 00       	mov    eax,0x1
c001a469:	31 d2                	xor    edx,edx
c001a46b:	c3                   	ret    

c001a46c <Vm::fpuGetPi()>:
c001a46c:	b8 03 00 00 00       	mov    eax,0x3
c001a471:	31 d2                	xor    edx,edx
c001a473:	c3                   	ret    

c001a474 <Vm::fpuGetLog2E()>:
c001a474:	83 ec 18             	sub    esp,0x18
c001a477:	68 8c 6b 02 c0       	push   0xc0026b8c
c001a47c:	e8 64 ab ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001a481:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a486:	31 d2                	xor    edx,edx
c001a488:	83 c4 1c             	add    esp,0x1c
c001a48b:	c3                   	ret    

c001a48c <Vm::fpuGetLogE2()>:
c001a48c:	83 ec 18             	sub    esp,0x18
c001a48f:	68 98 6b 02 c0       	push   0xc0026b98
c001a494:	e8 4c ab ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001a499:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a49e:	31 d2                	xor    edx,edx
c001a4a0:	83 c4 1c             	add    esp,0x1c
c001a4a3:	c3                   	ret    

c001a4a4 <Vm::fpuGetLog210()>:
c001a4a4:	83 ec 18             	sub    esp,0x18
c001a4a7:	68 a4 6b 02 c0       	push   0xc0026ba4
c001a4ac:	e8 34 ab ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001a4b1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a4b6:	31 d2                	xor    edx,edx
c001a4b8:	83 c4 1c             	add    esp,0x1c
c001a4bb:	c3                   	ret    

c001a4bc <Vm::fpuGetLog102()>:
c001a4bc:	83 ec 18             	sub    esp,0x18
c001a4bf:	68 b1 6b 02 c0       	push   0xc0026bb1
c001a4c4:	e8 1c ab ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001a4c9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a4ce:	31 d2                	xor    edx,edx
c001a4d0:	83 c4 1c             	add    esp,0x1c
c001a4d3:	c3                   	ret    

c001a4d4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a4d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4d8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a4dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4e0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a4e4:	0f 92 c0             	setb   al
c001a4e7:	c3                   	ret    

c001a4e8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a4e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4f0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a4f4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a4f8:	09 c2                	or     edx,eax
c001a4fa:	0f 94 c0             	sete   al
c001a4fd:	c3                   	ret    

c001a4fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a4fe:	57                   	push   edi
c001a4ff:	56                   	push   esi
c001a500:	53                   	push   ebx
c001a501:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a505:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a509:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a50d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a511:	57                   	push   edi
c001a512:	56                   	push   esi
c001a513:	53                   	push   ebx
c001a514:	51                   	push   ecx
c001a515:	e8 ce ff ff ff       	call   c001a4e8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a51a:	83 c4 10             	add    esp,0x10
c001a51d:	88 c2                	mov    dl,al
c001a51f:	31 c0                	xor    eax,eax
c001a521:	84 d2                	test   dl,dl
c001a523:	75 0f                	jne    c001a534 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a525:	57                   	push   edi
c001a526:	56                   	push   esi
c001a527:	53                   	push   ebx
c001a528:	51                   	push   ecx
c001a529:	e8 a6 ff ff ff       	call   c001a4d4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a52e:	83 c4 10             	add    esp,0x10
c001a531:	8d 76 00             	lea    esi,[esi+0x0]
c001a534:	83 e0 01             	and    eax,0x1
c001a537:	5b                   	pop    ebx
c001a538:	88 c1                	mov    cl,al
c001a53a:	83 e2 01             	and    edx,0x1
c001a53d:	a0 41 9e 02 c0       	mov    al,ds:0xc0029e41
c001a542:	c1 e2 06             	shl    edx,0x6
c001a545:	83 e0 ba             	and    eax,0xffffffba
c001a548:	5e                   	pop    esi
c001a549:	09 c8                	or     eax,ecx
c001a54b:	5f                   	pop    edi
c001a54c:	09 d0                	or     eax,edx
c001a54e:	a2 41 9e 02 c0       	mov    ds:0xc0029e41,al
c001a553:	c3                   	ret    

c001a554 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a558:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a55c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a560:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a564:	c3                   	ret    

c001a565 <Vm::fpuAbs(unsigned long long)>:
c001a565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a569:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a56d:	c3                   	ret    

c001a56e <Vm::fpuChs(unsigned long long)>:
c001a56e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a572:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a576:	f7 d8                	neg    eax
c001a578:	83 d2 00             	adc    edx,0x0
c001a57b:	f7 da                	neg    edx
c001a57d:	c3                   	ret    

c001a57e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a57e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a582:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a587:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a58b:	eb c7                	jmp    c001a554 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a58d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a58d:	53                   	push   ebx
c001a58e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a592:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a596:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a59a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a59e:	0f af ca             	imul   ecx,edx
c001a5a1:	0f af d8             	imul   ebx,eax
c001a5a4:	f7 e2                	mul    edx
c001a5a6:	01 d9                	add    ecx,ebx
c001a5a8:	5b                   	pop    ebx
c001a5a9:	01 ca                	add    edx,ecx
c001a5ab:	c3                   	ret    

c001a5ac <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a5ac:	83 ec 0c             	sub    esp,0xc
c001a5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5bf:	e8 10 87 00 00       	call   c0022cd4 <__udivdi3>
c001a5c4:	83 c4 1c             	add    esp,0x1c
c001a5c7:	c3                   	ret    

c001a5c8 <Vm::fpuSquare(unsigned long long)>:
c001a5c8:	50                   	push   eax
c001a5c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a5d1:	52                   	push   edx
c001a5d2:	50                   	push   eax
c001a5d3:	52                   	push   edx
c001a5d4:	50                   	push   eax
c001a5d5:	e8 b3 ff ff ff       	call   c001a58d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a5da:	83 c4 14             	add    esp,0x14
c001a5dd:	c3                   	ret    

c001a5de <Vm::fpuGetReg(int)>:
c001a5de:	83 ec 0c             	sub    esp,0xc
c001a5e1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a5e6:	76 10                	jbe    c001a5f8 <Vm::fpuGetReg(int)+0x1a>
c001a5e8:	83 ec 0c             	sub    esp,0xc
c001a5eb:	68 be 6b 02 c0       	push   0xc0026bbe
c001a5f0:	e8 f0 a9 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001a5f5:	83 c4 10             	add    esp,0x10
c001a5f8:	a0 41 9e 02 c0       	mov    al,ds:0xc0029e41
c001a5fd:	b9 08 00 00 00       	mov    ecx,0x8
c001a602:	c0 e8 03             	shr    al,0x3
c001a605:	83 e0 07             	and    eax,0x7
c001a608:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a60c:	99                   	cdq    
c001a60d:	f7 f9                	idiv   ecx
c001a60f:	8b 04 d5 44 9e 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd61bc]
c001a616:	8b 14 d5 48 9e 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd61b8]
c001a61d:	83 c4 0c             	add    esp,0xc
c001a620:	c3                   	ret    

c001a621 <Vm::fpuSetReg(int, unsigned long long)>:
c001a621:	57                   	push   edi
c001a622:	56                   	push   esi
c001a623:	52                   	push   edx
c001a624:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a628:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a62c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a631:	76 11                	jbe    c001a644 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a633:	83 ec 0c             	sub    esp,0xc
c001a636:	68 d1 6b 02 c0       	push   0xc0026bd1
c001a63b:	e8 a5 a9 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001a640:	83 c4 10             	add    esp,0x10
c001a643:	90                   	nop
c001a644:	a0 41 9e 02 c0       	mov    al,ds:0xc0029e41
c001a649:	b9 08 00 00 00       	mov    ecx,0x8
c001a64e:	c0 e8 03             	shr    al,0x3
c001a651:	83 e0 07             	and    eax,0x7
c001a654:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a658:	99                   	cdq    
c001a659:	f7 f9                	idiv   ecx
c001a65b:	89 34 d5 44 9e 02 c0 	mov    DWORD PTR [edx*8-0x3ffd61bc],esi
c001a662:	89 3c d5 48 9e 02 c0 	mov    DWORD PTR [edx*8-0x3ffd61b8],edi
c001a669:	58                   	pop    eax
c001a66a:	5e                   	pop    esi
c001a66b:	5f                   	pop    edi
c001a66c:	c3                   	ret    

c001a66d <Vm::fpuPush(unsigned long long)>:
c001a66d:	a0 41 9e 02 c0       	mov    al,ds:0xc0029e41
c001a672:	c0 e8 03             	shr    al,0x3
c001a675:	83 e0 07             	and    eax,0x7
c001a678:	83 c0 07             	add    eax,0x7
c001a67b:	88 c2                	mov    dl,al
c001a67d:	83 e0 07             	and    eax,0x7
c001a680:	83 e2 07             	and    edx,0x7
c001a683:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a68a:	8a 15 41 9e 02 c0    	mov    dl,BYTE PTR ds:0xc0029e41
c001a690:	83 e2 c7             	and    edx,0xffffffc7
c001a693:	09 ca                	or     edx,ecx
c001a695:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a699:	88 15 41 9e 02 c0    	mov    BYTE PTR ds:0xc0029e41,dl
c001a69f:	89 0c c5 48 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd61b8],ecx
c001a6a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a6aa:	89 14 c5 44 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd61bc],edx
c001a6b1:	a1 84 9e 02 c0       	mov    eax,ds:0xc0029e84
c001a6b6:	83 f8 08             	cmp    eax,0x8
c001a6b9:	75 09                	jne    c001a6c4 <Vm::fpuPush(unsigned long long)+0x57>
c001a6bb:	80 0d 40 9e 02 c0 40 	or     BYTE PTR ds:0xc0029e40,0x40
c001a6c2:	c3                   	ret    
c001a6c3:	90                   	nop
c001a6c4:	40                   	inc    eax
c001a6c5:	a3 84 9e 02 c0       	mov    ds:0xc0029e84,eax
c001a6ca:	c3                   	ret    

c001a6cb <Vm::fpuPop()>:
c001a6cb:	8a 0d 41 9e 02 c0    	mov    cl,BYTE PTR ds:0xc0029e41
c001a6d1:	53                   	push   ebx
c001a6d2:	c0 e9 03             	shr    cl,0x3
c001a6d5:	8a 1d 41 9e 02 c0    	mov    bl,BYTE PTR ds:0xc0029e41
c001a6db:	83 e1 07             	and    ecx,0x7
c001a6de:	83 e3 c7             	and    ebx,0xffffffc7
c001a6e1:	8b 04 cd 44 9e 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd61bc]
c001a6e8:	8b 14 cd 48 9e 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd61b8]
c001a6ef:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a6f6:	83 e1 38             	and    ecx,0x38
c001a6f9:	09 d9                	or     ecx,ebx
c001a6fb:	88 0d 41 9e 02 c0    	mov    BYTE PTR ds:0xc0029e41,cl
c001a701:	8b 0d 84 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029e84
c001a707:	85 c9                	test   ecx,ecx
c001a709:	74 09                	je     c001a714 <Vm::fpuPop()+0x49>
c001a70b:	49                   	dec    ecx
c001a70c:	89 0d 84 9e 02 c0    	mov    DWORD PTR ds:0xc0029e84,ecx
c001a712:	eb 08                	jmp    c001a71c <Vm::fpuPop()+0x51>
c001a714:	80 0d 40 9e 02 c0 40 	or     BYTE PTR ds:0xc0029e40,0x40
c001a71b:	90                   	nop
c001a71c:	5b                   	pop    ebx
c001a71d:	c3                   	ret    

c001a71e <Vm::x87Handler(regs*)>:
c001a71e:	55                   	push   ebp
c001a71f:	57                   	push   edi
c001a720:	56                   	push   esi
c001a721:	53                   	push   ebx
c001a722:	83 ec 1c             	sub    esp,0x1c
c001a725:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a729:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a72e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a731:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a739:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a73d:	50                   	push   eax
c001a73e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a742:	50                   	push   eax
c001a743:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a747:	50                   	push   eax
c001a748:	53                   	push   ebx
c001a749:	e8 b0 9f ff ff       	call   c00146fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a74e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a751:	83 c4 10             	add    esp,0x10
c001a754:	89 c6                	mov    esi,eax
c001a756:	80 fa d9             	cmp    dl,0xd9
c001a759:	0f 85 79 01 00 00    	jne    c001a8d8 <Vm::x87Handler(regs*)+0x1ba>
c001a75f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a763:	8d 50 20             	lea    edx,[eax+0x20]
c001a766:	80 fa 0e             	cmp    dl,0xe
c001a769:	0f 87 a5 00 00 00    	ja     c001a814 <Vm::x87Handler(regs*)+0xf6>
c001a76f:	0f b6 d2             	movzx  edx,dl
c001a772:	ff 24 95 e4 6b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd941c]
c001a779:	8d 76 00             	lea    esi,[esi+0x0]
c001a77c:	e8 de fc ff ff       	call   c001a45f <Vm::fpuGet0()>
c001a781:	eb 09                	jmp    c001a78c <Vm::x87Handler(regs*)+0x6e>
c001a783:	90                   	nop
c001a784:	e8 db fc ff ff       	call   c001a464 <Vm::fpuGet1()>
c001a789:	8d 76 00             	lea    esi,[esi+0x0]
c001a78c:	57                   	push   edi
c001a78d:	57                   	push   edi
c001a78e:	66 90                	xchg   ax,ax
c001a790:	52                   	push   edx
c001a791:	50                   	push   eax
c001a792:	e8 d6 fe ff ff       	call   c001a66d <Vm::fpuPush(unsigned long long)>
c001a797:	90                   	nop
c001a798:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a79c:	83 c4 10             	add    esp,0x10
c001a79f:	90                   	nop
c001a7a0:	b0 01                	mov    al,0x1
c001a7a2:	e9 89 0a 00 00       	jmp    c001b230 <Vm::x87Handler(regs*)+0xb12>
c001a7a7:	90                   	nop
c001a7a8:	83 ec 0c             	sub    esp,0xc
c001a7ab:	6a 00                	push   0x0
c001a7ad:	e8 2c fe ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001a7b2:	59                   	pop    ecx
c001a7b3:	5e                   	pop    esi
c001a7b4:	52                   	push   edx
c001a7b5:	50                   	push   eax
c001a7b6:	e8 b3 fd ff ff       	call   c001a56e <Vm::fpuChs(unsigned long long)>
c001a7bb:	eb 17                	jmp    c001a7d4 <Vm::x87Handler(regs*)+0xb6>
c001a7bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a7c0:	83 ec 0c             	sub    esp,0xc
c001a7c3:	6a 00                	push   0x0
c001a7c5:	e8 14 fe ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001a7ca:	5f                   	pop    edi
c001a7cb:	5d                   	pop    ebp
c001a7cc:	52                   	push   edx
c001a7cd:	50                   	push   eax
c001a7ce:	e8 92 fd ff ff       	call   c001a565 <Vm::fpuAbs(unsigned long long)>
c001a7d3:	90                   	nop
c001a7d4:	83 c4 0c             	add    esp,0xc
c001a7d7:	90                   	nop
c001a7d8:	52                   	push   edx
c001a7d9:	50                   	push   eax
c001a7da:	66 90                	xchg   ax,ax
c001a7dc:	6a 00                	push   0x0
c001a7de:	66 90                	xchg   ax,ax
c001a7e0:	e8 3c fe ff ff       	call   c001a621 <Vm::fpuSetReg(int, unsigned long long)>
c001a7e5:	eb b1                	jmp    c001a798 <Vm::x87Handler(regs*)+0x7a>
c001a7e7:	90                   	nop
c001a7e8:	e8 b7 fc ff ff       	call   c001a4a4 <Vm::fpuGetLog210()>
c001a7ed:	eb 9d                	jmp    c001a78c <Vm::x87Handler(regs*)+0x6e>
c001a7ef:	90                   	nop
c001a7f0:	e8 7f fc ff ff       	call   c001a474 <Vm::fpuGetLog2E()>
c001a7f5:	eb 95                	jmp    c001a78c <Vm::x87Handler(regs*)+0x6e>
c001a7f7:	90                   	nop
c001a7f8:	e8 6f fc ff ff       	call   c001a46c <Vm::fpuGetPi()>
c001a7fd:	eb 8d                	jmp    c001a78c <Vm::x87Handler(regs*)+0x6e>
c001a7ff:	90                   	nop
c001a800:	e8 b7 fc ff ff       	call   c001a4bc <Vm::fpuGetLog102()>
c001a805:	eb 85                	jmp    c001a78c <Vm::x87Handler(regs*)+0x6e>
c001a807:	90                   	nop
c001a808:	e8 7f fc ff ff       	call   c001a48c <Vm::fpuGetLogE2()>
c001a80d:	e9 7a ff ff ff       	jmp    c001a78c <Vm::x87Handler(regs*)+0x6e>
c001a812:	66 90                	xchg   ax,ax
c001a814:	8d 50 40             	lea    edx,[eax+0x40]
c001a817:	80 fa 07             	cmp    dl,0x7
c001a81a:	77 18                	ja     c001a834 <Vm::x87Handler(regs*)+0x116>
c001a81c:	83 ec 0c             	sub    esp,0xc
c001a81f:	2d c0 00 00 00       	sub    eax,0xc0
c001a824:	50                   	push   eax
c001a825:	e8 b4 fd ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001a82a:	59                   	pop    ecx
c001a82b:	5e                   	pop    esi
c001a82c:	e9 5f ff ff ff       	jmp    c001a790 <Vm::x87Handler(regs*)+0x72>
c001a831:	8d 76 00             	lea    esi,[esi+0x0]
c001a834:	8d 50 38             	lea    edx,[eax+0x38]
c001a837:	80 fa 07             	cmp    dl,0x7
c001a83a:	77 3c                	ja     c001a878 <Vm::x87Handler(regs*)+0x15a>
c001a83c:	83 ec 0c             	sub    esp,0xc
c001a83f:	2d c8 00 00 00       	sub    eax,0xc8
c001a844:	50                   	push   eax
c001a845:	e8 94 fd ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001a84a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a851:	89 c6                	mov    esi,eax
c001a853:	89 d7                	mov    edi,edx
c001a855:	e8 84 fd ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001a85a:	83 c4 0c             	add    esp,0xc
c001a85d:	52                   	push   edx
c001a85e:	50                   	push   eax
c001a85f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a863:	2d c8 00 00 00       	sub    eax,0xc8
c001a868:	50                   	push   eax
c001a869:	e8 b3 fd ff ff       	call   c001a621 <Vm::fpuSetReg(int, unsigned long long)>
c001a86e:	83 c4 0c             	add    esp,0xc
c001a871:	57                   	push   edi
c001a872:	56                   	push   esi
c001a873:	e9 64 ff ff ff       	jmp    c001a7dc <Vm::x87Handler(regs*)+0xbe>
c001a878:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a87c:	84 d2                	test   dl,dl
c001a87e:	75 10                	jne    c001a890 <Vm::x87Handler(regs*)+0x172>
c001a880:	83 ec 0c             	sub    esp,0xc
c001a883:	ff 36                	push   DWORD PTR [esi]
c001a885:	e8 8d fa ff ff       	call   c001a317 <Vm::fpu32ToInternal(unsigned int)>
c001a88a:	e9 c9 00 00 00       	jmp    c001a958 <Vm::x87Handler(regs*)+0x23a>
c001a88f:	90                   	nop
c001a890:	80 fa 03             	cmp    dl,0x3
c001a893:	75 13                	jne    c001a8a8 <Vm::x87Handler(regs*)+0x18a>
c001a895:	e8 31 fe ff ff       	call   c001a6cb <Vm::fpuPop()>
c001a89a:	55                   	push   ebp
c001a89b:	55                   	push   ebp
c001a89c:	52                   	push   edx
c001a89d:	50                   	push   eax
c001a89e:	e8 0d fa ff ff       	call   c001a2b0 <Vm::fpuInternalTo32(unsigned long long)>
c001a8a3:	e9 90 00 00 00       	jmp    c001a938 <Vm::x87Handler(regs*)+0x21a>
c001a8a8:	80 fa 05             	cmp    dl,0x5
c001a8ab:	75 0f                	jne    c001a8bc <Vm::x87Handler(regs*)+0x19e>
c001a8ad:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a8b0:	66 a3 42 9e 02 c0    	mov    ds:0xc0029e42,ax
c001a8b6:	e9 ed 00 00 00       	jmp    c001a9a8 <Vm::x87Handler(regs*)+0x28a>
c001a8bb:	90                   	nop
c001a8bc:	31 c0                	xor    eax,eax
c001a8be:	80 fa 07             	cmp    dl,0x7
c001a8c1:	0f 85 69 09 00 00    	jne    c001b230 <Vm::x87Handler(regs*)+0xb12>
c001a8c7:	66 a1 42 9e 02 c0    	mov    ax,ds:0xc0029e42
c001a8cd:	66 89 06             	mov    WORD PTR [esi],ax
c001a8d0:	e9 d3 00 00 00       	jmp    c001a9a8 <Vm::x87Handler(regs*)+0x28a>
c001a8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8d8:	80 fa d8             	cmp    dl,0xd8
c001a8db:	0f 84 d3 00 00 00    	je     c001a9b4 <Vm::x87Handler(regs*)+0x296>
c001a8e1:	80 fa dc             	cmp    dl,0xdc
c001a8e4:	0f 84 2a 02 00 00    	je     c001ab14 <Vm::x87Handler(regs*)+0x3f6>
c001a8ea:	80 fa de             	cmp    dl,0xde
c001a8ed:	0f 84 f1 02 00 00    	je     c001abe4 <Vm::x87Handler(regs*)+0x4c6>
c001a8f3:	80 fa dd             	cmp    dl,0xdd
c001a8f6:	0f 84 94 04 00 00    	je     c001ad90 <Vm::x87Handler(regs*)+0x672>
c001a8fc:	80 fa da             	cmp    dl,0xda
c001a8ff:	0f 84 5f 05 00 00    	je     c001ae64 <Vm::x87Handler(regs*)+0x746>
c001a905:	80 fa df             	cmp    dl,0xdf
c001a908:	0f 84 aa 05 00 00    	je     c001aeb8 <Vm::x87Handler(regs*)+0x79a>
c001a90e:	31 c0                	xor    eax,eax
c001a910:	80 fa db             	cmp    dl,0xdb
c001a913:	0f 85 17 09 00 00    	jne    c001b230 <Vm::x87Handler(regs*)+0xb12>
c001a919:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a91d:	80 fa 03             	cmp    dl,0x3
c001a920:	0f 85 c2 06 00 00    	jne    c001afe8 <Vm::x87Handler(regs*)+0x8ca>
c001a926:	e8 a0 fd ff ff       	call   c001a6cb <Vm::fpuPop()>
c001a92b:	55                   	push   ebp
c001a92c:	55                   	push   ebp
c001a92d:	8d 76 00             	lea    esi,[esi+0x0]
c001a930:	52                   	push   edx
c001a931:	50                   	push   eax
c001a932:	e8 2e fa ff ff       	call   c001a365 <Vm::fpuFloatToLong(unsigned long long)>
c001a937:	90                   	nop
c001a938:	83 c4 10             	add    esp,0x10
c001a93b:	89 06                	mov    DWORD PTR [esi],eax
c001a93d:	eb 69                	jmp    c001a9a8 <Vm::x87Handler(regs*)+0x28a>
c001a93f:	90                   	nop
c001a940:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a944:	84 d2                	test   dl,dl
c001a946:	0f 85 2c 06 00 00    	jne    c001af78 <Vm::x87Handler(regs*)+0x85a>
c001a94c:	57                   	push   edi
c001a94d:	57                   	push   edi
c001a94e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a951:	ff 36                	push   DWORD PTR [esi]
c001a953:	e8 04 fa ff ff       	call   c001a35c <Vm::fpu64ToInternal(unsigned long long)>
c001a958:	5e                   	pop    esi
c001a959:	5f                   	pop    edi
c001a95a:	52                   	push   edx
c001a95b:	50                   	push   eax
c001a95c:	e8 0c fd ff ff       	call   c001a66d <Vm::fpuPush(unsigned long long)>
c001a961:	8d 76 00             	lea    esi,[esi+0x0]
c001a964:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a968:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a96b:	e9 2c fe ff ff       	jmp    c001a79c <Vm::x87Handler(regs*)+0x7e>
c001a970:	80 fa 03             	cmp    dl,0x3
c001a973:	0f 85 2b 07 00 00    	jne    c001b0a4 <Vm::x87Handler(regs*)+0x986>
c001a979:	57                   	push   edi
c001a97a:	57                   	push   edi
c001a97b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a97e:	ff 36                	push   DWORD PTR [esi]
c001a980:	e8 d7 f9 ff ff       	call   c001a35c <Vm::fpu64ToInternal(unsigned long long)>
c001a985:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a98c:	89 c6                	mov    esi,eax
c001a98e:	89 d7                	mov    edi,edx
c001a990:	e8 49 fc ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001a995:	57                   	push   edi
c001a996:	56                   	push   esi
c001a997:	52                   	push   edx
c001a998:	50                   	push   eax
c001a999:	e8 60 fb ff ff       	call   c001a4fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a99e:	83 c4 20             	add    esp,0x20
c001a9a1:	e8 25 fd ff ff       	call   c001a6cb <Vm::fpuPop()>
c001a9a6:	66 90                	xchg   ax,ax
c001a9a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9ac:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a9af:	e9 ec fd ff ff       	jmp    c001a7a0 <Vm::x87Handler(regs*)+0x82>
c001a9b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a9b8:	8d 50 40             	lea    edx,[eax+0x40]
c001a9bb:	80 fa 07             	cmp    dl,0x7
c001a9be:	77 2c                	ja     c001a9ec <Vm::x87Handler(regs*)+0x2ce>
c001a9c0:	83 ec 0c             	sub    esp,0xc
c001a9c3:	2d c0 00 00 00       	sub    eax,0xc0
c001a9c8:	50                   	push   eax
c001a9c9:	e8 10 fc ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001a9ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a9d5:	89 c6                	mov    esi,eax
c001a9d7:	89 d7                	mov    edi,edx
c001a9d9:	e8 00 fc ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001a9de:	57                   	push   edi
c001a9df:	56                   	push   esi
c001a9e0:	52                   	push   edx
c001a9e1:	50                   	push   eax
c001a9e2:	e8 6d fb ff ff       	call   c001a554 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a9e7:	eb 33                	jmp    c001aa1c <Vm::x87Handler(regs*)+0x2fe>
c001a9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9ec:	8d 50 38             	lea    edx,[eax+0x38]
c001a9ef:	80 fa 07             	cmp    dl,0x7
c001a9f2:	77 30                	ja     c001aa24 <Vm::x87Handler(regs*)+0x306>
c001a9f4:	83 ec 0c             	sub    esp,0xc
c001a9f7:	2d c8 00 00 00       	sub    eax,0xc8
c001a9fc:	50                   	push   eax
c001a9fd:	e8 dc fb ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001aa02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aa09:	89 c6                	mov    esi,eax
c001aa0b:	89 d7                	mov    edi,edx
c001aa0d:	e8 cc fb ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001aa12:	57                   	push   edi
c001aa13:	56                   	push   esi
c001aa14:	52                   	push   edx
c001aa15:	50                   	push   eax
c001aa16:	e8 72 fb ff ff       	call   c001a58d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001aa1b:	90                   	nop
c001aa1c:	83 c4 1c             	add    esp,0x1c
c001aa1f:	e9 b4 fd ff ff       	jmp    c001a7d8 <Vm::x87Handler(regs*)+0xba>
c001aa24:	8d 50 30             	lea    edx,[eax+0x30]
c001aa27:	80 fa 07             	cmp    dl,0x7
c001aa2a:	77 10                	ja     c001aa3c <Vm::x87Handler(regs*)+0x31e>
c001aa2c:	83 ec 0c             	sub    esp,0xc
c001aa2f:	2d d0 00 00 00       	sub    eax,0xd0
c001aa34:	e9 c3 03 00 00       	jmp    c001adfc <Vm::x87Handler(regs*)+0x6de>
c001aa39:	8d 76 00             	lea    esi,[esi+0x0]
c001aa3c:	8d 50 28             	lea    edx,[eax+0x28]
c001aa3f:	80 fa 07             	cmp    dl,0x7
c001aa42:	77 10                	ja     c001aa54 <Vm::x87Handler(regs*)+0x336>
c001aa44:	83 ec 0c             	sub    esp,0xc
c001aa47:	2d d8 00 00 00       	sub    eax,0xd8
c001aa4c:	e9 e7 03 00 00       	jmp    c001ae38 <Vm::x87Handler(regs*)+0x71a>
c001aa51:	8d 76 00             	lea    esi,[esi+0x0]
c001aa54:	8d 50 20             	lea    edx,[eax+0x20]
c001aa57:	80 fa 07             	cmp    dl,0x7
c001aa5a:	77 1c                	ja     c001aa78 <Vm::x87Handler(regs*)+0x35a>
c001aa5c:	83 ec 0c             	sub    esp,0xc
c001aa5f:	2d e0 00 00 00       	sub    eax,0xe0
c001aa64:	50                   	push   eax
c001aa65:	e8 74 fb ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001aa6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aa71:	89 c6                	mov    esi,eax
c001aa73:	89 d7                	mov    edi,edx
c001aa75:	eb 25                	jmp    c001aa9c <Vm::x87Handler(regs*)+0x37e>
c001aa77:	90                   	nop
c001aa78:	8d 50 18             	lea    edx,[eax+0x18]
c001aa7b:	80 fa 07             	cmp    dl,0x7
c001aa7e:	77 30                	ja     c001aab0 <Vm::x87Handler(regs*)+0x392>
c001aa80:	83 ec 0c             	sub    esp,0xc
c001aa83:	6a 00                	push   0x0
c001aa85:	e8 54 fb ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001aa8a:	89 c6                	mov    esi,eax
c001aa8c:	89 d7                	mov    edi,edx
c001aa8e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aa92:	2d e8 00 00 00       	sub    eax,0xe8
c001aa97:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa9a:	66 90                	xchg   ax,ax
c001aa9c:	e8 3d fb ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001aaa1:	57                   	push   edi
c001aaa2:	56                   	push   esi
c001aaa3:	52                   	push   edx
c001aaa4:	50                   	push   eax
c001aaa5:	e8 d4 fa ff ff       	call   c001a57e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001aaaa:	e9 6d ff ff ff       	jmp    c001aa1c <Vm::x87Handler(regs*)+0x2fe>
c001aaaf:	90                   	nop
c001aab0:	8d 50 10             	lea    edx,[eax+0x10]
c001aab3:	80 fa 07             	cmp    dl,0x7
c001aab6:	77 1c                	ja     c001aad4 <Vm::x87Handler(regs*)+0x3b6>
c001aab8:	83 ec 0c             	sub    esp,0xc
c001aabb:	2d f0 00 00 00       	sub    eax,0xf0
c001aac0:	50                   	push   eax
c001aac1:	e8 18 fb ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001aac6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aacd:	89 c6                	mov    esi,eax
c001aacf:	89 d7                	mov    edi,edx
c001aad1:	eb 25                	jmp    c001aaf8 <Vm::x87Handler(regs*)+0x3da>
c001aad3:	90                   	nop
c001aad4:	3c f7                	cmp    al,0xf7
c001aad6:	0f 86 00 04 00 00    	jbe    c001aedc <Vm::x87Handler(regs*)+0x7be>
c001aadc:	83 ec 0c             	sub    esp,0xc
c001aadf:	6a 00                	push   0x0
c001aae1:	e8 f8 fa ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001aae6:	89 c6                	mov    esi,eax
c001aae8:	89 d7                	mov    edi,edx
c001aaea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aaee:	2d f8 00 00 00       	sub    eax,0xf8
c001aaf3:	89 04 24             	mov    DWORD PTR [esp],eax
c001aaf6:	66 90                	xchg   ax,ax
c001aaf8:	e8 e1 fa ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001aafd:	57                   	push   edi
c001aafe:	56                   	push   esi
c001aaff:	52                   	push   edx
c001ab00:	50                   	push   eax
c001ab01:	e8 a6 fa ff ff       	call   c001a5ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ab06:	83 c4 1c             	add    esp,0x1c
c001ab09:	52                   	push   edx
c001ab0a:	50                   	push   eax
c001ab0b:	6a 00                	push   0x0
c001ab0d:	e9 6a 02 00 00       	jmp    c001ad7c <Vm::x87Handler(regs*)+0x65e>
c001ab12:	66 90                	xchg   ax,ax
c001ab14:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ab18:	8d 50 40             	lea    edx,[eax+0x40]
c001ab1b:	80 fa 07             	cmp    dl,0x7
c001ab1e:	77 38                	ja     c001ab58 <Vm::x87Handler(regs*)+0x43a>
c001ab20:	83 ec 0c             	sub    esp,0xc
c001ab23:	2d c0 00 00 00       	sub    eax,0xc0
c001ab28:	50                   	push   eax
c001ab29:	e8 b0 fa ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ab2e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab35:	89 c6                	mov    esi,eax
c001ab37:	89 d7                	mov    edi,edx
c001ab39:	e8 a0 fa ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ab3e:	57                   	push   edi
c001ab3f:	56                   	push   esi
c001ab40:	52                   	push   edx
c001ab41:	50                   	push   eax
c001ab42:	e8 0d fa ff ff       	call   c001a554 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ab47:	83 c4 1c             	add    esp,0x1c
c001ab4a:	52                   	push   edx
c001ab4b:	50                   	push   eax
c001ab4c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ab50:	2d c0 00 00 00       	sub    eax,0xc0
c001ab55:	eb 41                	jmp    c001ab98 <Vm::x87Handler(regs*)+0x47a>
c001ab57:	90                   	nop
c001ab58:	8d 50 38             	lea    edx,[eax+0x38]
c001ab5b:	80 fa 07             	cmp    dl,0x7
c001ab5e:	77 40                	ja     c001aba0 <Vm::x87Handler(regs*)+0x482>
c001ab60:	83 ec 0c             	sub    esp,0xc
c001ab63:	2d c8 00 00 00       	sub    eax,0xc8
c001ab68:	50                   	push   eax
c001ab69:	e8 70 fa ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ab6e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab75:	89 c6                	mov    esi,eax
c001ab77:	89 d7                	mov    edi,edx
c001ab79:	e8 60 fa ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ab7e:	57                   	push   edi
c001ab7f:	56                   	push   esi
c001ab80:	52                   	push   edx
c001ab81:	50                   	push   eax
c001ab82:	e8 06 fa ff ff       	call   c001a58d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ab87:	83 c4 1c             	add    esp,0x1c
c001ab8a:	52                   	push   edx
c001ab8b:	50                   	push   eax
c001ab8c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ab90:	2d c8 00 00 00       	sub    eax,0xc8
c001ab95:	8d 76 00             	lea    esi,[esi+0x0]
c001ab98:	50                   	push   eax
c001ab99:	e9 42 fc ff ff       	jmp    c001a7e0 <Vm::x87Handler(regs*)+0xc2>
c001ab9e:	66 90                	xchg   ax,ax
c001aba0:	83 c0 18             	add    eax,0x18
c001aba3:	3c 07                	cmp    al,0x7
c001aba5:	0f 87 6d 04 00 00    	ja     c001b018 <Vm::x87Handler(regs*)+0x8fa>
c001abab:	83 ec 0c             	sub    esp,0xc
c001abae:	6a 00                	push   0x0
c001abb0:	e8 29 fa ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001abb5:	89 c6                	mov    esi,eax
c001abb7:	89 d7                	mov    edi,edx
c001abb9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001abbd:	2d e8 00 00 00       	sub    eax,0xe8
c001abc2:	89 04 24             	mov    DWORD PTR [esp],eax
c001abc5:	e8 14 fa ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001abca:	57                   	push   edi
c001abcb:	56                   	push   esi
c001abcc:	52                   	push   edx
c001abcd:	50                   	push   eax
c001abce:	e8 ab f9 ff ff       	call   c001a57e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001abd3:	83 c4 1c             	add    esp,0x1c
c001abd6:	52                   	push   edx
c001abd7:	50                   	push   eax
c001abd8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001abdc:	2d e8 00 00 00       	sub    eax,0xe8
c001abe1:	eb b5                	jmp    c001ab98 <Vm::x87Handler(regs*)+0x47a>
c001abe3:	90                   	nop
c001abe4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001abe8:	8d 50 40             	lea    edx,[eax+0x40]
c001abeb:	80 fa 07             	cmp    dl,0x7
c001abee:	77 3c                	ja     c001ac2c <Vm::x87Handler(regs*)+0x50e>
c001abf0:	83 ec 0c             	sub    esp,0xc
c001abf3:	2d c0 00 00 00       	sub    eax,0xc0
c001abf8:	50                   	push   eax
c001abf9:	e8 e0 f9 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001abfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac05:	89 c6                	mov    esi,eax
c001ac07:	89 d7                	mov    edi,edx
c001ac09:	e8 d0 f9 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ac0e:	57                   	push   edi
c001ac0f:	56                   	push   esi
c001ac10:	52                   	push   edx
c001ac11:	50                   	push   eax
c001ac12:	e8 3d f9 ff ff       	call   c001a554 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ac17:	83 c4 1c             	add    esp,0x1c
c001ac1a:	52                   	push   edx
c001ac1b:	50                   	push   eax
c001ac1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac20:	2d c0 00 00 00       	sub    eax,0xc0
c001ac25:	e9 b2 01 00 00       	jmp    c001addc <Vm::x87Handler(regs*)+0x6be>
c001ac2a:	66 90                	xchg   ax,ax
c001ac2c:	8d 50 20             	lea    edx,[eax+0x20]
c001ac2f:	80 fa 07             	cmp    dl,0x7
c001ac32:	77 3c                	ja     c001ac70 <Vm::x87Handler(regs*)+0x552>
c001ac34:	83 ec 0c             	sub    esp,0xc
c001ac37:	2d e0 00 00 00       	sub    eax,0xe0
c001ac3c:	50                   	push   eax
c001ac3d:	e8 9c f9 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ac42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac49:	89 c6                	mov    esi,eax
c001ac4b:	89 d7                	mov    edi,edx
c001ac4d:	e8 8c f9 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ac52:	57                   	push   edi
c001ac53:	56                   	push   esi
c001ac54:	52                   	push   edx
c001ac55:	50                   	push   eax
c001ac56:	e8 23 f9 ff ff       	call   c001a57e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ac5b:	83 c4 1c             	add    esp,0x1c
c001ac5e:	52                   	push   edx
c001ac5f:	50                   	push   eax
c001ac60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac64:	2d e0 00 00 00       	sub    eax,0xe0
c001ac69:	e9 6e 01 00 00       	jmp    c001addc <Vm::x87Handler(regs*)+0x6be>
c001ac6e:	66 90                	xchg   ax,ax
c001ac70:	8d 50 18             	lea    edx,[eax+0x18]
c001ac73:	80 fa 07             	cmp    dl,0x7
c001ac76:	77 3c                	ja     c001acb4 <Vm::x87Handler(regs*)+0x596>
c001ac78:	83 ec 0c             	sub    esp,0xc
c001ac7b:	6a 00                	push   0x0
c001ac7d:	e8 5c f9 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ac82:	89 c6                	mov    esi,eax
c001ac84:	89 d7                	mov    edi,edx
c001ac86:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac8a:	2d e8 00 00 00       	sub    eax,0xe8
c001ac8f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac92:	e8 47 f9 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ac97:	57                   	push   edi
c001ac98:	56                   	push   esi
c001ac99:	52                   	push   edx
c001ac9a:	50                   	push   eax
c001ac9b:	e8 de f8 ff ff       	call   c001a57e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001aca0:	83 c4 1c             	add    esp,0x1c
c001aca3:	52                   	push   edx
c001aca4:	50                   	push   eax
c001aca5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aca9:	2d e8 00 00 00       	sub    eax,0xe8
c001acae:	e9 29 01 00 00       	jmp    c001addc <Vm::x87Handler(regs*)+0x6be>
c001acb3:	90                   	nop
c001acb4:	8d 50 38             	lea    edx,[eax+0x38]
c001acb7:	80 fa 07             	cmp    dl,0x7
c001acba:	77 3c                	ja     c001acf8 <Vm::x87Handler(regs*)+0x5da>
c001acbc:	83 ec 0c             	sub    esp,0xc
c001acbf:	2d c8 00 00 00       	sub    eax,0xc8
c001acc4:	50                   	push   eax
c001acc5:	e8 14 f9 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001acca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acd1:	89 c6                	mov    esi,eax
c001acd3:	89 d7                	mov    edi,edx
c001acd5:	e8 04 f9 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001acda:	57                   	push   edi
c001acdb:	56                   	push   esi
c001acdc:	52                   	push   edx
c001acdd:	50                   	push   eax
c001acde:	e8 aa f8 ff ff       	call   c001a58d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ace3:	83 c4 1c             	add    esp,0x1c
c001ace6:	52                   	push   edx
c001ace7:	50                   	push   eax
c001ace8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001acec:	2d c8 00 00 00       	sub    eax,0xc8
c001acf1:	e9 82 00 00 00       	jmp    c001ad78 <Vm::x87Handler(regs*)+0x65a>
c001acf6:	66 90                	xchg   ax,ax
c001acf8:	3c f7                	cmp    al,0xf7
c001acfa:	76 38                	jbe    c001ad34 <Vm::x87Handler(regs*)+0x616>
c001acfc:	83 ec 0c             	sub    esp,0xc
c001acff:	6a 00                	push   0x0
c001ad01:	e8 d8 f8 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ad06:	89 c6                	mov    esi,eax
c001ad08:	89 d7                	mov    edi,edx
c001ad0a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad0e:	2d f8 00 00 00       	sub    eax,0xf8
c001ad13:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad16:	e8 c3 f8 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ad1b:	57                   	push   edi
c001ad1c:	56                   	push   esi
c001ad1d:	52                   	push   edx
c001ad1e:	50                   	push   eax
c001ad1f:	e8 88 f8 ff ff       	call   c001a5ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ad24:	83 c4 1c             	add    esp,0x1c
c001ad27:	52                   	push   edx
c001ad28:	50                   	push   eax
c001ad29:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad2d:	2d f8 00 00 00       	sub    eax,0xf8
c001ad32:	eb 44                	jmp    c001ad78 <Vm::x87Handler(regs*)+0x65a>
c001ad34:	8d 50 10             	lea    edx,[eax+0x10]
c001ad37:	80 fa 07             	cmp    dl,0x7
c001ad3a:	0f 87 6c 01 00 00    	ja     c001aeac <Vm::x87Handler(regs*)+0x78e>
c001ad40:	83 ec 0c             	sub    esp,0xc
c001ad43:	2d f0 00 00 00       	sub    eax,0xf0
c001ad48:	50                   	push   eax
c001ad49:	e8 90 f8 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ad4e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad55:	89 c6                	mov    esi,eax
c001ad57:	89 d7                	mov    edi,edx
c001ad59:	e8 80 f8 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ad5e:	57                   	push   edi
c001ad5f:	56                   	push   esi
c001ad60:	52                   	push   edx
c001ad61:	50                   	push   eax
c001ad62:	e8 45 f8 ff ff       	call   c001a5ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ad67:	83 c4 1c             	add    esp,0x1c
c001ad6a:	52                   	push   edx
c001ad6b:	50                   	push   eax
c001ad6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad70:	2d f0 00 00 00       	sub    eax,0xf0
c001ad75:	8d 76 00             	lea    esi,[esi+0x0]
c001ad78:	50                   	push   eax
c001ad79:	8d 76 00             	lea    esi,[esi+0x0]
c001ad7c:	e8 a0 f8 ff ff       	call   c001a621 <Vm::fpuSetReg(int, unsigned long long)>
c001ad81:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ad85:	e8 41 f9 ff ff       	call   c001a6cb <Vm::fpuPop()>
c001ad8a:	e9 0d fa ff ff       	jmp    c001a79c <Vm::x87Handler(regs*)+0x7e>
c001ad8f:	90                   	nop
c001ad90:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad94:	8d 50 30             	lea    edx,[eax+0x30]
c001ad97:	80 fa 07             	cmp    dl,0x7
c001ad9a:	77 20                	ja     c001adbc <Vm::x87Handler(regs*)+0x69e>
c001ad9c:	83 ec 0c             	sub    esp,0xc
c001ad9f:	6a 00                	push   0x0
c001ada1:	e8 38 f8 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ada6:	83 c4 0c             	add    esp,0xc
c001ada9:	52                   	push   edx
c001adaa:	50                   	push   eax
c001adab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001adaf:	2d d0 00 00 00       	sub    eax,0xd0
c001adb4:	e9 df fd ff ff       	jmp    c001ab98 <Vm::x87Handler(regs*)+0x47a>
c001adb9:	8d 76 00             	lea    esi,[esi+0x0]
c001adbc:	8d 50 28             	lea    edx,[eax+0x28]
c001adbf:	80 fa 07             	cmp    dl,0x7
c001adc2:	77 28                	ja     c001adec <Vm::x87Handler(regs*)+0x6ce>
c001adc4:	83 ec 0c             	sub    esp,0xc
c001adc7:	6a 00                	push   0x0
c001adc9:	e8 10 f8 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001adce:	83 c4 0c             	add    esp,0xc
c001add1:	52                   	push   edx
c001add2:	50                   	push   eax
c001add3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001add7:	2d d8 00 00 00       	sub    eax,0xd8
c001addc:	50                   	push   eax
c001addd:	e8 3f f8 ff ff       	call   c001a621 <Vm::fpuSetReg(int, unsigned long long)>
c001ade2:	e8 e4 f8 ff ff       	call   c001a6cb <Vm::fpuPop()>
c001ade7:	e9 ac f9 ff ff       	jmp    c001a798 <Vm::x87Handler(regs*)+0x7a>
c001adec:	8d 50 20             	lea    edx,[eax+0x20]
c001adef:	80 fa 07             	cmp    dl,0x7
c001adf2:	77 30                	ja     c001ae24 <Vm::x87Handler(regs*)+0x706>
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	2d e0 00 00 00       	sub    eax,0xe0
c001adfc:	50                   	push   eax
c001adfd:	e8 dc f7 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ae02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae09:	89 c6                	mov    esi,eax
c001ae0b:	89 d7                	mov    edi,edx
c001ae0d:	e8 cc f7 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ae12:	57                   	push   edi
c001ae13:	56                   	push   esi
c001ae14:	52                   	push   edx
c001ae15:	50                   	push   eax
c001ae16:	e8 e3 f6 ff ff       	call   c001a4fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ae1b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ae1f:	e9 78 02 00 00       	jmp    c001b09c <Vm::x87Handler(regs*)+0x97e>
c001ae24:	8d 50 18             	lea    edx,[eax+0x18]
c001ae27:	80 fa 07             	cmp    dl,0x7
c001ae2a:	0f 87 10 fb ff ff    	ja     c001a940 <Vm::x87Handler(regs*)+0x222>
c001ae30:	83 ec 0c             	sub    esp,0xc
c001ae33:	2d e8 00 00 00       	sub    eax,0xe8
c001ae38:	50                   	push   eax
c001ae39:	e8 a0 f7 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ae3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae45:	89 c6                	mov    esi,eax
c001ae47:	89 d7                	mov    edi,edx
c001ae49:	e8 90 f7 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ae4e:	57                   	push   edi
c001ae4f:	56                   	push   esi
c001ae50:	52                   	push   edx
c001ae51:	50                   	push   eax
c001ae52:	e8 a7 f6 ff ff       	call   c001a4fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ae57:	83 c4 20             	add    esp,0x20
c001ae5a:	e8 6c f8 ff ff       	call   c001a6cb <Vm::fpuPop()>
c001ae5f:	eb 6f                	jmp    c001aed0 <Vm::x87Handler(regs*)+0x7b2>
c001ae61:	8d 76 00             	lea    esi,[esi+0x0]
c001ae64:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001ae68:	0f 85 22 01 00 00    	jne    c001af90 <Vm::x87Handler(regs*)+0x872>
c001ae6e:	66 90                	xchg   ax,ax
c001ae70:	83 ec 0c             	sub    esp,0xc
c001ae73:	6a 01                	push   0x1
c001ae75:	e8 64 f7 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ae7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae81:	89 c6                	mov    esi,eax
c001ae83:	89 d7                	mov    edi,edx
c001ae85:	e8 54 f7 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001ae8a:	57                   	push   edi
c001ae8b:	56                   	push   esi
c001ae8c:	52                   	push   edx
c001ae8d:	50                   	push   eax
c001ae8e:	e8 6b f6 ff ff       	call   c001a4fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ae93:	83 c4 20             	add    esp,0x20
c001ae96:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ae9a:	e8 2c f8 ff ff       	call   c001a6cb <Vm::fpuPop()>
c001ae9f:	e8 27 f8 ff ff       	call   c001a6cb <Vm::fpuPop()>
c001aea4:	e9 f7 f8 ff ff       	jmp    c001a7a0 <Vm::x87Handler(regs*)+0x82>
c001aea9:	8d 76 00             	lea    esi,[esi+0x0]
c001aeac:	3c d9                	cmp    al,0xd9
c001aeae:	0f 85 e8 02 00 00    	jne    c001b19c <Vm::x87Handler(regs*)+0xa7e>
c001aeb4:	eb ba                	jmp    c001ae70 <Vm::x87Handler(regs*)+0x752>
c001aeb6:	66 90                	xchg   ax,ax
c001aeb8:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001aebc:	0f 85 2a 03 00 00    	jne    c001b1ec <Vm::x87Handler(regs*)+0xace>
c001aec2:	0f b7 05 40 9e 02 c0 	movzx  eax,WORD PTR ds:0xc0029e40
c001aec9:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001aecd:	8d 76 00             	lea    esi,[esi+0x0]
c001aed0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001aed4:	e9 c7 f8 ff ff       	jmp    c001a7a0 <Vm::x87Handler(regs*)+0x82>
c001aed9:	8d 76 00             	lea    esi,[esi+0x0]
c001aedc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aee0:	84 d2                	test   dl,dl
c001aee2:	75 10                	jne    c001aef4 <Vm::x87Handler(regs*)+0x7d6>
c001aee4:	83 ec 0c             	sub    esp,0xc
c001aee7:	ff 36                	push   DWORD PTR [esi]
c001aee9:	e8 29 f4 ff ff       	call   c001a317 <Vm::fpu32ToInternal(unsigned int)>
c001aeee:	e9 39 01 00 00       	jmp    c001b02c <Vm::x87Handler(regs*)+0x90e>
c001aef3:	90                   	nop
c001aef4:	80 fa 01             	cmp    dl,0x1
c001aef7:	75 0f                	jne    c001af08 <Vm::x87Handler(regs*)+0x7ea>
c001aef9:	83 ec 0c             	sub    esp,0xc
c001aefc:	ff 36                	push   DWORD PTR [esi]
c001aefe:	e8 14 f4 ff ff       	call   c001a317 <Vm::fpu32ToInternal(unsigned int)>
c001af03:	e9 b4 02 00 00       	jmp    c001b1bc <Vm::x87Handler(regs*)+0xa9e>
c001af08:	80 fa 04             	cmp    dl,0x4
c001af0b:	75 0f                	jne    c001af1c <Vm::x87Handler(regs*)+0x7fe>
c001af0d:	83 ec 0c             	sub    esp,0xc
c001af10:	ff 36                	push   DWORD PTR [esi]
c001af12:	e8 00 f4 ff ff       	call   c001a317 <Vm::fpu32ToInternal(unsigned int)>
c001af17:	e9 9c 01 00 00       	jmp    c001b0b8 <Vm::x87Handler(regs*)+0x99a>
c001af1c:	80 fa 05             	cmp    dl,0x5
c001af1f:	75 1b                	jne    c001af3c <Vm::x87Handler(regs*)+0x81e>
c001af21:	83 ec 0c             	sub    esp,0xc
c001af24:	6a 00                	push   0x0
c001af26:	e8 b3 f6 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001af2b:	89 c7                	mov    edi,eax
c001af2d:	89 d5                	mov    ebp,edx
c001af2f:	58                   	pop    eax
c001af30:	ff 36                	push   DWORD PTR [esi]
c001af32:	e8 e0 f3 ff ff       	call   c001a317 <Vm::fpu32ToInternal(unsigned int)>
c001af37:	e9 bc 01 00 00       	jmp    c001b0f8 <Vm::x87Handler(regs*)+0x9da>
c001af3c:	80 fa 06             	cmp    dl,0x6
c001af3f:	75 0f                	jne    c001af50 <Vm::x87Handler(regs*)+0x832>
c001af41:	83 ec 0c             	sub    esp,0xc
c001af44:	ff 36                	push   DWORD PTR [esi]
c001af46:	e8 cc f3 ff ff       	call   c001a317 <Vm::fpu32ToInternal(unsigned int)>
c001af4b:	e9 cc 01 00 00       	jmp    c001b11c <Vm::x87Handler(regs*)+0x9fe>
c001af50:	31 c0                	xor    eax,eax
c001af52:	80 fa 07             	cmp    dl,0x7
c001af55:	0f 85 d5 02 00 00    	jne    c001b230 <Vm::x87Handler(regs*)+0xb12>
c001af5b:	83 ec 0c             	sub    esp,0xc
c001af5e:	6a 00                	push   0x0
c001af60:	e8 79 f6 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001af65:	89 c7                	mov    edi,eax
c001af67:	89 d5                	mov    ebp,edx
c001af69:	58                   	pop    eax
c001af6a:	ff 36                	push   DWORD PTR [esi]
c001af6c:	e8 a6 f3 ff ff       	call   c001a317 <Vm::fpu32ToInternal(unsigned int)>
c001af71:	e9 ee 01 00 00       	jmp    c001b164 <Vm::x87Handler(regs*)+0xa46>
c001af76:	66 90                	xchg   ax,ax
c001af78:	80 fa 03             	cmp    dl,0x3
c001af7b:	0f 85 f7 01 00 00    	jne    c001b178 <Vm::x87Handler(regs*)+0xa5a>
c001af81:	e8 45 f7 ff ff       	call   c001a6cb <Vm::fpuPop()>
c001af86:	51                   	push   ecx
c001af87:	51                   	push   ecx
c001af88:	e9 03 02 00 00       	jmp    c001b190 <Vm::x87Handler(regs*)+0xa72>
c001af8d:	8d 76 00             	lea    esi,[esi+0x0]
c001af90:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001af94:	80 fa 01             	cmp    dl,0x1
c001af97:	75 0b                	jne    c001afa4 <Vm::x87Handler(regs*)+0x886>
c001af99:	57                   	push   edi
c001af9a:	57                   	push   edi
c001af9b:	8b 06                	mov    eax,DWORD PTR [esi]
c001af9d:	e9 0e 02 00 00       	jmp    c001b1b0 <Vm::x87Handler(regs*)+0xa92>
c001afa2:	66 90                	xchg   ax,ax
c001afa4:	80 fa 04             	cmp    dl,0x4
c001afa7:	75 13                	jne    c001afbc <Vm::x87Handler(regs*)+0x89e>
c001afa9:	31 d2                	xor    edx,edx
c001afab:	51                   	push   ecx
c001afac:	51                   	push   ecx
c001afad:	8b 06                	mov    eax,DWORD PTR [esi]
c001afaf:	52                   	push   edx
c001afb0:	50                   	push   eax
c001afb1:	e8 4a f4 ff ff       	call   c001a400 <Vm::fpuLongToFloat(long long)>
c001afb6:	e9 fd 00 00 00       	jmp    c001b0b8 <Vm::x87Handler(regs*)+0x99a>
c001afbb:	90                   	nop
c001afbc:	31 c0                	xor    eax,eax
c001afbe:	80 fa 07             	cmp    dl,0x7
c001afc1:	0f 85 69 02 00 00    	jne    c001b230 <Vm::x87Handler(regs*)+0xb12>
c001afc7:	83 ec 0c             	sub    esp,0xc
c001afca:	6a 00                	push   0x0
c001afcc:	e8 0d f6 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001afd1:	89 c7                	mov    edi,eax
c001afd3:	89 d5                	mov    ebp,edx
c001afd5:	58                   	pop    eax
c001afd6:	8b 06                	mov    eax,DWORD PTR [esi]
c001afd8:	5a                   	pop    edx
c001afd9:	31 d2                	xor    edx,edx
c001afdb:	52                   	push   edx
c001afdc:	50                   	push   eax
c001afdd:	e8 1e f4 ff ff       	call   c001a400 <Vm::fpuLongToFloat(long long)>
c001afe2:	e9 7d 01 00 00       	jmp    c001b164 <Vm::x87Handler(regs*)+0xa46>
c001afe7:	90                   	nop
c001afe8:	84 d2                	test   dl,dl
c001afea:	75 10                	jne    c001affc <Vm::x87Handler(regs*)+0x8de>
c001afec:	31 d2                	xor    edx,edx
c001afee:	55                   	push   ebp
c001afef:	55                   	push   ebp
c001aff0:	8b 06                	mov    eax,DWORD PTR [esi]
c001aff2:	52                   	push   edx
c001aff3:	50                   	push   eax
c001aff4:	e9 03 02 00 00       	jmp    c001b1fc <Vm::x87Handler(regs*)+0xade>
c001aff9:	8d 76 00             	lea    esi,[esi+0x0]
c001affc:	31 c0                	xor    eax,eax
c001affe:	80 fa 02             	cmp    dl,0x2
c001b001:	0f 85 29 02 00 00    	jne    c001b230 <Vm::x87Handler(regs*)+0xb12>
c001b007:	83 ec 0c             	sub    esp,0xc
c001b00a:	6a 00                	push   0x0
c001b00c:	e8 cd f5 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001b011:	59                   	pop    ecx
c001b012:	5f                   	pop    edi
c001b013:	e9 18 f9 ff ff       	jmp    c001a930 <Vm::x87Handler(regs*)+0x212>
c001b018:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b01c:	84 d2                	test   dl,dl
c001b01e:	75 2c                	jne    c001b04c <Vm::x87Handler(regs*)+0x92e>
c001b020:	50                   	push   eax
c001b021:	50                   	push   eax
c001b022:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b025:	ff 36                	push   DWORD PTR [esi]
c001b027:	e8 30 f3 ff ff       	call   c001a35c <Vm::fpu64ToInternal(unsigned long long)>
c001b02c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b033:	89 c6                	mov    esi,eax
c001b035:	89 d7                	mov    edi,edx
c001b037:	e8 a2 f5 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001b03c:	57                   	push   edi
c001b03d:	56                   	push   esi
c001b03e:	52                   	push   edx
c001b03f:	50                   	push   eax
c001b040:	e8 0f f5 ff ff       	call   c001a554 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b045:	e9 8e 01 00 00       	jmp    c001b1d8 <Vm::x87Handler(regs*)+0xaba>
c001b04a:	66 90                	xchg   ax,ax
c001b04c:	80 fa 01             	cmp    dl,0x1
c001b04f:	75 13                	jne    c001b064 <Vm::x87Handler(regs*)+0x946>
c001b051:	50                   	push   eax
c001b052:	50                   	push   eax
c001b053:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b056:	ff 36                	push   DWORD PTR [esi]
c001b058:	e8 ff f2 ff ff       	call   c001a35c <Vm::fpu64ToInternal(unsigned long long)>
c001b05d:	e9 5a 01 00 00       	jmp    c001b1bc <Vm::x87Handler(regs*)+0xa9e>
c001b062:	66 90                	xchg   ax,ax
c001b064:	80 fa 02             	cmp    dl,0x2
c001b067:	0f 85 03 f9 ff ff    	jne    c001a970 <Vm::x87Handler(regs*)+0x252>
c001b06d:	55                   	push   ebp
c001b06e:	55                   	push   ebp
c001b06f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b072:	ff 36                	push   DWORD PTR [esi]
c001b074:	e8 e3 f2 ff ff       	call   c001a35c <Vm::fpu64ToInternal(unsigned long long)>
c001b079:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b080:	89 c6                	mov    esi,eax
c001b082:	89 d7                	mov    edi,edx
c001b084:	e8 55 f5 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001b089:	57                   	push   edi
c001b08a:	56                   	push   esi
c001b08b:	52                   	push   edx
c001b08c:	50                   	push   eax
c001b08d:	e8 6c f4 ff ff       	call   c001a4fe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b092:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b096:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b099:	8d 76 00             	lea    esi,[esi+0x0]
c001b09c:	83 c4 20             	add    esp,0x20
c001b09f:	e9 fc f6 ff ff       	jmp    c001a7a0 <Vm::x87Handler(regs*)+0x82>
c001b0a4:	80 fa 04             	cmp    dl,0x4
c001b0a7:	75 2f                	jne    c001b0d8 <Vm::x87Handler(regs*)+0x9ba>
c001b0a9:	51                   	push   ecx
c001b0aa:	51                   	push   ecx
c001b0ab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b0ae:	ff 36                	push   DWORD PTR [esi]
c001b0b0:	e8 a7 f2 ff ff       	call   c001a35c <Vm::fpu64ToInternal(unsigned long long)>
c001b0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b0bf:	89 c6                	mov    esi,eax
c001b0c1:	89 d7                	mov    edi,edx
c001b0c3:	e8 16 f5 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001b0c8:	57                   	push   edi
c001b0c9:	56                   	push   esi
c001b0ca:	52                   	push   edx
c001b0cb:	50                   	push   eax
c001b0cc:	e8 ad f4 ff ff       	call   c001a57e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b0d1:	e9 02 01 00 00       	jmp    c001b1d8 <Vm::x87Handler(regs*)+0xaba>
c001b0d6:	66 90                	xchg   ax,ax
c001b0d8:	80 fa 05             	cmp    dl,0x5
c001b0db:	75 2b                	jne    c001b108 <Vm::x87Handler(regs*)+0x9ea>
c001b0dd:	83 ec 0c             	sub    esp,0xc
c001b0e0:	6a 00                	push   0x0
c001b0e2:	e8 f7 f4 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001b0e7:	89 c7                	mov    edi,eax
c001b0e9:	89 d5                	mov    ebp,edx
c001b0eb:	58                   	pop    eax
c001b0ec:	5a                   	pop    edx
c001b0ed:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b0f0:	ff 36                	push   DWORD PTR [esi]
c001b0f2:	e8 65 f2 ff ff       	call   c001a35c <Vm::fpu64ToInternal(unsigned long long)>
c001b0f7:	90                   	nop
c001b0f8:	83 c4 10             	add    esp,0x10
c001b0fb:	55                   	push   ebp
c001b0fc:	57                   	push   edi
c001b0fd:	52                   	push   edx
c001b0fe:	50                   	push   eax
c001b0ff:	e8 7a f4 ff ff       	call   c001a57e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b104:	eb 6a                	jmp    c001b170 <Vm::x87Handler(regs*)+0xa52>
c001b106:	66 90                	xchg   ax,ax
c001b108:	80 fa 06             	cmp    dl,0x6
c001b10b:	75 2f                	jne    c001b13c <Vm::x87Handler(regs*)+0xa1e>
c001b10d:	51                   	push   ecx
c001b10e:	51                   	push   ecx
c001b10f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b112:	ff 36                	push   DWORD PTR [esi]
c001b114:	e8 43 f2 ff ff       	call   c001a35c <Vm::fpu64ToInternal(unsigned long long)>
c001b119:	8d 76 00             	lea    esi,[esi+0x0]
c001b11c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b123:	89 c6                	mov    esi,eax
c001b125:	89 d7                	mov    edi,edx
c001b127:	e8 b2 f4 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001b12c:	57                   	push   edi
c001b12d:	56                   	push   esi
c001b12e:	52                   	push   edx
c001b12f:	50                   	push   eax
c001b130:	e8 77 f4 ff ff       	call   c001a5ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b135:	e9 9e 00 00 00       	jmp    c001b1d8 <Vm::x87Handler(regs*)+0xaba>
c001b13a:	66 90                	xchg   ax,ax
c001b13c:	31 c0                	xor    eax,eax
c001b13e:	80 fa 07             	cmp    dl,0x7
c001b141:	0f 85 e9 00 00 00    	jne    c001b230 <Vm::x87Handler(regs*)+0xb12>
c001b147:	83 ec 0c             	sub    esp,0xc
c001b14a:	6a 00                	push   0x0
c001b14c:	e8 8d f4 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001b151:	89 c7                	mov    edi,eax
c001b153:	89 d5                	mov    ebp,edx
c001b155:	58                   	pop    eax
c001b156:	5a                   	pop    edx
c001b157:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b15a:	ff 36                	push   DWORD PTR [esi]
c001b15c:	e8 fb f1 ff ff       	call   c001a35c <Vm::fpu64ToInternal(unsigned long long)>
c001b161:	8d 76 00             	lea    esi,[esi+0x0]
c001b164:	83 c4 10             	add    esp,0x10
c001b167:	55                   	push   ebp
c001b168:	57                   	push   edi
c001b169:	52                   	push   edx
c001b16a:	50                   	push   eax
c001b16b:	e8 3c f4 ff ff       	call   c001a5ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b170:	83 c4 0c             	add    esp,0xc
c001b173:	eb 67                	jmp    c001b1dc <Vm::x87Handler(regs*)+0xabe>
c001b175:	8d 76 00             	lea    esi,[esi+0x0]
c001b178:	31 c0                	xor    eax,eax
c001b17a:	80 fa 02             	cmp    dl,0x2
c001b17d:	0f 85 ad 00 00 00    	jne    c001b230 <Vm::x87Handler(regs*)+0xb12>
c001b183:	83 ec 0c             	sub    esp,0xc
c001b186:	6a 00                	push   0x0
c001b188:	e8 51 f4 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001b18d:	59                   	pop    ecx
c001b18e:	5f                   	pop    edi
c001b18f:	90                   	nop
c001b190:	52                   	push   edx
c001b191:	50                   	push   eax
c001b192:	e8 77 f1 ff ff       	call   c001a30e <Vm::fpuInternalTo64(unsigned long long)>
c001b197:	e9 84 00 00 00       	jmp    c001b220 <Vm::x87Handler(regs*)+0xb02>
c001b19c:	31 c0                	xor    eax,eax
c001b19e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b1a3:	0f 85 87 00 00 00    	jne    c001b230 <Vm::x87Handler(regs*)+0xb12>
c001b1a9:	50                   	push   eax
c001b1aa:	50                   	push   eax
c001b1ab:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b1ae:	66 90                	xchg   ax,ax
c001b1b0:	31 d2                	xor    edx,edx
c001b1b2:	52                   	push   edx
c001b1b3:	50                   	push   eax
c001b1b4:	e8 47 f2 ff ff       	call   c001a400 <Vm::fpuLongToFloat(long long)>
c001b1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1c3:	89 c6                	mov    esi,eax
c001b1c5:	89 d7                	mov    edi,edx
c001b1c7:	e8 12 f4 ff ff       	call   c001a5de <Vm::fpuGetReg(int)>
c001b1cc:	57                   	push   edi
c001b1cd:	56                   	push   esi
c001b1ce:	52                   	push   edx
c001b1cf:	50                   	push   eax
c001b1d0:	e8 b8 f3 ff ff       	call   c001a58d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b1d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1d8:	83 c4 1c             	add    esp,0x1c
c001b1db:	90                   	nop
c001b1dc:	52                   	push   edx
c001b1dd:	50                   	push   eax
c001b1de:	6a 00                	push   0x0
c001b1e0:	e8 3c f4 ff ff       	call   c001a621 <Vm::fpuSetReg(int, unsigned long long)>
c001b1e5:	e9 7a f7 ff ff       	jmp    c001a964 <Vm::x87Handler(regs*)+0x246>
c001b1ea:	66 90                	xchg   ax,ax
c001b1ec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b1f0:	80 fa 05             	cmp    dl,0x5
c001b1f3:	75 13                	jne    c001b208 <Vm::x87Handler(regs*)+0xaea>
c001b1f5:	55                   	push   ebp
c001b1f6:	55                   	push   ebp
c001b1f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b1fa:	ff 36                	push   DWORD PTR [esi]
c001b1fc:	e8 c3 f1 ff ff       	call   c001a3c4 <Vm::fpuULongToFloat(unsigned long long)>
c001b201:	e9 52 f7 ff ff       	jmp    c001a958 <Vm::x87Handler(regs*)+0x23a>
c001b206:	66 90                	xchg   ax,ax
c001b208:	31 c0                	xor    eax,eax
c001b20a:	80 fa 07             	cmp    dl,0x7
c001b20d:	75 21                	jne    c001b230 <Vm::x87Handler(regs*)+0xb12>
c001b20f:	e8 b7 f4 ff ff       	call   c001a6cb <Vm::fpuPop()>
c001b214:	51                   	push   ecx
c001b215:	51                   	push   ecx
c001b216:	52                   	push   edx
c001b217:	50                   	push   eax
c001b218:	e8 48 f1 ff ff       	call   c001a365 <Vm::fpuFloatToLong(unsigned long long)>
c001b21d:	8d 76 00             	lea    esi,[esi+0x0]
c001b220:	83 c4 10             	add    esp,0x10
c001b223:	89 06                	mov    DWORD PTR [esi],eax
c001b225:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b228:	e9 7b f7 ff ff       	jmp    c001a9a8 <Vm::x87Handler(regs*)+0x28a>
c001b22d:	8d 76 00             	lea    esi,[esi+0x0]
c001b230:	83 c4 1c             	add    esp,0x1c
c001b233:	5b                   	pop    ebx
c001b234:	5e                   	pop    esi
c001b235:	5f                   	pop    edi
c001b236:	5d                   	pop    ebp
c001b237:	c3                   	ret    

c001b238 <__static_initialization_and_destruction_0(int, int)>:
c001b238:	83 ec 0c             	sub    esp,0xc
c001b23b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b240:	75 1a                	jne    c001b25c <__static_initialization_and_destruction_0(int, int)+0x24>
c001b242:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b24a:	75 10                	jne    c001b25c <__static_initialization_and_destruction_0(int, int)+0x24>
c001b24c:	83 ec 0c             	sub    esp,0xc
c001b24f:	68 40 9e 02 c0       	push   0xc0029e40
c001b254:	e8 1f 84 00 00       	call   c0023678 <Vm::_FPUState::_FPUState()>
c001b259:	83 c4 10             	add    esp,0x10
c001b25c:	90                   	nop
c001b25d:	83 c4 0c             	add    esp,0xc
c001b260:	c3                   	ret    
c001b261:	8d 76 00             	lea    esi,[esi+0x0]

c001b264 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b264:	83 ec 0c             	sub    esp,0xc
c001b267:	83 ec 08             	sub    esp,0x8
c001b26a:	68 ff ff 00 00       	push   0xffff
c001b26f:	6a 01                	push   0x1
c001b271:	e8 c2 ff ff ff       	call   c001b238 <__static_initialization_and_destruction_0(int, int)>
c001b276:	83 c4 10             	add    esp,0x10
c001b279:	83 c4 0c             	add    esp,0xc
c001b27c:	c3                   	ret    
c001b27d:	66 90                	xchg   ax,ax
c001b27f:	90                   	nop

c001b280 <FAT::getName()>:
c001b280:	b8 20 6c 02 c0       	mov    eax,0xc0026c20
c001b285:	c3                   	ret    
c001b286:	66 90                	xchg   ax,ax

c001b288 <FAT::tell(void*, unsigned long long*)>:
c001b288:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b28d:	75 09                	jne    c001b298 <FAT::tell(void*, unsigned long long*)+0x10>
c001b28f:	b8 04 00 00 00       	mov    eax,0x4
c001b294:	c3                   	ret    
c001b295:	8d 76 00             	lea    esi,[esi+0x0]
c001b298:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b29d:	75 09                	jne    c001b2a8 <FAT::tell(void*, unsigned long long*)+0x20>
c001b29f:	b8 04 00 00 00       	mov    eax,0x4
c001b2a4:	c3                   	ret    
c001b2a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2ac:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b2af:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b2b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2b6:	89 01                	mov    DWORD PTR [ecx],eax
c001b2b8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b2bb:	b8 00 00 00 00       	mov    eax,0x0
c001b2c0:	c3                   	ret    
c001b2c1:	90                   	nop
c001b2c2:	66 90                	xchg   ax,ax

c001b2c4 <FAT::stat(void*, unsigned long long*)>:
c001b2c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b2c9:	75 09                	jne    c001b2d4 <FAT::stat(void*, unsigned long long*)+0x10>
c001b2cb:	b8 04 00 00 00       	mov    eax,0x4
c001b2d0:	c3                   	ret    
c001b2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b2d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b2d9:	75 09                	jne    c001b2e4 <FAT::stat(void*, unsigned long long*)+0x20>
c001b2db:	b8 04 00 00 00       	mov    eax,0x4
c001b2e0:	c3                   	ret    
c001b2e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b2e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2e8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b2eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b2ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2f2:	89 01                	mov    DWORD PTR [ecx],eax
c001b2f4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b2f7:	b8 00 00 00 00       	mov    eax,0x0
c001b2fc:	c3                   	ret    
c001b2fd:	90                   	nop
c001b2fe:	66 90                	xchg   ax,ax

c001b300 <FAT::~FAT()>:
c001b300:	83 ec 0c             	sub    esp,0xc
c001b303:	ba 6c 6c 02 c0       	mov    edx,0xc0026c6c
c001b308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30c:	89 10                	mov    DWORD PTR [eax],edx
c001b30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b312:	83 ec 0c             	sub    esp,0xc
c001b315:	50                   	push   eax
c001b316:	e8 67 20 ff ff       	call   c000d382 <Filesystem::~Filesystem()>
c001b31b:	83 c4 10             	add    esp,0x10
c001b31e:	90                   	nop
c001b31f:	83 c4 0c             	add    esp,0xc
c001b322:	c3                   	ret    
c001b323:	90                   	nop

c001b324 <FAT::~FAT()>:
c001b324:	83 ec 0c             	sub    esp,0xc
c001b327:	83 ec 0c             	sub    esp,0xc
c001b32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b32e:	e8 cd ff ff ff       	call   c001b300 <FAT::~FAT()>
c001b333:	83 c4 10             	add    esp,0x10
c001b336:	83 ec 08             	sub    esp,0x8
c001b339:	6a 08                	push   0x8
c001b33b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b33f:	e8 22 1c ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001b344:	83 c4 10             	add    esp,0x10
c001b347:	83 c4 0c             	add    esp,0xc
c001b34a:	c3                   	ret    
c001b34b:	90                   	nop

c001b34c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b34c:	83 ec 1c             	sub    esp,0x1c
c001b34f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b356:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b35b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b35f:	8b 04 85 c0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6140]
c001b366:	83 f8 ff             	cmp    eax,0xffffffff
c001b369:	75 35                	jne    c001b3a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b36b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b36f:	88 c2                	mov    dl,al
c001b371:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001b376:	01 d0                	add    eax,edx
c001b378:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b37c:	8b 15 a0 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029ea0
c001b382:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b386:	89 14 85 c0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6140],edx
c001b38d:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001b392:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b396:	89 14 85 40 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd60c0],edx
c001b39d:	eb 19                	jmp    c001b3b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b39f:	90                   	nop
c001b3a0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b3a4:	88 c2                	mov    dl,al
c001b3a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b3aa:	8b 04 85 c0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6140]
c001b3b1:	01 d0                	add    eax,edx
c001b3b3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b3b7:	90                   	nop
c001b3b8:	83 ec 04             	sub    esp,0x4
c001b3bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b3bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b3c3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b3c7:	50                   	push   eax
c001b3c8:	e8 65 b8 fe ff       	call   c0006c32 <f_getlabel>
c001b3cd:	83 c4 10             	add    esp,0x10
c001b3d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b3d9:	75 09                	jne    c001b3e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b3db:	b8 00 00 00 00       	mov    eax,0x0
c001b3e0:	eb 0a                	jmp    c001b3ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b3e2:	66 90                	xchg   ax,ax
c001b3e4:	b8 01 00 00 00       	mov    eax,0x1
c001b3e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3ec:	83 c4 1c             	add    esp,0x1c
c001b3ef:	c3                   	ret    

c001b3f0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b3f0:	57                   	push   edi
c001b3f1:	83 ec 58             	sub    esp,0x58
c001b3f4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b3fc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b400:	b9 0f 00 00 00       	mov    ecx,0xf
c001b405:	b8 00 00 00 00       	mov    eax,0x0
c001b40a:	fc                   	cld    
c001b40b:	89 d7                	mov    edi,edx
c001b40d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b40f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b413:	8b 04 85 c0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6140]
c001b41a:	83 f8 ff             	cmp    eax,0xffffffff
c001b41d:	75 35                	jne    c001b454 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b41f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b423:	88 c2                	mov    dl,al
c001b425:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001b42a:	01 d0                	add    eax,edx
c001b42c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b430:	8b 15 a0 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029ea0
c001b436:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b43a:	89 14 85 c0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6140],edx
c001b441:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001b446:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b44a:	89 14 85 40 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd60c0],edx
c001b451:	eb 19                	jmp    c001b46c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b453:	90                   	nop
c001b454:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b458:	88 c2                	mov    dl,al
c001b45a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b45e:	8b 04 85 c0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6140]
c001b465:	01 d0                	add    eax,edx
c001b467:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b46b:	90                   	nop
c001b46c:	83 ec 08             	sub    esp,0x8
c001b46f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b473:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b477:	50                   	push   eax
c001b478:	e8 03 54 fe ff       	call   c0000880 <strcat>
c001b47d:	83 c4 10             	add    esp,0x10
c001b480:	83 ec 0c             	sub    esp,0xc
c001b483:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b487:	50                   	push   eax
c001b488:	e8 93 b9 fe ff       	call   c0006e20 <f_setlabel>
c001b48d:	83 c4 10             	add    esp,0x10
c001b490:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b494:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b499:	75 09                	jne    c001b4a4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b49b:	b8 00 00 00 00       	mov    eax,0x0
c001b4a0:	eb 0a                	jmp    c001b4ac <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b4a2:	66 90                	xchg   ax,ax
c001b4a4:	b8 01 00 00 00       	mov    eax,0x1
c001b4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4ac:	83 c4 58             	add    esp,0x58
c001b4af:	5f                   	pop    edi
c001b4b0:	c3                   	ret    
c001b4b1:	90                   	nop
c001b4b2:	66 90                	xchg   ax,ax

c001b4b4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b4b4:	83 ec 2c             	sub    esp,0x2c
c001b4b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b4bf:	83 ec 08             	sub    esp,0x8
c001b4c2:	68 44 6c 02 c0       	push   0xc0026c44
c001b4c7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b4cb:	e8 fc 52 fe ff       	call   c00007cc <strcmp>
c001b4d0:	83 c4 10             	add    esp,0x10
c001b4d3:	85 c0                	test   eax,eax
c001b4d5:	0f 94 c0             	sete   al
c001b4d8:	84 c0                	test   al,al
c001b4da:	74 10                	je     c001b4ec <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b4dc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b4e4:	e9 b3 00 00 00       	jmp    c001b59c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b4e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4ec:	83 ec 08             	sub    esp,0x8
c001b4ef:	68 36 6c 02 c0       	push   0xc0026c36
c001b4f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b4f8:	e8 cf 52 fe ff       	call   c00007cc <strcmp>
c001b4fd:	83 c4 10             	add    esp,0x10
c001b500:	85 c0                	test   eax,eax
c001b502:	0f 94 c0             	sete   al
c001b505:	84 c0                	test   al,al
c001b507:	74 0f                	je     c001b518 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b509:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b511:	e9 86 00 00 00       	jmp    c001b59c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b516:	66 90                	xchg   ax,ax
c001b518:	83 ec 08             	sub    esp,0x8
c001b51b:	68 3c 6c 02 c0       	push   0xc0026c3c
c001b520:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b524:	e8 a3 52 fe ff       	call   c00007cc <strcmp>
c001b529:	83 c4 10             	add    esp,0x10
c001b52c:	85 c0                	test   eax,eax
c001b52e:	0f 94 c0             	sete   al
c001b531:	84 c0                	test   al,al
c001b533:	74 0b                	je     c001b540 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b535:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b53d:	eb 5d                	jmp    c001b59c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b53f:	90                   	nop
c001b540:	83 ec 08             	sub    esp,0x8
c001b543:	68 ec 3d 02 c0       	push   0xc0023dec
c001b548:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b54c:	e8 7b 52 fe ff       	call   c00007cc <strcmp>
c001b551:	83 c4 10             	add    esp,0x10
c001b554:	85 c0                	test   eax,eax
c001b556:	0f 94 c0             	sete   al
c001b559:	84 c0                	test   al,al
c001b55b:	74 0b                	je     c001b568 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b55d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b565:	eb 35                	jmp    c001b59c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b567:	90                   	nop
c001b568:	83 ec 08             	sub    esp,0x8
c001b56b:	68 42 6c 02 c0       	push   0xc0026c42
c001b570:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b574:	e8 53 52 fe ff       	call   c00007cc <strcmp>
c001b579:	83 c4 10             	add    esp,0x10
c001b57c:	85 c0                	test   eax,eax
c001b57e:	0f 94 c0             	sete   al
c001b581:	84 c0                	test   al,al
c001b583:	74 0b                	je     c001b590 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b585:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b58d:	eb 0d                	jmp    c001b59c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b58f:	90                   	nop
c001b590:	b8 08 00 00 00       	mov    eax,0x8
c001b595:	e9 ea 00 00 00       	jmp    c001b684 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b59a:	66 90                	xchg   ax,ax
c001b59c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b5a3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b5a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b5ac:	8b 04 85 c0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6140]
c001b5b3:	83 f8 ff             	cmp    eax,0xffffffff
c001b5b6:	75 34                	jne    c001b5ec <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b5b8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b5bc:	88 c2                	mov    dl,al
c001b5be:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001b5c3:	01 d0                	add    eax,edx
c001b5c5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b5c9:	8b 15 a0 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029ea0
c001b5cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b5d3:	89 14 85 c0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6140],edx
c001b5da:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001b5df:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b5e3:	89 14 85 40 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd60c0],edx
c001b5ea:	eb 18                	jmp    c001b604 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b5ec:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b5f0:	88 c2                	mov    dl,al
c001b5f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b5f6:	8b 04 85 c0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6140]
c001b5fd:	01 d0                	add    eax,edx
c001b5ff:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b603:	90                   	nop
c001b604:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b608:	88 04 24             	mov    BYTE PTR [esp],al
c001b60b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b60f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b613:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b61b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b620:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b628:	83 ec 0c             	sub    esp,0xc
c001b62b:	68 00 20 00 00       	push   0x2000
c001b630:	e8 26 e7 fe ff       	call   c0009d5b <malloc>
c001b635:	83 c4 10             	add    esp,0x10
c001b638:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b63c:	68 00 20 00 00       	push   0x2000
c001b641:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b645:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b649:	50                   	push   eax
c001b64a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b64e:	50                   	push   eax
c001b64f:	e8 4d be fe ff       	call   c00074a1 <f_mkfs>
c001b654:	83 c4 10             	add    esp,0x10
c001b657:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b65b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b660:	75 0a                	jne    c001b66c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b662:	b8 00 00 00 00       	mov    eax,0x0
c001b667:	eb 1b                	jmp    c001b684 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b669:	8d 76 00             	lea    esi,[esi+0x0]
c001b66c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b671:	75 09                	jne    c001b67c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b673:	b8 09 00 00 00       	mov    eax,0x9
c001b678:	eb 0a                	jmp    c001b684 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b67a:	66 90                	xchg   ax,ax
c001b67c:	b8 01 00 00 00       	mov    eax,0x1
c001b681:	8d 76 00             	lea    esi,[esi+0x0]
c001b684:	83 c4 2c             	add    esp,0x2c
c001b687:	c3                   	ret    

c001b688 <FAT::tryMount(LogicalDisk*, int)>:
c001b688:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b68e:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001b693:	83 f8 14             	cmp    eax,0x14
c001b696:	75 18                	jne    c001b6b0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b698:	83 ec 0c             	sub    esp,0xc
c001b69b:	68 48 6c 02 c0       	push   0xc0026c48
c001b6a0:	e8 40 99 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001b6a5:	83 c4 10             	add    esp,0x10
c001b6a8:	b0 00                	mov    al,0x0
c001b6aa:	e9 e9 01 00 00       	jmp    c001b898 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b6af:	90                   	nop
c001b6b0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b6b7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b6bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6c3:	3d 00 02 00 00       	cmp    eax,0x200
c001b6c8:	74 0a                	je     c001b6d4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b6ca:	b0 00                	mov    al,0x0
c001b6cc:	e9 c7 01 00 00       	jmp    c001b898 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b6d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6d4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b6dc:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b6e3:	8b 04 85 c0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6140]
c001b6ea:	83 f8 ff             	cmp    eax,0xffffffff
c001b6ed:	74 09                	je     c001b6f8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b6ef:	b0 01                	mov    al,0x1
c001b6f1:	e9 a2 01 00 00       	jmp    c001b898 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b6f6:	66 90                	xchg   ax,ax
c001b6f8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b702:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b70a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b711:	88 c2                	mov    dl,al
c001b713:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001b718:	01 d0                	add    eax,edx
c001b71a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b721:	8b 15 a0 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029ea0
c001b727:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b72e:	89 14 85 c0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6140],edx
c001b735:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001b73a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b741:	89 14 85 40 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd60c0],edx
c001b748:	83 ec 0c             	sub    esp,0xc
c001b74b:	68 54 02 00 00       	push   0x254
c001b750:	e8 06 e6 fe ff       	call   c0009d5b <malloc>
c001b755:	83 c4 10             	add    esp,0x10
c001b758:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b75f:	83 ec 04             	sub    esp,0x4
c001b762:	6a 00                	push   0x0
c001b764:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b76b:	50                   	push   eax
c001b76c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b773:	e8 b1 96 fe ff       	call   c0004e29 <f_mount>
c001b778:	83 c4 10             	add    esp,0x10
c001b77b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b782:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b78a:	74 1c                	je     c001b7a8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b78c:	83 ec 0c             	sub    esp,0xc
c001b78f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b796:	e8 e0 e5 fe ff       	call   c0009d7b <rfree>
c001b79b:	83 c4 10             	add    esp,0x10
c001b79e:	b0 00                	mov    al,0x0
c001b7a0:	e9 f3 00 00 00       	jmp    c001b898 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a8:	83 ec 04             	sub    esp,0x4
c001b7ab:	68 00 01 00 00       	push   0x100
c001b7b0:	6a 00                	push   0x0
c001b7b2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b7b9:	50                   	push   eax
c001b7ba:	e8 c5 4e fe ff       	call   c0000684 <memset>
c001b7bf:	83 c4 10             	add    esp,0x10
c001b7c2:	83 ec 08             	sub    esp,0x8
c001b7c5:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b7cc:	50                   	push   eax
c001b7cd:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b7d4:	50                   	push   eax
c001b7d5:	e8 a6 50 fe ff       	call   c0000880 <strcat>
c001b7da:	83 c4 10             	add    esp,0x10
c001b7dd:	83 ec 08             	sub    esp,0x8
c001b7e0:	68 56 6c 02 c0       	push   0xc0026c56
c001b7e5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b7ec:	50                   	push   eax
c001b7ed:	e8 8e 50 fe ff       	call   c0000880 <strcat>
c001b7f2:	83 c4 10             	add    esp,0x10
c001b7f5:	83 ec 04             	sub    esp,0x4
c001b7f8:	6a 01                	push   0x1
c001b7fa:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b801:	50                   	push   eax
c001b802:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b806:	50                   	push   eax
c001b807:	e8 7f 96 fe ff       	call   c0004e8b <f_open>
c001b80c:	83 c4 10             	add    esp,0x10
c001b80f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b816:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b81d:	85 c0                	test   eax,eax
c001b81f:	74 0b                	je     c001b82c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b821:	78 31                	js     c001b854 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b823:	83 e8 04             	sub    eax,0x4
c001b826:	83 f8 01             	cmp    eax,0x1
c001b829:	77 29                	ja     c001b854 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b82b:	90                   	nop
c001b82c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b834:	83 ec 0c             	sub    esp,0xc
c001b837:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b83b:	50                   	push   eax
c001b83c:	e8 9c a1 fe ff       	call   c00059dd <f_close>
c001b841:	83 c4 10             	add    esp,0x10
c001b844:	90                   	nop
c001b845:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b84d:	74 41                	je     c001b890 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b84f:	eb 33                	jmp    c001b884 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b851:	8d 76 00             	lea    esi,[esi+0x0]
c001b854:	83 ec 0c             	sub    esp,0xc
c001b857:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b85e:	e8 18 e5 fe ff       	call   c0009d7b <rfree>
c001b863:	83 c4 10             	add    esp,0x10
c001b866:	83 ec 04             	sub    esp,0x4
c001b869:	6a 00                	push   0x0
c001b86b:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b872:	50                   	push   eax
c001b873:	6a 00                	push   0x0
c001b875:	e8 af 95 fe ff       	call   c0004e29 <f_mount>
c001b87a:	83 c4 10             	add    esp,0x10
c001b87d:	b0 00                	mov    al,0x0
c001b87f:	eb 17                	jmp    c001b898 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b881:	8d 76 00             	lea    esi,[esi+0x0]
c001b884:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001b889:	40                   	inc    eax
c001b88a:	a3 a0 9e 02 c0       	mov    ds:0xc0029ea0,eax
c001b88f:	90                   	nop
c001b890:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b897:	90                   	nop
c001b898:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b89e:	c3                   	ret    
c001b89f:	90                   	nop

c001b8a0 <FAT::allocateSwapfile(char const*, int)>:
c001b8a0:	55                   	push   ebp
c001b8a1:	57                   	push   edi
c001b8a2:	56                   	push   esi
c001b8a3:	53                   	push   ebx
c001b8a4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b8aa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b8b5:	83 ec 0c             	sub    esp,0xc
c001b8b8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b8bf:	e8 97 e4 fe ff       	call   c0009d5b <malloc>
c001b8c4:	83 c4 10             	add    esp,0x10
c001b8c7:	89 c7                	mov    edi,eax
c001b8c9:	a1 d0 9d 02 c0       	mov    eax,ds:0xc0029dd0
c001b8ce:	83 ec 04             	sub    esp,0x4
c001b8d1:	50                   	push   eax
c001b8d2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b8d9:	57                   	push   edi
c001b8da:	e8 d3 1c ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b8e9:	83 ec 04             	sub    esp,0x4
c001b8ec:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b8f0:	50                   	push   eax
c001b8f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b8f5:	50                   	push   eax
c001b8f6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b8fd:	e8 36 20 ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001b902:	83 c4 10             	add    esp,0x10
c001b905:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b90c:	c1 e0 14             	shl    eax,0x14
c001b90f:	89 c7                	mov    edi,eax
c001b911:	89 c5                	mov    ebp,eax
c001b913:	c1 fd 1f             	sar    ebp,0x1f
c001b916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b91e:	89 f9                	mov    ecx,edi
c001b920:	31 c1                	xor    ecx,eax
c001b922:	89 cb                	mov    ebx,ecx
c001b924:	89 e9                	mov    ecx,ebp
c001b926:	31 d1                	xor    ecx,edx
c001b928:	89 ce                	mov    esi,ecx
c001b92a:	89 f0                	mov    eax,esi
c001b92c:	09 d8                	or     eax,ebx
c001b92e:	0f 84 98 00 00 00    	je     c001b9cc <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b934:	83 ec 0c             	sub    esp,0xc
c001b937:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b93e:	e8 c1 1e ff ff       	call   c000d804 <File::unlink()>
c001b943:	83 c4 10             	add    esp,0x10
c001b946:	83 ec 08             	sub    esp,0x8
c001b949:	6a 12                	push   0x12
c001b94b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b952:	e8 35 1d ff ff       	call   c000d68c <File::open(FileOpenMode)>
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b961:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b967:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b96e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b975:	c1 e0 14             	shl    eax,0x14
c001b978:	99                   	cdq    
c001b979:	6a 01                	push   0x1
c001b97b:	52                   	push   edx
c001b97c:	50                   	push   eax
c001b97d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b984:	e8 04 b7 fe ff       	call   c000708d <f_expand>
c001b989:	83 c4 10             	add    esp,0x10
c001b98c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b993:	8b 00                	mov    eax,DWORD PTR [eax]
c001b995:	83 c0 10             	add    eax,0x10
c001b998:	8b 00                	mov    eax,DWORD PTR [eax]
c001b99a:	83 ec 0c             	sub    esp,0xc
c001b99d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b9a1:	52                   	push   edx
c001b9a2:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b9a6:	52                   	push   edx
c001b9a7:	6a 00                	push   0x0
c001b9a9:	68 00 04 00 00       	push   0x400
c001b9ae:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b9b5:	ff d0                	call   eax
c001b9b7:	83 c4 20             	add    esp,0x20
c001b9ba:	83 ec 0c             	sub    esp,0xc
c001b9bd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b9c4:	e8 21 1d ff ff       	call   c000d6ea <File::close()>
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	83 ec 08             	sub    esp,0x8
c001b9cf:	6a 01                	push   0x1
c001b9d1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b9d8:	e8 af 1c ff ff       	call   c000d68c <File::open(FileOpenMode)>
c001b9dd:	83 c4 10             	add    esp,0x10
c001b9e0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b9e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9e9:	83 c0 0c             	add    eax,0xc
c001b9ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9ee:	83 ec 0c             	sub    esp,0xc
c001b9f1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b9f5:	52                   	push   edx
c001b9f6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b9fa:	52                   	push   edx
c001b9fb:	6a 00                	push   0x0
c001b9fd:	6a 04                	push   0x4
c001b9ff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ba06:	ff d0                	call   eax
c001ba08:	83 c4 20             	add    esp,0x20
c001ba0b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ba12:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ba18:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ba1f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ba26:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ba29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ba2c:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ba33:	83 ec 0c             	sub    esp,0xc
c001ba36:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba3d:	e8 a8 1c ff ff       	call   c000d6ea <File::close()>
c001ba42:	83 c4 10             	add    esp,0x10
c001ba45:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ba4c:	ba 00 00 00 00       	mov    edx,0x0
c001ba51:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ba57:	5b                   	pop    ebx
c001ba58:	5e                   	pop    esi
c001ba59:	5f                   	pop    edi
c001ba5a:	5d                   	pop    ebp
c001ba5b:	c3                   	ret    

c001ba5c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ba5c:	57                   	push   edi
c001ba5d:	56                   	push   esi
c001ba5e:	53                   	push   ebx
c001ba5f:	81 ec 50 02 00 00    	sub    esp,0x250
c001ba65:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ba6d:	74 0d                	je     c001ba7c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ba6f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ba77:	75 0f                	jne    c001ba88 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ba79:	8d 76 00             	lea    esi,[esi+0x0]
c001ba7c:	b8 04 00 00 00       	mov    eax,0x4
c001ba81:	e9 36 01 00 00       	jmp    c001bbbc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ba86:	66 90                	xchg   ax,ax
c001ba88:	83 ec 08             	sub    esp,0x8
c001ba8b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ba92:	50                   	push   eax
c001ba93:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ba9a:	e8 48 a5 fe ff       	call   c0005fe7 <f_readdir>
c001ba9f:	83 c4 10             	add    esp,0x10
c001baa2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001baa9:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001bab0:	83 ec 0c             	sub    esp,0xc
c001bab3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001baba:	83 c0 1a             	add    eax,0x1a
c001babd:	50                   	push   eax
c001babe:	e8 dd 4b fe ff       	call   c00006a0 <strlen>
c001bac3:	83 c4 10             	add    esp,0x10
c001bac6:	ba 00 00 00 00       	mov    edx,0x0
c001bacb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bacf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bad3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bada:	0f b6 c0             	movzx  eax,al
c001badd:	83 e0 10             	and    eax,0x10
c001bae0:	74 0a                	je     c001baec <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bae2:	b8 02 00 00 00       	mov    eax,0x2
c001bae7:	eb 0b                	jmp    c001baf4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001bae9:	8d 76 00             	lea    esi,[esi+0x0]
c001baec:	b8 01 00 00 00       	mov    eax,0x1
c001baf1:	8d 76 00             	lea    esi,[esi+0x0]
c001baf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001baf8:	83 ec 08             	sub    esp,0x8
c001bafb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bb02:	83 c0 1a             	add    eax,0x1a
c001bb05:	50                   	push   eax
c001bb06:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bb0a:	83 c0 10             	add    eax,0x10
c001bb0d:	50                   	push   eax
c001bb0e:	e8 2d 4c fe ff       	call   c0000740 <strcpy>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bb1d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bb24:	8d 44 24 04          	lea    eax,[esp+0x4]
c001bb28:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bb2f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bb36:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bb3d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bb44:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bb4b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bb52:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bb59:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bb60:	89 c6                	mov    esi,eax
c001bb62:	89 d7                	mov    edi,edx
c001bb64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bb66:	89 c8                	mov    eax,ecx
c001bb68:	89 fa                	mov    edx,edi
c001bb6a:	89 f3                	mov    ebx,esi
c001bb6c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bb73:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bb7a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bb81:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bb88:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bb8e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bb95:	84 c0                	test   al,al
c001bb97:	75 07                	jne    c001bba0 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001bb99:	b8 07 00 00 00       	mov    eax,0x7
c001bb9e:	eb 1c                	jmp    c001bbbc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bba0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bba7:	85 c0                	test   eax,eax
c001bba9:	75 09                	jne    c001bbb4 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001bbab:	b8 00 00 00 00       	mov    eax,0x0
c001bbb0:	eb 0a                	jmp    c001bbbc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bbb2:	66 90                	xchg   ax,ax
c001bbb4:	b8 01 00 00 00       	mov    eax,0x1
c001bbb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbbc:	81 c4 50 02 00 00    	add    esp,0x250
c001bbc2:	5b                   	pop    ebx
c001bbc3:	5e                   	pop    esi
c001bbc4:	5f                   	pop    edi
c001bbc5:	c3                   	ret    
c001bbc6:	66 90                	xchg   ax,ax

c001bbc8 <FAT::read(void*, unsigned long, void*, int*)>:
c001bbc8:	83 ec 1c             	sub    esp,0x1c
c001bbcb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bbd0:	74 0a                	je     c001bbdc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bbd2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bbd7:	75 0b                	jne    c001bbe4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bbd9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbdc:	b8 04 00 00 00       	mov    eax,0x4
c001bbe1:	eb 41                	jmp    c001bc24 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bbe3:	90                   	nop
c001bbe4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bbe8:	50                   	push   eax
c001bbe9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bbf1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bbf5:	e8 cd 96 fe ff       	call   c00052c7 <f_read>
c001bbfa:	83 c4 10             	add    esp,0x10
c001bbfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc05:	89 c2                	mov    edx,eax
c001bc07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc0b:	89 10                	mov    DWORD PTR [eax],edx
c001bc0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc11:	85 c0                	test   eax,eax
c001bc13:	75 07                	jne    c001bc1c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bc15:	b8 00 00 00 00       	mov    eax,0x0
c001bc1a:	eb 08                	jmp    c001bc24 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bc1c:	b8 01 00 00 00       	mov    eax,0x1
c001bc21:	8d 76 00             	lea    esi,[esi+0x0]
c001bc24:	83 c4 1c             	add    esp,0x1c
c001bc27:	c3                   	ret    

c001bc28 <FAT::write(void*, unsigned long, void*, int*)>:
c001bc28:	83 ec 1c             	sub    esp,0x1c
c001bc2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bc30:	74 0a                	je     c001bc3c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bc32:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bc37:	75 0b                	jne    c001bc44 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bc39:	8d 76 00             	lea    esi,[esi+0x0]
c001bc3c:	b8 04 00 00 00       	mov    eax,0x4
c001bc41:	eb 41                	jmp    c001bc84 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bc43:	90                   	nop
c001bc44:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bc48:	50                   	push   eax
c001bc49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bc51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc55:	e8 ed 98 fe ff       	call   c0005547 <f_write>
c001bc5a:	83 c4 10             	add    esp,0x10
c001bc5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc65:	89 c2                	mov    edx,eax
c001bc67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc6b:	89 10                	mov    DWORD PTR [eax],edx
c001bc6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc71:	85 c0                	test   eax,eax
c001bc73:	75 07                	jne    c001bc7c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bc75:	b8 00 00 00 00       	mov    eax,0x0
c001bc7a:	eb 08                	jmp    c001bc84 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bc7c:	b8 01 00 00 00       	mov    eax,0x1
c001bc81:	8d 76 00             	lea    esi,[esi+0x0]
c001bc84:	83 c4 1c             	add    esp,0x1c
c001bc87:	c3                   	ret    

c001bc88 <FAT::close(void*)>:
c001bc88:	83 ec 1c             	sub    esp,0x1c
c001bc8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bc90:	75 0a                	jne    c001bc9c <FAT::close(void*)+0x14>
c001bc92:	b8 04 00 00 00       	mov    eax,0x4
c001bc97:	eb 3f                	jmp    c001bcd8 <FAT::close(void*)+0x50>
c001bc99:	8d 76 00             	lea    esi,[esi+0x0]
c001bc9c:	83 ec 0c             	sub    esp,0xc
c001bc9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bca3:	e8 35 9d fe ff       	call   c00059dd <f_close>
c001bca8:	83 c4 10             	add    esp,0x10
c001bcab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcaf:	83 ec 0c             	sub    esp,0xc
c001bcb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bcb6:	e8 b0 e0 fe ff       	call   c0009d6b <free>
c001bcbb:	83 c4 10             	add    esp,0x10
c001bcbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcc2:	85 c0                	test   eax,eax
c001bcc4:	75 0a                	jne    c001bcd0 <FAT::close(void*)+0x48>
c001bcc6:	b8 00 00 00 00       	mov    eax,0x0
c001bccb:	eb 0b                	jmp    c001bcd8 <FAT::close(void*)+0x50>
c001bccd:	8d 76 00             	lea    esi,[esi+0x0]
c001bcd0:	b8 01 00 00 00       	mov    eax,0x1
c001bcd5:	8d 76 00             	lea    esi,[esi+0x0]
c001bcd8:	83 c4 1c             	add    esp,0x1c
c001bcdb:	c3                   	ret    

c001bcdc <FAT::closeDir(void*)>:
c001bcdc:	83 ec 1c             	sub    esp,0x1c
c001bcdf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bce4:	75 0a                	jne    c001bcf0 <FAT::closeDir(void*)+0x14>
c001bce6:	b8 04 00 00 00       	mov    eax,0x4
c001bceb:	eb 3f                	jmp    c001bd2c <FAT::closeDir(void*)+0x50>
c001bced:	8d 76 00             	lea    esi,[esi+0x0]
c001bcf0:	83 ec 0c             	sub    esp,0xc
c001bcf3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bcf7:	e8 c9 a2 fe ff       	call   c0005fc5 <f_closedir>
c001bcfc:	83 c4 10             	add    esp,0x10
c001bcff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd03:	83 ec 0c             	sub    esp,0xc
c001bd06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd0a:	e8 5c e0 fe ff       	call   c0009d6b <free>
c001bd0f:	83 c4 10             	add    esp,0x10
c001bd12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd16:	85 c0                	test   eax,eax
c001bd18:	75 0a                	jne    c001bd24 <FAT::closeDir(void*)+0x48>
c001bd1a:	b8 00 00 00 00       	mov    eax,0x0
c001bd1f:	eb 0b                	jmp    c001bd2c <FAT::closeDir(void*)+0x50>
c001bd21:	8d 76 00             	lea    esi,[esi+0x0]
c001bd24:	b8 01 00 00 00       	mov    eax,0x1
c001bd29:	8d 76 00             	lea    esi,[esi+0x0]
c001bd2c:	83 c4 1c             	add    esp,0x1c
c001bd2f:	c3                   	ret    

c001bd30 <FAT::seek(void*, unsigned long long)>:
c001bd30:	83 ec 2c             	sub    esp,0x2c
c001bd33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd43:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bd48:	75 0a                	jne    c001bd54 <FAT::seek(void*, unsigned long long)+0x24>
c001bd4a:	b8 04 00 00 00       	mov    eax,0x4
c001bd4f:	eb 37                	jmp    c001bd88 <FAT::seek(void*, unsigned long long)+0x58>
c001bd51:	8d 76 00             	lea    esi,[esi+0x0]
c001bd54:	83 ec 04             	sub    esp,0x4
c001bd57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bd5b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bd5f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bd63:	e8 a4 9c fe ff       	call   c0005a0c <f_lseek>
c001bd68:	83 c4 10             	add    esp,0x10
c001bd6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bd6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd73:	85 c0                	test   eax,eax
c001bd75:	75 09                	jne    c001bd80 <FAT::seek(void*, unsigned long long)+0x50>
c001bd77:	b8 00 00 00 00       	mov    eax,0x0
c001bd7c:	eb 0a                	jmp    c001bd88 <FAT::seek(void*, unsigned long long)+0x58>
c001bd7e:	66 90                	xchg   ax,ax
c001bd80:	b8 01 00 00 00       	mov    eax,0x1
c001bd85:	8d 76 00             	lea    esi,[esi+0x0]
c001bd88:	83 c4 2c             	add    esp,0x2c
c001bd8b:	c3                   	ret    

c001bd8c <fatWrapperReadDisk>:
c001bd8c:	83 ec 1c             	sub    esp,0x1c
c001bd8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd93:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bd97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bd9b:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bda2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bda6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bdab:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c001bdb2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bdb6:	83 ec 0c             	sub    esp,0xc
c001bdb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bdbd:	52                   	push   edx
c001bdbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bdc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bdc6:	50                   	push   eax
c001bdc7:	e8 bc 4a ff ff       	call   c0010888 <LogicalDisk::read(unsigned long long, int, void*)>
c001bdcc:	83 c4 20             	add    esp,0x20
c001bdcf:	83 c4 1c             	add    esp,0x1c
c001bdd2:	c3                   	ret    
c001bdd3:	90                   	nop

c001bdd4 <fatWrapperWriteDisk>:
c001bdd4:	83 ec 1c             	sub    esp,0x1c
c001bdd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bddb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bddf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bde3:	89 04 24             	mov    DWORD PTR [esp],eax
c001bde6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bdea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bdee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bdf3:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c001bdfa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bdfe:	83 ec 0c             	sub    esp,0xc
c001be01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be05:	52                   	push   edx
c001be06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001be0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001be0e:	50                   	push   eax
c001be0f:	e8 e0 4a ff ff       	call   c00108f4 <LogicalDisk::write(unsigned long long, int, void*)>
c001be14:	83 c4 20             	add    esp,0x20
c001be17:	83 c4 1c             	add    esp,0x1c
c001be1a:	c3                   	ret    
c001be1b:	90                   	nop

c001be1c <fatWrapperIoctl>:
c001be1c:	53                   	push   ebx
c001be1d:	83 ec 28             	sub    esp,0x28
c001be20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001be24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001be28:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001be2c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001be30:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001be35:	75 31                	jne    c001be68 <fatWrapperIoctl+0x4c>
c001be37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be3f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be44:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c001be4b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001be51:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001be57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be5b:	66 89 02             	mov    WORD PTR [edx],ax
c001be5e:	b8 00 00 00 00       	mov    eax,0x0
c001be63:	e9 bc 00 00 00       	jmp    c001bf24 <fatWrapperIoctl+0x108>
c001be68:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001be6d:	75 6d                	jne    c001bedc <fatWrapperIoctl+0xc0>
c001be6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001be77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be7c:	8b 04 85 40 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71c0]
c001be83:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001be89:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001be8f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001be95:	89 c8                	mov    eax,ecx
c001be97:	89 da                	mov    edx,ebx
c001be99:	0f a4 c2 0a          	shld   edx,eax,0xa
c001be9d:	c1 e0 0a             	shl    eax,0xa
c001bea0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bea5:	8b 0c 8d 40 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd71c0]
c001beac:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001beb2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001beb8:	89 cb                	mov    ebx,ecx
c001beba:	c1 fb 1f             	sar    ebx,0x1f
c001bebd:	53                   	push   ebx
c001bebe:	51                   	push   ecx
c001bebf:	52                   	push   edx
c001bec0:	50                   	push   eax
c001bec1:	e8 0e 6e 00 00       	call   c0022cd4 <__udivdi3>
c001bec6:	83 c4 10             	add    esp,0x10
c001bec9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001becd:	89 01                	mov    DWORD PTR [ecx],eax
c001becf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bed2:	b8 00 00 00 00       	mov    eax,0x0
c001bed7:	eb 4b                	jmp    c001bf24 <fatWrapperIoctl+0x108>
c001bed9:	8d 76 00             	lea    esi,[esi+0x0]
c001bedc:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001bee1:	75 09                	jne    c001beec <fatWrapperIoctl+0xd0>
c001bee3:	b8 00 00 00 00       	mov    eax,0x0
c001bee8:	eb 3a                	jmp    c001bf24 <fatWrapperIoctl+0x108>
c001beea:	66 90                	xchg   ax,ax
c001beec:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001bef1:	75 19                	jne    c001bf0c <fatWrapperIoctl+0xf0>
c001bef3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bef7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001befb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001beff:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bf05:	b8 00 00 00 00       	mov    eax,0x0
c001bf0a:	eb 18                	jmp    c001bf24 <fatWrapperIoctl+0x108>
c001bf0c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001bf11:	75 09                	jne    c001bf1c <fatWrapperIoctl+0x100>
c001bf13:	b8 00 00 00 00       	mov    eax,0x0
c001bf18:	eb 0a                	jmp    c001bf24 <fatWrapperIoctl+0x108>
c001bf1a:	66 90                	xchg   ax,ax
c001bf1c:	b8 04 00 00 00       	mov    eax,0x4
c001bf21:	8d 76 00             	lea    esi,[esi+0x0]
c001bf24:	83 c4 28             	add    esp,0x28
c001bf27:	5b                   	pop    ebx
c001bf28:	c3                   	ret    
c001bf29:	90                   	nop
c001bf2a:	66 90                	xchg   ax,ax

c001bf2c <FAT::FAT()>:
c001bf2c:	83 ec 1c             	sub    esp,0x1c
c001bf2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf33:	83 ec 0c             	sub    esp,0xc
c001bf36:	50                   	push   eax
c001bf37:	e8 22 14 ff ff       	call   c000d35e <Filesystem::Filesystem()>
c001bf3c:	83 c4 10             	add    esp,0x10
c001bf3f:	ba 6c 6c 02 c0       	mov    edx,0xc0026c6c
c001bf44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf48:	89 10                	mov    DWORD PTR [eax],edx
c001bf4a:	c7 05 a0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ea0,0x0
c001bf54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bf5c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001bf61:	7f 15                	jg     c001bf78 <FAT::FAT()+0x4c>
c001bf63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf67:	c7 04 85 c0 9e 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6140],0xffffffff
c001bf72:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bf76:	eb e4                	jmp    c001bf5c <FAT::FAT()+0x30>
c001bf78:	90                   	nop
c001bf79:	83 c4 1c             	add    esp,0x1c
c001bf7c:	c3                   	ret    
c001bf7d:	90                   	nop
c001bf7e:	66 90                	xchg   ax,ax

c001bf80 <FAT::fixFilepath(char*)>:
c001bf80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf84:	8a 00                	mov    al,BYTE PTR [eax]
c001bf86:	3c 40                	cmp    al,0x40
c001bf88:	7e 2e                	jle    c001bfb8 <FAT::fixFilepath(char*)+0x38>
c001bf8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf8e:	8a 00                	mov    al,BYTE PTR [eax]
c001bf90:	83 e8 41             	sub    eax,0x41
c001bf93:	88 c2                	mov    dl,al
c001bf95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf99:	88 10                	mov    BYTE PTR [eax],dl
c001bf9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf9f:	8a 00                	mov    al,BYTE PTR [eax]
c001bfa1:	0f be c0             	movsx  eax,al
c001bfa4:	8b 04 85 c0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6140]
c001bfab:	83 c0 30             	add    eax,0x30
c001bfae:	88 c2                	mov    dl,al
c001bfb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfb4:	88 10                	mov    BYTE PTR [eax],dl
c001bfb6:	66 90                	xchg   ax,ax
c001bfb8:	90                   	nop
c001bfb9:	c3                   	ret    
c001bfba:	66 90                	xchg   ax,ax

c001bfbc <FAT::open(char const*, void**, FileOpenMode)>:
c001bfbc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bfc2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bfca:	74 0c                	je     c001bfd8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001bfcc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bfd4:	75 0e                	jne    c001bfe4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001bfd6:	66 90                	xchg   ax,ax
c001bfd8:	b8 04 00 00 00       	mov    eax,0x4
c001bfdd:	e9 06 01 00 00       	jmp    c001c0e8 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bfe2:	66 90                	xchg   ax,ax
c001bfe4:	83 ec 08             	sub    esp,0x8
c001bfe7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bfee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bff2:	50                   	push   eax
c001bff3:	e8 48 47 fe ff       	call   c0000740 <strcpy>
c001bff8:	83 c4 10             	add    esp,0x10
c001bffb:	83 ec 08             	sub    esp,0x8
c001bffe:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c002:	50                   	push   eax
c001c003:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c00a:	e8 71 ff ff ff       	call   c001bf80 <FAT::fixFilepath(char*)>
c001c00f:	83 c4 10             	add    esp,0x10
c001c012:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c01a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c021:	83 e0 01             	and    eax,0x1
c001c024:	74 0a                	je     c001c030 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c026:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c02e:	66 90                	xchg   ax,ax
c001c030:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c037:	83 e0 04             	and    eax,0x4
c001c03a:	74 10                	je     c001c04c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c03c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c044:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c04c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c053:	83 e0 02             	and    eax,0x2
c001c056:	74 08                	je     c001c060 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c058:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c060:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c067:	83 e0 08             	and    eax,0x8
c001c06a:	74 08                	je     c001c074 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c06c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c074:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c07b:	83 e0 10             	and    eax,0x10
c001c07e:	74 08                	je     c001c088 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c080:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c088:	83 ec 0c             	sub    esp,0xc
c001c08b:	68 50 02 00 00       	push   0x250
c001c090:	e8 c6 dc fe ff       	call   c0009d5b <malloc>
c001c095:	83 c4 10             	add    esp,0x10
c001c098:	89 c2                	mov    edx,eax
c001c09a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c0a1:	89 10                	mov    DWORD PTR [eax],edx
c001c0a3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c0ab:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c0b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0b4:	83 ec 04             	sub    esp,0x4
c001c0b7:	52                   	push   edx
c001c0b8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c0bc:	52                   	push   edx
c001c0bd:	50                   	push   eax
c001c0be:	e8 c8 8d fe ff       	call   c0004e8b <f_open>
c001c0c3:	83 c4 10             	add    esp,0x10
c001c0c6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c0cd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c0d5:	74 09                	je     c001c0e0 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c0d7:	b8 01 00 00 00       	mov    eax,0x1
c001c0dc:	eb 0a                	jmp    c001c0e8 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c0de:	66 90                	xchg   ax,ax
c001c0e0:	b8 00 00 00 00       	mov    eax,0x0
c001c0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c0e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c0ee:	c3                   	ret    
c001c0ef:	90                   	nop

c001c0f0 <FAT::openDir(char const*, void**)>:
c001c0f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c0f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c0fe:	74 0c                	je     c001c10c <FAT::openDir(char const*, void**)+0x1c>
c001c100:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c108:	75 0e                	jne    c001c118 <FAT::openDir(char const*, void**)+0x28>
c001c10a:	66 90                	xchg   ax,ax
c001c10c:	b8 04 00 00 00       	mov    eax,0x4
c001c111:	e9 82 00 00 00       	jmp    c001c198 <FAT::openDir(char const*, void**)+0xa8>
c001c116:	66 90                	xchg   ax,ax
c001c118:	83 ec 08             	sub    esp,0x8
c001c11b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c122:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c126:	50                   	push   eax
c001c127:	e8 14 46 fe ff       	call   c0000740 <strcpy>
c001c12c:	83 c4 10             	add    esp,0x10
c001c12f:	83 ec 08             	sub    esp,0x8
c001c132:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c136:	50                   	push   eax
c001c137:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c13e:	e8 3d fe ff ff       	call   c001bf80 <FAT::fixFilepath(char*)>
c001c143:	83 c4 10             	add    esp,0x10
c001c146:	83 ec 0c             	sub    esp,0xc
c001c149:	6a 4c                	push   0x4c
c001c14b:	e8 0b dc fe ff       	call   c0009d5b <malloc>
c001c150:	83 c4 10             	add    esp,0x10
c001c153:	89 c2                	mov    edx,eax
c001c155:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c15c:	89 10                	mov    DWORD PTR [eax],edx
c001c15e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c165:	8b 00                	mov    eax,DWORD PTR [eax]
c001c167:	83 ec 08             	sub    esp,0x8
c001c16a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c16e:	52                   	push   edx
c001c16f:	50                   	push   eax
c001c170:	e8 4e 9d fe ff       	call   c0005ec3 <f_opendir>
c001c175:	83 c4 10             	add    esp,0x10
c001c178:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c17f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c187:	74 07                	je     c001c190 <FAT::openDir(char const*, void**)+0xa0>
c001c189:	b8 01 00 00 00       	mov    eax,0x1
c001c18e:	eb 08                	jmp    c001c198 <FAT::openDir(char const*, void**)+0xa8>
c001c190:	b8 00 00 00 00       	mov    eax,0x0
c001c195:	8d 76 00             	lea    esi,[esi+0x0]
c001c198:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c19e:	c3                   	ret    
c001c19f:	90                   	nop

c001c1a0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c1a0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c1a6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c1ae:	75 0c                	jne    c001c1bc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c1b0:	b8 04 00 00 00       	mov    eax,0x4
c001c1b5:	e9 d2 00 00 00       	jmp    c001c28c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c1ba:	66 90                	xchg   ax,ax
c001c1bc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c1c4:	75 0a                	jne    c001c1d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c1c6:	b8 04 00 00 00       	mov    eax,0x4
c001c1cb:	e9 bc 00 00 00       	jmp    c001c28c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c1d0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c1d8:	75 0a                	jne    c001c1e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c1da:	b8 04 00 00 00       	mov    eax,0x4
c001c1df:	e9 a8 00 00 00       	jmp    c001c28c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c1e4:	83 ec 08             	sub    esp,0x8
c001c1e7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c1ee:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c1f5:	50                   	push   eax
c001c1f6:	e8 45 45 fe ff       	call   c0000740 <strcpy>
c001c1fb:	83 c4 10             	add    esp,0x10
c001c1fe:	83 ec 08             	sub    esp,0x8
c001c201:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c208:	50                   	push   eax
c001c209:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c210:	e8 6b fd ff ff       	call   c001bf80 <FAT::fixFilepath(char*)>
c001c215:	83 c4 10             	add    esp,0x10
c001c218:	83 ec 08             	sub    esp,0x8
c001c21b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c21f:	50                   	push   eax
c001c220:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c227:	50                   	push   eax
c001c228:	e8 55 9e fe ff       	call   c0006082 <f_stat>
c001c22d:	83 c4 10             	add    esp,0x10
c001c230:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c237:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c23e:	85 c0                	test   eax,eax
c001c240:	74 0a                	je     c001c24c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c242:	83 f8 04             	cmp    eax,0x4
c001c245:	74 35                	je     c001c27c <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c247:	eb 3b                	jmp    c001c284 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c249:	8d 76 00             	lea    esi,[esi+0x0]
c001c24c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c250:	0f b6 c0             	movzx  eax,al
c001c253:	83 e0 10             	and    eax,0x10
c001c256:	0f 95 c2             	setne  dl
c001c259:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c260:	88 10                	mov    BYTE PTR [eax],dl
c001c262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c265:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c269:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c270:	89 01                	mov    DWORD PTR [ecx],eax
c001c272:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c275:	b8 00 00 00 00       	mov    eax,0x0
c001c27a:	eb 10                	jmp    c001c28c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c27c:	b8 02 00 00 00       	mov    eax,0x2
c001c281:	eb 09                	jmp    c001c28c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c283:	90                   	nop
c001c284:	b8 01 00 00 00       	mov    eax,0x1
c001c289:	8d 76 00             	lea    esi,[esi+0x0]
c001c28c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c292:	c3                   	ret    
c001c293:	90                   	nop

c001c294 <FAT::unlink(char const*)>:
c001c294:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c29a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c2a2:	75 08                	jne    c001c2ac <FAT::unlink(char const*)+0x18>
c001c2a4:	b8 04 00 00 00       	mov    eax,0x4
c001c2a9:	eb 61                	jmp    c001c30c <FAT::unlink(char const*)+0x78>
c001c2ab:	90                   	nop
c001c2ac:	83 ec 08             	sub    esp,0x8
c001c2af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c2b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2ba:	50                   	push   eax
c001c2bb:	e8 80 44 fe ff       	call   c0000740 <strcpy>
c001c2c0:	83 c4 10             	add    esp,0x10
c001c2c3:	83 ec 08             	sub    esp,0x8
c001c2c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c2ca:	50                   	push   eax
c001c2cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c2d2:	e8 a9 fc ff ff       	call   c001bf80 <FAT::fixFilepath(char*)>
c001c2d7:	83 c4 10             	add    esp,0x10
c001c2da:	83 ec 0c             	sub    esp,0xc
c001c2dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2e1:	50                   	push   eax
c001c2e2:	e8 ed a0 fe ff       	call   c00063d4 <f_unlink>
c001c2e7:	83 c4 10             	add    esp,0x10
c001c2ea:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c2f1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c2f8:	85 c0                	test   eax,eax
c001c2fa:	75 08                	jne    c001c304 <FAT::unlink(char const*)+0x70>
c001c2fc:	b8 00 00 00 00       	mov    eax,0x0
c001c301:	eb 09                	jmp    c001c30c <FAT::unlink(char const*)+0x78>
c001c303:	90                   	nop
c001c304:	b8 01 00 00 00       	mov    eax,0x1
c001c309:	8d 76 00             	lea    esi,[esi+0x0]
c001c30c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c312:	c3                   	ret    
c001c313:	90                   	nop

c001c314 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c314:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c31a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c321:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c328:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c32c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c330:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c338:	75 0a                	jne    c001c344 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c33a:	b8 04 00 00 00       	mov    eax,0x4
c001c33f:	e9 30 01 00 00       	jmp    c001c474 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c344:	83 ec 08             	sub    esp,0x8
c001c347:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c34e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c352:	50                   	push   eax
c001c353:	e8 e8 43 fe ff       	call   c0000740 <strcpy>
c001c358:	83 c4 10             	add    esp,0x10
c001c35b:	83 ec 08             	sub    esp,0x8
c001c35e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c362:	50                   	push   eax
c001c363:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c36a:	e8 11 fc ff ff       	call   c001bf80 <FAT::fixFilepath(char*)>
c001c36f:	83 c4 10             	add    esp,0x10
c001c372:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c37a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c382:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c387:	83 e0 01             	and    eax,0x1
c001c38a:	74 08                	je     c001c394 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c38c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c394:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c399:	83 e0 02             	and    eax,0x2
c001c39c:	74 0a                	je     c001c3a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c39e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c3a6:	66 90                	xchg   ax,ax
c001c3a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3ad:	83 e0 04             	and    eax,0x4
c001c3b0:	74 0a                	je     c001c3bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c3b2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c3ba:	66 90                	xchg   ax,ax
c001c3bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3c1:	83 e0 08             	and    eax,0x8
c001c3c4:	74 0a                	je     c001c3d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c3c6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c3ce:	66 90                	xchg   ax,ax
c001c3d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c3d5:	83 e0 01             	and    eax,0x1
c001c3d8:	74 0a                	je     c001c3e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c3da:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c3e2:	66 90                	xchg   ax,ax
c001c3e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c3e9:	83 e0 02             	and    eax,0x2
c001c3ec:	74 0a                	je     c001c3f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c3ee:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c3f6:	66 90                	xchg   ax,ax
c001c3f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c3fd:	83 e0 04             	and    eax,0x4
c001c400:	74 0a                	je     c001c40c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c402:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c40a:	66 90                	xchg   ax,ax
c001c40c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c411:	83 e0 08             	and    eax,0x8
c001c414:	74 0a                	je     c001c420 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c416:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c41e:	66 90                	xchg   ax,ax
c001c420:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c427:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c42e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c436:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c43e:	83 ec 04             	sub    esp,0x4
c001c441:	52                   	push   edx
c001c442:	50                   	push   eax
c001c443:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c447:	50                   	push   eax
c001c448:	e8 29 a6 fe ff       	call   c0006a76 <f_chmod>
c001c44d:	83 c4 10             	add    esp,0x10
c001c450:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c457:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c45e:	85 c0                	test   eax,eax
c001c460:	75 0a                	jne    c001c46c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c462:	b8 00 00 00 00       	mov    eax,0x0
c001c467:	eb 0b                	jmp    c001c474 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c469:	8d 76 00             	lea    esi,[esi+0x0]
c001c46c:	b8 01 00 00 00       	mov    eax,0x1
c001c471:	8d 76 00             	lea    esi,[esi+0x0]
c001c474:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c47a:	c3                   	ret    
c001c47b:	90                   	nop

c001c47c <FAT::rename(char const*, char const*)>:
c001c47c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c482:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c48a:	74 0c                	je     c001c498 <FAT::rename(char const*, char const*)+0x1c>
c001c48c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c494:	75 0e                	jne    c001c4a4 <FAT::rename(char const*, char const*)+0x28>
c001c496:	66 90                	xchg   ax,ax
c001c498:	b8 04 00 00 00       	mov    eax,0x4
c001c49d:	e9 9e 00 00 00       	jmp    c001c540 <FAT::rename(char const*, char const*)+0xc4>
c001c4a2:	66 90                	xchg   ax,ax
c001c4a4:	83 ec 08             	sub    esp,0x8
c001c4a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c4ae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c4b5:	50                   	push   eax
c001c4b6:	e8 85 42 fe ff       	call   c0000740 <strcpy>
c001c4bb:	83 c4 10             	add    esp,0x10
c001c4be:	83 ec 08             	sub    esp,0x8
c001c4c1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c4c8:	50                   	push   eax
c001c4c9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c4d0:	e8 ab fa ff ff       	call   c001bf80 <FAT::fixFilepath(char*)>
c001c4d5:	83 c4 10             	add    esp,0x10
c001c4d8:	83 ec 08             	sub    esp,0x8
c001c4db:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c4e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c4e6:	50                   	push   eax
c001c4e7:	e8 54 42 fe ff       	call   c0000740 <strcpy>
c001c4ec:	83 c4 10             	add    esp,0x10
c001c4ef:	83 ec 08             	sub    esp,0x8
c001c4f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c4f6:	50                   	push   eax
c001c4f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c4fe:	e8 7d fa ff ff       	call   c001bf80 <FAT::fixFilepath(char*)>
c001c503:	83 c4 10             	add    esp,0x10
c001c506:	83 ec 08             	sub    esp,0x8
c001c509:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c50d:	50                   	push   eax
c001c50e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c515:	50                   	push   eax
c001c516:	e8 68 a2 fe ff       	call   c0006783 <f_rename>
c001c51b:	83 c4 10             	add    esp,0x10
c001c51e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c525:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c52c:	85 c0                	test   eax,eax
c001c52e:	75 08                	jne    c001c538 <FAT::rename(char const*, char const*)+0xbc>
c001c530:	b8 00 00 00 00       	mov    eax,0x0
c001c535:	eb 09                	jmp    c001c540 <FAT::rename(char const*, char const*)+0xc4>
c001c537:	90                   	nop
c001c538:	b8 01 00 00 00       	mov    eax,0x1
c001c53d:	8d 76 00             	lea    esi,[esi+0x0]
c001c540:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c546:	c3                   	ret    
c001c547:	90                   	nop

c001c548 <FAT::mkdir(char const*)>:
c001c548:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c54e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c556:	75 08                	jne    c001c560 <FAT::mkdir(char const*)+0x18>
c001c558:	b8 04 00 00 00       	mov    eax,0x4
c001c55d:	eb 61                	jmp    c001c5c0 <FAT::mkdir(char const*)+0x78>
c001c55f:	90                   	nop
c001c560:	83 ec 08             	sub    esp,0x8
c001c563:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c56a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c56e:	50                   	push   eax
c001c56f:	e8 cc 41 fe ff       	call   c0000740 <strcpy>
c001c574:	83 c4 10             	add    esp,0x10
c001c577:	83 ec 08             	sub    esp,0x8
c001c57a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c57e:	50                   	push   eax
c001c57f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c586:	e8 f5 f9 ff ff       	call   c001bf80 <FAT::fixFilepath(char*)>
c001c58b:	83 c4 10             	add    esp,0x10
c001c58e:	83 ec 0c             	sub    esp,0xc
c001c591:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c595:	50                   	push   eax
c001c596:	e8 bc 9f fe ff       	call   c0006557 <f_mkdir>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c5a5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c5ac:	85 c0                	test   eax,eax
c001c5ae:	75 08                	jne    c001c5b8 <FAT::mkdir(char const*)+0x70>
c001c5b0:	b8 00 00 00 00       	mov    eax,0x0
c001c5b5:	eb 09                	jmp    c001c5c0 <FAT::mkdir(char const*)+0x78>
c001c5b7:	90                   	nop
c001c5b8:	b8 01 00 00 00       	mov    eax,0x1
c001c5bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c5c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c5c6:	c3                   	ret    
c001c5c7:	90                   	nop

c001c5c8 <FAT::exists(char const*)>:
c001c5c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c5ce:	83 ec 08             	sub    esp,0x8
c001c5d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c5d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c5dc:	50                   	push   eax
c001c5dd:	e8 5e 41 fe ff       	call   c0000740 <strcpy>
c001c5e2:	83 c4 10             	add    esp,0x10
c001c5e5:	83 ec 08             	sub    esp,0x8
c001c5e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c5ec:	50                   	push   eax
c001c5ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c5f4:	e8 87 f9 ff ff       	call   c001bf80 <FAT::fixFilepath(char*)>
c001c5f9:	83 c4 10             	add    esp,0x10
c001c5fc:	83 ec 08             	sub    esp,0x8
c001c5ff:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c606:	50                   	push   eax
c001c607:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c60b:	50                   	push   eax
c001c60c:	e8 71 9a fe ff       	call   c0006082 <f_stat>
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c61b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c622:	85 c0                	test   eax,eax
c001c624:	75 06                	jne    c001c62c <FAT::exists(char const*)+0x64>
c001c626:	b0 01                	mov    al,0x1
c001c628:	eb 06                	jmp    c001c630 <FAT::exists(char const*)+0x68>
c001c62a:	66 90                	xchg   ax,ax
c001c62c:	b0 00                	mov    al,0x0
c001c62e:	66 90                	xchg   ax,ax
c001c630:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c636:	c3                   	ret    
c001c637:	90                   	nop

c001c638 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c638:	b8 08 00 00 00       	mov    eax,0x8
c001c63d:	c3                   	ret    

c001c63e <ISO9660::seek(void*, unsigned long long)>:
c001c63e:	53                   	push   ebx
c001c63f:	b8 04 00 00 00       	mov    eax,0x4
c001c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c648:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c64c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c650:	85 d2                	test   edx,edx
c001c652:	74 17                	je     c001c66b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c654:	89 c8                	mov    eax,ecx
c001c656:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c659:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c65c:	b8 01 00 00 00       	mov    eax,0x1
c001c661:	73 08                	jae    c001c66b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c663:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c666:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c669:	31 c0                	xor    eax,eax
c001c66b:	5b                   	pop    ebx
c001c66c:	c3                   	ret    
c001c66d:	90                   	nop

c001c66e <ISO9660::tell(void*, unsigned long long*)>:
c001c66e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c672:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c676:	85 d2                	test   edx,edx
c001c678:	74 12                	je     c001c68c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c67a:	85 c0                	test   eax,eax
c001c67c:	74 0e                	je     c001c68c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c67e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c681:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c684:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c687:	89 10                	mov    DWORD PTR [eax],edx
c001c689:	31 c0                	xor    eax,eax
c001c68b:	c3                   	ret    
c001c68c:	b8 04 00 00 00       	mov    eax,0x4
c001c691:	c3                   	ret    

c001c692 <ISO9660::getName()>:
c001c692:	b8 cc 6c 02 c0       	mov    eax,0xc0026ccc
c001c697:	c3                   	ret    

c001c698 <ISO9660::stat(void*, unsigned long long*)>:
c001c698:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c69c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6a0:	85 d2                	test   edx,edx
c001c6a2:	74 12                	je     c001c6b6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c6a4:	85 c0                	test   eax,eax
c001c6a6:	74 0e                	je     c001c6b6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c6a8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c6ab:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c6ae:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c6b1:	89 10                	mov    DWORD PTR [eax],edx
c001c6b3:	31 c0                	xor    eax,eax
c001c6b5:	c3                   	ret    
c001c6b6:	b8 04 00 00 00       	mov    eax,0x4
c001c6bb:	c3                   	ret    

c001c6bc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c6bc:	b8 01 00 00 00       	mov    eax,0x1
c001c6c1:	c3                   	ret    

c001c6c2 <ISO9660::unlink(char const*)>:
c001c6c2:	b8 01 00 00 00       	mov    eax,0x1
c001c6c7:	c3                   	ret    

c001c6c8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c6c8:	b8 01 00 00 00       	mov    eax,0x1
c001c6cd:	c3                   	ret    

c001c6ce <ISO9660::rename(char const*, char const*)>:
c001c6ce:	b8 01 00 00 00       	mov    eax,0x1
c001c6d3:	c3                   	ret    

c001c6d4 <ISO9660::mkdir(char const*)>:
c001c6d4:	b8 01 00 00 00       	mov    eax,0x1
c001c6d9:	c3                   	ret    

c001c6da <ISO9660::close(void*)>:
c001c6da:	83 ec 0c             	sub    esp,0xc
c001c6dd:	b8 04 00 00 00       	mov    eax,0x4
c001c6e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6e6:	85 d2                	test   edx,edx
c001c6e8:	74 0e                	je     c001c6f8 <ISO9660::close(void*)+0x1e>
c001c6ea:	83 ec 0c             	sub    esp,0xc
c001c6ed:	52                   	push   edx
c001c6ee:	e8 78 d6 fe ff       	call   c0009d6b <free>
c001c6f3:	83 c4 10             	add    esp,0x10
c001c6f6:	31 c0                	xor    eax,eax
c001c6f8:	83 c4 0c             	add    esp,0xc
c001c6fb:	c3                   	ret    

c001c6fc <ISO9660::closeDir(void*)>:
c001c6fc:	83 ec 0c             	sub    esp,0xc
c001c6ff:	b8 04 00 00 00       	mov    eax,0x4
c001c704:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c708:	85 d2                	test   edx,edx
c001c70a:	74 0e                	je     c001c71a <ISO9660::closeDir(void*)+0x1e>
c001c70c:	83 ec 0c             	sub    esp,0xc
c001c70f:	52                   	push   edx
c001c710:	e8 56 d6 fe ff       	call   c0009d6b <free>
c001c715:	83 c4 10             	add    esp,0x10
c001c718:	31 c0                	xor    eax,eax
c001c71a:	83 c4 0c             	add    esp,0xc
c001c71d:	c3                   	ret    

c001c71e <ISO9660::~ISO9660()>:
c001c71e:	83 ec 0c             	sub    esp,0xc
c001c721:	ba f0 6c 02 c0       	mov    edx,0xc0026cf0
c001c726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72a:	89 10                	mov    DWORD PTR [eax],edx
c001c72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c730:	83 ec 0c             	sub    esp,0xc
c001c733:	50                   	push   eax
c001c734:	e8 49 0c ff ff       	call   c000d382 <Filesystem::~Filesystem()>
c001c739:	83 c4 10             	add    esp,0x10
c001c73c:	90                   	nop
c001c73d:	83 c4 0c             	add    esp,0xc
c001c740:	c3                   	ret    
c001c741:	90                   	nop

c001c742 <ISO9660::~ISO9660()>:
c001c742:	83 ec 0c             	sub    esp,0xc
c001c745:	83 ec 0c             	sub    esp,0xc
c001c748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c74c:	e8 cd ff ff ff       	call   c001c71e <ISO9660::~ISO9660()>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	83 ec 08             	sub    esp,0x8
c001c757:	6a 08                	push   0x8
c001c759:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c75d:	e8 04 08 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001c762:	83 c4 10             	add    esp,0x10
c001c765:	83 c4 0c             	add    esp,0xc
c001c768:	c3                   	ret    

c001c769 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c769:	55                   	push   ebp
c001c76a:	31 c9                	xor    ecx,ecx
c001c76c:	57                   	push   edi
c001c76d:	56                   	push   esi
c001c76e:	53                   	push   ebx
c001c76f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c773:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c777:	89 eb                	mov    ebx,ebp
c001c779:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c77d:	39 ce                	cmp    esi,ecx
c001c77f:	7e 17                	jle    c001c798 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c781:	31 d2                	xor    edx,edx
c001c783:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c787:	7d 13                	jge    c001c79c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c789:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c78d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c790:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c793:	75 0d                	jne    c001c7a2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c795:	42                   	inc    edx
c001c796:	eb eb                	jmp    c001c783 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c798:	31 c0                	xor    eax,eax
c001c79a:	eb 0a                	jmp    c001c7a6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c79c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c7a0:	eb 04                	jmp    c001c7a6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c7a2:	41                   	inc    ecx
c001c7a3:	43                   	inc    ebx
c001c7a4:	eb d7                	jmp    c001c77d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c7a6:	5b                   	pop    ebx
c001c7a7:	5e                   	pop    esi
c001c7a8:	5f                   	pop    edi
c001c7a9:	5d                   	pop    ebp
c001c7aa:	c3                   	ret    

c001c7ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c7ab:	57                   	push   edi
c001c7ac:	56                   	push   esi
c001c7ad:	53                   	push   ebx
c001c7ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7b2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c7b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c7ba:	39 35 a0 9f 02 c0    	cmp    DWORD PTR ds:0xc0029fa0,esi
c001c7c0:	75 08                	jne    c001c7ca <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c7c2:	38 1d b4 82 02 c0    	cmp    BYTE PTR ds:0xc00282b4,bl
c001c7c8:	74 4a                	je     c001c814 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c7ca:	83 ec 0c             	sub    esp,0xc
c001c7cd:	31 d2                	xor    edx,edx
c001c7cf:	68 c0 9f 02 c0       	push   0xc0029fc0
c001c7d4:	0f be c3             	movsx  eax,bl
c001c7d7:	6a 01                	push   0x1
c001c7d9:	52                   	push   edx
c001c7da:	56                   	push   esi
c001c7db:	ff 34 85 3c 8d 02 c0 	push   DWORD PTR [eax*4-0x3ffd72c4]
c001c7e2:	e8 a1 40 ff ff       	call   c0010888 <LogicalDisk::read(unsigned long long, int, void*)>
c001c7e7:	83 c4 20             	add    esp,0x20
c001c7ea:	85 c0                	test   eax,eax
c001c7ec:	75 0e                	jne    c001c7fc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c7ee:	89 35 a0 9f 02 c0    	mov    DWORD PTR ds:0xc0029fa0,esi
c001c7f4:	88 1d b4 82 02 c0    	mov    BYTE PTR ds:0xc00282b4,bl
c001c7fa:	eb 18                	jmp    c001c814 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c7fc:	50                   	push   eax
c001c7fd:	68 00 08 00 00       	push   0x800
c001c802:	6a 00                	push   0x0
c001c804:	57                   	push   edi
c001c805:	e8 7a 3e fe ff       	call   c0000684 <memset>
c001c80a:	83 c4 10             	add    esp,0x10
c001c80d:	b8 01 00 00 00       	mov    eax,0x1
c001c812:	eb 0e                	jmp    c001c822 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c814:	be c0 9f 02 c0       	mov    esi,0xc0029fc0
c001c819:	b9 00 08 00 00       	mov    ecx,0x800
c001c81e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c820:	31 c0                	xor    eax,eax
c001c822:	5b                   	pop    ebx
c001c823:	5e                   	pop    esi
c001c824:	5f                   	pop    edi
c001c825:	c3                   	ret    

c001c826 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c826:	81 ec 10 08 00 00    	sub    esp,0x810
c001c82c:	c7 05 a0 9f 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029fa0,0xdeadbeef
c001c836:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c83d:	83 c0 41             	add    eax,0x41
c001c840:	0f be c0             	movsx  eax,al
c001c843:	50                   	push   eax
c001c844:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c848:	50                   	push   eax
c001c849:	6a 10                	push   0x10
c001c84b:	e8 5b ff ff ff       	call   c001c7ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c850:	83 c4 10             	add    esp,0x10
c001c853:	31 d2                	xor    edx,edx
c001c855:	85 c0                	test   eax,eax
c001c857:	75 24                	jne    c001c87d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c859:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c85e:	75 1d                	jne    c001c87d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c860:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c865:	75 16                	jne    c001c87d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c867:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c86c:	75 0f                	jne    c001c87d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c86e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c873:	75 08                	jne    c001c87d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c875:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c87a:	0f 94 c2             	sete   dl
c001c87d:	88 d0                	mov    al,dl
c001c87f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c885:	c3                   	ret    

c001c886 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c886:	55                   	push   ebp
c001c887:	57                   	push   edi
c001c888:	56                   	push   esi
c001c889:	53                   	push   ebx
c001c88a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c890:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c897:	85 ed                	test   ebp,ebp
c001c899:	0f 84 da 01 00 00    	je     c001ca79 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c89f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c8a7:	0f 84 cc 01 00 00    	je     c001ca79 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c8ad:	b8 01 00 00 00       	mov    eax,0x1
c001c8b2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c8b6:	0f 85 c2 01 00 00    	jne    c001ca7e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c8bc:	31 d2                	xor    edx,edx
c001c8be:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c8c5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c8c8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c8cb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c8ce:	89 04 24             	mov    DWORD PTR [esp],eax
c001c8d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c8d5:	01 c8                	add    eax,ecx
c001c8d7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c8da:	11 da                	adc    edx,ebx
c001c8dc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c8e0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c8e4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c8e8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c8ec:	19 d7                	sbb    edi,edx
c001c8ee:	72 11                	jb     c001c901 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c8f0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c8f3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c8ff:	eb 0c                	jmp    c001c90d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c901:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c905:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c909:	29 ce                	sub    esi,ecx
c001c90b:	19 df                	sbb    edi,ebx
c001c90d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c910:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c913:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c917:	c1 e0 0b             	shl    eax,0xb
c001c91a:	01 c8                	add    eax,ecx
c001c91c:	11 da                	adc    edx,ebx
c001c91e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c921:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c925:	51                   	push   ecx
c001c926:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c92a:	50                   	push   eax
c001c92b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c92f:	53                   	push   ebx
c001c930:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c934:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c938:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c93c:	50                   	push   eax
c001c93d:	e8 69 fe ff ff       	call   c001c7ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c942:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c945:	b8 00 08 00 00       	mov    eax,0x800
c001c94a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c950:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c954:	29 d0                	sub    eax,edx
c001c956:	83 c4 10             	add    esp,0x10
c001c959:	89 f9                	mov    ecx,edi
c001c95b:	39 c6                	cmp    esi,eax
c001c95d:	83 d9 00             	sbb    ecx,0x0
c001c960:	7d 1b                	jge    c001c97d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c962:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c967:	75 12                	jne    c001c97b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c969:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c970:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c976:	e9 fa 00 00 00       	jmp    c001ca75 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c97b:	89 f0                	mov    eax,esi
c001c97d:	01 d3                	add    ebx,edx
c001c97f:	31 d2                	xor    edx,edx
c001c981:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c985:	39 c2                	cmp    edx,eax
c001c987:	7d 14                	jge    c001c99d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c989:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c990:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c994:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c99a:	42                   	inc    edx
c001c99b:	eb e8                	jmp    c001c985 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c99d:	89 c2                	mov    edx,eax
c001c99f:	85 c0                	test   eax,eax
c001c9a1:	79 02                	jns    c001c9a5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c9a3:	31 d2                	xor    edx,edx
c001c9a5:	01 c2                	add    edx,eax
c001c9a7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c9aa:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c9b1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c9b5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c9b9:	99                   	cdq    
c001c9ba:	01 c1                	add    ecx,eax
c001c9bc:	11 d3                	adc    ebx,edx
c001c9be:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c9c2:	29 c6                	sub    esi,eax
c001c9c4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c9c8:	19 d7                	sbb    edi,edx
c001c9ca:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9cd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c9d1:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c9d6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c9d9:	b8 00 00 00 00       	mov    eax,0x0
c001c9de:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c9e2:	7d 43                	jge    c001ca27 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c9e4:	52                   	push   edx
c001c9e5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c9e9:	50                   	push   eax
c001c9ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c9f6:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c9fa:	50                   	push   eax
c001c9fb:	e8 ab fd ff ff       	call   c001c7ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ca00:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001ca08:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001ca0d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001ca15:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001ca1d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001ca22:	83 c4 10             	add    esp,0x10
c001ca25:	eb aa                	jmp    c001c9d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001ca27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca2b:	0b 04 24             	or     eax,DWORD PTR [esp]
c001ca2e:	74 2a                	je     c001ca5a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001ca30:	50                   	push   eax
c001ca31:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ca35:	50                   	push   eax
c001ca36:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ca3a:	56                   	push   esi
c001ca3b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ca3f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ca43:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001ca47:	51                   	push   ecx
c001ca48:	e8 5e fd ff ff       	call   c001c7ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ca4d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ca51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ca57:	83 c4 10             	add    esp,0x10
c001ca5a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ca61:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ca65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca69:	89 18                	mov    DWORD PTR [eax],ebx
c001ca6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca6f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ca72:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001ca75:	31 c0                	xor    eax,eax
c001ca77:	eb 05                	jmp    c001ca7e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001ca79:	b8 04 00 00 00       	mov    eax,0x4
c001ca7e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001ca84:	5b                   	pop    ebx
c001ca85:	5e                   	pop    esi
c001ca86:	5f                   	pop    edi
c001ca87:	5d                   	pop    ebp
c001ca88:	c3                   	ret    
c001ca89:	90                   	nop

c001ca8a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001ca8a:	55                   	push   ebp
c001ca8b:	57                   	push   edi
c001ca8c:	56                   	push   esi
c001ca8d:	53                   	push   ebx
c001ca8e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001ca94:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001ca9b:	85 ed                	test   ebp,ebp
c001ca9d:	0f 84 51 02 00 00    	je     c001ccf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001caa3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001caab:	0f 84 43 02 00 00    	je     c001ccf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cab1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cab4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001cab7:	75 0a                	jne    c001cac3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001cab9:	b8 07 00 00 00       	mov    eax,0x7
c001cabe:	e9 36 02 00 00       	jmp    c001ccf9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001cac3:	50                   	push   eax
c001cac4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cac8:	50                   	push   eax
c001cac9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cad0:	53                   	push   ebx
c001cad1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cad4:	c1 e0 0b             	shl    eax,0xb
c001cad7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001cada:	c1 e8 0b             	shr    eax,0xb
c001cadd:	50                   	push   eax
c001cade:	e8 c8 fc ff ff       	call   c001c7ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cae3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cae6:	83 c4 10             	add    esp,0x10
c001cae9:	89 c1                	mov    ecx,eax
c001caeb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001caee:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001caf4:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001caf7:	84 db                	test   bl,bl
c001caf9:	0f 85 8b 00 00 00    	jne    c001cb8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001caff:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001cb05:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cb08:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001cb0e:	29 c6                	sub    esi,eax
c001cb10:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001cb14:	89 f3                	mov    ebx,esi
c001cb16:	89 f1                	mov    ecx,esi
c001cb18:	c1 fb 1f             	sar    ebx,0x1f
c001cb1b:	01 f0                	add    eax,esi
c001cb1d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cb20:	11 da                	adc    edx,ebx
c001cb22:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cb29:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cb2c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cb2f:	89 d8                	mov    eax,ebx
c001cb31:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001cb35:	ba 00 00 00 00       	mov    edx,0x0
c001cb3a:	19 f8                	sbb    eax,edi
c001cb3c:	b8 00 00 00 00       	mov    eax,0x0
c001cb41:	73 08                	jae    c001cb4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001cb43:	89 f0                	mov    eax,esi
c001cb45:	89 fa                	mov    edx,edi
c001cb47:	29 c8                	sub    eax,ecx
c001cb49:	19 da                	sbb    edx,ebx
c001cb4b:	89 d7                	mov    edi,edx
c001cb4d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001cb50:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001cb53:	09 c7                	or     edi,eax
c001cb55:	0f 84 5e ff ff ff    	je     c001cab9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001cb5b:	57                   	push   edi
c001cb5c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cb60:	50                   	push   eax
c001cb61:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cb68:	53                   	push   ebx
c001cb69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cb6c:	c1 e0 0b             	shl    eax,0xb
c001cb6f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001cb73:	c1 e8 0b             	shr    eax,0xb
c001cb76:	50                   	push   eax
c001cb77:	e8 2f fc ff ff       	call   c001c7ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cb7c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cb7f:	83 c4 10             	add    esp,0x10
c001cb82:	25 ff 07 00 00       	and    eax,0x7ff
c001cb87:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001cb8a:	31 ff                	xor    edi,edi
c001cb8c:	56                   	push   esi
c001cb8d:	6a 28                	push   0x28
c001cb8f:	6a 00                	push   0x0
c001cb91:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cb95:	50                   	push   eax
c001cb96:	e8 e9 3a fe ff       	call   c0000684 <memset>
c001cb9b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cb9e:	25 ff 07 00 00       	and    eax,0x7ff
c001cba3:	89 c6                	mov    esi,eax
c001cba5:	83 c6 21             	add    esi,0x21
c001cba8:	83 d7 00             	adc    edi,0x0
c001cbab:	83 c4 10             	add    esp,0x10
c001cbae:	31 c9                	xor    ecx,ecx
c001cbb0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001cbb7:	83 f9 28             	cmp    ecx,0x28
c001cbba:	88 04 24             	mov    BYTE PTR [esp],al
c001cbbd:	0f 94 c2             	sete   dl
c001cbc0:	88 d0                	mov    al,dl
c001cbc2:	ba ff 07 00 00       	mov    edx,0x7ff
c001cbc7:	39 f2                	cmp    edx,esi
c001cbc9:	ba 00 00 00 00       	mov    edx,0x0
c001cbce:	19 fa                	sbb    edx,edi
c001cbd0:	0f 92 c2             	setb   dl
c001cbd3:	09 c2                	or     edx,eax
c001cbd5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001cbd9:	0f 94 c0             	sete   al
c001cbdc:	08 d0                	or     al,dl
c001cbde:	75 16                	jne    c001cbf6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cbe0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001cbe4:	74 10                	je     c001cbf6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cbe6:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cbe9:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cbed:	41                   	inc    ecx
c001cbee:	83 c6 01             	add    esi,0x1
c001cbf1:	83 d7 00             	adc    edi,0x0
c001cbf4:	eb ba                	jmp    c001cbb0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001cbf6:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001cbfd:	83 ec 0c             	sub    esp,0xc
c001cc00:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cc04:	56                   	push   esi
c001cc05:	e8 96 3a fe ff       	call   c00006a0 <strlen>
c001cc0a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001cc11:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cc15:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001cc1d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cc20:	5a                   	pop    edx
c001cc21:	25 ff 07 00 00       	and    eax,0x7ff
c001cc26:	59                   	pop    ecx
c001cc27:	01 f8                	add    eax,edi
c001cc29:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cc2f:	83 e0 02             	and    eax,0x2
c001cc32:	3c 01                	cmp    al,0x1
c001cc34:	19 c0                	sbb    eax,eax
c001cc36:	83 c0 02             	add    eax,0x2
c001cc39:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cc3d:	56                   	push   esi
c001cc3e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cc42:	50                   	push   eax
c001cc43:	e8 f8 3a fe ff       	call   c0000740 <strcpy>
c001cc48:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cc4c:	83 c4 10             	add    esp,0x10
c001cc4f:	84 c0                	test   al,al
c001cc51:	75 21                	jne    c001cc74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001cc53:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001cc5b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cc63:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cc6b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001cc72:	eb 28                	jmp    c001cc9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cc74:	fe c8                	dec    al
c001cc76:	75 24                	jne    c001cc9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cc78:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001cc80:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cc88:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cc90:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001cc97:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001cc9c:	8d 74 24 40          	lea    esi,[esp+0x40]
c001cca0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001cca7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001ccae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ccb0:	0f b6 f3             	movzx  esi,bl
c001ccb3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001ccba:	31 db                	xor    ebx,ebx
c001ccbc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ccc2:	89 df                	mov    edi,ebx
c001ccc4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001ccc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ccca:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001cccd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ccd0:	39 c6                	cmp    esi,eax
c001ccd2:	19 d7                	sbb    edi,edx
c001ccd4:	72 10                	jb     c001cce6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001ccd6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001ccdd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001cce4:	eb 0a                	jmp    c001ccf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001cce6:	29 f0                	sub    eax,esi
c001cce8:	19 da                	sbb    edx,ebx
c001ccea:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001cced:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ccf0:	31 c0                	xor    eax,eax
c001ccf2:	eb 05                	jmp    c001ccf9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ccf4:	b8 04 00 00 00       	mov    eax,0x4
c001ccf9:	81 c4 5c 09 00 00    	add    esp,0x95c
c001ccff:	5b                   	pop    ebx
c001cd00:	5e                   	pop    esi
c001cd01:	5f                   	pop    edi
c001cd02:	5d                   	pop    ebp
c001cd03:	c3                   	ret    

c001cd04 <readRoot(unsigned int*, unsigned int*, char)>:
c001cd04:	57                   	push   edi
c001cd05:	56                   	push   esi
c001cd06:	81 ec 38 08 00 00    	sub    esp,0x838
c001cd0c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001cd14:	50                   	push   eax
c001cd15:	8d 44 24 38          	lea    eax,[esp+0x38]
c001cd19:	50                   	push   eax
c001cd1a:	6a 10                	push   0x10
c001cd1c:	e8 8a fa ff ff       	call   c001c7ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cd21:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001cd28:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001cd2c:	b9 22 00 00 00       	mov    ecx,0x22
c001cd31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd33:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cd3a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cd3e:	89 10                	mov    DWORD PTR [eax],edx
c001cd40:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001cd47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd4b:	89 10                	mov    DWORD PTR [eax],edx
c001cd4d:	81 c4 44 08 00 00    	add    esp,0x844
c001cd53:	b0 01                	mov    al,0x1
c001cd55:	5e                   	pop    esi
c001cd56:	5f                   	pop    edi
c001cd57:	c3                   	ret    

c001cd58 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001cd58:	55                   	push   ebp
c001cd59:	57                   	push   edi
c001cd5a:	56                   	push   esi
c001cd5b:	53                   	push   ebx
c001cd5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cd62:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001cd69:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001cd70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd74:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001cd78:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd7c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cd80:	75 03                	jne    c001cd85 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001cd82:	83 c3 02             	add    ebx,0x2
c001cd85:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001cd88:	75 03                	jne    c001cd8d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001cd8a:	43                   	inc    ebx
c001cd8b:	eb f8                	jmp    c001cd85 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001cd8d:	52                   	push   edx
c001cd8e:	68 00 01 00 00       	push   0x100
c001cd93:	6a 00                	push   0x0
c001cd95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd99:	50                   	push   eax
c001cd9a:	e8 e5 38 fe ff       	call   c0000684 <memset>
c001cd9f:	83 c4 10             	add    esp,0x10
c001cda2:	31 d2                	xor    edx,edx
c001cda4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001cda7:	84 c0                	test   al,al
c001cda9:	74 21                	je     c001cdcc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001cdab:	3c 2f                	cmp    al,0x2f
c001cdad:	75 0b                	jne    c001cdba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001cdaf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001cdb3:	bd 01 00 00 00       	mov    ebp,0x1
c001cdb8:	eb 14                	jmp    c001cdce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001cdba:	8d 48 9f             	lea    ecx,[eax-0x61]
c001cdbd:	80 f9 19             	cmp    cl,0x19
c001cdc0:	77 03                	ja     c001cdc5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cdc2:	83 e8 20             	sub    eax,0x20
c001cdc5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001cdc9:	42                   	inc    edx
c001cdca:	eb d8                	jmp    c001cda4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001cdcc:	31 ed                	xor    ebp,ebp
c001cdce:	83 ec 0c             	sub    esp,0xc
c001cdd1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cdd8:	e8 7e cf fe ff       	call   c0009d5b <malloc>
c001cddd:	89 c6                	mov    esi,eax
c001cddf:	89 c2                	mov    edx,eax
c001cde1:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001cde8:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001cdee:	c1 ef 0b             	shr    edi,0xb
c001cdf1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001cdf8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001cdfc:	83 c4 10             	add    esp,0x10
c001cdff:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001ce04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce08:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001ce0f:	74 29                	je     c001ce3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001ce11:	50                   	push   eax
c001ce12:	57                   	push   edi
c001ce13:	52                   	push   edx
c001ce14:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ce18:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ce1f:	e8 87 f9 ff ff       	call   c001c7ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ce28:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001ce2f:	81 c2 00 08 00 00    	add    edx,0x800
c001ce35:	83 c4 10             	add    esp,0x10
c001ce38:	eb ca                	jmp    c001ce04 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001ce3a:	83 ec 0c             	sub    esp,0xc
c001ce3d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ce41:	57                   	push   edi
c001ce42:	e8 59 38 fe ff       	call   c00006a0 <strlen>
c001ce47:	50                   	push   eax
c001ce48:	57                   	push   edi
c001ce49:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ce50:	56                   	push   esi
c001ce51:	e8 13 f9 ff ff       	call   c001c769 <__memmem(unsigned char*, int, unsigned char*, int)>
c001ce56:	83 c4 20             	add    esp,0x20
c001ce59:	85 c0                	test   eax,eax
c001ce5b:	75 13                	jne    c001ce70 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001ce5d:	83 ec 0c             	sub    esp,0xc
c001ce60:	56                   	push   esi
c001ce61:	e8 05 cf fe ff       	call   c0009d6b <free>
c001ce66:	83 c4 10             	add    esp,0x10
c001ce69:	31 c0                	xor    eax,eax
c001ce6b:	e9 b3 00 00 00       	jmp    c001cf23 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001ce70:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001ce74:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001ce78:	c1 e7 08             	shl    edi,0x8
c001ce7b:	c1 e2 10             	shl    edx,0x10
c001ce7e:	09 d7                	or     edi,edx
c001ce80:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001ce84:	09 d7                	or     edi,edx
c001ce86:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001ce8a:	c1 e2 18             	shl    edx,0x18
c001ce8d:	09 d7                	or     edi,edx
c001ce8f:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001ce93:	89 d1                	mov    ecx,edx
c001ce95:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001ce99:	c1 e1 08             	shl    ecx,0x8
c001ce9c:	c1 e2 10             	shl    edx,0x10
c001ce9f:	09 ca                	or     edx,ecx
c001cea1:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001cea5:	09 ca                	or     edx,ecx
c001cea7:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001ceab:	c1 e1 18             	shl    ecx,0x18
c001ceae:	09 ca                	or     edx,ecx
c001ceb0:	89 e9                	mov    ecx,ebp
c001ceb2:	84 c9                	test   cl,cl
c001ceb4:	74 3c                	je     c001cef2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001ceb6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ceba:	83 ec 0c             	sub    esp,0xc
c001cebd:	56                   	push   esi
c001cebe:	e8 a8 ce fe ff       	call   c0009d6b <free>
c001cec3:	83 c4 0c             	add    esp,0xc
c001cec6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cecd:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ced2:	50                   	push   eax
c001ced3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ceda:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cee1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cee5:	52                   	push   edx
c001cee6:	57                   	push   edi
c001cee7:	53                   	push   ebx
c001cee8:	e8 6b fe ff ff       	call   c001cd58 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ceed:	83 c4 20             	add    esp,0x20
c001cef0:	eb 31                	jmp    c001cf23 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cef2:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001cef5:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001cefc:	d0 e8                	shr    al,1
c001cefe:	89 3b                	mov    DWORD PTR [ebx],edi
c001cf00:	83 e0 01             	and    eax,0x1
c001cf03:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001cf0a:	83 ec 0c             	sub    esp,0xc
c001cf0d:	89 13                	mov    DWORD PTR [ebx],edx
c001cf0f:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001cf16:	89 03                	mov    DWORD PTR [ebx],eax
c001cf18:	56                   	push   esi
c001cf19:	e8 4d ce fe ff       	call   c0009d6b <free>
c001cf1e:	83 c4 10             	add    esp,0x10
c001cf21:	b0 01                	mov    al,0x1
c001cf23:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cf29:	5b                   	pop    ebx
c001cf2a:	5e                   	pop    esi
c001cf2b:	5f                   	pop    edi
c001cf2c:	5d                   	pop    ebp
c001cf2d:	c3                   	ret    

c001cf2e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001cf2e:	55                   	push   ebp
c001cf2f:	57                   	push   edi
c001cf30:	56                   	push   esi
c001cf31:	53                   	push   ebx
c001cf32:	83 ec 20             	sub    esp,0x20
c001cf35:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cf39:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001cf3d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cf41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cf49:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cf51:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001cf56:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001cf5c:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001cf62:	57                   	push   edi
c001cf63:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cf67:	50                   	push   eax
c001cf68:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cf6c:	50                   	push   eax
c001cf6d:	e8 92 fd ff ff       	call   c001cd04 <readRoot(unsigned int*, unsigned int*, char)>
c001cf72:	5a                   	pop    edx
c001cf73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cf77:	e8 24 37 fe ff       	call   c00006a0 <strlen>
c001cf7c:	83 c4 10             	add    esp,0x10
c001cf7f:	83 f8 03             	cmp    eax,0x3
c001cf82:	77 17                	ja     c001cf9b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cf84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf88:	89 03                	mov    DWORD PTR [ebx],eax
c001cf8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf8e:	89 06                	mov    DWORD PTR [esi],eax
c001cf90:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001cf97:	b0 01                	mov    al,0x1
c001cf99:	eb 19                	jmp    c001cfb4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001cf9b:	50                   	push   eax
c001cf9c:	55                   	push   ebp
c001cf9d:	57                   	push   edi
c001cf9e:	56                   	push   esi
c001cf9f:	53                   	push   ebx
c001cfa0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfa4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfa8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cfac:	e8 a7 fd ff ff       	call   c001cd58 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001cfb1:	83 c4 20             	add    esp,0x20
c001cfb4:	83 c4 1c             	add    esp,0x1c
c001cfb7:	5b                   	pop    ebx
c001cfb8:	5e                   	pop    esi
c001cfb9:	5f                   	pop    edi
c001cfba:	5d                   	pop    ebp
c001cfbb:	c3                   	ret    

c001cfbc <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cfbc:	57                   	push   edi
c001cfbd:	56                   	push   esi
c001cfbe:	53                   	push   ebx
c001cfbf:	83 ec 10             	sub    esp,0x10
c001cfc2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cfc6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cfca:	85 ff                	test   edi,edi
c001cfcc:	0f 84 8b 00 00 00    	je     c001d05d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cfd2:	85 f6                	test   esi,esi
c001cfd4:	0f 84 83 00 00 00    	je     c001d05d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cfda:	b8 03 00 00 00       	mov    eax,0x3
c001cfdf:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001cfe4:	75 7c                	jne    c001d062 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cfe6:	83 ec 0c             	sub    esp,0xc
c001cfe9:	6a 1c                	push   0x1c
c001cfeb:	e8 6b cd fe ff       	call   c0009d5b <malloc>
c001cff0:	89 07                	mov    DWORD PTR [edi],eax
c001cff2:	89 c3                	mov    ebx,eax
c001cff4:	58                   	pop    eax
c001cff5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cff9:	50                   	push   eax
c001cffa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cffd:	50                   	push   eax
c001cffe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d002:	50                   	push   eax
c001d003:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d007:	50                   	push   eax
c001d008:	56                   	push   esi
c001d009:	e8 20 ff ff ff       	call   c001cf2e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d00e:	83 c4 20             	add    esp,0x20
c001d011:	84 c0                	test   al,al
c001d013:	74 07                	je     c001d01c <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d015:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d01a:	74 0b                	je     c001d027 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d01c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d020:	b8 01 00 00 00       	mov    eax,0x1
c001d025:	eb 3b                	jmp    c001d062 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d02b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d02f:	89 03                	mov    DWORD PTR [ebx],eax
c001d031:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d03c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d043:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d04a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d04d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d054:	8a 06                	mov    al,BYTE PTR [esi]
c001d056:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d059:	31 c0                	xor    eax,eax
c001d05b:	eb 05                	jmp    c001d062 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d05d:	b8 04 00 00 00       	mov    eax,0x4
c001d062:	83 c4 10             	add    esp,0x10
c001d065:	5b                   	pop    ebx
c001d066:	5e                   	pop    esi
c001d067:	5f                   	pop    edi
c001d068:	c3                   	ret    
c001d069:	90                   	nop

c001d06a <ISO9660::exists(char const*)>:
c001d06a:	83 ec 28             	sub    esp,0x28
c001d06d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d071:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d075:	52                   	push   edx
c001d076:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d079:	52                   	push   edx
c001d07a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d07e:	52                   	push   edx
c001d07f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d083:	52                   	push   edx
c001d084:	50                   	push   eax
c001d085:	e8 a4 fe ff ff       	call   c001cf2e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d08a:	83 c4 3c             	add    esp,0x3c
c001d08d:	c3                   	ret    

c001d08e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d08e:	56                   	push   esi
c001d08f:	53                   	push   ebx
c001d090:	83 ec 14             	sub    esp,0x14
c001d093:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d097:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d09b:	85 db                	test   ebx,ebx
c001d09d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d0a1:	0f 94 c2             	sete   dl
c001d0a4:	85 f6                	test   esi,esi
c001d0a6:	0f 94 c0             	sete   al
c001d0a9:	08 c2                	or     dl,al
c001d0ab:	75 68                	jne    c001d115 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d0ad:	85 c9                	test   ecx,ecx
c001d0af:	74 64                	je     c001d115 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d0b1:	83 ec 0c             	sub    esp,0xc
c001d0b4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d0b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d0bb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d0c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d0c8:	50                   	push   eax
c001d0c9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d0cc:	50                   	push   eax
c001d0cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d0d1:	50                   	push   eax
c001d0d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d0d6:	50                   	push   eax
c001d0d7:	51                   	push   ecx
c001d0d8:	e8 51 fe ff ff       	call   c001cf2e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d0dd:	83 c4 20             	add    esp,0x20
c001d0e0:	ba 01 00 00 00       	mov    edx,0x1
c001d0e5:	84 c0                	test   al,al
c001d0e7:	74 31                	je     c001d11a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d0e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d0f4:	89 03                	mov    DWORD PTR [ebx],eax
c001d0f6:	ba 00 00 00 00       	mov    edx,0x0
c001d0fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0ff:	85 c0                	test   eax,eax
c001d101:	0f 95 06             	setne  BYTE PTR [esi]
c001d104:	74 14                	je     c001d11a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d106:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d10c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d113:	eb 05                	jmp    c001d11a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d115:	ba 04 00 00 00       	mov    edx,0x4
c001d11a:	83 c4 14             	add    esp,0x14
c001d11d:	89 d0                	mov    eax,edx
c001d11f:	5b                   	pop    ebx
c001d120:	5e                   	pop    esi
c001d121:	c3                   	ret    

c001d122 <ISO9660::openDir(char const*, void**)>:
c001d122:	57                   	push   edi
c001d123:	56                   	push   esi
c001d124:	53                   	push   ebx
c001d125:	83 ec 10             	sub    esp,0x10
c001d128:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d12c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d130:	85 ff                	test   edi,edi
c001d132:	74 7b                	je     c001d1af <ISO9660::openDir(char const*, void**)+0x8d>
c001d134:	85 f6                	test   esi,esi
c001d136:	74 77                	je     c001d1af <ISO9660::openDir(char const*, void**)+0x8d>
c001d138:	83 ec 0c             	sub    esp,0xc
c001d13b:	6a 1c                	push   0x1c
c001d13d:	e8 19 cc fe ff       	call   c0009d5b <malloc>
c001d142:	89 07                	mov    DWORD PTR [edi],eax
c001d144:	89 c3                	mov    ebx,eax
c001d146:	58                   	pop    eax
c001d147:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d14b:	50                   	push   eax
c001d14c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d14f:	50                   	push   eax
c001d150:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d154:	50                   	push   eax
c001d155:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d159:	50                   	push   eax
c001d15a:	56                   	push   esi
c001d15b:	e8 ce fd ff ff       	call   c001cf2e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d160:	83 c4 20             	add    esp,0x20
c001d163:	84 c0                	test   al,al
c001d165:	74 07                	je     c001d16e <ISO9660::openDir(char const*, void**)+0x4c>
c001d167:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d16c:	75 0b                	jne    c001d179 <ISO9660::openDir(char const*, void**)+0x57>
c001d16e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d172:	b8 01 00 00 00       	mov    eax,0x1
c001d177:	eb 3b                	jmp    c001d1b4 <ISO9660::openDir(char const*, void**)+0x92>
c001d179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d17d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d181:	89 03                	mov    DWORD PTR [ebx],eax
c001d183:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d18a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d18e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d195:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d19c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d19f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d1a6:	8a 06                	mov    al,BYTE PTR [esi]
c001d1a8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d1ab:	31 c0                	xor    eax,eax
c001d1ad:	eb 05                	jmp    c001d1b4 <ISO9660::openDir(char const*, void**)+0x92>
c001d1af:	b8 04 00 00 00       	mov    eax,0x4
c001d1b4:	83 c4 10             	add    esp,0x10
c001d1b7:	5b                   	pop    ebx
c001d1b8:	5e                   	pop    esi
c001d1b9:	5f                   	pop    edi
c001d1ba:	c3                   	ret    
c001d1bb:	90                   	nop

c001d1bc <ISO9660::ISO9660()>:
c001d1bc:	83 ec 0c             	sub    esp,0xc
c001d1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1c3:	83 ec 0c             	sub    esp,0xc
c001d1c6:	50                   	push   eax
c001d1c7:	e8 92 01 ff ff       	call   c000d35e <Filesystem::Filesystem()>
c001d1cc:	83 c4 10             	add    esp,0x10
c001d1cf:	ba f0 6c 02 c0       	mov    edx,0xc0026cf0
c001d1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d8:	89 10                	mov    DWORD PTR [eax],edx
c001d1da:	90                   	nop
c001d1db:	83 c4 0c             	add    esp,0xc
c001d1de:	c3                   	ret    
c001d1df:	90                   	nop

c001d1e0 <SoundCard::beginPlayback()>:
c001d1e0:	c7 44 24 04 50 6d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026d50
c001d1e8:	e9 f8 7d ff ff       	jmp    c0014fe5 <Krnl::panic(char const*)>
c001d1ed:	90                   	nop

c001d1ee <SoundCard::stopPlayback()>:
c001d1ee:	c7 44 24 04 84 6d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026d84
c001d1f6:	e9 ea 7d ff ff       	jmp    c0014fe5 <Krnl::panic(char const*)>
c001d1fb:	90                   	nop

c001d1fc <SoundCard::SoundCard(char const*)>:
c001d1fc:	83 ec 1c             	sub    esp,0x1c
c001d1ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d203:	83 ec 08             	sub    esp,0x8
c001d206:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d20a:	50                   	push   eax
c001d20b:	e8 ae 15 ff ff       	call   c000e7be <Device::Device(char const*)>
c001d210:	83 c4 10             	add    esp,0x10
c001d213:	ba 1c 6e 02 c0       	mov    edx,0xc0026e1c
c001d218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d21c:	89 10                	mov    DWORD PTR [eax],edx
c001d21e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d222:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d22d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d237:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d23b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d245:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d249:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d257:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d261:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d269:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d26e:	7f 19                	jg     c001d289 <SoundCard::SoundCard(char const*)+0x8d>
c001d270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d274:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d278:	83 c2 54             	add    edx,0x54
c001d27b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d283:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d287:	eb e0                	jmp    c001d269 <SoundCard::SoundCard(char const*)+0x6d>
c001d289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d28d:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d294:	90                   	nop
c001d295:	83 c4 1c             	add    esp,0x1c
c001d298:	c3                   	ret    
c001d299:	90                   	nop

c001d29a <SoundCard::~SoundCard()>:
c001d29a:	83 ec 0c             	sub    esp,0xc
c001d29d:	ba 1c 6e 02 c0       	mov    edx,0xc0026e1c
c001d2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a6:	89 10                	mov    DWORD PTR [eax],edx
c001d2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ac:	83 ec 0c             	sub    esp,0xc
c001d2af:	50                   	push   eax
c001d2b0:	e8 d3 11 ff ff       	call   c000e488 <Device::~Device()>
c001d2b5:	83 c4 10             	add    esp,0x10
c001d2b8:	90                   	nop
c001d2b9:	83 c4 0c             	add    esp,0xc
c001d2bc:	c3                   	ret    
c001d2bd:	90                   	nop

c001d2be <SoundCard::~SoundCard()>:
c001d2be:	83 ec 0c             	sub    esp,0xc
c001d2c1:	83 ec 0c             	sub    esp,0xc
c001d2c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2c8:	e8 cd ff ff ff       	call   c001d29a <SoundCard::~SoundCard()>
c001d2cd:	83 c4 10             	add    esp,0x10
c001d2d0:	83 ec 08             	sub    esp,0x8
c001d2d3:	68 e8 01 00 00       	push   0x1e8
c001d2d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2dc:	e8 85 fc fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001d2e1:	83 c4 10             	add    esp,0x10
c001d2e4:	83 c4 0c             	add    esp,0xc
c001d2e7:	c3                   	ret    

c001d2e8 <SoundCard::configureRates(int, int, int)>:
c001d2e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2ec:	31 c0                	xor    eax,eax
c001d2ee:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d2f5:	75 20                	jne    c001d317 <SoundCard::configureRates(int, int, int)+0x2f>
c001d2f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2fb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d305:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d30f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d315:	b0 01                	mov    al,0x1
c001d317:	c3                   	ret    

c001d318 <SoundCard::getSamples16(int, short*)>:
c001d318:	55                   	push   ebp
c001d319:	57                   	push   edi
c001d31a:	31 ff                	xor    edi,edi
c001d31c:	56                   	push   esi
c001d31d:	53                   	push   ebx
c001d31e:	31 db                	xor    ebx,ebx
c001d320:	83 ec 18             	sub    esp,0x18
c001d323:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d327:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d32b:	68 b7 6d 02 c0       	push   0xc0026db7
c001d330:	e8 12 fd fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d335:	83 c4 0c             	add    esp,0xc
c001d338:	8d 04 36             	lea    eax,[esi+esi*1]
c001d33b:	50                   	push   eax
c001d33c:	6a 00                	push   0x0
c001d33e:	55                   	push   ebp
c001d33f:	e8 40 33 fe ff       	call   c0000684 <memset>
c001d344:	83 c4 10             	add    esp,0x10
c001d347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d34b:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d352:	85 c0                	test   eax,eax
c001d354:	74 1b                	je     c001d371 <SoundCard::getSamples16(int, short*)+0x59>
c001d356:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d35a:	75 15                	jne    c001d371 <SoundCard::getSamples16(int, short*)+0x59>
c001d35c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d360:	55                   	push   ebp
c001d361:	56                   	push   esi
c001d362:	50                   	push   eax
c001d363:	e8 58 03 00 00       	call   c001d6c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d368:	83 c4 10             	add    esp,0x10
c001d36b:	39 c7                	cmp    edi,eax
c001d36d:	7d 02                	jge    c001d371 <SoundCard::getSamples16(int, short*)+0x59>
c001d36f:	89 c7                	mov    edi,eax
c001d371:	43                   	inc    ebx
c001d372:	83 fb 20             	cmp    ebx,0x20
c001d375:	75 d0                	jne    c001d347 <SoundCard::getSamples16(int, short*)+0x2f>
c001d377:	83 c4 0c             	add    esp,0xc
c001d37a:	89 f8                	mov    eax,edi
c001d37c:	5b                   	pop    ebx
c001d37d:	5e                   	pop    esi
c001d37e:	5f                   	pop    edi
c001d37f:	5d                   	pop    ebp
c001d380:	c3                   	ret    
c001d381:	90                   	nop

c001d382 <SoundCard::getSamples32(int, int*)>:
c001d382:	55                   	push   ebp
c001d383:	57                   	push   edi
c001d384:	31 ff                	xor    edi,edi
c001d386:	56                   	push   esi
c001d387:	31 f6                	xor    esi,esi
c001d389:	53                   	push   ebx
c001d38a:	83 ec 10             	sub    esp,0x10
c001d38d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d391:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d395:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d399:	c1 e0 02             	shl    eax,0x2
c001d39c:	50                   	push   eax
c001d39d:	6a 00                	push   0x0
c001d39f:	55                   	push   ebp
c001d3a0:	e8 df 32 fe ff       	call   c0000684 <memset>
c001d3a5:	83 c4 10             	add    esp,0x10
c001d3a8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d3af:	85 c0                	test   eax,eax
c001d3b1:	74 1b                	je     c001d3ce <SoundCard::getSamples32(int, int*)+0x4c>
c001d3b3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d3b7:	75 15                	jne    c001d3ce <SoundCard::getSamples32(int, int*)+0x4c>
c001d3b9:	53                   	push   ebx
c001d3ba:	55                   	push   ebp
c001d3bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3bf:	50                   	push   eax
c001d3c0:	e8 f7 03 00 00       	call   c001d7bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d3c5:	83 c4 10             	add    esp,0x10
c001d3c8:	39 c6                	cmp    esi,eax
c001d3ca:	7d 02                	jge    c001d3ce <SoundCard::getSamples32(int, int*)+0x4c>
c001d3cc:	89 c6                	mov    esi,eax
c001d3ce:	47                   	inc    edi
c001d3cf:	83 ff 20             	cmp    edi,0x20
c001d3d2:	75 d4                	jne    c001d3a8 <SoundCard::getSamples32(int, int*)+0x26>
c001d3d4:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d3da:	85 f6                	test   esi,esi
c001d3dc:	75 0f                	jne    c001d3ed <SoundCard::getSamples32(int, int*)+0x6b>
c001d3de:	84 c0                	test   al,al
c001d3e0:	74 1b                	je     c001d3fd <SoundCard::getSamples32(int, int*)+0x7b>
c001d3e2:	83 ec 0c             	sub    esp,0xc
c001d3e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3e7:	53                   	push   ebx
c001d3e8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d3eb:	eb 0d                	jmp    c001d3fa <SoundCard::getSamples32(int, int*)+0x78>
c001d3ed:	84 c0                	test   al,al
c001d3ef:	75 0c                	jne    c001d3fd <SoundCard::getSamples32(int, int*)+0x7b>
c001d3f1:	83 ec 0c             	sub    esp,0xc
c001d3f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3f6:	53                   	push   ebx
c001d3f7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d3fa:	83 c4 10             	add    esp,0x10
c001d3fd:	83 c4 0c             	add    esp,0xc
c001d400:	89 f0                	mov    eax,esi
c001d402:	5b                   	pop    ebx
c001d403:	5e                   	pop    esi
c001d404:	5f                   	pop    edi
c001d405:	5d                   	pop    ebp
c001d406:	c3                   	ret    
c001d407:	90                   	nop

c001d408 <SoundCard::addChannel(SoundPort*)>:
c001d408:	56                   	push   esi
c001d409:	53                   	push   ebx
c001d40a:	53                   	push   ebx
c001d40b:	31 db                	xor    ebx,ebx
c001d40d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d411:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d419:	74 27                	je     c001d442 <SoundCard::addChannel(SoundPort*)+0x3a>
c001d41b:	43                   	inc    ebx
c001d41c:	83 fb 20             	cmp    ebx,0x20
c001d41f:	75 f0                	jne    c001d411 <SoundCard::addChannel(SoundPort*)+0x9>
c001d421:	83 ec 0c             	sub    esp,0xc
c001d424:	83 cb ff             	or     ebx,0xffffffff
c001d427:	68 dd 6d 02 c0       	push   0xc0026ddd
c001d42c:	e8 16 fc fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d431:	c7 04 24 d6 6d 02 c0 	mov    DWORD PTR [esp],0xc0026dd6
c001d438:	e8 a8 7b ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001d43d:	83 c4 10             	add    esp,0x10
c001d440:	eb 1b                	jmp    c001d45d <SoundCard::addChannel(SoundPort*)+0x55>
c001d442:	51                   	push   ecx
c001d443:	51                   	push   ecx
c001d444:	53                   	push   ebx
c001d445:	68 f5 6d 02 c0       	push   0xc0026df5
c001d44a:	e8 f8 fb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d44f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d453:	83 c4 10             	add    esp,0x10
c001d456:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d45d:	89 d8                	mov    eax,ebx
c001d45f:	5a                   	pop    edx
c001d460:	5b                   	pop    ebx
c001d461:	5e                   	pop    esi
c001d462:	c3                   	ret    
c001d463:	90                   	nop

c001d464 <SoundCard::removeChannel(int)>:
c001d464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d468:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d46c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d477:	c3                   	ret    

c001d478 <SoundPort::SoundPort(int, int, int, int)>:
c001d478:	83 ec 0c             	sub    esp,0xc
c001d47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d47f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d48a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d492:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d496:	89 10                	mov    DWORD PTR [eax],edx
c001d498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d49c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d4a0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d4a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d4ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d4ae:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d4b3:	75 13                	jne    c001d4c8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d4b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4b9:	8b 00                	mov    eax,DWORD PTR [eax]
c001d4bb:	05 a0 0f 00 00       	add    eax,0xfa0
c001d4c0:	01 c0                	add    eax,eax
c001d4c2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d4c6:	66 90                	xchg   ax,ax
c001d4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d4d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4d7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d4e5:	c1 e0 02             	shl    eax,0x2
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	50                   	push   eax
c001d4ec:	e8 6a c8 fe ff       	call   c0009d5b <malloc>
c001d4f1:	83 c4 10             	add    esp,0x10
c001d4f4:	89 c2                	mov    edx,eax
c001d4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d4fd:	90                   	nop
c001d4fe:	83 c4 0c             	add    esp,0xc
c001d501:	c3                   	ret    
c001d502:	66 90                	xchg   ax,ax

c001d504 <SoundPort::~SoundPort()>:
c001d504:	83 ec 0c             	sub    esp,0xc
c001d507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d50b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d50e:	85 c0                	test   eax,eax
c001d510:	74 1e                	je     c001d530 <SoundPort::~SoundPort()+0x2c>
c001d512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d516:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d519:	83 ec 0c             	sub    esp,0xc
c001d51c:	50                   	push   eax
c001d51d:	e8 49 c8 fe ff       	call   c0009d6b <free>
c001d522:	83 c4 10             	add    esp,0x10
c001d525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d529:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d530:	90                   	nop
c001d531:	83 c4 0c             	add    esp,0xc
c001d534:	c3                   	ret    
c001d535:	90                   	nop
c001d536:	66 90                	xchg   ax,ax

c001d538 <SoundPort::unpause()>:
c001d538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d53c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d540:	c3                   	ret    
c001d541:	90                   	nop
c001d542:	66 90                	xchg   ax,ax

c001d544 <SoundPort::pause()>:
c001d544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d548:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d54c:	c3                   	ret    
c001d54d:	90                   	nop
c001d54e:	66 90                	xchg   ax,ax

c001d550 <SoundPort::getBufferUsed()>:
c001d550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d554:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d557:	c3                   	ret    

c001d558 <SoundPort::getBufferSize()>:
c001d558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d55c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d55f:	c3                   	ret    

c001d560 <SoundPort::buffer16(short*, int)>:
c001d560:	55                   	push   ebp
c001d561:	57                   	push   edi
c001d562:	56                   	push   esi
c001d563:	53                   	push   ebx
c001d564:	83 ec 1c             	sub    esp,0x1c
c001d567:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d56b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d56f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d572:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d575:	0f 84 85 00 00 00    	je     c001d600 <SoundPort::buffer16(short*, int)+0xa0>
c001d57b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d57f:	85 c9                	test   ecx,ecx
c001d581:	7e 7d                	jle    c001d600 <SoundPort::buffer16(short*, int)+0xa0>
c001d583:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d587:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d58a:	c1 e1 0f             	shl    ecx,0xf
c001d58d:	8d 70 01             	lea    esi,[eax+0x1]
c001d590:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d593:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d596:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d599:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d59c:	74 6e                	je     c001d60c <SoundPort::buffer16(short*, int)+0xac>
c001d59e:	31 f6                	xor    esi,esi
c001d5a0:	eb 22                	jmp    c001d5c4 <SoundPort::buffer16(short*, int)+0x64>
c001d5a2:	66 90                	xchg   ax,ax
c001d5a4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d5a9:	8d 79 01             	lea    edi,[ecx+0x1]
c001d5ac:	c1 e3 0f             	shl    ebx,0xf
c001d5af:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d5b2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d5b5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d5b8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d5bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d5be:	74 1c                	je     c001d5dc <SoundPort::buffer16(short*, int)+0x7c>
c001d5c0:	89 c6                	mov    esi,eax
c001d5c2:	66 90                	xchg   ax,ax
c001d5c4:	8d 46 01             	lea    eax,[esi+0x1]
c001d5c7:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d5cb:	75 d7                	jne    c001d5a4 <SoundPort::buffer16(short*, int)+0x44>
c001d5cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d5d1:	83 c4 1c             	add    esp,0x1c
c001d5d4:	5b                   	pop    ebx
c001d5d5:	5e                   	pop    esi
c001d5d6:	5f                   	pop    edi
c001d5d7:	5d                   	pop    ebp
c001d5d8:	c3                   	ret    
c001d5d9:	8d 76 00             	lea    esi,[esi+0x0]
c001d5dc:	8d 46 02             	lea    eax,[esi+0x2]
c001d5df:	90                   	nop
c001d5e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5e4:	83 ec 0c             	sub    esp,0xc
c001d5e7:	68 48 6e 02 c0       	push   0xc0026e48
c001d5ec:	e8 56 fa fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d5f1:	83 c4 10             	add    esp,0x10
c001d5f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5f8:	83 c4 1c             	add    esp,0x1c
c001d5fb:	5b                   	pop    ebx
c001d5fc:	5e                   	pop    esi
c001d5fd:	5f                   	pop    edi
c001d5fe:	5d                   	pop    ebp
c001d5ff:	c3                   	ret    
c001d600:	83 c4 1c             	add    esp,0x1c
c001d603:	31 c0                	xor    eax,eax
c001d605:	5b                   	pop    ebx
c001d606:	5e                   	pop    esi
c001d607:	5f                   	pop    edi
c001d608:	5d                   	pop    ebp
c001d609:	c3                   	ret    
c001d60a:	66 90                	xchg   ax,ax
c001d60c:	b8 01 00 00 00       	mov    eax,0x1
c001d611:	eb cd                	jmp    c001d5e0 <SoundPort::buffer16(short*, int)+0x80>
c001d613:	90                   	nop

c001d614 <SoundPort::buffer32(int*, int)>:
c001d614:	55                   	push   ebp
c001d615:	57                   	push   edi
c001d616:	56                   	push   esi
c001d617:	53                   	push   ebx
c001d618:	83 ec 1c             	sub    esp,0x1c
c001d61b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d61f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d623:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d626:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d62a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d62e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d631:	74 79                	je     c001d6ac <SoundPort::buffer32(int*, int)+0x98>
c001d633:	85 c0                	test   eax,eax
c001d635:	7e 75                	jle    c001d6ac <SoundPort::buffer32(int*, int)+0x98>
c001d637:	8d 71 01             	lea    esi,[ecx+0x1]
c001d63a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d63d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d640:	8b 37                	mov    esi,DWORD PTR [edi]
c001d642:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d645:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d648:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d64b:	74 6b                	je     c001d6b8 <SoundPort::buffer32(int*, int)+0xa4>
c001d64d:	31 f6                	xor    esi,esi
c001d64f:	eb 1f                	jmp    c001d670 <SoundPort::buffer32(int*, int)+0x5c>
c001d651:	8d 76 00             	lea    esi,[esi+0x0]
c001d654:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d657:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d65a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d65d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d660:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d664:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d667:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d66a:	74 1c                	je     c001d688 <SoundPort::buffer32(int*, int)+0x74>
c001d66c:	89 de                	mov    esi,ebx
c001d66e:	66 90                	xchg   ax,ax
c001d670:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d673:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d677:	75 db                	jne    c001d654 <SoundPort::buffer32(int*, int)+0x40>
c001d679:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d67d:	83 c4 1c             	add    esp,0x1c
c001d680:	5b                   	pop    ebx
c001d681:	5e                   	pop    esi
c001d682:	5f                   	pop    edi
c001d683:	5d                   	pop    ebp
c001d684:	c3                   	ret    
c001d685:	8d 76 00             	lea    esi,[esi+0x0]
c001d688:	8d 46 02             	lea    eax,[esi+0x2]
c001d68b:	90                   	nop
c001d68c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d690:	83 ec 0c             	sub    esp,0xc
c001d693:	68 63 6e 02 c0       	push   0xc0026e63
c001d698:	e8 aa f9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d69d:	83 c4 10             	add    esp,0x10
c001d6a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6a4:	83 c4 1c             	add    esp,0x1c
c001d6a7:	5b                   	pop    ebx
c001d6a8:	5e                   	pop    esi
c001d6a9:	5f                   	pop    edi
c001d6aa:	5d                   	pop    ebp
c001d6ab:	c3                   	ret    
c001d6ac:	83 c4 1c             	add    esp,0x1c
c001d6af:	31 c0                	xor    eax,eax
c001d6b1:	5b                   	pop    ebx
c001d6b2:	5e                   	pop    esi
c001d6b3:	5f                   	pop    edi
c001d6b4:	5d                   	pop    ebp
c001d6b5:	c3                   	ret    
c001d6b6:	66 90                	xchg   ax,ax
c001d6b8:	b8 01 00 00 00       	mov    eax,0x1
c001d6bd:	eb cd                	jmp    c001d68c <SoundPort::buffer32(int*, int)+0x78>
c001d6bf:	90                   	nop

c001d6c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d6c0:	57                   	push   edi
c001d6c1:	56                   	push   esi
c001d6c2:	53                   	push   ebx
c001d6c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d6c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d6cb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d6d1:	39 03                	cmp    DWORD PTR [ebx],eax
c001d6d3:	74 13                	je     c001d6e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d6d5:	83 ec 0c             	sub    esp,0xc
c001d6d8:	68 b8 6e 02 c0       	push   0xc0026eb8
c001d6dd:	e8 03 79 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001d6e2:	83 c4 10             	add    esp,0x10
c001d6e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d6e8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d6ee:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d6f1:	74 11                	je     c001d704 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d6f3:	83 ec 0c             	sub    esp,0xc
c001d6f6:	68 7e 6e 02 c0       	push   0xc0026e7e
c001d6fb:	e8 e5 78 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001d700:	83 c4 10             	add    esp,0x10
c001d703:	90                   	nop
c001d704:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d70a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d70d:	74 11                	je     c001d720 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d70f:	83 ec 0c             	sub    esp,0xc
c001d712:	68 7e 6e 02 c0       	push   0xc0026e7e
c001d717:	e8 c9 78 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001d71c:	83 c4 10             	add    esp,0x10
c001d71f:	90                   	nop
c001d720:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d723:	89 c6                	mov    esi,eax
c001d725:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d729:	7e 05                	jle    c001d730 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d72b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d72f:	90                   	nop
c001d730:	85 f6                	test   esi,esi
c001d732:	7e 30                	jle    c001d764 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d734:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d738:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d73b:	31 c9                	xor    ecx,ecx
c001d73d:	01 d7                	add    edi,edx
c001d73f:	90                   	nop
c001d740:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d743:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d746:	85 c0                	test   eax,eax
c001d748:	79 06                	jns    c001d750 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d74a:	05 ff 7f 00 00       	add    eax,0x7fff
c001d74f:	90                   	nop
c001d750:	c1 f8 0f             	sar    eax,0xf
c001d753:	83 c1 04             	add    ecx,0x4
c001d756:	66 01 02             	add    WORD PTR [edx],ax
c001d759:	83 c2 02             	add    edx,0x2
c001d75c:	39 d7                	cmp    edi,edx
c001d75e:	75 e0                	jne    c001d740 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d763:	90                   	nop
c001d764:	56                   	push   esi
c001d765:	89 c2                	mov    edx,eax
c001d767:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d76e:	29 f2                	sub    edx,esi
c001d770:	52                   	push   edx
c001d771:	50                   	push   eax
c001d772:	68 d8 6e 02 c0       	push   0xc0026ed8
c001d777:	e8 cb f8 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d77c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d77f:	50                   	push   eax
c001d780:	01 f8                	add    eax,edi
c001d782:	50                   	push   eax
c001d783:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d786:	29 f0                	sub    eax,esi
c001d788:	c1 e0 02             	shl    eax,0x2
c001d78b:	50                   	push   eax
c001d78c:	68 08 6f 02 c0       	push   0xc0026f08
c001d791:	e8 b1 f8 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d796:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d799:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d79c:	83 c4 1c             	add    esp,0x1c
c001d79f:	01 d7                	add    edi,edx
c001d7a1:	29 f0                	sub    eax,esi
c001d7a3:	c1 e0 02             	shl    eax,0x2
c001d7a6:	50                   	push   eax
c001d7a7:	57                   	push   edi
c001d7a8:	52                   	push   edx
c001d7a9:	e8 0e 2e fe ff       	call   c00005bc <memmove>
c001d7ae:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d7b1:	83 c4 10             	add    esp,0x10
c001d7b4:	89 f0                	mov    eax,esi
c001d7b6:	5b                   	pop    ebx
c001d7b7:	5e                   	pop    esi
c001d7b8:	5f                   	pop    edi
c001d7b9:	c3                   	ret    
c001d7ba:	66 90                	xchg   ax,ax

c001d7bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d7bc:	57                   	push   edi
c001d7bd:	56                   	push   esi
c001d7be:	53                   	push   ebx
c001d7bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7c3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d7c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d7cb:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d7d1:	39 06                	cmp    DWORD PTR [esi],eax
c001d7d3:	74 13                	je     c001d7e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d7d5:	83 ec 0c             	sub    esp,0xc
c001d7d8:	68 2c 6f 02 c0       	push   0xc0026f2c
c001d7dd:	e8 03 78 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001d7e2:	83 c4 10             	add    esp,0x10
c001d7e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d7e8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d7ee:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d7f1:	74 11                	je     c001d804 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d7f3:	83 ec 0c             	sub    esp,0xc
c001d7f6:	68 9a 6e 02 c0       	push   0xc0026e9a
c001d7fb:	e8 e5 77 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001d800:	83 c4 10             	add    esp,0x10
c001d803:	90                   	nop
c001d804:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d80a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d80d:	74 11                	je     c001d820 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d80f:	83 ec 0c             	sub    esp,0xc
c001d812:	68 9a 6e 02 c0       	push   0xc0026e9a
c001d817:	e8 c9 77 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001d81c:	83 c4 10             	add    esp,0x10
c001d81f:	90                   	nop
c001d820:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d823:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d827:	7e 07                	jle    c001d830 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d829:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d82d:	8d 76 00             	lea    esi,[esi+0x0]
c001d830:	85 ff                	test   edi,edi
c001d832:	7e 1c                	jle    c001d850 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d834:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d83b:	31 c0                	xor    eax,eax
c001d83d:	8d 76 00             	lea    esi,[esi+0x0]
c001d840:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d843:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d846:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d849:	83 c0 04             	add    eax,0x4
c001d84c:	39 c1                	cmp    ecx,eax
c001d84e:	75 f0                	jne    c001d840 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d850:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d853:	50                   	push   eax
c001d854:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d857:	29 f8                	sub    eax,edi
c001d859:	c1 e0 02             	shl    eax,0x2
c001d85c:	50                   	push   eax
c001d85d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d860:	50                   	push   eax
c001d861:	52                   	push   edx
c001d862:	e8 55 2d fe ff       	call   c00005bc <memmove>
c001d867:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d86a:	83 c4 10             	add    esp,0x10
c001d86d:	89 f8                	mov    eax,edi
c001d86f:	5b                   	pop    ebx
c001d870:	5e                   	pop    esi
c001d871:	5f                   	pop    edi
c001d872:	c3                   	ret    
c001d873:	90                   	nop

c001d874 <PCI::open(int, int, void*)>:
c001d874:	83 ec 18             	sub    esp,0x18
c001d877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d87b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d87f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d885:	8b 10                	mov    edx,DWORD PTR [eax]
c001d887:	50                   	push   eax
c001d888:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d88b:	31 c0                	xor    eax,eax
c001d88d:	83 c4 1c             	add    esp,0x1c
c001d890:	c3                   	ret    
c001d891:	90                   	nop

c001d892 <PCI::close(int, int, void*)>:
c001d892:	31 c0                	xor    eax,eax
c001d894:	c3                   	ret    
c001d895:	90                   	nop

c001d896 <PCI::PCI()>:
c001d896:	83 ec 0c             	sub    esp,0xc
c001d899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d89d:	83 ec 08             	sub    esp,0x8
c001d8a0:	68 4b 6f 02 c0       	push   0xc0026f4b
c001d8a5:	50                   	push   eax
c001d8a6:	e8 75 05 ff ff       	call   c000de20 <Bus::Bus(char const*)>
c001d8ab:	83 c4 10             	add    esp,0x10
c001d8ae:	ba 20 71 02 c0       	mov    edx,0xc0027120
c001d8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b7:	89 10                	mov    DWORD PTR [eax],edx
c001d8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8bd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8cb:	a3 c0 a7 02 c0       	mov    ds:0xc002a7c0,eax
c001d8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d8da:	0f b6 d0             	movzx  edx,al
c001d8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8e1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d8f2:	0f b6 d0             	movzx  edx,al
c001d8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8f9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d902:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d908:	8d 50 01             	lea    edx,[eax+0x1]
c001d90b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d90f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d915:	0f b6 d0             	movzx  edx,al
c001d918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d91c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d920:	83 c9 c0             	or     ecx,0xffffffc0
c001d923:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d927:	90                   	nop
c001d928:	83 c4 0c             	add    esp,0xc
c001d92b:	c3                   	ret    

c001d92c <PCI::readBAR8(unsigned int, int)>:
c001d92c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d934:	f6 c2 01             	test   dl,0x1
c001d937:	74 07                	je     c001d940 <PCI::readBAR8(unsigned int, int)+0x14>
c001d939:	83 e2 fc             	and    edx,0xfffffffc
c001d93c:	01 c2                	add    edx,eax
c001d93e:	ec                   	in     al,dx
c001d93f:	c3                   	ret    
c001d940:	83 e2 f0             	and    edx,0xfffffff0
c001d943:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d946:	c3                   	ret    
c001d947:	90                   	nop

c001d948 <PCI::readBAR16(unsigned int, int)>:
c001d948:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d94c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d950:	f6 c2 01             	test   dl,0x1
c001d953:	74 08                	je     c001d95d <PCI::readBAR16(unsigned int, int)+0x15>
c001d955:	83 e2 fc             	and    edx,0xfffffffc
c001d958:	01 c2                	add    edx,eax
c001d95a:	66 ed                	in     ax,dx
c001d95c:	c3                   	ret    
c001d95d:	83 e2 f0             	and    edx,0xfffffff0
c001d960:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d964:	c3                   	ret    
c001d965:	90                   	nop

c001d966 <PCI::readBAR32(unsigned int, int)>:
c001d966:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d96a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d96e:	f6 c2 01             	test   dl,0x1
c001d971:	74 07                	je     c001d97a <PCI::readBAR32(unsigned int, int)+0x14>
c001d973:	83 e2 fc             	and    edx,0xfffffffc
c001d976:	01 c2                	add    edx,eax
c001d978:	ed                   	in     eax,dx
c001d979:	c3                   	ret    
c001d97a:	83 e2 f0             	and    edx,0xfffffff0
c001d97d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d980:	c3                   	ret    
c001d981:	90                   	nop

c001d982 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d982:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d98a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d98e:	f6 c2 01             	test   dl,0x1
c001d991:	74 07                	je     c001d99a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d993:	83 e2 fc             	and    edx,0xfffffffc
c001d996:	01 ca                	add    edx,ecx
c001d998:	ee                   	out    dx,al
c001d999:	c3                   	ret    
c001d99a:	83 e2 f0             	and    edx,0xfffffff0
c001d99d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d9a0:	c3                   	ret    
c001d9a1:	90                   	nop

c001d9a2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d9a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d9a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9ae:	f6 c2 01             	test   dl,0x1
c001d9b1:	74 08                	je     c001d9bb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d9b3:	83 e2 fc             	and    edx,0xfffffffc
c001d9b6:	01 ca                	add    edx,ecx
c001d9b8:	66 ef                	out    dx,ax
c001d9ba:	c3                   	ret    
c001d9bb:	83 e2 f0             	and    edx,0xfffffff0
c001d9be:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d9c2:	c3                   	ret    
c001d9c3:	90                   	nop

c001d9c4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d9c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d9c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9d0:	f6 c2 01             	test   dl,0x1
c001d9d3:	74 07                	je     c001d9dc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d9d5:	83 e2 fc             	and    edx,0xfffffffc
c001d9d8:	01 ca                	add    edx,ecx
c001d9da:	ef                   	out    dx,eax
c001d9db:	c3                   	ret    
c001d9dc:	83 e2 f0             	and    edx,0xfffffff0
c001d9df:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d9e2:	c3                   	ret    
c001d9e3:	90                   	nop

c001d9e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d9e4:	55                   	push   ebp
c001d9e5:	57                   	push   edi
c001d9e6:	56                   	push   esi
c001d9e7:	53                   	push   ebx
c001d9e8:	83 ec 0c             	sub    esp,0xc
c001d9eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d9ef:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d9f3:	89 f0                	mov    eax,esi
c001d9f5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d9f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d9fd:	3c 07                	cmp    al,0x7
c001d9ff:	76 10                	jbe    c001da11 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001da01:	83 ec 0c             	sub    esp,0xc
c001da04:	68 53 6f 02 c0       	push   0xc0026f53
c001da09:	e8 d7 75 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001da0e:	83 c4 10             	add    esp,0x10
c001da11:	80 fb 0f             	cmp    bl,0xf
c001da14:	76 10                	jbe    c001da26 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001da16:	83 ec 0c             	sub    esp,0xc
c001da19:	68 83 6f 02 c0       	push   0xc0026f83
c001da1e:	e8 c2 75 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001da23:	83 c4 10             	add    esp,0x10
c001da26:	8d 04 36             	lea    eax,[esi+esi*1]
c001da29:	ba f8 0c 00 00       	mov    edx,0xcf8
c001da2e:	83 c8 f0             	or     eax,0xfffffff0
c001da31:	ee                   	out    dx,al
c001da32:	ba fa 0c 00 00       	mov    edx,0xcfa
c001da37:	89 e8                	mov    eax,ebp
c001da39:	ee                   	out    dx,al
c001da3a:	83 c4 0c             	add    esp,0xc
c001da3d:	89 d8                	mov    eax,ebx
c001da3f:	66 81 e7 fc 00       	and    di,0xfc
c001da44:	5b                   	pop    ebx
c001da45:	c1 e0 08             	shl    eax,0x8
c001da48:	5e                   	pop    esi
c001da49:	09 f8                	or     eax,edi
c001da4b:	5f                   	pop    edi
c001da4c:	66 0d 00 c0          	or     ax,0xc000
c001da50:	5d                   	pop    ebp
c001da51:	c3                   	ret    

c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001da52:	57                   	push   edi
c001da53:	56                   	push   esi
c001da54:	53                   	push   ebx
c001da55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da5d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001da63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001da67:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001da6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001da6f:	83 ff 01             	cmp    edi,0x1
c001da72:	75 3e                	jne    c001dab2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001da74:	89 de                	mov    esi,ebx
c001da76:	0f b6 c0             	movzx  eax,al
c001da79:	81 e6 fc 00 00 00    	and    esi,0xfc
c001da7f:	c1 e0 10             	shl    eax,0x10
c001da82:	0f b6 c9             	movzx  ecx,cl
c001da85:	09 f0                	or     eax,esi
c001da87:	c1 e1 08             	shl    ecx,0x8
c001da8a:	0f b6 d2             	movzx  edx,dl
c001da8d:	09 c8                	or     eax,ecx
c001da8f:	c1 e2 0b             	shl    edx,0xb
c001da92:	09 d0                	or     eax,edx
c001da94:	ba f8 0c 00 00       	mov    edx,0xcf8
c001da99:	0d 00 00 00 80       	or     eax,0x80000000
c001da9e:	ef                   	out    dx,eax
c001da9f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001daa4:	ed                   	in     eax,dx
c001daa5:	83 e3 02             	and    ebx,0x2
c001daa8:	0f b6 cb             	movzx  ecx,bl
c001daab:	c1 e1 03             	shl    ecx,0x3
c001daae:	d3 e8                	shr    eax,cl
c001dab0:	eb 43                	jmp    c001daf5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001dab2:	83 ff 02             	cmp    edi,0x2
c001dab5:	75 2c                	jne    c001dae3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001dab7:	83 ec 0c             	sub    esp,0xc
c001daba:	0f b6 c9             	movzx  ecx,cl
c001dabd:	0f b6 d2             	movzx  edx,dl
c001dac0:	0f b6 fb             	movzx  edi,bl
c001dac3:	0f b6 c0             	movzx  eax,al
c001dac6:	57                   	push   edi
c001dac7:	51                   	push   ecx
c001dac8:	52                   	push   edx
c001dac9:	50                   	push   eax
c001daca:	56                   	push   esi
c001dacb:	e8 14 ff ff ff       	call   c001d9e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dad0:	89 c2                	mov    edx,eax
c001dad2:	ed                   	in     eax,dx
c001dad3:	83 e3 02             	and    ebx,0x2
c001dad6:	83 c4 20             	add    esp,0x20
c001dad9:	0f b6 cb             	movzx  ecx,bl
c001dadc:	c1 e1 03             	shl    ecx,0x3
c001dadf:	d3 e8                	shr    eax,cl
c001dae1:	eb 12                	jmp    c001daf5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001dae3:	83 ec 0c             	sub    esp,0xc
c001dae6:	68 b3 6f 02 c0       	push   0xc0026fb3
c001daeb:	e8 f5 74 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001daf0:	83 c4 10             	add    esp,0x10
c001daf3:	31 c0                	xor    eax,eax
c001daf5:	5b                   	pop    ebx
c001daf6:	5e                   	pop    esi
c001daf7:	5f                   	pop    edi
c001daf8:	c3                   	ret    
c001daf9:	90                   	nop

c001dafa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dafa:	83 ec 18             	sub    esp,0x18
c001dafd:	6a 00                	push   0x0
c001daff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db04:	50                   	push   eax
c001db05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db0a:	50                   	push   eax
c001db0b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db10:	50                   	push   eax
c001db11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db15:	e8 38 ff ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001db1a:	83 c4 2c             	add    esp,0x2c
c001db1d:	c3                   	ret    

c001db1e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001db1e:	83 ec 18             	sub    esp,0x18
c001db21:	6a 0e                	push   0xe
c001db23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db28:	50                   	push   eax
c001db29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db2e:	50                   	push   eax
c001db2f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db34:	50                   	push   eax
c001db35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db39:	e8 14 ff ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001db3e:	83 c4 2c             	add    esp,0x2c
c001db41:	0f b6 c0             	movzx  eax,al
c001db44:	c3                   	ret    
c001db45:	90                   	nop

c001db46 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001db46:	55                   	push   ebp
c001db47:	57                   	push   edi
c001db48:	56                   	push   esi
c001db49:	53                   	push   ebx
c001db4a:	83 ec 18             	sub    esp,0x18
c001db4d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001db52:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001db57:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001db5c:	6a 0a                	push   0xa
c001db5e:	56                   	push   esi
c001db5f:	55                   	push   ebp
c001db60:	57                   	push   edi
c001db61:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db65:	e8 e8 fe ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001db6a:	83 c4 14             	add    esp,0x14
c001db6d:	89 c3                	mov    ebx,eax
c001db6f:	6a 0a                	push   0xa
c001db71:	0f b6 db             	movzx  ebx,bl
c001db74:	56                   	push   esi
c001db75:	55                   	push   ebp
c001db76:	57                   	push   edi
c001db77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db7b:	e8 d2 fe ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001db80:	83 c4 2c             	add    esp,0x2c
c001db83:	25 00 ff 00 00       	and    eax,0xff00
c001db88:	09 d8                	or     eax,ebx
c001db8a:	5b                   	pop    ebx
c001db8b:	5e                   	pop    esi
c001db8c:	5f                   	pop    edi
c001db8d:	5d                   	pop    ebp
c001db8e:	c3                   	ret    
c001db8f:	90                   	nop

c001db90 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001db90:	83 ec 18             	sub    esp,0x18
c001db93:	6a 08                	push   0x8
c001db95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db9a:	50                   	push   eax
c001db9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dba0:	50                   	push   eax
c001dba1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dba6:	50                   	push   eax
c001dba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbab:	e8 a2 fe ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbb0:	83 c4 2c             	add    esp,0x2c
c001dbb3:	0f b6 c4             	movzx  eax,ah
c001dbb6:	c3                   	ret    
c001dbb7:	90                   	nop

c001dbb8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001dbb8:	83 ec 18             	sub    esp,0x18
c001dbbb:	6a 08                	push   0x8
c001dbbd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dbc2:	50                   	push   eax
c001dbc3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dbc8:	50                   	push   eax
c001dbc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dbce:	50                   	push   eax
c001dbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd3:	e8 7a fe ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbd8:	83 c4 2c             	add    esp,0x2c
c001dbdb:	c3                   	ret    

c001dbdc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001dbdc:	83 ec 18             	sub    esp,0x18
c001dbdf:	6a 3c                	push   0x3c
c001dbe1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dbe6:	50                   	push   eax
c001dbe7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dbec:	50                   	push   eax
c001dbed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dbf2:	50                   	push   eax
c001dbf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbf7:	e8 56 fe ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbfc:	83 c4 2c             	add    esp,0x2c
c001dbff:	c3                   	ret    

c001dc00 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001dc00:	83 ec 18             	sub    esp,0x18
c001dc03:	6a 18                	push   0x18
c001dc05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc0a:	50                   	push   eax
c001dc0b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc10:	50                   	push   eax
c001dc11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc16:	50                   	push   eax
c001dc17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc1b:	e8 32 fe ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc20:	83 c4 2c             	add    esp,0x2c
c001dc23:	0f b6 c4             	movzx  eax,ah
c001dc26:	c3                   	ret    
c001dc27:	90                   	nop

c001dc28 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dc28:	55                   	push   ebp
c001dc29:	57                   	push   edi
c001dc2a:	56                   	push   esi
c001dc2b:	53                   	push   ebx
c001dc2c:	83 ec 28             	sub    esp,0x28
c001dc2f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dc33:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001dc38:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001dc3d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001dc42:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001dc49:	8d 43 12             	lea    eax,[ebx+0x12]
c001dc4c:	83 c3 10             	add    ebx,0x10
c001dc4f:	0f b6 c0             	movzx  eax,al
c001dc52:	0f b6 db             	movzx  ebx,bl
c001dc55:	50                   	push   eax
c001dc56:	51                   	push   ecx
c001dc57:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dc5b:	57                   	push   edi
c001dc5c:	55                   	push   ebp
c001dc5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dc61:	e8 ec fd ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc66:	83 c4 14             	add    esp,0x14
c001dc69:	89 c6                	mov    esi,eax
c001dc6b:	53                   	push   ebx
c001dc6c:	c1 e6 10             	shl    esi,0x10
c001dc6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dc73:	51                   	push   ecx
c001dc74:	57                   	push   edi
c001dc75:	55                   	push   ebp
c001dc76:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dc7a:	e8 d3 fd ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc7f:	83 c4 3c             	add    esp,0x3c
c001dc82:	0f b7 c0             	movzx  eax,ax
c001dc85:	5b                   	pop    ebx
c001dc86:	09 f0                	or     eax,esi
c001dc88:	5e                   	pop    esi
c001dc89:	5f                   	pop    edi
c001dc8a:	5d                   	pop    ebp
c001dc8b:	c3                   	ret    

c001dc8c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001dc8c:	55                   	push   ebp
c001dc8d:	57                   	push   edi
c001dc8e:	56                   	push   esi
c001dc8f:	53                   	push   ebx
c001dc90:	83 ec 0c             	sub    esp,0xc
c001dc93:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dc97:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dc9b:	89 f5                	mov    ebp,esi
c001dc9d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001dca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dca7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dcab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dcaf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dcb3:	83 f9 01             	cmp    ecx,0x1
c001dcb6:	75 5d                	jne    c001dd15 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001dcb8:	0f b6 c8             	movzx  ecx,al
c001dcbb:	0f b6 d2             	movzx  edx,dl
c001dcbe:	c1 e1 10             	shl    ecx,0x10
c001dcc1:	c1 e2 0b             	shl    edx,0xb
c001dcc4:	89 f0                	mov    eax,esi
c001dcc6:	25 fc 00 00 00       	and    eax,0xfc
c001dccb:	09 c1                	or     ecx,eax
c001dccd:	89 e8                	mov    eax,ebp
c001dccf:	0f b6 c0             	movzx  eax,al
c001dcd2:	c1 e0 08             	shl    eax,0x8
c001dcd5:	09 c1                	or     ecx,eax
c001dcd7:	09 d1                	or     ecx,edx
c001dcd9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dcde:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001dce4:	89 c8                	mov    eax,ecx
c001dce6:	ef                   	out    dx,eax
c001dce7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dcec:	ed                   	in     eax,dx
c001dced:	0f b7 db             	movzx  ebx,bx
c001dcf0:	83 e6 02             	and    esi,0x2
c001dcf3:	74 0a                	je     c001dcff <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001dcf5:	0f b7 d0             	movzx  edx,ax
c001dcf8:	c1 e3 10             	shl    ebx,0x10
c001dcfb:	09 d3                	or     ebx,edx
c001dcfd:	eb 05                	jmp    c001dd04 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001dcff:	66 31 c0             	xor    ax,ax
c001dd02:	09 c3                	or     ebx,eax
c001dd04:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dd09:	89 c8                	mov    eax,ecx
c001dd0b:	ef                   	out    dx,eax
c001dd0c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dd11:	89 d8                	mov    eax,ebx
c001dd13:	eb 41                	jmp    c001dd56 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001dd15:	83 f9 02             	cmp    ecx,0x2
c001dd18:	75 45                	jne    c001dd5f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001dd1a:	83 ec 0c             	sub    esp,0xc
c001dd1d:	0f b6 d2             	movzx  edx,dl
c001dd20:	89 f1                	mov    ecx,esi
c001dd22:	0f b6 c0             	movzx  eax,al
c001dd25:	0f b6 f1             	movzx  esi,cl
c001dd28:	89 e9                	mov    ecx,ebp
c001dd2a:	56                   	push   esi
c001dd2b:	0f b6 c9             	movzx  ecx,cl
c001dd2e:	51                   	push   ecx
c001dd2f:	52                   	push   edx
c001dd30:	50                   	push   eax
c001dd31:	57                   	push   edi
c001dd32:	e8 ad fc ff ff       	call   c001d9e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd37:	89 c2                	mov    edx,eax
c001dd39:	ed                   	in     eax,dx
c001dd3a:	83 c4 20             	add    esp,0x20
c001dd3d:	0f b7 db             	movzx  ebx,bx
c001dd40:	f6 c2 02             	test   dl,0x2
c001dd43:	74 0c                	je     c001dd51 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001dd45:	0f b7 c8             	movzx  ecx,ax
c001dd48:	89 d8                	mov    eax,ebx
c001dd4a:	c1 e0 10             	shl    eax,0x10
c001dd4d:	09 c8                	or     eax,ecx
c001dd4f:	eb 05                	jmp    c001dd56 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001dd51:	66 31 c0             	xor    ax,ax
c001dd54:	09 d8                	or     eax,ebx
c001dd56:	ef                   	out    dx,eax
c001dd57:	83 c4 0c             	add    esp,0xc
c001dd5a:	5b                   	pop    ebx
c001dd5b:	5e                   	pop    esi
c001dd5c:	5f                   	pop    edi
c001dd5d:	5d                   	pop    ebp
c001dd5e:	c3                   	ret    
c001dd5f:	c7 44 24 20 b3 6f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026fb3
c001dd67:	83 c4 0c             	add    esp,0xc
c001dd6a:	5b                   	pop    ebx
c001dd6b:	5e                   	pop    esi
c001dd6c:	5f                   	pop    edi
c001dd6d:	5d                   	pop    ebp
c001dd6e:	e9 72 72 ff ff       	jmp    c0014fe5 <Krnl::panic(char const*)>
c001dd73:	90                   	nop

c001dd74 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001dd74:	55                   	push   ebp
c001dd75:	57                   	push   edi
c001dd76:	56                   	push   esi
c001dd77:	53                   	push   ebx
c001dd78:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001dd7e:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001dd85:	75 0f                	jne    c001dd96 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001dd87:	80 3d cc a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a7cc,0x0
c001dd8e:	0f 85 fa 00 00 00    	jne    c001de8e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001dd94:	eb 2f                	jmp    c001ddc5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001dd96:	83 ec 0c             	sub    esp,0xc
c001dd99:	68 b9 6f 02 c0       	push   0xc0026fb9
c001dd9e:	e8 12 c0 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001dda3:	83 c4 10             	add    esp,0x10
c001dda6:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001ddad:	75 d8                	jne    c001dd87 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001ddaf:	e4 60                	in     al,0x60
c001ddb1:	3c 1c                	cmp    al,0x1c
c001ddb3:	74 04                	je     c001ddb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001ddb5:	3c 5a                	cmp    al,0x5a
c001ddb7:	75 f6                	jne    c001ddaf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001ddb9:	e4 60                	in     al,0x60
c001ddbb:	3c 5a                	cmp    al,0x5a
c001ddbd:	74 fa                	je     c001ddb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001ddbf:	3c 1c                	cmp    al,0x1c
c001ddc1:	74 f6                	je     c001ddb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001ddc3:	eb c2                	jmp    c001dd87 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001ddc5:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001ddcc:	0f 85 86 00 00 00    	jne    c001de58 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001ddd2:	83 ec 0c             	sub    esp,0xc
c001ddd5:	68 14 01 00 00       	push   0x114
c001ddda:	e8 7c bf fe ff       	call   c0009d5b <malloc>
c001dddf:	83 c4 0c             	add    esp,0xc
c001dde2:	89 c3                	mov    ebx,eax
c001dde4:	ff 35 d0 9d 02 c0    	push   DWORD PTR ds:0xc0029dd0
c001ddea:	68 d3 6f 02 c0       	push   0xc0026fd3
c001ddef:	50                   	push   eax
c001ddf0:	e8 bd f7 fe ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001ddf5:	5a                   	pop    edx
c001ddf6:	59                   	pop    ecx
c001ddf7:	6a 01                	push   0x1
c001ddf9:	53                   	push   ebx
c001ddfa:	e8 8d f8 fe ff       	call   c000d68c <File::open(FileOpenMode)>
c001ddff:	83 c4 0c             	add    esp,0xc
c001de02:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001de06:	50                   	push   eax
c001de07:	8d 44 24 28          	lea    eax,[esp+0x28]
c001de0b:	50                   	push   eax
c001de0c:	53                   	push   ebx
c001de0d:	e8 26 fb fe ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001de12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de16:	40                   	inc    eax
c001de17:	89 04 24             	mov    DWORD PTR [esp],eax
c001de1a:	e8 3c bf fe ff       	call   c0009d5b <malloc>
c001de1f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001de23:	a3 c8 a7 02 c0       	mov    ds:0xc002a7c8,eax
c001de28:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001de2c:	5e                   	pop    esi
c001de2d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001de2f:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001de33:	51                   	push   ecx
c001de34:	50                   	push   eax
c001de35:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001de39:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001de3d:	53                   	push   ebx
c001de3e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001de41:	83 c4 14             	add    esp,0x14
c001de44:	53                   	push   ebx
c001de45:	e8 a0 f8 fe ff       	call   c000d6ea <File::close()>
c001de4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de4e:	83 c4 10             	add    esp,0x10
c001de51:	a3 c4 a7 02 c0       	mov    ds:0xc002a7c4,eax
c001de56:	eb 36                	jmp    c001de8e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001de58:	83 ec 0c             	sub    esp,0xc
c001de5b:	68 ec 6f 02 c0       	push   0xc0026fec
c001de60:	e8 50 bf fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001de65:	83 c4 10             	add    esp,0x10
c001de68:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001de6f:	0f 85 5d ff ff ff    	jne    c001ddd2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001de75:	e4 60                	in     al,0x60
c001de77:	3c 1c                	cmp    al,0x1c
c001de79:	74 04                	je     c001de7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001de7b:	3c 5a                	cmp    al,0x5a
c001de7d:	75 f6                	jne    c001de75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001de7f:	e4 60                	in     al,0x60
c001de81:	3c 5a                	cmp    al,0x5a
c001de83:	74 fa                	je     c001de7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001de85:	3c 1c                	cmp    al,0x1c
c001de87:	74 f6                	je     c001de7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001de89:	e9 44 ff ff ff       	jmp    c001ddd2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001de8e:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001de95:	75 0b                	jne    c001dea2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001de97:	31 f6                	xor    esi,esi
c001de99:	31 db                	xor    ebx,ebx
c001de9b:	31 ed                	xor    ebp,ebp
c001de9d:	e9 a3 01 00 00       	jmp    c001e045 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dea2:	83 ec 0c             	sub    esp,0xc
c001dea5:	68 fe 6f 02 c0       	push   0xc0026ffe
c001deaa:	e8 06 bf fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001deaf:	8b 15 a0 88 02 c0    	mov    edx,DWORD PTR ds:0xc00288a0
c001deb5:	83 c4 10             	add    esp,0x10
c001deb8:	f6 c2 80             	test   dl,0x80
c001debb:	74 0c                	je     c001dec9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001debd:	0f ba e2 0b          	bt     edx,0xb
c001dec1:	72 1a                	jb     c001dedd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001dec3:	eb d2                	jmp    c001de97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dec5:	3c 5a                	cmp    al,0x5a
c001dec7:	74 0c                	je     c001ded5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001dec9:	e4 60                	in     al,0x60
c001decb:	3c 1c                	cmp    al,0x1c
c001decd:	75 f6                	jne    c001dec5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001decf:	eb 04                	jmp    c001ded5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001ded1:	3c 1c                	cmp    al,0x1c
c001ded3:	75 e8                	jne    c001debd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001ded5:	e4 60                	in     al,0x60
c001ded7:	3c 5a                	cmp    al,0x5a
c001ded9:	74 fa                	je     c001ded5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001dedb:	eb f4                	jmp    c001ded1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001dedd:	83 ec 0c             	sub    esp,0xc
c001dee0:	68 03 70 02 c0       	push   0xc0027003
c001dee5:	e8 cb be fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001deea:	83 c4 10             	add    esp,0x10
c001deed:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001def4:	75 a1                	jne    c001de97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001def6:	e4 60                	in     al,0x60
c001def8:	3c 5a                	cmp    al,0x5a
c001defa:	74 04                	je     c001df00 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001defc:	3c 1c                	cmp    al,0x1c
c001defe:	75 f6                	jne    c001def6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001df00:	e4 60                	in     al,0x60
c001df02:	3c 5a                	cmp    al,0x5a
c001df04:	74 fa                	je     c001df00 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001df06:	3c 1c                	cmp    al,0x1c
c001df08:	74 f6                	je     c001df00 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001df0a:	eb 8b                	jmp    c001de97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001df0c:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001df13:	0f 85 3d 01 00 00    	jne    c001e056 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001df19:	a1 c8 a7 02 c0       	mov    eax,ds:0xc002a7c8
c001df1e:	8d 7e 01             	lea    edi,[esi+0x1]
c001df21:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001df24:	d4 40                	aam    0x40
c001df26:	d5 39                	aad    0x39
c001df28:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001df2f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001df33:	0f 85 53 01 00 00    	jne    c001e08c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001df39:	8b 15 c8 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a7c8
c001df3f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001df42:	d4 40                	aam    0x40
c001df44:	d5 39                	aad    0x39
c001df46:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001df4a:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001df4e:	d4 40                	aam    0x40
c001df50:	d5 39                	aad    0x39
c001df52:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001df56:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001df5a:	d4 40                	aam    0x40
c001df5c:	d5 39                	aad    0x39
c001df5e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001df62:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001df66:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001df6a:	3c 56                	cmp    al,0x56
c001df6c:	74 49                	je     c001dfb7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001df6e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001df72:	d4 40                	aam    0x40
c001df74:	d5 39                	aad    0x39
c001df76:	8d 48 d0             	lea    ecx,[eax-0x30]
c001df79:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001df7d:	0f b6 c9             	movzx  ecx,cl
c001df80:	c1 e1 04             	shl    ecx,0x4
c001df83:	d4 40                	aam    0x40
c001df85:	d5 39                	aad    0x39
c001df87:	83 e8 30             	sub    eax,0x30
c001df8a:	0f b6 c0             	movzx  eax,al
c001df8d:	09 c1                	or     ecx,eax
c001df8f:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001df93:	c1 e1 04             	shl    ecx,0x4
c001df96:	d4 40                	aam    0x40
c001df98:	d5 39                	aad    0x39
c001df9a:	83 e8 30             	sub    eax,0x30
c001df9d:	0f b6 c0             	movzx  eax,al
c001dfa0:	09 c1                	or     ecx,eax
c001dfa2:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001dfa6:	c1 e1 04             	shl    ecx,0x4
c001dfa9:	d4 40                	aam    0x40
c001dfab:	d5 39                	aad    0x39
c001dfad:	83 e8 30             	sub    eax,0x30
c001dfb0:	0f b6 c0             	movzx  eax,al
c001dfb3:	09 c8                	or     eax,ecx
c001dfb5:	89 c5                	mov    ebp,eax
c001dfb7:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001dfbb:	80 f9 44             	cmp    cl,0x44
c001dfbe:	74 47                	je     c001e007 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001dfc0:	88 c8                	mov    al,cl
c001dfc2:	d4 40                	aam    0x40
c001dfc4:	d5 39                	aad    0x39
c001dfc6:	83 e8 30             	sub    eax,0x30
c001dfc9:	0f b6 f8             	movzx  edi,al
c001dfcc:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001dfd0:	c1 e7 04             	shl    edi,0x4
c001dfd3:	d4 40                	aam    0x40
c001dfd5:	d5 39                	aad    0x39
c001dfd7:	8d 58 d0             	lea    ebx,[eax-0x30]
c001dfda:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001dfde:	0f b6 db             	movzx  ebx,bl
c001dfe1:	09 fb                	or     ebx,edi
c001dfe3:	c1 e3 04             	shl    ebx,0x4
c001dfe6:	d4 40                	aam    0x40
c001dfe8:	d5 39                	aad    0x39
c001dfea:	83 e8 30             	sub    eax,0x30
c001dfed:	0f b6 f8             	movzx  edi,al
c001dff0:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001dff4:	09 fb                	or     ebx,edi
c001dff6:	89 df                	mov    edi,ebx
c001dff8:	c1 e7 04             	shl    edi,0x4
c001dffb:	d4 40                	aam    0x40
c001dffd:	d5 39                	aad    0x39
c001dfff:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e002:	0f b6 db             	movzx  ebx,bl
c001e005:	09 fb                	or     ebx,edi
c001e007:	a1 c4 a7 02 c0       	mov    eax,ds:0xc002a7c4
c001e00c:	83 c6 10             	add    esi,0x10
c001e00f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e013:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e017:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e01a:	3c 0a                	cmp    al,0xa
c001e01c:	0f 85 a0 00 00 00    	jne    c001e0c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e022:	3c 0a                	cmp    al,0xa
c001e024:	0f 94 c0             	sete   al
c001e027:	0f b6 c0             	movzx  eax,al
c001e02a:	01 c6                	add    esi,eax
c001e02c:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e031:	0f 84 a2 00 00 00    	je     c001e0d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e037:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e03f:	0f 84 94 00 00 00    	je     c001e0d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e045:	39 35 c4 a7 02 c0    	cmp    DWORD PTR ds:0xc002a7c4,esi
c001e04b:	0f 8f bb fe ff ff    	jg     c001df0c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e051:	e9 e8 00 00 00       	jmp    c001e13e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e056:	83 ec 0c             	sub    esp,0xc
c001e059:	68 0a 70 02 c0       	push   0xc002700a
c001e05e:	e8 52 bd fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e063:	83 c4 10             	add    esp,0x10
c001e066:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e06d:	0f 85 a6 fe ff ff    	jne    c001df19 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e073:	e4 60                	in     al,0x60
c001e075:	3c 5a                	cmp    al,0x5a
c001e077:	74 04                	je     c001e07d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e079:	3c 1c                	cmp    al,0x1c
c001e07b:	75 f6                	jne    c001e073 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e07d:	e4 60                	in     al,0x60
c001e07f:	3c 5a                	cmp    al,0x5a
c001e081:	74 fa                	je     c001e07d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e083:	3c 1c                	cmp    al,0x1c
c001e085:	74 f6                	je     c001e07d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e087:	e9 8d fe ff ff       	jmp    c001df19 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e08c:	83 ec 0c             	sub    esp,0xc
c001e08f:	68 12 70 02 c0       	push   0xc0027012
c001e094:	e8 1c bd fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e099:	83 c4 10             	add    esp,0x10
c001e09c:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e0a3:	0f 85 90 fe ff ff    	jne    c001df39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e0a9:	e4 60                	in     al,0x60
c001e0ab:	3c 5a                	cmp    al,0x5a
c001e0ad:	74 04                	je     c001e0b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e0af:	3c 1c                	cmp    al,0x1c
c001e0b1:	75 f6                	jne    c001e0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e0b3:	e4 60                	in     al,0x60
c001e0b5:	3c 5a                	cmp    al,0x5a
c001e0b7:	74 fa                	je     c001e0b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e0b9:	3c 1c                	cmp    al,0x1c
c001e0bb:	74 f6                	je     c001e0b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e0bd:	e9 77 fe ff ff       	jmp    c001df39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e0c2:	47                   	inc    edi
c001e0c3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e0c7:	0f 84 55 ff ff ff    	je     c001e022 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e0cd:	46                   	inc    esi
c001e0ce:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e0d1:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e0d4:	e9 3e ff ff ff       	jmp    c001e017 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e0d9:	80 f9 44             	cmp    cl,0x44
c001e0dc:	74 0e                	je     c001e0ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e0de:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e0e6:	0f 85 59 ff ff ff    	jne    c001e045 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e0ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e0f0:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e0f4:	c1 e0 04             	shl    eax,0x4
c001e0f7:	83 ea 30             	sub    edx,0x30
c001e0fa:	09 d0                	or     eax,edx
c001e0fc:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e103:	0f 85 3c ff ff ff    	jne    c001e045 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e109:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e10d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e111:	c1 e2 04             	shl    edx,0x4
c001e114:	83 e8 30             	sub    eax,0x30
c001e117:	09 d0                	or     eax,edx
c001e119:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e120:	0f 85 1f ff ff ff    	jne    c001e045 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e126:	50                   	push   eax
c001e127:	50                   	push   eax
c001e128:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e12c:	50                   	push   eax
c001e12d:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e134:	e8 07 26 fe ff       	call   c0000740 <strcpy>
c001e139:	83 c4 10             	add    esp,0x10
c001e13c:	eb 15                	jmp    c001e153 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e13e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e145:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e150:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e153:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e15a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e160:	5b                   	pop    ebx
c001e161:	5e                   	pop    esi
c001e162:	5f                   	pop    edi
c001e163:	5d                   	pop    ebp
c001e164:	c3                   	ret    
c001e165:	90                   	nop

c001e166 <PCI::checkBus(unsigned char)>:
c001e166:	56                   	push   esi
c001e167:	53                   	push   ebx
c001e168:	31 db                	xor    ebx,ebx
c001e16a:	51                   	push   ecx
c001e16b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e170:	52                   	push   edx
c001e171:	53                   	push   ebx
c001e172:	43                   	inc    ebx
c001e173:	56                   	push   esi
c001e174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e178:	e8 bf 07 00 00       	call   c001e93c <PCI::checkDevice(unsigned char, unsigned char)>
c001e17d:	83 c4 10             	add    esp,0x10
c001e180:	83 fb 20             	cmp    ebx,0x20
c001e183:	75 eb                	jne    c001e170 <PCI::checkBus(unsigned char)+0xa>
c001e185:	58                   	pop    eax
c001e186:	5b                   	pop    ebx
c001e187:	5e                   	pop    esi
c001e188:	c3                   	ret    
c001e189:	90                   	nop

c001e18a <PCI::foundDevice(PCIDeviceInfo)>:
c001e18a:	55                   	push   ebp
c001e18b:	57                   	push   edi
c001e18c:	56                   	push   esi
c001e18d:	53                   	push   ebx
c001e18e:	83 ec 1c             	sub    esp,0x1c
c001e191:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e195:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e19b:	0f 84 20 04 00 00    	je     c001e5c1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e1a1:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e1a8:	75 37                	jne    c001e1e1 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e1aa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e1ae:	66 81 f9 06 04       	cmp    cx,0x406
c001e1b3:	75 5b                	jne    c001e210 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e1b5:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e1ba:	50                   	push   eax
c001e1bb:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e1c0:	50                   	push   eax
c001e1c1:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e1c6:	50                   	push   eax
c001e1c7:	53                   	push   ebx
c001e1c8:	e8 33 fa ff ff       	call   c001dc00 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e1cd:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e1d1:	0f b6 c0             	movzx  eax,al
c001e1d4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e1d8:	83 c4 2c             	add    esp,0x2c
c001e1db:	5b                   	pop    ebx
c001e1dc:	5e                   	pop    esi
c001e1dd:	5f                   	pop    edi
c001e1de:	5d                   	pop    ebp
c001e1df:	eb 85                	jmp    c001e166 <PCI::checkBus(unsigned char)>
c001e1e1:	83 ec 0c             	sub    esp,0xc
c001e1e4:	68 1b 70 02 c0       	push   0xc002701b
c001e1e9:	e8 c7 bb fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e1ee:	83 c4 10             	add    esp,0x10
c001e1f1:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e1f8:	75 b0                	jne    c001e1aa <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e1fa:	e4 60                	in     al,0x60
c001e1fc:	3c 5a                	cmp    al,0x5a
c001e1fe:	74 04                	je     c001e204 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e200:	3c 1c                	cmp    al,0x1c
c001e202:	75 f6                	jne    c001e1fa <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e204:	e4 60                	in     al,0x60
c001e206:	3c 5a                	cmp    al,0x5a
c001e208:	74 fa                	je     c001e204 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e20a:	3c 1c                	cmp    al,0x1c
c001e20c:	74 f6                	je     c001e204 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e20e:	eb 9a                	jmp    c001e1aa <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e210:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e216:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e21a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e21e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e222:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e226:	88 d0                	mov    al,dl
c001e228:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e22d:	74 3b                	je     c001e26a <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e22f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e233:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e236:	85 d2                	test   edx,edx
c001e238:	74 24                	je     c001e25e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e23a:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e240:	31 ef                	xor    edi,ebp
c001e242:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e248:	75 14                	jne    c001e25e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e24a:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e250:	75 0c                	jne    c001e25e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e252:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e258:	0f 84 63 03 00 00    	je     c001e5c1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e25e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e262:	8b 12                	mov    edx,DWORD PTR [edx]
c001e264:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e268:	eb be                	jmp    c001e228 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e26a:	66 81 f9 01 06       	cmp    cx,0x601
c001e26f:	0f 85 81 01 00 00    	jne    c001e3f6 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e275:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e27c:	75 25                	jne    c001e2a3 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e27e:	83 ec 0c             	sub    esp,0xc
c001e281:	68 64 01 00 00       	push   0x164
c001e286:	e8 d0 ba fe ff       	call   c0009d5b <malloc>
c001e28b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e28e:	89 c5                	mov    ebp,eax
c001e290:	e8 b7 12 00 00       	call   c001f54c <SATABus::SATABus()>
c001e295:	83 c4 10             	add    esp,0x10
c001e298:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e29f:	74 4a                	je     c001e2eb <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e2a1:	eb 2f                	jmp    c001e2d2 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e2a3:	83 ec 0c             	sub    esp,0xc
c001e2a6:	68 2b 70 02 c0       	push   0xc002702b
c001e2ab:	e8 05 bb fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e2b0:	83 c4 10             	add    esp,0x10
c001e2b3:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e2ba:	75 c2                	jne    c001e27e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e2bc:	e4 60                	in     al,0x60
c001e2be:	3c 1c                	cmp    al,0x1c
c001e2c0:	74 04                	je     c001e2c6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e2c2:	3c 5a                	cmp    al,0x5a
c001e2c4:	75 f6                	jne    c001e2bc <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e2c6:	e4 60                	in     al,0x60
c001e2c8:	3c 5a                	cmp    al,0x5a
c001e2ca:	74 fa                	je     c001e2c6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e2cc:	3c 1c                	cmp    al,0x1c
c001e2ce:	74 f6                	je     c001e2c6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e2d0:	eb ac                	jmp    c001e27e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e2d2:	83 ec 0c             	sub    esp,0xc
c001e2d5:	68 31 70 02 c0       	push   0xc0027031
c001e2da:	e8 d6 ba fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e2df:	83 c4 10             	add    esp,0x10
c001e2e2:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e2e9:	74 1b                	je     c001e306 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e2eb:	50                   	push   eax
c001e2ec:	50                   	push   eax
c001e2ed:	55                   	push   ebp
c001e2ee:	53                   	push   ebx
c001e2ef:	e8 c6 02 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c001e2f4:	83 c4 10             	add    esp,0x10
c001e2f7:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e2fe:	74 33                	je     c001e333 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e300:	eb 18                	jmp    c001e31a <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e302:	3c 1c                	cmp    al,0x1c
c001e304:	74 0c                	je     c001e312 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e306:	e4 60                	in     al,0x60
c001e308:	3c 5a                	cmp    al,0x5a
c001e30a:	75 f6                	jne    c001e302 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e30c:	eb 04                	jmp    c001e312 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e30e:	3c 1c                	cmp    al,0x1c
c001e310:	75 d9                	jne    c001e2eb <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e312:	e4 60                	in     al,0x60
c001e314:	3c 5a                	cmp    al,0x5a
c001e316:	74 fa                	je     c001e312 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e318:	eb f4                	jmp    c001e30e <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e31a:	83 ec 0c             	sub    esp,0xc
c001e31d:	68 39 70 02 c0       	push   0xc0027039
c001e322:	e8 8e ba fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e327:	83 c4 10             	add    esp,0x10
c001e32a:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e331:	74 29                	je     c001e35c <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e333:	83 ec 2c             	sub    esp,0x2c
c001e336:	b9 09 00 00 00       	mov    ecx,0x9
c001e33b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e33f:	fc                   	cld    
c001e340:	89 e7                	mov    edi,esp
c001e342:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e344:	55                   	push   ebp
c001e345:	e8 82 01 ff ff       	call   c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e34a:	83 c4 30             	add    esp,0x30
c001e34d:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e354:	74 33                	je     c001e389 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e356:	eb 18                	jmp    c001e370 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e358:	3c 1c                	cmp    al,0x1c
c001e35a:	74 0c                	je     c001e368 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e35c:	e4 60                	in     al,0x60
c001e35e:	3c 5a                	cmp    al,0x5a
c001e360:	75 f6                	jne    c001e358 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e362:	eb 04                	jmp    c001e368 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e364:	3c 1c                	cmp    al,0x1c
c001e366:	75 cb                	jne    c001e333 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e368:	e4 60                	in     al,0x60
c001e36a:	3c 5a                	cmp    al,0x5a
c001e36c:	74 fa                	je     c001e368 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e36e:	eb f4                	jmp    c001e364 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e370:	83 ec 0c             	sub    esp,0xc
c001e373:	68 41 70 02 c0       	push   0xc0027041
c001e378:	e8 38 ba fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e37d:	83 c4 10             	add    esp,0x10
c001e380:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e387:	74 23                	je     c001e3ac <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e389:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e38c:	6a 00                	push   0x0
c001e38e:	6a 00                	push   0x0
c001e390:	6a 00                	push   0x0
c001e392:	55                   	push   ebp
c001e393:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e396:	83 c4 10             	add    esp,0x10
c001e399:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e3a0:	0f 84 1b 02 00 00    	je     c001e5c1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e3a6:	eb 18                	jmp    c001e3c0 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e3a8:	3c 1c                	cmp    al,0x1c
c001e3aa:	74 0c                	je     c001e3b8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e3ac:	e4 60                	in     al,0x60
c001e3ae:	3c 5a                	cmp    al,0x5a
c001e3b0:	75 f6                	jne    c001e3a8 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e3b2:	eb 04                	jmp    c001e3b8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e3b4:	3c 1c                	cmp    al,0x1c
c001e3b6:	75 d1                	jne    c001e389 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e3b8:	e4 60                	in     al,0x60
c001e3ba:	3c 5a                	cmp    al,0x5a
c001e3bc:	74 fa                	je     c001e3b8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e3be:	eb f4                	jmp    c001e3b4 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e3c0:	83 ec 0c             	sub    esp,0xc
c001e3c3:	68 49 70 02 c0       	push   0xc0027049
c001e3c8:	e8 e8 b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e3cd:	83 c4 10             	add    esp,0x10
c001e3d0:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e3d7:	0f 85 e4 01 00 00    	jne    c001e5c1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e3dd:	e4 60                	in     al,0x60
c001e3df:	3c 5a                	cmp    al,0x5a
c001e3e1:	74 04                	je     c001e3e7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e3e3:	3c 1c                	cmp    al,0x1c
c001e3e5:	75 f6                	jne    c001e3dd <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e3e7:	e4 60                	in     al,0x60
c001e3e9:	3c 5a                	cmp    al,0x5a
c001e3eb:	74 fa                	je     c001e3e7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e3ed:	3c 1c                	cmp    al,0x1c
c001e3ef:	74 f6                	je     c001e3e7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e3f1:	e9 cb 01 00 00       	jmp    c001e5c1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e3f6:	66 81 f9 01 01       	cmp    cx,0x101
c001e3fb:	0f 85 7a 01 00 00    	jne    c001e57b <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e401:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e408:	75 25                	jne    c001e42f <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e40a:	83 ec 0c             	sub    esp,0xc
c001e40d:	68 70 02 00 00       	push   0x270
c001e412:	e8 44 b9 fe ff       	call   c0009d5b <malloc>
c001e417:	89 04 24             	mov    DWORD PTR [esp],eax
c001e41a:	89 c5                	mov    ebp,eax
c001e41c:	e8 df 05 00 00       	call   c001ea00 <IDE::IDE()>
c001e421:	83 c4 10             	add    esp,0x10
c001e424:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e42b:	74 4a                	je     c001e477 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e42d:	eb 2f                	jmp    c001e45e <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e42f:	83 ec 0c             	sub    esp,0xc
c001e432:	68 51 70 02 c0       	push   0xc0027051
c001e437:	e8 79 b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e43c:	83 c4 10             	add    esp,0x10
c001e43f:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e446:	75 c2                	jne    c001e40a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e448:	e4 60                	in     al,0x60
c001e44a:	3c 5a                	cmp    al,0x5a
c001e44c:	74 04                	je     c001e452 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e44e:	3c 1c                	cmp    al,0x1c
c001e450:	75 f6                	jne    c001e448 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e452:	e4 60                	in     al,0x60
c001e454:	3c 5a                	cmp    al,0x5a
c001e456:	74 fa                	je     c001e452 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e458:	3c 1c                	cmp    al,0x1c
c001e45a:	74 f6                	je     c001e452 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e45c:	eb ac                	jmp    c001e40a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e45e:	83 ec 0c             	sub    esp,0xc
c001e461:	68 58 70 02 c0       	push   0xc0027058
c001e466:	e8 4a b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e46b:	83 c4 10             	add    esp,0x10
c001e46e:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e475:	74 1b                	je     c001e492 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e477:	57                   	push   edi
c001e478:	57                   	push   edi
c001e479:	55                   	push   ebp
c001e47a:	53                   	push   ebx
c001e47b:	e8 3a 01 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c001e480:	83 c4 10             	add    esp,0x10
c001e483:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e48a:	74 33                	je     c001e4bf <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e48c:	eb 18                	jmp    c001e4a6 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e48e:	3c 1c                	cmp    al,0x1c
c001e490:	74 0c                	je     c001e49e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e492:	e4 60                	in     al,0x60
c001e494:	3c 5a                	cmp    al,0x5a
c001e496:	75 f6                	jne    c001e48e <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e498:	eb 04                	jmp    c001e49e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e49a:	3c 1c                	cmp    al,0x1c
c001e49c:	75 d9                	jne    c001e477 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e49e:	e4 60                	in     al,0x60
c001e4a0:	3c 5a                	cmp    al,0x5a
c001e4a2:	74 fa                	je     c001e49e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e4a4:	eb f4                	jmp    c001e49a <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e4a6:	83 ec 0c             	sub    esp,0xc
c001e4a9:	68 5f 70 02 c0       	push   0xc002705f
c001e4ae:	e8 02 b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e4b3:	83 c4 10             	add    esp,0x10
c001e4b6:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e4bd:	74 29                	je     c001e4e8 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e4bf:	83 ec 2c             	sub    esp,0x2c
c001e4c2:	b9 09 00 00 00       	mov    ecx,0x9
c001e4c7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e4cb:	fc                   	cld    
c001e4cc:	89 e7                	mov    edi,esp
c001e4ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e4d0:	55                   	push   ebp
c001e4d1:	e8 f6 ff fe ff       	call   c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e4d6:	83 c4 30             	add    esp,0x30
c001e4d9:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e4e0:	74 33                	je     c001e515 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e4e2:	eb 18                	jmp    c001e4fc <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e4e4:	3c 1c                	cmp    al,0x1c
c001e4e6:	74 0c                	je     c001e4f4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e4e8:	e4 60                	in     al,0x60
c001e4ea:	3c 5a                	cmp    al,0x5a
c001e4ec:	75 f6                	jne    c001e4e4 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e4ee:	eb 04                	jmp    c001e4f4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e4f0:	3c 1c                	cmp    al,0x1c
c001e4f2:	75 cb                	jne    c001e4bf <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e4f4:	e4 60                	in     al,0x60
c001e4f6:	3c 5a                	cmp    al,0x5a
c001e4f8:	74 fa                	je     c001e4f4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e4fa:	eb f4                	jmp    c001e4f0 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e4fc:	83 ec 0c             	sub    esp,0xc
c001e4ff:	68 66 70 02 c0       	push   0xc0027066
c001e504:	e8 ac b8 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e509:	83 c4 10             	add    esp,0x10
c001e50c:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e513:	74 23                	je     c001e538 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e515:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e518:	6a 00                	push   0x0
c001e51a:	6a 00                	push   0x0
c001e51c:	6a 00                	push   0x0
c001e51e:	55                   	push   ebp
c001e51f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e522:	83 c4 10             	add    esp,0x10
c001e525:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e52c:	0f 84 8f 00 00 00    	je     c001e5c1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e532:	eb 18                	jmp    c001e54c <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e534:	3c 1c                	cmp    al,0x1c
c001e536:	74 0c                	je     c001e544 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e538:	e4 60                	in     al,0x60
c001e53a:	3c 5a                	cmp    al,0x5a
c001e53c:	75 f6                	jne    c001e534 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e53e:	eb 04                	jmp    c001e544 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e540:	3c 1c                	cmp    al,0x1c
c001e542:	75 d1                	jne    c001e515 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e544:	e4 60                	in     al,0x60
c001e546:	3c 5a                	cmp    al,0x5a
c001e548:	74 fa                	je     c001e544 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e54a:	eb f4                	jmp    c001e540 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e54c:	83 ec 0c             	sub    esp,0xc
c001e54f:	68 6d 70 02 c0       	push   0xc002706d
c001e554:	e8 5c b8 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e559:	83 c4 10             	add    esp,0x10
c001e55c:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e563:	75 5c                	jne    c001e5c1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e565:	e4 60                	in     al,0x60
c001e567:	3c 5a                	cmp    al,0x5a
c001e569:	74 04                	je     c001e56f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e56b:	3c 1c                	cmp    al,0x1c
c001e56d:	75 f6                	jne    c001e565 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e56f:	e4 60                	in     al,0x60
c001e571:	3c 5a                	cmp    al,0x5a
c001e573:	74 fa                	je     c001e56f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e575:	3c 1c                	cmp    al,0x1c
c001e577:	74 f6                	je     c001e56f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e579:	eb 46                	jmp    c001e5c1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e57b:	83 ec 0c             	sub    esp,0xc
c001e57e:	68 58 01 00 00       	push   0x158
c001e583:	e8 d3 b7 fe ff       	call   c0009d5b <malloc>
c001e588:	89 c5                	mov    ebp,eax
c001e58a:	58                   	pop    eax
c001e58b:	5a                   	pop    edx
c001e58c:	68 74 70 02 c0       	push   0xc0027074
c001e591:	55                   	push   ebp
c001e592:	e8 2d 03 ff ff       	call   c000e8c4 <DriverlessDevice::DriverlessDevice(char const*)>
c001e597:	59                   	pop    ecx
c001e598:	5e                   	pop    esi
c001e599:	55                   	push   ebp
c001e59a:	53                   	push   ebx
c001e59b:	e8 1a 00 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c001e5a0:	83 c4 10             	add    esp,0x10
c001e5a3:	b9 09 00 00 00       	mov    ecx,0x9
c001e5a8:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e5ac:	fc                   	cld    
c001e5ad:	89 fe                	mov    esi,edi
c001e5af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e5b1:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e5b5:	83 c4 1c             	add    esp,0x1c
c001e5b8:	5b                   	pop    ebx
c001e5b9:	5e                   	pop    esi
c001e5ba:	5f                   	pop    edi
c001e5bb:	5d                   	pop    ebp
c001e5bc:	e9 0b ff fe ff       	jmp    c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e5c1:	83 c4 1c             	add    esp,0x1c
c001e5c4:	5b                   	pop    ebx
c001e5c5:	5e                   	pop    esi
c001e5c6:	5f                   	pop    edi
c001e5c7:	5d                   	pop    ebp
c001e5c8:	c3                   	ret    
c001e5c9:	90                   	nop

c001e5ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e5ca:	55                   	push   ebp
c001e5cb:	57                   	push   edi
c001e5cc:	56                   	push   esi
c001e5cd:	53                   	push   ebx
c001e5ce:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e5d4:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e5db:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e5e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e5e6:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e5ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e5f1:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e5f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e5fc:	68 8e 70 02 c0       	push   0xc002708e
c001e601:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e605:	53                   	push   ebx
c001e606:	e8 35 21 fe ff       	call   c0000740 <strcpy>
c001e60b:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e610:	b2 64                	mov    dl,0x64
c001e612:	89 c8                	mov    eax,ecx
c001e614:	f6 f2                	div    dl
c001e616:	b2 0a                	mov    dl,0xa
c001e618:	83 c0 30             	add    eax,0x30
c001e61b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e61f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e623:	83 c4 10             	add    esp,0x10
c001e626:	89 c8                	mov    eax,ecx
c001e628:	f6 f2                	div    dl
c001e62a:	89 c1                	mov    ecx,eax
c001e62c:	0f b6 c0             	movzx  eax,al
c001e62f:	88 e9                	mov    cl,ch
c001e631:	f6 f2                	div    dl
c001e633:	88 e0                	mov    al,ah
c001e635:	83 c0 30             	add    eax,0x30
c001e638:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e63c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e640:	8d 41 30             	lea    eax,[ecx+0x30]
c001e643:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e647:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e64b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e650:	f6 f2                	div    dl
c001e652:	89 c1                	mov    ecx,eax
c001e654:	0f b6 c0             	movzx  eax,al
c001e657:	88 e9                	mov    cl,ch
c001e659:	f6 f2                	div    dl
c001e65b:	88 e0                	mov    al,ah
c001e65d:	83 c0 30             	add    eax,0x30
c001e660:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e664:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e668:	8d 41 30             	lea    eax,[ecx+0x30]
c001e66b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e66f:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e673:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e678:	f6 f2                	div    dl
c001e67a:	89 c1                	mov    ecx,eax
c001e67c:	0f b6 c0             	movzx  eax,al
c001e67f:	88 e9                	mov    cl,ch
c001e681:	f6 f2                	div    dl
c001e683:	88 e0                	mov    al,ah
c001e685:	83 c0 30             	add    eax,0x30
c001e688:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e68f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e693:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e697:	8d 41 30             	lea    eax,[ecx+0x30]
c001e69a:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e69e:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e6a2:	74 29                	je     c001e6cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e6a4:	83 ec 0c             	sub    esp,0xc
c001e6a7:	53                   	push   ebx
c001e6a8:	e8 08 b7 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e6ad:	83 c4 10             	add    esp,0x10
c001e6b0:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e6b7:	75 14                	jne    c001e6cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e6b9:	e4 60                	in     al,0x60
c001e6bb:	3c 1c                	cmp    al,0x1c
c001e6bd:	74 04                	je     c001e6c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e6bf:	3c 5a                	cmp    al,0x5a
c001e6c1:	75 f6                	jne    c001e6b9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e6c3:	e4 60                	in     al,0x60
c001e6c5:	3c 5a                	cmp    al,0x5a
c001e6c7:	74 fa                	je     c001e6c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e6c9:	3c 1c                	cmp    al,0x1c
c001e6cb:	74 f6                	je     c001e6c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e6cd:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e6d2:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e6d7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e6dc:	83 ec 0c             	sub    esp,0xc
c001e6df:	6a 0c                	push   0xc
c001e6e1:	56                   	push   esi
c001e6e2:	53                   	push   ebx
c001e6e3:	57                   	push   edi
c001e6e4:	55                   	push   ebp
c001e6e5:	e8 68 f3 ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e6ea:	83 c4 20             	add    esp,0x20
c001e6ed:	56                   	push   esi
c001e6ee:	53                   	push   ebx
c001e6ef:	57                   	push   edi
c001e6f0:	55                   	push   ebp
c001e6f1:	e8 50 f4 ff ff       	call   c001db46 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e6f6:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e6fb:	56                   	push   esi
c001e6fc:	53                   	push   ebx
c001e6fd:	57                   	push   edi
c001e6fe:	55                   	push   ebp
c001e6ff:	e8 d8 f4 ff ff       	call   c001dbdc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e704:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e708:	83 c4 14             	add    esp,0x14
c001e70b:	6a 3c                	push   0x3c
c001e70d:	56                   	push   esi
c001e70e:	53                   	push   ebx
c001e70f:	57                   	push   edi
c001e710:	55                   	push   ebp
c001e711:	e8 3c f3 ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e716:	0f b6 c4             	movzx  eax,ah
c001e719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e71d:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e721:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e728:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c001e72d:	83 c4 20             	add    esp,0x20
c001e730:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e736:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e73d:	0f 84 38 01 00 00    	je     c001e87b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e74b:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c001e750:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e754:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e75a:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e760:	0f 8e 15 01 00 00    	jle    c001e87b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e766:	50                   	push   eax
c001e767:	50                   	push   eax
c001e768:	68 a9 70 02 c0       	push   0xc00270a9
c001e76d:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e771:	50                   	push   eax
c001e772:	e8 c9 1f fe ff       	call   c0000740 <strcpy>
c001e777:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e77b:	b9 0a 00 00 00       	mov    ecx,0xa
c001e780:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e784:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e788:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e78c:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e790:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e794:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e798:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e79c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e7a0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e7a4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e7a8:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e7ac:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e7b0:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e7b4:	83 c4 10             	add    esp,0x10
c001e7b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7bb:	99                   	cdq    
c001e7bc:	f7 f9                	idiv   ecx
c001e7be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e7c2:	99                   	cdq    
c001e7c3:	f7 f9                	idiv   ecx
c001e7c5:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e7c9:	83 c2 30             	add    edx,0x30
c001e7cc:	83 c0 30             	add    eax,0x30
c001e7cf:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e7d3:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e7d7:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001e7de:	74 2d                	je     c001e80d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e7e0:	83 ec 0c             	sub    esp,0xc
c001e7e3:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e7e7:	50                   	push   eax
c001e7e8:	e8 c8 b5 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e7ed:	83 c4 10             	add    esp,0x10
c001e7f0:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001e7f7:	75 14                	jne    c001e80d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e7f9:	e4 60                	in     al,0x60
c001e7fb:	3c 5a                	cmp    al,0x5a
c001e7fd:	74 04                	je     c001e803 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e7ff:	3c 1c                	cmp    al,0x1c
c001e801:	75 f6                	jne    c001e7f9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e803:	e4 60                	in     al,0x60
c001e805:	3c 5a                	cmp    al,0x5a
c001e807:	74 fa                	je     c001e803 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e809:	3c 1c                	cmp    al,0x1c
c001e80b:	74 f6                	je     c001e803 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e80d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e811:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c001e816:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e81c:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e81f:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e826:	39 d3                	cmp    ebx,edx
c001e828:	75 48                	jne    c001e872 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e82a:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e831:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e835:	75 3b                	jne    c001e872 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e837:	83 ec 0c             	sub    esp,0xc
c001e83a:	68 d8 70 02 c0       	push   0xc00270d8
c001e83f:	e8 03 e8 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001e844:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e848:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c001e84d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e853:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e85b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e85f:	50                   	push   eax
c001e860:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e864:	53                   	push   ebx
c001e865:	68 fd 70 02 c0       	push   0xc00270fd
c001e86a:	e8 d8 e7 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001e86f:	83 c4 20             	add    esp,0x20
c001e872:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e876:	e9 d0 fe ff ff       	jmp    c001e74b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e87b:	31 d2                	xor    edx,edx
c001e87d:	83 ec 0c             	sub    esp,0xc
c001e880:	56                   	push   esi
c001e881:	53                   	push   ebx
c001e882:	57                   	push   edi
c001e883:	52                   	push   edx
c001e884:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e888:	55                   	push   ebp
c001e889:	e8 9a f3 ff ff       	call   c001dc28 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e88e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e892:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e899:	42                   	inc    edx
c001e89a:	83 c4 20             	add    esp,0x20
c001e89d:	83 fa 06             	cmp    edx,0x6
c001e8a0:	75 db                	jne    c001e87d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e8a2:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e8a7:	83 ec 0c             	sub    esp,0xc
c001e8aa:	86 e0                	xchg   al,ah
c001e8ac:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e8b4:	6a 02                	push   0x2
c001e8b6:	56                   	push   esi
c001e8b7:	53                   	push   ebx
c001e8b8:	57                   	push   edi
c001e8b9:	55                   	push   ebp
c001e8ba:	e8 93 f1 ff ff       	call   c001da52 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e8bf:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e8c7:	83 c4 20             	add    esp,0x20
c001e8ca:	56                   	push   esi
c001e8cb:	53                   	push   ebx
c001e8cc:	57                   	push   edi
c001e8cd:	55                   	push   ebp
c001e8ce:	e8 bd f2 ff ff       	call   c001db90 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e8d3:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e8da:	56                   	push   esi
c001e8db:	53                   	push   ebx
c001e8dc:	57                   	push   edi
c001e8dd:	55                   	push   ebp
c001e8de:	e8 17 f2 ff ff       	call   c001dafa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e8e3:	b9 09 00 00 00       	mov    ecx,0x9
c001e8e8:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e8f0:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e8f4:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e8fb:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e8ff:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e906:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e90a:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e911:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e915:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e91c:	83 ec 0c             	sub    esp,0xc
c001e91f:	fc                   	cld    
c001e920:	89 e7                	mov    edi,esp
c001e922:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e929:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e92b:	55                   	push   ebp
c001e92c:	e8 59 f8 ff ff       	call   c001e18a <PCI::foundDevice(PCIDeviceInfo)>
c001e931:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e937:	5b                   	pop    ebx
c001e938:	5e                   	pop    esi
c001e939:	5f                   	pop    edi
c001e93a:	5d                   	pop    ebp
c001e93b:	c3                   	ret    

c001e93c <PCI::checkDevice(unsigned char, unsigned char)>:
c001e93c:	55                   	push   ebp
c001e93d:	57                   	push   edi
c001e93e:	56                   	push   esi
c001e93f:	53                   	push   ebx
c001e940:	83 ec 0c             	sub    esp,0xc
c001e943:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e947:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e94c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e951:	6a 00                	push   0x0
c001e953:	56                   	push   esi
c001e954:	57                   	push   edi
c001e955:	55                   	push   ebp
c001e956:	e8 9f f1 ff ff       	call   c001dafa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e95b:	6a 00                	push   0x0
c001e95d:	56                   	push   esi
c001e95e:	57                   	push   edi
c001e95f:	55                   	push   ebp
c001e960:	e8 65 fc ff ff       	call   c001e5ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e965:	83 c4 20             	add    esp,0x20
c001e968:	6a 00                	push   0x0
c001e96a:	56                   	push   esi
c001e96b:	57                   	push   edi
c001e96c:	55                   	push   ebp
c001e96d:	e8 ac f1 ff ff       	call   c001db1e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e972:	83 c4 10             	add    esp,0x10
c001e975:	84 c0                	test   al,al
c001e977:	79 27                	jns    c001e9a0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e979:	bb 01 00 00 00       	mov    ebx,0x1
c001e97e:	53                   	push   ebx
c001e97f:	56                   	push   esi
c001e980:	57                   	push   edi
c001e981:	55                   	push   ebp
c001e982:	e8 73 f1 ff ff       	call   c001dafa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e987:	83 c4 10             	add    esp,0x10
c001e98a:	66 40                	inc    ax
c001e98c:	74 0c                	je     c001e99a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e98e:	53                   	push   ebx
c001e98f:	56                   	push   esi
c001e990:	57                   	push   edi
c001e991:	55                   	push   ebp
c001e992:	e8 33 fc ff ff       	call   c001e5ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e997:	83 c4 10             	add    esp,0x10
c001e99a:	43                   	inc    ebx
c001e99b:	83 fb 08             	cmp    ebx,0x8
c001e99e:	75 de                	jne    c001e97e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e9a0:	83 c4 0c             	add    esp,0xc
c001e9a3:	5b                   	pop    ebx
c001e9a4:	5e                   	pop    esi
c001e9a5:	5f                   	pop    edi
c001e9a6:	5d                   	pop    ebp
c001e9a7:	c3                   	ret    

c001e9a8 <PCI::detect()>:
c001e9a8:	56                   	push   esi
c001e9a9:	53                   	push   ebx
c001e9aa:	53                   	push   ebx
c001e9ab:	31 db                	xor    ebx,ebx
c001e9ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e9b1:	6a 00                	push   0x0
c001e9b3:	6a 00                	push   0x0
c001e9b5:	6a 00                	push   0x0
c001e9b7:	56                   	push   esi
c001e9b8:	e8 61 f1 ff ff       	call   c001db1e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	a8 80                	test   al,0x80
c001e9c2:	75 21                	jne    c001e9e5 <PCI::detect()+0x3d>
c001e9c4:	51                   	push   ecx
c001e9c5:	51                   	push   ecx
c001e9c6:	6a 00                	push   0x0
c001e9c8:	56                   	push   esi
c001e9c9:	e8 98 f7 ff ff       	call   c001e166 <PCI::checkBus(unsigned char)>
c001e9ce:	83 c4 10             	add    esp,0x10
c001e9d1:	eb 24                	jmp    c001e9f7 <PCI::detect()+0x4f>
c001e9d3:	52                   	push   edx
c001e9d4:	52                   	push   edx
c001e9d5:	53                   	push   ebx
c001e9d6:	43                   	inc    ebx
c001e9d7:	56                   	push   esi
c001e9d8:	e8 89 f7 ff ff       	call   c001e166 <PCI::checkBus(unsigned char)>
c001e9dd:	83 c4 10             	add    esp,0x10
c001e9e0:	83 fb 08             	cmp    ebx,0x8
c001e9e3:	74 12                	je     c001e9f7 <PCI::detect()+0x4f>
c001e9e5:	53                   	push   ebx
c001e9e6:	6a 00                	push   0x0
c001e9e8:	6a 00                	push   0x0
c001e9ea:	56                   	push   esi
c001e9eb:	e8 0a f1 ff ff       	call   c001dafa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e9f0:	83 c4 10             	add    esp,0x10
c001e9f3:	66 40                	inc    ax
c001e9f5:	74 dc                	je     c001e9d3 <PCI::detect()+0x2b>
c001e9f7:	58                   	pop    eax
c001e9f8:	5b                   	pop    ebx
c001e9f9:	5e                   	pop    esi
c001e9fa:	c3                   	ret    
c001e9fb:	90                   	nop

c001e9fc <IDE::close(int, int, void*)>:
c001e9fc:	83 c8 ff             	or     eax,0xffffffff
c001e9ff:	c3                   	ret    

c001ea00 <IDE::IDE()>:
c001ea00:	83 ec 0c             	sub    esp,0xc
c001ea03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea07:	83 ec 08             	sub    esp,0x8
c001ea0a:	68 44 71 02 c0       	push   0xc0027144
c001ea0f:	50                   	push   eax
c001ea10:	e8 53 ff fe ff       	call   c000e968 <HardDiskController::HardDiskController(char const*)>
c001ea15:	83 c4 10             	add    esp,0x10
c001ea18:	ba d4 71 02 c0       	mov    edx,0xc00271d4
c001ea1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea21:	89 10                	mov    DWORD PTR [eax],edx
c001ea23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea27:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ea2e:	90                   	nop
c001ea2f:	83 c4 0c             	add    esp,0xc
c001ea32:	c3                   	ret    
c001ea33:	90                   	nop

c001ea34 <IDE::prepareInterrupt(unsigned char)>:
c001ea34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ea39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea3d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ea45:	c3                   	ret    

c001ea46 <selectDrive(unsigned char, unsigned char)>:
c001ea46:	c3                   	ret    
c001ea47:	90                   	nop

c001ea48 <IDE::getBase(unsigned char)>:
c001ea48:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ea4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea51:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ea59:	c3                   	ret    

c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ea5a:	55                   	push   ebp
c001ea5b:	57                   	push   edi
c001ea5c:	56                   	push   esi
c001ea5d:	53                   	push   ebx
c001ea5e:	83 ec 1c             	sub    esp,0x1c
c001ea61:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea69:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ea6c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ea70:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ea74:	80 f9 03             	cmp    cl,0x3
c001ea77:	77 51                	ja     c001eaca <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001ea79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea7d:	0f b6 f2             	movzx  esi,dl
c001ea80:	0f b6 db             	movzx  ebx,bl
c001ea83:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ea86:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001ea8a:	83 ca 80             	or     edx,0xffffff80
c001ea8d:	0f b6 d2             	movzx  edx,dl
c001ea90:	52                   	push   edx
c001ea91:	6a 0c                	push   0xc
c001ea93:	56                   	push   esi
c001ea94:	57                   	push   edi
c001ea95:	e8 c0 ff ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea9a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ea9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eaa3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001eaa7:	ee                   	out    dx,al
c001eaa8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001eaad:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001eab1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001eab5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eab9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eac1:	83 c4 2c             	add    esp,0x2c
c001eac4:	5b                   	pop    ebx
c001eac5:	5e                   	pop    esi
c001eac6:	5f                   	pop    edi
c001eac7:	5d                   	pop    ebp
c001eac8:	eb 90                	jmp    c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eaca:	80 fb 07             	cmp    bl,0x7
c001eacd:	77 12                	ja     c001eae1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001eacf:	0f b6 d2             	movzx  edx,dl
c001ead2:	0f b6 db             	movzx  ebx,bl
c001ead5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001eadd:	89 da                	mov    edx,ebx
c001eadf:	eb 2f                	jmp    c001eb10 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001eae1:	80 fb 0d             	cmp    bl,0xd
c001eae4:	77 13                	ja     c001eaf9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001eae6:	0f b6 d2             	movzx  edx,dl
c001eae9:	0f b6 db             	movzx  ebx,bl
c001eaec:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001eaf3:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001eaf7:	eb 17                	jmp    c001eb10 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001eaf9:	80 fb 15             	cmp    bl,0x15
c001eafc:	77 13                	ja     c001eb11 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001eafe:	0f b6 d2             	movzx  edx,dl
c001eb01:	0f b6 db             	movzx  ebx,bl
c001eb04:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001eb0c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001eb10:	ee                   	out    dx,al
c001eb11:	83 c4 1c             	add    esp,0x1c
c001eb14:	5b                   	pop    ebx
c001eb15:	5e                   	pop    esi
c001eb16:	5f                   	pop    edi
c001eb17:	5d                   	pop    ebp
c001eb18:	c3                   	ret    
c001eb19:	90                   	nop

c001eb1a <IDE::read(unsigned char, unsigned char)>:
c001eb1a:	55                   	push   ebp
c001eb1b:	57                   	push   edi
c001eb1c:	56                   	push   esi
c001eb1d:	53                   	push   ebx
c001eb1e:	83 ec 1c             	sub    esp,0x1c
c001eb21:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eb25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eb29:	8d 43 f8             	lea    eax,[ebx-0x8]
c001eb2c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eb30:	3c 03                	cmp    al,0x3
c001eb32:	77 43                	ja     c001eb77 <IDE::read(unsigned char, unsigned char)+0x5d>
c001eb34:	0f b6 f2             	movzx  esi,dl
c001eb37:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001eb3a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001eb3e:	83 c8 80             	or     eax,0xffffff80
c001eb41:	0f b6 c0             	movzx  eax,al
c001eb44:	50                   	push   eax
c001eb45:	6a 0c                	push   0xc
c001eb47:	56                   	push   esi
c001eb48:	57                   	push   edi
c001eb49:	e8 0c ff ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb4e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001eb53:	0f b6 c3             	movzx  eax,bl
c001eb56:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001eb5a:	ec                   	in     al,dx
c001eb5b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001eb5f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001eb64:	52                   	push   edx
c001eb65:	6a 0c                	push   0xc
c001eb67:	56                   	push   esi
c001eb68:	57                   	push   edi
c001eb69:	e8 ec fe ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb6e:	83 c4 20             	add    esp,0x20
c001eb71:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001eb75:	eb 49                	jmp    c001ebc0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001eb77:	80 fb 07             	cmp    bl,0x7
c001eb7a:	77 12                	ja     c001eb8e <IDE::read(unsigned char, unsigned char)+0x74>
c001eb7c:	0f b6 d2             	movzx  edx,dl
c001eb7f:	0f b6 c3             	movzx  eax,bl
c001eb82:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001eb8a:	89 c2                	mov    edx,eax
c001eb8c:	eb 31                	jmp    c001ebbf <IDE::read(unsigned char, unsigned char)+0xa5>
c001eb8e:	80 fb 0d             	cmp    bl,0xd
c001eb91:	77 13                	ja     c001eba6 <IDE::read(unsigned char, unsigned char)+0x8c>
c001eb93:	0f b6 d2             	movzx  edx,dl
c001eb96:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001eb9d:	0f b6 d3             	movzx  edx,bl
c001eba0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001eba4:	eb 19                	jmp    c001ebbf <IDE::read(unsigned char, unsigned char)+0xa5>
c001eba6:	31 c0                	xor    eax,eax
c001eba8:	80 fb 15             	cmp    bl,0x15
c001ebab:	77 13                	ja     c001ebc0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ebad:	0f b6 d2             	movzx  edx,dl
c001ebb0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ebb8:	0f b6 d3             	movzx  edx,bl
c001ebbb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ebbf:	ec                   	in     al,dx
c001ebc0:	83 c4 1c             	add    esp,0x1c
c001ebc3:	5b                   	pop    ebx
c001ebc4:	5e                   	pop    esi
c001ebc5:	5f                   	pop    edi
c001ebc6:	5d                   	pop    ebp
c001ebc7:	c3                   	ret    

c001ebc8 <IDE::waitInterrupt(unsigned char)>:
c001ebc8:	55                   	push   ebp
c001ebc9:	57                   	push   edi
c001ebca:	56                   	push   esi
c001ebcb:	53                   	push   ebx
c001ebcc:	31 db                	xor    ebx,ebx
c001ebce:	83 ec 0c             	sub    esp,0xc
c001ebd1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ebd5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ebda:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ebe2:	89 e8                	mov    eax,ebp
c001ebe4:	84 c0                	test   al,al
c001ebe6:	75 30                	jne    c001ec18 <IDE::waitInterrupt(unsigned char)+0x50>
c001ebe8:	50                   	push   eax
c001ebe9:	6a 0c                	push   0xc
c001ebeb:	56                   	push   esi
c001ebec:	57                   	push   edi
c001ebed:	e8 28 ff ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001ebf2:	83 c4 10             	add    esp,0x10
c001ebf5:	a8 01                	test   al,0x1
c001ebf7:	75 27                	jne    c001ec20 <IDE::waitInterrupt(unsigned char)+0x58>
c001ebf9:	f6 c3 04             	test   bl,0x4
c001ebfc:	75 12                	jne    c001ec10 <IDE::waitInterrupt(unsigned char)+0x48>
c001ebfe:	83 fb 32             	cmp    ebx,0x32
c001ec01:	7e 0d                	jle    c001ec10 <IDE::waitInterrupt(unsigned char)+0x48>
c001ec03:	83 ec 0c             	sub    esp,0xc
c001ec06:	6a 64                	push   0x64
c001ec08:	e8 db a2 ff ff       	call   c0018ee8 <milliTenthSleep(unsigned int)>
c001ec0d:	83 c4 10             	add    esp,0x10
c001ec10:	83 fb 3c             	cmp    ebx,0x3c
c001ec13:	74 0b                	je     c001ec20 <IDE::waitInterrupt(unsigned char)+0x58>
c001ec15:	43                   	inc    ebx
c001ec16:	eb c2                	jmp    c001ebda <IDE::waitInterrupt(unsigned char)+0x12>
c001ec18:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ec20:	83 c4 0c             	add    esp,0xc
c001ec23:	89 e8                	mov    eax,ebp
c001ec25:	5b                   	pop    ebx
c001ec26:	5e                   	pop    esi
c001ec27:	5f                   	pop    edi
c001ec28:	5d                   	pop    ebp
c001ec29:	c3                   	ret    

c001ec2a <ideChannel0IRQHandler(regs*, void*)>:
c001ec2a:	83 ec 10             	sub    esp,0x10
c001ec2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec31:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ec38:	6a 07                	push   0x7
c001ec3a:	6a 00                	push   0x0
c001ec3c:	50                   	push   eax
c001ec3d:	e8 d8 fe ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001ec42:	83 c4 1c             	add    esp,0x1c
c001ec45:	c3                   	ret    

c001ec46 <ideChannel1IRQHandler(regs*, void*)>:
c001ec46:	83 ec 10             	sub    esp,0x10
c001ec49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec4d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ec54:	6a 07                	push   0x7
c001ec56:	6a 01                	push   0x1
c001ec58:	50                   	push   eax
c001ec59:	e8 bc fe ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001ec5e:	83 c4 1c             	add    esp,0x1c
c001ec61:	c3                   	ret    

c001ec62 <IDE::enableIRQs(unsigned char, bool)>:
c001ec62:	57                   	push   edi
c001ec63:	56                   	push   esi
c001ec64:	be 04 00 00 00       	mov    esi,0x4
c001ec69:	53                   	push   ebx
c001ec6a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ec6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ec73:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ec78:	0f 94 c0             	sete   al
c001ec7b:	d1 e0                	shl    eax,1
c001ec7d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001ec84:	0f b6 c0             	movzx  eax,al
c001ec87:	50                   	push   eax
c001ec88:	6a 0c                	push   0xc
c001ec8a:	57                   	push   edi
c001ec8b:	53                   	push   ebx
c001ec8c:	e8 c9 fd ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec91:	83 c4 10             	add    esp,0x10
c001ec94:	50                   	push   eax
c001ec95:	6a 0c                	push   0xc
c001ec97:	57                   	push   edi
c001ec98:	53                   	push   ebx
c001ec99:	e8 7c fe ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001ec9e:	83 c4 10             	add    esp,0x10
c001eca1:	4e                   	dec    esi
c001eca2:	75 f0                	jne    c001ec94 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001eca4:	5b                   	pop    ebx
c001eca5:	5e                   	pop    esi
c001eca6:	5f                   	pop    edi
c001eca7:	c3                   	ret    

c001eca8 <IDE::open(int, int, void*)>:
c001eca8:	55                   	push   ebp
c001eca9:	57                   	push   edi
c001ecaa:	56                   	push   esi
c001ecab:	53                   	push   ebx
c001ecac:	83 ec 1c             	sub    esp,0x1c
c001ecaf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ecb3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ecbc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ecc5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001eccc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ecd3:	0f 85 b0 02 00 00    	jne    c001ef89 <IDE::open(int, int, void*)+0x2e1>
c001ecd9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ecdf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001ece3:	83 e0 7f             	and    eax,0x7f
c001ece6:	3c 05                	cmp    al,0x5
c001ece8:	74 04                	je     c001ecee <IDE::open(int, int, void*)+0x46>
c001ecea:	3c 0f                	cmp    al,0xf
c001ecec:	75 32                	jne    c001ed20 <IDE::open(int, int, void*)+0x78>
c001ecee:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ecf4:	83 e0 fc             	and    eax,0xfffffffc
c001ecf7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ecfe:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ed04:	83 e0 fc             	and    eax,0xfffffffc
c001ed07:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ed0e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ed14:	83 e0 fc             	and    eax,0xfffffffc
c001ed17:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ed1e:	eb 14                	jmp    c001ed34 <IDE::open(int, int, void*)+0x8c>
c001ed20:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ed2a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ed34:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ed3b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ed42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ed46:	89 c6                	mov    esi,eax
c001ed48:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ed4d:	c1 e6 10             	shl    esi,0x10
c001ed50:	89 e8                	mov    eax,ebp
c001ed52:	89 fa                	mov    edx,edi
c001ed54:	c1 e0 0b             	shl    eax,0xb
c001ed57:	09 f0                	or     eax,esi
c001ed59:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ed60:	c1 e6 08             	shl    esi,0x8
c001ed63:	09 c6                	or     esi,eax
c001ed65:	89 f0                	mov    eax,esi
c001ed67:	0d 08 00 00 80       	or     eax,0x80000008
c001ed6c:	ef                   	out    dx,eax
c001ed6d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001ed72:	89 ca                	mov    edx,ecx
c001ed74:	ed                   	in     eax,dx
c001ed75:	c1 e8 10             	shr    eax,0x10
c001ed78:	3d ff ff 00 00       	cmp    eax,0xffff
c001ed7d:	0f 84 f5 00 00 00    	je     c001ee78 <IDE::open(int, int, void*)+0x1d0>
c001ed83:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ed89:	89 fa                	mov    edx,edi
c001ed8b:	89 f0                	mov    eax,esi
c001ed8d:	ef                   	out    dx,eax
c001ed8e:	b0 fe                	mov    al,0xfe
c001ed90:	89 ca                	mov    edx,ecx
c001ed92:	ee                   	out    dx,al
c001ed93:	89 f0                	mov    eax,esi
c001ed95:	89 fa                	mov    edx,edi
c001ed97:	ef                   	out    dx,eax
c001ed98:	89 ca                	mov    edx,ecx
c001ed9a:	ed                   	in     eax,dx
c001ed9b:	3c fe                	cmp    al,0xfe
c001ed9d:	0f 85 a9 00 00 00    	jne    c001ee4c <IDE::open(int, int, void*)+0x1a4>
c001eda3:	8b 15 88 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028888
c001eda9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001edb0:	74 33                	je     c001ede5 <IDE::open(int, int, void*)+0x13d>
c001edb2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001edb8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001edbc:	40                   	inc    eax
c001edbd:	83 ec 0c             	sub    esp,0xc
c001edc0:	0f b6 c0             	movzx  eax,al
c001edc3:	50                   	push   eax
c001edc4:	55                   	push   ebp
c001edc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001edc9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001edcf:	51                   	push   ecx
c001edd0:	e8 1f 37 ff ff       	call   c00124f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001edd5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001edda:	83 c4 1c             	add    esp,0x1c
c001eddd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ede3:	eb 0a                	jmp    c001edef <IDE::open(int, int, void*)+0x147>
c001ede5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001edef:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001edf6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001edfd:	c1 e1 10             	shl    ecx,0x10
c001ee00:	c1 e0 08             	shl    eax,0x8
c001ee03:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ee08:	09 c1                	or     ecx,eax
c001ee0a:	89 fa                	mov    edx,edi
c001ee0c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ee13:	c1 e0 0b             	shl    eax,0xb
c001ee16:	09 c1                	or     ecx,eax
c001ee18:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ee1e:	89 c8                	mov    eax,ecx
c001ee20:	ef                   	out    dx,eax
c001ee21:	be fc 0c 00 00       	mov    esi,0xcfc
c001ee26:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ee2c:	89 f2                	mov    edx,esi
c001ee2e:	ee                   	out    dx,al
c001ee2f:	89 c8                	mov    eax,ecx
c001ee31:	89 fa                	mov    edx,edi
c001ee33:	ef                   	out    dx,eax
c001ee34:	89 f2                	mov    edx,esi
c001ee36:	ed                   	in     eax,dx
c001ee37:	0f b6 c0             	movzx  eax,al
c001ee3a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ee40:	74 46                	je     c001ee88 <IDE::open(int, int, void*)+0x1e0>
c001ee42:	83 ec 0c             	sub    esp,0xc
c001ee45:	68 5c 71 02 c0       	push   0xc002715c
c001ee4a:	eb 34                	jmp    c001ee80 <IDE::open(int, int, void*)+0x1d8>
c001ee4c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ee55:	75 17                	jne    c001ee6e <IDE::open(int, int, void*)+0x1c6>
c001ee57:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001ee5c:	74 07                	je     c001ee65 <IDE::open(int, int, void*)+0x1bd>
c001ee5e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001ee63:	75 09                	jne    c001ee6e <IDE::open(int, int, void*)+0x1c6>
c001ee65:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ee6c:	eb 1a                	jmp    c001ee88 <IDE::open(int, int, void*)+0x1e0>
c001ee6e:	83 ec 0c             	sub    esp,0xc
c001ee71:	68 64 71 02 c0       	push   0xc0027164
c001ee76:	eb 08                	jmp    c001ee80 <IDE::open(int, int, void*)+0x1d8>
c001ee78:	83 ec 0c             	sub    esp,0xc
c001ee7b:	68 95 71 02 c0       	push   0xc0027195
c001ee80:	e8 60 61 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c001ee85:	83 c4 10             	add    esp,0x10
c001ee88:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ee8f:	79 1a                	jns    c001eeab <IDE::open(int, int, void*)+0x203>
c001ee91:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ee97:	83 e0 fc             	and    eax,0xfffffffc
c001ee9a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001eea1:	83 c0 08             	add    eax,0x8
c001eea4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001eeab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001eeb1:	89 c2                	mov    edx,eax
c001eeb3:	83 e2 0f             	and    edx,0xf
c001eeb6:	66 83 fa 08          	cmp    dx,0x8
c001eeba:	75 0a                	jne    c001eec6 <IDE::open(int, int, void*)+0x21e>
c001eebc:	83 e8 02             	sub    eax,0x2
c001eebf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eec6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001eecc:	89 c2                	mov    edx,eax
c001eece:	83 e2 0f             	and    edx,0xf
c001eed1:	66 83 fa 08          	cmp    dx,0x8
c001eed5:	75 0a                	jne    c001eee1 <IDE::open(int, int, void*)+0x239>
c001eed7:	83 e8 02             	sub    eax,0x2
c001eeda:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eee1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001eee8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001eeef:	89 d0                	mov    eax,edx
c001eef1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001eef4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eef8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001eefc:	8d 4a 01             	lea    ecx,[edx+0x1]
c001eeff:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ef04:	0f b6 c9             	movzx  ecx,cl
c001ef07:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ef0e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ef11:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ef15:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ef19:	8d 50 02             	lea    edx,[eax+0x2]
c001ef1c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ef21:	0f b6 d2             	movzx  edx,dl
c001ef24:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ef2a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ef2d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ef31:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ef35:	8d 48 03             	lea    ecx,[eax+0x3]
c001ef38:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ef3d:	0f b6 c9             	movzx  ecx,cl
c001ef40:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ef46:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ef49:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ef4d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ef51:	8d 50 04             	lea    edx,[eax+0x4]
c001ef54:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ef5a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ef5f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ef66:	66 85 f6             	test   si,si
c001ef69:	74 5b                	je     c001efc6 <IDE::open(int, int, void*)+0x31e>
c001ef6b:	0f b6 d2             	movzx  edx,dl
c001ef6e:	83 c0 05             	add    eax,0x5
c001ef71:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ef74:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ef78:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ef7c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ef82:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ef87:	eb 3d                	jmp    c001efc6 <IDE::open(int, int, void*)+0x31e>
c001ef89:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ef8f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ef96:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ef9d:	66 05 06 02          	add    ax,0x206
c001efa1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001efa8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001efaf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001efb6:	66 05 06 02          	add    ax,0x206
c001efba:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001efc1:	e9 e5 fe ff ff       	jmp    c001eeab <IDE::open(int, int, void*)+0x203>
c001efc6:	50                   	push   eax
c001efc7:	50                   	push   eax
c001efc8:	6a 00                	push   0x0
c001efca:	53                   	push   ebx
c001efcb:	e8 64 fa ff ff       	call   c001ea34 <IDE::prepareInterrupt(unsigned char)>
c001efd0:	5a                   	pop    edx
c001efd1:	59                   	pop    ecx
c001efd2:	6a 01                	push   0x1
c001efd4:	53                   	push   ebx
c001efd5:	e8 5a fa ff ff       	call   c001ea34 <IDE::prepareInterrupt(unsigned char)>
c001efda:	83 c4 0c             	add    esp,0xc
c001efdd:	6a 00                	push   0x0
c001efdf:	6a 00                	push   0x0
c001efe1:	53                   	push   ebx
c001efe2:	e8 7b fc ff ff       	call   c001ec62 <IDE::enableIRQs(unsigned char, bool)>
c001efe7:	83 c4 0c             	add    esp,0xc
c001efea:	6a 00                	push   0x0
c001efec:	6a 01                	push   0x1
c001efee:	53                   	push   ebx
c001efef:	e8 6e fc ff ff       	call   c001ec62 <IDE::enableIRQs(unsigned char, bool)>
c001eff4:	83 c4 10             	add    esp,0x10
c001eff7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001effe:	74 34                	je     c001f034 <IDE::open(int, int, void*)+0x38c>
c001f000:	83 ec 0c             	sub    esp,0xc
c001f003:	53                   	push   ebx
c001f004:	6a 01                	push   0x1
c001f006:	68 2a ec 01 c0       	push   0xc001ec2a
c001f00b:	6a 0e                	push   0xe
c001f00d:	53                   	push   ebx
c001f00e:	e8 1f f5 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f013:	83 c4 14             	add    esp,0x14
c001f016:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f01c:	53                   	push   ebx
c001f01d:	6a 01                	push   0x1
c001f01f:	68 46 ec 01 c0       	push   0xc001ec46
c001f024:	6a 0f                	push   0xf
c001f026:	53                   	push   ebx
c001f027:	e8 06 f5 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f02c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f032:	eb 38                	jmp    c001f06c <IDE::open(int, int, void*)+0x3c4>
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f041:	53                   	push   ebx
c001f042:	6a 00                	push   0x0
c001f044:	68 2a ec 01 c0       	push   0xc001ec2a
c001f049:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f04f:	53                   	push   ebx
c001f050:	e8 dd f4 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f055:	83 c4 14             	add    esp,0x14
c001f058:	53                   	push   ebx
c001f059:	6a 00                	push   0x0
c001f05b:	68 46 ec 01 c0       	push   0xc001ec46
c001f060:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f066:	53                   	push   ebx
c001f067:	e8 c6 f4 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f06c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f06e:	83 c4 20             	add    esp,0x20
c001f071:	83 ec 0c             	sub    esp,0xc
c001f074:	53                   	push   ebx
c001f075:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f078:	83 c4 0c             	add    esp,0xc
c001f07b:	6a 07                	push   0x7
c001f07d:	6a 00                	push   0x0
c001f07f:	53                   	push   ebx
c001f080:	e8 95 fa ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f085:	83 c4 0c             	add    esp,0xc
c001f088:	6a 07                	push   0x7
c001f08a:	6a 01                	push   0x1
c001f08c:	53                   	push   ebx
c001f08d:	e8 88 fa ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f092:	83 c4 0c             	add    esp,0xc
c001f095:	6a 01                	push   0x1
c001f097:	6a 00                	push   0x0
c001f099:	53                   	push   ebx
c001f09a:	e8 c3 fb ff ff       	call   c001ec62 <IDE::enableIRQs(unsigned char, bool)>
c001f09f:	83 c4 0c             	add    esp,0xc
c001f0a2:	6a 01                	push   0x1
c001f0a4:	6a 01                	push   0x1
c001f0a6:	53                   	push   ebx
c001f0a7:	e8 b6 fb ff ff       	call   c001ec62 <IDE::enableIRQs(unsigned char, bool)>
c001f0ac:	83 c4 2c             	add    esp,0x2c
c001f0af:	31 c0                	xor    eax,eax
c001f0b1:	5b                   	pop    ebx
c001f0b2:	5e                   	pop    esi
c001f0b3:	5f                   	pop    edi
c001f0b4:	5d                   	pop    ebp
c001f0b5:	c3                   	ret    

c001f0b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f0b6:	55                   	push   ebp
c001f0b7:	57                   	push   edi
c001f0b8:	56                   	push   esi
c001f0b9:	53                   	push   ebx
c001f0ba:	83 ec 1c             	sub    esp,0x1c
c001f0bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f0c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f0c5:	8d 50 f8             	lea    edx,[eax-0x8]
c001f0c8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0cc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f0d0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f0d4:	80 fa 03             	cmp    dl,0x3
c001f0d7:	77 5d                	ja     c001f136 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f0d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f0dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f0e1:	0f b6 db             	movzx  ebx,bl
c001f0e4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f0e7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f0eb:	83 ca 80             	or     edx,0xffffff80
c001f0ee:	0f b6 d2             	movzx  edx,dl
c001f0f1:	52                   	push   edx
c001f0f2:	6a 0c                	push   0xc
c001f0f4:	53                   	push   ebx
c001f0f5:	56                   	push   esi
c001f0f6:	e8 5f f9 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0fb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f100:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f104:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f108:	0f b6 c0             	movzx  eax,al
c001f10b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f10f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f111:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f116:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f11a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f11e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f122:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f12a:	83 c4 2c             	add    esp,0x2c
c001f12d:	5b                   	pop    ebx
c001f12e:	5e                   	pop    esi
c001f12f:	5f                   	pop    edi
c001f130:	5d                   	pop    ebp
c001f131:	e9 24 f9 ff ff       	jmp    c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f136:	3c 07                	cmp    al,0x7
c001f138:	77 10                	ja     c001f14a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f13a:	0f b6 db             	movzx  ebx,bl
c001f13d:	0f b6 d0             	movzx  edx,al
c001f140:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f148:	eb 2d                	jmp    c001f177 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f14a:	3c 0d                	cmp    al,0xd
c001f14c:	77 13                	ja     c001f161 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f14e:	0f b6 db             	movzx  ebx,bl
c001f151:	0f b6 c0             	movzx  eax,al
c001f154:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f15b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f15f:	eb 16                	jmp    c001f177 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f161:	3c 15                	cmp    al,0x15
c001f163:	77 14                	ja     c001f179 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f165:	0f b6 db             	movzx  ebx,bl
c001f168:	0f b6 c0             	movzx  eax,al
c001f16b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f173:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f177:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f179:	83 c4 1c             	add    esp,0x1c
c001f17c:	5b                   	pop    ebx
c001f17d:	5e                   	pop    esi
c001f17e:	5f                   	pop    edi
c001f17f:	5d                   	pop    ebp
c001f180:	c3                   	ret    
c001f181:	90                   	nop

c001f182 <IDE::detect()>:
c001f182:	55                   	push   ebp
c001f183:	57                   	push   edi
c001f184:	56                   	push   esi
c001f185:	53                   	push   ebx
c001f186:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f18c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f193:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f19a:	0f 85 97 02 00 00    	jne    c001f437 <IDE::detect()+0x2b5>
c001f1a0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f1a7:	31 f6                	xor    esi,esi
c001f1a9:	31 ed                	xor    ebp,ebp
c001f1ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f1b3:	89 e8                	mov    eax,ebp
c001f1b5:	c1 e0 06             	shl    eax,0x6
c001f1b8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f1c0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f1c4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f1c8:	c1 e0 04             	shl    eax,0x4
c001f1cb:	83 c8 a0             	or     eax,0xffffffa0
c001f1ce:	0f b6 c0             	movzx  eax,al
c001f1d1:	50                   	push   eax
c001f1d2:	6a 06                	push   0x6
c001f1d4:	56                   	push   esi
c001f1d5:	53                   	push   ebx
c001f1d6:	e8 7f f8 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1db:	83 c4 0c             	add    esp,0xc
c001f1de:	6a 0c                	push   0xc
c001f1e0:	56                   	push   esi
c001f1e1:	53                   	push   ebx
c001f1e2:	e8 33 f9 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f1e7:	83 c4 0c             	add    esp,0xc
c001f1ea:	6a 0c                	push   0xc
c001f1ec:	56                   	push   esi
c001f1ed:	53                   	push   ebx
c001f1ee:	e8 27 f9 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f1f3:	83 c4 0c             	add    esp,0xc
c001f1f6:	6a 0c                	push   0xc
c001f1f8:	56                   	push   esi
c001f1f9:	53                   	push   ebx
c001f1fa:	e8 1b f9 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f1ff:	83 c4 0c             	add    esp,0xc
c001f202:	6a 0c                	push   0xc
c001f204:	56                   	push   esi
c001f205:	53                   	push   ebx
c001f206:	e8 0f f9 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f20b:	68 ec 00 00 00       	push   0xec
c001f210:	6a 07                	push   0x7
c001f212:	56                   	push   esi
c001f213:	53                   	push   ebx
c001f214:	e8 41 f8 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f219:	83 c4 1c             	add    esp,0x1c
c001f21c:	6a 0c                	push   0xc
c001f21e:	56                   	push   esi
c001f21f:	53                   	push   ebx
c001f220:	e8 f5 f8 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f225:	83 c4 0c             	add    esp,0xc
c001f228:	6a 0c                	push   0xc
c001f22a:	56                   	push   esi
c001f22b:	53                   	push   ebx
c001f22c:	e8 e9 f8 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f231:	83 c4 0c             	add    esp,0xc
c001f234:	6a 0c                	push   0xc
c001f236:	56                   	push   esi
c001f237:	53                   	push   ebx
c001f238:	e8 dd f8 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f23d:	83 c4 0c             	add    esp,0xc
c001f240:	6a 0c                	push   0xc
c001f242:	56                   	push   esi
c001f243:	53                   	push   ebx
c001f244:	e8 d1 f8 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f249:	83 c4 0c             	add    esp,0xc
c001f24c:	6a 0c                	push   0xc
c001f24e:	56                   	push   esi
c001f24f:	53                   	push   ebx
c001f250:	e8 c5 f8 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f255:	83 c4 10             	add    esp,0x10
c001f258:	84 c0                	test   al,al
c001f25a:	0f 84 5f 01 00 00    	je     c001f3bf <IDE::detect()+0x23d>
c001f260:	31 ff                	xor    edi,edi
c001f262:	50                   	push   eax
c001f263:	6a 0c                	push   0xc
c001f265:	56                   	push   esi
c001f266:	53                   	push   ebx
c001f267:	e8 ae f8 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f26c:	83 c4 10             	add    esp,0x10
c001f26f:	a8 01                	test   al,0x1
c001f271:	0f 85 69 01 00 00    	jne    c001f3e0 <IDE::detect()+0x25e>
c001f277:	84 c0                	test   al,al
c001f279:	78 04                	js     c001f27f <IDE::detect()+0xfd>
c001f27b:	a8 08                	test   al,0x8
c001f27d:	75 23                	jne    c001f2a2 <IDE::detect()+0x120>
c001f27f:	47                   	inc    edi
c001f280:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f286:	7e da                	jle    c001f262 <IDE::detect()+0xe0>
c001f288:	83 ec 0c             	sub    esp,0xc
c001f28b:	6a 32                	push   0x32
c001f28d:	e8 56 9c ff ff       	call   c0018ee8 <milliTenthSleep(unsigned int)>
c001f292:	83 c4 10             	add    esp,0x10
c001f295:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f29b:	75 c5                	jne    c001f262 <IDE::detect()+0xe0>
c001f29d:	e9 3e 01 00 00       	jmp    c001f3e0 <IDE::detect()+0x25e>
c001f2a2:	31 c9                	xor    ecx,ecx
c001f2a4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f2a8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f2ac:	83 ec 0c             	sub    esp,0xc
c001f2af:	68 80 00 00 00       	push   0x80
c001f2b4:	57                   	push   edi
c001f2b5:	6a 00                	push   0x0
c001f2b7:	56                   	push   esi
c001f2b8:	53                   	push   ebx
c001f2b9:	e8 f8 fd ff ff       	call   c001f0b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f2be:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f2c3:	89 e8                	mov    eax,ebp
c001f2c5:	89 d1                	mov    ecx,edx
c001f2c7:	c1 e0 06             	shl    eax,0x6
c001f2ca:	01 d8                	add    eax,ebx
c001f2cc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f2d3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f2da:	89 f2                	mov    edx,esi
c001f2dc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f2e2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f2e6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f2ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f2f0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f2f7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f2ff:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f306:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f30e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f314:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f31b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f321:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f325:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f329:	83 c4 20             	add    esp,0x20
c001f32c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f32f:	83 c0 02             	add    eax,0x2
c001f332:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f338:	83 c7 02             	add    edi,0x2
c001f33b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f33e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f344:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f348:	75 e2                	jne    c001f32c <IDE::detect()+0x1aa>
c001f34a:	89 e8                	mov    eax,ebp
c001f34c:	c1 e0 06             	shl    eax,0x6
c001f34f:	01 d8                	add    eax,ebx
c001f351:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f357:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f35e:	66 c1 ea 09          	shr    dx,0x9
c001f362:	83 e2 01             	and    edx,0x1
c001f365:	84 c9                	test   cl,cl
c001f367:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f36d:	75 22                	jne    c001f391 <IDE::detect()+0x20f>
c001f36f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f376:	74 46                	je     c001f3be <IDE::detect()+0x23c>
c001f378:	83 ec 0c             	sub    esp,0xc
c001f37b:	68 7c 01 00 00       	push   0x17c
c001f380:	e8 d6 a9 fe ff       	call   c0009d5b <malloc>
c001f385:	89 c7                	mov    edi,eax
c001f387:	89 04 24             	mov    DWORD PTR [esp],eax
c001f38a:	e8 35 06 00 00       	call   c001f9c4 <ATA::ATA()>
c001f38f:	eb 17                	jmp    c001f3a8 <IDE::detect()+0x226>
c001f391:	83 ec 0c             	sub    esp,0xc
c001f394:	68 84 01 00 00       	push   0x184
c001f399:	e8 bd a9 fe ff       	call   c0009d5b <malloc>
c001f39e:	89 c7                	mov    edi,eax
c001f3a0:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3a3:	e8 a4 0c 00 00       	call   c002004c <ATAPI::ATAPI()>
c001f3a8:	5a                   	pop    edx
c001f3a9:	59                   	pop    ecx
c001f3aa:	57                   	push   edi
c001f3ab:	53                   	push   ebx
c001f3ac:	e8 09 f2 fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001f3b1:	8b 07                	mov    eax,DWORD PTR [edi]
c001f3b3:	53                   	push   ebx
c001f3b4:	55                   	push   ebp
c001f3b5:	6a 00                	push   0x0
c001f3b7:	57                   	push   edi
c001f3b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f3bb:	83 c4 20             	add    esp,0x20
c001f3be:	45                   	inc    ebp
c001f3bf:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f3c4:	74 0d                	je     c001f3d3 <IDE::detect()+0x251>
c001f3c6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f3ce:	e9 e0 fd ff ff       	jmp    c001f1b3 <IDE::detect()+0x31>
c001f3d3:	4e                   	dec    esi
c001f3d4:	74 61                	je     c001f437 <IDE::detect()+0x2b5>
c001f3d6:	be 01 00 00 00       	mov    esi,0x1
c001f3db:	e9 cb fd ff ff       	jmp    c001f1ab <IDE::detect()+0x29>
c001f3e0:	50                   	push   eax
c001f3e1:	6a 04                	push   0x4
c001f3e3:	56                   	push   esi
c001f3e4:	53                   	push   ebx
c001f3e5:	e8 30 f7 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f3ea:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f3ee:	83 c4 0c             	add    esp,0xc
c001f3f1:	6a 05                	push   0x5
c001f3f3:	56                   	push   esi
c001f3f4:	53                   	push   ebx
c001f3f5:	e8 20 f7 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f3fa:	83 c4 10             	add    esp,0x10
c001f3fd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f401:	80 fa 14             	cmp    dl,0x14
c001f404:	75 04                	jne    c001f40a <IDE::detect()+0x288>
c001f406:	3c eb                	cmp    al,0xeb
c001f408:	eb 07                	jmp    c001f411 <IDE::detect()+0x28f>
c001f40a:	3c 96                	cmp    al,0x96
c001f40c:	75 b1                	jne    c001f3bf <IDE::detect()+0x23d>
c001f40e:	80 fa 69             	cmp    dl,0x69
c001f411:	75 ac                	jne    c001f3bf <IDE::detect()+0x23d>
c001f413:	68 a1 00 00 00       	push   0xa1
c001f418:	6a 07                	push   0x7
c001f41a:	56                   	push   esi
c001f41b:	53                   	push   ebx
c001f41c:	e8 39 f6 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f421:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f428:	e8 bb 9a ff ff       	call   c0018ee8 <milliTenthSleep(unsigned int)>
c001f42d:	83 c4 10             	add    esp,0x10
c001f430:	b1 01                	mov    cl,0x1
c001f432:	e9 6d fe ff ff       	jmp    c001f2a4 <IDE::detect()+0x122>
c001f437:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f43d:	5b                   	pop    ebx
c001f43e:	5e                   	pop    esi
c001f43f:	5f                   	pop    edi
c001f440:	5d                   	pop    ebp
c001f441:	c3                   	ret    

c001f442 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f442:	55                   	push   ebp
c001f443:	57                   	push   edi
c001f444:	56                   	push   esi
c001f445:	53                   	push   ebx
c001f446:	83 ec 1c             	sub    esp,0x1c
c001f449:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f44d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f451:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f455:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f459:	88 c3                	mov    bl,al
c001f45b:	84 c0                	test   al,al
c001f45d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f461:	0f 84 81 00 00 00    	je     c001f4e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f467:	83 ec 0c             	sub    esp,0xc
c001f46a:	68 bf 71 02 c0       	push   0xc00271bf
c001f46f:	e8 d3 db fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001f474:	83 c4 10             	add    esp,0x10
c001f477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f47b:	3c 01                	cmp    al,0x1
c001f47d:	74 63                	je     c001f4e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f47f:	3c 02                	cmp    al,0x2
c001f481:	75 53                	jne    c001f4d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f483:	d1 e6                	shl    esi,1
c001f485:	09 ee                	or     esi,ebp
c001f487:	50                   	push   eax
c001f488:	89 f0                	mov    eax,esi
c001f48a:	6a 01                	push   0x1
c001f48c:	0f b6 f0             	movzx  esi,al
c001f48f:	c1 e6 06             	shl    esi,0x6
c001f492:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f49a:	50                   	push   eax
c001f49b:	57                   	push   edi
c001f49c:	e8 79 f6 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f4a1:	83 c4 10             	add    esp,0x10
c001f4a4:	a8 01                	test   al,0x1
c001f4a6:	74 02                	je     c001f4aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f4a8:	b3 07                	mov    bl,0x7
c001f4aa:	a8 02                	test   al,0x2
c001f4ac:	74 02                	je     c001f4b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f4ae:	b3 03                	mov    bl,0x3
c001f4b0:	a8 04                	test   al,0x4
c001f4b2:	74 02                	je     c001f4b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f4b4:	b3 14                	mov    bl,0x14
c001f4b6:	a8 08                	test   al,0x8
c001f4b8:	74 02                	je     c001f4bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f4ba:	b3 03                	mov    bl,0x3
c001f4bc:	a8 10                	test   al,0x10
c001f4be:	74 02                	je     c001f4c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f4c0:	b3 15                	mov    bl,0x15
c001f4c2:	a8 20                	test   al,0x20
c001f4c4:	74 02                	je     c001f4c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f4c6:	b3 03                	mov    bl,0x3
c001f4c8:	a8 40                	test   al,0x40
c001f4ca:	74 02                	je     c001f4ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f4cc:	b3 16                	mov    bl,0x16
c001f4ce:	84 c0                	test   al,al
c001f4d0:	79 16                	jns    c001f4e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f4d2:	b3 0d                	mov    bl,0xd
c001f4d4:	eb 12                	jmp    c001f4e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f4d6:	3c 03                	cmp    al,0x3
c001f4d8:	74 0c                	je     c001f4e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f4da:	3c 04                	cmp    al,0x4
c001f4dc:	75 0a                	jne    c001f4e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f4de:	b3 08                	mov    bl,0x8
c001f4e0:	eb 06                	jmp    c001f4e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f4e2:	b3 13                	mov    bl,0x13
c001f4e4:	eb 02                	jmp    c001f4e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f4e6:	b3 17                	mov    bl,0x17
c001f4e8:	83 c4 1c             	add    esp,0x1c
c001f4eb:	88 d8                	mov    al,bl
c001f4ed:	5b                   	pop    ebx
c001f4ee:	5e                   	pop    esi
c001f4ef:	5f                   	pop    edi
c001f4f0:	5d                   	pop    ebp
c001f4f1:	c3                   	ret    

c001f4f2 <IDE::polling(unsigned char, unsigned int)>:
c001f4f2:	57                   	push   edi
c001f4f3:	56                   	push   esi
c001f4f4:	53                   	push   ebx
c001f4f5:	bb 04 00 00 00       	mov    ebx,0x4
c001f4fa:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f4fe:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f503:	52                   	push   edx
c001f504:	6a 0c                	push   0xc
c001f506:	56                   	push   esi
c001f507:	57                   	push   edi
c001f508:	e8 0d f6 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f50d:	83 c4 10             	add    esp,0x10
c001f510:	4b                   	dec    ebx
c001f511:	75 f0                	jne    c001f503 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f513:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f518:	50                   	push   eax
c001f519:	6a 0c                	push   0xc
c001f51b:	56                   	push   esi
c001f51c:	57                   	push   edi
c001f51d:	e8 f8 f5 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001f522:	83 c4 10             	add    esp,0x10
c001f525:	a8 01                	test   al,0x1
c001f527:	75 17                	jne    c001f540 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f529:	a8 20                	test   al,0x20
c001f52b:	75 0f                	jne    c001f53c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f52d:	4b                   	dec    ebx
c001f52e:	74 10                	je     c001f540 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f530:	84 c0                	test   al,al
c001f532:	78 e4                	js     c001f518 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f534:	a8 08                	test   al,0x8
c001f536:	74 e0                	je     c001f518 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f538:	31 c0                	xor    eax,eax
c001f53a:	eb 06                	jmp    c001f542 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f53c:	b0 01                	mov    al,0x1
c001f53e:	eb 02                	jmp    c001f542 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f540:	b0 02                	mov    al,0x2
c001f542:	5b                   	pop    ebx
c001f543:	5e                   	pop    esi
c001f544:	5f                   	pop    edi
c001f545:	c3                   	ret    

c001f546 <SATABus::close(int, int, void*)>:
c001f546:	31 c0                	xor    eax,eax
c001f548:	c3                   	ret    
c001f549:	90                   	nop

c001f54a <SATABus::detect()>:
c001f54a:	c3                   	ret    
c001f54b:	90                   	nop

c001f54c <SATABus::SATABus()>:
c001f54c:	83 ec 0c             	sub    esp,0xc
c001f54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f553:	83 ec 08             	sub    esp,0x8
c001f556:	68 f8 71 02 c0       	push   0xc00271f8
c001f55b:	50                   	push   eax
c001f55c:	e8 07 f4 fe ff       	call   c000e968 <HardDiskController::HardDiskController(char const*)>
c001f561:	83 c4 10             	add    esp,0x10
c001f564:	ba 90 72 02 c0       	mov    edx,0xc0027290
c001f569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56d:	89 10                	mov    DWORD PTR [eax],edx
c001f56f:	83 ec 0c             	sub    esp,0xc
c001f572:	6a 50                	push   0x50
c001f574:	e8 84 af fe ff       	call   c000a4fd <Phys::allocateContiguousPages(int)>
c001f579:	83 c4 10             	add    esp,0x10
c001f57c:	89 c2                	mov    edx,eax
c001f57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f582:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f588:	83 ec 0c             	sub    esp,0xc
c001f58b:	6a 50                	push   0x50
c001f58d:	e8 8f c7 fe ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c001f592:	83 c4 10             	add    esp,0x10
c001f595:	89 c2                	mov    edx,eax
c001f597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f59b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f5a1:	a1 b0 89 02 c0       	mov    eax,ds:0xc00289b0
c001f5a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5aa:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f5b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5b4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f5ba:	83 ec 0c             	sub    esp,0xc
c001f5bd:	6a 03                	push   0x3
c001f5bf:	6a 50                	push   0x50
c001f5c1:	51                   	push   ecx
c001f5c2:	52                   	push   edx
c001f5c3:	50                   	push   eax
c001f5c4:	e8 f5 d0 fe ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f5c9:	83 c4 20             	add    esp,0x20
c001f5cc:	90                   	nop
c001f5cd:	83 c4 0c             	add    esp,0xc
c001f5d0:	c3                   	ret    
c001f5d1:	90                   	nop

c001f5d2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f5d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5d6:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f5d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f5dc:	09 c2                	or     edx,eax
c001f5de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f5e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f5ea:	31 c0                	xor    eax,eax
c001f5ec:	c1 e9 08             	shr    ecx,0x8
c001f5ef:	83 e1 0f             	and    ecx,0xf
c001f5f2:	39 c8                	cmp    eax,ecx
c001f5f4:	74 0a                	je     c001f600 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f5f6:	f6 c2 01             	test   dl,0x1
c001f5f9:	74 08                	je     c001f603 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f5fb:	d1 ea                	shr    edx,1
c001f5fd:	40                   	inc    eax
c001f5fe:	eb f2                	jmp    c001f5f2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f600:	83 c8 ff             	or     eax,0xffffffff
c001f603:	c3                   	ret    

c001f604 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f604:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f608:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f60b:	89 c2                	mov    edx,eax
c001f60d:	c1 ea 08             	shr    edx,0x8
c001f610:	83 e2 0f             	and    edx,0xf
c001f613:	fe ca                	dec    dl
c001f615:	75 31                	jne    c001f648 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f617:	83 e0 0f             	and    eax,0xf
c001f61a:	3c 03                	cmp    al,0x3
c001f61c:	75 2a                	jne    c001f648 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f61e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f621:	b8 02 00 00 00       	mov    eax,0x2
c001f626:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f62c:	74 1c                	je     c001f64a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f62e:	b8 04 00 00 00       	mov    eax,0x4
c001f633:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f639:	74 0f                	je     c001f64a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f63b:	31 c0                	xor    eax,eax
c001f63d:	83 fa 03             	cmp    edx,0x3
c001f640:	0f 94 c0             	sete   al
c001f643:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f647:	c3                   	ret    
c001f648:	31 c0                	xor    eax,eax
c001f64a:	c3                   	ret    
c001f64b:	90                   	nop

c001f64c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f64c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f650:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f653:	0f ba e2 0f          	bt     edx,0xf
c001f657:	72 f7                	jb     c001f650 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f659:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f65c:	83 ca 10             	or     edx,0x10
c001f65f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f662:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f665:	83 ca 01             	or     edx,0x1
c001f668:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f66b:	c3                   	ret    

c001f66c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f66c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f670:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f673:	83 e2 fe             	and    edx,0xfffffffe
c001f676:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f679:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f67c:	83 e2 ef             	and    edx,0xffffffef
c001f67f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f682:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f685:	0f ba e2 0e          	bt     edx,0xe
c001f689:	72 f7                	jb     c001f682 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f68b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f68e:	0f ba e2 0f          	bt     edx,0xf
c001f692:	72 ee                	jb     c001f682 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f694:	c3                   	ret    
c001f695:	90                   	nop

c001f696 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f696:	55                   	push   ebp
c001f697:	57                   	push   edi
c001f698:	56                   	push   esi
c001f699:	53                   	push   ebx
c001f69a:	83 ec 1c             	sub    esp,0x1c
c001f69d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f6a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f6a5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f6a9:	53                   	push   ebx
c001f6aa:	89 fd                	mov    ebp,edi
c001f6ac:	56                   	push   esi
c001f6ad:	c1 e5 0a             	shl    ebp,0xa
c001f6b0:	e8 b7 ff ff ff       	call   c001f66c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f6b5:	83 ec 0c             	sub    esp,0xc
c001f6b8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f6be:	01 e8                	add    eax,ebp
c001f6c0:	89 03                	mov    DWORD PTR [ebx],eax
c001f6c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f6c4:	68 00 04 00 00       	push   0x400
c001f6c9:	6a 00                	push   0x0
c001f6cb:	50                   	push   eax
c001f6cc:	e8 b3 0f fe ff       	call   c0000684 <memset>
c001f6d1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f6d7:	89 fa                	mov    edx,edi
c001f6d9:	01 e8                	add    eax,ebp
c001f6db:	c1 e7 0d             	shl    edi,0xd
c001f6de:	89 03                	mov    DWORD PTR [ebx],eax
c001f6e0:	c1 e2 08             	shl    edx,0x8
c001f6e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f6ea:	81 c2 00 80 00 00    	add    edx,0x8000
c001f6f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f6f4:	89 d0                	mov    eax,edx
c001f6f6:	83 c4 1c             	add    esp,0x1c
c001f6f9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f6ff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f702:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f705:	68 00 01 00 00       	push   0x100
c001f70a:	6a 00                	push   0x0
c001f70c:	50                   	push   eax
c001f70d:	e8 72 0f fe ff       	call   c0000684 <memset>
c001f712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f716:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f71c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f722:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f726:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f729:	83 c4 10             	add    esp,0x10
c001f72c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f733:	31 ff                	xor    edi,edi
c001f735:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f73b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f745:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f74b:	83 c5 20             	add    ebp,0x20
c001f74e:	01 f8                	add    eax,edi
c001f750:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f753:	52                   	push   edx
c001f754:	68 00 01 00 00       	push   0x100
c001f759:	6a 00                	push   0x0
c001f75b:	50                   	push   eax
c001f75c:	e8 23 0f fe ff       	call   c0000684 <memset>
c001f761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f765:	83 c4 10             	add    esp,0x10
c001f768:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f76e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f775:	01 f8                	add    eax,edi
c001f777:	81 c7 00 01 00 00    	add    edi,0x100
c001f77d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f780:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f786:	75 b3                	jne    c001f73b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f788:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f78c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f790:	83 c4 1c             	add    esp,0x1c
c001f793:	5b                   	pop    ebx
c001f794:	5e                   	pop    esi
c001f795:	5f                   	pop    edi
c001f796:	5d                   	pop    ebp
c001f797:	e9 b0 fe ff ff       	jmp    c001f64c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f79c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f79c:	55                   	push   ebp
c001f79d:	57                   	push   edi
c001f79e:	56                   	push   esi
c001f79f:	53                   	push   ebx
c001f7a0:	83 ec 0c             	sub    esp,0xc
c001f7a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f7a7:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001f7ae:	74 2d                	je     c001f7dd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f7b0:	83 ec 0c             	sub    esp,0xc
c001f7b3:	68 1c 72 02 c0       	push   0xc002721c
c001f7b8:	e8 f8 a5 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f7bd:	83 c4 10             	add    esp,0x10
c001f7c0:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001f7c7:	75 14                	jne    c001f7dd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f7c9:	e4 60                	in     al,0x60
c001f7cb:	3c 1c                	cmp    al,0x1c
c001f7cd:	74 04                	je     c001f7d3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f7cf:	3c 5a                	cmp    al,0x5a
c001f7d1:	75 f6                	jne    c001f7c9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f7d3:	e4 60                	in     al,0x60
c001f7d5:	3c 5a                	cmp    al,0x5a
c001f7d7:	74 fa                	je     c001f7d3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f7d9:	3c 1c                	cmp    al,0x1c
c001f7db:	74 f6                	je     c001f7d3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f7dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f7e1:	31 db                	xor    ebx,ebx
c001f7e3:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f7e6:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f7ec:	0f 84 78 01 00 00    	je     c001f96a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f7f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f7f6:	89 d8                	mov    eax,ebx
c001f7f8:	c1 e0 07             	shl    eax,0x7
c001f7fb:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f802:	50                   	push   eax
c001f803:	50                   	push   eax
c001f804:	57                   	push   edi
c001f805:	56                   	push   esi
c001f806:	e8 f9 fd ff ff       	call   c001f604 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f80b:	83 c4 10             	add    esp,0x10
c001f80e:	83 f8 01             	cmp    eax,0x1
c001f811:	0f 85 19 01 00 00    	jne    c001f930 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f817:	50                   	push   eax
c001f818:	53                   	push   ebx
c001f819:	57                   	push   edi
c001f81a:	56                   	push   esi
c001f81b:	e8 76 fe ff ff       	call   c001f696 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f820:	83 c4 10             	add    esp,0x10
c001f823:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001f82a:	74 2d                	je     c001f859 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f82c:	83 ec 0c             	sub    esp,0xc
c001f82f:	68 31 72 02 c0       	push   0xc0027231
c001f834:	e8 7c a5 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f839:	83 c4 10             	add    esp,0x10
c001f83c:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001f843:	75 14                	jne    c001f859 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f845:	e4 60                	in     al,0x60
c001f847:	3c 1c                	cmp    al,0x1c
c001f849:	74 04                	je     c001f84f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f84b:	3c 5a                	cmp    al,0x5a
c001f84d:	75 f6                	jne    c001f845 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f84f:	e4 60                	in     al,0x60
c001f851:	3c 5a                	cmp    al,0x5a
c001f853:	74 fa                	je     c001f84f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f855:	3c 1c                	cmp    al,0x1c
c001f857:	74 f6                	je     c001f84f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f859:	83 ec 0c             	sub    esp,0xc
c001f85c:	68 7c 01 00 00       	push   0x17c
c001f861:	e8 f5 a4 fe ff       	call   c0009d5b <malloc>
c001f866:	89 04 24             	mov    DWORD PTR [esp],eax
c001f869:	89 c7                	mov    edi,eax
c001f86b:	e8 14 10 00 00       	call   c0020884 <SATA::SATA()>
c001f870:	83 c4 10             	add    esp,0x10
c001f873:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001f87a:	74 2d                	je     c001f8a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f87c:	83 ec 0c             	sub    esp,0xc
c001f87f:	68 46 72 02 c0       	push   0xc0027246
c001f884:	e8 2c a5 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f889:	83 c4 10             	add    esp,0x10
c001f88c:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001f893:	75 14                	jne    c001f8a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f895:	e4 60                	in     al,0x60
c001f897:	3c 5a                	cmp    al,0x5a
c001f899:	74 04                	je     c001f89f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f89b:	3c 1c                	cmp    al,0x1c
c001f89d:	75 f6                	jne    c001f895 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f89f:	e4 60                	in     al,0x60
c001f8a1:	3c 5a                	cmp    al,0x5a
c001f8a3:	74 fa                	je     c001f89f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f8a5:	3c 1c                	cmp    al,0x1c
c001f8a7:	74 f6                	je     c001f89f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f8a9:	50                   	push   eax
c001f8aa:	50                   	push   eax
c001f8ab:	57                   	push   edi
c001f8ac:	56                   	push   esi
c001f8ad:	e8 08 ed fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001f8b2:	83 c4 10             	add    esp,0x10
c001f8b5:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001f8bc:	74 2d                	je     c001f8eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f8be:	83 ec 0c             	sub    esp,0xc
c001f8c1:	68 5b 72 02 c0       	push   0xc002725b
c001f8c6:	e8 ea a4 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f8cb:	83 c4 10             	add    esp,0x10
c001f8ce:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001f8d5:	75 14                	jne    c001f8eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f8d7:	e4 60                	in     al,0x60
c001f8d9:	3c 1c                	cmp    al,0x1c
c001f8db:	74 04                	je     c001f8e1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f8dd:	3c 5a                	cmp    al,0x5a
c001f8df:	75 f6                	jne    c001f8d7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f8e1:	e4 60                	in     al,0x60
c001f8e3:	3c 5a                	cmp    al,0x5a
c001f8e5:	74 fa                	je     c001f8e1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f8e7:	3c 1c                	cmp    al,0x1c
c001f8e9:	74 f6                	je     c001f8e1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f8eb:	8b 07                	mov    eax,DWORD PTR [edi]
c001f8ed:	56                   	push   esi
c001f8ee:	6a 00                	push   0x0
c001f8f0:	53                   	push   ebx
c001f8f1:	57                   	push   edi
c001f8f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f8f5:	83 c4 10             	add    esp,0x10
c001f8f8:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c001f8ff:	74 69                	je     c001f96a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f901:	83 ec 0c             	sub    esp,0xc
c001f904:	68 70 72 02 c0       	push   0xc0027270
c001f909:	e8 a7 a4 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f90e:	83 c4 10             	add    esp,0x10
c001f911:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c001f918:	75 50                	jne    c001f96a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f91a:	e4 60                	in     al,0x60
c001f91c:	3c 1c                	cmp    al,0x1c
c001f91e:	74 04                	je     c001f924 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f920:	3c 5a                	cmp    al,0x5a
c001f922:	75 f6                	jne    c001f91a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f924:	e4 60                	in     al,0x60
c001f926:	3c 5a                	cmp    al,0x5a
c001f928:	74 fa                	je     c001f924 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f92a:	3c 1c                	cmp    al,0x1c
c001f92c:	74 f6                	je     c001f924 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f92e:	eb 3a                	jmp    c001f96a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f930:	83 f8 04             	cmp    eax,0x4
c001f933:	75 35                	jne    c001f96a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f935:	50                   	push   eax
c001f936:	53                   	push   ebx
c001f937:	57                   	push   edi
c001f938:	56                   	push   esi
c001f939:	e8 58 fd ff ff       	call   c001f696 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f93e:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f945:	e8 11 a4 fe ff       	call   c0009d5b <malloc>
c001f94a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f94d:	89 c7                	mov    edi,eax
c001f94f:	e8 a6 17 00 00       	call   c00210fa <SATAPI::SATAPI()>
c001f954:	5a                   	pop    edx
c001f955:	59                   	pop    ecx
c001f956:	57                   	push   edi
c001f957:	56                   	push   esi
c001f958:	e8 5d ec fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001f95d:	8b 07                	mov    eax,DWORD PTR [edi]
c001f95f:	56                   	push   esi
c001f960:	6a 00                	push   0x0
c001f962:	53                   	push   ebx
c001f963:	57                   	push   edi
c001f964:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f967:	83 c4 20             	add    esp,0x20
c001f96a:	d1 ed                	shr    ebp,1
c001f96c:	43                   	inc    ebx
c001f96d:	83 fb 20             	cmp    ebx,0x20
c001f970:	0f 85 70 fe ff ff    	jne    c001f7e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f976:	83 c4 0c             	add    esp,0xc
c001f979:	5b                   	pop    ebx
c001f97a:	5e                   	pop    esi
c001f97b:	5f                   	pop    edi
c001f97c:	5d                   	pop    ebp
c001f97d:	c3                   	ret    

c001f97e <SATABus::open(int, int, void*)>:
c001f97e:	83 ec 14             	sub    esp,0x14
c001f981:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f985:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f98b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f991:	52                   	push   edx
c001f992:	50                   	push   eax
c001f993:	e8 04 fe ff ff       	call   c001f79c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f998:	31 c0                	xor    eax,eax
c001f99a:	83 c4 1c             	add    esp,0x1c
c001f99d:	c3                   	ret    

c001f99e <ATA::close(int, int, void*)>:
c001f99e:	83 ec 0c             	sub    esp,0xc
c001f9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f9ab:	85 c0                	test   eax,eax
c001f9ad:	74 0c                	je     c001f9bb <ATA::close(int, int, void*)+0x1d>
c001f9af:	83 ec 0c             	sub    esp,0xc
c001f9b2:	8b 10                	mov    edx,DWORD PTR [eax]
c001f9b4:	50                   	push   eax
c001f9b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f9b8:	83 c4 10             	add    esp,0x10
c001f9bb:	31 c0                	xor    eax,eax
c001f9bd:	83 c4 0c             	add    esp,0xc
c001f9c0:	c3                   	ret    
c001f9c1:	90                   	nop

c001f9c2 <ATA::powerSaving(PowerSavingLevel)>:
c001f9c2:	c3                   	ret    
c001f9c3:	90                   	nop

c001f9c4 <ATA::ATA()>:
c001f9c4:	83 ec 0c             	sub    esp,0xc
c001f9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cb:	83 ec 04             	sub    esp,0x4
c001f9ce:	68 00 02 00 00       	push   0x200
c001f9d3:	68 ff 73 02 c0       	push   0xc00273ff
c001f9d8:	50                   	push   eax
c001f9d9:	e8 14 f0 fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f9de:	83 c4 10             	add    esp,0x10
c001f9e1:	ba 08 73 02 c0       	mov    edx,0xc0027308
c001f9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ea:	89 10                	mov    DWORD PTR [eax],edx
c001f9ec:	90                   	nop
c001f9ed:	83 c4 0c             	add    esp,0xc
c001f9f0:	c3                   	ret    
c001f9f1:	90                   	nop

c001f9f2 <ATA::flush(bool)>:
c001f9f2:	53                   	push   ebx
c001f9f3:	83 ec 08             	sub    esp,0x8
c001f9f6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f9fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f9ff:	19 c0                	sbb    eax,eax
c001fa01:	83 e0 fd             	and    eax,0xfffffffd
c001fa04:	05 ea 00 00 00       	add    eax,0xea
c001fa09:	50                   	push   eax
c001fa0a:	6a 07                	push   0x7
c001fa0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa13:	50                   	push   eax
c001fa14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa1a:	e8 3b f0 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa1f:	83 c4 0c             	add    esp,0xc
c001fa22:	6a 00                	push   0x0
c001fa24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa2b:	50                   	push   eax
c001fa2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa32:	e8 bb fa ff ff       	call   c001f4f2 <IDE::polling(unsigned char, unsigned int)>
c001fa37:	83 c4 18             	add    esp,0x18
c001fa3a:	5b                   	pop    ebx
c001fa3b:	c3                   	ret    

c001fa3c <ATA::readyForCommand()>:
c001fa3c:	56                   	push   esi
c001fa3d:	53                   	push   ebx
c001fa3e:	53                   	push   ebx
c001fa3f:	31 db                	xor    ebx,ebx
c001fa41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fa45:	51                   	push   ecx
c001fa46:	6a 0c                	push   0xc
c001fa48:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fa4f:	50                   	push   eax
c001fa50:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fa56:	e8 bf f0 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c001fa5b:	83 c4 10             	add    esp,0x10
c001fa5e:	a8 88                	test   al,0x88
c001fa60:	74 1f                	je     c001fa81 <ATA::readyForCommand()+0x45>
c001fa62:	43                   	inc    ebx
c001fa63:	83 fb 63             	cmp    ebx,0x63
c001fa66:	7e dd                	jle    c001fa45 <ATA::readyForCommand()+0x9>
c001fa68:	83 ec 0c             	sub    esp,0xc
c001fa6b:	6a 0a                	push   0xa
c001fa6d:	e8 76 94 ff ff       	call   c0018ee8 <milliTenthSleep(unsigned int)>
c001fa72:	83 c4 10             	add    esp,0x10
c001fa75:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fa7b:	75 c8                	jne    c001fa45 <ATA::readyForCommand()+0x9>
c001fa7d:	31 c0                	xor    eax,eax
c001fa7f:	eb 02                	jmp    c001fa83 <ATA::readyForCommand()+0x47>
c001fa81:	b0 01                	mov    al,0x1
c001fa83:	5a                   	pop    edx
c001fa84:	5b                   	pop    ebx
c001fa85:	5e                   	pop    esi
c001fa86:	c3                   	ret    
c001fa87:	90                   	nop

c001fa88 <ATA::access(unsigned long long, int, void*, bool)>:
c001fa88:	55                   	push   ebp
c001fa89:	57                   	push   edi
c001fa8a:	56                   	push   esi
c001fa8b:	53                   	push   ebx
c001fa8c:	83 ec 38             	sub    esp,0x38
c001fa8f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fa93:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fa97:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fa9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fa9f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001faa3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001faa7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001faab:	68 b4 72 02 c0       	push   0xc00272b4
c001fab0:	e8 92 d5 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fab5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fabb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fabf:	83 c4 10             	add    esp,0x10
c001fac2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fac8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001facc:	c1 e0 06             	shl    eax,0x6
c001facf:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fad7:	74 5d                	je     c001fb36 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fad9:	89 fa                	mov    edx,edi
c001fadb:	89 f0                	mov    eax,esi
c001fadd:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fae1:	c1 ea 1c             	shr    edx,0x1c
c001fae4:	89 d1                	mov    ecx,edx
c001fae6:	09 c1                	or     ecx,eax
c001fae8:	74 25                	je     c001fb0f <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001faea:	31 ed                	xor    ebp,ebp
c001faec:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001faf3:	89 fa                	mov    edx,edi
c001faf5:	89 f0                	mov    eax,esi
c001faf7:	0f ad d0             	shrd   eax,edx,cl
c001fafa:	d3 ea                	shr    edx,cl
c001fafc:	f6 c1 20             	test   cl,0x20
c001faff:	74 02                	je     c001fb03 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fb01:	89 d0                	mov    eax,edx
c001fb03:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fb07:	45                   	inc    ebp
c001fb08:	83 fd 06             	cmp    ebp,0x6
c001fb0b:	75 df                	jne    c001faec <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fb0d:	eb 76                	jmp    c001fb85 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fb0f:	89 f0                	mov    eax,esi
c001fb11:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fb16:	89 fa                	mov    edx,edi
c001fb18:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fb1f:	0f ac d0 10          	shrd   eax,edx,0x10
c001fb23:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fb28:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fb2c:	c1 ee 18             	shr    esi,0x18
c001fb2f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fb34:	eb 56                	jmp    c001fb8c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fb36:	6a 00                	push   0x0
c001fb38:	6a 3f                	push   0x3f
c001fb3a:	57                   	push   edi
c001fb3b:	56                   	push   esi
c001fb3c:	e8 93 32 00 00       	call   c0022dd4 <__umoddi3>
c001fb41:	83 c4 10             	add    esp,0x10
c001fb44:	40                   	inc    eax
c001fb45:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fb49:	6a 00                	push   0x0
c001fb4b:	68 f0 03 00 00       	push   0x3f0
c001fb50:	57                   	push   edi
c001fb51:	56                   	push   esi
c001fb52:	e8 7d 31 00 00       	call   c0022cd4 <__udivdi3>
c001fb57:	83 c4 10             	add    esp,0x10
c001fb5a:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fb5f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fb66:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fb6b:	6a 00                	push   0x0
c001fb6d:	6a 3f                	push   0x3f
c001fb6f:	57                   	push   edi
c001fb70:	56                   	push   esi
c001fb71:	e8 5e 31 00 00       	call   c0022cd4 <__udivdi3>
c001fb76:	83 c4 10             	add    esp,0x10
c001fb79:	89 c6                	mov    esi,eax
c001fb7b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fb80:	83 e6 0f             	and    esi,0xf
c001fb83:	eb 07                	jmp    c001fb8c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fb85:	31 f6                	xor    esi,esi
c001fb87:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fb8c:	bf 01 00 00 00       	mov    edi,0x1
c001fb91:	50                   	push   eax
c001fb92:	6a 00                	push   0x0
c001fb94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb9b:	50                   	push   eax
c001fb9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fba0:	e8 bd f0 ff ff       	call   c001ec62 <IDE::enableIRQs(unsigned char, bool)>
c001fba5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fba8:	e8 8f fe ff ff       	call   c001fa3c <ATA::readyForCommand()>
c001fbad:	83 c4 10             	add    esp,0x10
c001fbb0:	84 c0                	test   al,al
c001fbb2:	0f 84 bc 02 00 00    	je     c001fe74 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fbb8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fbbe:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fbc4:	c1 e0 04             	shl    eax,0x4
c001fbc7:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001fbce:	09 c6                	or     esi,eax
c001fbd0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbd5:	75 05                	jne    c001fbdc <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001fbd7:	83 ce a0             	or     esi,0xffffffa0
c001fbda:	eb 03                	jmp    c001fbdf <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001fbdc:	83 ce e0             	or     esi,0xffffffe0
c001fbdf:	89 f0                	mov    eax,esi
c001fbe1:	0f b6 f0             	movzx  esi,al
c001fbe4:	56                   	push   esi
c001fbe5:	6a 06                	push   0x6
c001fbe7:	51                   	push   ecx
c001fbe8:	52                   	push   edx
c001fbe9:	e8 6c ee ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbee:	83 c4 10             	add    esp,0x10
c001fbf1:	6a 00                	push   0x0
c001fbf3:	6a 01                	push   0x1
c001fbf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbfc:	50                   	push   eax
c001fbfd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc03:	e8 52 ee ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc08:	83 c4 10             	add    esp,0x10
c001fc0b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fc10:	75 6e                	jne    c001fc80 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001fc12:	6a 00                	push   0x0
c001fc14:	6a 08                	push   0x8
c001fc16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc1d:	50                   	push   eax
c001fc1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc24:	e8 31 ee ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc29:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fc2e:	50                   	push   eax
c001fc2f:	6a 09                	push   0x9
c001fc31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc38:	50                   	push   eax
c001fc39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc3f:	e8 16 ee ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc44:	83 c4 20             	add    esp,0x20
c001fc47:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fc4c:	50                   	push   eax
c001fc4d:	6a 0a                	push   0xa
c001fc4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc56:	50                   	push   eax
c001fc57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc5d:	e8 f8 ed ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc62:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fc67:	50                   	push   eax
c001fc68:	6a 0b                	push   0xb
c001fc6a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc71:	50                   	push   eax
c001fc72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc78:	e8 dd ed ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc7d:	83 c4 20             	add    esp,0x20
c001fc80:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fc85:	50                   	push   eax
c001fc86:	6a 02                	push   0x2
c001fc88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc8f:	50                   	push   eax
c001fc90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc96:	e8 bf ed ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc9b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fca0:	50                   	push   eax
c001fca1:	6a 03                	push   0x3
c001fca3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcaa:	50                   	push   eax
c001fcab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcb1:	e8 a4 ed ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcb6:	83 c4 20             	add    esp,0x20
c001fcb9:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fcbe:	50                   	push   eax
c001fcbf:	6a 04                	push   0x4
c001fcc1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcc8:	50                   	push   eax
c001fcc9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fccf:	e8 86 ed ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcd4:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fcd9:	50                   	push   eax
c001fcda:	6a 05                	push   0x5
c001fcdc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fce3:	50                   	push   eax
c001fce4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcea:	e8 6b ed ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcef:	83 c4 20             	add    esp,0x20
c001fcf2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fcf7:	0f 94 c0             	sete   al
c001fcfa:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fcff:	74 09                	je     c001fd0a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fd01:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001fd08:	eb 07                	jmp    c001fd11 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001fd0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001fd11:	0f b6 c0             	movzx  eax,al
c001fd14:	50                   	push   eax
c001fd15:	6a 07                	push   0x7
c001fd17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd1e:	50                   	push   eax
c001fd1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd25:	e8 30 ed ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd2a:	c7 04 24 c1 72 02 c0 	mov    DWORD PTR [esp],0xc00272c1
c001fd31:	e8 11 d3 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fd36:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001fd3a:	83 c4 10             	add    esp,0x10
c001fd3d:	85 f6                	test   esi,esi
c001fd3f:	0f 84 f7 00 00 00    	je     c001fe3c <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001fd45:	83 ec 0c             	sub    esp,0xc
c001fd48:	68 c4 72 02 c0       	push   0xc00272c4
c001fd4d:	e8 f5 d2 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fd52:	83 c4 0c             	add    esp,0xc
c001fd55:	6a 01                	push   0x1
c001fd57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd5e:	50                   	push   eax
c001fd5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd65:	e8 88 f7 ff ff       	call   c001f4f2 <IDE::polling(unsigned char, unsigned int)>
c001fd6a:	c7 04 24 c7 72 02 c0 	mov    DWORD PTR [esp],0xc00272c7
c001fd71:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fd75:	e8 cd d2 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fd7a:	83 c4 10             	add    esp,0x10
c001fd7d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001fd81:	84 c0                	test   al,al
c001fd83:	74 2b                	je     c001fdb0 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001fd85:	0f b6 f8             	movzx  edi,al
c001fd88:	57                   	push   edi
c001fd89:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fd90:	50                   	push   eax
c001fd91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd98:	50                   	push   eax
c001fd99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd9f:	e8 9e f6 ff ff       	call   c001f442 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fda4:	c7 04 24 ca 72 02 c0 	mov    DWORD PTR [esp],0xc00272ca
c001fdab:	e9 bc 00 00 00       	jmp    c001fe6c <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001fdb0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fdb5:	74 50                	je     c001fe07 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001fdb7:	83 ec 0c             	sub    esp,0xc
c001fdba:	31 ed                	xor    ebp,ebp
c001fdbc:	68 d5 72 02 c0       	push   0xc00272d5
c001fdc1:	e8 81 d2 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fdc6:	83 c4 10             	add    esp,0x10
c001fdc9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fdcd:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001fdd1:	50                   	push   eax
c001fdd2:	50                   	push   eax
c001fdd3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdda:	50                   	push   eax
c001fddb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fde1:	e8 62 ec ff ff       	call   c001ea48 <IDE::getBase(unsigned char)>
c001fde6:	89 c2                	mov    edx,eax
c001fde8:	89 f8                	mov    eax,edi
c001fdea:	66 ef                	out    dx,ax
c001fdec:	45                   	inc    ebp
c001fded:	83 c4 10             	add    esp,0x10
c001fdf0:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001fdf6:	75 d1                	jne    c001fdc9 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	68 d8 72 02 c0       	push   0xc00272d8
c001fe00:	e8 42 d2 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fe05:	eb 24                	jmp    c001fe2b <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001fe07:	51                   	push   ecx
c001fe08:	51                   	push   ecx
c001fe09:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe10:	50                   	push   eax
c001fe11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe17:	e8 2c ec ff ff       	call   c001ea48 <IDE::getBase(unsigned char)>
c001fe1c:	b9 00 01 00 00       	mov    ecx,0x100
c001fe21:	89 c2                	mov    edx,eax
c001fe23:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fe27:	fc                   	cld    
c001fe28:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	4e                   	dec    esi
c001fe2f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fe37:	e9 01 ff ff ff       	jmp    c001fd3d <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001fe3c:	31 ff                	xor    edi,edi
c001fe3e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fe43:	74 2f                	je     c001fe74 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fe45:	83 ec 0c             	sub    esp,0xc
c001fe48:	68 db 72 02 c0       	push   0xc00272db
c001fe4d:	e8 f5 d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fe52:	58                   	pop    eax
c001fe53:	31 c0                	xor    eax,eax
c001fe55:	5a                   	pop    edx
c001fe56:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001fe5b:	0f 94 c0             	sete   al
c001fe5e:	50                   	push   eax
c001fe5f:	53                   	push   ebx
c001fe60:	e8 8d fb ff ff       	call   c001f9f2 <ATA::flush(bool)>
c001fe65:	c7 04 24 de 72 02 c0 	mov    DWORD PTR [esp],0xc00272de
c001fe6c:	e8 d6 d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fe71:	83 c4 10             	add    esp,0x10
c001fe74:	83 c4 2c             	add    esp,0x2c
c001fe77:	89 f8                	mov    eax,edi
c001fe79:	5b                   	pop    ebx
c001fe7a:	5e                   	pop    esi
c001fe7b:	5f                   	pop    edi
c001fe7c:	5d                   	pop    ebp
c001fe7d:	c3                   	ret    

c001fe7e <ATA::read(unsigned long long, int, void*)>:
c001fe7e:	57                   	push   edi
c001fe7f:	b8 04 00 00 00       	mov    eax,0x4
c001fe84:	56                   	push   esi
c001fe85:	53                   	push   ebx
c001fe86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fe8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fe8e:	8d 7a ff             	lea    edi,[edx-0x1]
c001fe91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fe95:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fe99:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fe9f:	77 25                	ja     c001fec6 <ATA::read(unsigned long long, int, void*)+0x48>
c001fea1:	b8 06 00 00 00       	mov    eax,0x6
c001fea6:	85 f6                	test   esi,esi
c001fea8:	74 1c                	je     c001fec6 <ATA::read(unsigned long long, int, void*)+0x48>
c001feaa:	50                   	push   eax
c001feab:	50                   	push   eax
c001feac:	6a 00                	push   0x0
c001feae:	56                   	push   esi
c001feaf:	52                   	push   edx
c001feb0:	53                   	push   ebx
c001feb1:	51                   	push   ecx
c001feb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001feb6:	e8 cd fb ff ff       	call   c001fa88 <ATA::access(unsigned long long, int, void*, bool)>
c001febb:	83 c4 20             	add    esp,0x20
c001febe:	85 c0                	test   eax,eax
c001fec0:	0f 95 c0             	setne  al
c001fec3:	0f b6 c0             	movzx  eax,al
c001fec6:	5b                   	pop    ebx
c001fec7:	5e                   	pop    esi
c001fec8:	5f                   	pop    edi
c001fec9:	c3                   	ret    

c001feca <ATA::write(unsigned long long, int, void*)>:
c001feca:	55                   	push   ebp
c001fecb:	57                   	push   edi
c001fecc:	56                   	push   esi
c001fecd:	53                   	push   ebx
c001fece:	83 ec 18             	sub    esp,0x18
c001fed1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fed5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fed9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001fedd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fee1:	68 e1 72 02 c0       	push   0xc00272e1
c001fee6:	e8 5c d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001feeb:	8d 53 ff             	lea    edx,[ebx-0x1]
c001feee:	83 c4 10             	add    esp,0x10
c001fef1:	b8 04 00 00 00       	mov    eax,0x4
c001fef6:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001fefc:	77 25                	ja     c001ff23 <ATA::write(unsigned long long, int, void*)+0x59>
c001fefe:	b8 06 00 00 00       	mov    eax,0x6
c001ff03:	85 f6                	test   esi,esi
c001ff05:	74 1c                	je     c001ff23 <ATA::write(unsigned long long, int, void*)+0x59>
c001ff07:	50                   	push   eax
c001ff08:	50                   	push   eax
c001ff09:	6a 01                	push   0x1
c001ff0b:	56                   	push   esi
c001ff0c:	53                   	push   ebx
c001ff0d:	55                   	push   ebp
c001ff0e:	57                   	push   edi
c001ff0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ff13:	e8 70 fb ff ff       	call   c001fa88 <ATA::access(unsigned long long, int, void*, bool)>
c001ff18:	83 c4 20             	add    esp,0x20
c001ff1b:	85 c0                	test   eax,eax
c001ff1d:	0f 95 c0             	setne  al
c001ff20:	0f b6 c0             	movzx  eax,al
c001ff23:	83 c4 0c             	add    esp,0xc
c001ff26:	5b                   	pop    ebx
c001ff27:	5e                   	pop    esi
c001ff28:	5f                   	pop    edi
c001ff29:	5d                   	pop    ebp
c001ff2a:	c3                   	ret    
c001ff2b:	90                   	nop

c001ff2c <ATA::detectCHS()>:
c001ff2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ff30:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ff36:	c1 e0 06             	shl    eax,0x6
c001ff39:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ff3f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ff49:	c7 44 24 04 ed 72 02 c0 	mov    DWORD PTR [esp+0x4],0xc00272ed
c001ff51:	e9 8f 50 ff ff       	jmp    c0014fe5 <Krnl::panic(char const*)>

c001ff56 <ATA::open(int, int, void*)>:
c001ff56:	53                   	push   ebx
c001ff57:	83 ec 08             	sub    esp,0x8
c001ff5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ff62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ff66:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ff6c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ff72:	c1 e0 06             	shl    eax,0x6
c001ff75:	01 d0                	add    eax,edx
c001ff77:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ff7e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ff84:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ff8b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ff95:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001ff9b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ffa2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ffa9:	75 0c                	jne    c001ffb7 <ATA::open(int, int, void*)+0x61>
c001ffab:	83 ec 0c             	sub    esp,0xc
c001ffae:	53                   	push   ebx
c001ffaf:	e8 78 ff ff ff       	call   c001ff2c <ATA::detectCHS()>
c001ffb4:	83 c4 10             	add    esp,0x10
c001ffb7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ffbd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ffc3:	c1 e0 06             	shl    eax,0x6
c001ffc6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ffcd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ffd7:	d1 e8                	shr    eax,1
c001ffd9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ffdf:	6a 04                	push   0x4
c001ffe1:	6a 0c                	push   0xc
c001ffe3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffea:	50                   	push   eax
c001ffeb:	52                   	push   edx
c001ffec:	e8 69 ea ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fff1:	90                   	nop
c001fff2:	90                   	nop
c001fff3:	6a 00                	push   0x0
c001fff5:	6a 0c                	push   0xc
c001fff7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fffe:	50                   	push   eax
c001ffff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020005:	e8 50 ea ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002000a:	83 c4 14             	add    esp,0x14
c002000d:	53                   	push   ebx
c002000e:	e8 47 ea fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c0020013:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020016:	e8 73 0a ff ff       	call   c0010a8e <createPartitionsForDisk(PhysicalDisk*)>
c002001b:	31 c0                	xor    eax,eax
c002001d:	83 c4 18             	add    esp,0x18
c0020020:	5b                   	pop    ebx
c0020021:	c3                   	ret    

c0020022 <ATAPI::write(unsigned long long, int, void*)>:
c0020022:	b8 03 00 00 00       	mov    eax,0x3
c0020027:	c3                   	ret    

c0020028 <ATAPI::close(int, int, void*)>:
c0020028:	83 ec 0c             	sub    esp,0xc
c002002b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020035:	85 c0                	test   eax,eax
c0020037:	74 0c                	je     c0020045 <ATAPI::close(int, int, void*)+0x1d>
c0020039:	83 ec 0c             	sub    esp,0xc
c002003c:	8b 10                	mov    edx,DWORD PTR [eax]
c002003e:	50                   	push   eax
c002003f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020042:	83 c4 10             	add    esp,0x10
c0020045:	31 c0                	xor    eax,eax
c0020047:	83 c4 0c             	add    esp,0xc
c002004a:	c3                   	ret    
c002004b:	90                   	nop

c002004c <ATAPI::ATAPI()>:
c002004c:	83 ec 0c             	sub    esp,0xc
c002004f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020053:	83 ec 04             	sub    esp,0x4
c0020056:	68 00 08 00 00       	push   0x800
c002005b:	68 d9 75 02 c0       	push   0xc00275d9
c0020060:	50                   	push   eax
c0020061:	e8 8c e9 fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020066:	83 c4 10             	add    esp,0x10
c0020069:	ba 6c 73 02 c0       	mov    edx,0xc002736c
c002006e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020072:	89 10                	mov    DWORD PTR [eax],edx
c0020074:	90                   	nop
c0020075:	83 c4 0c             	add    esp,0xc
c0020078:	c3                   	ret    
c0020079:	90                   	nop

c002007a <ATAPI::readyForCommand()>:
c002007a:	56                   	push   esi
c002007b:	53                   	push   ebx
c002007c:	53                   	push   ebx
c002007d:	31 db                	xor    ebx,ebx
c002007f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020083:	51                   	push   ecx
c0020084:	6a 0c                	push   0xc
c0020086:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002008d:	50                   	push   eax
c002008e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020094:	e8 81 ea ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c0020099:	83 c4 10             	add    esp,0x10
c002009c:	a8 88                	test   al,0x88
c002009e:	74 25                	je     c00200c5 <ATAPI::readyForCommand()+0x4b>
c00200a0:	43                   	inc    ebx
c00200a1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00200a7:	7e da                	jle    c0020083 <ATAPI::readyForCommand()+0x9>
c00200a9:	83 ec 0c             	sub    esp,0xc
c00200ac:	68 5e 01 00 00       	push   0x15e
c00200b1:	e8 32 8e ff ff       	call   c0018ee8 <milliTenthSleep(unsigned int)>
c00200b6:	83 c4 10             	add    esp,0x10
c00200b9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00200bf:	75 c2                	jne    c0020083 <ATAPI::readyForCommand()+0x9>
c00200c1:	31 c0                	xor    eax,eax
c00200c3:	eb 02                	jmp    c00200c7 <ATAPI::readyForCommand()+0x4d>
c00200c5:	b0 01                	mov    al,0x1
c00200c7:	5a                   	pop    edx
c00200c8:	5b                   	pop    ebx
c00200c9:	5e                   	pop    esi
c00200ca:	c3                   	ret    
c00200cb:	90                   	nop

c00200cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00200cc:	55                   	push   ebp
c00200cd:	57                   	push   edi
c00200ce:	56                   	push   esi
c00200cf:	53                   	push   ebx
c00200d0:	83 ec 20             	sub    esp,0x20
c00200d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00200d7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00200db:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00200df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00200e3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00200e7:	6a 01                	push   0x1
c00200e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00200f0:	50                   	push   eax
c00200f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00200f7:	e8 66 eb ff ff       	call   c001ec62 <IDE::enableIRQs(unsigned char, bool)>
c00200fc:	5e                   	pop    esi
c00200fd:	58                   	pop    eax
c00200fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020105:	50                   	push   eax
c0020106:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002010c:	e8 23 e9 ff ff       	call   c001ea34 <IDE::prepareInterrupt(unsigned char)>
c0020111:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020114:	e8 61 ff ff ff       	call   c002007a <ATAPI::readyForCommand()>
c0020119:	83 c4 10             	add    esp,0x10
c002011c:	84 c0                	test   al,al
c002011e:	75 0a                	jne    c002012a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020120:	bb 01 00 00 00       	mov    ebx,0x1
c0020125:	e9 57 02 00 00       	jmp    c0020381 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002012a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0020130:	c1 e0 04             	shl    eax,0x4
c0020133:	0f b6 c0             	movzx  eax,al
c0020136:	50                   	push   eax
c0020137:	6a 06                	push   0x6
c0020139:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020140:	50                   	push   eax
c0020141:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020147:	e8 0e e9 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002014c:	6a 00                	push   0x0
c002014e:	6a 01                	push   0x1
c0020150:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020157:	50                   	push   eax
c0020158:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002015e:	e8 f7 e8 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020163:	83 c4 20             	add    esp,0x20
c0020166:	0f b6 c3             	movzx  eax,bl
c0020169:	0f b6 df             	movzx  ebx,bh
c002016c:	50                   	push   eax
c002016d:	6a 04                	push   0x4
c002016f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020176:	50                   	push   eax
c0020177:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002017d:	e8 d8 e8 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020182:	53                   	push   ebx
c0020183:	6a 05                	push   0x5
c0020185:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002018c:	50                   	push   eax
c002018d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020193:	e8 c2 e8 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020198:	83 c4 20             	add    esp,0x20
c002019b:	68 a0 00 00 00       	push   0xa0
c00201a0:	6a 07                	push   0x7
c00201a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201a9:	50                   	push   eax
c00201aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201b0:	e8 a5 e8 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201b5:	83 c4 0c             	add    esp,0xc
c00201b8:	6a 01                	push   0x1
c00201ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201c1:	50                   	push   eax
c00201c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201c8:	e8 25 f3 ff ff       	call   c001f4f2 <IDE::polling(unsigned char, unsigned int)>
c00201cd:	83 c4 10             	add    esp,0x10
c00201d0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00201d6:	84 c0                	test   al,al
c00201d8:	74 23                	je     c00201fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00201da:	0f b6 d8             	movzx  ebx,al
c00201dd:	0f b6 d2             	movzx  edx,dl
c00201e0:	53                   	push   ebx
c00201e1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00201e8:	50                   	push   eax
c00201e9:	52                   	push   edx
c00201ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201f0:	e8 4d f2 ff ff       	call   c001f442 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00201f5:	83 c4 10             	add    esp,0x10
c00201f8:	e9 84 01 00 00       	jmp    c0020381 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00201fd:	0f b6 d2             	movzx  edx,dl
c0020200:	53                   	push   ebx
c0020201:	53                   	push   ebx
c0020202:	52                   	push   edx
c0020203:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020209:	e8 3a e8 ff ff       	call   c001ea48 <IDE::getBase(unsigned char)>
c002020e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020212:	b9 06 00 00 00       	mov    ecx,0x6
c0020217:	89 c2                	mov    edx,eax
c0020219:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002021c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020220:	83 c4 10             	add    esp,0x10
c0020223:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020229:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020230:	85 db                	test   ebx,ebx
c0020232:	0f 84 ec 00 00 00    	je     c0020324 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020238:	51                   	push   ecx
c0020239:	51                   	push   ecx
c002023a:	52                   	push   edx
c002023b:	50                   	push   eax
c002023c:	e8 87 e9 ff ff       	call   c001ebc8 <IDE::waitInterrupt(unsigned char)>
c0020241:	83 c4 10             	add    esp,0x10
c0020244:	84 c0                	test   al,al
c0020246:	0f 84 d4 fe ff ff    	je     c0020120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002024c:	56                   	push   esi
c002024d:	56                   	push   esi
c002024e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020255:	50                   	push   eax
c0020256:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002025c:	e8 d3 e7 ff ff       	call   c001ea34 <IDE::prepareInterrupt(unsigned char)>
c0020261:	83 c4 0c             	add    esp,0xc
c0020264:	6a 04                	push   0x4
c0020266:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002026d:	50                   	push   eax
c002026e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020274:	e8 a1 e8 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c0020279:	83 c4 0c             	add    esp,0xc
c002027c:	89 c6                	mov    esi,eax
c002027e:	6a 05                	push   0x5
c0020280:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020287:	50                   	push   eax
c0020288:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002028e:	e8 87 e8 ff ff       	call   c001eb1a <IDE::read(unsigned char, unsigned char)>
c0020293:	89 f1                	mov    ecx,esi
c0020295:	0f b6 c0             	movzx  eax,al
c0020298:	0f b6 f1             	movzx  esi,cl
c002029b:	c1 e0 08             	shl    eax,0x8
c002029e:	09 c6                	or     esi,eax
c00202a0:	d1 fe                	sar    esi,1
c00202a2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00202a6:	83 c4 10             	add    esp,0x10
c00202a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00202ae:	74 41                	je     c00202f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00202b0:	31 c9                	xor    ecx,ecx
c00202b2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00202b8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00202bf:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00202c3:	75 0a                	jne    c00202cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00202c5:	01 c9                	add    ecx,ecx
c00202c7:	01 cd                	add    ebp,ecx
c00202c9:	4b                   	dec    ebx
c00202ca:	e9 54 ff ff ff       	jmp    c0020223 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00202cf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00202d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00202d8:	51                   	push   ecx
c00202d9:	51                   	push   ecx
c00202da:	52                   	push   edx
c00202db:	50                   	push   eax
c00202dc:	e8 67 e7 ff ff       	call   c001ea48 <IDE::getBase(unsigned char)>
c00202e1:	89 c2                	mov    edx,eax
c00202e3:	89 f0                	mov    eax,esi
c00202e5:	66 ef                	out    dx,ax
c00202e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00202eb:	83 c4 10             	add    esp,0x10
c00202ee:	41                   	inc    ecx
c00202ef:	eb c1                	jmp    c00202b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00202f1:	31 f6                	xor    esi,esi
c00202f3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00202f9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020300:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020304:	75 06                	jne    c002030c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0020306:	01 f6                	add    esi,esi
c0020308:	01 f5                	add    ebp,esi
c002030a:	eb bd                	jmp    c00202c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002030c:	51                   	push   ecx
c002030d:	51                   	push   ecx
c002030e:	52                   	push   edx
c002030f:	50                   	push   eax
c0020310:	e8 33 e7 ff ff       	call   c001ea48 <IDE::getBase(unsigned char)>
c0020315:	89 c2                	mov    edx,eax
c0020317:	66 ed                	in     ax,dx
c0020319:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002031e:	83 c4 10             	add    esp,0x10
c0020321:	46                   	inc    esi
c0020322:	eb cf                	jmp    c00202f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0020324:	51                   	push   ecx
c0020325:	51                   	push   ecx
c0020326:	52                   	push   edx
c0020327:	50                   	push   eax
c0020328:	e8 9b e8 ff ff       	call   c001ebc8 <IDE::waitInterrupt(unsigned char)>
c002032d:	83 c4 10             	add    esp,0x10
c0020330:	84 c0                	test   al,al
c0020332:	0f 84 e8 fd ff ff    	je     c0020120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020338:	bb a0 86 01 00       	mov    ebx,0x186a0
c002033d:	52                   	push   edx
c002033e:	52                   	push   edx
c002033f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020346:	50                   	push   eax
c0020347:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002034d:	e8 e2 e6 ff ff       	call   c001ea34 <IDE::prepareInterrupt(unsigned char)>
c0020352:	83 c4 10             	add    esp,0x10
c0020355:	50                   	push   eax
c0020356:	50                   	push   eax
c0020357:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002035e:	50                   	push   eax
c002035f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020365:	e8 de e6 ff ff       	call   c001ea48 <IDE::getBase(unsigned char)>
c002036a:	8d 50 07             	lea    edx,[eax+0x7]
c002036d:	ec                   	in     al,dx
c002036e:	83 c4 10             	add    esp,0x10
c0020371:	a8 88                	test   al,0x88
c0020373:	74 0a                	je     c002037f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020375:	4b                   	dec    ebx
c0020376:	75 dd                	jne    c0020355 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020378:	bb 02 00 00 00       	mov    ebx,0x2
c002037d:	eb 02                	jmp    c0020381 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002037f:	31 db                	xor    ebx,ebx
c0020381:	83 c4 1c             	add    esp,0x1c
c0020384:	89 d8                	mov    eax,ebx
c0020386:	5b                   	pop    ebx
c0020387:	5e                   	pop    esi
c0020388:	5f                   	pop    edi
c0020389:	5d                   	pop    ebp
c002038a:	c3                   	ret    
c002038b:	90                   	nop

c002038c <ATAPI::diskRemoved()>:
c002038c:	53                   	push   ebx
c002038d:	83 ec 14             	sub    esp,0x14
c0020390:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020394:	68 e5 75 02 c0       	push   0xc00275e5
c0020399:	e8 a9 cc fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002039e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00203a5:	c7 04 24 38 73 02 c0 	mov    DWORD PTR [esp],0xc0027338
c00203ac:	e8 96 cc fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00203b1:	58                   	pop    eax
c00203b2:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00203b8:	e8 51 04 ff ff       	call   c001080e <LogicalDisk::unmount()>
c00203bd:	c7 04 24 47 73 02 c0 	mov    DWORD PTR [esp],0xc0027347
c00203c4:	e8 7e cc fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00203c9:	5a                   	pop    edx
c00203ca:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00203d0:	e8 3f 0e ff ff       	call   c0011214 <VCache::writeWriteBuffer()>
c00203d5:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00203db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00203df:	83 c4 18             	add    esp,0x18
c00203e2:	5b                   	pop    ebx
c00203e3:	e9 1c 0e ff ff       	jmp    c0011204 <VCache::invalidateReadBuffer()>

c00203e8 <ATAPI::eject()>:
c00203e8:	57                   	push   edi
c00203e9:	b9 03 00 00 00       	mov    ecx,0x3
c00203ee:	53                   	push   ebx
c00203ef:	83 ec 14             	sub    esp,0x14
c00203f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00203f6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00203fa:	fc                   	cld    
c00203fb:	31 c0                	xor    eax,eax
c00203fd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00203ff:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020404:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020409:	50                   	push   eax
c002040a:	50                   	push   eax
c002040b:	6a 00                	push   0x0
c002040d:	6a 00                	push   0x0
c002040f:	6a 00                	push   0x0
c0020411:	6a 02                	push   0x2
c0020413:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020417:	50                   	push   eax
c0020418:	53                   	push   ebx
c0020419:	e8 ae fc ff ff       	call   c00200cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002041e:	83 c4 14             	add    esp,0x14
c0020421:	53                   	push   ebx
c0020422:	e8 65 ff ff ff       	call   c002038c <ATAPI::diskRemoved()>
c0020427:	83 c4 24             	add    esp,0x24
c002042a:	31 c0                	xor    eax,eax
c002042c:	5b                   	pop    ebx
c002042d:	5f                   	pop    edi
c002042e:	c3                   	ret    
c002042f:	90                   	nop

c0020430 <ATAPI::diskInserted()>:
c0020430:	83 ec 18             	sub    esp,0x18
c0020433:	68 fc 75 02 c0       	push   0xc00275fc
c0020438:	e8 0a cc fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002043d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020441:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020448:	83 c4 1c             	add    esp,0x1c
c002044b:	c3                   	ret    

c002044c <ATAPI::detectMedia()>:
c002044c:	56                   	push   esi
c002044d:	53                   	push   ebx
c002044e:	83 ec 28             	sub    esp,0x28
c0020451:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020455:	6a 0c                	push   0xc
c0020457:	6a 00                	push   0x0
c0020459:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002045d:	56                   	push   esi
c002045e:	e8 21 02 fe ff       	call   c0000684 <memset>
c0020463:	58                   	pop    eax
c0020464:	5a                   	pop    edx
c0020465:	6a 00                	push   0x0
c0020467:	6a 00                	push   0x0
c0020469:	6a 00                	push   0x0
c002046b:	6a 00                	push   0x0
c002046d:	56                   	push   esi
c002046e:	53                   	push   ebx
c002046f:	e8 58 fc ff ff       	call   c00200cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020474:	83 c4 1c             	add    esp,0x1c
c0020477:	6a 0c                	push   0xc
c0020479:	6a 00                	push   0x0
c002047b:	56                   	push   esi
c002047c:	e8 03 02 fe ff       	call   c0000684 <memset>
c0020481:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020486:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002048b:	59                   	pop    ecx
c002048c:	58                   	pop    eax
c002048d:	6a 01                	push   0x1
c002048f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020493:	50                   	push   eax
c0020494:	6a 00                	push   0x0
c0020496:	6a 12                	push   0x12
c0020498:	56                   	push   esi
c0020499:	53                   	push   ebx
c002049a:	e8 2d fc ff ff       	call   c00200cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002049f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00204a3:	83 c4 20             	add    esp,0x20
c00204a6:	83 e0 7f             	and    eax,0x7f
c00204a9:	3c 70                	cmp    al,0x70
c00204ab:	74 15                	je     c00204c2 <ATAPI::detectMedia()+0x76>
c00204ad:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204b4:	75 0c                	jne    c00204c2 <ATAPI::detectMedia()+0x76>
c00204b6:	83 ec 0c             	sub    esp,0xc
c00204b9:	53                   	push   ebx
c00204ba:	e8 71 ff ff ff       	call   c0020430 <ATAPI::diskInserted()>
c00204bf:	83 c4 10             	add    esp,0x10
c00204c2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00204c6:	83 e0 0f             	and    eax,0xf
c00204c9:	3c 02                	cmp    al,0x2
c00204cb:	75 1b                	jne    c00204e8 <ATAPI::detectMedia()+0x9c>
c00204cd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00204d2:	75 2d                	jne    c0020501 <ATAPI::detectMedia()+0xb5>
c00204d4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204db:	74 24                	je     c0020501 <ATAPI::detectMedia()+0xb5>
c00204dd:	83 ec 0c             	sub    esp,0xc
c00204e0:	53                   	push   ebx
c00204e1:	e8 a6 fe ff ff       	call   c002038c <ATAPI::diskRemoved()>
c00204e6:	eb 16                	jmp    c00204fe <ATAPI::detectMedia()+0xb2>
c00204e8:	84 c0                	test   al,al
c00204ea:	75 15                	jne    c0020501 <ATAPI::detectMedia()+0xb5>
c00204ec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204f3:	75 0c                	jne    c0020501 <ATAPI::detectMedia()+0xb5>
c00204f5:	83 ec 0c             	sub    esp,0xc
c00204f8:	53                   	push   ebx
c00204f9:	e8 32 ff ff ff       	call   c0020430 <ATAPI::diskInserted()>
c00204fe:	83 c4 10             	add    esp,0x10
c0020501:	83 c4 24             	add    esp,0x24
c0020504:	5b                   	pop    ebx
c0020505:	5e                   	pop    esi
c0020506:	c3                   	ret    
c0020507:	90                   	nop

c0020508 <ATAPI::open(int, int, void*)>:
c0020508:	56                   	push   esi
c0020509:	53                   	push   ebx
c002050a:	50                   	push   eax
c002050b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002050f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020513:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020517:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002051d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020523:	c1 e0 06             	shl    eax,0x6
c0020526:	01 d0                	add    eax,edx
c0020528:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002052f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020535:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002053c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020546:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002054c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020553:	6a 04                	push   0x4
c0020555:	6a 0c                	push   0xc
c0020557:	51                   	push   ecx
c0020558:	52                   	push   edx
c0020559:	e8 fc e4 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002055e:	90                   	nop
c002055f:	90                   	nop
c0020560:	6a 00                	push   0x0
c0020562:	6a 0c                	push   0xc
c0020564:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002056b:	50                   	push   eax
c002056c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020572:	e8 e3 e4 ff ff       	call   c001ea5a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020577:	83 c4 14             	add    esp,0x14
c002057a:	68 74 01 00 00       	push   0x174
c002057f:	e8 d7 97 fe ff       	call   c0009d5b <malloc>
c0020584:	83 c4 0c             	add    esp,0xc
c0020587:	89 c6                	mov    esi,eax
c0020589:	6a 00                	push   0x0
c002058b:	68 ff ff ff 7f       	push   0x7fffffff
c0020590:	6a 00                	push   0x0
c0020592:	6a 00                	push   0x0
c0020594:	53                   	push   ebx
c0020595:	68 c4 76 02 c0       	push   0xc00276c4
c002059a:	50                   	push   eax
c002059b:	e8 7a 00 ff ff       	call   c001061a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00205a0:	83 c4 14             	add    esp,0x14
c00205a3:	56                   	push   esi
c00205a4:	e8 27 01 ff ff       	call   c00106d0 <LogicalDisk::assignDriveLetter()>
c00205a9:	5a                   	pop    edx
c00205aa:	0f be c0             	movsx  eax,al
c00205ad:	59                   	pop    ecx
c00205ae:	50                   	push   eax
c00205af:	68 55 73 02 c0       	push   0xc0027355
c00205b4:	e8 8e ca fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00205b9:	58                   	pop    eax
c00205ba:	5a                   	pop    edx
c00205bb:	56                   	push   esi
c00205bc:	53                   	push   ebx
c00205bd:	e8 f8 df fe ff       	call   c000e5ba <Device::addChild(Device*)>
c00205c2:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00205c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00205cb:	e8 8a e4 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c00205d0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00205d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00205da:	e8 6d fe ff ff       	call   c002044c <ATAPI::detectMedia()>
c00205df:	83 c4 14             	add    esp,0x14
c00205e2:	31 c0                	xor    eax,eax
c00205e4:	5b                   	pop    ebx
c00205e5:	5e                   	pop    esi
c00205e6:	c3                   	ret    
c00205e7:	90                   	nop

c00205e8 <ATAPI::read(unsigned long long, int, void*)>:
c00205e8:	55                   	push   ebp
c00205e9:	57                   	push   edi
c00205ea:	56                   	push   esi
c00205eb:	53                   	push   ebx
c00205ec:	83 ec 1c             	sub    esp,0x1c
c00205ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00205f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00205f7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00205fb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020602:	74 41                	je     c0020645 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020604:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020608:	b9 03 00 00 00       	mov    ecx,0x3
c002060d:	fc                   	cld    
c002060e:	31 c0                	xor    eax,eax
c0020610:	86 fb                	xchg   bl,bh
c0020612:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020614:	c1 c3 10             	rol    ebx,0x10
c0020617:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002061c:	89 e8                	mov    eax,ebp
c002061e:	86 fb                	xchg   bl,bh
c0020620:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020624:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0020628:	50                   	push   eax
c0020629:	50                   	push   eax
c002062a:	55                   	push   ebp
c002062b:	c1 e5 0b             	shl    ebp,0xb
c002062e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020632:	6a 00                	push   0x0
c0020634:	55                   	push   ebp
c0020635:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020639:	50                   	push   eax
c002063a:	56                   	push   esi
c002063b:	e8 8c fa ff ff       	call   c00200cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020640:	83 c4 20             	add    esp,0x20
c0020643:	eb 1a                	jmp    c002065f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020645:	83 ec 0c             	sub    esp,0xc
c0020648:	56                   	push   esi
c0020649:	e8 fe fd ff ff       	call   c002044c <ATAPI::detectMedia()>
c002064e:	83 c4 10             	add    esp,0x10
c0020651:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020658:	75 aa                	jne    c0020604 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002065a:	b8 02 00 00 00       	mov    eax,0x2
c002065f:	83 c4 1c             	add    esp,0x1c
c0020662:	5b                   	pop    ebx
c0020663:	5e                   	pop    esi
c0020664:	5f                   	pop    edi
c0020665:	5d                   	pop    ebp
c0020666:	c3                   	ret    
c0020667:	90                   	nop

c0020668 <SATA::close(int, int, void*)>:
c0020668:	83 ec 0c             	sub    esp,0xc
c002066b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002066f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020675:	85 c0                	test   eax,eax
c0020677:	74 0c                	je     c0020685 <SATA::close(int, int, void*)+0x1d>
c0020679:	83 ec 0c             	sub    esp,0xc
c002067c:	8b 10                	mov    edx,DWORD PTR [eax]
c002067e:	50                   	push   eax
c002067f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020682:	83 c4 10             	add    esp,0x10
c0020685:	31 c0                	xor    eax,eax
c0020687:	83 c4 0c             	add    esp,0xc
c002068a:	c3                   	ret    
c002068b:	90                   	nop

c002068c <SATA::powerSaving(PowerSavingLevel)>:
c002068c:	c3                   	ret    
c002068d:	90                   	nop

c002068e <SATA::open(int, int, void*)>:
c002068e:	56                   	push   esi
c002068f:	53                   	push   ebx
c0020690:	51                   	push   ecx
c0020691:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020695:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c002069c:	74 2d                	je     c00206cb <SATA::open(int, int, void*)+0x3d>
c002069e:	83 ec 0c             	sub    esp,0xc
c00206a1:	68 9c 73 02 c0       	push   0xc002739c
c00206a6:	e8 0a 97 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00206ab:	83 c4 10             	add    esp,0x10
c00206ae:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c00206b5:	75 14                	jne    c00206cb <SATA::open(int, int, void*)+0x3d>
c00206b7:	e4 60                	in     al,0x60
c00206b9:	3c 5a                	cmp    al,0x5a
c00206bb:	74 04                	je     c00206c1 <SATA::open(int, int, void*)+0x33>
c00206bd:	3c 1c                	cmp    al,0x1c
c00206bf:	75 f6                	jne    c00206b7 <SATA::open(int, int, void*)+0x29>
c00206c1:	e4 60                	in     al,0x60
c00206c3:	3c 5a                	cmp    al,0x5a
c00206c5:	74 fa                	je     c00206c1 <SATA::open(int, int, void*)+0x33>
c00206c7:	3c 1c                	cmp    al,0x1c
c00206c9:	74 f6                	je     c00206c1 <SATA::open(int, int, void*)+0x33>
c00206cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00206cf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00206d9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00206df:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00206e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00206ed:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00206f7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00206fd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020704:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c002070b:	74 2d                	je     c002073a <SATA::open(int, int, void*)+0xac>
c002070d:	83 ec 0c             	sub    esp,0xc
c0020710:	68 a9 73 02 c0       	push   0xc00273a9
c0020715:	e8 9b 96 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002071a:	83 c4 10             	add    esp,0x10
c002071d:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020724:	75 14                	jne    c002073a <SATA::open(int, int, void*)+0xac>
c0020726:	e4 60                	in     al,0x60
c0020728:	3c 1c                	cmp    al,0x1c
c002072a:	74 04                	je     c0020730 <SATA::open(int, int, void*)+0xa2>
c002072c:	3c 5a                	cmp    al,0x5a
c002072e:	75 f6                	jne    c0020726 <SATA::open(int, int, void*)+0x98>
c0020730:	e4 60                	in     al,0x60
c0020732:	3c 5a                	cmp    al,0x5a
c0020734:	74 fa                	je     c0020730 <SATA::open(int, int, void*)+0xa2>
c0020736:	3c 1c                	cmp    al,0x1c
c0020738:	74 f6                	je     c0020730 <SATA::open(int, int, void*)+0xa2>
c002073a:	e8 d3 9c fe ff       	call   c000a412 <Phys::allocatePage()>
c002073f:	89 c6                	mov    esi,eax
c0020741:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020747:	81 c6 00 10 00 00    	add    esi,0x1000
c002074d:	e8 c0 9c fe ff       	call   c000a412 <Phys::allocatePage()>
c0020752:	39 c6                	cmp    esi,eax
c0020754:	74 10                	je     c0020766 <SATA::open(int, int, void*)+0xd8>
c0020756:	83 ec 0c             	sub    esp,0xc
c0020759:	68 b6 73 02 c0       	push   0xc00273b6
c002075e:	e8 82 48 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c002076d:	74 2d                	je     c002079c <SATA::open(int, int, void*)+0x10e>
c002076f:	83 ec 0c             	sub    esp,0xc
c0020772:	68 ca 73 02 c0       	push   0xc00273ca
c0020777:	e8 39 96 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002077c:	83 c4 10             	add    esp,0x10
c002077f:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020786:	75 14                	jne    c002079c <SATA::open(int, int, void*)+0x10e>
c0020788:	e4 60                	in     al,0x60
c002078a:	3c 1c                	cmp    al,0x1c
c002078c:	74 04                	je     c0020792 <SATA::open(int, int, void*)+0x104>
c002078e:	3c 5a                	cmp    al,0x5a
c0020790:	75 f6                	jne    c0020788 <SATA::open(int, int, void*)+0xfa>
c0020792:	e4 60                	in     al,0x60
c0020794:	3c 5a                	cmp    al,0x5a
c0020796:	74 fa                	je     c0020792 <SATA::open(int, int, void*)+0x104>
c0020798:	3c 1c                	cmp    al,0x1c
c002079a:	74 f6                	je     c0020792 <SATA::open(int, int, void*)+0x104>
c002079c:	83 ec 0c             	sub    esp,0xc
c002079f:	6a 02                	push   0x2
c00207a1:	e8 7b b5 fe ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c00207a6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00207ac:	6a 03                	push   0x3
c00207ae:	50                   	push   eax
c00207af:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00207b5:	ff 35 b0 89 02 c0    	push   DWORD PTR ds:0xc00289b0
c00207bb:	e8 08 bc fe ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00207c0:	83 c4 20             	add    esp,0x20
c00207c3:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c00207ca:	74 2d                	je     c00207f9 <SATA::open(int, int, void*)+0x16b>
c00207cc:	83 ec 0c             	sub    esp,0xc
c00207cf:	68 d7 73 02 c0       	push   0xc00273d7
c00207d4:	e8 dc 95 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00207d9:	83 c4 10             	add    esp,0x10
c00207dc:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c00207e3:	75 14                	jne    c00207f9 <SATA::open(int, int, void*)+0x16b>
c00207e5:	e4 60                	in     al,0x60
c00207e7:	3c 1c                	cmp    al,0x1c
c00207e9:	74 04                	je     c00207ef <SATA::open(int, int, void*)+0x161>
c00207eb:	3c 5a                	cmp    al,0x5a
c00207ed:	75 f6                	jne    c00207e5 <SATA::open(int, int, void*)+0x157>
c00207ef:	e4 60                	in     al,0x60
c00207f1:	3c 5a                	cmp    al,0x5a
c00207f3:	74 fa                	je     c00207ef <SATA::open(int, int, void*)+0x161>
c00207f5:	3c 1c                	cmp    al,0x1c
c00207f7:	74 f6                	je     c00207ef <SATA::open(int, int, void*)+0x161>
c00207f9:	83 ec 0c             	sub    esp,0xc
c00207fc:	53                   	push   ebx
c00207fd:	e8 58 e2 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c0020802:	83 c4 10             	add    esp,0x10
c0020805:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c002080c:	74 2d                	je     c002083b <SATA::open(int, int, void*)+0x1ad>
c002080e:	83 ec 0c             	sub    esp,0xc
c0020811:	68 e4 73 02 c0       	push   0xc00273e4
c0020816:	e8 9a 95 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002081b:	83 c4 10             	add    esp,0x10
c002081e:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020825:	75 14                	jne    c002083b <SATA::open(int, int, void*)+0x1ad>
c0020827:	e4 60                	in     al,0x60
c0020829:	3c 1c                	cmp    al,0x1c
c002082b:	74 04                	je     c0020831 <SATA::open(int, int, void*)+0x1a3>
c002082d:	3c 5a                	cmp    al,0x5a
c002082f:	75 f6                	jne    c0020827 <SATA::open(int, int, void*)+0x199>
c0020831:	e4 60                	in     al,0x60
c0020833:	3c 5a                	cmp    al,0x5a
c0020835:	74 fa                	je     c0020831 <SATA::open(int, int, void*)+0x1a3>
c0020837:	3c 1c                	cmp    al,0x1c
c0020839:	74 f6                	je     c0020831 <SATA::open(int, int, void*)+0x1a3>
c002083b:	83 ec 0c             	sub    esp,0xc
c002083e:	53                   	push   ebx
c002083f:	e8 4a 02 ff ff       	call   c0010a8e <createPartitionsForDisk(PhysicalDisk*)>
c0020844:	83 c4 10             	add    esp,0x10
c0020847:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c002084e:	74 2d                	je     c002087d <SATA::open(int, int, void*)+0x1ef>
c0020850:	83 ec 0c             	sub    esp,0xc
c0020853:	68 f1 73 02 c0       	push   0xc00273f1
c0020858:	e8 58 95 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002085d:	83 c4 10             	add    esp,0x10
c0020860:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020867:	75 14                	jne    c002087d <SATA::open(int, int, void*)+0x1ef>
c0020869:	e4 60                	in     al,0x60
c002086b:	3c 1c                	cmp    al,0x1c
c002086d:	74 04                	je     c0020873 <SATA::open(int, int, void*)+0x1e5>
c002086f:	3c 5a                	cmp    al,0x5a
c0020871:	75 f6                	jne    c0020869 <SATA::open(int, int, void*)+0x1db>
c0020873:	e4 60                	in     al,0x60
c0020875:	3c 5a                	cmp    al,0x5a
c0020877:	74 fa                	je     c0020873 <SATA::open(int, int, void*)+0x1e5>
c0020879:	3c 1c                	cmp    al,0x1c
c002087b:	74 f6                	je     c0020873 <SATA::open(int, int, void*)+0x1e5>
c002087d:	5a                   	pop    edx
c002087e:	31 c0                	xor    eax,eax
c0020880:	5b                   	pop    ebx
c0020881:	5e                   	pop    esi
c0020882:	c3                   	ret    
c0020883:	90                   	nop

c0020884 <SATA::SATA()>:
c0020884:	83 ec 0c             	sub    esp,0xc
c0020887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002088b:	83 ec 04             	sub    esp,0x4
c002088e:	68 00 02 00 00       	push   0x200
c0020893:	68 fe 73 02 c0       	push   0xc00273fe
c0020898:	50                   	push   eax
c0020899:	e8 54 e1 fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002089e:	83 c4 10             	add    esp,0x10
c00208a1:	ba a8 75 02 c0       	mov    edx,0xc00275a8
c00208a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208aa:	89 10                	mov    DWORD PTR [eax],edx
c00208ac:	90                   	nop
c00208ad:	83 c4 0c             	add    esp,0xc
c00208b0:	c3                   	ret    
c00208b1:	90                   	nop

c00208b2 <SATA::access(unsigned long long, int, void*, bool)>:
c00208b2:	55                   	push   ebp
c00208b3:	57                   	push   edi
c00208b4:	56                   	push   esi
c00208b5:	53                   	push   ebx
c00208b6:	83 ec 2c             	sub    esp,0x2c
c00208b9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00208bd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00208c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208c5:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c00208cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00208d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00208d4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00208d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208dc:	75 19                	jne    c00208f7 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c00208de:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00208e3:	7e 41                	jle    c0020926 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00208e5:	83 ec 0c             	sub    esp,0xc
c00208e8:	68 1d 74 02 c0       	push   0xc002741d
c00208ed:	e8 f3 46 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c00208f2:	83 c4 10             	add    esp,0x10
c00208f5:	eb 2f                	jmp    c0020926 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00208f7:	83 ec 0c             	sub    esp,0xc
c00208fa:	68 0e 74 02 c0       	push   0xc002740e
c00208ff:	e8 b1 94 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020904:	83 c4 10             	add    esp,0x10
c0020907:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c002090e:	75 ce                	jne    c00208de <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020910:	e4 60                	in     al,0x60
c0020912:	3c 1c                	cmp    al,0x1c
c0020914:	74 04                	je     c002091a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020916:	3c 5a                	cmp    al,0x5a
c0020918:	75 f6                	jne    c0020910 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c002091a:	e4 60                	in     al,0x60
c002091c:	3c 5a                	cmp    al,0x5a
c002091e:	74 fa                	je     c002091a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020920:	3c 1c                	cmp    al,0x1c
c0020922:	74 f6                	je     c002091a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020924:	eb b8                	jmp    c00208de <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020926:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c002092d:	75 29                	jne    c0020958 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c002092f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020935:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002093b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020941:	8d 75 02             	lea    esi,[ebp+0x2]
c0020944:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020948:	c1 e6 07             	shl    esi,0x7
c002094b:	01 c6                	add    esi,eax
c002094d:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020954:	74 4a                	je     c00209a0 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020956:	eb 2f                	jmp    c0020987 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020958:	83 ec 0c             	sub    esp,0xc
c002095b:	68 56 74 02 c0       	push   0xc0027456
c0020960:	e8 50 94 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020965:	83 c4 10             	add    esp,0x10
c0020968:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c002096f:	75 be                	jne    c002092f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020971:	e4 60                	in     al,0x60
c0020973:	3c 1c                	cmp    al,0x1c
c0020975:	74 04                	je     c002097b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020977:	3c 5a                	cmp    al,0x5a
c0020979:	75 f6                	jne    c0020971 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c002097b:	e4 60                	in     al,0x60
c002097d:	3c 5a                	cmp    al,0x5a
c002097f:	74 fa                	je     c002097b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020981:	3c 1c                	cmp    al,0x1c
c0020983:	74 f6                	je     c002097b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020985:	eb a8                	jmp    c002092f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020987:	83 ec 0c             	sub    esp,0xc
c002098a:	68 65 74 02 c0       	push   0xc0027465
c002098f:	e8 21 94 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020994:	83 c4 10             	add    esp,0x10
c0020997:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c002099e:	74 3d                	je     c00209dd <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c00209a0:	89 e8                	mov    eax,ebp
c00209a2:	c1 e0 07             	shl    eax,0x7
c00209a5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00209a9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00209b3:	52                   	push   edx
c00209b4:	52                   	push   edx
c00209b5:	56                   	push   esi
c00209b6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00209bc:	e8 11 ec ff ff       	call   c001f5d2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00209c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00209c5:	83 c4 10             	add    esp,0x10
c00209c8:	b8 01 00 00 00       	mov    eax,0x1
c00209cd:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00209d2:	75 1d                	jne    c00209f1 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c00209d4:	e9 c8 04 00 00       	jmp    c0020ea1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00209d9:	3c 5a                	cmp    al,0x5a
c00209db:	74 0c                	je     c00209e9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00209dd:	e4 60                	in     al,0x60
c00209df:	3c 1c                	cmp    al,0x1c
c00209e1:	75 f6                	jne    c00209d9 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c00209e3:	eb 04                	jmp    c00209e9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00209e5:	3c 1c                	cmp    al,0x1c
c00209e7:	75 b7                	jne    c00209a0 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00209e9:	e4 60                	in     al,0x60
c00209eb:	3c 5a                	cmp    al,0x5a
c00209ed:	74 fa                	je     c00209e9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00209ef:	eb f4                	jmp    c00209e5 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c00209f1:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c00209f8:	74 3a                	je     c0020a34 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c00209fa:	83 ec 0c             	sub    esp,0xc
c00209fd:	68 74 74 02 c0       	push   0xc0027474
c0020a02:	e8 ae 93 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020a07:	83 c4 10             	add    esp,0x10
c0020a0a:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020a11:	74 0d                	je     c0020a20 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020a13:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020a18:	74 34                	je     c0020a4e <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020a1a:	eb 1f                	jmp    c0020a3b <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020a1c:	3c 1c                	cmp    al,0x1c
c0020a1e:	74 0c                	je     c0020a2c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020a20:	e4 60                	in     al,0x60
c0020a22:	3c 5a                	cmp    al,0x5a
c0020a24:	75 f6                	jne    c0020a1c <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020a26:	eb 04                	jmp    c0020a2c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020a28:	3c 1c                	cmp    al,0x1c
c0020a2a:	75 e7                	jne    c0020a13 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020a2c:	e4 60                	in     al,0x60
c0020a2e:	3c 5a                	cmp    al,0x5a
c0020a30:	74 fa                	je     c0020a2c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020a32:	eb f4                	jmp    c0020a28 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020a34:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020a39:	74 1c                	je     c0020a57 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020a3b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020a3f:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020a45:	c1 e1 09             	shl    ecx,0x9
c0020a48:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020a4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a4e:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020a55:	75 55                	jne    c0020aac <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020a57:	8d 45 02             	lea    eax,[ebp+0x2]
c0020a5a:	c1 e0 07             	shl    eax,0x7
c0020a5d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020a61:	8b 38                	mov    edi,DWORD PTR [eax]
c0020a63:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020a69:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020a6f:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a79:	c1 e0 05             	shl    eax,0x5
c0020a7c:	01 c7                	add    edi,eax
c0020a7e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020a82:	83 e0 01             	and    eax,0x1
c0020a85:	c1 e0 06             	shl    eax,0x6
c0020a88:	88 c2                	mov    dl,al
c0020a8a:	8a 07                	mov    al,BYTE PTR [edi]
c0020a8c:	83 e0 bf             	and    eax,0xffffffbf
c0020a8f:	09 d0                	or     eax,edx
c0020a91:	88 07                	mov    BYTE PTR [edi],al
c0020a93:	8b 07                	mov    eax,DWORD PTR [edi]
c0020a95:	25 e0 ff 00 00       	and    eax,0xffe0
c0020a9a:	0d 05 00 01 00       	or     eax,0x10005
c0020a9f:	89 07                	mov    DWORD PTR [edi],eax
c0020aa1:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020aa8:	74 4d                	je     c0020af7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020aaa:	eb 32                	jmp    c0020ade <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020aac:	83 ec 0c             	sub    esp,0xc
c0020aaf:	68 83 74 02 c0       	push   0xc0027483
c0020ab4:	e8 fc 92 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020ab9:	83 c4 10             	add    esp,0x10
c0020abc:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020ac3:	75 92                	jne    c0020a57 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020ac5:	e4 60                	in     al,0x60
c0020ac7:	3c 1c                	cmp    al,0x1c
c0020ac9:	74 04                	je     c0020acf <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020acb:	3c 5a                	cmp    al,0x5a
c0020acd:	75 f6                	jne    c0020ac5 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020acf:	e4 60                	in     al,0x60
c0020ad1:	3c 5a                	cmp    al,0x5a
c0020ad3:	74 fa                	je     c0020acf <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020ad5:	3c 1c                	cmp    al,0x1c
c0020ad7:	74 f6                	je     c0020acf <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020ad9:	e9 79 ff ff ff       	jmp    c0020a57 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020ade:	83 ec 0c             	sub    esp,0xc
c0020ae1:	68 92 74 02 c0       	push   0xc0027492
c0020ae6:	e8 ca 92 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020aeb:	83 c4 10             	add    esp,0x10
c0020aee:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020af5:	74 3b                	je     c0020b32 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020af7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020afd:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020b03:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020b09:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020b0c:	50                   	push   eax
c0020b0d:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020b11:	83 c0 08             	add    eax,0x8
c0020b14:	c1 e0 04             	shl    eax,0x4
c0020b17:	50                   	push   eax
c0020b18:	6a 00                	push   0x0
c0020b1a:	56                   	push   esi
c0020b1b:	e8 64 fb fd ff       	call   c0000684 <memset>
c0020b20:	83 c4 10             	add    esp,0x10
c0020b23:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020b2a:	74 33                	je     c0020b5f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020b2c:	eb 18                	jmp    c0020b46 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020b2e:	3c 1c                	cmp    al,0x1c
c0020b30:	74 0c                	je     c0020b3e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020b32:	e4 60                	in     al,0x60
c0020b34:	3c 5a                	cmp    al,0x5a
c0020b36:	75 f6                	jne    c0020b2e <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020b38:	eb 04                	jmp    c0020b3e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020b3a:	3c 1c                	cmp    al,0x1c
c0020b3c:	75 b9                	jne    c0020af7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020b3e:	e4 60                	in     al,0x60
c0020b40:	3c 5a                	cmp    al,0x5a
c0020b42:	74 fa                	je     c0020b3e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020b44:	eb f4                	jmp    c0020b3a <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020b46:	83 ec 0c             	sub    esp,0xc
c0020b49:	68 a1 74 02 c0       	push   0xc00274a1
c0020b4e:	e8 62 92 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020b53:	83 c4 10             	add    esp,0x10
c0020b56:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020b5d:	74 48                	je     c0020ba7 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020b5f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020b65:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020b6b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020b6f:	c1 e0 09             	shl    eax,0x9
c0020b72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020b76:	48                   	dec    eax
c0020b77:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020b7c:	89 c2                	mov    edx,eax
c0020b7e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020b84:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020b89:	09 d0                	or     eax,edx
c0020b8b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020b91:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020b98:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020b9f:	74 33                	je     c0020bd4 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020ba1:	eb 18                	jmp    c0020bbb <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020ba3:	3c 1c                	cmp    al,0x1c
c0020ba5:	74 0c                	je     c0020bb3 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020ba7:	e4 60                	in     al,0x60
c0020ba9:	3c 5a                	cmp    al,0x5a
c0020bab:	75 f6                	jne    c0020ba3 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020bad:	eb 04                	jmp    c0020bb3 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020baf:	3c 1c                	cmp    al,0x1c
c0020bb1:	75 ac                	jne    c0020b5f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020bb3:	e4 60                	in     al,0x60
c0020bb5:	3c 5a                	cmp    al,0x5a
c0020bb7:	74 fa                	je     c0020bb3 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020bb9:	eb f4                	jmp    c0020baf <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020bbb:	83 ec 0c             	sub    esp,0xc
c0020bbe:	68 b0 74 02 c0       	push   0xc00274b0
c0020bc3:	e8 ed 91 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020bc8:	83 c4 10             	add    esp,0x10
c0020bcb:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020bd2:	74 63                	je     c0020c37 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020bd4:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020bd7:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020bdb:	66 25 00 7f          	and    ax,0x7f00
c0020bdf:	66 0d 27 80          	or     ax,0x8027
c0020be3:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020be8:	66 89 06             	mov    WORD PTR [esi],ax
c0020beb:	19 c0                	sbb    eax,eax
c0020bed:	83 e0 f0             	and    eax,0xfffffff0
c0020bf0:	83 c0 35             	add    eax,0x35
c0020bf3:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020bf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020bfa:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020bfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c02:	c1 e8 10             	shr    eax,0x10
c0020c05:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020c08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c0c:	c1 e8 18             	shr    eax,0x18
c0020c0f:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020c16:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020c19:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020c1d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c24:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020c27:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020c2b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020c2f:	74 33                	je     c0020c64 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020c31:	eb 18                	jmp    c0020c4b <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020c33:	3c 1c                	cmp    al,0x1c
c0020c35:	74 0c                	je     c0020c43 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020c37:	e4 60                	in     al,0x60
c0020c39:	3c 5a                	cmp    al,0x5a
c0020c3b:	75 f6                	jne    c0020c33 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020c3d:	eb 04                	jmp    c0020c43 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020c3f:	3c 1c                	cmp    al,0x1c
c0020c41:	75 91                	jne    c0020bd4 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020c43:	e4 60                	in     al,0x60
c0020c45:	3c 5a                	cmp    al,0x5a
c0020c47:	74 fa                	je     c0020c43 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020c49:	eb f4                	jmp    c0020c3f <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020c4b:	83 ec 0c             	sub    esp,0xc
c0020c4e:	68 bf 74 02 c0       	push   0xc00274bf
c0020c53:	e8 5d 91 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020c58:	83 c4 10             	add    esp,0x10
c0020c5b:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020c62:	74 11                	je     c0020c75 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020c64:	89 e8                	mov    eax,ebp
c0020c66:	31 f6                	xor    esi,esi
c0020c68:	c1 e0 07             	shl    eax,0x7
c0020c6b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020c6f:	eb 21                	jmp    c0020c92 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020c71:	3c 1c                	cmp    al,0x1c
c0020c73:	74 0c                	je     c0020c81 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020c75:	e4 60                	in     al,0x60
c0020c77:	3c 5a                	cmp    al,0x5a
c0020c79:	75 f6                	jne    c0020c71 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020c7b:	eb 04                	jmp    c0020c81 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020c7d:	3c 1c                	cmp    al,0x1c
c0020c7f:	75 e3                	jne    c0020c64 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020c81:	e4 60                	in     al,0x60
c0020c83:	3c 5a                	cmp    al,0x5a
c0020c85:	74 fa                	je     c0020c81 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020c87:	eb f4                	jmp    c0020c7d <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020c89:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020c8f:	74 0c                	je     c0020c9d <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020c91:	46                   	inc    esi
c0020c92:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020c98:	80 e2 88             	and    dl,0x88
c0020c9b:	75 ec                	jne    c0020c89 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020c9d:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020ca4:	74 3d                	je     c0020ce3 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020ca6:	83 ec 0c             	sub    esp,0xc
c0020ca9:	68 ce 74 02 c0       	push   0xc00274ce
c0020cae:	e8 02 91 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020cb3:	8b 15 a0 88 02 c0    	mov    edx,DWORD PTR ds:0xc00288a0
c0020cb9:	83 c4 10             	add    esp,0x10
c0020cbc:	f6 c2 80             	test   dl,0x80
c0020cbf:	74 0e                	je     c0020ccf <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020cc1:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020cc7:	75 2f                	jne    c0020cf8 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020cc9:	eb 20                	jmp    c0020ceb <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020ccb:	3c 1c                	cmp    al,0x1c
c0020ccd:	74 0c                	je     c0020cdb <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020ccf:	e4 60                	in     al,0x60
c0020cd1:	3c 5a                	cmp    al,0x5a
c0020cd3:	75 f6                	jne    c0020ccb <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020cd5:	eb 04                	jmp    c0020cdb <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020cd7:	3c 1c                	cmp    al,0x1c
c0020cd9:	75 e6                	jne    c0020cc1 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020cdb:	e4 60                	in     al,0x60
c0020cdd:	3c 5a                	cmp    al,0x5a
c0020cdf:	74 fa                	je     c0020cdb <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020ce1:	eb f4                	jmp    c0020cd7 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020ce3:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020ce9:	75 13                	jne    c0020cfe <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020ceb:	83 ec 0c             	sub    esp,0xc
c0020cee:	68 de 74 02 c0       	push   0xc00274de
c0020cf3:	e9 d2 00 00 00       	jmp    c0020dca <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020cf8:	0f ba e2 0b          	bt     edx,0xb
c0020cfc:	72 25                	jb     c0020d23 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020cfe:	be 01 00 00 00       	mov    esi,0x1
c0020d03:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020d07:	89 e8                	mov    eax,ebp
c0020d09:	d3 e6                	shl    esi,cl
c0020d0b:	c1 e0 07             	shl    eax,0x7
c0020d0e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020d12:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020d19:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020d1f:	74 4a                	je     c0020d6b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020d21:	eb 2f                	jmp    c0020d52 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020d23:	83 ec 0c             	sub    esp,0xc
c0020d26:	68 ec 74 02 c0       	push   0xc00274ec
c0020d2b:	e8 85 90 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020d30:	83 c4 10             	add    esp,0x10
c0020d33:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020d3a:	75 c2                	jne    c0020cfe <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020d3c:	e4 60                	in     al,0x60
c0020d3e:	3c 5a                	cmp    al,0x5a
c0020d40:	74 04                	je     c0020d46 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020d42:	3c 1c                	cmp    al,0x1c
c0020d44:	75 f6                	jne    c0020d3c <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020d46:	e4 60                	in     al,0x60
c0020d48:	3c 5a                	cmp    al,0x5a
c0020d4a:	74 fa                	je     c0020d46 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020d4c:	3c 1c                	cmp    al,0x1c
c0020d4e:	74 f6                	je     c0020d46 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020d50:	eb ac                	jmp    c0020cfe <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020d52:	83 ec 0c             	sub    esp,0xc
c0020d55:	68 fc 74 02 c0       	push   0xc00274fc
c0020d5a:	e8 56 90 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020d5f:	83 c4 10             	add    esp,0x10
c0020d62:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020d69:	74 0f                	je     c0020d7a <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020d6b:	89 e8                	mov    eax,ebp
c0020d6d:	c1 e0 07             	shl    eax,0x7
c0020d70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020d74:	eb 24                	jmp    c0020d9a <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020d76:	3c 1c                	cmp    al,0x1c
c0020d78:	74 0c                	je     c0020d86 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020d7a:	e4 60                	in     al,0x60
c0020d7c:	3c 5a                	cmp    al,0x5a
c0020d7e:	75 f6                	jne    c0020d76 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020d80:	eb 04                	jmp    c0020d86 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020d82:	3c 1c                	cmp    al,0x1c
c0020d84:	75 e5                	jne    c0020d6b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020d86:	e4 60                	in     al,0x60
c0020d88:	3c 5a                	cmp    al,0x5a
c0020d8a:	74 fa                	je     c0020d86 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020d8c:	eb f4                	jmp    c0020d82 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0020d8e:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020d94:	0f ba e2 1e          	bt     edx,0x1e
c0020d98:	72 28                	jb     c0020dc2 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020d9a:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020da0:	85 d6                	test   esi,edx
c0020da2:	75 ea                	jne    c0020d8e <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020da4:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020dab:	75 2f                	jne    c0020ddc <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020dad:	89 e8                	mov    eax,ebp
c0020daf:	c1 e0 07             	shl    eax,0x7
c0020db2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020db6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020dbc:	0f ba e0 1e          	bt     eax,0x1e
c0020dc0:	73 49                	jae    c0020e0b <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020dc2:	83 ec 0c             	sub    esp,0xc
c0020dc5:	68 0c 75 02 c0       	push   0xc002750c
c0020dca:	e8 16 42 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0020dcf:	83 c4 10             	add    esp,0x10
c0020dd2:	b8 01 00 00 00       	mov    eax,0x1
c0020dd7:	e9 c5 00 00 00       	jmp    c0020ea1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020ddc:	83 ec 0c             	sub    esp,0xc
c0020ddf:	68 1d 75 02 c0       	push   0xc002751d
c0020de4:	e8 cc 8f fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020de9:	83 c4 10             	add    esp,0x10
c0020dec:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020df3:	75 b8                	jne    c0020dad <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020df5:	e4 60                	in     al,0x60
c0020df7:	3c 5a                	cmp    al,0x5a
c0020df9:	74 04                	je     c0020dff <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020dfb:	3c 1c                	cmp    al,0x1c
c0020dfd:	75 f6                	jne    c0020df5 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020dff:	e4 60                	in     al,0x60
c0020e01:	3c 5a                	cmp    al,0x5a
c0020e03:	74 fa                	je     c0020dff <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020e05:	3c 1c                	cmp    al,0x1c
c0020e07:	74 f6                	je     c0020dff <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020e09:	eb a2                	jmp    c0020dad <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020e0b:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020e12:	74 3a                	je     c0020e4e <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020e14:	83 ec 0c             	sub    esp,0xc
c0020e17:	68 2d 75 02 c0       	push   0xc002752d
c0020e1c:	e8 94 8f fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020e21:	83 c4 10             	add    esp,0x10
c0020e24:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020e2b:	74 0d                	je     c0020e3a <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020e2d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020e32:	75 31                	jne    c0020e65 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020e34:	eb 1f                	jmp    c0020e55 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020e36:	3c 1c                	cmp    al,0x1c
c0020e38:	74 0c                	je     c0020e46 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020e3a:	e4 60                	in     al,0x60
c0020e3c:	3c 5a                	cmp    al,0x5a
c0020e3e:	75 f6                	jne    c0020e36 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020e40:	eb 04                	jmp    c0020e46 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020e42:	3c 1c                	cmp    al,0x1c
c0020e44:	75 e7                	jne    c0020e2d <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020e46:	e4 60                	in     al,0x60
c0020e48:	3c 5a                	cmp    al,0x5a
c0020e4a:	74 fa                	je     c0020e46 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020e4c:	eb f4                	jmp    c0020e42 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020e4e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020e53:	75 19                	jne    c0020e6e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020e55:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020e5b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020e5f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020e63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e65:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020e6c:	75 04                	jne    c0020e72 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020e6e:	31 c0                	xor    eax,eax
c0020e70:	eb 2f                	jmp    c0020ea1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020e72:	83 ec 0c             	sub    esp,0xc
c0020e75:	68 3d 75 02 c0       	push   0xc002753d
c0020e7a:	e8 36 8f fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020e7f:	83 c4 10             	add    esp,0x10
c0020e82:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020e89:	75 e3                	jne    c0020e6e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020e8b:	e4 60                	in     al,0x60
c0020e8d:	3c 1c                	cmp    al,0x1c
c0020e8f:	74 04                	je     c0020e95 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020e91:	3c 5a                	cmp    al,0x5a
c0020e93:	75 f6                	jne    c0020e8b <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020e95:	e4 60                	in     al,0x60
c0020e97:	3c 5a                	cmp    al,0x5a
c0020e99:	74 fa                	je     c0020e95 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020e9b:	3c 1c                	cmp    al,0x1c
c0020e9d:	74 f6                	je     c0020e95 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020e9f:	eb cd                	jmp    c0020e6e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020ea1:	83 c4 2c             	add    esp,0x2c
c0020ea4:	5b                   	pop    ebx
c0020ea5:	5e                   	pop    esi
c0020ea6:	5f                   	pop    edi
c0020ea7:	5d                   	pop    ebp
c0020ea8:	c3                   	ret    
c0020ea9:	90                   	nop

c0020eaa <SATA::read(unsigned long long, int, void*)>:
c0020eaa:	55                   	push   ebp
c0020eab:	57                   	push   edi
c0020eac:	56                   	push   esi
c0020ead:	53                   	push   ebx
c0020eae:	83 ec 0c             	sub    esp,0xc
c0020eb1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020eb5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020eb9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020ebd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020ec1:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020ec8:	74 2d                	je     c0020ef7 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020eca:	83 ec 0c             	sub    esp,0xc
c0020ecd:	68 4d 75 02 c0       	push   0xc002754d
c0020ed2:	e8 de 8e fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020ed7:	83 c4 10             	add    esp,0x10
c0020eda:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020ee1:	75 14                	jne    c0020ef7 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020ee3:	e4 60                	in     al,0x60
c0020ee5:	3c 1c                	cmp    al,0x1c
c0020ee7:	74 04                	je     c0020eed <SATA::read(unsigned long long, int, void*)+0x43>
c0020ee9:	3c 5a                	cmp    al,0x5a
c0020eeb:	75 f6                	jne    c0020ee3 <SATA::read(unsigned long long, int, void*)+0x39>
c0020eed:	e4 60                	in     al,0x60
c0020eef:	3c 5a                	cmp    al,0x5a
c0020ef1:	74 fa                	je     c0020eed <SATA::read(unsigned long long, int, void*)+0x43>
c0020ef3:	3c 1c                	cmp    al,0x1c
c0020ef5:	74 f6                	je     c0020eed <SATA::read(unsigned long long, int, void*)+0x43>
c0020ef7:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020efa:	b8 04 00 00 00       	mov    eax,0x4
c0020eff:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020f05:	0f 87 96 00 00 00    	ja     c0020fa1 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020f0b:	b8 06 00 00 00       	mov    eax,0x6
c0020f10:	85 ed                	test   ebp,ebp
c0020f12:	0f 84 89 00 00 00    	je     c0020fa1 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020f18:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020f1f:	74 2d                	je     c0020f4e <SATA::read(unsigned long long, int, void*)+0xa4>
c0020f21:	83 ec 0c             	sub    esp,0xc
c0020f24:	68 5a 75 02 c0       	push   0xc002755a
c0020f29:	e8 87 8e fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020f2e:	83 c4 10             	add    esp,0x10
c0020f31:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020f38:	75 14                	jne    c0020f4e <SATA::read(unsigned long long, int, void*)+0xa4>
c0020f3a:	e4 60                	in     al,0x60
c0020f3c:	3c 5a                	cmp    al,0x5a
c0020f3e:	74 04                	je     c0020f44 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020f40:	3c 1c                	cmp    al,0x1c
c0020f42:	75 f6                	jne    c0020f3a <SATA::read(unsigned long long, int, void*)+0x90>
c0020f44:	e4 60                	in     al,0x60
c0020f46:	3c 5a                	cmp    al,0x5a
c0020f48:	74 fa                	je     c0020f44 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020f4a:	3c 1c                	cmp    al,0x1c
c0020f4c:	74 f6                	je     c0020f44 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020f4e:	50                   	push   eax
c0020f4f:	50                   	push   eax
c0020f50:	6a 00                	push   0x0
c0020f52:	55                   	push   ebp
c0020f53:	53                   	push   ebx
c0020f54:	57                   	push   edi
c0020f55:	56                   	push   esi
c0020f56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020f5a:	e8 53 f9 ff ff       	call   c00208b2 <SATA::access(unsigned long long, int, void*, bool)>
c0020f5f:	83 c4 20             	add    esp,0x20
c0020f62:	89 c3                	mov    ebx,eax
c0020f64:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020f6b:	74 2d                	je     c0020f9a <SATA::read(unsigned long long, int, void*)+0xf0>
c0020f6d:	83 ec 0c             	sub    esp,0xc
c0020f70:	68 67 75 02 c0       	push   0xc0027567
c0020f75:	e8 3b 8e fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020f7a:	83 c4 10             	add    esp,0x10
c0020f7d:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020f84:	75 14                	jne    c0020f9a <SATA::read(unsigned long long, int, void*)+0xf0>
c0020f86:	e4 60                	in     al,0x60
c0020f88:	3c 5a                	cmp    al,0x5a
c0020f8a:	74 04                	je     c0020f90 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020f8c:	3c 1c                	cmp    al,0x1c
c0020f8e:	75 f6                	jne    c0020f86 <SATA::read(unsigned long long, int, void*)+0xdc>
c0020f90:	e4 60                	in     al,0x60
c0020f92:	3c 5a                	cmp    al,0x5a
c0020f94:	74 fa                	je     c0020f90 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020f96:	3c 1c                	cmp    al,0x1c
c0020f98:	74 f6                	je     c0020f90 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020f9a:	31 c0                	xor    eax,eax
c0020f9c:	85 db                	test   ebx,ebx
c0020f9e:	0f 95 c0             	setne  al
c0020fa1:	83 c4 0c             	add    esp,0xc
c0020fa4:	5b                   	pop    ebx
c0020fa5:	5e                   	pop    esi
c0020fa6:	5f                   	pop    edi
c0020fa7:	5d                   	pop    ebp
c0020fa8:	c3                   	ret    
c0020fa9:	90                   	nop

c0020faa <SATA::write(unsigned long long, int, void*)>:
c0020faa:	55                   	push   ebp
c0020fab:	57                   	push   edi
c0020fac:	56                   	push   esi
c0020fad:	53                   	push   ebx
c0020fae:	83 ec 1c             	sub    esp,0x1c
c0020fb1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020fb5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020fb9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020fbd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020fc1:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0020fc8:	74 2d                	je     c0020ff7 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020fca:	83 ec 0c             	sub    esp,0xc
c0020fcd:	68 74 75 02 c0       	push   0xc0027574
c0020fd2:	e8 de 8d fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020fd7:	83 c4 10             	add    esp,0x10
c0020fda:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0020fe1:	75 14                	jne    c0020ff7 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020fe3:	e4 60                	in     al,0x60
c0020fe5:	3c 1c                	cmp    al,0x1c
c0020fe7:	74 04                	je     c0020fed <SATA::write(unsigned long long, int, void*)+0x43>
c0020fe9:	3c 5a                	cmp    al,0x5a
c0020feb:	75 f6                	jne    c0020fe3 <SATA::write(unsigned long long, int, void*)+0x39>
c0020fed:	e4 60                	in     al,0x60
c0020fef:	3c 5a                	cmp    al,0x5a
c0020ff1:	74 fa                	je     c0020fed <SATA::write(unsigned long long, int, void*)+0x43>
c0020ff3:	3c 1c                	cmp    al,0x1c
c0020ff5:	74 f6                	je     c0020fed <SATA::write(unsigned long long, int, void*)+0x43>
c0020ff7:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020ffa:	b8 04 00 00 00       	mov    eax,0x4
c0020fff:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021005:	0f 87 bd 00 00 00    	ja     c00210c8 <SATA::write(unsigned long long, int, void*)+0x11e>
c002100b:	b8 06 00 00 00       	mov    eax,0x6
c0021010:	85 db                	test   ebx,ebx
c0021012:	0f 84 b0 00 00 00    	je     c00210c8 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021018:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c002101f:	74 2d                	je     c002104e <SATA::write(unsigned long long, int, void*)+0xa4>
c0021021:	83 ec 0c             	sub    esp,0xc
c0021024:	68 82 75 02 c0       	push   0xc0027582
c0021029:	e8 87 8d fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002102e:	83 c4 10             	add    esp,0x10
c0021031:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c0021038:	75 14                	jne    c002104e <SATA::write(unsigned long long, int, void*)+0xa4>
c002103a:	e4 60                	in     al,0x60
c002103c:	3c 1c                	cmp    al,0x1c
c002103e:	74 04                	je     c0021044 <SATA::write(unsigned long long, int, void*)+0x9a>
c0021040:	3c 5a                	cmp    al,0x5a
c0021042:	75 f6                	jne    c002103a <SATA::write(unsigned long long, int, void*)+0x90>
c0021044:	e4 60                	in     al,0x60
c0021046:	3c 5a                	cmp    al,0x5a
c0021048:	74 fa                	je     c0021044 <SATA::write(unsigned long long, int, void*)+0x9a>
c002104a:	3c 1c                	cmp    al,0x1c
c002104c:	74 f6                	je     c0021044 <SATA::write(unsigned long long, int, void*)+0x9a>
c002104e:	c1 e5 09             	shl    ebp,0x9
c0021051:	01 dd                	add    ebp,ebx
c0021053:	89 f0                	mov    eax,esi
c0021055:	89 fa                	mov    edx,edi
c0021057:	83 c0 01             	add    eax,0x1
c002105a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002105e:	83 d2 00             	adc    edx,0x0
c0021061:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021065:	50                   	push   eax
c0021066:	50                   	push   eax
c0021067:	6a 01                	push   0x1
c0021069:	53                   	push   ebx
c002106a:	81 c3 00 02 00 00    	add    ebx,0x200
c0021070:	6a 01                	push   0x1
c0021072:	57                   	push   edi
c0021073:	56                   	push   esi
c0021074:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021078:	e8 35 f8 ff ff       	call   c00208b2 <SATA::access(unsigned long long, int, void*, bool)>
c002107d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021081:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0021085:	83 c4 20             	add    esp,0x20
c0021088:	39 dd                	cmp    ebp,ebx
c002108a:	75 c7                	jne    c0021053 <SATA::write(unsigned long long, int, void*)+0xa9>
c002108c:	f6 05 a1 88 02 c0 08 	test   BYTE PTR ds:0xc00288a1,0x8
c0021093:	75 04                	jne    c0021099 <SATA::write(unsigned long long, int, void*)+0xef>
c0021095:	31 c0                	xor    eax,eax
c0021097:	eb 2f                	jmp    c00210c8 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021099:	83 ec 0c             	sub    esp,0xc
c002109c:	68 90 75 02 c0       	push   0xc0027590
c00210a1:	e8 0f 8d fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00210a6:	83 c4 10             	add    esp,0x10
c00210a9:	f6 05 a0 88 02 c0 80 	test   BYTE PTR ds:0xc00288a0,0x80
c00210b0:	75 e3                	jne    c0021095 <SATA::write(unsigned long long, int, void*)+0xeb>
c00210b2:	e4 60                	in     al,0x60
c00210b4:	3c 5a                	cmp    al,0x5a
c00210b6:	74 04                	je     c00210bc <SATA::write(unsigned long long, int, void*)+0x112>
c00210b8:	3c 1c                	cmp    al,0x1c
c00210ba:	75 f6                	jne    c00210b2 <SATA::write(unsigned long long, int, void*)+0x108>
c00210bc:	e4 60                	in     al,0x60
c00210be:	3c 5a                	cmp    al,0x5a
c00210c0:	74 fa                	je     c00210bc <SATA::write(unsigned long long, int, void*)+0x112>
c00210c2:	3c 1c                	cmp    al,0x1c
c00210c4:	74 f6                	je     c00210bc <SATA::write(unsigned long long, int, void*)+0x112>
c00210c6:	eb cd                	jmp    c0021095 <SATA::write(unsigned long long, int, void*)+0xeb>
c00210c8:	83 c4 1c             	add    esp,0x1c
c00210cb:	5b                   	pop    ebx
c00210cc:	5e                   	pop    esi
c00210cd:	5f                   	pop    edi
c00210ce:	5d                   	pop    ebp
c00210cf:	c3                   	ret    

c00210d0 <SATAPI::write(unsigned long long, int, void*)>:
c00210d0:	b8 03 00 00 00       	mov    eax,0x3
c00210d5:	c3                   	ret    

c00210d6 <SATAPI::close(int, int, void*)>:
c00210d6:	83 ec 0c             	sub    esp,0xc
c00210d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210dd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00210e3:	85 c0                	test   eax,eax
c00210e5:	74 0c                	je     c00210f3 <SATAPI::close(int, int, void*)+0x1d>
c00210e7:	83 ec 0c             	sub    esp,0xc
c00210ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00210ec:	50                   	push   eax
c00210ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00210f0:	83 c4 10             	add    esp,0x10
c00210f3:	31 c0                	xor    eax,eax
c00210f5:	83 c4 0c             	add    esp,0xc
c00210f8:	c3                   	ret    
c00210f9:	90                   	nop

c00210fa <SATAPI::SATAPI()>:
c00210fa:	83 ec 0c             	sub    esp,0xc
c00210fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021101:	83 ec 04             	sub    esp,0x4
c0021104:	68 00 08 00 00       	push   0x800
c0021109:	68 d8 75 02 c0       	push   0xc00275d8
c002110e:	50                   	push   eax
c002110f:	e8 de d8 fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021114:	83 c4 10             	add    esp,0x10
c0021117:	ba 14 77 02 c0       	mov    edx,0xc0027714
c002111c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021120:	89 10                	mov    DWORD PTR [eax],edx
c0021122:	90                   	nop
c0021123:	83 c4 0c             	add    esp,0xc
c0021126:	c3                   	ret    
c0021127:	90                   	nop

c0021128 <SATAPI::diskRemoved()>:
c0021128:	53                   	push   ebx
c0021129:	83 ec 14             	sub    esp,0x14
c002112c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021130:	68 e4 75 02 c0       	push   0xc00275e4
c0021135:	e8 0d bf fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002113a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021141:	c7 04 24 38 73 02 c0 	mov    DWORD PTR [esp],0xc0027338
c0021148:	e8 fa be fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002114d:	58                   	pop    eax
c002114e:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0021154:	e8 b5 f6 fe ff       	call   c001080e <LogicalDisk::unmount()>
c0021159:	c7 04 24 47 73 02 c0 	mov    DWORD PTR [esp],0xc0027347
c0021160:	e8 e2 be fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021165:	5a                   	pop    edx
c0021166:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002116c:	e8 a3 00 ff ff       	call   c0011214 <VCache::writeWriteBuffer()>
c0021171:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0021177:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002117b:	83 c4 18             	add    esp,0x18
c002117e:	5b                   	pop    ebx
c002117f:	e9 80 00 ff ff       	jmp    c0011204 <VCache::invalidateReadBuffer()>

c0021184 <SATAPI::diskInserted()>:
c0021184:	83 ec 18             	sub    esp,0x18
c0021187:	68 fb 75 02 c0       	push   0xc00275fb
c002118c:	e8 b6 be fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021195:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002119c:	83 c4 1c             	add    esp,0x1c
c002119f:	c3                   	ret    

c00211a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00211a0:	55                   	push   ebp
c00211a1:	57                   	push   edi
c00211a2:	56                   	push   esi
c00211a3:	53                   	push   ebx
c00211a4:	83 ec 38             	sub    esp,0x38
c00211a7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00211ab:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00211af:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00211b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00211b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00211bb:	68 13 76 02 c0       	push   0xc0027613
c00211c0:	e8 82 be fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00211c5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00211cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00211d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00211d5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00211db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00211df:	c1 e0 07             	shl    eax,0x7
c00211e2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00211e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00211ea:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00211f4:	5a                   	pop    edx
c00211f5:	59                   	pop    ecx
c00211f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211fa:	8d 58 02             	lea    ebx,[eax+0x2]
c00211fd:	c1 e3 07             	shl    ebx,0x7
c0021200:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0021204:	53                   	push   ebx
c0021205:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002120b:	e8 c2 e3 ff ff       	call   c001f5d2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021210:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021214:	83 c4 10             	add    esp,0x10
c0021217:	b8 01 00 00 00       	mov    eax,0x1
c002121c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021221:	0f 84 04 02 00 00    	je     c002142b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0021227:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002122d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002122f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021235:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002123b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002123f:	c1 e1 05             	shl    ecx,0x5
c0021242:	01 c8                	add    eax,ecx
c0021244:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021246:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002124c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021252:	89 08                	mov    DWORD PTR [eax],ecx
c0021254:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002125a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021260:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0021266:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0021269:	8d 7b 40             	lea    edi,[ebx+0x40]
c002126c:	50                   	push   eax
c002126d:	68 90 00 00 00       	push   0x90
c0021272:	6a 00                	push   0x0
c0021274:	53                   	push   ebx
c0021275:	e8 0a f4 fd ff       	call   c0000684 <memset>
c002127a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002127e:	b9 0c 00 00 00       	mov    ecx,0xc
c0021283:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021285:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002128b:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002128f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0021295:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0021299:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002129d:	48                   	dec    eax
c002129e:	25 ff ff 3f 00       	and    eax,0x3fffff
c00212a3:	89 c1                	mov    ecx,eax
c00212a5:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00212ab:	25 00 00 c0 ff       	and    eax,0xffc00000
c00212b0:	09 c8                	or     eax,ecx
c00212b2:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00212b8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00212bb:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00212c2:	66 25 00 7f          	and    ax,0x7f00
c00212c6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00212ca:	66 0d 27 80          	or     ax,0x8027
c00212ce:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00212d2:	66 89 03             	mov    WORD PTR [ebx],ax
c00212d5:	89 d0                	mov    eax,edx
c00212d7:	c1 ea 18             	shr    edx,0x18
c00212da:	c1 e8 10             	shr    eax,0x10
c00212dd:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00212e0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00212e3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00212e7:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00212ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00212ee:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00212f1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00212f5:	83 c4 10             	add    esp,0x10
c00212f8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00212fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021300:	31 c0                	xor    eax,eax
c0021302:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0021308:	80 e1 88             	and    cl,0x88
c002130b:	74 0a                	je     c0021317 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c002130d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021312:	74 0a                	je     c002131e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0021314:	40                   	inc    eax
c0021315:	eb eb                	jmp    c0021302 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0021317:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002131c:	75 0f                	jne    c002132d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c002131e:	83 ec 0c             	sub    esp,0xc
c0021321:	68 de 74 02 c0       	push   0xc00274de
c0021326:	e8 ba 3c ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c002132b:	eb 48                	jmp    c0021375 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c002132d:	be 01 00 00 00       	mov    esi,0x1
c0021332:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021336:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002133a:	d3 e6                	shl    esi,cl
c002133c:	c1 e7 07             	shl    edi,0x7
c002133f:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0021345:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c002134a:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002134e:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021354:	85 c6                	test   esi,eax
c0021356:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002135c:	0f 84 96 00 00 00    	je     c00213f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c0021362:	0f ba e0 1e          	bt     eax,0x1e
c0021366:	73 1a                	jae    c0021382 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c0021368:	83 ec 0c             	sub    esp,0xc
c002136b:	68 2d 76 02 c0       	push   0xc002762d
c0021370:	e8 d2 bc fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021375:	83 c4 10             	add    esp,0x10
c0021378:	b8 01 00 00 00       	mov    eax,0x1
c002137d:	e9 a9 00 00 00       	jmp    c002142b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0021382:	83 fb 0d             	cmp    ebx,0xd
c0021385:	77 12                	ja     c0021399 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0021387:	83 ec 0c             	sub    esp,0xc
c002138a:	68 c8 00 00 00       	push   0xc8
c002138f:	e8 54 7b ff ff       	call   c0018ee8 <milliTenthSleep(unsigned int)>
c0021394:	83 c4 10             	add    esp,0x10
c0021397:	eb 2a                	jmp    c00213c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0021399:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c002139f:	83 f8 0d             	cmp    eax,0xd
c00213a2:	77 0a                	ja     c00213ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c00213a4:	83 ec 0c             	sub    esp,0xc
c00213a7:	68 58 02 00 00       	push   0x258
c00213ac:	eb 28                	jmp    c00213d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c00213ae:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c00213b4:	83 f8 0d             	cmp    eax,0xd
c00213b7:	77 0a                	ja     c00213c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c00213b9:	83 ec 0c             	sub    esp,0xc
c00213bc:	68 dc 05 00 00       	push   0x5dc
c00213c1:	eb 13                	jmp    c00213d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c00213c3:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c00213c9:	83 f8 0d             	cmp    eax,0xd
c00213cc:	77 10                	ja     c00213de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c00213ce:	83 ec 0c             	sub    esp,0xc
c00213d1:	68 c4 09 00 00       	push   0x9c4
c00213d6:	e8 0d 7b ff ff       	call   c0018ee8 <milliTenthSleep(unsigned int)>
c00213db:	83 c4 10             	add    esp,0x10
c00213de:	43                   	inc    ebx
c00213df:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c00213e5:	0f 85 63 ff ff ff    	jne    c002134e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c00213eb:	83 ec 0c             	sub    esp,0xc
c00213ee:	68 40 76 02 c0       	push   0xc0027640
c00213f3:	e9 78 ff ff ff       	jmp    c0021370 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c00213f8:	0f ba e0 1e          	bt     eax,0x1e
c00213fc:	73 0d                	jae    c002140b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c00213fe:	83 ec 0c             	sub    esp,0xc
c0021401:	68 54 76 02 c0       	push   0xc0027654
c0021406:	e9 65 ff ff ff       	jmp    c0021370 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c002140b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021410:	74 17                	je     c0021429 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0021412:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0021417:	74 10                	je     c0021429 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0021419:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002141f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021423:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021427:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021429:	31 c0                	xor    eax,eax
c002142b:	83 c4 2c             	add    esp,0x2c
c002142e:	5b                   	pop    ebx
c002142f:	5e                   	pop    esi
c0021430:	5f                   	pop    edi
c0021431:	5d                   	pop    ebp
c0021432:	c3                   	ret    
c0021433:	90                   	nop

c0021434 <SATAPI::eject()>:
c0021434:	57                   	push   edi
c0021435:	b9 03 00 00 00       	mov    ecx,0x3
c002143a:	53                   	push   ebx
c002143b:	83 ec 14             	sub    esp,0x14
c002143e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021442:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021446:	fc                   	cld    
c0021447:	31 c0                	xor    eax,eax
c0021449:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002144b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021450:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021455:	50                   	push   eax
c0021456:	6a 00                	push   0x0
c0021458:	6a 00                	push   0x0
c002145a:	6a 00                	push   0x0
c002145c:	6a 00                	push   0x0
c002145e:	6a 02                	push   0x2
c0021460:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021464:	50                   	push   eax
c0021465:	53                   	push   ebx
c0021466:	e8 35 fd ff ff       	call   c00211a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002146b:	83 c4 20             	add    esp,0x20
c002146e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021475:	74 0c                	je     c0021483 <SATAPI::eject()+0x4f>
c0021477:	83 ec 0c             	sub    esp,0xc
c002147a:	53                   	push   ebx
c002147b:	e8 a8 fc ff ff       	call   c0021128 <SATAPI::diskRemoved()>
c0021480:	83 c4 10             	add    esp,0x10
c0021483:	83 c4 14             	add    esp,0x14
c0021486:	31 c0                	xor    eax,eax
c0021488:	5b                   	pop    ebx
c0021489:	5f                   	pop    edi
c002148a:	c3                   	ret    
c002148b:	90                   	nop

c002148c <SATAPI::detectMedia()>:
c002148c:	56                   	push   esi
c002148d:	53                   	push   ebx
c002148e:	83 ec 30             	sub    esp,0x30
c0021491:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021495:	68 69 76 02 c0       	push   0xc0027669
c002149a:	e8 a8 bb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002149f:	83 c4 0c             	add    esp,0xc
c00214a2:	6a 0c                	push   0xc
c00214a4:	6a 00                	push   0x0
c00214a6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00214aa:	56                   	push   esi
c00214ab:	e8 d4 f1 fd ff       	call   c0000684 <memset>
c00214b0:	83 c4 0c             	add    esp,0xc
c00214b3:	6a 00                	push   0x0
c00214b5:	6a 00                	push   0x0
c00214b7:	6a 00                	push   0x0
c00214b9:	6a 00                	push   0x0
c00214bb:	6a 00                	push   0x0
c00214bd:	56                   	push   esi
c00214be:	53                   	push   ebx
c00214bf:	e8 dc fc ff ff       	call   c00211a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00214c4:	83 c4 20             	add    esp,0x20
c00214c7:	48                   	dec    eax
c00214c8:	75 27                	jne    c00214f1 <SATAPI::detectMedia()+0x65>
c00214ca:	83 ec 0c             	sub    esp,0xc
c00214cd:	68 7d 76 02 c0       	push   0xc002767d
c00214d2:	e8 70 bb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00214d7:	83 c4 10             	add    esp,0x10
c00214da:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00214e1:	74 0e                	je     c00214f1 <SATAPI::detectMedia()+0x65>
c00214e3:	83 ec 0c             	sub    esp,0xc
c00214e6:	53                   	push   ebx
c00214e7:	e8 3c fc ff ff       	call   c0021128 <SATAPI::diskRemoved()>
c00214ec:	e9 d1 00 00 00       	jmp    c00215c2 <SATAPI::detectMedia()+0x136>
c00214f1:	50                   	push   eax
c00214f2:	6a 0c                	push   0xc
c00214f4:	6a 00                	push   0x0
c00214f6:	56                   	push   esi
c00214f7:	e8 88 f1 fd ff       	call   c0000684 <memset>
c00214fc:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021501:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021506:	83 c4 0c             	add    esp,0xc
c0021509:	6a 01                	push   0x1
c002150b:	8d 44 24 16          	lea    eax,[esp+0x16]
c002150f:	50                   	push   eax
c0021510:	6a 00                	push   0x0
c0021512:	6a 00                	push   0x0
c0021514:	6a 12                	push   0x12
c0021516:	56                   	push   esi
c0021517:	53                   	push   ebx
c0021518:	e8 83 fc ff ff       	call   c00211a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002151d:	83 c4 20             	add    esp,0x20
c0021520:	48                   	dec    eax
c0021521:	75 19                	jne    c002153c <SATAPI::detectMedia()+0xb0>
c0021523:	83 ec 0c             	sub    esp,0xc
c0021526:	68 87 76 02 c0       	push   0xc0027687
c002152b:	e8 17 bb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021530:	83 c4 10             	add    esp,0x10
c0021533:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002153a:	75 a7                	jne    c00214e3 <SATAPI::detectMedia()+0x57>
c002153c:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0021540:	83 e0 7f             	and    eax,0x7f
c0021543:	3c 70                	cmp    al,0x70
c0021545:	74 25                	je     c002156c <SATAPI::detectMedia()+0xe0>
c0021547:	83 ec 0c             	sub    esp,0xc
c002154a:	68 91 76 02 c0       	push   0xc0027691
c002154f:	e8 f3 ba fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021554:	83 c4 10             	add    esp,0x10
c0021557:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002155e:	75 0c                	jne    c002156c <SATAPI::detectMedia()+0xe0>
c0021560:	83 ec 0c             	sub    esp,0xc
c0021563:	53                   	push   ebx
c0021564:	e8 1b fc ff ff       	call   c0021184 <SATAPI::diskInserted()>
c0021569:	83 c4 10             	add    esp,0x10
c002156c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021570:	83 e0 0f             	and    eax,0xf
c0021573:	3c 02                	cmp    al,0x2
c0021575:	75 25                	jne    c002159c <SATAPI::detectMedia()+0x110>
c0021577:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002157c:	75 47                	jne    c00215c5 <SATAPI::detectMedia()+0x139>
c002157e:	83 ec 0c             	sub    esp,0xc
c0021581:	68 9a 76 02 c0       	push   0xc002769a
c0021586:	e8 bc ba fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002158b:	83 c4 10             	add    esp,0x10
c002158e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021595:	74 2e                	je     c00215c5 <SATAPI::detectMedia()+0x139>
c0021597:	e9 47 ff ff ff       	jmp    c00214e3 <SATAPI::detectMedia()+0x57>
c002159c:	84 c0                	test   al,al
c002159e:	75 25                	jne    c00215c5 <SATAPI::detectMedia()+0x139>
c00215a0:	83 ec 0c             	sub    esp,0xc
c00215a3:	68 a3 76 02 c0       	push   0xc00276a3
c00215a8:	e8 9a ba fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00215ad:	83 c4 10             	add    esp,0x10
c00215b0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00215b7:	75 0c                	jne    c00215c5 <SATAPI::detectMedia()+0x139>
c00215b9:	83 ec 0c             	sub    esp,0xc
c00215bc:	53                   	push   ebx
c00215bd:	e8 c2 fb ff ff       	call   c0021184 <SATAPI::diskInserted()>
c00215c2:	83 c4 10             	add    esp,0x10
c00215c5:	83 c4 24             	add    esp,0x24
c00215c8:	5b                   	pop    ebx
c00215c9:	5e                   	pop    esi
c00215ca:	c3                   	ret    
c00215cb:	90                   	nop

c00215cc <SATAPI::open(int, int, void*)>:
c00215cc:	56                   	push   esi
c00215cd:	53                   	push   ebx
c00215ce:	51                   	push   ecx
c00215cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215d7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00215e1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00215e7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00215f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00215f5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00215ff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021605:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002160c:	e8 01 8e fe ff       	call   c000a412 <Phys::allocatePage()>
c0021611:	89 c6                	mov    esi,eax
c0021613:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021619:	81 c6 00 10 00 00    	add    esi,0x1000
c002161f:	e8 ee 8d fe ff       	call   c000a412 <Phys::allocatePage()>
c0021624:	39 c6                	cmp    esi,eax
c0021626:	74 10                	je     c0021638 <SATAPI::open(int, int, void*)+0x6c>
c0021628:	83 ec 0c             	sub    esp,0xc
c002162b:	68 ad 76 02 c0       	push   0xc00276ad
c0021630:	e8 b0 39 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0021635:	83 c4 10             	add    esp,0x10
c0021638:	83 ec 0c             	sub    esp,0xc
c002163b:	6a 02                	push   0x2
c002163d:	e8 df a6 fe ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0021642:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021648:	6a 03                	push   0x3
c002164a:	50                   	push   eax
c002164b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021651:	ff 35 b0 89 02 c0    	push   DWORD PTR ds:0xc00289b0
c0021657:	e8 6c ad fe ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c002165c:	83 c4 14             	add    esp,0x14
c002165f:	68 74 01 00 00       	push   0x174
c0021664:	e8 f2 86 fe ff       	call   c0009d5b <malloc>
c0021669:	83 c4 0c             	add    esp,0xc
c002166c:	89 c6                	mov    esi,eax
c002166e:	6a 00                	push   0x0
c0021670:	68 ff ff ff 7f       	push   0x7fffffff
c0021675:	6a 00                	push   0x0
c0021677:	6a 00                	push   0x0
c0021679:	53                   	push   ebx
c002167a:	68 c3 76 02 c0       	push   0xc00276c3
c002167f:	50                   	push   eax
c0021680:	e8 95 ef fe ff       	call   c001061a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021685:	83 c4 14             	add    esp,0x14
c0021688:	56                   	push   esi
c0021689:	e8 42 f0 fe ff       	call   c00106d0 <LogicalDisk::assignDriveLetter()>
c002168e:	5a                   	pop    edx
c002168f:	0f be c0             	movsx  eax,al
c0021692:	59                   	pop    ecx
c0021693:	50                   	push   eax
c0021694:	68 55 73 02 c0       	push   0xc0027355
c0021699:	e8 a9 b9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002169e:	58                   	pop    eax
c002169f:	5a                   	pop    edx
c00216a0:	56                   	push   esi
c00216a1:	53                   	push   ebx
c00216a2:	e8 13 cf fe ff       	call   c000e5ba <Device::addChild(Device*)>
c00216a7:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00216ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00216b0:	e8 a5 d3 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c00216b5:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00216bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00216bf:	e8 c8 fd ff ff       	call   c002148c <SATAPI::detectMedia()>
c00216c4:	83 c4 14             	add    esp,0x14
c00216c7:	31 c0                	xor    eax,eax
c00216c9:	5b                   	pop    ebx
c00216ca:	5e                   	pop    esi
c00216cb:	c3                   	ret    

c00216cc <SATAPI::read(unsigned long long, int, void*)>:
c00216cc:	55                   	push   ebp
c00216cd:	57                   	push   edi
c00216ce:	56                   	push   esi
c00216cf:	53                   	push   ebx
c00216d0:	83 ec 48             	sub    esp,0x48
c00216d3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00216d7:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00216db:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00216df:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00216e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00216e7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00216eb:	68 d1 76 02 c0       	push   0xc00276d1
c00216f0:	e8 52 b9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00216f5:	83 c4 10             	add    esp,0x10
c00216f8:	83 fb 04             	cmp    ebx,0x4
c00216fb:	7e 10                	jle    c002170d <SATAPI::read(unsigned long long, int, void*)+0x41>
c00216fd:	83 ec 0c             	sub    esp,0xc
c0021700:	68 e2 76 02 c0       	push   0xc00276e2
c0021705:	e8 db 38 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c002170a:	83 c4 10             	add    esp,0x10
c002170d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0021711:	31 ed                	xor    ebp,ebp
c0021713:	b9 03 00 00 00       	mov    ecx,0x3
c0021718:	fc                   	cld    
c0021719:	89 e8                	mov    eax,ebp
c002171b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002171d:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021722:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021727:	50                   	push   eax
c0021728:	6a 00                	push   0x0
c002172a:	6a 00                	push   0x0
c002172c:	6a 00                	push   0x0
c002172e:	6a 00                	push   0x0
c0021730:	6a 02                	push   0x2
c0021732:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021736:	50                   	push   eax
c0021737:	56                   	push   esi
c0021738:	e8 63 fa ff ff       	call   c00211a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002173d:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0021741:	89 e8                	mov    eax,ebp
c0021743:	b9 03 00 00 00       	mov    ecx,0x3
c0021748:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002174a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002174e:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021752:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021757:	86 e0                	xchg   al,ah
c0021759:	c1 c0 10             	rol    eax,0x10
c002175c:	86 e0                	xchg   al,ah
c002175e:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021762:	83 c4 1c             	add    esp,0x1c
c0021765:	53                   	push   ebx
c0021766:	c1 e3 0b             	shl    ebx,0xb
c0021769:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002176d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021771:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021775:	53                   	push   ebx
c0021776:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002177a:	50                   	push   eax
c002177b:	56                   	push   esi
c002177c:	e8 1f fa ff ff       	call   c00211a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021781:	83 c4 20             	add    esp,0x20
c0021784:	85 c0                	test   eax,eax
c0021786:	74 14                	je     c002179c <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021788:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002178c:	83 ec 0c             	sub    esp,0xc
c002178f:	56                   	push   esi
c0021790:	e8 f7 fc ff ff       	call   c002148c <SATAPI::detectMedia()>
c0021795:	83 c4 10             	add    esp,0x10
c0021798:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002179c:	83 c4 3c             	add    esp,0x3c
c002179f:	5b                   	pop    ebx
c00217a0:	5e                   	pop    esi
c00217a1:	5f                   	pop    edi
c00217a2:	5d                   	pop    ebp
c00217a3:	c3                   	ret    

c00217a4 <AVX::open(int, int, void*)>:
c00217a4:	83 ec 0c             	sub    esp,0xc
c00217a7:	e8 8c 11 00 00       	call   c0022938 <avxInit>
c00217ac:	b8 00 00 00 00       	mov    eax,0x0
c00217b1:	83 c4 0c             	add    esp,0xc
c00217b4:	c3                   	ret    
c00217b5:	90                   	nop
c00217b6:	66 90                	xchg   ax,ax

c00217b8 <AVX::close(int, int, void*)>:
c00217b8:	83 ec 0c             	sub    esp,0xc
c00217bb:	e8 79 11 00 00       	call   c0022939 <avxClose>
c00217c0:	b8 00 00 00 00       	mov    eax,0x0
c00217c5:	83 c4 0c             	add    esp,0xc
c00217c8:	c3                   	ret    
c00217c9:	90                   	nop
c00217ca:	66 90                	xchg   ax,ax

c00217cc <AVX::available()>:
c00217cc:	83 ec 0c             	sub    esp,0xc
c00217cf:	e8 5c 11 00 00       	call   c0022930 <avxDetect>
c00217d4:	85 c0                	test   eax,eax
c00217d6:	0f 95 c0             	setne  al
c00217d9:	83 c4 0c             	add    esp,0xc
c00217dc:	c3                   	ret    
c00217dd:	90                   	nop
c00217de:	66 90                	xchg   ax,ax

c00217e0 <AVX::save(void*)>:
c00217e0:	83 ec 0c             	sub    esp,0xc
c00217e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217e7:	83 ec 0c             	sub    esp,0xc
c00217ea:	50                   	push   eax
c00217eb:	e8 46 11 00 00       	call   c0022936 <avxSave>
c00217f0:	83 c4 10             	add    esp,0x10
c00217f3:	90                   	nop
c00217f4:	83 c4 0c             	add    esp,0xc
c00217f7:	c3                   	ret    

c00217f8 <AVX::load(void*)>:
c00217f8:	83 ec 0c             	sub    esp,0xc
c00217fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217ff:	83 ec 0c             	sub    esp,0xc
c0021802:	50                   	push   eax
c0021803:	e8 2f 11 00 00       	call   c0022937 <avxLoad>
c0021808:	83 c4 10             	add    esp,0x10
c002180b:	90                   	nop
c002180c:	83 c4 0c             	add    esp,0xc
c002180f:	c3                   	ret    

c0021810 <AVX::AVX()>:
c0021810:	83 ec 0c             	sub    esp,0xc
c0021813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021817:	83 ec 08             	sub    esp,0x8
c002181a:	68 44 77 02 c0       	push   0xc0027744
c002181f:	50                   	push   eax
c0021820:	e8 ab d2 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c0021825:	83 c4 10             	add    esp,0x10
c0021828:	ba 54 77 02 c0       	mov    edx,0xc0027754
c002182d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021831:	89 10                	mov    DWORD PTR [eax],edx
c0021833:	90                   	nop
c0021834:	83 c4 0c             	add    esp,0xc
c0021837:	c3                   	ret    

c0021838 <MMX::available()>:
c0021838:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c002183d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021843:	83 e0 20             	and    eax,0x20
c0021846:	84 c0                	test   al,al
c0021848:	0f 95 c0             	setne  al
c002184b:	c3                   	ret    

c002184c <MMX::open(int, int, void*)>:
c002184c:	83 ec 0c             	sub    esp,0xc
c002184f:	e8 6e 11 00 00       	call   c00229c2 <x87Init>
c0021854:	b8 00 00 00 00       	mov    eax,0x0
c0021859:	83 c4 0c             	add    esp,0xc
c002185c:	c3                   	ret    
c002185d:	90                   	nop
c002185e:	66 90                	xchg   ax,ax

c0021860 <MMX::close(int, int, void*)>:
c0021860:	83 ec 0c             	sub    esp,0xc
c0021863:	e8 74 11 00 00       	call   c00229dc <x87Close>
c0021868:	b8 00 00 00 00       	mov    eax,0x0
c002186d:	83 c4 0c             	add    esp,0xc
c0021870:	c3                   	ret    
c0021871:	90                   	nop
c0021872:	66 90                	xchg   ax,ax

c0021874 <MMX::save(void*)>:
c0021874:	83 ec 0c             	sub    esp,0xc
c0021877:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002187b:	83 ec 0c             	sub    esp,0xc
c002187e:	50                   	push   eax
c002187f:	e8 2d 11 00 00       	call   c00229b1 <x87Save>
c0021884:	83 c4 10             	add    esp,0x10
c0021887:	90                   	nop
c0021888:	83 c4 0c             	add    esp,0xc
c002188b:	c3                   	ret    

c002188c <MMX::load(void*)>:
c002188c:	83 ec 0c             	sub    esp,0xc
c002188f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021893:	83 ec 0c             	sub    esp,0xc
c0021896:	50                   	push   eax
c0021897:	e8 1e 11 00 00       	call   c00229ba <x87Load>
c002189c:	83 c4 10             	add    esp,0x10
c002189f:	90                   	nop
c00218a0:	83 c4 0c             	add    esp,0xc
c00218a3:	c3                   	ret    

c00218a4 <MMX::MMX()>:
c00218a4:	83 ec 0c             	sub    esp,0xc
c00218a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ab:	83 ec 08             	sub    esp,0x8
c00218ae:	68 84 77 02 c0       	push   0xc0027784
c00218b3:	50                   	push   eax
c00218b4:	e8 17 d2 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c00218b9:	83 c4 10             	add    esp,0x10
c00218bc:	ba 94 77 02 c0       	mov    edx,0xc0027794
c00218c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c5:	89 10                	mov    DWORD PTR [eax],edx
c00218c7:	90                   	nop
c00218c8:	83 c4 0c             	add    esp,0xc
c00218cb:	c3                   	ret    

c00218cc <SSE::open(int, int, void*)>:
c00218cc:	83 ec 0c             	sub    esp,0xc
c00218cf:	e8 a0 10 00 00       	call   c0022974 <sseInit>
c00218d4:	b8 00 00 00 00       	mov    eax,0x0
c00218d9:	83 c4 0c             	add    esp,0xc
c00218dc:	c3                   	ret    
c00218dd:	90                   	nop
c00218de:	66 90                	xchg   ax,ax

c00218e0 <SSE::close(int, int, void*)>:
c00218e0:	83 ec 0c             	sub    esp,0xc
c00218e3:	e8 9c 10 00 00       	call   c0022984 <sseClose>
c00218e8:	b8 00 00 00 00       	mov    eax,0x0
c00218ed:	83 c4 0c             	add    esp,0xc
c00218f0:	c3                   	ret    
c00218f1:	90                   	nop
c00218f2:	66 90                	xchg   ax,ax

c00218f4 <SSE::available()>:
c00218f4:	83 ec 1c             	sub    esp,0x1c
c00218f7:	e8 54 10 00 00       	call   c0022950 <absolutelyNoChanceInHell>
c00218fc:	85 c0                	test   eax,eax
c00218fe:	0f 95 c0             	setne  al
c0021901:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021905:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021909:	83 c4 1c             	add    esp,0x1c
c002190c:	c3                   	ret    
c002190d:	90                   	nop
c002190e:	66 90                	xchg   ax,ax

c0021910 <SSE::save(void*)>:
c0021910:	83 ec 0c             	sub    esp,0xc
c0021913:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021917:	83 ec 0c             	sub    esp,0xc
c002191a:	50                   	push   eax
c002191b:	e8 48 10 00 00       	call   c0022968 <sseSave>
c0021920:	83 c4 10             	add    esp,0x10
c0021923:	90                   	nop
c0021924:	83 c4 0c             	add    esp,0xc
c0021927:	c3                   	ret    

c0021928 <SSE::load(void*)>:
c0021928:	83 ec 0c             	sub    esp,0xc
c002192b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002192f:	83 ec 0c             	sub    esp,0xc
c0021932:	50                   	push   eax
c0021933:	e8 36 10 00 00       	call   c002296e <sseLoad>
c0021938:	83 c4 10             	add    esp,0x10
c002193b:	90                   	nop
c002193c:	83 c4 0c             	add    esp,0xc
c002193f:	c3                   	ret    

c0021940 <SSE::SSE()>:
c0021940:	83 ec 0c             	sub    esp,0xc
c0021943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021947:	83 ec 08             	sub    esp,0x8
c002194a:	68 c4 77 02 c0       	push   0xc00277c4
c002194f:	50                   	push   eax
c0021950:	e8 7b d1 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c0021955:	83 c4 10             	add    esp,0x10
c0021958:	ba d4 77 02 c0       	mov    edx,0xc00277d4
c002195d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021961:	89 10                	mov    DWORD PTR [eax],edx
c0021963:	90                   	nop
c0021964:	83 c4 0c             	add    esp,0xc
c0021967:	c3                   	ret    

c0021968 <x87::open(int, int, void*)>:
c0021968:	83 ec 0c             	sub    esp,0xc
c002196b:	83 ec 0c             	sub    esp,0xc
c002196e:	68 04 78 02 c0       	push   0xc0027804
c0021973:	e8 cf b6 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021978:	83 c4 10             	add    esp,0x10
c002197b:	e8 42 10 00 00       	call   c00229c2 <x87Init>
c0021980:	b8 00 00 00 00       	mov    eax,0x0
c0021985:	83 c4 0c             	add    esp,0xc
c0021988:	c3                   	ret    
c0021989:	90                   	nop
c002198a:	66 90                	xchg   ax,ax

c002198c <x87::close(int, int, void*)>:
c002198c:	83 ec 0c             	sub    esp,0xc
c002198f:	e8 48 10 00 00       	call   c00229dc <x87Close>
c0021994:	b8 00 00 00 00       	mov    eax,0x0
c0021999:	83 c4 0c             	add    esp,0xc
c002199c:	c3                   	ret    
c002199d:	90                   	nop
c002199e:	66 90                	xchg   ax,ax

c00219a0 <x87::available()>:
c00219a0:	83 ec 0c             	sub    esp,0xc
c00219a3:	e8 ee 0f 00 00       	call   c0022996 <x87Detect>
c00219a8:	85 c0                	test   eax,eax
c00219aa:	0f 95 c0             	setne  al
c00219ad:	83 c4 0c             	add    esp,0xc
c00219b0:	c3                   	ret    
c00219b1:	90                   	nop
c00219b2:	66 90                	xchg   ax,ax

c00219b4 <x87::save(void*)>:
c00219b4:	83 ec 0c             	sub    esp,0xc
c00219b7:	83 ec 0c             	sub    esp,0xc
c00219ba:	68 13 78 02 c0       	push   0xc0027813
c00219bf:	e8 83 b6 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00219c4:	83 c4 10             	add    esp,0x10
c00219c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219cb:	83 ec 0c             	sub    esp,0xc
c00219ce:	50                   	push   eax
c00219cf:	e8 dd 0f 00 00       	call   c00229b1 <x87Save>
c00219d4:	83 c4 10             	add    esp,0x10
c00219d7:	83 ec 0c             	sub    esp,0xc
c00219da:	68 24 78 02 c0       	push   0xc0027824
c00219df:	e8 63 b6 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00219e4:	83 c4 10             	add    esp,0x10
c00219e7:	90                   	nop
c00219e8:	83 c4 0c             	add    esp,0xc
c00219eb:	c3                   	ret    

c00219ec <x87::load(void*)>:
c00219ec:	83 ec 0c             	sub    esp,0xc
c00219ef:	83 ec 0c             	sub    esp,0xc
c00219f2:	68 35 78 02 c0       	push   0xc0027835
c00219f7:	e8 4b b6 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00219fc:	83 c4 10             	add    esp,0x10
c00219ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a03:	83 ec 0c             	sub    esp,0xc
c0021a06:	50                   	push   eax
c0021a07:	e8 ae 0f 00 00       	call   c00229ba <x87Load>
c0021a0c:	83 c4 10             	add    esp,0x10
c0021a0f:	83 ec 0c             	sub    esp,0xc
c0021a12:	68 46 78 02 c0       	push   0xc0027846
c0021a17:	e8 2b b6 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021a1c:	83 c4 10             	add    esp,0x10
c0021a1f:	90                   	nop
c0021a20:	83 c4 0c             	add    esp,0xc
c0021a23:	c3                   	ret    

c0021a24 <x87::x87()>:
c0021a24:	83 ec 0c             	sub    esp,0xc
c0021a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2b:	83 ec 08             	sub    esp,0x8
c0021a2e:	68 57 78 02 c0       	push   0xc0027857
c0021a33:	50                   	push   eax
c0021a34:	e8 97 d0 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c0021a39:	83 c4 10             	add    esp,0x10
c0021a3c:	ba 68 78 02 c0       	mov    edx,0xc0027868
c0021a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a45:	89 10                	mov    DWORD PTR [eax],edx
c0021a47:	90                   	nop
c0021a48:	83 c4 0c             	add    esp,0xc
c0021a4b:	c3                   	ret    

c0021a4c <APIC::disable()>:
c0021a4c:	90                   	nop
c0021a4d:	c3                   	ret    

c0021a4e <APIC::close(int, int, void*)>:
c0021a4e:	55                   	push   ebp
c0021a4f:	89 e5                	mov    ebp,esp
c0021a51:	83 ec 08             	sub    esp,0x8
c0021a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a59:	83 c0 3c             	add    eax,0x3c
c0021a5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a5e:	83 ec 0c             	sub    esp,0xc
c0021a61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a64:	ff d0                	call   eax
c0021a66:	83 c4 10             	add    esp,0x10
c0021a69:	b8 00 00 00 00       	mov    eax,0x0
c0021a6e:	c9                   	leave  
c0021a6f:	c3                   	ret    

c0021a70 <IOAPIC::close(int, int, void*)>:
c0021a70:	b8 00 00 00 00       	mov    eax,0x0
c0021a75:	c3                   	ret    

c0021a76 <APIC::io_wait()>:
c0021a76:	eb 00                	jmp    c0021a78 <APIC::io_wait()+0x2>
c0021a78:	eb 00                	jmp    c0021a7a <APIC::io_wait()+0x4>
c0021a7a:	90                   	nop
c0021a7b:	c3                   	ret    

c0021a7c <APIC::getBase()>:
c0021a7c:	55                   	push   ebp
c0021a7d:	89 e5                	mov    ebp,esp
c0021a7f:	83 ec 18             	sub    esp,0x18
c0021a82:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0021a87:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021a8d:	83 e0 08             	and    eax,0x8
c0021a90:	84 c0                	test   al,al
c0021a92:	75 07                	jne    c0021a9b <APIC::getBase()+0x1f>
c0021a94:	b8 00 00 00 00       	mov    eax,0x0
c0021a99:	eb 21                	jmp    c0021abc <APIC::getBase()+0x40>
c0021a9b:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0021aa0:	83 ec 08             	sub    esp,0x8
c0021aa3:	6a 1b                	push   0x1b
c0021aa5:	50                   	push   eax
c0021aa6:	e8 c3 77 fe ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0021aab:	83 c4 10             	add    esp,0x10
c0021aae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021ab1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021ab4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021ab7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021abc:	c9                   	leave  
c0021abd:	c3                   	ret    

c0021abe <APIC::eoi(unsigned char)>:
c0021abe:	55                   	push   ebp
c0021abf:	89 e5                	mov    ebp,esp
c0021ac1:	83 ec 28             	sub    esp,0x28
c0021ac4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021ac7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021aca:	83 ec 0c             	sub    esp,0xc
c0021acd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ad0:	e8 a7 ff ff ff       	call   c0021a7c <APIC::getBase()>
c0021ad5:	83 c4 10             	add    esp,0x10
c0021ad8:	05 b0 00 00 00       	add    eax,0xb0
c0021add:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021ae0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021ae3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021ae9:	90                   	nop
c0021aea:	c9                   	leave  
c0021aeb:	c3                   	ret    

c0021aec <APIC::open(int, int, void*)>:
c0021aec:	55                   	push   ebp
c0021aed:	89 e5                	mov    ebp,esp
c0021aef:	57                   	push   edi
c0021af0:	56                   	push   esi
c0021af1:	53                   	push   ebx
c0021af2:	83 ec 2c             	sub    esp,0x2c
c0021af5:	83 ec 0c             	sub    esp,0xc
c0021af8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021afb:	e8 7c ff ff ff       	call   c0021a7c <APIC::getBase()>
c0021b00:	83 c4 10             	add    esp,0x10
c0021b03:	89 c2                	mov    edx,eax
c0021b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b08:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021b0e:	0f b6 f8             	movzx  edi,al
c0021b11:	89 d0                	mov    eax,edx
c0021b13:	ba 00 00 00 00       	mov    edx,0x0
c0021b18:	89 c1                	mov    ecx,eax
c0021b1a:	80 e5 ff             	and    ch,0xff
c0021b1d:	89 cb                	mov    ebx,ecx
c0021b1f:	0f b6 f2             	movzx  esi,dl
c0021b22:	89 d8                	mov    eax,ebx
c0021b24:	89 f2                	mov    edx,esi
c0021b26:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021b29:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021b2c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021b30:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021b34:	83 e0 00             	and    eax,0x0
c0021b37:	09 d0                	or     eax,edx
c0021b39:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b40:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021b46:	8d 50 01             	lea    edx,[eax+0x1]
c0021b49:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021b4c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021b52:	0f b6 d0             	movzx  edx,al
c0021b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b58:	83 c2 08             	add    edx,0x8
c0021b5b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021b5f:	0f b6 c9             	movzx  ecx,cl
c0021b62:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021b68:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021b6c:	83 ec 0c             	sub    esp,0xc
c0021b6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b72:	e8 05 ff ff ff       	call   c0021a7c <APIC::getBase()>
c0021b77:	83 c4 10             	add    esp,0x10
c0021b7a:	05 f0 00 00 00       	add    eax,0xf0
c0021b7f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021b82:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021b85:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b87:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021b8a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021b91:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021b98:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021b9b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021b9e:	89 10                	mov    DWORD PTR [eax],edx
c0021ba0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021ba7:	a1 f0 90 02 c0       	mov    eax,ds:0xc00290f0
c0021bac:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021baf:	7d 7c                	jge    c0021c2d <APIC::open(int, int, void*)+0x141>
c0021bb1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021bb4:	8b 04 85 00 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f00]
c0021bbb:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021bbe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021bc1:	8b 04 85 00 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f00]
c0021bc8:	c1 e8 08             	shr    eax,0x8
c0021bcb:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021bcf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021bd2:	8b 04 85 00 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f00]
c0021bd9:	c1 e8 18             	shr    eax,0x18
c0021bdc:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021bdf:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021be3:	75 40                	jne    c0021c25 <APIC::open(int, int, void*)+0x139>
c0021be5:	83 ec 0c             	sub    esp,0xc
c0021be8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021beb:	e8 8c fe ff ff       	call   c0021a7c <APIC::getBase()>
c0021bf0:	83 c4 10             	add    esp,0x10
c0021bf3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021bf7:	75 07                	jne    c0021c00 <APIC::open(int, int, void*)+0x114>
c0021bf9:	ba 60 03 00 00       	mov    edx,0x360
c0021bfe:	eb 05                	jmp    c0021c05 <APIC::open(int, int, void*)+0x119>
c0021c00:	ba 50 03 00 00       	mov    edx,0x350
c0021c05:	01 d0                	add    eax,edx
c0021c07:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021c0a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c0f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021c12:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021c19:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021c1d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021c20:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021c23:	89 10                	mov    DWORD PTR [eax],edx
c0021c25:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021c28:	e9 7a ff ff ff       	jmp    c0021ba7 <APIC::open(int, int, void*)+0xbb>
c0021c2d:	b8 00 00 00 00       	mov    eax,0x0
c0021c32:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021c35:	5b                   	pop    ebx
c0021c36:	5e                   	pop    esi
c0021c37:	5f                   	pop    edi
c0021c38:	5d                   	pop    ebp
c0021c39:	c3                   	ret    

c0021c3a <IOAPIC::IOAPIC()>:
c0021c3a:	83 ec 0c             	sub    esp,0xc
c0021c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c41:	83 ec 08             	sub    esp,0x8
c0021c44:	68 98 78 02 c0       	push   0xc0027898
c0021c49:	50                   	push   eax
c0021c4a:	e8 6f cb fe ff       	call   c000e7be <Device::Device(char const*)>
c0021c4f:	83 c4 10             	add    esp,0x10
c0021c52:	ba c0 79 02 c0       	mov    edx,0xc00279c0
c0021c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c5b:	89 10                	mov    DWORD PTR [eax],edx
c0021c5d:	90                   	nop
c0021c5e:	83 c4 0c             	add    esp,0xc
c0021c61:	c3                   	ret    

c0021c62 <APIC::APIC()>:
c0021c62:	53                   	push   ebx
c0021c63:	83 ec 18             	sub    esp,0x18
c0021c66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c6a:	83 ec 08             	sub    esp,0x8
c0021c6d:	68 a0 78 02 c0       	push   0xc00278a0
c0021c72:	50                   	push   eax
c0021c73:	e8 72 d2 fe ff       	call   c000eeea <InterruptController::InterruptController(char const*)>
c0021c78:	83 c4 10             	add    esp,0x10
c0021c7b:	ba 78 79 02 c0       	mov    edx,0xc0027978
c0021c80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c84:	89 10                	mov    DWORD PTR [eax],edx
c0021c86:	a0 20 a8 02 c0       	mov    al,ds:0xc002a820
c0021c8b:	83 f0 01             	xor    eax,0x1
c0021c8e:	84 c0                	test   al,al
c0021c90:	0f 84 a1 00 00 00    	je     c0021d37 <APIC::APIC()+0xd5>
c0021c96:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021c9b:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c0021ca0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021ca4:	0f 83 86 00 00 00    	jae    c0021d30 <APIC::APIC()+0xce>
c0021caa:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021cb2:	83 ec 0c             	sub    esp,0xc
c0021cb5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021cb9:	e8 9d 80 fe ff       	call   c0009d5b <malloc>
c0021cbe:	83 c4 10             	add    esp,0x10
c0021cc1:	89 c3                	mov    ebx,eax
c0021cc3:	83 ec 0c             	sub    esp,0xc
c0021cc6:	53                   	push   ebx
c0021cc7:	e8 6e ff ff ff       	call   c0021c3a <IOAPIC::IOAPIC()>
c0021ccc:	83 c4 10             	add    esp,0x10
c0021ccf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021cd3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021cd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021cdc:	89 14 85 00 a8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5800],edx
c0021ce3:	a1 e0 a7 02 c0       	mov    eax,ds:0xc002a7e0
c0021ce8:	40                   	inc    eax
c0021ce9:	a3 e0 a7 02 c0       	mov    ds:0xc002a7e0,eax
c0021cee:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0021cf3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021cf9:	83 ec 08             	sub    esp,0x8
c0021cfc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021d00:	50                   	push   eax
c0021d01:	e8 b4 c8 fe ff       	call   c000e5ba <Device::addChild(Device*)>
c0021d06:	83 c4 10             	add    esp,0x10
c0021d09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d0f:	83 c0 08             	add    eax,0x8
c0021d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d14:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021d19:	6a 00                	push   0x0
c0021d1b:	6a 00                	push   0x0
c0021d1d:	52                   	push   edx
c0021d1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d22:	ff d0                	call   eax
c0021d24:	83 c4 10             	add    esp,0x10
c0021d27:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021d2b:	e9 6b ff ff ff       	jmp    c0021c9b <APIC::APIC()+0x39>
c0021d30:	c6 05 20 a8 02 c0 01 	mov    BYTE PTR ds:0xc002a820,0x1
c0021d37:	90                   	nop
c0021d38:	83 c4 18             	add    esp,0x18
c0021d3b:	5b                   	pop    ebx
c0021d3c:	c3                   	ret    
c0021d3d:	90                   	nop

c0021d3e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021d3e:	55                   	push   ebp
c0021d3f:	89 e5                	mov    ebp,esp
c0021d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021d44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021d4a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021d4d:	72 1d                	jb     c0021d6c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021d4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021d52:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021d58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021d5b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021d61:	01 d0                	add    eax,edx
c0021d63:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021d66:	73 04                	jae    c0021d6c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021d68:	b0 01                	mov    al,0x1
c0021d6a:	eb 02                	jmp    c0021d6e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021d6c:	b0 00                	mov    al,0x0
c0021d6e:	5d                   	pop    ebp
c0021d6f:	c3                   	ret    

c0021d70 <IOAPIC::read(int)>:
c0021d70:	55                   	push   ebp
c0021d71:	89 e5                	mov    ebp,esp
c0021d73:	83 ec 10             	sub    esp,0x10
c0021d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021d79:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021d7f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021d82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d85:	0f b6 d0             	movzx  edx,al
c0021d88:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021d8b:	89 10                	mov    DWORD PTR [eax],edx
c0021d8d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021d90:	83 c0 10             	add    eax,0x10
c0021d93:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d95:	c9                   	leave  
c0021d96:	c3                   	ret    
c0021d97:	90                   	nop

c0021d98 <IOAPIC::open(int, int, void*)>:
c0021d98:	55                   	push   ebp
c0021d99:	89 e5                	mov    ebp,esp
c0021d9b:	57                   	push   edi
c0021d9c:	56                   	push   esi
c0021d9d:	53                   	push   ebx
c0021d9e:	83 ec 0c             	sub    esp,0xc
c0021da1:	83 ec 0c             	sub    esp,0xc
c0021da4:	68 cb 78 02 c0       	push   0xc00278cb
c0021da9:	e8 99 b2 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021dae:	83 c4 10             	add    esp,0x10
c0021db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021db4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021db7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021dbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021dc0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021dc6:	8b 14 85 e0 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6e20]
c0021dcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021dd0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021dd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021dd9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021ddf:	8b 14 85 60 92 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6da0]
c0021de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021de9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021df2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021dfb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021e01:	0f b6 f8             	movzx  edi,al
c0021e04:	89 d0                	mov    eax,edx
c0021e06:	ba 00 00 00 00       	mov    edx,0x0
c0021e0b:	89 c1                	mov    ecx,eax
c0021e0d:	80 e5 ff             	and    ch,0xff
c0021e10:	89 cb                	mov    ebx,ecx
c0021e12:	0f b6 f2             	movzx  esi,dl
c0021e15:	89 d8                	mov    eax,ebx
c0021e17:	89 f2                	mov    edx,esi
c0021e19:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021e1c:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021e1f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021e23:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021e27:	83 e0 00             	and    eax,0x0
c0021e2a:	09 d0                	or     eax,edx
c0021e2c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e33:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021e39:	8d 50 01             	lea    edx,[eax+0x1]
c0021e3c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021e3f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021e45:	0f b6 d0             	movzx  edx,al
c0021e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e4b:	83 c2 08             	add    edx,0x8
c0021e4e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021e52:	0f b6 c9             	movzx  ecx,cl
c0021e55:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0021e5b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021e5f:	83 ec 08             	sub    esp,0x8
c0021e62:	6a 01                	push   0x1
c0021e64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e67:	e8 04 ff ff ff       	call   c0021d70 <IOAPIC::read(int)>
c0021e6c:	83 c4 10             	add    esp,0x10
c0021e6f:	c1 f8 10             	sar    eax,0x10
c0021e72:	0f b6 c0             	movzx  eax,al
c0021e75:	8d 50 01             	lea    edx,[eax+0x1]
c0021e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e7b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021e81:	b8 00 00 00 00       	mov    eax,0x0
c0021e86:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021e89:	5b                   	pop    ebx
c0021e8a:	5e                   	pop    esi
c0021e8b:	5f                   	pop    edi
c0021e8c:	5d                   	pop    ebp
c0021e8d:	c3                   	ret    

c0021e8e <IOAPIC::write(int, int)>:
c0021e8e:	55                   	push   ebp
c0021e8f:	89 e5                	mov    ebp,esp
c0021e91:	83 ec 10             	sub    esp,0x10
c0021e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e97:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021e9d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021ea0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021ea3:	0f b6 d0             	movzx  edx,al
c0021ea6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021ea9:	89 10                	mov    DWORD PTR [eax],edx
c0021eab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021eae:	8d 50 10             	lea    edx,[eax+0x10]
c0021eb1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021eb4:	89 02                	mov    DWORD PTR [edx],eax
c0021eb6:	90                   	nop
c0021eb7:	c9                   	leave  
c0021eb8:	c3                   	ret    
c0021eb9:	90                   	nop

c0021eba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021eba:	55                   	push   ebp
c0021ebb:	89 e5                	mov    ebp,esp
c0021ebd:	53                   	push   ebx
c0021ebe:	83 ec 2c             	sub    esp,0x2c
c0021ec1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021ec4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021ec7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021eca:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021ecd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021ed0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021ed3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021ed6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021ed9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021edc:	88 d8                	mov    al,bl
c0021ede:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021ee1:	88 c8                	mov    al,cl
c0021ee3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021ee6:	88 d0                	mov    al,dl
c0021ee8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021eeb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021eef:	83 c0 08             	add    eax,0x8
c0021ef2:	01 c0                	add    eax,eax
c0021ef4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021ef7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021efb:	83 c0 08             	add    eax,0x8
c0021efe:	01 c0                	add    eax,eax
c0021f00:	40                   	inc    eax
c0021f01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0021f04:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021f07:	50                   	push   eax
c0021f08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f0b:	e8 60 fe ff ff       	call   c0021d70 <IOAPIC::read(int)>
c0021f10:	83 c4 08             	add    esp,0x8
c0021f13:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021f16:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021f1d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021f20:	c1 e0 18             	shl    eax,0x18
c0021f23:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0021f26:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021f29:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021f2c:	52                   	push   edx
c0021f2d:	50                   	push   eax
c0021f2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f31:	e8 58 ff ff ff       	call   c0021e8e <IOAPIC::write(int, int)>
c0021f36:	83 c4 0c             	add    esp,0xc
c0021f39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021f3c:	50                   	push   eax
c0021f3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f40:	e8 2b fe ff ff       	call   c0021d70 <IOAPIC::read(int)>
c0021f45:	83 c4 08             	add    esp,0x8
c0021f48:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021f4b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021f52:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0021f59:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021f60:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021f64:	74 09                	je     c0021f6f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021f66:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021f6d:	eb 07                	jmp    c0021f76 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0021f6f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021f76:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0021f7a:	74 09                	je     c0021f85 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0021f7c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021f83:	eb 07                	jmp    c0021f8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021f85:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021f8c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021f93:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021f97:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021f9a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021f9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021fa0:	52                   	push   edx
c0021fa1:	50                   	push   eax
c0021fa2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fa5:	e8 e4 fe ff ff       	call   c0021e8e <IOAPIC::write(int, int)>
c0021faa:	83 c4 0c             	add    esp,0xc
c0021fad:	90                   	nop
c0021fae:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021fb1:	c9                   	leave  
c0021fb2:	c3                   	ret    
c0021fb3:	90                   	nop

c0021fb4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021fb4:	55                   	push   ebp
c0021fb5:	89 e5                	mov    ebp,esp
c0021fb7:	57                   	push   edi
c0021fb8:	56                   	push   esi
c0021fb9:	53                   	push   ebx
c0021fba:	83 ec 2c             	sub    esp,0x2c
c0021fbd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021fc0:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021fc3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021fc7:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021fcb:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021fcf:	74 5a                	je     c002202b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021fd1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021fd5:	7f 44                	jg     c002201b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021fd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021fda:	05 80 7f 02 c0       	add    eax,0xc0027f80
c0021fdf:	8a 00                	mov    al,BYTE PTR [eax]
c0021fe1:	0f b6 c0             	movzx  eax,al
c0021fe4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0021fe7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021fea:	66 8b 84 00 80 91 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6e80]
c0021ff2:	0f b7 c0             	movzx  eax,ax
c0021ff5:	83 e0 02             	and    eax,0x2
c0021ff8:	85 c0                	test   eax,eax
c0021ffa:	74 04                	je     c0022000 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021ffc:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0022000:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022003:	66 8b 84 00 80 91 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6e80]
c002200b:	0f b7 c0             	movzx  eax,ax
c002200e:	83 e0 08             	and    eax,0x8
c0022011:	85 c0                	test   eax,eax
c0022013:	74 16                	je     c002202b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022015:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022019:	eb 10                	jmp    c002202b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002201b:	83 ec 0c             	sub    esp,0xc
c002201e:	68 dc 78 02 c0       	push   0xc00278dc
c0022023:	e8 bd 2f ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0022028:	83 c4 10             	add    esp,0x10
c002202b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002202f:	a1 e0 a7 02 c0       	mov    eax,ds:0xc002a7e0
c0022034:	83 ec 08             	sub    esp,0x8
c0022037:	50                   	push   eax
c0022038:	68 14 79 02 c0       	push   0xc0027914
c002203d:	e8 05 b0 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0022042:	83 c4 10             	add    esp,0x10
c0022045:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002204c:	a1 e0 a7 02 c0       	mov    eax,ds:0xc002a7e0
c0022051:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0022054:	7d 67                	jge    c00220bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022056:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022059:	8b 04 85 00 a8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5800]
c0022060:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022063:	83 ec 08             	sub    esp,0x8
c0022066:	52                   	push   edx
c0022067:	50                   	push   eax
c0022068:	e8 d1 fc ff ff       	call   c0021d3e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002206d:	83 c4 10             	add    esp,0x10
c0022070:	84 c0                	test   al,al
c0022072:	74 44                	je     c00220b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0022074:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022077:	8b 1c 85 00 a8 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5800]
c002207e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022082:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022085:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0022089:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002208c:	83 c0 20             	add    eax,0x20
c002208f:	0f b6 f0             	movzx  esi,al
c0022092:	b8 00 00 00 00       	mov    eax,0x0
c0022097:	99                   	cdq    
c0022098:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002209b:	0f b6 c9             	movzx  ecx,cl
c002209e:	83 ec 04             	sub    esp,0x4
c00220a1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00220a4:	57                   	push   edi
c00220a5:	56                   	push   esi
c00220a6:	52                   	push   edx
c00220a7:	50                   	push   eax
c00220a8:	51                   	push   ecx
c00220a9:	53                   	push   ebx
c00220aa:	e8 0b fe ff ff       	call   c0021eba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00220af:	83 c4 20             	add    esp,0x20
c00220b2:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00220b6:	eb 05                	jmp    c00220bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00220b8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00220bb:	eb 8f                	jmp    c002204c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00220bd:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00220c0:	83 f0 01             	xor    eax,0x1
c00220c3:	84 c0                	test   al,al
c00220c5:	74 10                	je     c00220d7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00220c7:	83 ec 0c             	sub    esp,0xc
c00220ca:	68 2b 79 02 c0       	push   0xc002792b
c00220cf:	e8 11 2f ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c00220d4:	83 c4 10             	add    esp,0x10
c00220d7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00220db:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00220e2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00220e6:	7f 65                	jg     c002214d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00220e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00220ee:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00220f5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00220f8:	01 ca                	add    edx,ecx
c00220fa:	83 c2 54             	add    edx,0x54
c00220fd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022101:	85 c0                	test   eax,eax
c0022103:	75 43                	jne    c0022148 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0022105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022108:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002210b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022112:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022115:	01 ca                	add    edx,ecx
c0022117:	8d 4a 54             	lea    ecx,[edx+0x54]
c002211a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002211d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022124:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022127:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002212e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022131:	01 ca                	add    edx,ecx
c0022133:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0022139:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002213c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022140:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022143:	83 e8 20             	sub    eax,0x20
c0022146:	eb 1a                	jmp    c0022162 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0022148:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002214b:	eb 95                	jmp    c00220e2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002214d:	83 ec 0c             	sub    esp,0xc
c0022150:	68 38 79 02 c0       	push   0xc0027938
c0022155:	e8 8b 2e ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c002215a:	83 c4 10             	add    esp,0x10
c002215d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022162:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022165:	5b                   	pop    ebx
c0022166:	5e                   	pop    esi
c0022167:	5f                   	pop    edi
c0022168:	5d                   	pop    ebp
c0022169:	c3                   	ret    

c002216a <PIC::disable()>:
c002216a:	55                   	push   ebp
c002216b:	89 e5                	mov    ebp,esp
c002216d:	83 ec 10             	sub    esp,0x10
c0022170:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022176:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002217a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002217d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022181:	ee                   	out    dx,al
c0022182:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022188:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002218c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002218f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022193:	ee                   	out    dx,al
c0022194:	90                   	nop
c0022195:	c9                   	leave  
c0022196:	c3                   	ret    
c0022197:	90                   	nop

c0022198 <PIC::close(int, int, void*)>:
c0022198:	55                   	push   ebp
c0022199:	89 e5                	mov    ebp,esp
c002219b:	83 ec 08             	sub    esp,0x8
c002219e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00221a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00221a3:	83 c0 3c             	add    eax,0x3c
c00221a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00221a8:	83 ec 0c             	sub    esp,0xc
c00221ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221ae:	ff d0                	call   eax
c00221b0:	83 c4 10             	add    esp,0x10
c00221b3:	b8 00 00 00 00       	mov    eax,0x0
c00221b8:	c9                   	leave  
c00221b9:	c3                   	ret    

c00221ba <PIC::PIC()>:
c00221ba:	83 ec 0c             	sub    esp,0xc
c00221bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c1:	83 ec 08             	sub    esp,0x8
c00221c4:	68 e4 79 02 c0       	push   0xc00279e4
c00221c9:	50                   	push   eax
c00221ca:	e8 1b cd fe ff       	call   c000eeea <InterruptController::InterruptController(char const*)>
c00221cf:	83 c4 10             	add    esp,0x10
c00221d2:	ba 10 7a 02 c0       	mov    edx,0xc0027a10
c00221d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221db:	89 10                	mov    DWORD PTR [eax],edx
c00221dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221e7:	0f b6 d0             	movzx  edx,al
c00221ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ee:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00221f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221ff:	0f b6 d0             	movzx  edx,al
c0022202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022206:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002220b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022215:	8d 50 01             	lea    edx,[eax+0x1]
c0022218:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002221c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022222:	0f b6 d0             	movzx  edx,al
c0022225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022229:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002222d:	83 e1 3f             	and    ecx,0x3f
c0022230:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022238:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002223e:	0f b6 d0             	movzx  edx,al
c0022241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022245:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002224c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022250:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022256:	0f b6 d0             	movzx  edx,al
c0022259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022266:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002226c:	8d 50 01             	lea    edx,[eax+0x1]
c002226f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022273:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022279:	0f b6 d0             	movzx  edx,al
c002227c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022280:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022284:	83 e1 3f             	and    ecx,0x3f
c0022287:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002228b:	90                   	nop
c002228c:	83 c4 0c             	add    esp,0xc
c002228f:	c3                   	ret    

c0022290 <PIC::ioWait()>:
c0022290:	eb 00                	jmp    c0022292 <PIC::ioWait()+0x2>
c0022292:	eb 00                	jmp    c0022294 <PIC::ioWait()+0x4>
c0022294:	90                   	nop
c0022295:	c3                   	ret    

c0022296 <PIC::getIRQReg(int)>:
c0022296:	55                   	push   ebp
c0022297:	89 e5                	mov    ebp,esp
c0022299:	83 ec 10             	sub    esp,0x10
c002229c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002229f:	0f b6 c0             	movzx  eax,al
c00222a2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00222a8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00222ab:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00222ae:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00222b2:	ee                   	out    dx,al
c00222b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00222b6:	0f b6 c0             	movzx  eax,al
c00222b9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00222bf:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00222c2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00222c5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00222c9:	ee                   	out    dx,al
c00222ca:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00222d0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00222d4:	89 c2                	mov    edx,eax
c00222d6:	ec                   	in     al,dx
c00222d7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00222da:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00222dd:	0f b6 c0             	movzx  eax,al
c00222e0:	c1 e0 08             	shl    eax,0x8
c00222e3:	89 c1                	mov    ecx,eax
c00222e5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00222eb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00222ef:	89 c2                	mov    edx,eax
c00222f1:	ec                   	in     al,dx
c00222f2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00222f5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00222f8:	0f b6 c0             	movzx  eax,al
c00222fb:	09 c8                	or     eax,ecx
c00222fd:	c9                   	leave  
c00222fe:	c3                   	ret    
c00222ff:	90                   	nop

c0022300 <PIC::eoi(unsigned char)>:
c0022300:	55                   	push   ebp
c0022301:	89 e5                	mov    ebp,esp
c0022303:	83 ec 14             	sub    esp,0x14
c0022306:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022309:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002230c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022310:	75 1e                	jne    c0022330 <PIC::eoi(unsigned char)+0x30>
c0022312:	6a 0b                	push   0xb
c0022314:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022317:	e8 7a ff ff ff       	call   c0022296 <PIC::getIRQReg(int)>
c002231c:	83 c4 08             	add    esp,0x8
c002231f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022323:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022327:	25 80 00 00 00       	and    eax,0x80
c002232c:	85 c0                	test   eax,eax
c002232e:	74 5f                	je     c002238f <PIC::eoi(unsigned char)+0x8f>
c0022330:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022334:	75 2d                	jne    c0022363 <PIC::eoi(unsigned char)+0x63>
c0022336:	6a 0b                	push   0xb
c0022338:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002233b:	e8 56 ff ff ff       	call   c0022296 <PIC::getIRQReg(int)>
c0022340:	83 c4 08             	add    esp,0x8
c0022343:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022347:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002234a:	66 85 c0             	test   ax,ax
c002234d:	78 14                	js     c0022363 <PIC::eoi(unsigned char)+0x63>
c002234f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022355:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022359:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002235c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022360:	ee                   	out    dx,al
c0022361:	eb 2d                	jmp    c0022390 <PIC::eoi(unsigned char)+0x90>
c0022363:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022367:	76 12                	jbe    c002237b <PIC::eoi(unsigned char)+0x7b>
c0022369:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002236f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022373:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022376:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002237a:	ee                   	out    dx,al
c002237b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022381:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022385:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022388:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002238c:	ee                   	out    dx,al
c002238d:	eb 01                	jmp    c0022390 <PIC::eoi(unsigned char)+0x90>
c002238f:	90                   	nop
c0022390:	c9                   	leave  
c0022391:	c3                   	ret    

c0022392 <PIC::remap()>:
c0022392:	55                   	push   ebp
c0022393:	89 e5                	mov    ebp,esp
c0022395:	83 ec 48             	sub    esp,0x48
c0022398:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002239f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00223a6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00223ac:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00223af:	89 c2                	mov    edx,eax
c00223b1:	ec                   	in     al,dx
c00223b2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00223b5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00223b8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00223bb:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00223c1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00223c4:	89 c2                	mov    edx,eax
c00223c6:	ec                   	in     al,dx
c00223c7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00223ca:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00223cd:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00223d0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00223d6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00223da:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00223dd:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00223e0:	ee                   	out    dx,al
c00223e1:	83 ec 0c             	sub    esp,0xc
c00223e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00223e7:	e8 a4 fe ff ff       	call   c0022290 <PIC::ioWait()>
c00223ec:	83 c4 10             	add    esp,0x10
c00223ef:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00223f5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00223f9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00223fc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00223ff:	ee                   	out    dx,al
c0022400:	83 ec 0c             	sub    esp,0xc
c0022403:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022406:	e8 85 fe ff ff       	call   c0022290 <PIC::ioWait()>
c002240b:	83 c4 10             	add    esp,0x10
c002240e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022411:	0f b6 c0             	movzx  eax,al
c0022414:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002241a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002241d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022420:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022423:	ee                   	out    dx,al
c0022424:	83 ec 0c             	sub    esp,0xc
c0022427:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002242a:	e8 61 fe ff ff       	call   c0022290 <PIC::ioWait()>
c002242f:	83 c4 10             	add    esp,0x10
c0022432:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022435:	0f b6 c0             	movzx  eax,al
c0022438:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002243e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022441:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022444:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022447:	ee                   	out    dx,al
c0022448:	83 ec 0c             	sub    esp,0xc
c002244b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002244e:	e8 3d fe ff ff       	call   c0022290 <PIC::ioWait()>
c0022453:	83 c4 10             	add    esp,0x10
c0022456:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002245c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022460:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022463:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022466:	ee                   	out    dx,al
c0022467:	83 ec 0c             	sub    esp,0xc
c002246a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002246d:	e8 1e fe ff ff       	call   c0022290 <PIC::ioWait()>
c0022472:	83 c4 10             	add    esp,0x10
c0022475:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002247b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002247f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022482:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022485:	ee                   	out    dx,al
c0022486:	83 ec 0c             	sub    esp,0xc
c0022489:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002248c:	e8 ff fd ff ff       	call   c0022290 <PIC::ioWait()>
c0022491:	83 c4 10             	add    esp,0x10
c0022494:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002249a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002249e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00224a1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00224a4:	ee                   	out    dx,al
c00224a5:	83 ec 0c             	sub    esp,0xc
c00224a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00224ab:	e8 e0 fd ff ff       	call   c0022290 <PIC::ioWait()>
c00224b0:	83 c4 10             	add    esp,0x10
c00224b3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00224b9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00224bd:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00224c0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00224c3:	ee                   	out    dx,al
c00224c4:	83 ec 0c             	sub    esp,0xc
c00224c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00224ca:	e8 c1 fd ff ff       	call   c0022290 <PIC::ioWait()>
c00224cf:	83 c4 10             	add    esp,0x10
c00224d2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00224d6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00224dc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00224df:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00224e2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00224e5:	ee                   	out    dx,al
c00224e6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00224ea:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00224f0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00224f3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00224f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00224f9:	ee                   	out    dx,al
c00224fa:	90                   	nop
c00224fb:	c9                   	leave  
c00224fc:	c3                   	ret    
c00224fd:	90                   	nop

c00224fe <PIC::open(int, int, void*)>:
c00224fe:	55                   	push   ebp
c00224ff:	89 e5                	mov    ebp,esp
c0022501:	83 ec 18             	sub    esp,0x18
c0022504:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002250a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002250e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022511:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022515:	ee                   	out    dx,al
c0022516:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002251c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022520:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022523:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022527:	ee                   	out    dx,al
c0022528:	83 ec 0c             	sub    esp,0xc
c002252b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002252e:	e8 5f fe ff ff       	call   c0022392 <PIC::remap()>
c0022533:	83 c4 10             	add    esp,0x10
c0022536:	b8 00 00 00 00       	mov    eax,0x0
c002253b:	c9                   	leave  
c002253c:	c3                   	ret    
c002253d:	66 90                	xchg   ax,ax
c002253f:	90                   	nop

c0022540 <APICTimer::close(int, int, void*)>:
c0022540:	b8 00 00 00 00       	mov    eax,0x0
c0022545:	c3                   	ret    
c0022546:	66 90                	xchg   ax,ax

c0022548 <apicTimerHandler(regs*, void*)>:
c0022548:	83 ec 0c             	sub    esp,0xc
c002254b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002254f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022551:	b8 10 27 00 00       	mov    eax,0x2710
c0022556:	ba 00 00 00 00       	mov    edx,0x0
c002255b:	f7 f1                	div    ecx
c002255d:	83 ec 0c             	sub    esp,0xc
c0022560:	50                   	push   eax
c0022561:	e8 d3 e8 fe ff       	call   c0010e39 <timerHandler(unsigned int)>
c0022566:	83 c4 10             	add    esp,0x10
c0022569:	90                   	nop
c002256a:	83 c4 0c             	add    esp,0xc
c002256d:	c3                   	ret    
c002256e:	66 90                	xchg   ax,ax

c0022570 <APICTimer::write(int)>:
c0022570:	83 ec 1c             	sub    esp,0x1c
c0022573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022577:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002257b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022581:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0022586:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002258c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022592:	83 ec 0c             	sub    esp,0xc
c0022595:	50                   	push   eax
c0022596:	e8 e1 f4 ff ff       	call   c0021a7c <APIC::getBase()>
c002259b:	83 c4 10             	add    esp,0x10
c002259e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00225a2:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c00225a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225af:	05 e0 03 00 00       	add    eax,0x3e0
c00225b4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00225ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225be:	05 80 03 00 00       	add    eax,0x380
c00225c3:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00225c9:	fb                   	sti    
c00225ca:	66 90                	xchg   ax,ax
c00225cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00225d0:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00225d6:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c00225db:	39 c2                	cmp    edx,eax
c00225dd:	76 05                	jbe    c00225e4 <APICTimer::write(int)+0x74>
c00225df:	eb eb                	jmp    c00225cc <APICTimer::write(int)+0x5c>
c00225e1:	8d 76 00             	lea    esi,[esi+0x0]
c00225e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225e8:	05 20 03 00 00       	add    eax,0x320
c00225ed:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00225f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225f7:	05 90 03 00 00       	add    eax,0x390
c00225fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00225fe:	f7 d0                	not    eax
c0022600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022604:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002260c:	ba 00 00 00 00       	mov    edx,0x0
c0022611:	f7 f1                	div    ecx
c0022613:	89 04 24             	mov    DWORD PTR [esp],eax
c0022616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002261a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022620:	0d 00 00 02 00       	or     eax,0x20000
c0022625:	89 c2                	mov    edx,eax
c0022627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002262b:	05 20 03 00 00       	add    eax,0x320
c0022630:	89 10                	mov    DWORD PTR [eax],edx
c0022632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022636:	05 e0 03 00 00       	add    eax,0x3e0
c002263b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022641:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022645:	05 80 03 00 00       	add    eax,0x380
c002264a:	89 c2                	mov    edx,eax
c002264c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002264f:	89 02                	mov    DWORD PTR [edx],eax
c0022651:	90                   	nop
c0022652:	83 c4 1c             	add    esp,0x1c
c0022655:	c3                   	ret    
c0022656:	66 90                	xchg   ax,ax

c0022658 <APICTimer::open(int, int, void*)>:
c0022658:	57                   	push   edi
c0022659:	56                   	push   esi
c002265a:	53                   	push   ebx
c002265b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002265f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022661:	83 c0 24             	add    eax,0x24
c0022664:	8b 00                	mov    eax,DWORD PTR [eax]
c0022666:	83 ec 08             	sub    esp,0x8
c0022669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002266d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022671:	ff d0                	call   eax
c0022673:	83 c4 10             	add    esp,0x10
c0022676:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c002267b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022681:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022687:	83 ec 0c             	sub    esp,0xc
c002268a:	50                   	push   eax
c002268b:	e8 ec f3 ff ff       	call   c0021a7c <APIC::getBase()>
c0022690:	83 c4 10             	add    esp,0x10
c0022693:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002269d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00226a3:	0f b6 f8             	movzx  edi,al
c00226a6:	89 d0                	mov    eax,edx
c00226a8:	ba 00 00 00 00       	mov    edx,0x0
c00226ad:	89 c1                	mov    ecx,eax
c00226af:	80 e5 ff             	and    ch,0xff
c00226b2:	89 cb                	mov    ebx,ecx
c00226b4:	0f b6 f2             	movzx  esi,dl
c00226b7:	89 d8                	mov    eax,ebx
c00226b9:	89 f2                	mov    edx,esi
c00226bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00226bf:	8d 5f 08             	lea    ebx,[edi+0x8]
c00226c2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00226c6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00226ca:	83 e0 00             	and    eax,0x0
c00226cd:	09 d0                	or     eax,edx
c00226cf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00226d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226d7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00226dd:	8d 50 01             	lea    edx,[eax+0x1]
c00226e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00226e4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00226ea:	0f b6 d0             	movzx  edx,al
c00226ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226f1:	83 c2 08             	add    edx,0x8
c00226f4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00226f8:	0f b6 c9             	movzx  ecx,cl
c00226fb:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022701:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022709:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002270d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022717:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002271b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022721:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022725:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002272b:	83 ec 0c             	sub    esp,0xc
c002272e:	51                   	push   ecx
c002272f:	6a 01                	push   0x1
c0022731:	68 48 25 02 c0       	push   0xc0022548
c0022736:	52                   	push   edx
c0022737:	50                   	push   eax
c0022738:	e8 f5 bd fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002273d:	83 c4 20             	add    esp,0x20
c0022740:	89 c2                	mov    edx,eax
c0022742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022746:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002274c:	b8 00 00 00 00       	mov    eax,0x0
c0022751:	5b                   	pop    ebx
c0022752:	5e                   	pop    esi
c0022753:	5f                   	pop    edi
c0022754:	c3                   	ret    
c0022755:	90                   	nop
c0022756:	66 90                	xchg   ax,ax

c0022758 <APICTimer::APICTimer()>:
c0022758:	83 ec 0c             	sub    esp,0xc
c002275b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002275f:	83 ec 08             	sub    esp,0x8
c0022762:	68 50 7a 02 c0       	push   0xc0027a50
c0022767:	50                   	push   eax
c0022768:	e8 3b e6 fe ff       	call   c0010da8 <Timer::Timer(char const*)>
c002276d:	83 c4 10             	add    esp,0x10
c0022770:	ba 64 7a 02 c0       	mov    edx,0xc0027a64
c0022775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022779:	89 10                	mov    DWORD PTR [eax],edx
c002277b:	90                   	nop
c002277c:	83 c4 0c             	add    esp,0xc
c002277f:	c3                   	ret    

c0022780 <PIT::write(int)>:
c0022780:	83 ec 10             	sub    esp,0x10
c0022783:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022787:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002278b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022791:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022795:	a3 24 a8 02 c0       	mov    ds:0xc002a824,eax
c002279a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002279f:	99                   	cdq    
c00227a0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00227a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00227a8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00227af:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00227b4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00227b8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00227bd:	ee                   	out    dx,al
c00227be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227c2:	0f b6 c0             	movzx  eax,al
c00227c5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00227cc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00227d0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00227d4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00227d9:	ee                   	out    dx,al
c00227da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227de:	c1 f8 08             	sar    eax,0x8
c00227e1:	0f b6 c0             	movzx  eax,al
c00227e4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00227eb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00227ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00227f3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00227f8:	ee                   	out    dx,al
c00227f9:	90                   	nop
c00227fa:	83 c4 10             	add    esp,0x10
c00227fd:	c3                   	ret    
c00227fe:	66 90                	xchg   ax,ax

c0022800 <pitHandler(regs*, void*)>:
c0022800:	83 ec 0c             	sub    esp,0xc
c0022803:	8b 0d 24 a8 02 c0    	mov    ecx,DWORD PTR ds:0xc002a824
c0022809:	b8 10 27 00 00       	mov    eax,0x2710
c002280e:	99                   	cdq    
c002280f:	f7 f9                	idiv   ecx
c0022811:	83 ec 0c             	sub    esp,0xc
c0022814:	50                   	push   eax
c0022815:	e8 1f e6 fe ff       	call   c0010e39 <timerHandler(unsigned int)>
c002281a:	83 c4 10             	add    esp,0x10
c002281d:	90                   	nop
c002281e:	83 c4 0c             	add    esp,0xc
c0022821:	c3                   	ret    
c0022822:	66 90                	xchg   ax,ax

c0022824 <PIT::open(int, int, void*)>:
c0022824:	83 ec 0c             	sub    esp,0xc
c0022827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282b:	8b 00                	mov    eax,DWORD PTR [eax]
c002282d:	83 c0 24             	add    eax,0x24
c0022830:	8b 00                	mov    eax,DWORD PTR [eax]
c0022832:	83 ec 08             	sub    esp,0x8
c0022835:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022839:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002283d:	ff d0                	call   eax
c002283f:	83 c4 10             	add    esp,0x10
c0022842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022846:	83 ec 0c             	sub    esp,0xc
c0022849:	6a 00                	push   0x0
c002284b:	6a 01                	push   0x1
c002284d:	68 00 28 02 c0       	push   0xc0022800
c0022852:	6a 00                	push   0x0
c0022854:	50                   	push   eax
c0022855:	e8 d8 bc fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002285a:	83 c4 20             	add    esp,0x20
c002285d:	89 c2                	mov    edx,eax
c002285f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022863:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022869:	b8 00 00 00 00       	mov    eax,0x0
c002286e:	83 c4 0c             	add    esp,0xc
c0022871:	c3                   	ret    
c0022872:	66 90                	xchg   ax,ax

c0022874 <PIT::close(int, int, void*)>:
c0022874:	83 ec 0c             	sub    esp,0xc
c0022877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002287b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022889:	6a 01                	push   0x1
c002288b:	68 00 28 02 c0       	push   0xc0022800
c0022890:	6a 00                	push   0x0
c0022892:	50                   	push   eax
c0022893:	e8 e4 bc fe ff       	call   c000e57c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022898:	83 c4 10             	add    esp,0x10
c002289b:	b8 00 00 00 00       	mov    eax,0x0
c00228a0:	83 c4 0c             	add    esp,0xc
c00228a3:	c3                   	ret    

c00228a4 <PIT::PIT()>:
c00228a4:	83 ec 0c             	sub    esp,0xc
c00228a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ab:	83 ec 08             	sub    esp,0x8
c00228ae:	68 8c 7a 02 c0       	push   0xc0027a8c
c00228b3:	50                   	push   eax
c00228b4:	e8 ef e4 fe ff       	call   c0010da8 <Timer::Timer(char const*)>
c00228b9:	83 c4 10             	add    esp,0x10
c00228bc:	ba b4 7a 02 c0       	mov    edx,0xc0027ab4
c00228c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c5:	89 10                	mov    DWORD PTR [eax],edx
c00228c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228d1:	0f b6 d0             	movzx  edx,al
c00228d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00228df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228e9:	0f b6 d0             	movzx  edx,al
c00228ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00228f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228ff:	8d 50 01             	lea    edx,[eax+0x1]
c0022902:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022906:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002290c:	0f b6 d0             	movzx  edx,al
c002290f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022913:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022917:	83 e1 3f             	and    ecx,0x3f
c002291a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002291e:	90                   	nop
c002291f:	83 c4 0c             	add    esp,0xc
c0022922:	c3                   	ret    
c0022923:	66 90                	xchg   ax,ax
c0022925:	66 90                	xchg   ax,ax
c0022927:	66 90                	xchg   ax,ax
c0022929:	66 90                	xchg   ax,ax
c002292b:	66 90                	xchg   ax,ax
c002292d:	66 90                	xchg   ax,ax
c002292f:	90                   	nop

c0022930 <avxDetect>:
c0022930:	b8 00 00 00 00       	mov    eax,0x0
c0022935:	c3                   	ret    

c0022936 <avxSave>:
c0022936:	c3                   	ret    

c0022937 <avxLoad>:
c0022937:	c3                   	ret    

c0022938 <avxInit>:
c0022938:	c3                   	ret    

c0022939 <avxClose>:
c0022939:	c3                   	ret    

c002293a <wouldSheSayYes>:
c002293a:	c3                   	ret    
c002293b:	49                   	dec    ecx
c002293c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022940:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022944:	75 20                	jne    c0022966 <sseDetect.noSSE+0x1>
c0022946:	4e                   	dec    esi
c0022947:	79 61                	jns    c00229aa <x87Detect+0x14>
c0022949:	68 2e 2e 2e 00       	push   0x2e2e2e
c002294e:	66 90                	xchg   ax,ax

c0022950 <absolutelyNoChanceInHell>:
c0022950:	b8 01 00 00 00       	mov    eax,0x1
c0022955:	0f a2                	cpuid  
c0022957:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002295d:	74 06                	je     c0022965 <sseDetect.noSSE>
c002295f:	b8 01 00 00 00       	mov    eax,0x1
c0022964:	c3                   	ret    

c0022965 <sseDetect.noSSE>:
c0022965:	31 c0                	xor    eax,eax
c0022967:	c3                   	ret    

c0022968 <sseSave>:
c0022968:	0f ae 44 24 04       	fxsave [esp+0x4]
c002296d:	c3                   	ret    

c002296e <sseLoad>:
c002296e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022973:	c3                   	ret    

c0022974 <sseInit>:
c0022974:	e8 49 00 00 00       	call   c00229c2 <x87Init>
c0022979:	0f 20 e0             	mov    eax,cr4
c002297c:	66 0d 00 06          	or     ax,0x600
c0022980:	0f 22 e0             	mov    cr4,eax
c0022983:	c3                   	ret    

c0022984 <sseClose>:
c0022984:	c3                   	ret    
c0022985:	66 90                	xchg   ax,ax
c0022987:	66 90                	xchg   ax,ax
c0022989:	66 90                	xchg   ax,ax
c002298b:	66 90                	xchg   ax,ax
c002298d:	66 90                	xchg   ax,ax
c002298f:	90                   	nop

c0022990 <value_37F>:
c0022990:	7f 03                	jg     c0022995 <value_37A+0x1>

c0022992 <value_37E>:
c0022992:	7e 03                	jle    c0022997 <x87Detect+0x1>

c0022994 <value_37A>:
c0022994:	7a 03                	jp     c0022999 <x87Detect+0x3>

c0022996 <x87Detect>:
c0022996:	b8 01 00 00 00       	mov    eax,0x1
c002299b:	0f a2                	cpuid  
c002299d:	f7 c2 01 00 00 00    	test   edx,0x1
c00229a3:	74 06                	je     c00229ab <x87Detect.nox87>
c00229a5:	b8 01 00 00 00       	mov    eax,0x1
c00229aa:	c3                   	ret    

c00229ab <x87Detect.nox87>:
c00229ab:	b8 00 00 00 00       	mov    eax,0x0
c00229b0:	c3                   	ret    

c00229b1 <x87Save>:
c00229b1:	55                   	push   ebp
c00229b2:	89 e5                	mov    ebp,esp
c00229b4:	9b dd 75 08          	fsave  [ebp+0x8]
c00229b8:	c9                   	leave  
c00229b9:	c3                   	ret    

c00229ba <x87Load>:
c00229ba:	55                   	push   ebp
c00229bb:	89 e5                	mov    ebp,esp
c00229bd:	dd 65 08             	frstor [ebp+0x8]
c00229c0:	c9                   	leave  
c00229c1:	c3                   	ret    

c00229c2 <x87Init>:
c00229c2:	9b db e3             	finit  
c00229c5:	0f 20 c0             	mov    eax,cr0
c00229c8:	66 25 fb ff          	and    ax,0xfffb
c00229cc:	66 0d 22 00          	or     ax,0x22
c00229d0:	0f 22 c0             	mov    cr0,eax
c00229d3:	0f 06                	clts   
c00229d5:	d9 2d 94 29 02 c0    	fldcw  WORD PTR ds:0xc0022994
c00229db:	c3                   	ret    

c00229dc <x87Close>:
c00229dc:	c3                   	ret    
c00229dd:	66 90                	xchg   ax,ax
c00229df:	90                   	nop

c00229e0 <__do_global_ctors_aux>:
c00229e0:	a1 7c 3b 02 c0       	mov    eax,ds:0xc0023b7c
c00229e5:	83 f8 ff             	cmp    eax,0xffffffff
c00229e8:	74 1a                	je     c0022a04 <__do_global_ctors_aux+0x24>
c00229ea:	55                   	push   ebp
c00229eb:	89 e5                	mov    ebp,esp
c00229ed:	53                   	push   ebx
c00229ee:	52                   	push   edx
c00229ef:	bb 7c 3b 02 c0       	mov    ebx,0xc0023b7c
c00229f4:	ff d0                	call   eax
c00229f6:	83 eb 04             	sub    ebx,0x4
c00229f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00229fb:	83 f8 ff             	cmp    eax,0xffffffff
c00229fe:	75 f4                	jne    c00229f4 <__do_global_ctors_aux+0x14>
c0022a00:	58                   	pop    eax
c0022a01:	5b                   	pop    ebx
c0022a02:	5d                   	pop    ebp
c0022a03:	c3                   	ret    
c0022a04:	c3                   	ret    
c0022a05:	66 90                	xchg   ax,ax
c0022a07:	90                   	nop

c0022a08 <__divdi3>:
c0022a08:	55                   	push   ebp
c0022a09:	57                   	push   edi
c0022a0a:	56                   	push   esi
c0022a0b:	53                   	push   ebx
c0022a0c:	83 ec 1c             	sub    esp,0x1c
c0022a0f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022a13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022a17:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022a1a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022a1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022a22:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022a26:	85 db                	test   ebx,ebx
c0022a28:	0f 88 8e 00 00 00    	js     c0022abc <__divdi3+0xb4>
c0022a2e:	89 dd                	mov    ebp,ebx
c0022a30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022a38:	89 d3                	mov    ebx,edx
c0022a3a:	85 d2                	test   edx,edx
c0022a3c:	79 0d                	jns    c0022a4b <__divdi3+0x43>
c0022a3e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022a42:	f7 d8                	neg    eax
c0022a44:	83 d2 00             	adc    edx,0x0
c0022a47:	f7 da                	neg    edx
c0022a49:	89 d3                	mov    ebx,edx
c0022a4b:	89 c7                	mov    edi,eax
c0022a4d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022a50:	85 db                	test   ebx,ebx
c0022a52:	75 48                	jne    c0022a9c <__divdi3+0x94>
c0022a54:	39 ef                	cmp    edi,ebp
c0022a56:	76 24                	jbe    c0022a7c <__divdi3+0x74>
c0022a58:	89 ea                	mov    edx,ebp
c0022a5a:	f7 f7                	div    edi
c0022a5c:	89 c1                	mov    ecx,eax
c0022a5e:	31 f6                	xor    esi,esi
c0022a60:	89 c8                	mov    eax,ecx
c0022a62:	89 f2                	mov    edx,esi
c0022a64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022a68:	85 c9                	test   ecx,ecx
c0022a6a:	74 07                	je     c0022a73 <__divdi3+0x6b>
c0022a6c:	f7 d8                	neg    eax
c0022a6e:	83 d2 00             	adc    edx,0x0
c0022a71:	f7 da                	neg    edx
c0022a73:	83 c4 1c             	add    esp,0x1c
c0022a76:	5b                   	pop    ebx
c0022a77:	5e                   	pop    esi
c0022a78:	5f                   	pop    edi
c0022a79:	5d                   	pop    ebp
c0022a7a:	c3                   	ret    
c0022a7b:	90                   	nop
c0022a7c:	85 ff                	test   edi,edi
c0022a7e:	75 0b                	jne    c0022a8b <__divdi3+0x83>
c0022a80:	b8 01 00 00 00       	mov    eax,0x1
c0022a85:	31 d2                	xor    edx,edx
c0022a87:	f7 f3                	div    ebx
c0022a89:	89 c7                	mov    edi,eax
c0022a8b:	31 d2                	xor    edx,edx
c0022a8d:	89 e8                	mov    eax,ebp
c0022a8f:	f7 f7                	div    edi
c0022a91:	89 c6                	mov    esi,eax
c0022a93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022a96:	f7 f7                	div    edi
c0022a98:	89 c1                	mov    ecx,eax
c0022a9a:	eb c4                	jmp    c0022a60 <__divdi3+0x58>
c0022a9c:	39 eb                	cmp    ebx,ebp
c0022a9e:	77 3c                	ja     c0022adc <__divdi3+0xd4>
c0022aa0:	0f bd f3             	bsr    esi,ebx
c0022aa3:	83 f6 1f             	xor    esi,0x1f
c0022aa6:	75 40                	jne    c0022ae8 <__divdi3+0xe0>
c0022aa8:	39 eb                	cmp    ebx,ebp
c0022aaa:	72 09                	jb     c0022ab5 <__divdi3+0xad>
c0022aac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022aaf:	0f 87 97 00 00 00    	ja     c0022b4c <__divdi3+0x144>
c0022ab5:	b9 01 00 00 00       	mov    ecx,0x1
c0022aba:	eb a4                	jmp    c0022a60 <__divdi3+0x58>
c0022abc:	f7 d9                	neg    ecx
c0022abe:	83 d3 00             	adc    ebx,0x0
c0022ac1:	f7 db                	neg    ebx
c0022ac3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022ac6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022aca:	89 dd                	mov    ebp,ebx
c0022acc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022ad4:	e9 5f ff ff ff       	jmp    c0022a38 <__divdi3+0x30>
c0022ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0022adc:	31 f6                	xor    esi,esi
c0022ade:	31 c9                	xor    ecx,ecx
c0022ae0:	e9 7b ff ff ff       	jmp    c0022a60 <__divdi3+0x58>
c0022ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0022ae8:	b8 20 00 00 00       	mov    eax,0x20
c0022aed:	29 f0                	sub    eax,esi
c0022aef:	89 f1                	mov    ecx,esi
c0022af1:	d3 e3                	shl    ebx,cl
c0022af3:	89 fa                	mov    edx,edi
c0022af5:	88 c1                	mov    cl,al
c0022af7:	d3 ea                	shr    edx,cl
c0022af9:	09 da                	or     edx,ebx
c0022afb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022aff:	89 f1                	mov    ecx,esi
c0022b01:	d3 e7                	shl    edi,cl
c0022b03:	89 eb                	mov    ebx,ebp
c0022b05:	88 c1                	mov    cl,al
c0022b07:	d3 eb                	shr    ebx,cl
c0022b09:	89 f1                	mov    ecx,esi
c0022b0b:	d3 e5                	shl    ebp,cl
c0022b0d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022b10:	88 c1                	mov    cl,al
c0022b12:	d3 ea                	shr    edx,cl
c0022b14:	09 d5                	or     ebp,edx
c0022b16:	89 e8                	mov    eax,ebp
c0022b18:	89 da                	mov    edx,ebx
c0022b1a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022b1e:	89 d3                	mov    ebx,edx
c0022b20:	89 c5                	mov    ebp,eax
c0022b22:	f7 e7                	mul    edi
c0022b24:	39 d3                	cmp    ebx,edx
c0022b26:	72 18                	jb     c0022b40 <__divdi3+0x138>
c0022b28:	74 0a                	je     c0022b34 <__divdi3+0x12c>
c0022b2a:	89 e9                	mov    ecx,ebp
c0022b2c:	31 f6                	xor    esi,esi
c0022b2e:	e9 2d ff ff ff       	jmp    c0022a60 <__divdi3+0x58>
c0022b33:	90                   	nop
c0022b34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022b37:	89 f1                	mov    ecx,esi
c0022b39:	d3 e7                	shl    edi,cl
c0022b3b:	39 c7                	cmp    edi,eax
c0022b3d:	73 eb                	jae    c0022b2a <__divdi3+0x122>
c0022b3f:	90                   	nop
c0022b40:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022b43:	31 f6                	xor    esi,esi
c0022b45:	e9 16 ff ff ff       	jmp    c0022a60 <__divdi3+0x58>
c0022b4a:	66 90                	xchg   ax,ax
c0022b4c:	31 c9                	xor    ecx,ecx
c0022b4e:	e9 0d ff ff ff       	jmp    c0022a60 <__divdi3+0x58>
c0022b53:	90                   	nop

c0022b54 <__moddi3>:
c0022b54:	55                   	push   ebp
c0022b55:	57                   	push   edi
c0022b56:	56                   	push   esi
c0022b57:	53                   	push   ebx
c0022b58:	83 ec 2c             	sub    esp,0x2c
c0022b5b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022b5f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022b63:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022b67:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022b6b:	85 db                	test   ebx,ebx
c0022b6d:	0f 88 85 00 00 00    	js     c0022bf8 <__moddi3+0xa4>
c0022b73:	89 de                	mov    esi,ebx
c0022b75:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022b7d:	89 d7                	mov    edi,edx
c0022b7f:	85 d2                	test   edx,edx
c0022b81:	79 09                	jns    c0022b8c <__moddi3+0x38>
c0022b83:	f7 d8                	neg    eax
c0022b85:	83 d2 00             	adc    edx,0x0
c0022b88:	f7 da                	neg    edx
c0022b8a:	89 d7                	mov    edi,edx
c0022b8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022b90:	89 cd                	mov    ebp,ecx
c0022b92:	85 ff                	test   edi,edi
c0022b94:	75 52                	jne    c0022be8 <__moddi3+0x94>
c0022b96:	89 c3                	mov    ebx,eax
c0022b98:	39 f0                	cmp    eax,esi
c0022b9a:	76 24                	jbe    c0022bc0 <__moddi3+0x6c>
c0022b9c:	89 c8                	mov    eax,ecx
c0022b9e:	89 f2                	mov    edx,esi
c0022ba0:	f7 f3                	div    ebx
c0022ba2:	89 d6                	mov    esi,edx
c0022ba4:	89 f0                	mov    eax,esi
c0022ba6:	31 d2                	xor    edx,edx
c0022ba8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022bac:	85 c9                	test   ecx,ecx
c0022bae:	74 07                	je     c0022bb7 <__moddi3+0x63>
c0022bb0:	f7 d8                	neg    eax
c0022bb2:	83 d2 00             	adc    edx,0x0
c0022bb5:	f7 da                	neg    edx
c0022bb7:	83 c4 2c             	add    esp,0x2c
c0022bba:	5b                   	pop    ebx
c0022bbb:	5e                   	pop    esi
c0022bbc:	5f                   	pop    edi
c0022bbd:	5d                   	pop    ebp
c0022bbe:	c3                   	ret    
c0022bbf:	90                   	nop
c0022bc0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022bc4:	85 db                	test   ebx,ebx
c0022bc6:	75 0d                	jne    c0022bd5 <__moddi3+0x81>
c0022bc8:	b8 01 00 00 00       	mov    eax,0x1
c0022bcd:	31 d2                	xor    edx,edx
c0022bcf:	f7 f7                	div    edi
c0022bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022bd5:	89 f0                	mov    eax,esi
c0022bd7:	31 d2                	xor    edx,edx
c0022bd9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022bdd:	f7 f7                	div    edi
c0022bdf:	89 e8                	mov    eax,ebp
c0022be1:	f7 f7                	div    edi
c0022be3:	89 d6                	mov    esi,edx
c0022be5:	eb bd                	jmp    c0022ba4 <__moddi3+0x50>
c0022be7:	90                   	nop
c0022be8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022bec:	39 f7                	cmp    edi,esi
c0022bee:	76 20                	jbe    c0022c10 <__moddi3+0xbc>
c0022bf0:	89 c8                	mov    eax,ecx
c0022bf2:	89 f2                	mov    edx,esi
c0022bf4:	eb b2                	jmp    c0022ba8 <__moddi3+0x54>
c0022bf6:	66 90                	xchg   ax,ax
c0022bf8:	f7 d9                	neg    ecx
c0022bfa:	83 d3 00             	adc    ebx,0x0
c0022bfd:	f7 db                	neg    ebx
c0022bff:	89 de                	mov    esi,ebx
c0022c01:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022c09:	e9 6f ff ff ff       	jmp    c0022b7d <__moddi3+0x29>
c0022c0e:	66 90                	xchg   ax,ax
c0022c10:	0f bd c7             	bsr    eax,edi
c0022c13:	83 f0 1f             	xor    eax,0x1f
c0022c16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c1a:	75 24                	jne    c0022c40 <__moddi3+0xec>
c0022c1c:	39 f7                	cmp    edi,esi
c0022c1e:	72 06                	jb     c0022c26 <__moddi3+0xd2>
c0022c20:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022c24:	77 0c                	ja     c0022c32 <__moddi3+0xde>
c0022c26:	89 e9                	mov    ecx,ebp
c0022c28:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022c2c:	19 fe                	sbb    esi,edi
c0022c2e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022c32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c36:	89 f2                	mov    edx,esi
c0022c38:	e9 6b ff ff ff       	jmp    c0022ba8 <__moddi3+0x54>
c0022c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0022c40:	b8 20 00 00 00       	mov    eax,0x20
c0022c45:	89 c2                	mov    edx,eax
c0022c47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022c4b:	29 da                	sub    edx,ebx
c0022c4d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022c51:	88 d9                	mov    cl,bl
c0022c53:	d3 e7                	shl    edi,cl
c0022c55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c59:	88 d1                	mov    cl,dl
c0022c5b:	d3 e8                	shr    eax,cl
c0022c5d:	09 c7                	or     edi,eax
c0022c5f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022c63:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c67:	89 d8                	mov    eax,ebx
c0022c69:	88 d9                	mov    cl,bl
c0022c6b:	d3 e7                	shl    edi,cl
c0022c6d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022c71:	89 f3                	mov    ebx,esi
c0022c73:	88 d1                	mov    cl,dl
c0022c75:	d3 eb                	shr    ebx,cl
c0022c77:	89 c7                	mov    edi,eax
c0022c79:	88 c1                	mov    cl,al
c0022c7b:	d3 e6                	shl    esi,cl
c0022c7d:	89 e8                	mov    eax,ebp
c0022c7f:	88 d1                	mov    cl,dl
c0022c81:	d3 e8                	shr    eax,cl
c0022c83:	09 f0                	or     eax,esi
c0022c85:	89 f9                	mov    ecx,edi
c0022c87:	d3 e5                	shl    ebp,cl
c0022c89:	89 da                	mov    edx,ebx
c0022c8b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022c8f:	89 d3                	mov    ebx,edx
c0022c91:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022c95:	89 c6                	mov    esi,eax
c0022c97:	89 d1                	mov    ecx,edx
c0022c99:	39 d3                	cmp    ebx,edx
c0022c9b:	72 27                	jb     c0022cc4 <__moddi3+0x170>
c0022c9d:	74 21                	je     c0022cc0 <__moddi3+0x16c>
c0022c9f:	29 f5                	sub    ebp,esi
c0022ca1:	19 cb                	sbb    ebx,ecx
c0022ca3:	89 de                	mov    esi,ebx
c0022ca5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022ca9:	d3 e6                	shl    esi,cl
c0022cab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022caf:	89 f9                	mov    ecx,edi
c0022cb1:	d3 ed                	shr    ebp,cl
c0022cb3:	09 ee                	or     esi,ebp
c0022cb5:	89 f0                	mov    eax,esi
c0022cb7:	d3 eb                	shr    ebx,cl
c0022cb9:	89 da                	mov    edx,ebx
c0022cbb:	e9 e8 fe ff ff       	jmp    c0022ba8 <__moddi3+0x54>
c0022cc0:	39 c5                	cmp    ebp,eax
c0022cc2:	73 db                	jae    c0022c9f <__moddi3+0x14b>
c0022cc4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022cc8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022ccc:	89 d1                	mov    ecx,edx
c0022cce:	89 c6                	mov    esi,eax
c0022cd0:	eb cd                	jmp    c0022c9f <__moddi3+0x14b>
c0022cd2:	66 90                	xchg   ax,ax

c0022cd4 <__udivdi3>:
c0022cd4:	55                   	push   ebp
c0022cd5:	57                   	push   edi
c0022cd6:	56                   	push   esi
c0022cd7:	53                   	push   ebx
c0022cd8:	83 ec 1c             	sub    esp,0x1c
c0022cdb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022cdf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022ce3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022ce7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ceb:	85 d2                	test   edx,edx
c0022ced:	75 41                	jne    c0022d30 <__udivdi3+0x5c>
c0022cef:	39 f7                	cmp    edi,esi
c0022cf1:	76 15                	jbe    c0022d08 <__udivdi3+0x34>
c0022cf3:	89 e8                	mov    eax,ebp
c0022cf5:	89 f2                	mov    edx,esi
c0022cf7:	f7 f7                	div    edi
c0022cf9:	31 db                	xor    ebx,ebx
c0022cfb:	89 da                	mov    edx,ebx
c0022cfd:	83 c4 1c             	add    esp,0x1c
c0022d00:	5b                   	pop    ebx
c0022d01:	5e                   	pop    esi
c0022d02:	5f                   	pop    edi
c0022d03:	5d                   	pop    ebp
c0022d04:	c3                   	ret    
c0022d05:	8d 76 00             	lea    esi,[esi+0x0]
c0022d08:	89 f9                	mov    ecx,edi
c0022d0a:	85 ff                	test   edi,edi
c0022d0c:	75 0b                	jne    c0022d19 <__udivdi3+0x45>
c0022d0e:	b8 01 00 00 00       	mov    eax,0x1
c0022d13:	31 d2                	xor    edx,edx
c0022d15:	f7 f7                	div    edi
c0022d17:	89 c1                	mov    ecx,eax
c0022d19:	31 d2                	xor    edx,edx
c0022d1b:	89 f0                	mov    eax,esi
c0022d1d:	f7 f1                	div    ecx
c0022d1f:	89 c3                	mov    ebx,eax
c0022d21:	89 e8                	mov    eax,ebp
c0022d23:	f7 f1                	div    ecx
c0022d25:	89 da                	mov    edx,ebx
c0022d27:	83 c4 1c             	add    esp,0x1c
c0022d2a:	5b                   	pop    ebx
c0022d2b:	5e                   	pop    esi
c0022d2c:	5f                   	pop    edi
c0022d2d:	5d                   	pop    ebp
c0022d2e:	c3                   	ret    
c0022d2f:	90                   	nop
c0022d30:	39 f2                	cmp    edx,esi
c0022d32:	77 1c                	ja     c0022d50 <__udivdi3+0x7c>
c0022d34:	0f bd da             	bsr    ebx,edx
c0022d37:	83 f3 1f             	xor    ebx,0x1f
c0022d3a:	75 24                	jne    c0022d60 <__udivdi3+0x8c>
c0022d3c:	39 f2                	cmp    edx,esi
c0022d3e:	72 08                	jb     c0022d48 <__udivdi3+0x74>
c0022d40:	39 ef                	cmp    edi,ebp
c0022d42:	0f 87 84 00 00 00    	ja     c0022dcc <__udivdi3+0xf8>
c0022d48:	b8 01 00 00 00       	mov    eax,0x1
c0022d4d:	eb ac                	jmp    c0022cfb <__udivdi3+0x27>
c0022d4f:	90                   	nop
c0022d50:	31 db                	xor    ebx,ebx
c0022d52:	31 c0                	xor    eax,eax
c0022d54:	89 da                	mov    edx,ebx
c0022d56:	83 c4 1c             	add    esp,0x1c
c0022d59:	5b                   	pop    ebx
c0022d5a:	5e                   	pop    esi
c0022d5b:	5f                   	pop    edi
c0022d5c:	5d                   	pop    ebp
c0022d5d:	c3                   	ret    
c0022d5e:	66 90                	xchg   ax,ax
c0022d60:	b8 20 00 00 00       	mov    eax,0x20
c0022d65:	29 d8                	sub    eax,ebx
c0022d67:	88 d9                	mov    cl,bl
c0022d69:	d3 e2                	shl    edx,cl
c0022d6b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022d6f:	89 fa                	mov    edx,edi
c0022d71:	88 c1                	mov    cl,al
c0022d73:	d3 ea                	shr    edx,cl
c0022d75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022d79:	09 d1                	or     ecx,edx
c0022d7b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022d7f:	88 d9                	mov    cl,bl
c0022d81:	d3 e7                	shl    edi,cl
c0022d83:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022d87:	89 f7                	mov    edi,esi
c0022d89:	88 c1                	mov    cl,al
c0022d8b:	d3 ef                	shr    edi,cl
c0022d8d:	88 d9                	mov    cl,bl
c0022d8f:	d3 e6                	shl    esi,cl
c0022d91:	89 ea                	mov    edx,ebp
c0022d93:	88 c1                	mov    cl,al
c0022d95:	d3 ea                	shr    edx,cl
c0022d97:	09 d6                	or     esi,edx
c0022d99:	89 f0                	mov    eax,esi
c0022d9b:	89 fa                	mov    edx,edi
c0022d9d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022da1:	89 d7                	mov    edi,edx
c0022da3:	89 c6                	mov    esi,eax
c0022da5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022da9:	39 d7                	cmp    edi,edx
c0022dab:	72 13                	jb     c0022dc0 <__udivdi3+0xec>
c0022dad:	74 09                	je     c0022db8 <__udivdi3+0xe4>
c0022daf:	89 f0                	mov    eax,esi
c0022db1:	31 db                	xor    ebx,ebx
c0022db3:	e9 43 ff ff ff       	jmp    c0022cfb <__udivdi3+0x27>
c0022db8:	88 d9                	mov    cl,bl
c0022dba:	d3 e5                	shl    ebp,cl
c0022dbc:	39 c5                	cmp    ebp,eax
c0022dbe:	73 ef                	jae    c0022daf <__udivdi3+0xdb>
c0022dc0:	8d 46 ff             	lea    eax,[esi-0x1]
c0022dc3:	31 db                	xor    ebx,ebx
c0022dc5:	e9 31 ff ff ff       	jmp    c0022cfb <__udivdi3+0x27>
c0022dca:	66 90                	xchg   ax,ax
c0022dcc:	31 c0                	xor    eax,eax
c0022dce:	e9 28 ff ff ff       	jmp    c0022cfb <__udivdi3+0x27>
c0022dd3:	90                   	nop

c0022dd4 <__umoddi3>:
c0022dd4:	55                   	push   ebp
c0022dd5:	57                   	push   edi
c0022dd6:	56                   	push   esi
c0022dd7:	53                   	push   ebx
c0022dd8:	83 ec 1c             	sub    esp,0x1c
c0022ddb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ddf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022de3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022de7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022deb:	89 da                	mov    edx,ebx
c0022ded:	85 c0                	test   eax,eax
c0022def:	75 37                	jne    c0022e28 <__umoddi3+0x54>
c0022df1:	39 df                	cmp    edi,ebx
c0022df3:	76 13                	jbe    c0022e08 <__umoddi3+0x34>
c0022df5:	89 f0                	mov    eax,esi
c0022df7:	f7 f7                	div    edi
c0022df9:	89 d0                	mov    eax,edx
c0022dfb:	31 d2                	xor    edx,edx
c0022dfd:	83 c4 1c             	add    esp,0x1c
c0022e00:	5b                   	pop    ebx
c0022e01:	5e                   	pop    esi
c0022e02:	5f                   	pop    edi
c0022e03:	5d                   	pop    ebp
c0022e04:	c3                   	ret    
c0022e05:	8d 76 00             	lea    esi,[esi+0x0]
c0022e08:	89 fd                	mov    ebp,edi
c0022e0a:	85 ff                	test   edi,edi
c0022e0c:	75 0b                	jne    c0022e19 <__umoddi3+0x45>
c0022e0e:	b8 01 00 00 00       	mov    eax,0x1
c0022e13:	31 d2                	xor    edx,edx
c0022e15:	f7 f7                	div    edi
c0022e17:	89 c5                	mov    ebp,eax
c0022e19:	89 d8                	mov    eax,ebx
c0022e1b:	31 d2                	xor    edx,edx
c0022e1d:	f7 f5                	div    ebp
c0022e1f:	89 f0                	mov    eax,esi
c0022e21:	f7 f5                	div    ebp
c0022e23:	89 d0                	mov    eax,edx
c0022e25:	eb d4                	jmp    c0022dfb <__umoddi3+0x27>
c0022e27:	90                   	nop
c0022e28:	89 f1                	mov    ecx,esi
c0022e2a:	39 d8                	cmp    eax,ebx
c0022e2c:	76 0a                	jbe    c0022e38 <__umoddi3+0x64>
c0022e2e:	89 f0                	mov    eax,esi
c0022e30:	83 c4 1c             	add    esp,0x1c
c0022e33:	5b                   	pop    ebx
c0022e34:	5e                   	pop    esi
c0022e35:	5f                   	pop    edi
c0022e36:	5d                   	pop    ebp
c0022e37:	c3                   	ret    
c0022e38:	0f bd e8             	bsr    ebp,eax
c0022e3b:	83 f5 1f             	xor    ebp,0x1f
c0022e3e:	75 1c                	jne    c0022e5c <__umoddi3+0x88>
c0022e40:	39 d8                	cmp    eax,ebx
c0022e42:	72 04                	jb     c0022e48 <__umoddi3+0x74>
c0022e44:	39 f7                	cmp    edi,esi
c0022e46:	77 08                	ja     c0022e50 <__umoddi3+0x7c>
c0022e48:	89 da                	mov    edx,ebx
c0022e4a:	29 fe                	sub    esi,edi
c0022e4c:	19 c2                	sbb    edx,eax
c0022e4e:	89 f1                	mov    ecx,esi
c0022e50:	89 c8                	mov    eax,ecx
c0022e52:	83 c4 1c             	add    esp,0x1c
c0022e55:	5b                   	pop    ebx
c0022e56:	5e                   	pop    esi
c0022e57:	5f                   	pop    edi
c0022e58:	5d                   	pop    ebp
c0022e59:	c3                   	ret    
c0022e5a:	66 90                	xchg   ax,ax
c0022e5c:	ba 20 00 00 00       	mov    edx,0x20
c0022e61:	29 ea                	sub    edx,ebp
c0022e63:	89 e9                	mov    ecx,ebp
c0022e65:	d3 e0                	shl    eax,cl
c0022e67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e6b:	89 f8                	mov    eax,edi
c0022e6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022e71:	88 d1                	mov    cl,dl
c0022e73:	d3 e8                	shr    eax,cl
c0022e75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022e79:	09 c1                	or     ecx,eax
c0022e7b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022e7f:	89 e9                	mov    ecx,ebp
c0022e81:	d3 e7                	shl    edi,cl
c0022e83:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022e87:	89 d8                	mov    eax,ebx
c0022e89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e8d:	88 d1                	mov    cl,dl
c0022e8f:	d3 e8                	shr    eax,cl
c0022e91:	89 c7                	mov    edi,eax
c0022e93:	89 e9                	mov    ecx,ebp
c0022e95:	d3 e3                	shl    ebx,cl
c0022e97:	89 f0                	mov    eax,esi
c0022e99:	88 d1                	mov    cl,dl
c0022e9b:	d3 e8                	shr    eax,cl
c0022e9d:	09 d8                	or     eax,ebx
c0022e9f:	89 e9                	mov    ecx,ebp
c0022ea1:	d3 e6                	shl    esi,cl
c0022ea3:	89 f3                	mov    ebx,esi
c0022ea5:	89 fa                	mov    edx,edi
c0022ea7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022eab:	89 d1                	mov    ecx,edx
c0022ead:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022eb1:	89 c6                	mov    esi,eax
c0022eb3:	89 d7                	mov    edi,edx
c0022eb5:	39 d1                	cmp    ecx,edx
c0022eb7:	72 27                	jb     c0022ee0 <__umoddi3+0x10c>
c0022eb9:	74 21                	je     c0022edc <__umoddi3+0x108>
c0022ebb:	89 ca                	mov    edx,ecx
c0022ebd:	29 f3                	sub    ebx,esi
c0022ebf:	19 fa                	sbb    edx,edi
c0022ec1:	89 d0                	mov    eax,edx
c0022ec3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022ec7:	d3 e0                	shl    eax,cl
c0022ec9:	89 e9                	mov    ecx,ebp
c0022ecb:	d3 eb                	shr    ebx,cl
c0022ecd:	09 d8                	or     eax,ebx
c0022ecf:	d3 ea                	shr    edx,cl
c0022ed1:	83 c4 1c             	add    esp,0x1c
c0022ed4:	5b                   	pop    ebx
c0022ed5:	5e                   	pop    esi
c0022ed6:	5f                   	pop    edi
c0022ed7:	5d                   	pop    ebp
c0022ed8:	c3                   	ret    
c0022ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0022edc:	39 c3                	cmp    ebx,eax
c0022ede:	73 db                	jae    c0022ebb <__umoddi3+0xe7>
c0022ee0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022ee4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022ee8:	89 d7                	mov    edi,edx
c0022eea:	89 c6                	mov    esi,eax
c0022eec:	eb cd                	jmp    c0022ebb <__umoddi3+0xe7>

Disassembly of section .init:

c0022eee <_init>:
c0022eee:	55                   	push   ebp
c0022eef:	89 e5                	mov    ebp,esp
c0022ef1:	e8 22 d2 fd ff       	call   c0000118 <frame_dummy>
c0022ef6:	e8 e5 fa ff ff       	call   c00229e0 <__do_global_ctors_aux>
c0022efb:	5d                   	pop    ebp
c0022efc:	c3                   	ret    

Disassembly of section .fini:

c0022efd <_fini>:
c0022efd:	55                   	push   ebp
c0022efe:	89 e5                	mov    ebp,esp
c0022f00:	e8 a3 d1 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022f05:	5d                   	pop    ebp
c0022f06:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022f08 <Computer::~Computer()>:
c0022f08:	83 ec 0c             	sub    esp,0xc
c0022f0b:	ba 80 46 02 c0       	mov    edx,0xc0024680
c0022f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f14:	89 10                	mov    DWORD PTR [eax],edx
c0022f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1a:	83 ec 0c             	sub    esp,0xc
c0022f1d:	50                   	push   eax
c0022f1e:	e8 65 b5 fe ff       	call   c000e488 <Device::~Device()>
c0022f23:	83 c4 10             	add    esp,0x10
c0022f26:	90                   	nop
c0022f27:	83 c4 0c             	add    esp,0xc
c0022f2a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0022f2c <Computer::~Computer()>:
c0022f2c:	83 ec 0c             	sub    esp,0xc
c0022f2f:	83 ec 0c             	sub    esp,0xc
c0022f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f36:	e8 cd ff ff ff       	call   c0022f08 <Computer::~Computer()>
c0022f3b:	83 c4 10             	add    esp,0x10
c0022f3e:	83 ec 08             	sub    esp,0x8
c0022f41:	68 ec 01 00 00       	push   0x1ec
c0022f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f4a:	e8 17 a0 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0022f4f:	83 c4 10             	add    esp,0x10
c0022f52:	83 c4 0c             	add    esp,0xc
c0022f55:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022f56 <idleCommon()>:
c0022f56:	83 ec 0c             	sub    esp,0xc
c0022f59:	fa                   	cli    
c0022f5a:	ff 05 a8 9d 02 c0    	inc    DWORD PTR ds:0xc0029da8
c0022f60:	e8 8b 5c ff ff       	call   c0018bf0 <schedule()>
c0022f65:	a1 a8 9d 02 c0       	mov    eax,ds:0xc0029da8
c0022f6a:	48                   	dec    eax
c0022f6b:	a3 a8 9d 02 c0       	mov    ds:0xc0029da8,eax
c0022f70:	75 01                	jne    c0022f73 <idleCommon()+0x1d>
c0022f72:	fb                   	sti    
c0022f73:	83 c4 0c             	add    esp,0xc
c0022f76:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022f78 <LinkedList<UnixFile>::~LinkedList()>:
c0022f78:	90                   	nop
c0022f79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022f7a <LinkedList<UnixFile>::LinkedList()>:
c0022f7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f7e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022f8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f93:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f9e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fa8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022faf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fb3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022fba:	90                   	nop
c0022fbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0022fbc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0022fbc:	83 ec 0c             	sub    esp,0xc
c0022fbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022fc4:	75 10                	jne    c0022fd6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022fc6:	83 ec 0c             	sub    esp,0xc
c0022fc9:	68 50 4a 02 c0       	push   0xc0024a50
c0022fce:	e8 12 20 ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0022fd3:	83 c4 10             	add    esp,0x10
c0022fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fdc:	85 c0                	test   eax,eax
c0022fde:	74 34                	je     c0023014 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022fe7:	85 c0                	test   eax,eax
c0022fe9:	74 29                	je     c0023014 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ff2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ff6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ffd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023001:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002300b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023012:	eb 65                	jmp    c0023079 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023018:	8b 00                	mov    eax,DWORD PTR [eax]
c002301a:	85 c0                	test   eax,eax
c002301c:	75 4b                	jne    c0023069 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002301e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023022:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023025:	85 c0                	test   eax,eax
c0023027:	75 40                	jne    c0023069 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0023029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023031:	89 10                	mov    DWORD PTR [eax],edx
c0023033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023037:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002303b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002303e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023045:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002304c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023050:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023053:	85 c0                	test   eax,eax
c0023055:	74 22                	je     c0023079 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023057:	83 ec 0c             	sub    esp,0xc
c002305a:	68 72 4a 02 c0       	push   0xc0024a72
c002305f:	e8 81 1f ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0023064:	83 c4 10             	add    esp,0x10
c0023067:	eb 10                	jmp    c0023079 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023069:	83 ec 0c             	sub    esp,0xc
c002306c:	68 7c 4a 02 c0       	push   0xc0024a7c
c0023071:	e8 6f 1f ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0023076:	83 c4 10             	add    esp,0x10
c0023079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023080:	8d 50 01             	lea    edx,[eax+0x1]
c0023083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023087:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002308a:	90                   	nop
c002308b:	83 c4 0c             	add    esp,0xc
c002308e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0023090 <LinkedList<UnixFile>::getFirstElement()>:
c0023090:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023094:	8b 00                	mov    eax,DWORD PTR [eax]
c0023096:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0023098 <LinkedList<UnixFile>::removeFirst()>:
c0023098:	83 ec 0c             	sub    esp,0xc
c002309b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002309f:	8b 00                	mov    eax,DWORD PTR [eax]
c00230a1:	85 c0                	test   eax,eax
c00230a3:	75 12                	jne    c00230b7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00230a5:	83 ec 0c             	sub    esp,0xc
c00230a8:	68 88 4a 02 c0       	push   0xc0024a88
c00230ad:	e8 33 1f ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c00230b2:	83 c4 10             	add    esp,0x10
c00230b5:	eb 7e                	jmp    c0023135 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00230b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00230be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00230c1:	85 c0                	test   eax,eax
c00230c3:	74 10                	je     c00230d5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00230c5:	83 ec 0c             	sub    esp,0xc
c00230c8:	68 d3 4a 02 c0       	push   0xc0024ad3
c00230cd:	e8 13 1f ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c00230d2:	83 c4 10             	add    esp,0x10
c00230d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00230db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00230de:	85 c0                	test   eax,eax
c00230e0:	75 33                	jne    c0023115 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00230e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00230ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00230f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00230fe:	83 f8 01             	cmp    eax,0x1
c0023101:	74 21                	je     c0023124 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0023103:	83 ec 0c             	sub    esp,0xc
c0023106:	68 ac 4a 02 c0       	push   0xc0024aac
c002310b:	e8 d5 1e ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0023110:	83 c4 10             	add    esp,0x10
c0023113:	eb 0f                	jmp    c0023124 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0023115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023119:	8b 00                	mov    eax,DWORD PTR [eax]
c002311b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002311e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023122:	89 10                	mov    DWORD PTR [eax],edx
c0023124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023128:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002312b:	8d 50 ff             	lea    edx,[eax-0x1]
c002312e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023132:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023135:	83 c4 0c             	add    esp,0xc
c0023138:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002313a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002313a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002313e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023141:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0023142 <DriverlessDevice::~DriverlessDevice()>:
c0023142:	ba fc 52 02 c0       	mov    edx,0xc00252fc
c0023147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002314b:	89 10                	mov    DWORD PTR [eax],edx
c002314d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023151:	50                   	push   eax
c0023152:	e8 31 b3 fe ff       	call   c000e488 <Device::~Device()>
c0023157:	83 c4 04             	add    esp,0x4
c002315a:	90                   	nop
c002315b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002315c <DriverlessDevice::~DriverlessDevice()>:
c002315c:	83 ec 0c             	sub    esp,0xc
c002315f:	83 ec 0c             	sub    esp,0xc
c0023162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023166:	e8 d7 ff ff ff       	call   c0023142 <DriverlessDevice::~DriverlessDevice()>
c002316b:	83 c4 10             	add    esp,0x10
c002316e:	83 ec 08             	sub    esp,0x8
c0023171:	68 58 01 00 00       	push   0x158
c0023176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002317a:	e8 e7 9d fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002317f:	83 c4 10             	add    esp,0x10
c0023182:	83 c4 0c             	add    esp,0xc
c0023185:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0023186 <LinkedList<Device>::addElement(Device*)>:
c0023186:	83 ec 0c             	sub    esp,0xc
c0023189:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002318e:	75 10                	jne    c00231a0 <LinkedList<Device>::addElement(Device*)+0x1a>
c0023190:	83 ec 0c             	sub    esp,0xc
c0023193:	68 50 4a 02 c0       	push   0xc0024a50
c0023198:	e8 48 1e ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c002319d:	83 c4 10             	add    esp,0x10
c00231a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00231a6:	85 c0                	test   eax,eax
c00231a8:	74 3a                	je     c00231e4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00231aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00231b1:	85 c0                	test   eax,eax
c00231b3:	74 2f                	je     c00231e4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00231b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00231bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00231c0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00231c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00231ce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00231d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00231d8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00231e2:	eb 68                	jmp    c002324c <LinkedList<Device>::addElement(Device*)+0xc6>
c00231e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00231ea:	85 c0                	test   eax,eax
c00231ec:	75 4e                	jne    c002323c <LinkedList<Device>::addElement(Device*)+0xb6>
c00231ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00231f5:	85 c0                	test   eax,eax
c00231f7:	75 43                	jne    c002323c <LinkedList<Device>::addElement(Device*)+0xb6>
c00231f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023201:	89 10                	mov    DWORD PTR [eax],edx
c0023203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023207:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002320b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002320e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023215:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002321f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023223:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023226:	85 c0                	test   eax,eax
c0023228:	74 22                	je     c002324c <LinkedList<Device>::addElement(Device*)+0xc6>
c002322a:	83 ec 0c             	sub    esp,0xc
c002322d:	68 72 4a 02 c0       	push   0xc0024a72
c0023232:	e8 ae 1d ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0023237:	83 c4 10             	add    esp,0x10
c002323a:	eb 10                	jmp    c002324c <LinkedList<Device>::addElement(Device*)+0xc6>
c002323c:	83 ec 0c             	sub    esp,0xc
c002323f:	68 7c 4a 02 c0       	push   0xc0024a7c
c0023244:	e8 9c 1d ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0023249:	83 c4 10             	add    esp,0x10
c002324c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023250:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023253:	8d 50 01             	lea    edx,[eax+0x1]
c0023256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002325a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002325d:	90                   	nop
c002325e:	83 c4 0c             	add    esp,0xc
c0023261:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0023262 <LinkedList<Device>::LinkedList()>:
c0023262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023266:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002326c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023270:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023277:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002327b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023286:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002328c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023290:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023297:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002329b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00232a2:	90                   	nop
c00232a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00232a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00232a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00232aa:	85 c0                	test   eax,eax
c00232ac:	75 0e                	jne    c00232bc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00232ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232b5:	85 c0                	test   eax,eax
c00232b7:	75 03                	jne    c00232bc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00232b9:	b0 01                	mov    al,0x1
c00232bb:	c3                   	ret    
c00232bc:	b0 00                	mov    al,0x0
c00232be:	90                   	nop
c00232bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00232c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00232c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00232c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00232c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00232c8:	83 ec 0c             	sub    esp,0xc
c00232cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00232d1:	85 c0                	test   eax,eax
c00232d3:	75 17                	jne    c00232ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00232d5:	83 ec 0c             	sub    esp,0xc
c00232d8:	68 88 4a 02 c0       	push   0xc0024a88
c00232dd:	e8 03 1d ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c00232e2:	83 c4 10             	add    esp,0x10
c00232e5:	e9 92 00 00 00       	jmp    c002337c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00232ea:	66 90                	xchg   ax,ax
c00232ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232f3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00232f6:	85 c0                	test   eax,eax
c00232f8:	0f 95 c0             	setne  al
c00232fb:	84 c0                	test   al,al
c00232fd:	74 11                	je     c0023310 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00232ff:	83 ec 0c             	sub    esp,0xc
c0023302:	68 d3 4a 02 c0       	push   0xc0024ad3
c0023307:	e8 d9 1c ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c002330c:	83 c4 10             	add    esp,0x10
c002330f:	90                   	nop
c0023310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023314:	8b 00                	mov    eax,DWORD PTR [eax]
c0023316:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023319:	85 c0                	test   eax,eax
c002331b:	0f 94 c0             	sete   al
c002331e:	84 c0                	test   al,al
c0023320:	74 36                	je     c0023358 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0023322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023326:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002332c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023330:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002333b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002333e:	83 f8 01             	cmp    eax,0x1
c0023341:	74 25                	je     c0023368 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0023343:	83 ec 0c             	sub    esp,0xc
c0023346:	68 ac 4a 02 c0       	push   0xc0024aac
c002334b:	e8 95 1c ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0023350:	83 c4 10             	add    esp,0x10
c0023353:	eb 13                	jmp    c0023368 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0023355:	8d 76 00             	lea    esi,[esi+0x0]
c0023358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002335c:	8b 00                	mov    eax,DWORD PTR [eax]
c002335e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0023361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023365:	89 10                	mov    DWORD PTR [eax],edx
c0023367:	90                   	nop
c0023368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002336c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002336f:	8d 50 ff             	lea    edx,[eax-0x1]
c0023372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023376:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023379:	8d 76 00             	lea    esi,[esi+0x0]
c002337c:	83 c4 0c             	add    esp,0xc
c002337f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0023380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0023380:	83 ec 0c             	sub    esp,0xc
c0023383:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023388:	75 12                	jne    c002339c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002338a:	83 ec 0c             	sub    esp,0xc
c002338d:	68 50 4a 02 c0       	push   0xc0024a50
c0023392:	e8 4e 1c ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0023397:	83 c4 10             	add    esp,0x10
c002339a:	66 90                	xchg   ax,ax
c002339c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00233a2:	85 c0                	test   eax,eax
c00233a4:	74 36                	je     c00233dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00233a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233ad:	85 c0                	test   eax,eax
c00233af:	74 2b                	je     c00233dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00233b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00233bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00233ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00233d8:	eb 6a                	jmp    c0023444 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00233da:	66 90                	xchg   ax,ax
c00233dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00233e2:	85 c0                	test   eax,eax
c00233e4:	75 4e                	jne    c0023434 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00233e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233ed:	85 c0                	test   eax,eax
c00233ef:	75 43                	jne    c0023434 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00233f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233f9:	89 10                	mov    DWORD PTR [eax],edx
c00233fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023403:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002340a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002340d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023418:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002341b:	85 c0                	test   eax,eax
c002341d:	74 25                	je     c0023444 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002341f:	83 ec 0c             	sub    esp,0xc
c0023422:	68 72 4a 02 c0       	push   0xc0024a72
c0023427:	e8 b9 1b ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c002342c:	83 c4 10             	add    esp,0x10
c002342f:	eb 13                	jmp    c0023444 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023431:	8d 76 00             	lea    esi,[esi+0x0]
c0023434:	83 ec 0c             	sub    esp,0xc
c0023437:	68 7c 4a 02 c0       	push   0xc0024a7c
c002343c:	e8 a4 1b ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0023441:	83 c4 10             	add    esp,0x10
c0023444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023448:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002344b:	8d 50 01             	lea    edx,[eax+0x1]
c002344e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023452:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023455:	90                   	nop
c0023456:	83 c4 0c             	add    esp,0xc
c0023459:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002345c <ACPI::~ACPI()>:
c002345c:	83 ec 0c             	sub    esp,0xc
c002345f:	ba a4 5d 02 c0       	mov    edx,0xc0025da4
c0023464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023468:	89 10                	mov    DWORD PTR [eax],edx
c002346a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002346e:	83 ec 0c             	sub    esp,0xc
c0023471:	50                   	push   eax
c0023472:	e8 11 b0 fe ff       	call   c000e488 <Device::~Device()>
c0023477:	83 c4 10             	add    esp,0x10
c002347a:	90                   	nop
c002347b:	83 c4 0c             	add    esp,0xc
c002347e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0023480 <ACPI::~ACPI()>:
c0023480:	83 ec 0c             	sub    esp,0xc
c0023483:	83 ec 0c             	sub    esp,0xc
c0023486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002348a:	e8 cd ff ff ff       	call   c002345c <ACPI::~ACPI()>
c002348f:	83 c4 10             	add    esp,0x10
c0023492:	83 ec 08             	sub    esp,0x8
c0023495:	68 64 12 00 00       	push   0x1264
c002349a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002349e:	e8 c3 9a fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00234a3:	83 c4 10             	add    esp,0x10
c00234a6:	83 c4 0c             	add    esp,0xc
c00234a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00234ac <LinkedList<Device>::~LinkedList()>:
c00234ac:	90                   	nop
c00234ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00234b0 <LinkedList<Device>::isEmpty()>:
c00234b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00234b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00234b6:	85 c0                	test   eax,eax
c00234b8:	75 0e                	jne    c00234c8 <LinkedList<Device>::isEmpty()+0x18>
c00234ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00234be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234c1:	85 c0                	test   eax,eax
c00234c3:	75 03                	jne    c00234c8 <LinkedList<Device>::isEmpty()+0x18>
c00234c5:	b0 01                	mov    al,0x1
c00234c7:	c3                   	ret    
c00234c8:	b0 00                	mov    al,0x0
c00234ca:	90                   	nop
c00234cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00234cc <LinkedList<Device>::getFirstElement()>:
c00234cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00234d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00234d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00234d4 <LinkedList<Device>::removeFirst()>:
c00234d4:	83 ec 0c             	sub    esp,0xc
c00234d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234db:	8b 00                	mov    eax,DWORD PTR [eax]
c00234dd:	85 c0                	test   eax,eax
c00234df:	75 17                	jne    c00234f8 <LinkedList<Device>::removeFirst()+0x24>
c00234e1:	83 ec 0c             	sub    esp,0xc
c00234e4:	68 88 4a 02 c0       	push   0xc0024a88
c00234e9:	e8 f7 1a ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c00234ee:	83 c4 10             	add    esp,0x10
c00234f1:	e9 92 00 00 00       	jmp    c0023588 <LinkedList<Device>::removeFirst()+0xb4>
c00234f6:	66 90                	xchg   ax,ax
c00234f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234ff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023505:	85 c0                	test   eax,eax
c0023507:	74 13                	je     c002351c <LinkedList<Device>::removeFirst()+0x48>
c0023509:	83 ec 0c             	sub    esp,0xc
c002350c:	68 d3 4a 02 c0       	push   0xc0024ad3
c0023511:	e8 cf 1a ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c0023516:	83 c4 10             	add    esp,0x10
c0023519:	8d 76 00             	lea    esi,[esi+0x0]
c002351c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023520:	8b 00                	mov    eax,DWORD PTR [eax]
c0023522:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023528:	85 c0                	test   eax,eax
c002352a:	75 34                	jne    c0023560 <LinkedList<Device>::removeFirst()+0x8c>
c002352c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023530:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002353a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023545:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023548:	83 f8 01             	cmp    eax,0x1
c002354b:	74 27                	je     c0023574 <LinkedList<Device>::removeFirst()+0xa0>
c002354d:	83 ec 0c             	sub    esp,0xc
c0023550:	68 ac 4a 02 c0       	push   0xc0024aac
c0023555:	e8 8b 1a ff ff       	call   c0014fe5 <Krnl::panic(char const*)>
c002355a:	83 c4 10             	add    esp,0x10
c002355d:	eb 15                	jmp    c0023574 <LinkedList<Device>::removeFirst()+0xa0>
c002355f:	90                   	nop
c0023560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023564:	8b 00                	mov    eax,DWORD PTR [eax]
c0023566:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002356c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023570:	89 10                	mov    DWORD PTR [eax],edx
c0023572:	66 90                	xchg   ax,ax
c0023574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023578:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002357b:	8d 50 ff             	lea    edx,[eax-0x1]
c002357e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023582:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023585:	8d 76 00             	lea    esi,[esi+0x0]
c0023588:	83 c4 0c             	add    esp,0xc
c002358b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002358c <CPU::~CPU()>:
c002358c:	83 ec 0c             	sub    esp,0xc
c002358f:	ba 34 63 02 c0       	mov    edx,0xc0026334
c0023594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023598:	89 10                	mov    DWORD PTR [eax],edx
c002359a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002359e:	83 ec 0c             	sub    esp,0xc
c00235a1:	50                   	push   eax
c00235a2:	e8 e1 ae fe ff       	call   c000e488 <Device::~Device()>
c00235a7:	83 c4 10             	add    esp,0x10
c00235aa:	90                   	nop
c00235ab:	83 c4 0c             	add    esp,0xc
c00235ae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00235b0 <CPU::~CPU()>:
c00235b0:	83 ec 0c             	sub    esp,0xc
c00235b3:	83 ec 0c             	sub    esp,0xc
c00235b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235ba:	e8 cd ff ff ff       	call   c002358c <CPU::~CPU()>
c00235bf:	83 c4 10             	add    esp,0x10
c00235c2:	83 ec 08             	sub    esp,0x8
c00235c5:	68 98 11 00 00       	push   0x1198
c00235ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235ce:	e8 93 99 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00235d3:	83 c4 10             	add    esp,0x10
c00235d6:	83 c4 0c             	add    esp,0xc
c00235d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00235dc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00235dc:	90                   	nop
c00235dd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00235e0 <ThreadControlBlock::ThreadControlBlock()>:
c00235e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235e4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00235eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235ef:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00235f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235fa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0023601:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023605:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002360c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023610:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023617:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002361b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002361f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023623:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023627:	90                   	nop
c0023628:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002362c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002362c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023630:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002363a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023641:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023645:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002364c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023650:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002365a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023661:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023665:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002366c:	90                   	nop
c002366d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0023670 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0023670:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023674:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023677:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023678 <Vm::_FPUState::_FPUState()>:
c0023678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002367c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0023683:	90                   	nop
c0023684:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023686 <PCI::~PCI()>:
c0023686:	83 ec 0c             	sub    esp,0xc
c0023689:	ba 20 71 02 c0       	mov    edx,0xc0027120
c002368e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023692:	89 10                	mov    DWORD PTR [eax],edx
c0023694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023698:	83 ec 0c             	sub    esp,0xc
c002369b:	50                   	push   eax
c002369c:	e8 b7 a7 fe ff       	call   c000de58 <Bus::~Bus()>
c00236a1:	83 c4 10             	add    esp,0x10
c00236a4:	90                   	nop
c00236a5:	83 c4 0c             	add    esp,0xc
c00236a8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00236aa <PCI::~PCI()>:
c00236aa:	83 ec 0c             	sub    esp,0xc
c00236ad:	83 ec 0c             	sub    esp,0xc
c00236b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00236b4:	e8 cd ff ff ff       	call   c0023686 <PCI::~PCI()>
c00236b9:	83 c4 10             	add    esp,0x10
c00236bc:	83 ec 08             	sub    esp,0x8
c00236bf:	68 5c 01 00 00       	push   0x15c
c00236c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00236c8:	e8 99 98 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00236cd:	83 c4 10             	add    esp,0x10
c00236d0:	83 c4 0c             	add    esp,0xc
c00236d3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00236d4 <IDE::~IDE()>:
c00236d4:	83 ec 0c             	sub    esp,0xc
c00236d7:	ba d4 71 02 c0       	mov    edx,0xc00271d4
c00236dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e0:	89 10                	mov    DWORD PTR [eax],edx
c00236e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e6:	83 ec 0c             	sub    esp,0xc
c00236e9:	50                   	push   eax
c00236ea:	e8 b1 b2 fe ff       	call   c000e9a0 <HardDiskController::~HardDiskController()>
c00236ef:	83 c4 10             	add    esp,0x10
c00236f2:	90                   	nop
c00236f3:	83 c4 0c             	add    esp,0xc
c00236f6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00236f8 <IDE::~IDE()>:
c00236f8:	83 ec 0c             	sub    esp,0xc
c00236fb:	83 ec 0c             	sub    esp,0xc
c00236fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023702:	e8 cd ff ff ff       	call   c00236d4 <IDE::~IDE()>
c0023707:	83 c4 10             	add    esp,0x10
c002370a:	83 ec 08             	sub    esp,0x8
c002370d:	68 70 02 00 00       	push   0x270
c0023712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023716:	e8 4b 98 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002371b:	83 c4 10             	add    esp,0x10
c002371e:	83 c4 0c             	add    esp,0xc
c0023721:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0023722 <SATABus::~SATABus()>:
c0023722:	83 ec 0c             	sub    esp,0xc
c0023725:	ba 90 72 02 c0       	mov    edx,0xc0027290
c002372a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002372e:	89 10                	mov    DWORD PTR [eax],edx
c0023730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023734:	83 ec 0c             	sub    esp,0xc
c0023737:	50                   	push   eax
c0023738:	e8 63 b2 fe ff       	call   c000e9a0 <HardDiskController::~HardDiskController()>
c002373d:	83 c4 10             	add    esp,0x10
c0023740:	90                   	nop
c0023741:	83 c4 0c             	add    esp,0xc
c0023744:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023746 <SATABus::~SATABus()>:
c0023746:	83 ec 0c             	sub    esp,0xc
c0023749:	83 ec 0c             	sub    esp,0xc
c002374c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023750:	e8 cd ff ff ff       	call   c0023722 <SATABus::~SATABus()>
c0023755:	83 c4 10             	add    esp,0x10
c0023758:	83 ec 08             	sub    esp,0x8
c002375b:	68 64 01 00 00       	push   0x164
c0023760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023764:	e8 fd 97 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023769:	83 c4 10             	add    esp,0x10
c002376c:	83 c4 0c             	add    esp,0xc
c002376f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023770 <ATA::~ATA()>:
c0023770:	83 ec 0c             	sub    esp,0xc
c0023773:	ba 08 73 02 c0       	mov    edx,0xc0027308
c0023778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002377c:	89 10                	mov    DWORD PTR [eax],edx
c002377e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023782:	83 ec 0c             	sub    esp,0xc
c0023785:	50                   	push   eax
c0023786:	e8 f7 b2 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c002378b:	83 c4 10             	add    esp,0x10
c002378e:	90                   	nop
c002378f:	83 c4 0c             	add    esp,0xc
c0023792:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023794 <ATA::~ATA()>:
c0023794:	83 ec 0c             	sub    esp,0xc
c0023797:	83 ec 0c             	sub    esp,0xc
c002379a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002379e:	e8 cd ff ff ff       	call   c0023770 <ATA::~ATA()>
c00237a3:	83 c4 10             	add    esp,0x10
c00237a6:	83 ec 08             	sub    esp,0x8
c00237a9:	68 7c 01 00 00       	push   0x17c
c00237ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237b2:	e8 af 97 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00237b7:	83 c4 10             	add    esp,0x10
c00237ba:	83 c4 0c             	add    esp,0xc
c00237bd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00237be <ATAPI::~ATAPI()>:
c00237be:	83 ec 0c             	sub    esp,0xc
c00237c1:	ba 6c 73 02 c0       	mov    edx,0xc002736c
c00237c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237ca:	89 10                	mov    DWORD PTR [eax],edx
c00237cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237d0:	83 ec 0c             	sub    esp,0xc
c00237d3:	50                   	push   eax
c00237d4:	e8 a9 b2 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c00237d9:	83 c4 10             	add    esp,0x10
c00237dc:	90                   	nop
c00237dd:	83 c4 0c             	add    esp,0xc
c00237e0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00237e2 <ATAPI::~ATAPI()>:
c00237e2:	83 ec 0c             	sub    esp,0xc
c00237e5:	83 ec 0c             	sub    esp,0xc
c00237e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237ec:	e8 cd ff ff ff       	call   c00237be <ATAPI::~ATAPI()>
c00237f1:	83 c4 10             	add    esp,0x10
c00237f4:	83 ec 08             	sub    esp,0x8
c00237f7:	68 84 01 00 00       	push   0x184
c00237fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023800:	e8 61 97 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023805:	83 c4 10             	add    esp,0x10
c0023808:	83 c4 0c             	add    esp,0xc
c002380b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002380c <SATA::~SATA()>:
c002380c:	83 ec 0c             	sub    esp,0xc
c002380f:	ba a8 75 02 c0       	mov    edx,0xc00275a8
c0023814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023818:	89 10                	mov    DWORD PTR [eax],edx
c002381a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002381e:	83 ec 0c             	sub    esp,0xc
c0023821:	50                   	push   eax
c0023822:	e8 5b b2 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c0023827:	83 c4 10             	add    esp,0x10
c002382a:	90                   	nop
c002382b:	83 c4 0c             	add    esp,0xc
c002382e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023830 <SATA::~SATA()>:
c0023830:	83 ec 0c             	sub    esp,0xc
c0023833:	83 ec 0c             	sub    esp,0xc
c0023836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002383a:	e8 cd ff ff ff       	call   c002380c <SATA::~SATA()>
c002383f:	83 c4 10             	add    esp,0x10
c0023842:	83 ec 08             	sub    esp,0x8
c0023845:	68 7c 01 00 00       	push   0x17c
c002384a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002384e:	e8 13 97 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023853:	83 c4 10             	add    esp,0x10
c0023856:	83 c4 0c             	add    esp,0xc
c0023859:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002385a <SATAPI::~SATAPI()>:
c002385a:	83 ec 0c             	sub    esp,0xc
c002385d:	ba 14 77 02 c0       	mov    edx,0xc0027714
c0023862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023866:	89 10                	mov    DWORD PTR [eax],edx
c0023868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002386c:	83 ec 0c             	sub    esp,0xc
c002386f:	50                   	push   eax
c0023870:	e8 0d b2 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c0023875:	83 c4 10             	add    esp,0x10
c0023878:	90                   	nop
c0023879:	83 c4 0c             	add    esp,0xc
c002387c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002387e <SATAPI::~SATAPI()>:
c002387e:	83 ec 0c             	sub    esp,0xc
c0023881:	83 ec 0c             	sub    esp,0xc
c0023884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023888:	e8 cd ff ff ff       	call   c002385a <SATAPI::~SATAPI()>
c002388d:	83 c4 10             	add    esp,0x10
c0023890:	83 ec 08             	sub    esp,0x8
c0023893:	68 84 01 00 00       	push   0x184
c0023898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002389c:	e8 c5 96 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00238a1:	83 c4 10             	add    esp,0x10
c00238a4:	83 c4 0c             	add    esp,0xc
c00238a7:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00238a8 <AVX::~AVX()>:
c00238a8:	83 ec 0c             	sub    esp,0xc
c00238ab:	ba 54 77 02 c0       	mov    edx,0xc0027754
c00238b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238b4:	89 10                	mov    DWORD PTR [eax],edx
c00238b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ba:	83 ec 0c             	sub    esp,0xc
c00238bd:	50                   	push   eax
c00238be:	e8 45 b2 fe ff       	call   c000eb08 <FPU::~FPU()>
c00238c3:	83 c4 10             	add    esp,0x10
c00238c6:	90                   	nop
c00238c7:	83 c4 0c             	add    esp,0xc
c00238ca:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00238cc <AVX::~AVX()>:
c00238cc:	83 ec 0c             	sub    esp,0xc
c00238cf:	83 ec 0c             	sub    esp,0xc
c00238d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238d6:	e8 cd ff ff ff       	call   c00238a8 <AVX::~AVX()>
c00238db:	83 c4 10             	add    esp,0x10
c00238de:	83 ec 08             	sub    esp,0x8
c00238e1:	68 58 01 00 00       	push   0x158
c00238e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238ea:	e8 77 96 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00238ef:	83 c4 10             	add    esp,0x10
c00238f2:	83 c4 0c             	add    esp,0xc
c00238f5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00238f8 <MMX::~MMX()>:
c00238f8:	83 ec 0c             	sub    esp,0xc
c00238fb:	ba 94 77 02 c0       	mov    edx,0xc0027794
c0023900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023904:	89 10                	mov    DWORD PTR [eax],edx
c0023906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002390a:	83 ec 0c             	sub    esp,0xc
c002390d:	50                   	push   eax
c002390e:	e8 f5 b1 fe ff       	call   c000eb08 <FPU::~FPU()>
c0023913:	83 c4 10             	add    esp,0x10
c0023916:	90                   	nop
c0023917:	83 c4 0c             	add    esp,0xc
c002391a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002391c <MMX::~MMX()>:
c002391c:	83 ec 0c             	sub    esp,0xc
c002391f:	83 ec 0c             	sub    esp,0xc
c0023922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023926:	e8 cd ff ff ff       	call   c00238f8 <MMX::~MMX()>
c002392b:	83 c4 10             	add    esp,0x10
c002392e:	83 ec 08             	sub    esp,0x8
c0023931:	68 58 01 00 00       	push   0x158
c0023936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002393a:	e8 27 96 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002393f:	83 c4 10             	add    esp,0x10
c0023942:	83 c4 0c             	add    esp,0xc
c0023945:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023948 <SSE::~SSE()>:
c0023948:	83 ec 0c             	sub    esp,0xc
c002394b:	ba d4 77 02 c0       	mov    edx,0xc00277d4
c0023950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023954:	89 10                	mov    DWORD PTR [eax],edx
c0023956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002395a:	83 ec 0c             	sub    esp,0xc
c002395d:	50                   	push   eax
c002395e:	e8 a5 b1 fe ff       	call   c000eb08 <FPU::~FPU()>
c0023963:	83 c4 10             	add    esp,0x10
c0023966:	90                   	nop
c0023967:	83 c4 0c             	add    esp,0xc
c002396a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002396c <SSE::~SSE()>:
c002396c:	83 ec 0c             	sub    esp,0xc
c002396f:	83 ec 0c             	sub    esp,0xc
c0023972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023976:	e8 cd ff ff ff       	call   c0023948 <SSE::~SSE()>
c002397b:	83 c4 10             	add    esp,0x10
c002397e:	83 ec 08             	sub    esp,0x8
c0023981:	68 58 01 00 00       	push   0x158
c0023986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002398a:	e8 d7 95 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002398f:	83 c4 10             	add    esp,0x10
c0023992:	83 c4 0c             	add    esp,0xc
c0023995:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023998 <x87::~x87()>:
c0023998:	83 ec 0c             	sub    esp,0xc
c002399b:	ba 68 78 02 c0       	mov    edx,0xc0027868
c00239a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239a4:	89 10                	mov    DWORD PTR [eax],edx
c00239a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239aa:	83 ec 0c             	sub    esp,0xc
c00239ad:	50                   	push   eax
c00239ae:	e8 55 b1 fe ff       	call   c000eb08 <FPU::~FPU()>
c00239b3:	83 c4 10             	add    esp,0x10
c00239b6:	90                   	nop
c00239b7:	83 c4 0c             	add    esp,0xc
c00239ba:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00239bc <x87::~x87()>:
c00239bc:	83 ec 0c             	sub    esp,0xc
c00239bf:	83 ec 0c             	sub    esp,0xc
c00239c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239c6:	e8 cd ff ff ff       	call   c0023998 <x87::~x87()>
c00239cb:	83 c4 10             	add    esp,0x10
c00239ce:	83 ec 08             	sub    esp,0x8
c00239d1:	68 58 01 00 00       	push   0x158
c00239d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239da:	e8 87 95 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00239df:	83 c4 10             	add    esp,0x10
c00239e2:	83 c4 0c             	add    esp,0xc
c00239e5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00239e6 <IOAPIC::~IOAPIC()>:
c00239e6:	83 ec 0c             	sub    esp,0xc
c00239e9:	ba c0 79 02 c0       	mov    edx,0xc00279c0
c00239ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239f2:	89 10                	mov    DWORD PTR [eax],edx
c00239f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239f8:	83 ec 0c             	sub    esp,0xc
c00239fb:	50                   	push   eax
c00239fc:	e8 87 aa fe ff       	call   c000e488 <Device::~Device()>
c0023a01:	83 c4 10             	add    esp,0x10
c0023a04:	90                   	nop
c0023a05:	83 c4 0c             	add    esp,0xc
c0023a08:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023a0a <IOAPIC::~IOAPIC()>:
c0023a0a:	83 ec 0c             	sub    esp,0xc
c0023a0d:	83 ec 0c             	sub    esp,0xc
c0023a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a14:	e8 cd ff ff ff       	call   c00239e6 <IOAPIC::~IOAPIC()>
c0023a19:	83 c4 10             	add    esp,0x10
c0023a1c:	83 ec 08             	sub    esp,0x8
c0023a1f:	68 68 01 00 00       	push   0x168
c0023a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a28:	e8 39 95 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023a2d:	83 c4 10             	add    esp,0x10
c0023a30:	83 c4 0c             	add    esp,0xc
c0023a33:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023a34 <APIC::~APIC()>:
c0023a34:	83 ec 0c             	sub    esp,0xc
c0023a37:	ba 78 79 02 c0       	mov    edx,0xc0027978
c0023a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a40:	89 10                	mov    DWORD PTR [eax],edx
c0023a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a46:	83 ec 0c             	sub    esp,0xc
c0023a49:	50                   	push   eax
c0023a4a:	e8 41 b5 fe ff       	call   c000ef90 <InterruptController::~InterruptController()>
c0023a4f:	83 c4 10             	add    esp,0x10
c0023a52:	90                   	nop
c0023a53:	83 c4 0c             	add    esp,0xc
c0023a56:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023a58 <APIC::~APIC()>:
c0023a58:	83 ec 0c             	sub    esp,0xc
c0023a5b:	83 ec 0c             	sub    esp,0xc
c0023a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a62:	e8 cd ff ff ff       	call   c0023a34 <APIC::~APIC()>
c0023a67:	83 c4 10             	add    esp,0x10
c0023a6a:	83 ec 08             	sub    esp,0x8
c0023a6d:	68 58 21 00 00       	push   0x2158
c0023a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a76:	e8 eb 94 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023a7b:	83 c4 10             	add    esp,0x10
c0023a7e:	83 c4 0c             	add    esp,0xc
c0023a81:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023a82 <PIC::~PIC()>:
c0023a82:	83 ec 0c             	sub    esp,0xc
c0023a85:	ba 10 7a 02 c0       	mov    edx,0xc0027a10
c0023a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a8e:	89 10                	mov    DWORD PTR [eax],edx
c0023a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a94:	83 ec 0c             	sub    esp,0xc
c0023a97:	50                   	push   eax
c0023a98:	e8 f3 b4 fe ff       	call   c000ef90 <InterruptController::~InterruptController()>
c0023a9d:	83 c4 10             	add    esp,0x10
c0023aa0:	90                   	nop
c0023aa1:	83 c4 0c             	add    esp,0xc
c0023aa4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023aa6 <PIC::~PIC()>:
c0023aa6:	83 ec 0c             	sub    esp,0xc
c0023aa9:	83 ec 0c             	sub    esp,0xc
c0023aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ab0:	e8 cd ff ff ff       	call   c0023a82 <PIC::~PIC()>
c0023ab5:	83 c4 10             	add    esp,0x10
c0023ab8:	83 ec 08             	sub    esp,0x8
c0023abb:	68 58 21 00 00       	push   0x2158
c0023ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ac4:	e8 9d 94 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023ac9:	83 c4 10             	add    esp,0x10
c0023acc:	83 c4 0c             	add    esp,0xc
c0023acf:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023ad0 <APICTimer::~APICTimer()>:
c0023ad0:	83 ec 0c             	sub    esp,0xc
c0023ad3:	ba 64 7a 02 c0       	mov    edx,0xc0027a64
c0023ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023adc:	89 10                	mov    DWORD PTR [eax],edx
c0023ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ae2:	83 ec 0c             	sub    esp,0xc
c0023ae5:	50                   	push   eax
c0023ae6:	e8 f5 d2 fe ff       	call   c0010de0 <Timer::~Timer()>
c0023aeb:	83 c4 10             	add    esp,0x10
c0023aee:	90                   	nop
c0023aef:	83 c4 0c             	add    esp,0xc
c0023af2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023af4 <APICTimer::~APICTimer()>:
c0023af4:	83 ec 0c             	sub    esp,0xc
c0023af7:	83 ec 0c             	sub    esp,0xc
c0023afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023afe:	e8 cd ff ff ff       	call   c0023ad0 <APICTimer::~APICTimer()>
c0023b03:	83 c4 10             	add    esp,0x10
c0023b06:	83 ec 08             	sub    esp,0x8
c0023b09:	68 60 01 00 00       	push   0x160
c0023b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b12:	e8 4f 94 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023b17:	83 c4 10             	add    esp,0x10
c0023b1a:	83 c4 0c             	add    esp,0xc
c0023b1d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023b20 <PIT::~PIT()>:
c0023b20:	83 ec 0c             	sub    esp,0xc
c0023b23:	ba b4 7a 02 c0       	mov    edx,0xc0027ab4
c0023b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b2c:	89 10                	mov    DWORD PTR [eax],edx
c0023b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b32:	83 ec 0c             	sub    esp,0xc
c0023b35:	50                   	push   eax
c0023b36:	e8 a5 d2 fe ff       	call   c0010de0 <Timer::~Timer()>
c0023b3b:	83 c4 10             	add    esp,0x10
c0023b3e:	90                   	nop
c0023b3f:	83 c4 0c             	add    esp,0xc
c0023b42:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023b44 <PIT::~PIT()>:
c0023b44:	83 ec 0c             	sub    esp,0xc
c0023b47:	83 ec 0c             	sub    esp,0xc
c0023b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b4e:	e8 cd ff ff ff       	call   c0023b20 <PIT::~PIT()>
c0023b53:	83 c4 10             	add    esp,0x10
c0023b56:	83 ec 08             	sub    esp,0x8
c0023b59:	68 5c 01 00 00       	push   0x15c
c0023b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b62:	e8 ff 93 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023b67:	83 c4 10             	add    esp,0x10
c0023b6a:	83 c4 0c             	add    esp,0xc
c0023b6d:	c3                   	ret    
