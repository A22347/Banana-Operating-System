
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f1 fb 00 00       	call   c000fc11 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 93 02 00       	call   c0029398 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 2e a0 02 c0       	mov    ebx,0xc002a02e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 3c a0 02 c0    	cmp    ebx,0xc002a03c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 e9 02 c0       	mov    eax,0xc002e998
c0000049:	3d 98 e9 02 c0       	cmp    eax,0xc002e998
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 e9 02 c0       	push   0xc002e998
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 e9 02 c0       	mov    eax,0xc002e998
c0000075:	2d 98 e9 02 c0       	sub    eax,0xc002e998
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 e9 02 c0       	push   0xc002e998
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efc8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 44 a0 02 c0       	mov    ebx,0xc002a044
c00000bb:	81 eb 40 a0 02 c0    	sub    ebx,0xc002a040
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 40 a0 02 c0       	mov    esi,0xc002a040
c00000ca:	a1 cc ef 02 c0       	mov    eax,ds:0xc002efcc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc ef 02 c0       	mov    ds:0xc002efcc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc ef 02 c0       	mov    eax,ds:0xc002efcc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 e9 02 c0       	push   0xc002e998
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 ef 02 c0 01 	mov    BYTE PTR ds:0xc002efc8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 ef 02 c0       	push   0xc002efd0
c000012c:	68 98 e9 02 c0       	push   0xc002e998
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 61 dc 01 00       	call   c001e004 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 5a 28 01 00       	call   c0012c15 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 3f dc 01 00       	call   c001e004 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 e7 e0 01 00       	call   c001e4cb <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 45 e7 01 00       	call   c001eb32 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 f4 02 c0 	lgdtd  ds:0xc002f410
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 6b 45 01 00       	call   c0014b4d <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 ef 02 c0       	mov    ds:0xc002efe8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 ef 02 c0    	mov    DWORD PTR ds:0xc002efe8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efe8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 a0 02 c0 02 	test   BYTE PTR [edx-0x3ffd5fa0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 a0 02 c0 01 	test   BYTE PTR [edx-0x3ffd5fa0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 a0 02 c0 08 	test   BYTE PTR [edx-0x3ffd5fa0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 a0 02 c0 04 	test   BYTE PTR [ebx-0x3ffd5fa0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 a0 02 c0 01 	test   BYTE PTR [edx-0x3ffd5fa0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f000
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 f0 02 c0    	mov    DWORD PTR ds:0xc002f000,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 f0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0ffc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ffc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 f0 02 c0    	mov    DWORD PTR ds:0xc002f000,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c f0 02 c0    	cmp    DWORD PTR ds:0xc002f02c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f03c
c0000e38:	c7 42 0c 34 f0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002f034
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c f0 02 c0    	mov    DWORD PTR ds:0xc002f03c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c f0 02 c0    	mov    DWORD PTR ds:0xc002f02c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 f0 02 c0 02 	test   BYTE PTR ds:0xc002f000,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 f0 02 c0       	mov    eax,0xc002f000
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 f0 02 c0    	mov    edi,DWORD PTR ds:0xc002f000
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 f0 02 c0       	mov    eax,0xc002f000
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 f0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0ffc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 f0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0ffc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 f0 02 c0 	lea    edx,[eax*8-0x3ffd0fcc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 f0 02 c0       	mov    eax,0xc002f000
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f040
c00011ba:	81 fb 34 f0 02 c0    	cmp    ebx,0xc002f034
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 f0 02 c0       	cmp    eax,0xc002f034
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 f0 02 c0    	cmp    DWORD PTR ds:0xc002f030,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c f0 02 c0       	mov    ds:0xc002f03c,eax
c00011f6:	a3 40 f0 02 c0       	mov    ds:0xc002f040,eax
c00011fb:	a3 30 f0 02 c0       	mov    ds:0xc002f030,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 f0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f034
c0001209:	c7 40 0c 34 f0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002f034
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 f0 02 c0       	mov    ds:0xc002f040,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 f0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f034
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 ef 02 c0 	lea    ebp,[edx*4-0x3ffd1008]
c000125a:	8b 14 95 00 f0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1000]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 f0 02 c0 	lea    ecx,[edx*4-0x3ffd1000]
c0001275:	8b 14 95 00 f0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1000]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 f3 02 c0 	or     DWORD PTR [edi*4-0x3ffd0ccc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 f0 02 c0 	lea    eax,[eax*8-0x3ffd0fcc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c f0 02 c0    	mov    DWORD PTR ds:0xc002f03c,ecx
c000132f:	89 0d 40 f0 02 c0    	mov    DWORD PTR ds:0xc002f040,ecx
c0001335:	c7 41 08 34 f0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002f034
c000133c:	c7 41 0c 34 f0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002f034
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c f0 02 c0 	lea    edx,[ecx*8-0x3ffd0fd4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 f3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0ccc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 f3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0ccc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c f0 02 c0 	lea    edx,[eax*4-0x3ffd0fd4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 f3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0ccc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c f0 02 c0    	mov    DWORD PTR ds:0xc002f03c,edi
c0001402:	89 3d 40 f0 02 c0    	mov    DWORD PTR ds:0xc002f040,edi
c0001408:	c7 47 08 34 f0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002f034
c000140f:	c7 47 0c 34 f0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002f034
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 f0 02 c0    	mov    DWORD PTR ds:0xc002f030,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c f0 02 c0       	mov    eax,ds:0xc002f02c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c f0 02 c0    	mov    DWORD PTR ds:0xc002f02c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 f0 02 c0       	mov    edx,0xc002f000
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 f0 02 c0 00 	cmp    DWORD PTR ds:0xc002f000,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 f0 02 c0       	mov    eax,0xc002f000
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f354
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f354,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 f3 02 c0    	mov    DWORD PTR ds:0xc002f354,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c f0 02 c0    	cmp    DWORD PTR ds:0xc002f02c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c f0 02 c0    	mov    DWORD PTR ds:0xc002f02c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 f0 02 c0 00 	cmp    DWORD PTR ds:0xc002f000,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 f0 02 c0       	mov    eax,0xc002f000
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c f3 02 c0    	push   DWORD PTR ds:0xc002f35c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 f0 02 c0 00 	cmp    DWORD PTR ds:0xc002f000,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 f0 02 c0       	mov    eax,0xc002f000
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c f3 02 c0       	mov    eax,ds:0xc002f35c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 f0 02 c0       	mov    eax,0xc002f000
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c f0 02 c0 00 	cmp    DWORD PTR ds:0xc002f02c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 f0 02 c0       	mov    eax,0xc002f000
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c f0 02 c0       	mov    eax,ds:0xc002f02c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0ffc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 f0 02 c0       	mov    eax,0xc002f034
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c f3 02 c0       	cmp    eax,0xc002f32c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 f3 02 c0       	mov    eax,ds:0xc002f368
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f350
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f364
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f374
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 f0 02 c0       	mov    eax,0xc002f000
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 a1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5e9c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 f0 02 c0       	mov    eax,ds:0xc002f000
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 f0 02 c0       	mov    ds:0xc002f000,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 f3 02 c0    	mov    DWORD PTR ds:0xc002f344,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 f3 02 c0    	mov    DWORD PTR ds:0xc002f348,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c f3 02 c0    	mov    DWORD PTR ds:0xc002f34c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f354,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 e0 2a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd520]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 0a fc 01 00       	jmp    c00217fc <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 e0 2a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd520]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 3b fc 01 00       	jmp    c0021843 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 e0 2a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd520]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 63 fc 01 00       	jmp    c002188a <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ea 57 02 00       	call   c00276f4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 a2 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd5d80]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 a2 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd5d80]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 a1 02 c0       	mov    edx,0xc002a180
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 a2 02 c0       	mov    edx,0xc002a2a0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba a8 d7 02 c0       	mov    edx,0xc002d7a8
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac a2 02 c0       	mov    edx,0xc002a2ac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 a2 02 c0       	mov    edx,0xc002a290
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 f3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0c60]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 f3 02 c0    	mov    ax,ds:0xc002f380
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 f3 02 c0    	mov    ds:0xc002f380,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 e7 45 02 00       	call   c00276f4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 a2 02 c0       	mov    eax,0xc002a2b2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 a2 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd5e00]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb a2 02 c0       	mov    eax,0xc002a2bb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 a2 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd5d80]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 b2 2f 02 00       	call   c00276f4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 a2 02 c0       	mov    edx,0xc002a290
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 a1 02 c0       	mov    edx,0xc002a180
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 a1 02 c0       	mov    edx,0xc002a190
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 f3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0c60]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 f3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0c60],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 79 19 02 00       	call   c00276f4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 5f 19 02 00       	call   c00276f4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 a1 02 c0       	mov    eax,0xc002a1d7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 a1 02 c0       	mov    eax,0xc002a1d0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 a0 f3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0c60]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 a1 02 c0       	mov    esi,0xc002a1c0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 a2 00 02 00       	call   c00276f4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 a2 02 c0       	mov    edx,0xc002a2a0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 a1 02 c0       	mov    edx,0xc002a1a0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 a1 02 c0       	mov    edx,0xc002a1b0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 a2 02 c0       	mov    edx,0xc002a2c2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce a2 02 c0       	mov    edx,0xc002a2ce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 a2 02 c0       	mov    edx,0xc002a2e2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 a6 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a600
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 a6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a600
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 a4 02 c0       	mov    eax,0xc002a400
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 a3 02 c0       	mov    eax,0xc002a340
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 a3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d00]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 f6 09 02 00       	call   c00291c7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 b9 09 02 00       	call   c00291a9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 8d 09 02 00       	call   c00291c7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 40 00 02 00       	call   c00288cc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 c2 0a 02 00       	call   c0029360 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 07 09 02 00       	call   c00291c7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 49 08 02 00       	call   c00291c7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 16 08 02 00       	call   c00291a9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 03 07 02 00       	call   c00291c7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 cb 06 02 00       	call   c00291a9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 a7 02 c0       	mov    eax,0xc002a700
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 d7 04 02 00       	call   c00291c7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 9c 04 02 00       	call   c00291a9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 ab 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd54a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 ac 01 02 00       	call   c0028f5b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 2a fb 01 00       	call   c00288f8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 e6 03 02 00       	call   c00291cb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 d4 04 02 00       	call   c00292ef <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 be fa 01 00       	call   c00288f8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 69 03 02 00       	call   c00291c5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 4a 03 02 00       	call   c00291c9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 e0 04 02 00       	call   c0029380 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 8a 00 02 00       	call   c0028f5b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 08 fa 01 00       	call   c00288f8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 c4 02 02 00       	call   c00291cb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 b2 03 02 00       	call   c00292ef <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 9c f9 01 00       	call   c00288f8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 47 02 02 00       	call   c00291c5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 27 02 02 00       	call   c00291c9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 bc 03 02 00       	call   c0029380 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 62 01 02 00       	call   c00291c7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 20 01 02 00       	call   c00291a9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 08 01 02 00       	call   c00291c7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 7a fe 01 00       	call   c0028f5b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 7c f1 01 00       	call   c002827b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 df f7 01 00       	call   c00288f8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 31 fe 01 00       	call   c0028f5b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 37 f1 01 00       	call   c002827b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 06 fe 01 00       	call   c0028f5b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 56 00 02 00       	call   c00291c5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 33 f7 01 00       	call   c00288cc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 b5 01 02 00       	call   c0029360 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 dc ff 01 00       	call   c00291a9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 d7 f6 01 00       	call   c00288cc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 55 fd 01 00       	call   c0028f5b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 d8 f6 01 00       	call   c00288f8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 2a fd 01 00       	call   c0028f5b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 91 f9 01 00       	call   c0028bdc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 10 f0 01 00       	call   c002827b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 70 e9 01 00       	call   c0027c10 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 47 00 02 00       	call   c00292ef <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 30 f6 01 00       	call   c00288f8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 17 00 02 00       	call   c00292ef <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 89 ef 01 00       	call   c002827b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 c2 fe 01 00       	call   c00291cb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 aa f8 01 00       	call   c0028bdc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 30 ef 01 00       	call   c002827b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 1e 00 02 00       	call   c0029380 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 f0 fb 01 00       	call   c0028f5b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 47 f5 01 00       	call   c00288cc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 26 fe 01 00       	call   c00291c7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 bf ee 01 00       	call   c002827b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 eb f4 01 00       	call   c00288cc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 8d ff 01 00       	call   c0029380 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 3e fb 01 00       	call   c0028f5b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 bb f4 01 00       	call   c00288f8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 0e fb 01 00       	call   c0028f5b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 14 ee 01 00       	call   c002827b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 e4 fa 01 00       	call   c0028f5b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 36 fd 01 00       	call   c00291c7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 0d f4 01 00       	call   c00288cc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 8f fe 01 00       	call   c0029360 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 b6 fc 01 00       	call   c00291a9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 b0 f3 01 00       	call   c00288cc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 2e fa 01 00       	call   c0028f5b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 b1 f3 01 00       	call   c00288f8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 03 fa 01 00       	call   c0028f5b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 6a f6 01 00       	call   c0028bdc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 e9 ec 01 00       	call   c002827b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 39 e6 01 00       	call   c0027c10 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 10 fd 01 00       	call   c00292ef <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 f9 f2 01 00       	call   c00288f8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 e0 fc 01 00       	call   c00292ef <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 52 ec 01 00       	call   c002827b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 8b fb 01 00       	call   c00291cb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 72 f5 01 00       	call   c0028bdc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 f1 eb 01 00       	call   c002827b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 df fc 01 00       	call   c0029380 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 b1 f8 01 00       	call   c0028f5b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 08 f2 01 00       	call   c00288cc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 e7 fa 01 00       	call   c00291c7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 80 eb 01 00       	call   c002827b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 ac f1 01 00       	call   c00288cc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 21 f8 01 00       	call   c0028f5b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 27 eb 01 00       	call   c002827b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 ab 02 c0       	mov    eax,0xc002abc0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 ab 02 c0       	mov    eax,0xc002abd4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 9c f6 01 00       	call   c0028f5b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 1a f0 01 00       	call   c00288f8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 ac e2 01 00       	call   c0027c10 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 83 f9 01 00       	call   c00292ef <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 6c ef 01 00       	call   c00288f8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 4f f9 01 00       	call   c00292ef <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 c1 e8 01 00       	call   c002827b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 21 f9 01 00       	call   c00292ef <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 10 ef 01 00       	call   c00288f8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 79 e8 01 00       	call   c002827b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 9a e1 01 00       	call   c0027c10 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 71 f8 01 00       	call   c00292ef <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 5a ee 01 00       	call   c00288f8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 3d f8 01 00       	call   c00292ef <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 af e7 01 00       	call   c002827b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 0f f8 01 00       	call   c00292ef <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 fe ed 01 00       	call   c00288f8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 67 e7 01 00       	call   c002827b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 45 e7 01 00       	call   c002827b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 21 e0 01 00       	call   c0027c10 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 f8 f6 01 00       	call   c00292ef <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 e1 ec 01 00       	call   c00288f8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 c4 f6 01 00       	call   c00292ef <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 36 e6 01 00       	call   c002827b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 96 f6 01 00       	call   c00292ef <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 7f ec 01 00       	call   c00288f8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 e8 e5 01 00       	call   c002827b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 48 f6 01 00       	call   c00292ef <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 31 ec 01 00       	call   c00288f8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 9a e5 01 00       	call   c002827b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 af de 01 00       	call   c0027c10 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 86 f5 01 00       	call   c00292ef <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 6f eb 01 00       	call   c00288f8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 56 f5 01 00       	call   c00292ef <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 c8 e4 01 00       	call   c002827b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 28 f5 01 00       	call   c00292ef <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 11 eb 01 00       	call   c00288f8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 7a e4 01 00       	call   c002827b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 da f4 01 00       	call   c00292ef <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 c3 ea 01 00       	call   c00288f8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 2c e4 01 00       	call   c002827b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 00 e4 01 00       	call   c002827b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 5d ea 01 00       	call   c00288f8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 19 f3 01 00       	call   c00291cb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 a8 e3 01 00       	call   c002827b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 05 ea 01 00       	call   c00288f8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 c1 f2 01 00       	call   c00291cb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 3b dc 01 00       	call   c0027c10 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 12 f3 01 00       	call   c00292ef <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 fb e8 01 00       	call   c00288f8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 de f2 01 00       	call   c00292ef <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 50 e2 01 00       	call   c002827b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 b0 f2 01 00       	call   c00292ef <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 99 e8 01 00       	call   c00288f8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 02 e2 01 00       	call   c002827b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 62 f2 01 00       	call   c00292ef <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 4b e8 01 00       	call   c00288f8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 b4 e1 01 00       	call   c002827b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 14 f2 01 00       	call   c00292ef <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 fd e7 01 00       	call   c00288f8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 66 e1 01 00       	call   c002827b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 c6 f1 01 00       	call   c00292ef <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 af e7 01 00       	call   c00288f8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 18 e1 01 00       	call   c002827b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 1a da 01 00       	call   c0027c10 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 f1 f0 01 00       	call   c00292ef <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 da e6 01 00       	call   c00288f8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 c1 f0 01 00       	call   c00292ef <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 33 e0 01 00       	call   c002827b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 93 f0 01 00       	call   c00292ef <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 7c e6 01 00       	call   c00288f8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 e5 df 01 00       	call   c002827b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 45 f0 01 00       	call   c00292ef <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 2e e6 01 00       	call   c00288f8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 97 df 01 00       	call   c002827b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 f7 ef 01 00       	call   c00292ef <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 e0 e5 01 00       	call   c00288f8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 49 df 01 00       	call   c002827b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 a9 ef 01 00       	call   c00292ef <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 92 e5 01 00       	call   c00288f8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 fb de 01 00       	call   c002827b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 cf de 01 00       	call   c002827b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 2c e5 01 00       	call   c00288f8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 e8 ed 01 00       	call   c00291cb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 77 de 01 00       	call   c002827b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 d4 e4 01 00       	call   c00288f8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 90 ed 01 00       	call   c00291cb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 1e de 01 00       	call   c002827b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 7b e4 01 00       	call   c00288f8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 37 ed 01 00       	call   c00291cb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 c5 dd 01 00       	call   c002827b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 22 e4 01 00       	call   c00288f8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 de ec 01 00       	call   c00291cb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 3c d6 01 00       	call   c0027c10 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 13 ed 01 00       	call   c00292ef <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 fc e2 01 00       	call   c00288f8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 df ec 01 00       	call   c00292ef <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 51 dc 01 00       	call   c002827b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 b1 ec 01 00       	call   c00292ef <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 9a e2 01 00       	call   c00288f8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 03 dc 01 00       	call   c002827b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 63 ec 01 00       	call   c00292ef <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 4c e2 01 00       	call   c00288f8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 b5 db 01 00       	call   c002827b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 15 ec 01 00       	call   c00292ef <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 fe e1 01 00       	call   c00288f8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 67 db 01 00       	call   c002827b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 c7 eb 01 00       	call   c00292ef <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 b0 e1 01 00       	call   c00288f8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 19 db 01 00       	call   c002827b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 79 eb 01 00       	call   c00292ef <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 62 e1 01 00       	call   c00288f8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 c8 da 01 00       	call   c002827b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 28 eb 01 00       	call   c00292ef <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 11 e1 01 00       	call   c00288f8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 7a da 01 00       	call   c002827b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 74 d3 01 00       	call   c0027c10 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 4b ea 01 00       	call   c00292ef <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 34 e0 01 00       	call   c00288f8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 14 ea 01 00       	call   c00292ef <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 86 d9 01 00       	call   c002827b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 e6 e9 01 00       	call   c00292ef <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 cf df 01 00       	call   c00288f8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 38 d9 01 00       	call   c002827b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 98 e9 01 00       	call   c00292ef <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 81 df 01 00       	call   c00288f8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 ea d8 01 00       	call   c002827b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 4a e9 01 00       	call   c00292ef <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 33 df 01 00       	call   c00288f8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 9c d8 01 00       	call   c002827b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 fc e8 01 00       	call   c00292ef <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 e5 de 01 00       	call   c00288f8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 4e d8 01 00       	call   c002827b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ae e8 01 00       	call   c00292ef <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 97 de 01 00       	call   c00288f8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 fd d7 01 00       	call   c002827b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 5d e8 01 00       	call   c00292ef <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 46 de 01 00       	call   c00288f8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 b5 d7 01 00       	call   c002827b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 8e d7 01 00       	call   c002827b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 ec dd 01 00       	call   c00288f8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 a8 e6 01 00       	call   c00291cb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 37 d7 01 00       	call   c002827b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 95 dd 01 00       	call   c00288f8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 51 e6 01 00       	call   c00291cb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 df d6 01 00       	call   c002827b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 3d dd 01 00       	call   c00288f8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 f9 e5 01 00       	call   c00291cb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 87 d6 01 00       	call   c002827b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 e5 dc 01 00       	call   c00288f8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 a1 e5 01 00       	call   c00291cb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 2f d6 01 00       	call   c002827b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 8d dc 01 00       	call   c00288f8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 49 e5 01 00       	call   c00291cb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 dd d5 01 00       	call   c002827b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 3b dc 01 00       	call   c00288f8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 f7 e4 01 00       	call   c00291cb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 0b ce 01 00       	call   c0027c10 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 e2 e4 01 00       	call   c00292ef <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 cb da 01 00       	call   c00288f8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 b2 e4 01 00       	call   c00292ef <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 24 d4 01 00       	call   c002827b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 ac 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd53fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 58 e4 01 00       	call   c00292ef <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 41 da 01 00       	call   c00288f8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 ac d3 01 00       	call   c002827b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 f9 e3 01 00       	call   c00292ef <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 e2 d9 01 00       	call   c00288f8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 4d d3 01 00       	call   c002827b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 9a e3 01 00       	call   c00292ef <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 83 d9 01 00       	call   c00288f8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 ee d2 01 00       	call   c002827b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 3b e3 01 00       	call   c00292ef <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 24 d9 01 00       	call   c00288f8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 8f d2 01 00       	call   c002827b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 dc e2 01 00       	call   c00292ef <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 c5 d8 01 00       	call   c00288f8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 30 d2 01 00       	call   c002827b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 7d e2 01 00       	call   c00292ef <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 66 d8 01 00       	call   c00288f8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 d1 d1 01 00       	call   c002827b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 1e e2 01 00       	call   c00292ef <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 07 d8 01 00       	call   c00288f8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 72 d1 01 00       	call   c002827b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 bf e1 01 00       	call   c00292ef <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 a8 d7 01 00       	call   c00288f8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 13 d1 01 00       	call   c002827b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 1d ca 01 00       	call   c0027c10 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 f4 e0 01 00       	call   c00292ef <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 dd d6 01 00       	call   c00288f8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 c4 e0 01 00       	call   c00292ef <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 36 d0 01 00       	call   c002827b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 ac 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd53e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 69 e0 01 00       	call   c00292ef <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 52 d6 01 00       	call   c00288f8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 bd cf 01 00       	call   c002827b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 09 e0 01 00       	call   c00292ef <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 f2 d5 01 00       	call   c00288f8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 5d cf 01 00       	call   c002827b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 a9 df 01 00       	call   c00292ef <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 92 d5 01 00       	call   c00288f8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 fd ce 01 00       	call   c002827b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 49 df 01 00       	call   c00292ef <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 32 d5 01 00       	call   c00288f8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 9d ce 01 00       	call   c002827b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 e9 de 01 00       	call   c00292ef <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 d2 d4 01 00       	call   c00288f8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 3d ce 01 00       	call   c002827b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 89 de 01 00       	call   c00292ef <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 72 d4 01 00       	call   c00288f8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 dd cd 01 00       	call   c002827b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 29 de 01 00       	call   c00292ef <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 12 d4 01 00       	call   c00288f8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 7d cd 01 00       	call   c002827b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 c9 dd 01 00       	call   c00292ef <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 b2 d3 01 00       	call   c00288f8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 1d cd 01 00       	call   c002827b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c ac 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd53c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 c2 cc 01 00       	call   c002827b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 1f d3 01 00       	call   c00288f8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 db db 01 00       	call   c00291cb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 65 cc 01 00       	call   c002827b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 c2 d2 01 00       	call   c00288f8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 7e db 01 00       	call   c00291cb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 08 cc 01 00       	call   c002827b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 65 d2 01 00       	call   c00288f8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 21 db 01 00       	call   c00291cb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 ab cb 01 00       	call   c002827b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 08 d2 01 00       	call   c00288f8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 c4 da 01 00       	call   c00291cb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 4e cb 01 00       	call   c002827b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 ab d1 01 00       	call   c00288f8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 67 da 01 00       	call   c00291cb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 f1 ca 01 00       	call   c002827b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 4e d1 01 00       	call   c00288f8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 0a da 01 00       	call   c00291cb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 94 ca 01 00       	call   c002827b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 f1 d0 01 00       	call   c00288f8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 ad d9 01 00       	call   c00291cb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 37 ca 01 00       	call   c002827b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 94 d0 01 00       	call   c00288f8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 50 d9 01 00       	call   c00291cb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 4c d0 01 00       	call   c00288f8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 c4 da 01 00       	jmp    c0029380 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 2e d7 01 00       	call   c00291c7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 ec d6 01 00       	call   c00291a9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 83 d4 01 00       	call   c0028f5b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 84 c7 01 00       	call   c002827b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 53 d4 01 00       	call   c0028f5b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ba d0 01 00       	call   c0028bdc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 59 d6 01 00       	call   c00291a9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 5c d6 01 00       	call   c00291c7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 2f d6 01 00       	call   c00291c7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 28 d0 01 00       	call   c0028bdc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 b2 d7 01 00       	call   c0029380 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 8d d7 01 00       	call   c0029380 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 5f d3 01 00       	call   c0028f5b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 b6 cc 01 00       	call   c00288cc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 95 d5 01 00       	call   c00291c7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 2e c6 01 00       	call   c002827b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 52 cc 01 00       	call   c00288cc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 f4 d6 01 00       	call   c0029380 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 2c cf 01 00       	call   c0028bdc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 a9 c5 01 00       	call   c002827b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 d5 d1 01 00       	call   c0028f5b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 d5 c4 01 00       	call   c002827b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 b5 c4 01 00       	call   c002827b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 85 d1 01 00       	call   c0028f5b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 d5 d3 01 00       	call   c00291c5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 b4 ca 01 00       	call   c00288cc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 36 d5 01 00       	call   c0029360 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 5d d3 01 00       	call   c00291a9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 5b ca 01 00       	call   c00288cc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 d9 d0 01 00       	call   c0028f5b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 5c ca 01 00       	call   c00288f8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ae d0 01 00       	call   c0028f5b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 15 cd 01 00       	call   c0028bdc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 94 c3 01 00       	call   c002827b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 5e d0 01 00       	call   c0028f5b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 aa d2 01 00       	call   c00291c7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 9f c9 01 00       	call   c00288f8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 71 c9 01 00       	call   c00288f8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 aa cf 01 00       	call   c0028f5b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 0e cc 01 00       	call   c0028bdc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 d6 cb 01 00       	call   c0028bdc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 55 c2 01 00       	call   c002827b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 42 d3 01 00       	call   c0029380 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 14 cf 01 00       	call   c0028f5b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 6b c8 01 00       	call   c00288cc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 4a d1 01 00       	call   c00291c7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 e2 c1 01 00       	call   c002827b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 06 c8 01 00       	call   c00288cc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 a8 d2 01 00       	call   c0029380 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 69 d0 01 00       	call   c00291c7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 27 d0 01 00       	call   c00291a9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 be cd 01 00       	call   c0028f5b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 bf c0 01 00       	call   c002827b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 8e cd 01 00       	call   c0028f5b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 f5 c9 01 00       	call   c0028bdc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 94 cf 01 00       	call   c00291a9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 97 cf 01 00       	call   c00291c7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 6a cf 01 00       	call   c00291c7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 63 c9 01 00       	call   c0028bdc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 ed d0 01 00       	call   c0029380 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 c8 d0 01 00       	call   c0029380 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 9a cc 01 00       	call   c0028f5b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 f1 c5 01 00       	call   c00288cc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 d0 ce 01 00       	call   c00291c7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 69 bf 01 00       	call   c002827b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 8d c5 01 00       	call   c00288cc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 2f d0 01 00       	call   c0029380 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 67 c8 01 00       	call   c0028bdc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 e4 be 01 00       	call   c002827b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 0f cb 01 00       	call   c0028f5b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 0f be 01 00       	call   c002827b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ef bd 01 00       	call   c002827b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 bf ca 01 00       	call   c0028f5b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 0f cd 01 00       	call   c00291c5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 ed c3 01 00       	call   c00288cc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 6f ce 01 00       	call   c0029360 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 96 cc 01 00       	call   c00291a9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 93 c3 01 00       	call   c00288cc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 11 ca 01 00       	call   c0028f5b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 94 c3 01 00       	call   c00288f8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 e6 c9 01 00       	call   c0028f5b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 4d c6 01 00       	call   c0028bdc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 cc bc 01 00       	call   c002827b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 96 c9 01 00       	call   c0028f5b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 e2 cb 01 00       	call   c00291c7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 d7 c2 01 00       	call   c00288f8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 a9 c2 01 00       	call   c00288f8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 e0 c8 01 00       	call   c0028f5b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 44 c5 01 00       	call   c0028bdc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 11 c5 01 00       	call   c0028bdc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 90 bb 01 00       	call   c002827b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 7d cc 01 00       	call   c0029380 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 4f c8 01 00       	call   c0028f5b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 a6 c1 01 00       	call   c00288cc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 85 ca 01 00       	call   c00291c7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 1d bb 01 00       	call   c002827b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 41 c1 01 00       	call   c00288cc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 e3 cb 01 00       	call   c0029380 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 a4 c9 01 00       	call   c00291c7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 62 c9 01 00       	call   c00291a9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 f9 c6 01 00       	call   c0028f5b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 fa b9 01 00       	call   c002827b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 c9 c6 01 00       	call   c0028f5b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 30 c3 01 00       	call   c0028bdc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 cf c8 01 00       	call   c00291a9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 d2 c8 01 00       	call   c00291c7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 a5 c8 01 00       	call   c00291c7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 9e c2 01 00       	call   c0028bdc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 28 ca 01 00       	call   c0029380 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 03 ca 01 00       	call   c0029380 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 d5 c5 01 00       	call   c0028f5b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 2c bf 01 00       	call   c00288cc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 0b c8 01 00       	call   c00291c7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 a4 b8 01 00       	call   c002827b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 c8 be 01 00       	call   c00288cc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 6a c9 01 00       	call   c0029380 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 a2 c1 01 00       	call   c0028bdc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 1f b8 01 00       	call   c002827b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 4a c4 01 00       	call   c0028f5b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 4a b7 01 00       	call   c002827b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 2a b7 01 00       	call   c002827b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 fa c3 01 00       	call   c0028f5b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 4a c6 01 00       	call   c00291c5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 28 bd 01 00       	call   c00288cc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 aa c7 01 00       	call   c0029360 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 d1 c5 01 00       	call   c00291a9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ce bc 01 00       	call   c00288cc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 4c c3 01 00       	call   c0028f5b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 cf bc 01 00       	call   c00288f8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 21 c3 01 00       	call   c0028f5b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 88 bf 01 00       	call   c0028bdc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 07 b6 01 00       	call   c002827b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 d1 c2 01 00       	call   c0028f5b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 1d c5 01 00       	call   c00291c7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 12 bc 01 00       	call   c00288f8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 e4 bb 01 00       	call   c00288f8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 1b c2 01 00       	call   c0028f5b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 7f be 01 00       	call   c0028bdc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 4c be 01 00       	call   c0028bdc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 cb b4 01 00       	call   c002827b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 b8 c5 01 00       	call   c0029380 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 8a c1 01 00       	call   c0028f5b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 e1 ba 01 00       	call   c00288cc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 c0 c3 01 00       	call   c00291c7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 58 b4 01 00       	call   c002827b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 7c ba 01 00       	call   c00288cc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 1e c5 01 00       	call   c0029380 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 df c2 01 00       	call   c00291c7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 9d c2 01 00       	call   c00291a9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 34 c0 01 00       	call   c0028f5b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 35 b3 01 00       	call   c002827b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 04 c0 01 00       	call   c0028f5b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 6b bc 01 00       	call   c0028bdc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 0a c2 01 00       	call   c00291a9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 0d c2 01 00       	call   c00291c7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 e0 c1 01 00       	call   c00291c7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 d9 bb 01 00       	call   c0028bdc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 63 c3 01 00       	call   c0029380 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 3e c3 01 00       	call   c0029380 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 10 bf 01 00       	call   c0028f5b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 67 b8 01 00       	call   c00288cc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 46 c1 01 00       	call   c00291c7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 df b1 01 00       	call   c002827b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 03 b8 01 00       	call   c00288cc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 a5 c2 01 00       	call   c0029380 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 dd ba 01 00       	call   c0028bdc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 5a b1 01 00       	call   c002827b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 85 bd 01 00       	call   c0028f5b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 85 b0 01 00       	call   c002827b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 65 b0 01 00       	call   c002827b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 35 bd 01 00       	call   c0028f5b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 85 bf 01 00       	call   c00291c5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 63 b6 01 00       	call   c00288cc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 e5 c0 01 00       	call   c0029360 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 0c bf 01 00       	call   c00291a9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 09 b6 01 00       	call   c00288cc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 87 bc 01 00       	call   c0028f5b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 0a b6 01 00       	call   c00288f8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 5c bc 01 00       	call   c0028f5b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 c3 b8 01 00       	call   c0028bdc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 42 af 01 00       	call   c002827b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 0c bc 01 00       	call   c0028f5b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 58 be 01 00       	call   c00291c7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 4d b5 01 00       	call   c00288f8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 1f b5 01 00       	call   c00288f8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 56 bb 01 00       	call   c0028f5b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ba b7 01 00       	call   c0028bdc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 87 b7 01 00       	call   c0028bdc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 06 ae 01 00       	call   c002827b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 f3 be 01 00       	call   c0029380 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 c5 ba 01 00       	call   c0028f5b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 1c b4 01 00       	call   c00288cc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 fb bc 01 00       	call   c00291c7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 93 ad 01 00       	call   c002827b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 b7 b3 01 00       	call   c00288cc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 59 be 01 00       	call   c0029380 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 17 bc 01 00       	call   c00291c7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 d5 bb 01 00       	call   c00291a9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 6c b9 01 00       	call   c0028f5b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 6d ac 01 00       	call   c002827b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 3c b9 01 00       	call   c0028f5b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 a3 b5 01 00       	call   c0028bdc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 42 bb 01 00       	call   c00291a9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 45 bb 01 00       	call   c00291c7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 18 bb 01 00       	call   c00291c7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 11 b5 01 00       	call   c0028bdc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 9b bc 01 00       	call   c0029380 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 72 bc 01 00       	call   c0029380 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 44 b8 01 00       	call   c0028f5b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 9b b1 01 00       	call   c00288cc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 7a ba 01 00       	call   c00291c7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 13 ab 01 00       	call   c002827b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 3b b1 01 00       	call   c00288cc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 dd bb 01 00       	call   c0029380 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 16 b4 01 00       	call   c0028bdc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 93 aa 01 00       	call   c002827b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 bf b6 01 00       	call   c0028f5b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 bf a9 01 00       	call   c002827b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 9f a9 01 00       	call   c002827b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 6f b6 01 00       	call   c0028f5b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 a3 b8 01 00       	call   c00291a9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 9a af 01 00       	call   c00288cc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 1c ba 01 00       	call   c0029360 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 43 b8 01 00       	call   c00291a9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 3d af 01 00       	call   c00288cc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 bb b5 01 00       	call   c0028f5b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 3e af 01 00       	call   c00288f8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 90 b5 01 00       	call   c0028f5b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 f7 b1 01 00       	call   c0028bdc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 76 a8 01 00       	call   c002827b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 40 b5 01 00       	call   c0028f5b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 8c b7 01 00       	call   c00291c7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 81 ae 01 00       	call   c00288f8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 53 ae 01 00       	call   c00288f8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 97 b4 01 00       	call   c0028f5b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 fe b0 01 00       	call   c0028bdc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 e7 ad 01 00       	call   c00288f8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 a3 b6 01 00       	call   c00291cb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 96 b0 01 00       	call   c0028bdc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 15 a7 01 00       	call   c002827b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 02 b8 01 00       	call   c0029380 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 d4 b3 01 00       	call   c0028f5b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 2b ad 01 00       	call   c00288cc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 0a b6 01 00       	call   c00291c7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 a2 a6 01 00       	call   c002827b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ca ac 01 00       	call   c00288cc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 6c b7 01 00       	call   c0029380 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 ac 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd539c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 ac 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd53a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 1f b4 01 00       	call   c00291c7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 dd b3 01 00       	call   c00291a9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 c9 b3 01 00       	call   c00291c7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 3b b1 01 00       	call   c0028f5b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 b9 aa 01 00       	call   c00288f8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 0b b1 01 00       	call   c0028f5b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 11 a4 01 00       	call   c002827b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 e0 b0 01 00       	call   c0028f5b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 30 b3 01 00       	call   c00291c5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 11 aa 01 00       	call   c00288cc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 93 b4 01 00       	call   c0029360 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ba b2 01 00       	call   c00291a9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 b9 a9 01 00       	call   c00288cc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 37 b0 01 00       	call   c0028f5b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ba a9 01 00       	call   c00288f8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 0c b0 01 00       	call   c0028f5b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 73 ac 01 00       	call   c0028bdc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 f2 a2 01 00       	call   c002827b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 1a ac 01 00       	call   c0028bdc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 a0 a2 01 00       	call   c002827b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 8e b3 01 00       	call   c0029380 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 60 af 01 00       	call   c0028f5b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 b7 a8 01 00       	call   c00288cc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 96 b1 01 00       	call   c00291c7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 2f a2 01 00       	call   c002827b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 5b a8 01 00       	call   c00288cc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 fd b2 01 00       	call   c0029380 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 aa ae 01 00       	call   c0028f5b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 27 a8 01 00       	call   c00288f8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 78 ae 01 00       	call   c0028f5b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 7e a1 01 00       	call   c002827b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 4e ae 01 00       	call   c0028f5b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 a2 b0 01 00       	call   c00291c9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 7b a7 01 00       	call   c00288cc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 fd b1 01 00       	call   c0029360 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 24 b0 01 00       	call   c00291a9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 22 a7 01 00       	call   c00288cc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 a0 ad 01 00       	call   c0028f5b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 23 a7 01 00       	call   c00288f8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 75 ad 01 00       	call   c0028f5b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 dc a9 01 00       	call   c0028bdc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 5b a0 01 00       	call   c002827b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 77 a9 01 00       	call   c0028bdc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 f6 9f 01 00       	call   c002827b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 e4 b0 01 00       	call   c0029380 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 b6 ac 01 00       	call   c0028f5b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 0d a6 01 00       	call   c00288cc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 ec ae 01 00       	call   c00291c7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 85 9f 01 00       	call   c002827b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 b1 a5 01 00       	call   c00288cc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 22 ac 01 00       	call   c0028f5b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 28 9f 01 00       	call   c002827b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e ad 02 c0       	mov    eax,0xc002ad7e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f ad 02 c0       	mov    eax,0xc002ad8f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c000e4e3:	ff 05 44 29 03 c0    	inc    DWORD PTR ds:0xc0032944
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 40 29 03 c0 00 	cmp    DWORD PTR ds:0xc0032940,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c000e50d:	e8 46 02 01 00       	call   c001e758 <schedule()>
c000e512:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c000e517:	48                   	dec    eax
c000e518:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 90 f5 02 c0       	mov    eax,ds:0xc002f590
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 ad 02 c0       	push   0xc002adc6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 08 f4 02 c0       	mov    eax,0xc002f408
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf ad 02 c0       	push   0xc002adcf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 f4 76 02 c0       	mov    eax,0xc00276f4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 ad 02 c0       	push   0xc002add9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 28 74 02 c0       	mov    eax,0xc0027428
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 ad 02 c0       	push   0xc002ade2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 f4 77 02 c0       	mov    eax,0xc00277f4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec ad 02 c0       	push   0xc002adec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 74 75 02 c0       	mov    eax,0xc0027574
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 ad 02 c0       	push   0xc002adf5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 0c f4 02 c0       	mov    eax,0xc002f40c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 ae 02 c0       	push   0xc002ae02
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 0d f4 02 c0       	mov    eax,0xc002f40d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 8d 5d 00 00       	call   c00143fa <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c000e6b2:	68 0f ae 02 c0       	push   0xc002ae0f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 5d fc 00 00       	call   c001e31c <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 40 fe 00 00       	call   c001e514 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 92 ef 01 c0       	push   0xc001ef92
c000e6dd:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c000e6e3:	e8 2c fe 00 00       	call   c001e514 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c000e6f0:	c6 05 0d f4 02 c0 01 	mov    BYTE PTR ds:0xc002f40d,0x1
c000e6f7:	e8 ea 0c 01 00       	call   c001f3e6 <Vm::initialise8086()>
c000e6fc:	e8 c1 4a 00 00       	call   c00131c2 <Fs::initVFS()>
c000e701:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 8c e4 00 00       	call   c001cba9 <Sys::loadSyscalls()>
c000e71d:	e8 4a c1 00 00       	call   c001a86c <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 1c ae 02 c0       	push   0xc002ae1c
c000e72c:	68 25 ae 02 c0       	push   0xc002ae25
c000e731:	e8 25 d0 00 00       	call   c001b75b <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 74 55 00 00       	call   c0013cb2 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 6b 5c 00 00       	call   c00143ba <Device::loadDriversForAll()>
c000e74f:	e8 64 bc 00 00       	call   c001a3b8 <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d 08 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f408
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 2d ae 02 c0       	push   0xc002ae2d
c000e763:	e8 11 f6 00 00       	call   c001dd79 <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 33 f8 00 00       	call   c001dfa4 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 d9 01 01 00       	call   c001e957 <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 49 ae 02 c0       	push   0xc002ae49
c000e793:	50                   	push   eax
c000e794:	e8 db 5c 00 00       	call   c0014474 <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba e8 af 02 c0       	mov    edx,0xc002afe8
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 21 f4 02 c0 04 	test   BYTE PTR ds:0xc002f421,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 89 8a 01 00       	call   c00273b6 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 60 a7 00 00       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 39 a7 00 00       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 17 a7 00 00       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 f5 a6 00 00       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 20 f4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f420,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 03 a6 00 00       	call   c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 de a5 00 00       	call   c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 f3 88 01 00       	call   c0027370 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 b0 88 01 00       	call   c0027350 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 fa a5 00 00       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 59 ae 02 c0       	push   0xc002ae59
c000eaf9:	e8 39 43 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 6c ae 02 c0       	push   0xc002ae6c
c000eb1c:	e8 16 43 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 7d ae 02 c0       	push   0xc002ae7d
c000eb3f:	e8 f3 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 8e ae 02 c0       	push   0xc002ae8e
c000eb62:	e8 d0 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 9f ae 02 c0       	push   0xc002ae9f
c000eb85:	e8 ad 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 b0 ae 02 c0       	push   0xc002aeb0
c000eba8:	e8 8a 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 c1 ae 02 c0       	push   0xc002aec1
c000ebcb:	e8 67 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 d2 ae 02 c0       	push   0xc002aed2
c000ebee:	e8 44 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 e3 ae 02 c0       	push   0xc002aee3
c000ec11:	e8 21 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 f4 ae 02 c0       	push   0xc002aef4
c000ec34:	e8 fe 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 05 af 02 c0       	push   0xc002af05
c000ec57:	e8 db 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 16 af 02 c0       	push   0xc002af16
c000ec7a:	e8 b8 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 27 af 02 c0       	push   0xc002af27
c000ec9d:	e8 95 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 38 af 02 c0       	push   0xc002af38
c000ecc0:	e8 72 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 49 af 02 c0       	push   0xc002af49
c000ece3:	e8 4f 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 5a af 02 c0       	push   0xc002af5a
c000ed06:	e8 2c 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 6b af 02 c0       	push   0xc002af6b
c000ed29:	e8 09 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 7c af 02 c0       	push   0xc002af7c
c000ed4c:	e8 e6 40 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 8d af 02 c0       	push   0xc002af8d
c000ed6b:	e8 c7 40 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 2c ca 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ca2c
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 b6 40 00 00       	jmp    c0012e37 <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 9e af 02 c0       	push   0xc002af9e
c000ee54:	e8 4c bb 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 a4 af 02 c0       	push   0xc002afa4
c000ee8c:	e8 14 bb 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 20 f4 02 c0 04 	test   BYTE PTR ds:0xc002f420,0x4
c000eee4:	68 68 12 00 00       	push   0x1268
c000eee9:	0f 94 05 44 e3 02 c0 	sete   BYTE PTR ds:0xc002e344
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 f3 93 00 00       	call   c00182f2 <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 62 53 00 00       	call   c0014270 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 42 a2 00 00       	call   c0019180 <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 23 53 00 00       	call   c0014270 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 af 58 00 00       	call   c0014818 <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 f3 52 00 00       	call   c0014270 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 97 f6 00 00       	call   c001e636 <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 aa af 02 c0       	push   0xc002afaa
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 4a 3e 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 bb af 02 c0       	push   0xc002afbb
c000f00a:	e8 96 b9 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 c8 af 02 c0       	push   0xc002afc8
c000f01f:	e8 81 b9 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 d2 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002afd2
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 6a b9 00 00       	jmp    c001a9a5 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 0c b0 02 c0       	push   0xc002b00c
c000f0d0:	e8 62 3d 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 12 f4 02 c0       	mov    ds:0xc002f412,eax
c000f111:	66 89 15 10 f4 02 c0 	mov    WORD PTR ds:0xc002f410,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c000f228:	48                   	dec    eax
c000f229:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 08 f4 02 c0    	push   DWORD PTR ds:0xc002f408
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 81 a1 01 00       	call   c0029400 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 78 a1 01 00       	call   c0029400 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 18 f4 02 c0 ff 07 	mov    WORD PTR ds:0xc002f418,0x7ff
c000f375:	a3 1a f4 02 c0       	mov    ds:0xc002f41a,eax
c000f37a:	0f 01 1d 18 f4 02 c0 	lidtd  ds:0xc002f418
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 90 f5 02 c0    	push   DWORD PTR ds:0xc002f590
c000f66c:	e8 f9 2c 00 00       	call   c001236a <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 d3 1c 00 00       	call   c0011362 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 04 1d 00 00       	call   c00113a2 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 08 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f408
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d 2c e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e32c
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 2c e3 02 c0       	mov    eax,ds:0xc002e32c
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 28 b0 02 c0       	push   0xc002b028
c000f745:	e8 ed 36 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 2c e3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e32c,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 90 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f590
c000f771:	8b 2d 2c e3 02 c0    	mov    ebp,DWORD PTR ds:0xc002e32c
c000f777:	e8 7c 07 00 00       	call   c000fef8 <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 df 2a 00 00       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d 2c e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e32c
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 58 b0 02 c0       	push   0xc002b058
c000f7fd:	e8 a3 b1 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 5d b0 02 c0       	push   0xc002b05d
c000f813:	e8 8d b1 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c000f833:	48                   	dec    eax
c000f834:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 90 f5 02 c0    	push   DWORD PTR ds:0xc002f590
c000f854:	e8 11 2b 00 00       	call   c001236a <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 90 f5 02 c0    	push   DWORD PTR ds:0xc002f590
c000f86a:	e8 a5 27 00 00       	call   c0012014 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <hwTextMode_loadInData(VgaText*)>:
c000f8e6:	55                   	push   ebp
c000f8e7:	a1 40 e3 02 c0       	mov    eax,ds:0xc002e340
c000f8ec:	57                   	push   edi
c000f8ed:	56                   	push   esi
c000f8ee:	53                   	push   ebx
c000f8ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8f3:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f8f6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f8f9:	85 d2                	test   edx,edx
c000f8fb:	7e 29                	jle    c000f926 <hwTextMode_loadInData(VgaText*)+0x40>
c000f8fd:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f903:	31 f6                	xor    esi,esi
c000f905:	29 cd                	sub    ebp,ecx
c000f907:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f90a:	31 c0                	xor    eax,eax
c000f90c:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f910:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f914:	40                   	inc    eax
c000f915:	83 f8 50             	cmp    eax,0x50
c000f918:	75 f2                	jne    c000f90c <hwTextMode_loadInData(VgaText*)+0x26>
c000f91a:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f920:	46                   	inc    esi
c000f921:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f924:	7f e1                	jg     c000f907 <hwTextMode_loadInData(VgaText*)+0x21>
c000f926:	5b                   	pop    ebx
c000f927:	5e                   	pop    esi
c000f928:	5f                   	pop    edi
c000f929:	5d                   	pop    ebp
c000f92a:	c3                   	ret    

c000f92b <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f92b:	55                   	push   ebp
c000f92c:	80 3d a0 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4a0,0x0
c000f933:	57                   	push   edi
c000f934:	56                   	push   esi
c000f935:	53                   	push   ebx
c000f936:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f93a:	75 44                	jne    c000f980 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f93c:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f93f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f942:	8b 15 40 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e340
c000f948:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f94c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f952:	eb 08                	jmp    c000f95c <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f954:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f957:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f95a:	89 da                	mov    edx,ebx
c000f95c:	83 e5 0f             	and    ebp,0xf
c000f95f:	c1 e0 04             	shl    eax,0x4
c000f962:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f965:	0f b6 c0             	movzx  eax,al
c000f968:	41                   	inc    ecx
c000f969:	09 e8                	or     eax,ebp
c000f96b:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f96f:	c1 e0 08             	shl    eax,0x8
c000f972:	09 e8                	or     eax,ebp
c000f974:	39 fb                	cmp    ebx,edi
c000f976:	66 89 02             	mov    WORD PTR [edx],ax
c000f979:	75 d9                	jne    c000f954 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f97b:	5b                   	pop    ebx
c000f97c:	5e                   	pop    esi
c000f97d:	5f                   	pop    edi
c000f97e:	5d                   	pop    ebp
c000f97f:	c3                   	ret    
c000f980:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f987:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f98e:	31 c0                	xor    eax,eax
c000f990:	bd 02 00 00 00       	mov    ebp,0x2
c000f995:	eb ab                	jmp    c000f942 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f997 <hwTextMode_showCursor(VgaText*, bool)>:
c000f997:	56                   	push   esi
c000f998:	80 3d a0 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4a0,0x0
c000f99f:	53                   	push   ebx
c000f9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a4:	75 36                	jne    c000f9dc <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9a6:	84 c0                	test   al,al
c000f9a8:	74 35                	je     c000f9df <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9aa:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9af:	b0 0a                	mov    al,0xa
c000f9b1:	89 da                	mov    edx,ebx
c000f9b3:	ee                   	out    dx,al
c000f9b4:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9b9:	89 ca                	mov    edx,ecx
c000f9bb:	ec                   	in     al,dx
c000f9bc:	b2 0f                	mov    dl,0xf
c000f9be:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9c2:	83 e0 c0             	and    eax,0xffffffc0
c000f9c5:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9c8:	09 d0                	or     eax,edx
c000f9ca:	89 ca                	mov    edx,ecx
c000f9cc:	ee                   	out    dx,al
c000f9cd:	b0 0b                	mov    al,0xb
c000f9cf:	89 da                	mov    edx,ebx
c000f9d1:	ee                   	out    dx,al
c000f9d2:	89 ca                	mov    edx,ecx
c000f9d4:	ec                   	in     al,dx
c000f9d5:	83 e0 e0             	and    eax,0xffffffe0
c000f9d8:	83 c8 0f             	or     eax,0xf
c000f9db:	ee                   	out    dx,al
c000f9dc:	5b                   	pop    ebx
c000f9dd:	5e                   	pop    esi
c000f9de:	c3                   	ret    
c000f9df:	b0 0a                	mov    al,0xa
c000f9e1:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9e6:	ee                   	out    dx,al
c000f9e7:	b0 20                	mov    al,0x20
c000f9e9:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9ee:	ee                   	out    dx,al
c000f9ef:	5b                   	pop    ebx
c000f9f0:	5e                   	pop    esi
c000f9f1:	c3                   	ret    

c000f9f2 <hwTextMode_update(VgaText*)>:
c000f9f2:	c3                   	ret    

c000f9f3 <hwTextMode_updateCursor(VgaText*)>:
c000f9f3:	56                   	push   esi
c000f9f4:	80 3d a0 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4a0,0x0
c000f9fb:	53                   	push   ebx
c000f9fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa00:	75 36                	jne    c000fa38 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa02:	be d4 03 00 00       	mov    esi,0x3d4
c000fa07:	b9 19 00 00 00       	mov    ecx,0x19
c000fa0c:	89 f2                	mov    edx,esi
c000fa0e:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa11:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa14:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa17:	c1 e1 04             	shl    ecx,0x4
c000fa1a:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa1d:	b0 0f                	mov    al,0xf
c000fa1f:	ee                   	out    dx,al
c000fa20:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa25:	88 c8                	mov    al,cl
c000fa27:	89 da                	mov    edx,ebx
c000fa29:	ee                   	out    dx,al
c000fa2a:	b0 0e                	mov    al,0xe
c000fa2c:	89 f2                	mov    edx,esi
c000fa2e:	ee                   	out    dx,al
c000fa2f:	89 c8                	mov    eax,ecx
c000fa31:	89 da                	mov    edx,ebx
c000fa33:	66 c1 e8 08          	shr    ax,0x8
c000fa37:	ee                   	out    dx,al
c000fa38:	5b                   	pop    ebx
c000fa39:	5e                   	pop    esi
c000fa3a:	c3                   	ret    

c000fa3b <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa3f:	80 3d a0 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4a0,0x0
c000fa46:	75 38                	jne    c000fa80 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa48:	ba da 03 00 00       	mov    edx,0x3da
c000fa4d:	84 c0                	test   al,al
c000fa4f:	75 18                	jne    c000fa69 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa51:	ec                   	in     al,dx
c000fa52:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa57:	b0 30                	mov    al,0x30
c000fa59:	89 ca                	mov    edx,ecx
c000fa5b:	ee                   	out    dx,al
c000fa5c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa61:	ec                   	in     al,dx
c000fa62:	83 c8 08             	or     eax,0x8
c000fa65:	89 ca                	mov    edx,ecx
c000fa67:	ee                   	out    dx,al
c000fa68:	c3                   	ret    
c000fa69:	ec                   	in     al,dx
c000fa6a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa6f:	b0 30                	mov    al,0x30
c000fa71:	89 ca                	mov    edx,ecx
c000fa73:	ee                   	out    dx,al
c000fa74:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa79:	ec                   	in     al,dx
c000fa7a:	83 e0 f7             	and    eax,0xfffffff7
c000fa7d:	89 ca                	mov    edx,ecx
c000fa7f:	ee                   	out    dx,al
c000fa80:	c3                   	ret    

c000fa81 <hwTextMode_scrollScreen(VgaText*)>:
c000fa81:	55                   	push   ebp
c000fa82:	57                   	push   edi
c000fa83:	56                   	push   esi
c000fa84:	53                   	push   ebx
c000fa85:	83 ec 1c             	sub    esp,0x1c
c000fa88:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa8c:	80 3d a0 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4a0,0x0
c000fa93:	74 0e                	je     c000faa3 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fa95:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fa9c:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000faa3:	a1 40 e3 02 c0       	mov    eax,ds:0xc002e340
c000faa8:	bd 02 00 00 00       	mov    ebp,0x2
c000faad:	05 a0 00 00 00       	add    eax,0xa0
c000fab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fab6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000faba:	31 c0                	xor    eax,eax
c000fabc:	eb 0b                	jmp    c000fac9 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fabe:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fac4:	74 51                	je     c000fb17 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fac6:	43                   	inc    ebx
c000fac7:	89 f0                	mov    eax,esi
c000fac9:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000facf:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fad5:	88 13                	mov    BYTE PTR [ebx],dl
c000fad7:	8d 70 01             	lea    esi,[eax+0x1]
c000fada:	83 fd 18             	cmp    ebp,0x18
c000fadd:	75 df                	jne    c000fabe <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fadf:	a8 01                	test   al,0x1
c000fae1:	75 13                	jne    c000faf6 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fae3:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fae6:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faec:	75 d8                	jne    c000fac6 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000faee:	83 c4 1c             	add    esp,0x1c
c000faf1:	5b                   	pop    ebx
c000faf2:	5e                   	pop    esi
c000faf3:	5f                   	pop    edi
c000faf4:	5d                   	pop    ebp
c000faf5:	c3                   	ret    
c000faf6:	83 ec 08             	sub    esp,0x8
c000faf9:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fafd:	50                   	push   eax
c000fafe:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb02:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb06:	50                   	push   eax
c000fb07:	e8 0c 0c 00 00       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb0c:	83 c4 10             	add    esp,0x10
c000fb0f:	88 07                	mov    BYTE PTR [edi],al
c000fb11:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb15:	eb cf                	jmp    c000fae6 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb17:	45                   	inc    ebp
c000fb18:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb20:	eb 94                	jmp    c000fab6 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb22 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb22:	57                   	push   edi
c000fb23:	80 3d a0 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4a0,0x0
c000fb2a:	56                   	push   esi
c000fb2b:	53                   	push   ebx
c000fb2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb30:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb34:	75 62                	jne    c000fb98 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb36:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb3b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb40:	83 ec 08             	sub    esp,0x8
c000fb43:	52                   	push   edx
c000fb44:	50                   	push   eax
c000fb45:	e8 ce 0b 00 00       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb4a:	5a                   	pop    edx
c000fb4b:	0f b6 c0             	movzx  eax,al
c000fb4e:	59                   	pop    ecx
c000fb4f:	50                   	push   eax
c000fb50:	0f be c3             	movsx  eax,bl
c000fb53:	50                   	push   eax
c000fb54:	e8 65 0c 00 00       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c000fb59:	83 c4 10             	add    esp,0x10
c000fb5c:	8b 35 40 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e340
c000fb62:	80 3d a0 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4a0,0x0
c000fb69:	74 07                	je     c000fb72 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb6b:	66 0f be c3          	movsx  ax,bl
c000fb6f:	80 cc 02             	or     ah,0x2
c000fb72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb76:	ba 19 00 00 00       	mov    edx,0x19
c000fb7b:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb7e:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb81:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb84:	c1 e1 04             	shl    ecx,0x4
c000fb87:	c1 e2 04             	shl    edx,0x4
c000fb8a:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb8e:	01 ca                	add    edx,ecx
c000fb90:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb94:	5b                   	pop    ebx
c000fb95:	5e                   	pop    esi
c000fb96:	5f                   	pop    edi
c000fb97:	c3                   	ret    
c000fb98:	b8 02 00 00 00       	mov    eax,0x2
c000fb9d:	31 d2                	xor    edx,edx
c000fb9f:	eb 9f                	jmp    c000fb40 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fba1 <setupTextMode()>:
c000fba1:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fba6:	83 e0 30             	and    eax,0x30
c000fba9:	66 83 f8 30          	cmp    ax,0x30
c000fbad:	75 11                	jne    c000fbc0 <setupTextMode()+0x1f>
c000fbaf:	81 2d 40 e3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002e340,0x8000
c000fbb9:	c6 05 a0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4a0,0x1
c000fbc0:	c7 05 d8 f4 02 c0 3b fa 00 c0 	mov    DWORD PTR ds:0xc002f4d8,0xc000fa3b
c000fbca:	c7 05 c4 f4 02 c0 e6 f8 00 c0 	mov    DWORD PTR ds:0xc002f4c4,0xc000f8e6
c000fbd4:	c7 05 c0 f4 02 c0 2b f9 00 c0 	mov    DWORD PTR ds:0xc002f4c0,0xc000f92b
c000fbde:	c7 05 cc f4 02 c0 81 fa 00 c0 	mov    DWORD PTR ds:0xc002f4cc,0xc000fa81
c000fbe8:	c7 05 d4 f4 02 c0 97 f9 00 c0 	mov    DWORD PTR ds:0xc002f4d4,0xc000f997
c000fbf2:	c7 05 c8 f4 02 c0 f2 f9 00 c0 	mov    DWORD PTR ds:0xc002f4c8,0xc000f9f2
c000fbfc:	c7 05 d0 f4 02 c0 f3 f9 00 c0 	mov    DWORD PTR ds:0xc002f4d0,0xc000f9f3
c000fc06:	c7 05 dc f4 02 c0 22 fb 00 c0 	mov    DWORD PTR ds:0xc002f4dc,0xc000fb22
c000fc10:	c3                   	ret    

c000fc11 <kernel_main>:
c000fc11:	57                   	push   edi
c000fc12:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc17:	56                   	push   esi
c000fc18:	89 fa                	mov    edx,edi
c000fc1a:	53                   	push   ebx
c000fc1b:	31 f6                	xor    esi,esi
c000fc1d:	83 ec 2c             	sub    esp,0x2c
c000fc20:	89 f0                	mov    eax,esi
c000fc22:	ee                   	out    dx,al
c000fc23:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc28:	b0 80                	mov    al,0x80
c000fc2a:	89 da                	mov    edx,ebx
c000fc2c:	ee                   	out    dx,al
c000fc2d:	b1 03                	mov    cl,0x3
c000fc2f:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc34:	88 c8                	mov    al,cl
c000fc36:	ee                   	out    dx,al
c000fc37:	89 f0                	mov    eax,esi
c000fc39:	89 fa                	mov    edx,edi
c000fc3b:	ee                   	out    dx,al
c000fc3c:	88 c8                	mov    al,cl
c000fc3e:	89 da                	mov    edx,ebx
c000fc40:	ee                   	out    dx,al
c000fc41:	b0 c7                	mov    al,0xc7
c000fc43:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc48:	ee                   	out    dx,al
c000fc49:	b0 0b                	mov    al,0xb
c000fc4b:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc50:	ee                   	out    dx,al
c000fc51:	68 64 b0 02 c0       	push   0xc002b064
c000fc56:	e8 dc 31 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000fc5b:	e8 4a 09 00 00       	call   c00105aa <installVgaTextImplementation()>
c000fc60:	e8 3c ff ff ff       	call   c000fba1 <setupTextMode()>
c000fc65:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc6a:	05 ff 0f 00 00       	add    eax,0xfff
c000fc6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc74:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc77:	e8 f5 03 00 00       	call   c0010071 <Phys::physicalMemorySetup(unsigned int)>
c000fc7c:	e8 6f 1f 00 00       	call   c0011bf0 <Virt::virtualMemorySetup()>
c000fc81:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc90:	75 0e                	jne    c000fca0 <kernel_main+0x8f>
c000fc92:	89 d8                	mov    eax,ebx
c000fc94:	25 48 03 00 00       	and    eax,0x348
c000fc99:	3d 00 03 00 00       	cmp    eax,0x300
c000fc9e:	74 10                	je     c000fcb0 <kernel_main+0x9f>
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	68 2d ca 02 c0       	push   0xc002ca2d
c000fca8:	e8 f8 ac 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	83 ec 0c             	sub    esp,0xc
c000fcb3:	89 1d 20 f4 02 c0    	mov    DWORD PTR ds:0xc002f420,ebx
c000fcb9:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcbd:	53                   	push   ebx
c000fcbe:	e8 79 21 00 00       	call   c0011e3c <VAS::VAS()>
c000fcc3:	89 1d 90 f5 02 c0    	mov    DWORD PTR ds:0xc002f590,ebx
c000fcc9:	e8 52 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcce:	c7 04 24 7b b0 02 c0 	mov    DWORD PTR [esp],0xc002b07b
c000fcd5:	e8 5d 31 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000fcda:	e8 90 1f 00 00       	call   c0011c6f <Virt::swappingSetup()>
c000fcdf:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fce6:	e8 a1 fb ff ff       	call   c000f88c <malloc>
c000fceb:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcee:	89 c6                	mov    esi,eax
c000fcf0:	e8 8f ea ff ff       	call   c000e784 <Computer::Computer()>
c000fcf5:	58                   	pop    eax
c000fcf6:	89 35 08 f4 02 c0    	mov    DWORD PTR ds:0xc002f408,esi
c000fcfc:	5a                   	pop    edx
c000fcfd:	56                   	push   esi
c000fcfe:	68 98 b0 02 c0       	push   0xc002b098
c000fd03:	e8 2f 31 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000fd08:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c000fd0d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd0f:	6a 00                	push   0x0
c000fd11:	6a 00                	push   0x0
c000fd13:	6a 00                	push   0x0
c000fd15:	50                   	push   eax
c000fd16:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd19:	83 c4 14             	add    esp,0x14
c000fd1c:	53                   	push   ebx
c000fd1d:	e8 ca 23 00 00       	call   c00120ec <VAS::~VAS()>
c000fd22:	c7 04 24 ab b0 02 c0 	mov    DWORD PTR [esp],0xc002b0ab
c000fd29:	e8 77 ac 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c000fd2e:	83 c4 30             	add    esp,0x30
c000fd31:	5b                   	pop    ebx
c000fd32:	5e                   	pop    esi
c000fd33:	5f                   	pop    edi
c000fd34:	c3                   	ret    

c000fd35 <Phys::allocateDMA(unsigned long)>:
c000fd35:	55                   	push   ebp
c000fd36:	31 d2                	xor    edx,edx
c000fd38:	57                   	push   edi
c000fd39:	31 ed                	xor    ebp,ebp
c000fd3b:	56                   	push   esi
c000fd3c:	31 c9                	xor    ecx,ecx
c000fd3e:	53                   	push   ebx
c000fd3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd43:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd49:	31 c0                	xor    eax,eax
c000fd4b:	c1 ee 0c             	shr    esi,0xc
c000fd4e:	eb 17                	jmp    c000fd67 <Phys::allocateDMA(unsigned long)+0x32>
c000fd50:	85 c9                	test   ecx,ecx
c000fd52:	75 04                	jne    c000fd58 <Phys::allocateDMA(unsigned long)+0x23>
c000fd54:	89 d5                	mov    ebp,edx
c000fd56:	89 d0                	mov    eax,edx
c000fd58:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd5b:	39 de                	cmp    esi,ebx
c000fd5d:	74 20                	je     c000fd7f <Phys::allocateDMA(unsigned long)+0x4a>
c000fd5f:	42                   	inc    edx
c000fd60:	89 d9                	mov    ecx,ebx
c000fd62:	83 fa 2f             	cmp    edx,0x2f
c000fd65:	7f 11                	jg     c000fd78 <Phys::allocateDMA(unsigned long)+0x43>
c000fd67:	80 ba 60 f4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0ba0],0x0
c000fd6e:	74 e0                	je     c000fd50 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd70:	31 c9                	xor    ecx,ecx
c000fd72:	42                   	inc    edx
c000fd73:	83 fa 2f             	cmp    edx,0x2f
c000fd76:	7e ef                	jle    c000fd67 <Phys::allocateDMA(unsigned long)+0x32>
c000fd78:	5b                   	pop    ebx
c000fd79:	31 c0                	xor    eax,eax
c000fd7b:	5e                   	pop    esi
c000fd7c:	5f                   	pop    edi
c000fd7d:	5d                   	pop    ebp
c000fd7e:	c3                   	ret    
c000fd7f:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd82:	89 d7                	mov    edi,edx
c000fd84:	4f                   	dec    edi
c000fd85:	79 03                	jns    c000fd8a <Phys::allocateDMA(unsigned long)+0x55>
c000fd87:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd8a:	c1 ff 04             	sar    edi,0x4
c000fd8d:	89 c2                	mov    edx,eax
c000fd8f:	c1 fa 04             	sar    edx,0x4
c000fd92:	39 fa                	cmp    edx,edi
c000fd94:	75 2f                	jne    c000fdc5 <Phys::allocateDMA(unsigned long)+0x90>
c000fd96:	85 db                	test   ebx,ebx
c000fd98:	74 1a                	je     c000fdb4 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd9a:	be 60 f4 02 c0       	mov    esi,0xc002f460
c000fd9f:	8d 90 60 f4 02 c0    	lea    edx,[eax-0x3ffd0ba0]
c000fda5:	f7 d6                	not    esi
c000fda7:	29 c6                	sub    esi,eax
c000fda9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fdac:	42                   	inc    edx
c000fdad:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fdb0:	39 d9                	cmp    ecx,ebx
c000fdb2:	7f f5                	jg     c000fda9 <Phys::allocateDMA(unsigned long)+0x74>
c000fdb4:	85 ff                	test   edi,edi
c000fdb6:	74 13                	je     c000fdcb <Phys::allocateDMA(unsigned long)+0x96>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	05 50 20 0c 00       	add    eax,0xc2050
c000fdbe:	5e                   	pop    esi
c000fdbf:	c1 e0 0c             	shl    eax,0xc
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    
c000fdc5:	89 ea                	mov    edx,ebp
c000fdc7:	31 c9                	xor    ecx,ecx
c000fdc9:	eb a7                	jmp    c000fd72 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdcb:	5b                   	pop    ebx
c000fdcc:	c1 e0 0c             	shl    eax,0xc
c000fdcf:	5e                   	pop    esi
c000fdd0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdd5:	5f                   	pop    edi
c000fdd6:	5d                   	pop    ebp
c000fdd7:	c3                   	ret    

c000fdd8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fddc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fde0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fde6:	c1 e9 0c             	shr    ecx,0xc
c000fde9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdee:	76 25                	jbe    c000fe15 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdf0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdf5:	c1 e8 0c             	shr    eax,0xc
c000fdf8:	8d 50 10             	lea    edx,[eax+0x10]
c000fdfb:	85 c9                	test   ecx,ecx
c000fdfd:	74 15                	je     c000fe14 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdff:	8d 82 60 f4 02 c0    	lea    eax,[edx-0x3ffd0ba0]
c000fe05:	8d 94 11 60 f4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0ba0]
c000fe0c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe0f:	40                   	inc    eax
c000fe10:	39 d0                	cmp    eax,edx
c000fe12:	75 f8                	jne    c000fe0c <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe14:	c3                   	ret    
c000fe15:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe1b:	c1 ea 0c             	shr    edx,0xc
c000fe1e:	eb db                	jmp    c000fdfb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe20 <Phys::setPageState(unsigned long, bool)>:
c000fe20:	56                   	push   esi
c000fe21:	ba 01 00 00 00       	mov    edx,0x1
c000fe26:	53                   	push   ebx
c000fe27:	8b 35 30 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e330
c000fe2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe35:	89 c8                	mov    eax,ecx
c000fe37:	83 e1 07             	and    ecx,0x7
c000fe3a:	c1 e8 03             	shr    eax,0x3
c000fe3d:	d3 e3                	shl    ebx,cl
c000fe3f:	01 c6                	add    esi,eax
c000fe41:	d3 e2                	shl    edx,cl
c000fe43:	f7 d2                	not    edx
c000fe45:	20 16                	and    BYTE PTR [esi],dl
c000fe47:	03 05 30 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e330
c000fe4d:	08 18                	or     BYTE PTR [eax],bl
c000fe4f:	5b                   	pop    ebx
c000fe50:	5e                   	pop    esi
c000fe51:	c3                   	ret    

c000fe52 <Phys::getPageState(unsigned long)>:
c000fe52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe56:	8b 15 30 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e330
c000fe5c:	89 c8                	mov    eax,ecx
c000fe5e:	83 e1 07             	and    ecx,0x7
c000fe61:	c1 e8 03             	shr    eax,0x3
c000fe64:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe68:	d3 f8                	sar    eax,cl
c000fe6a:	83 e0 01             	and    eax,0x1
c000fe6d:	c3                   	ret    

c000fe6e <Phys::freePage(unsigned long)>:
c000fe6e:	53                   	push   ebx
c000fe6f:	83 ec 08             	sub    esp,0x8
c000fe72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe76:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe7c:	76 57                	jbe    c000fed5 <Phys::freePage(unsigned long)+0x67>
c000fe7e:	c1 eb 0c             	shr    ebx,0xc
c000fe81:	53                   	push   ebx
c000fe82:	e8 cb ff ff ff       	call   c000fe52 <Phys::getPageState(unsigned long)>
c000fe87:	5a                   	pop    edx
c000fe88:	84 c0                	test   al,al
c000fe8a:	74 5b                	je     c000fee7 <Phys::freePage(unsigned long)+0x79>
c000fe8c:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c000fe91:	48                   	dec    eax
c000fe92:	a3 50 f4 02 c0       	mov    ds:0xc002f450,eax
c000fe97:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe9a:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe9d:	c1 e0 02             	shl    eax,0x2
c000fea0:	99                   	cdq    
c000fea1:	f7 3d 54 f4 02 c0    	idiv   DWORD PTR ds:0xc002f454
c000fea7:	39 05 4c f4 02 c0    	cmp    DWORD PTR ds:0xc002f44c,eax
c000fead:	75 13                	jne    c000fec2 <Phys::freePage(unsigned long)+0x54>
c000feaf:	83 ec 08             	sub    esp,0x8
c000feb2:	6a 00                	push   0x0
c000feb4:	53                   	push   ebx
c000feb5:	e8 66 ff ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	83 c4 08             	add    esp,0x8
c000fec0:	5b                   	pop    ebx
c000fec1:	c3                   	ret    
c000fec2:	83 ec 0c             	sub    esp,0xc
c000fec5:	a3 4c f4 02 c0       	mov    ds:0xc002f44c,eax
c000feca:	50                   	push   eax
c000fecb:	e8 08 0a 00 00       	call   c00108d8 <VgaText::updateRAMUsageDisplay(int)>
c000fed0:	83 c4 10             	add    esp,0x10
c000fed3:	eb da                	jmp    c000feaf <Phys::freePage(unsigned long)+0x41>
c000fed5:	68 00 10 00 00       	push   0x1000
c000feda:	53                   	push   ebx
c000fedb:	e8 f8 fe ff ff       	call   c000fdd8 <Phys::freeDMA(unsigned long, unsigned long)>
c000fee0:	59                   	pop    ecx
c000fee1:	5b                   	pop    ebx
c000fee2:	83 c4 08             	add    esp,0x8
c000fee5:	5b                   	pop    ebx
c000fee6:	c3                   	ret    
c000fee7:	c7 44 24 10 c6 b0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b0c6
c000feef:	83 c4 08             	add    esp,0x8
c000fef2:	5b                   	pop    ebx
c000fef3:	e9 ad aa 00 00       	jmp    c001a9a5 <Krnl::panic(char const*)>

c000fef8 <Phys::allocatePage()>:
c000fef8:	56                   	push   esi
c000fef9:	53                   	push   ebx
c000fefa:	51                   	push   ecx
c000fefb:	8b 35 44 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f444
c000ff01:	89 f3                	mov    ebx,esi
c000ff03:	eb 0a                	jmp    c000ff0f <Phys::allocatePage()+0x17>
c000ff05:	89 1d 44 f4 02 c0    	mov    DWORD PTR ds:0xc002f444,ebx
c000ff0b:	39 de                	cmp    esi,ebx
c000ff0d:	74 24                	je     c000ff33 <Phys::allocatePage()+0x3b>
c000ff0f:	53                   	push   ebx
c000ff10:	e8 3d ff ff ff       	call   c000fe52 <Phys::getPageState(unsigned long)>
c000ff15:	5a                   	pop    edx
c000ff16:	84 c0                	test   al,al
c000ff18:	74 77                	je     c000ff91 <Phys::allocatePage()+0x99>
c000ff1a:	43                   	inc    ebx
c000ff1b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff21:	75 e2                	jne    c000ff05 <Phys::allocatePage()+0xd>
c000ff23:	31 db                	xor    ebx,ebx
c000ff25:	c7 05 44 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f444,0x0
c000ff2f:	39 de                	cmp    esi,ebx
c000ff31:	75 dc                	jne    c000ff0f <Phys::allocatePage()+0x17>
c000ff33:	83 ec 0c             	sub    esp,0xc
c000ff36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff3b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff3e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff44:	e8 1b 2c 00 00       	call   c0012b64 <VAS::scanForEviction()>
c000ff49:	83 c4 10             	add    esp,0x10
c000ff4c:	85 c0                	test   eax,eax
c000ff4e:	75 76                	jne    c000ffc6 <Phys::allocatePage()+0xce>
c000ff50:	83 ec 0c             	sub    esp,0xc
c000ff53:	68 dc b0 02 c0       	push   0xc002b0dc
c000ff58:	e8 da 2e 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ff5d:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff64:	e8 cc fd ff ff       	call   c000fd35 <Phys::allocateDMA(unsigned long)>
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	85 c0                	test   eax,eax
c000ff6e:	75 56                	jne    c000ffc6 <Phys::allocatePage()+0xce>
c000ff70:	83 ec 0c             	sub    esp,0xc
c000ff73:	68 ed b0 02 c0       	push   0xc002b0ed
c000ff78:	e8 28 aa 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c000ff7d:	83 c4 10             	add    esp,0x10
c000ff80:	8b 1d 44 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f444
c000ff86:	53                   	push   ebx
c000ff87:	e8 c6 fe ff ff       	call   c000fe52 <Phys::getPageState(unsigned long)>
c000ff8c:	5a                   	pop    edx
c000ff8d:	84 c0                	test   al,al
c000ff8f:	75 89                	jne    c000ff1a <Phys::allocatePage()+0x22>
c000ff91:	6a 01                	push   0x1
c000ff93:	53                   	push   ebx
c000ff94:	e8 87 fe ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c000ff99:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c000ff9e:	59                   	pop    ecx
c000ff9f:	40                   	inc    eax
c000ffa0:	5b                   	pop    ebx
c000ffa1:	a3 50 f4 02 c0       	mov    ds:0xc002f450,eax
c000ffa6:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffa9:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffac:	c1 e0 02             	shl    eax,0x2
c000ffaf:	99                   	cdq    
c000ffb0:	f7 3d 54 f4 02 c0    	idiv   DWORD PTR ds:0xc002f454
c000ffb6:	39 05 4c f4 02 c0    	cmp    DWORD PTR ds:0xc002f44c,eax
c000ffbc:	75 0c                	jne    c000ffca <Phys::allocatePage()+0xd2>
c000ffbe:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c000ffc3:	c1 e0 0c             	shl    eax,0xc
c000ffc6:	5a                   	pop    edx
c000ffc7:	5b                   	pop    ebx
c000ffc8:	5e                   	pop    esi
c000ffc9:	c3                   	ret    
c000ffca:	83 ec 0c             	sub    esp,0xc
c000ffcd:	a3 4c f4 02 c0       	mov    ds:0xc002f44c,eax
c000ffd2:	50                   	push   eax
c000ffd3:	e8 00 09 00 00       	call   c00108d8 <VgaText::updateRAMUsageDisplay(int)>
c000ffd8:	83 c4 10             	add    esp,0x10
c000ffdb:	eb e1                	jmp    c000ffbe <Phys::allocatePage()+0xc6>

c000ffdd <Phys::allocateContiguousPages(int)>:
c000ffdd:	57                   	push   edi
c000ffde:	56                   	push   esi
c000ffdf:	53                   	push   ebx
c000ffe0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffe4:	fa                   	cli    
c000ffe5:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c000ffeb:	31 db                	xor    ebx,ebx
c000ffed:	85 db                	test   ebx,ebx
c000ffef:	75 11                	jne    c0010002 <Phys::allocateContiguousPages(int)+0x25>
c000fff1:	e8 02 ff ff ff       	call   c000fef8 <Phys::allocatePage()>
c000fff6:	83 fe 01             	cmp    esi,0x1
c000fff9:	89 c7                	mov    edi,eax
c000fffb:	74 21                	je     c001001e <Phys::allocateContiguousPages(int)+0x41>
c000fffd:	bb 01 00 00 00       	mov    ebx,0x1
c0010002:	e8 f1 fe ff ff       	call   c000fef8 <Phys::allocatePage()>
c0010007:	89 da                	mov    edx,ebx
c0010009:	c1 e2 0c             	shl    edx,0xc
c001000c:	01 fa                	add    edx,edi
c001000e:	39 c2                	cmp    edx,eax
c0010010:	74 20                	je     c0010032 <Phys::allocateContiguousPages(int)+0x55>
c0010012:	bb 01 00 00 00       	mov    ebx,0x1
c0010017:	89 c7                	mov    edi,eax
c0010019:	83 fe 01             	cmp    esi,0x1
c001001c:	75 e4                	jne    c0010002 <Phys::allocateContiguousPages(int)+0x25>
c001001e:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0010023:	48                   	dec    eax
c0010024:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0010029:	75 01                	jne    c001002c <Phys::allocateContiguousPages(int)+0x4f>
c001002b:	fb                   	sti    
c001002c:	89 f8                	mov    eax,edi
c001002e:	5b                   	pop    ebx
c001002f:	5e                   	pop    esi
c0010030:	5f                   	pop    edi
c0010031:	c3                   	ret    
c0010032:	43                   	inc    ebx
c0010033:	39 f3                	cmp    ebx,esi
c0010035:	75 b6                	jne    c000ffed <Phys::allocateContiguousPages(int)+0x10>
c0010037:	eb e5                	jmp    c001001e <Phys::allocateContiguousPages(int)+0x41>

c0010039 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010039:	56                   	push   esi
c001003a:	53                   	push   ebx
c001003b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001003f:	39 1d 48 f4 02 c0    	cmp    DWORD PTR ds:0xc002f448,ebx
c0010045:	73 06                	jae    c001004d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010047:	89 1d 48 f4 02 c0    	mov    DWORD PTR ds:0xc002f448,ebx
c001004d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010051:	c1 eb 0c             	shr    ebx,0xc
c0010054:	c1 e8 0c             	shr    eax,0xc
c0010057:	39 d8                	cmp    eax,ebx
c0010059:	73 13                	jae    c001006e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001005b:	6a 00                	push   0x0
c001005d:	8d 70 01             	lea    esi,[eax+0x1]
c0010060:	50                   	push   eax
c0010061:	e8 ba fd ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c0010066:	5a                   	pop    edx
c0010067:	89 f0                	mov    eax,esi
c0010069:	59                   	pop    ecx
c001006a:	39 f3                	cmp    ebx,esi
c001006c:	75 ed                	jne    c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001006e:	5b                   	pop    ebx
c001006f:	5e                   	pop    esi
c0010070:	c3                   	ret    

c0010071 <Phys::physicalMemorySetup(unsigned int)>:
c0010071:	55                   	push   ebp
c0010072:	57                   	push   edi
c0010073:	56                   	push   esi
c0010074:	53                   	push   ebx
c0010075:	31 db                	xor    ebx,ebx
c0010077:	83 ec 40             	sub    esp,0x40
c001007a:	6a 30                	push   0x30
c001007c:	6a 00                	push   0x0
c001007e:	68 60 f4 02 c0       	push   0xc002f460
c0010083:	e8 c8 06 ff ff       	call   c0000750 <memset>
c0010088:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001008c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010091:	05 00 10 00 00       	add    eax,0x1000
c0010096:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001009a:	83 c4 10             	add    esp,0x10
c001009d:	83 ec 08             	sub    esp,0x8
c00100a0:	6a 01                	push   0x1
c00100a2:	53                   	push   ebx
c00100a3:	43                   	inc    ebx
c00100a4:	e8 77 fd ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c00100a9:	83 c4 10             	add    esp,0x10
c00100ac:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100b2:	75 e9                	jne    c001009d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100b4:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100bb:	66 85 c0             	test   ax,ax
c00100be:	0f 84 8e 01 00 00    	je     c0010252 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100d4:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100dd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100e5:	eb 15                	jmp    c00100fc <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100e7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100eb:	83 c3 18             	add    ebx,0x18
c00100ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100f2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100f6:	0f 84 66 01 00 00    	je     c0010262 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100ff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010102:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010105:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010109:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001010d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001010f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010112:	01 f0                	add    eax,esi
c0010114:	55                   	push   ebp
c0010115:	11 fa                	adc    edx,edi
c0010117:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001011b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001011f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010123:	56                   	push   esi
c0010124:	68 28 b1 02 c0       	push   0xc002b128
c0010129:	e8 09 2d 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001012e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010132:	83 c4 10             	add    esp,0x10
c0010135:	09 f8                	or     eax,edi
c0010137:	0f 85 25 01 00 00    	jne    c0010262 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001013d:	4d                   	dec    ebp
c001013e:	75 a7                	jne    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010140:	ba 00 00 08 00       	mov    edx,0x80000
c0010145:	89 c1                	mov    ecx,eax
c0010147:	39 f2                	cmp    edx,esi
c0010149:	19 f9                	sbb    ecx,edi
c001014b:	0f 82 a7 00 00 00    	jb     c00101f8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010151:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010155:	89 c1                	mov    ecx,eax
c0010157:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001015b:	0f 83 97 00 00 00    	jae    c00101f8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010161:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010166:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001016a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001016e:	39 fa                	cmp    edx,edi
c0010170:	19 e8                	sbb    eax,ebp
c0010172:	0f 82 14 01 00 00    	jb     c001028c <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010178:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001017c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010180:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010186:	ba ff 1f 00 00       	mov    edx,0x1fff
c001018b:	83 d5 ff             	adc    ebp,0xffffffff
c001018e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010192:	31 c0                	xor    eax,eax
c0010194:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010198:	39 fa                	cmp    edx,edi
c001019a:	89 c1                	mov    ecx,eax
c001019c:	19 e9                	sbb    ecx,ebp
c001019e:	0f 83 43 ff ff ff    	jae    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101a4:	be 00 00 08 00       	mov    esi,0x80000
c00101a9:	50                   	push   eax
c00101aa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101ae:	57                   	push   edi
c00101af:	56                   	push   esi
c00101b0:	68 4c b1 02 c0       	push   0xc002b14c
c00101b5:	e8 7d 2c 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00101ba:	5a                   	pop    edx
c00101bb:	59                   	pop    ecx
c00101bc:	57                   	push   edi
c00101bd:	56                   	push   esi
c00101be:	e8 76 fe ff ff       	call   c0010039 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101cb:	83 c4 0c             	add    esp,0xc
c00101ce:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101d2:	03 05 54 f4 02 c0    	add    eax,DWORD PTR ds:0xc002f454
c00101d8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101df:	a3 54 f4 02 c0       	mov    ds:0xc002f454,eax
c00101e4:	52                   	push   edx
c00101e5:	50                   	push   eax
c00101e6:	68 09 b1 02 c0       	push   0xc002b109
c00101eb:	e8 47 2c 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00101f0:	83 c4 10             	add    esp,0x10
c00101f3:	e9 ef fe ff ff       	jmp    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010200:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010204:	39 ea                	cmp    edx,ebp
c0010206:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001020a:	0f 82 d7 fe ff ff    	jb     c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010210:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010215:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010219:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001021d:	0f 83 c4 fe ff ff    	jae    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010223:	39 ee                	cmp    esi,ebp
c0010225:	89 f8                	mov    eax,edi
c0010227:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001022b:	0f 83 78 ff ff ff    	jae    c00101a9 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010235:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010239:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001023d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010241:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010245:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010249:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001024d:	e9 57 ff ff ff       	jmp    c00101a9 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010252:	83 ec 0c             	sub    esp,0xc
c0010255:	68 fb b0 02 c0       	push   0xc002b0fb
c001025a:	e8 46 a7 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c001025f:	83 c4 10             	add    esp,0x10
c0010262:	bb 40 01 00 00       	mov    ebx,0x140
c0010267:	83 ec 08             	sub    esp,0x8
c001026a:	6a 00                	push   0x0
c001026c:	53                   	push   ebx
c001026d:	43                   	inc    ebx
c001026e:	e8 ad fb ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c0010273:	ff 05 54 f4 02 c0    	inc    DWORD PTR ds:0xc002f454
c0010279:	83 c4 10             	add    esp,0x10
c001027c:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010282:	75 e3                	jne    c0010267 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010284:	83 c4 3c             	add    esp,0x3c
c0010287:	5b                   	pop    ebx
c0010288:	5e                   	pop    esi
c0010289:	5f                   	pop    edi
c001028a:	5d                   	pop    ebp
c001028b:	c3                   	ret    
c001028c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010294:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001029c:	e9 d7 fe ff ff       	jmp    c0010178 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102a1:	90                   	nop

c00102a2 <Pipe::isAtty()>:
c00102a2:	31 c0                	xor    eax,eax
c00102a4:	c3                   	ret    
c00102a5:	90                   	nop

c00102a6 <Pipe::~Pipe()>:
c00102a6:	83 ec 0c             	sub    esp,0xc
c00102a9:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c00102ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b2:	89 10                	mov    DWORD PTR [eax],edx
c00102b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	50                   	push   eax
c00102bc:	e8 0f 15 00 00       	call   c00117d0 <UnixFile::~UnixFile()>
c00102c1:	83 c4 10             	add    esp,0x10
c00102c4:	90                   	nop
c00102c5:	83 c4 0c             	add    esp,0xc
c00102c8:	c3                   	ret    
c00102c9:	90                   	nop

c00102ca <Pipe::~Pipe()>:
c00102ca:	83 ec 0c             	sub    esp,0xc
c00102cd:	83 ec 0c             	sub    esp,0xc
c00102d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d4:	e8 cd ff ff ff       	call   c00102a6 <Pipe::~Pipe()>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	83 ec 08             	sub    esp,0x8
c00102df:	6a 20                	push   0x20
c00102e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e5:	e8 6d 2a 00 00       	call   c0012d57 <operator delete(void*, unsigned long)>
c00102ea:	83 c4 10             	add    esp,0x10
c00102ed:	83 c4 0c             	add    esp,0xc
c00102f0:	c3                   	ret    
c00102f1:	90                   	nop

c00102f2 <Pipe::read(unsigned long long, void*, int*)>:
c00102f2:	55                   	push   ebp
c00102f3:	57                   	push   edi
c00102f4:	56                   	push   esi
c00102f5:	53                   	push   ebx
c00102f6:	83 ec 1c             	sub    esp,0x1c
c00102f9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010301:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010305:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010308:	89 c8                	mov    eax,ecx
c001030a:	99                   	cdq    
c001030b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001030f:	74 24                	je     c0010335 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010311:	39 f9                	cmp    ecx,edi
c0010313:	89 d1                	mov    ecx,edx
c0010315:	19 f1                	sbb    ecx,esi
c0010317:	73 1c                	jae    c0010335 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010319:	fa                   	cli    
c001031a:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c0010320:	e8 33 e4 00 00       	call   c001e758 <schedule()>
c0010325:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001032a:	48                   	dec    eax
c001032b:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0010330:	75 d3                	jne    c0010305 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010332:	fb                   	sti    
c0010333:	eb d0                	jmp    c0010305 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010335:	39 f8                	cmp    eax,edi
c0010337:	89 d1                	mov    ecx,edx
c0010339:	89 3c 24             	mov    DWORD PTR [esp],edi
c001033c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010340:	19 f1                	sbb    ecx,esi
c0010342:	73 07                	jae    c001034b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010344:	89 04 24             	mov    DWORD PTR [esp],eax
c0010347:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001034b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001034e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010351:	29 f7                	sub    edi,esi
c0010353:	89 f8                	mov    eax,edi
c0010355:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010359:	99                   	cdq    
c001035a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001035d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010361:	19 d0                	sbb    eax,edx
c0010363:	73 07                	jae    c001036c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0010365:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010368:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001036c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001036f:	89 ea                	mov    edx,ebp
c0010371:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010375:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001037a:	74 0d                	je     c0010389 <Pipe::read(unsigned long long, void*, int*)+0x97>
c001037c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001037f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010383:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010387:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010389:	85 d2                	test   edx,edx
c001038b:	74 11                	je     c001039e <Pipe::read(unsigned long long, void*, int*)+0xac>
c001038d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010391:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010394:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010398:	89 d1                	mov    ecx,edx
c001039a:	89 c7                	mov    edi,eax
c001039c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103a1:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00103a4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103a7:	99                   	cdq    
c00103a8:	89 f7                	mov    edi,esi
c00103aa:	03 04 24             	add    eax,DWORD PTR [esp]
c00103ad:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00103b1:	c1 ff 1f             	sar    edi,0x1f
c00103b4:	57                   	push   edi
c00103b5:	56                   	push   esi
c00103b6:	52                   	push   edx
c00103b7:	50                   	push   eax
c00103b8:	e8 37 74 01 00       	call   c00277f4 <__umoddi3>
c00103bd:	83 c4 10             	add    esp,0x10
c00103c0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103c3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103c8:	75 10                	jne    c00103da <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00103ca:	83 ec 0c             	sub    esp,0xc
c00103cd:	68 75 b1 02 c0       	push   0xc002b175
c00103d2:	e8 ce a5 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103de:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00103e1:	89 10                	mov    DWORD PTR [eax],edx
c00103e3:	83 c4 1c             	add    esp,0x1c
c00103e6:	31 c0                	xor    eax,eax
c00103e8:	5b                   	pop    ebx
c00103e9:	5e                   	pop    esi
c00103ea:	5f                   	pop    edi
c00103eb:	5d                   	pop    ebp
c00103ec:	c3                   	ret    
c00103ed:	90                   	nop

c00103ee <Pipe::write(unsigned long long, void*, int*)>:
c00103ee:	55                   	push   ebp
c00103ef:	57                   	push   edi
c00103f0:	56                   	push   esi
c00103f1:	53                   	push   ebx
c00103f2:	83 ec 1c             	sub    esp,0x1c
c00103f5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103fd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010400:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010404:	89 04 24             	mov    DWORD PTR [esp],eax
c0010407:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001040b:	89 d8                	mov    eax,ebx
c001040d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010410:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010414:	89 d6                	mov    esi,edx
c0010416:	89 d7                	mov    edi,edx
c0010418:	c1 ff 1f             	sar    edi,0x1f
c001041b:	03 34 24             	add    esi,DWORD PTR [esp]
c001041e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010422:	c1 f8 1f             	sar    eax,0x1f
c0010425:	39 f3                	cmp    ebx,esi
c0010427:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001042b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001042f:	19 f8                	sbb    eax,edi
c0010431:	b8 01 00 00 00       	mov    eax,0x1
c0010436:	72 6e                	jb     c00104a6 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010438:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001043b:	01 d0                	add    eax,edx
c001043d:	99                   	cdq    
c001043e:	f7 fb                	idiv   ebx
c0010440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010444:	29 d3                	sub    ebx,edx
c0010446:	89 d7                	mov    edi,edx
c0010448:	89 de                	mov    esi,ebx
c001044a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001044d:	c1 fb 1f             	sar    ebx,0x1f
c0010450:	39 f2                	cmp    edx,esi
c0010452:	19 d8                	sbb    eax,ebx
c0010454:	b8 00 00 00 00       	mov    eax,0x0
c0010459:	72 04                	jb     c001045f <Pipe::write(unsigned long long, void*, int*)+0x71>
c001045b:	89 d0                	mov    eax,edx
c001045d:	29 f0                	sub    eax,esi
c001045f:	89 d3                	mov    ebx,edx
c0010461:	29 c3                	sub    ebx,eax
c0010463:	74 0b                	je     c0010470 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010465:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010468:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001046c:	89 d9                	mov    ecx,ebx
c001046e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010470:	85 c0                	test   eax,eax
c0010472:	74 0d                	je     c0010481 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010474:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010478:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001047b:	89 de                	mov    esi,ebx
c001047d:	89 c1                	mov    ecx,eax
c001047f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010481:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010484:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010489:	75 10                	jne    c001049b <Pipe::write(unsigned long long, void*, int*)+0xad>
c001048b:	83 ec 0c             	sub    esp,0xc
c001048e:	68 91 b1 02 c0       	push   0xc002b191
c0010493:	e8 0d a5 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0010498:	83 c4 10             	add    esp,0x10
c001049b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001049f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00104a2:	89 08                	mov    DWORD PTR [eax],ecx
c00104a4:	31 c0                	xor    eax,eax
c00104a6:	83 c4 1c             	add    esp,0x1c
c00104a9:	5b                   	pop    ebx
c00104aa:	5e                   	pop    esi
c00104ab:	5f                   	pop    edi
c00104ac:	5d                   	pop    ebp
c00104ad:	c3                   	ret    

c00104ae <Pipe::Pipe(int)>:
c00104ae:	83 ec 0c             	sub    esp,0xc
c00104b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b5:	83 ec 08             	sub    esp,0x8
c00104b8:	6a 00                	push   0x0
c00104ba:	50                   	push   eax
c00104bb:	e8 2e 11 00 00       	call   c00115ee <UnixFile::UnixFile(int)>
c00104c0:	83 c4 10             	add    esp,0x10
c00104c3:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c00104c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cc:	89 10                	mov    DWORD PTR [eax],edx
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dd:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104f3:	83 ec 0c             	sub    esp,0xc
c00104f6:	50                   	push   eax
c00104f7:	e8 90 f3 ff ff       	call   c000f88c <malloc>
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	89 c2                	mov    edx,eax
c0010501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010505:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010510:	90                   	nop
c0010511:	83 c4 0c             	add    esp,0xc
c0010514:	c3                   	ret    
c0010515:	90                   	nop

c0010516 <VgaText::isAtty()>:
c0010516:	b0 01                	mov    al,0x1
c0010518:	c3                   	ret    
c0010519:	90                   	nop

c001051a <VgaText::~VgaText()>:
c001051a:	83 ec 0c             	sub    esp,0xc
c001051d:	ba 74 b2 02 c0       	mov    edx,0xc002b274
c0010522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010526:	89 10                	mov    DWORD PTR [eax],edx
c0010528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052c:	83 ec 0c             	sub    esp,0xc
c001052f:	50                   	push   eax
c0010530:	e8 9b 12 00 00       	call   c00117d0 <UnixFile::~UnixFile()>
c0010535:	83 c4 10             	add    esp,0x10
c0010538:	90                   	nop
c0010539:	83 c4 0c             	add    esp,0xc
c001053c:	c3                   	ret    
c001053d:	90                   	nop

c001053e <VgaText::~VgaText()>:
c001053e:	83 ec 0c             	sub    esp,0xc
c0010541:	83 ec 0c             	sub    esp,0xc
c0010544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010548:	e8 cd ff ff ff       	call   c001051a <VgaText::~VgaText()>
c001054d:	83 c4 10             	add    esp,0x10
c0010550:	83 ec 08             	sub    esp,0x8
c0010553:	68 c4 02 00 00       	push   0x2c4
c0010558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001055c:	e8 f6 27 00 00       	call   c0012d57 <operator delete(void*, unsigned long)>
c0010561:	83 c4 10             	add    esp,0x10
c0010564:	83 c4 0c             	add    esp,0xc
c0010567:	c3                   	ret    

c0010568 <VgaText::read(unsigned long long, void*, int*)>:
c0010568:	83 ec 10             	sub    esp,0x10
c001056b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001056f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010573:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010577:	e8 96 5d 00 00       	call   c0016312 <readKeyboard(VgaText*, char*, unsigned long)>
c001057c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010580:	89 02                	mov    DWORD PTR [edx],eax
c0010582:	31 c0                	xor    eax,eax
c0010584:	83 c4 1c             	add    esp,0x1c
c0010587:	c3                   	ret    

c0010588 <setTerminalScrollLock(bool)>:
c0010588:	c3                   	ret    

c0010589 <addToTerminalCycle(VgaText*)>:
c0010589:	8b 15 e0 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4e0
c001058f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010593:	85 d2                	test   edx,edx
c0010595:	75 09                	jne    c00105a0 <addToTerminalCycle(VgaText*)+0x17>
c0010597:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001059a:	a3 e0 f4 02 c0       	mov    ds:0xc002f4e0,eax
c001059f:	c3                   	ret    
c00105a0:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105a3:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105a6:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105a9:	c3                   	ret    

c00105aa <installVgaTextImplementation()>:
c00105aa:	83 ec 10             	sub    esp,0x10
c00105ad:	6a 20                	push   0x20
c00105af:	6a 00                	push   0x0
c00105b1:	68 c0 f4 02 c0       	push   0xc002f4c0
c00105b6:	e8 95 01 ff ff       	call   c0000750 <memset>
c00105bb:	83 c4 1c             	add    esp,0x1c
c00105be:	c3                   	ret    

c00105bf <scrollTerminalScrollLock(int)>:
c00105bf:	c3                   	ret    

c00105c0 <VgaText::load()>:
c00105c0:	53                   	push   ebx
c00105c1:	31 c0                	xor    eax,eax
c00105c3:	83 ec 58             	sub    esp,0x58
c00105c6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105ca:	89 e2                	mov    edx,esp
c00105cc:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105d0:	40                   	inc    eax
c00105d1:	83 f8 50             	cmp    eax,0x50
c00105d4:	75 f6                	jne    c00105cc <VgaText::load()+0xc>
c00105d6:	31 c0                	xor    eax,eax
c00105d8:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00105df:	84 c9                	test   cl,cl
c00105e1:	74 06                	je     c00105e9 <VgaText::load()+0x29>
c00105e3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105e6:	40                   	inc    eax
c00105e7:	eb ef                	jmp    c00105d8 <VgaText::load()+0x18>
c00105e9:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105ec:	85 c0                	test   eax,eax
c00105ee:	74 09                	je     c00105f9 <VgaText::load()+0x39>
c00105f0:	51                   	push   ecx
c00105f1:	51                   	push   ecx
c00105f2:	52                   	push   edx
c00105f3:	53                   	push   ebx
c00105f4:	ff d0                	call   eax
c00105f6:	83 c4 10             	add    esp,0x10
c00105f9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00105fc:	85 c0                	test   eax,eax
c00105fe:	74 09                	je     c0010609 <VgaText::load()+0x49>
c0010600:	83 ec 0c             	sub    esp,0xc
c0010603:	53                   	push   ebx
c0010604:	ff d0                	call   eax
c0010606:	83 c4 10             	add    esp,0x10
c0010609:	83 c4 58             	add    esp,0x58
c001060c:	5b                   	pop    ebx
c001060d:	c3                   	ret    

c001060e <VgaText::updateCursor()>:
c001060e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010612:	39 05 e4 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4e4,eax
c0010618:	75 09                	jne    c0010623 <VgaText::updateCursor()+0x15>
c001061a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001061d:	85 c0                	test   eax,eax
c001061f:	74 02                	je     c0010623 <VgaText::updateCursor()+0x15>
c0010621:	ff e0                	jmp    eax
c0010623:	c3                   	ret    

c0010624 <VgaText::showCursor(bool)>:
c0010624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001062c:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c001062f:	c3                   	ret    

c0010630 <VgaText::disableBlink(bool)>:
c0010630:	56                   	push   esi
c0010631:	53                   	push   ebx
c0010632:	51                   	push   ecx
c0010633:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010637:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001063b:	39 1d e4 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4e4,ebx
c0010641:	75 15                	jne    c0010658 <VgaText::disableBlink(bool)+0x28>
c0010643:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010646:	85 c0                	test   eax,eax
c0010648:	74 0e                	je     c0010658 <VgaText::disableBlink(bool)+0x28>
c001064a:	89 f1                	mov    ecx,esi
c001064c:	52                   	push   edx
c001064d:	52                   	push   edx
c001064e:	0f b6 d1             	movzx  edx,cl
c0010651:	52                   	push   edx
c0010652:	53                   	push   ebx
c0010653:	ff d0                	call   eax
c0010655:	83 c4 10             	add    esp,0x10
c0010658:	89 f0                	mov    eax,esi
c001065a:	83 f0 01             	xor    eax,0x1
c001065d:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010660:	58                   	pop    eax
c0010661:	5b                   	pop    ebx
c0010662:	5e                   	pop    esi
c0010663:	c3                   	ret    

c0010664 <VgaText::doANSI_SGR(int)>:
c0010664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066c:	85 d2                	test   edx,edx
c001066e:	75 0b                	jne    c001067b <VgaText::doANSI_SGR(int)+0x17>
c0010670:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010673:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010676:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010679:	eb 59                	jmp    c00106d4 <VgaText::doANSI_SGR(int)+0x70>
c001067b:	83 fa 07             	cmp    edx,0x7
c001067e:	75 0b                	jne    c001068b <VgaText::doANSI_SGR(int)+0x27>
c0010680:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010683:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010686:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010689:	eb 49                	jmp    c00106d4 <VgaText::doANSI_SGR(int)+0x70>
c001068b:	83 fa 1b             	cmp    edx,0x1b
c001068e:	74 e0                	je     c0010670 <VgaText::doANSI_SGR(int)+0xc>
c0010690:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010693:	83 f9 07             	cmp    ecx,0x7
c0010696:	77 09                	ja     c00106a1 <VgaText::doANSI_SGR(int)+0x3d>
c0010698:	8b 14 8d 60 e3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1ca0]
c001069f:	eb 20                	jmp    c00106c1 <VgaText::doANSI_SGR(int)+0x5d>
c00106a1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106a4:	83 f9 07             	cmp    ecx,0x7
c00106a7:	77 09                	ja     c00106b2 <VgaText::doANSI_SGR(int)+0x4e>
c00106a9:	8b 14 8d 60 e3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1ca0]
c00106b0:	eb 22                	jmp    c00106d4 <VgaText::doANSI_SGR(int)+0x70>
c00106b2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106b5:	83 f9 07             	cmp    ecx,0x7
c00106b8:	77 0b                	ja     c00106c5 <VgaText::doANSI_SGR(int)+0x61>
c00106ba:	8b 14 95 18 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1de8]
c00106c1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106c4:	c3                   	ret    
c00106c5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106c8:	83 f9 07             	cmp    ecx,0x7
c00106cb:	77 0a                	ja     c00106d7 <VgaText::doANSI_SGR(int)+0x73>
c00106cd:	8b 14 95 f0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e10]
c00106d4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106d7:	c3                   	ret    

c00106d8 <VgaText::setDefaultBgColour(VgaColour)>:
c00106d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106e0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00106e3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106e6:	c3                   	ret    
c00106e7:	90                   	nop

c00106e8 <VgaText::setDefaultFgColour(VgaColour)>:
c00106e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106f3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106f6:	c3                   	ret    
c00106f7:	90                   	nop

c00106f8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00106f8:	53                   	push   ebx
c00106f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010701:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010705:	51                   	push   ecx
c0010706:	e8 cd ff ff ff       	call   c00106d8 <VgaText::setDefaultBgColour(VgaColour)>
c001070b:	58                   	pop    eax
c001070c:	5a                   	pop    edx
c001070d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010711:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010715:	5b                   	pop    ebx
c0010716:	eb d0                	jmp    c00106e8 <VgaText::setDefaultFgColour(VgaColour)>

c0010718 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010718:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001071c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010721:	83 e0 0f             	and    eax,0xf
c0010724:	c1 e2 04             	shl    edx,0x4
c0010727:	09 d0                	or     eax,edx
c0010729:	c3                   	ret    

c001072a <VgaText::scrollScreen()>:
c001072a:	55                   	push   ebp
c001072b:	b9 01 00 00 00       	mov    ecx,0x1
c0010730:	57                   	push   edi
c0010731:	56                   	push   esi
c0010732:	53                   	push   ebx
c0010733:	83 ec 0c             	sub    esp,0xc
c0010736:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010740:	31 ff                	xor    edi,edi
c0010742:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010745:	83 f9 17             	cmp    ecx,0x17
c0010748:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001074b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010752:	75 27                	jne    c001077b <VgaText::scrollScreen()+0x51>
c0010754:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010757:	01 f5                	add    ebp,esi
c0010759:	f7 c7 01 00 00 00    	test   edi,0x1
c001075f:	74 16                	je     c0010777 <VgaText::scrollScreen()+0x4d>
c0010761:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010765:	50                   	push   eax
c0010766:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001076a:	50                   	push   eax
c001076b:	e8 a8 ff ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c0010770:	5a                   	pop    edx
c0010771:	5a                   	pop    edx
c0010772:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010775:	eb 04                	jmp    c001077b <VgaText::scrollScreen()+0x51>
c0010777:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001077b:	47                   	inc    edi
c001077c:	46                   	inc    esi
c001077d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010783:	75 bd                	jne    c0010742 <VgaText::scrollScreen()+0x18>
c0010785:	41                   	inc    ecx
c0010786:	83 f9 18             	cmp    ecx,0x18
c0010789:	75 af                	jne    c001073a <VgaText::scrollScreen()+0x10>
c001078b:	39 1d e4 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4e4,ebx
c0010791:	75 1b                	jne    c00107ae <VgaText::scrollScreen()+0x84>
c0010793:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010797:	74 05                	je     c001079e <VgaText::scrollScreen()+0x74>
c0010799:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001079c:	eb 10                	jmp    c00107ae <VgaText::scrollScreen()+0x84>
c001079e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107a1:	85 c0                	test   eax,eax
c00107a3:	74 09                	je     c00107ae <VgaText::scrollScreen()+0x84>
c00107a5:	83 ec 0c             	sub    esp,0xc
c00107a8:	53                   	push   ebx
c00107a9:	ff d0                	call   eax
c00107ab:	83 c4 10             	add    esp,0x10
c00107ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107b2:	83 c4 0c             	add    esp,0xc
c00107b5:	5b                   	pop    ebx
c00107b6:	5e                   	pop    esi
c00107b7:	5f                   	pop    edi
c00107b8:	5d                   	pop    ebp
c00107b9:	e9 50 fe ff ff       	jmp    c001060e <VgaText::updateCursor()>

c00107be <VgaText::combineCharAndColour(char, unsigned char)>:
c00107be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107c3:	c1 e0 08             	shl    eax,0x8
c00107c6:	89 c2                	mov    edx,eax
c00107c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107cd:	09 d0                	or     eax,edx
c00107cf:	c3                   	ret    

c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107d0:	56                   	push   esi
c00107d1:	53                   	push   ebx
c00107d2:	51                   	push   ecx
c00107d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107dc:	50                   	push   eax
c00107dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e2:	50                   	push   eax
c00107e3:	e8 30 ff ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c00107e8:	5b                   	pop    ebx
c00107e9:	0f b6 c0             	movzx  eax,al
c00107ec:	5e                   	pop    esi
c00107ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107f2:	50                   	push   eax
c00107f3:	53                   	push   ebx
c00107f4:	e8 c5 ff ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00107f9:	5a                   	pop    edx
c00107fa:	5e                   	pop    esi
c00107fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00107fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010804:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010808:	0f b7 d2             	movzx  edx,dx
c001080b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001080f:	39 0d e4 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4e4,ecx
c0010815:	75 10                	jne    c0010827 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010817:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001081a:	85 c0                	test   eax,eax
c001081c:	74 09                	je     c0010827 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001081e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010822:	5a                   	pop    edx
c0010823:	5b                   	pop    ebx
c0010824:	5e                   	pop    esi
c0010825:	ff e0                	jmp    eax
c0010827:	58                   	pop    eax
c0010828:	5b                   	pop    ebx
c0010829:	5e                   	pop    esi
c001082a:	c3                   	ret    
c001082b:	90                   	nop

c001082c <VgaText::getCursorX()>:
c001082c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010830:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010833:	c3                   	ret    

c0010834 <VgaText::getCursorY()>:
c0010834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010838:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001083b:	c3                   	ret    

c001083c <VgaText::setCursor(int, int)>:
c001083c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010840:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010844:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010847:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001084b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001084e:	e9 bb fd ff ff       	jmp    c001060e <VgaText::updateCursor()>
c0010853:	90                   	nop

c0010854 <VgaText::setCursorX(int)>:
c0010854:	83 ec 10             	sub    esp,0x10
c0010857:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001085b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001085e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010862:	50                   	push   eax
c0010863:	e8 d4 ff ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010868:	83 c4 1c             	add    esp,0x1c
c001086b:	c3                   	ret    

c001086c <VgaText::setCursorY(int)>:
c001086c:	83 ec 10             	sub    esp,0x10
c001086f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010873:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010877:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001087a:	50                   	push   eax
c001087b:	e8 bc ff ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010880:	83 c4 1c             	add    esp,0x1c
c0010883:	c3                   	ret    

c0010884 <VgaText::incrementCursor(bool)>:
c0010884:	56                   	push   esi
c0010885:	53                   	push   ebx
c0010886:	51                   	push   ecx
c0010887:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001088b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001088f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010892:	40                   	inc    eax
c0010893:	83 f8 50             	cmp    eax,0x50
c0010896:	74 05                	je     c001089d <VgaText::incrementCursor(bool)+0x19>
c0010898:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001089b:	eb 24                	jmp    c00108c1 <VgaText::incrementCursor(bool)+0x3d>
c001089d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108a7:	8d 50 01             	lea    edx,[eax+0x1]
c00108aa:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108ad:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108b0:	75 0f                	jne    c00108c1 <VgaText::incrementCursor(bool)+0x3d>
c00108b2:	83 ec 0c             	sub    esp,0xc
c00108b5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108b8:	53                   	push   ebx
c00108b9:	e8 6c fe ff ff       	call   c001072a <VgaText::scrollScreen()>
c00108be:	83 c4 10             	add    esp,0x10
c00108c1:	89 f0                	mov    eax,esi
c00108c3:	84 c0                	test   al,al
c00108c5:	74 0c                	je     c00108d3 <VgaText::incrementCursor(bool)+0x4f>
c00108c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108cb:	5a                   	pop    edx
c00108cc:	5b                   	pop    ebx
c00108cd:	5e                   	pop    esi
c00108ce:	e9 3b fd ff ff       	jmp    c001060e <VgaText::updateCursor()>
c00108d3:	58                   	pop    eax
c00108d4:	5b                   	pop    ebx
c00108d5:	5e                   	pop    esi
c00108d6:	c3                   	ret    
c00108d7:	90                   	nop

c00108d8 <VgaText::updateRAMUsageDisplay(int)>:
c00108d8:	56                   	push   esi
c00108d9:	8b 35 40 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e340
c00108df:	53                   	push   ebx
c00108e0:	bb 0a 00 00 00       	mov    ebx,0xa
c00108e5:	6a 0f                	push   0xf
c00108e7:	6a 00                	push   0x0
c00108e9:	e8 2a fe ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c00108ee:	5a                   	pop    edx
c00108ef:	59                   	pop    ecx
c00108f0:	0f b6 c8             	movzx  ecx,al
c00108f3:	51                   	push   ecx
c00108f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f8:	99                   	cdq    
c00108f9:	f7 fb                	idiv   ebx
c00108fb:	89 d3                	mov    ebx,edx
c00108fd:	83 c0 30             	add    eax,0x30
c0010900:	83 c3 30             	add    ebx,0x30
c0010903:	0f be c0             	movsx  eax,al
c0010906:	0f b6 db             	movzx  ebx,bl
c0010909:	50                   	push   eax
c001090a:	e8 af fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c001090f:	5a                   	pop    edx
c0010910:	5a                   	pop    edx
c0010911:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010918:	51                   	push   ecx
c0010919:	53                   	push   ebx
c001091a:	e8 9f fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c001091f:	5b                   	pop    ebx
c0010920:	5a                   	pop    edx
c0010921:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010928:	51                   	push   ecx
c0010929:	6a 25                	push   0x25
c001092b:	e8 8e fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010930:	59                   	pop    ecx
c0010931:	5b                   	pop    ebx
c0010932:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010939:	5b                   	pop    ebx
c001093a:	5e                   	pop    esi
c001093b:	c3                   	ret    

c001093c <VgaText::updateDiskUsage()>:
c001093c:	55                   	push   ebp
c001093d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010942:	57                   	push   edi
c0010943:	8b 3d 40 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e340
c0010949:	56                   	push   esi
c001094a:	53                   	push   ebx
c001094b:	6a 0f                	push   0xf
c001094d:	6a 00                	push   0x0
c001094f:	e8 c4 fd ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c0010954:	5a                   	pop    edx
c0010955:	0f b6 d8             	movzx  ebx,al
c0010958:	59                   	pop    ecx
c0010959:	8b 35 78 37 03 c0    	mov    esi,DWORD PTR ds:0xc0033778
c001095f:	53                   	push   ebx
c0010960:	b9 0a 00 00 00       	mov    ecx,0xa
c0010965:	89 f0                	mov    eax,esi
c0010967:	99                   	cdq    
c0010968:	f7 fd                	idiv   ebp
c001096a:	99                   	cdq    
c001096b:	f7 f9                	idiv   ecx
c001096d:	8d 42 30             	lea    eax,[edx+0x30]
c0010970:	0f b6 c0             	movzx  eax,al
c0010973:	50                   	push   eax
c0010974:	e8 45 fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010979:	5d                   	pop    ebp
c001097a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001097f:	5a                   	pop    edx
c0010980:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010984:	53                   	push   ebx
c0010985:	89 f0                	mov    eax,esi
c0010987:	99                   	cdq    
c0010988:	f7 fd                	idiv   ebp
c001098a:	99                   	cdq    
c001098b:	f7 f9                	idiv   ecx
c001098d:	8d 42 30             	lea    eax,[edx+0x30]
c0010990:	0f b6 c0             	movzx  eax,al
c0010993:	50                   	push   eax
c0010994:	e8 25 fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010999:	5d                   	pop    ebp
c001099a:	bd 64 00 00 00       	mov    ebp,0x64
c001099f:	5a                   	pop    edx
c00109a0:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109a7:	53                   	push   ebx
c00109a8:	89 f0                	mov    eax,esi
c00109aa:	99                   	cdq    
c00109ab:	f7 fd                	idiv   ebp
c00109ad:	99                   	cdq    
c00109ae:	f7 f9                	idiv   ecx
c00109b0:	8d 42 30             	lea    eax,[edx+0x30]
c00109b3:	0f b6 c0             	movzx  eax,al
c00109b6:	50                   	push   eax
c00109b7:	e8 02 fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00109bc:	5d                   	pop    ebp
c00109bd:	5a                   	pop    edx
c00109be:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109c5:	53                   	push   ebx
c00109c6:	89 f0                	mov    eax,esi
c00109c8:	99                   	cdq    
c00109c9:	f7 f9                	idiv   ecx
c00109cb:	89 d6                	mov    esi,edx
c00109cd:	99                   	cdq    
c00109ce:	f7 f9                	idiv   ecx
c00109d0:	8d 42 30             	lea    eax,[edx+0x30]
c00109d3:	0f b6 c0             	movzx  eax,al
c00109d6:	50                   	push   eax
c00109d7:	e8 e2 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00109dc:	5d                   	pop    ebp
c00109dd:	5a                   	pop    edx
c00109de:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109e5:	53                   	push   ebx
c00109e6:	8d 46 30             	lea    eax,[esi+0x30]
c00109e9:	0f b6 f0             	movzx  esi,al
c00109ec:	56                   	push   esi
c00109ed:	e8 cc fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00109f2:	5e                   	pop    esi
c00109f3:	8b 35 74 37 03 c0    	mov    esi,DWORD PTR ds:0xc0033774
c00109f9:	5d                   	pop    ebp
c00109fa:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a01:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a06:	53                   	push   ebx
c0010a07:	89 f0                	mov    eax,esi
c0010a09:	99                   	cdq    
c0010a0a:	f7 fd                	idiv   ebp
c0010a0c:	99                   	cdq    
c0010a0d:	f7 f9                	idiv   ecx
c0010a0f:	8d 42 30             	lea    eax,[edx+0x30]
c0010a12:	0f b6 c0             	movzx  eax,al
c0010a15:	50                   	push   eax
c0010a16:	e8 a3 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1b:	5a                   	pop    edx
c0010a1c:	5d                   	pop    ebp
c0010a1d:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a24:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a29:	53                   	push   ebx
c0010a2a:	89 f0                	mov    eax,esi
c0010a2c:	99                   	cdq    
c0010a2d:	f7 fd                	idiv   ebp
c0010a2f:	99                   	cdq    
c0010a30:	f7 f9                	idiv   ecx
c0010a32:	8d 42 30             	lea    eax,[edx+0x30]
c0010a35:	0f b6 c0             	movzx  eax,al
c0010a38:	50                   	push   eax
c0010a39:	e8 80 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3e:	5a                   	pop    edx
c0010a3f:	5d                   	pop    ebp
c0010a40:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a47:	bd 64 00 00 00       	mov    ebp,0x64
c0010a4c:	53                   	push   ebx
c0010a4d:	89 f0                	mov    eax,esi
c0010a4f:	99                   	cdq    
c0010a50:	f7 fd                	idiv   ebp
c0010a52:	99                   	cdq    
c0010a53:	f7 f9                	idiv   ecx
c0010a55:	83 c2 30             	add    edx,0x30
c0010a58:	0f b6 d2             	movzx  edx,dl
c0010a5b:	52                   	push   edx
c0010a5c:	e8 5d fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a61:	5a                   	pop    edx
c0010a62:	5d                   	pop    ebp
c0010a63:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a6a:	53                   	push   ebx
c0010a6b:	89 f0                	mov    eax,esi
c0010a6d:	99                   	cdq    
c0010a6e:	f7 f9                	idiv   ecx
c0010a70:	89 d6                	mov    esi,edx
c0010a72:	99                   	cdq    
c0010a73:	f7 f9                	idiv   ecx
c0010a75:	8d 42 30             	lea    eax,[edx+0x30]
c0010a78:	0f b6 c0             	movzx  eax,al
c0010a7b:	50                   	push   eax
c0010a7c:	e8 3d fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a81:	5a                   	pop    edx
c0010a82:	59                   	pop    ecx
c0010a83:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a8a:	53                   	push   ebx
c0010a8b:	8d 46 30             	lea    eax,[esi+0x30]
c0010a8e:	0f b6 f0             	movzx  esi,al
c0010a91:	56                   	push   esi
c0010a92:	e8 27 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a97:	5b                   	pop    ebx
c0010a98:	5e                   	pop    esi
c0010a99:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010aa0:	5b                   	pop    ebx
c0010aa1:	5e                   	pop    esi
c0010aa2:	5f                   	pop    edi
c0010aa3:	5d                   	pop    ebp
c0010aa4:	c3                   	ret    
c0010aa5:	90                   	nop

c0010aa6 <VgaText::updateTitle()>:
c0010aa6:	53                   	push   ebx
c0010aa7:	31 c0                	xor    eax,eax
c0010aa9:	83 ec 58             	sub    esp,0x58
c0010aac:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010ab0:	89 e1                	mov    ecx,esp
c0010ab2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010ab6:	40                   	inc    eax
c0010ab7:	83 f8 50             	cmp    eax,0x50
c0010aba:	75 f6                	jne    c0010ab2 <VgaText::updateTitle()+0xc>
c0010abc:	31 c0                	xor    eax,eax
c0010abe:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010ac5:	84 db                	test   bl,bl
c0010ac7:	74 06                	je     c0010acf <VgaText::updateTitle()+0x29>
c0010ac9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010acc:	40                   	inc    eax
c0010acd:	eb ef                	jmp    c0010abe <VgaText::updateTitle()+0x18>
c0010acf:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010ad2:	85 c0                	test   eax,eax
c0010ad4:	74 09                	je     c0010adf <VgaText::updateTitle()+0x39>
c0010ad6:	53                   	push   ebx
c0010ad7:	53                   	push   ebx
c0010ad8:	51                   	push   ecx
c0010ad9:	52                   	push   edx
c0010ada:	ff d0                	call   eax
c0010adc:	83 c4 10             	add    esp,0x10
c0010adf:	e8 58 fe ff ff       	call   c001093c <VgaText::updateDiskUsage()>
c0010ae4:	83 c4 58             	add    esp,0x58
c0010ae7:	5b                   	pop    ebx
c0010ae8:	c3                   	ret    
c0010ae9:	90                   	nop

c0010aea <VgaText::setTitleTextColour(VgaColour)>:
c0010aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010af2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010af5:	eb af                	jmp    c0010aa6 <VgaText::updateTitle()>
c0010af7:	90                   	nop

c0010af8 <VgaText::setTitleColour(VgaColour)>:
c0010af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010afc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b00:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b03:	eb a1                	jmp    c0010aa6 <VgaText::updateTitle()>
c0010b05:	90                   	nop

c0010b06 <VgaText::setTitle(char*)>:
c0010b06:	53                   	push   ebx
c0010b07:	83 ec 10             	sub    esp,0x10
c0010b0a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b12:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b18:	50                   	push   eax
c0010b19:	e8 ee fc fe ff       	call   c000080c <strcpy>
c0010b1e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b22:	83 c4 18             	add    esp,0x18
c0010b25:	5b                   	pop    ebx
c0010b26:	e9 7b ff ff ff       	jmp    c0010aa6 <VgaText::updateTitle()>
c0010b2b:	90                   	nop

c0010b2c <VgaText::decrementCursor(bool)>:
c0010b2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b34:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b37:	85 c0                	test   eax,eax
c0010b39:	74 04                	je     c0010b3f <VgaText::decrementCursor(bool)+0x13>
c0010b3b:	48                   	dec    eax
c0010b3c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b3f:	84 c9                	test   cl,cl
c0010b41:	74 09                	je     c0010b4c <VgaText::decrementCursor(bool)+0x20>
c0010b43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b47:	e9 c2 fa ff ff       	jmp    c001060e <VgaText::updateCursor()>
c0010b4c:	c3                   	ret    
c0010b4d:	90                   	nop

c0010b4e <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b4e:	53                   	push   ebx
c0010b4f:	83 ec 08             	sub    esp,0x8
c0010b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b5e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b62:	3c 07                	cmp    al,0x7
c0010b64:	75 2a                	jne    c0010b90 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b66:	a1 98 f5 02 c0       	mov    eax,ds:0xc002f598
c0010b6b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b73:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b7b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b87:	83 c4 08             	add    esp,0x8
c0010b8a:	5b                   	pop    ebx
c0010b8b:	e9 b4 30 00 00       	jmp    c0013c44 <Buzzer::beep(int, int, bool)>
c0010b90:	3c 0d                	cmp    al,0xd
c0010b92:	75 09                	jne    c0010b9d <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010b94:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b9b:	eb 2c                	jmp    c0010bc9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010b9d:	3c 0a                	cmp    al,0xa
c0010b9f:	75 31                	jne    c0010bd2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010ba1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010ba4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bab:	8d 50 01             	lea    edx,[eax+0x1]
c0010bae:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bb1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010bb4:	75 0f                	jne    c0010bc5 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010bb6:	83 ec 0c             	sub    esp,0xc
c0010bb9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010bbc:	53                   	push   ebx
c0010bbd:	e8 68 fb ff ff       	call   c001072a <VgaText::scrollScreen()>
c0010bc2:	83 c4 10             	add    esp,0x10
c0010bc5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010bc9:	83 c4 08             	add    esp,0x8
c0010bcc:	5b                   	pop    ebx
c0010bcd:	e9 3c fa ff ff       	jmp    c001060e <VgaText::updateCursor()>
c0010bd2:	3c 08                	cmp    al,0x8
c0010bd4:	75 25                	jne    c0010bfb <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010bd6:	50                   	push   eax
c0010bd7:	50                   	push   eax
c0010bd8:	6a 01                	push   0x1
c0010bda:	53                   	push   ebx
c0010bdb:	e8 4c ff ff ff       	call   c0010b2c <VgaText::decrementCursor(bool)>
c0010be0:	5a                   	pop    edx
c0010be1:	59                   	pop    ecx
c0010be2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010be5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010be8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010beb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010bee:	6a 20                	push   0x20
c0010bf0:	53                   	push   ebx
c0010bf1:	e8 da fb ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bf6:	83 c4 28             	add    esp,0x28
c0010bf9:	5b                   	pop    ebx
c0010bfa:	c3                   	ret    
c0010bfb:	83 ec 08             	sub    esp,0x8
c0010bfe:	0f be c0             	movsx  eax,al
c0010c01:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c04:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c07:	51                   	push   ecx
c0010c08:	52                   	push   edx
c0010c09:	50                   	push   eax
c0010c0a:	53                   	push   ebx
c0010c0b:	e8 c0 fb ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c10:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c14:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c1c:	83 c4 28             	add    esp,0x28
c0010c1f:	5b                   	pop    ebx
c0010c20:	e9 5f fc ff ff       	jmp    c0010884 <VgaText::incrementCursor(bool)>
c0010c25:	90                   	nop

c0010c26 <VgaText::isShowingCursor()>:
c0010c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c2a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c2d:	c3                   	ret    

c0010c2e <VgaText::isBlinkDisabled()>:
c0010c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c32:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c35:	83 f0 01             	xor    eax,0x1
c0010c38:	c3                   	ret    
c0010c39:	90                   	nop

c0010c3a <VgaText::setCursorHeight(int)>:
c0010c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c42:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c45:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c4d:	e9 d2 f9 ff ff       	jmp    c0010624 <VgaText::showCursor(bool)>

c0010c52 <VgaText::getCursorHeight()>:
c0010c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c56:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c59:	c3                   	ret    

c0010c5a <setActiveTerminal(VgaText*)>:
c0010c5a:	53                   	push   ebx
c0010c5b:	83 ec 08             	sub    esp,0x8
c0010c5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c62:	85 db                	test   ebx,ebx
c0010c64:	75 11                	jne    c0010c77 <setActiveTerminal(VgaText*)+0x1d>
c0010c66:	c7 44 24 10 cc b1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b1cc
c0010c6e:	83 c4 08             	add    esp,0x8
c0010c71:	5b                   	pop    ebx
c0010c72:	e9 2e 9d 00 00       	jmp    c001a9a5 <Krnl::panic(char const*)>
c0010c77:	50                   	push   eax
c0010c78:	50                   	push   eax
c0010c79:	53                   	push   ebx
c0010c7a:	68 da b1 02 c0       	push   0xc002b1da
c0010c7f:	e8 b3 21 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0010c84:	a1 e4 f4 02 c0       	mov    eax,ds:0xc002f4e4
c0010c89:	83 c4 10             	add    esp,0x10
c0010c8c:	85 c0                	test   eax,eax
c0010c8e:	74 0c                	je     c0010c9c <setActiveTerminal(VgaText*)+0x42>
c0010c90:	83 ec 0c             	sub    esp,0xc
c0010c93:	50                   	push   eax
c0010c94:	e8 75 f9 ff ff       	call   c001060e <VgaText::updateCursor()>
c0010c99:	83 c4 10             	add    esp,0x10
c0010c9c:	89 1d e4 f4 02 c0    	mov    DWORD PTR ds:0xc002f4e4,ebx
c0010ca2:	51                   	push   ecx
c0010ca3:	51                   	push   ecx
c0010ca4:	53                   	push   ebx
c0010ca5:	68 f2 b1 02 c0       	push   0xc002b1f2
c0010caa:	e8 88 21 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0010caf:	83 c4 0c             	add    esp,0xc
c0010cb2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cb5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cb8:	53                   	push   ebx
c0010cb9:	e8 7e fb ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010cbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cc1:	e8 68 ff ff ff       	call   c0010c2e <VgaText::isBlinkDisabled()>
c0010cc6:	5a                   	pop    edx
c0010cc7:	0f b6 c0             	movzx  eax,al
c0010cca:	59                   	pop    ecx
c0010ccb:	50                   	push   eax
c0010ccc:	53                   	push   ebx
c0010ccd:	e8 5e f9 ff ff       	call   c0010630 <VgaText::disableBlink(bool)>
c0010cd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd5:	e8 78 ff ff ff       	call   c0010c52 <VgaText::getCursorHeight()>
c0010cda:	5a                   	pop    edx
c0010cdb:	59                   	pop    ecx
c0010cdc:	50                   	push   eax
c0010cdd:	53                   	push   ebx
c0010cde:	e8 57 ff ff ff       	call   c0010c3a <VgaText::setCursorHeight(int)>
c0010ce3:	83 c4 10             	add    esp,0x10
c0010ce6:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010cea:	75 07                	jne    c0010cf3 <setActiveTerminal(VgaText*)+0x99>
c0010cec:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cf7:	83 c4 08             	add    esp,0x8
c0010cfa:	5b                   	pop    ebx
c0010cfb:	e9 c0 f8 ff ff       	jmp    c00105c0 <VgaText::load()>

c0010d00 <doTerminalCycle()>:
c0010d00:	83 ec 18             	sub    esp,0x18
c0010d03:	a1 e0 f4 02 c0       	mov    eax,ds:0xc002f4e0
c0010d08:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d0b:	50                   	push   eax
c0010d0c:	a3 e0 f4 02 c0       	mov    ds:0xc002f4e0,eax
c0010d11:	e8 44 ff ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c0010d16:	83 c4 1c             	add    esp,0x1c
c0010d19:	c3                   	ret    

c0010d1a <VgaText::doUpdate()>:
c0010d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d1e:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d21:	85 c0                	test   eax,eax
c0010d23:	74 02                	je     c0010d27 <VgaText::doUpdate()+0xd>
c0010d25:	ff e0                	jmp    eax
c0010d27:	c3                   	ret    

c0010d28 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d28:	55                   	push   ebp
c0010d29:	31 ed                	xor    ebp,ebp
c0010d2b:	57                   	push   edi
c0010d2c:	56                   	push   esi
c0010d2d:	53                   	push   ebx
c0010d2e:	83 ec 1c             	sub    esp,0x1c
c0010d31:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d35:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d3a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d41:	50                   	push   eax
c0010d42:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d47:	50                   	push   eax
c0010d48:	e8 cb f9 ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d4d:	59                   	pop    ecx
c0010d4e:	0f b6 c0             	movzx  eax,al
c0010d51:	5e                   	pop    esi
c0010d52:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d57:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d5b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d62:	0f b7 f6             	movzx  esi,si
c0010d65:	01 f6                	add    esi,esi
c0010d67:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d6a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d6d:	84 c0                	test   al,al
c0010d6f:	0f 84 fd 00 00 00    	je     c0010e72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d75:	3c 0d                	cmp    al,0xd
c0010d77:	75 0c                	jne    c0010d85 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d79:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d80:	e9 e7 00 00 00       	jmp    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d85:	3c 0a                	cmp    al,0xa
c0010d87:	75 47                	jne    c0010dd0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d89:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d93:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d96:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010d99:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010d9c:	75 0f                	jne    c0010dad <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010d9e:	83 ec 0c             	sub    esp,0xc
c0010da1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010da4:	53                   	push   ebx
c0010da5:	e8 80 f9 ff ff       	call   c001072a <VgaText::scrollScreen()>
c0010daa:	83 c4 10             	add    esp,0x10
c0010dad:	83 ec 0c             	sub    esp,0xc
c0010db0:	31 ed                	xor    ebp,ebp
c0010db2:	53                   	push   ebx
c0010db3:	e8 56 f8 ff ff       	call   c001060e <VgaText::updateCursor()>
c0010db8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dbd:	83 c4 10             	add    esp,0x10
c0010dc0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dc3:	0f b7 f6             	movzx  esi,si
c0010dc6:	01 f6                	add    esi,esi
c0010dc8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dcb:	e9 9c 00 00 00       	jmp    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dd0:	3c 08                	cmp    al,0x8
c0010dd2:	75 35                	jne    c0010e09 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010dd4:	56                   	push   esi
c0010dd5:	56                   	push   esi
c0010dd6:	6a 01                	push   0x1
c0010dd8:	53                   	push   ebx
c0010dd9:	e8 4e fd ff ff       	call   c0010b2c <VgaText::decrementCursor(bool)>
c0010dde:	58                   	pop    eax
c0010ddf:	5a                   	pop    edx
c0010de0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010de3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010de6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010de9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010dec:	6a 20                	push   0x20
c0010dee:	53                   	push   ebx
c0010def:	e8 dc f9 ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010df4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010df9:	83 c4 20             	add    esp,0x20
c0010dfc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dff:	0f b7 f6             	movzx  esi,si
c0010e02:	01 f6                	add    esi,esi
c0010e04:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e07:	eb 63                	jmp    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e09:	51                   	push   ecx
c0010e0a:	51                   	push   ecx
c0010e0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e0f:	50                   	push   eax
c0010e10:	e8 a9 f9 ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010e15:	83 c4 10             	add    esp,0x10
c0010e18:	66 89 06             	mov    WORD PTR [esi],ax
c0010e1b:	39 1d e4 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4e4,ebx
c0010e21:	75 21                	jne    c0010e44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e23:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e26:	85 c0                	test   eax,eax
c0010e28:	74 1a                	je     c0010e44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e2a:	52                   	push   edx
c0010e2b:	52                   	push   edx
c0010e2c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e2f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e3a:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e3d:	51                   	push   ecx
c0010e3e:	53                   	push   ebx
c0010e3f:	ff d0                	call   eax
c0010e41:	83 c4 20             	add    esp,0x20
c0010e44:	83 c6 02             	add    esi,0x2
c0010e47:	50                   	push   eax
c0010e48:	50                   	push   eax
c0010e49:	6a 00                	push   0x0
c0010e4b:	53                   	push   ebx
c0010e4c:	e8 33 fa ff ff       	call   c0010884 <VgaText::incrementCursor(bool)>
c0010e51:	83 c4 10             	add    esp,0x10
c0010e54:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e58:	75 0d                	jne    c0010e67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e5a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e5f:	0f b7 f6             	movzx  esi,si
c0010e62:	01 f6                	add    esi,esi
c0010e64:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e67:	bd 01 00 00 00       	mov    ebp,0x1
c0010e6c:	47                   	inc    edi
c0010e6d:	e9 f8 fe ff ff       	jmp    c0010d6a <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e72:	83 ec 0c             	sub    esp,0xc
c0010e75:	53                   	push   ebx
c0010e76:	e8 93 f7 ff ff       	call   c001060e <VgaText::updateCursor()>
c0010e7b:	83 c4 10             	add    esp,0x10
c0010e7e:	89 e8                	mov    eax,ebp
c0010e80:	84 c0                	test   al,al
c0010e82:	74 0c                	je     c0010e90 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e84:	83 ec 0c             	sub    esp,0xc
c0010e87:	53                   	push   ebx
c0010e88:	e8 8d fe ff ff       	call   c0010d1a <VgaText::doUpdate()>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010e97:	83 c4 1c             	add    esp,0x1c
c0010e9a:	5b                   	pop    ebx
c0010e9b:	5e                   	pop    esi
c0010e9c:	5f                   	pop    edi
c0010e9d:	5d                   	pop    ebp
c0010e9e:	c3                   	ret    
c0010e9f:	90                   	nop

c0010ea0 <VgaText::clearScreen()>:
c0010ea0:	57                   	push   edi
c0010ea1:	56                   	push   esi
c0010ea2:	31 f6                	xor    esi,esi
c0010ea4:	53                   	push   ebx
c0010ea5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ea9:	52                   	push   edx
c0010eaa:	6a 00                	push   0x0
c0010eac:	6a 00                	push   0x0
c0010eae:	53                   	push   ebx
c0010eaf:	e8 88 f9 ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010eb4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ebb:	83 c4 10             	add    esp,0x10
c0010ebe:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010ec1:	7e 20                	jle    c0010ee3 <VgaText::clearScreen()+0x43>
c0010ec3:	31 ff                	xor    edi,edi
c0010ec5:	50                   	push   eax
c0010ec6:	50                   	push   eax
c0010ec7:	56                   	push   esi
c0010ec8:	57                   	push   edi
c0010ec9:	47                   	inc    edi
c0010eca:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ecd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ed0:	6a 20                	push   0x20
c0010ed2:	53                   	push   ebx
c0010ed3:	e8 f8 f8 ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ed8:	83 c4 20             	add    esp,0x20
c0010edb:	83 ff 50             	cmp    edi,0x50
c0010ede:	75 e5                	jne    c0010ec5 <VgaText::clearScreen()+0x25>
c0010ee0:	46                   	inc    esi
c0010ee1:	eb db                	jmp    c0010ebe <VgaText::clearScreen()+0x1e>
c0010ee3:	83 ec 0c             	sub    esp,0xc
c0010ee6:	53                   	push   ebx
c0010ee7:	e8 2e fe ff ff       	call   c0010d1a <VgaText::doUpdate()>
c0010eec:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	5b                   	pop    ebx
c0010ef7:	5e                   	pop    esi
c0010ef8:	5f                   	pop    edi
c0010ef9:	c3                   	ret    

c0010efa <VgaText::putchar(char)>:
c0010efa:	56                   	push   esi
c0010efb:	53                   	push   ebx
c0010efc:	83 ec 14             	sub    esp,0x14
c0010eff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f03:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f07:	3c 5b                	cmp    al,0x5b
c0010f09:	75 18                	jne    c0010f23 <VgaText::putchar(char)+0x29>
c0010f0b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f0f:	74 1f                	je     c0010f30 <VgaText::putchar(char)+0x36>
c0010f11:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f17:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f1e:	e9 bd 00 00 00       	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010f23:	3c 1b                	cmp    al,0x1b
c0010f25:	75 09                	jne    c0010f30 <VgaText::putchar(char)+0x36>
c0010f27:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f2b:	e9 b0 00 00 00       	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010f30:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f33:	84 c9                	test   cl,cl
c0010f35:	0f 84 92 00 00 00    	je     c0010fcd <VgaText::putchar(char)+0xd3>
c0010f3b:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f3e:	80 fa 3e             	cmp    dl,0x3e
c0010f41:	77 76                	ja     c0010fb9 <VgaText::putchar(char)+0xbf>
c0010f43:	3c 6d                	cmp    al,0x6d
c0010f45:	75 47                	jne    c0010f8e <VgaText::putchar(char)+0x94>
c0010f47:	31 f6                	xor    esi,esi
c0010f49:	31 d2                	xor    edx,edx
c0010f4b:	31 c0                	xor    eax,eax
c0010f4d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f50:	7e 2d                	jle    c0010f7f <VgaText::putchar(char)+0x85>
c0010f52:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f57:	80 fa 3b             	cmp    dl,0x3b
c0010f5a:	75 17                	jne    c0010f73 <VgaText::putchar(char)+0x79>
c0010f5c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f60:	50                   	push   eax
c0010f61:	53                   	push   ebx
c0010f62:	e8 fd f6 ff ff       	call   c0010664 <VgaText::doANSI_SGR(int)>
c0010f67:	59                   	pop    ecx
c0010f68:	31 d2                	xor    edx,edx
c0010f6a:	58                   	pop    eax
c0010f6b:	31 c0                	xor    eax,eax
c0010f6d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f71:	eb 09                	jmp    c0010f7c <VgaText::putchar(char)+0x82>
c0010f73:	6b c0 0a             	imul   eax,eax,0xa
c0010f76:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f7a:	88 ca                	mov    dl,cl
c0010f7c:	46                   	inc    esi
c0010f7d:	eb ce                	jmp    c0010f4d <VgaText::putchar(char)+0x53>
c0010f7f:	84 d2                	test   dl,dl
c0010f81:	74 2e                	je     c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f83:	50                   	push   eax
c0010f84:	53                   	push   ebx
c0010f85:	e8 da f6 ff ff       	call   c0010664 <VgaText::doANSI_SGR(int)>
c0010f8a:	58                   	pop    eax
c0010f8b:	5a                   	pop    edx
c0010f8c:	eb 23                	jmp    c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f8e:	3c 4a                	cmp    al,0x4a
c0010f90:	75 1f                	jne    c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f92:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010f96:	75 19                	jne    c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f98:	83 ec 0c             	sub    esp,0xc
c0010f9b:	53                   	push   ebx
c0010f9c:	e8 ff fe ff ff       	call   c0010ea0 <VgaText::clearScreen()>
c0010fa1:	83 c4 0c             	add    esp,0xc
c0010fa4:	6a 00                	push   0x0
c0010fa6:	6a 00                	push   0x0
c0010fa8:	53                   	push   ebx
c0010fa9:	e8 8e f8 ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010fae:	83 c4 10             	add    esp,0x10
c0010fb1:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010fb7:	eb 27                	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010fb9:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010fbc:	83 fa 0e             	cmp    edx,0xe
c0010fbf:	7f 1f                	jg     c0010fe0 <VgaText::putchar(char)+0xe6>
c0010fc1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fc4:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010fc7:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010fcb:	eb 13                	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010fcd:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010fd0:	0f be c0             	movsx  eax,al
c0010fd3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010fd6:	50                   	push   eax
c0010fd7:	53                   	push   ebx
c0010fd8:	e8 71 fb ff ff       	call   c0010b4e <VgaText::putchar(char, VgaColour, VgaColour)>
c0010fdd:	83 c4 10             	add    esp,0x10
c0010fe0:	83 c4 14             	add    esp,0x14
c0010fe3:	5b                   	pop    ebx
c0010fe4:	5e                   	pop    esi
c0010fe5:	c3                   	ret    

c0010fe6 <VgaText::puts(char const*)>:
c0010fe6:	53                   	push   ebx
c0010fe7:	83 ec 08             	sub    esp,0x8
c0010fea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ff1:	84 c0                	test   al,al
c0010ff3:	74 12                	je     c0011007 <VgaText::puts(char const*)+0x21>
c0010ff5:	43                   	inc    ebx
c0010ff6:	51                   	push   ecx
c0010ff7:	51                   	push   ecx
c0010ff8:	50                   	push   eax
c0010ff9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffd:	e8 f8 fe ff ff       	call   c0010efa <VgaText::putchar(char)>
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	eb e7                	jmp    c0010fee <VgaText::puts(char const*)+0x8>
c0011007:	83 c4 08             	add    esp,0x8
c001100a:	5b                   	pop    ebx
c001100b:	c3                   	ret    

c001100c <VgaText::putx(unsigned int)>:
c001100c:	57                   	push   edi
c001100d:	b9 11 00 00 00       	mov    ecx,0x11
c0011012:	56                   	push   esi
c0011013:	be 0e b2 02 c0       	mov    esi,0xc002b20e
c0011018:	53                   	push   ebx
c0011019:	83 ec 20             	sub    esp,0x20
c001101c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011020:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011024:	fc                   	cld    
c0011025:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011027:	be 08 00 00 00       	mov    esi,0x8
c001102c:	50                   	push   eax
c001102d:	50                   	push   eax
c001102e:	89 d8                	mov    eax,ebx
c0011030:	c1 e3 04             	shl    ebx,0x4
c0011033:	c1 e8 1c             	shr    eax,0x1c
c0011036:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001103b:	50                   	push   eax
c001103c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011040:	e8 b5 fe ff ff       	call   c0010efa <VgaText::putchar(char)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	4e                   	dec    esi
c0011049:	75 e1                	jne    c001102c <VgaText::putx(unsigned int)+0x20>
c001104b:	83 c4 20             	add    esp,0x20
c001104e:	5b                   	pop    ebx
c001104f:	5e                   	pop    esi
c0011050:	5f                   	pop    edi
c0011051:	c3                   	ret    

c0011052 <VgaText::VgaText(char const*)>:
c0011052:	57                   	push   edi
c0011053:	56                   	push   esi
c0011054:	53                   	push   ebx
c0011055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011059:	83 ec 08             	sub    esp,0x8
c001105c:	6a 00                	push   0x0
c001105e:	50                   	push   eax
c001105f:	e8 8a 05 00 00       	call   c00115ee <UnixFile::UnixFile(int)>
c0011064:	83 c4 10             	add    esp,0x10
c0011067:	ba 74 b2 02 c0       	mov    edx,0xc002b274
c001106c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011070:	89 10                	mov    DWORD PTR [eax],edx
c0011072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011076:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001107d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011081:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011094:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00110b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110bd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00110c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c8:	8d 50 60             	lea    edx,[eax+0x60]
c00110cb:	bb c0 f4 02 c0       	mov    ebx,0xc002f4c0
c00110d0:	b8 08 00 00 00       	mov    eax,0x8
c00110d5:	fc                   	cld    
c00110d6:	89 d7                	mov    edi,edx
c00110d8:	89 de                	mov    esi,ebx
c00110da:	89 c1                	mov    ecx,eax
c00110dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e2:	05 82 00 00 00       	add    eax,0x82
c00110e7:	83 ec 08             	sub    esp,0x8
c00110ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ee:	50                   	push   eax
c00110ef:	e8 18 f7 fe ff       	call   c000080c <strcpy>
c00110f4:	83 c4 10             	add    esp,0x10
c00110f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110fb:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	6a 01                	push   0x1
c0011107:	e8 25 09 00 00       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001110c:	83 c4 10             	add    esp,0x10
c001110f:	89 c2                	mov    edx,eax
c0011111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011118:	8b 1d 90 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f590
c001111e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011122:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011125:	89 c6                	mov    esi,eax
c0011127:	e8 cc ed ff ff       	call   c000fef8 <Phys::allocatePage()>
c001112c:	6a 05                	push   0x5
c001112e:	56                   	push   esi
c001112f:	50                   	push   eax
c0011130:	53                   	push   ebx
c0011131:	e8 32 11 00 00       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011136:	83 c4 10             	add    esp,0x10
c0011139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011140:	83 ec 04             	sub    esp,0x4
c0011143:	68 00 0f 00 00       	push   0xf00
c0011148:	6a 00                	push   0x0
c001114a:	50                   	push   eax
c001114b:	e8 00 f6 fe ff       	call   c0000750 <memset>
c0011150:	83 c4 10             	add    esp,0x10
c0011153:	83 ec 04             	sub    esp,0x4
c0011156:	6a 00                	push   0x0
c0011158:	6a 07                	push   0x7
c001115a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001115e:	e8 95 f5 ff ff       	call   c00106f8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	83 ec 08             	sub    esp,0x8
c0011169:	6a 02                	push   0x2
c001116b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001116f:	e8 c6 fa ff ff       	call   c0010c3a <VgaText::setCursorHeight(int)>
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	83 ec 04             	sub    esp,0x4
c001117a:	6a 00                	push   0x0
c001117c:	6a 00                	push   0x0
c001117e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011182:	e8 b5 f6 ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	83 ec 08             	sub    esp,0x8
c001118d:	6a 01                	push   0x1
c001118f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011193:	e8 8c f4 ff ff       	call   c0010624 <VgaText::showCursor(bool)>
c0011198:	83 c4 10             	add    esp,0x10
c001119b:	83 ec 08             	sub    esp,0x8
c001119e:	6a 01                	push   0x1
c00111a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111a4:	e8 87 f4 ff ff       	call   c0010630 <VgaText::disableBlink(bool)>
c00111a9:	83 c4 10             	add    esp,0x10
c00111ac:	83 ec 0c             	sub    esp,0xc
c00111af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111b3:	e8 e8 fc ff ff       	call   c0010ea0 <VgaText::clearScreen()>
c00111b8:	83 c4 10             	add    esp,0x10
c00111bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bf:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00111c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c7:	05 02 01 00 00       	add    eax,0x102
c00111cc:	83 ec 04             	sub    esp,0x4
c00111cf:	68 96 00 00 00       	push   0x96
c00111d4:	6a 00                	push   0x0
c00111d6:	50                   	push   eax
c00111d7:	e8 74 f5 fe ff       	call   c0000750 <memset>
c00111dc:	83 c4 10             	add    esp,0x10
c00111df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e3:	05 98 01 00 00       	add    eax,0x198
c00111e8:	83 ec 04             	sub    esp,0x4
c00111eb:	68 2c 01 00 00       	push   0x12c
c00111f0:	6a 00                	push   0x0
c00111f2:	50                   	push   eax
c00111f3:	e8 58 f5 fe ff       	call   c0000750 <memset>
c00111f8:	83 c4 10             	add    esp,0x10
c00111fb:	90                   	nop
c00111fc:	5b                   	pop    ebx
c00111fd:	5e                   	pop    esi
c00111fe:	5f                   	pop    edi
c00111ff:	c3                   	ret    

c0011200 <VgaText::receiveKey(unsigned char)>:
c0011200:	55                   	push   ebp
c0011201:	57                   	push   edi
c0011202:	56                   	push   esi
c0011203:	53                   	push   ebx
c0011204:	83 ec 1c             	sub    esp,0x1c
c0011207:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001120b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001120f:	84 db                	test   bl,bl
c0011211:	0f 84 c9 00 00 00    	je     c00112e0 <VgaText::receiveKey(unsigned char)+0xe0>
c0011217:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c001121d:	80 fb 08             	cmp    bl,0x8
c0011220:	75 2c                	jne    c001124e <VgaText::receiveKey(unsigned char)+0x4e>
c0011222:	83 ec 0c             	sub    esp,0xc
c0011225:	57                   	push   edi
c0011226:	e8 41 f5 fe ff       	call   c000076c <strlen>
c001122b:	83 c4 10             	add    esp,0x10
c001122e:	85 c0                	test   eax,eax
c0011230:	74 41                	je     c0011273 <VgaText::receiveKey(unsigned char)+0x73>
c0011232:	50                   	push   eax
c0011233:	50                   	push   eax
c0011234:	6a 08                	push   0x8
c0011236:	56                   	push   esi
c0011237:	e8 be fc ff ff       	call   c0010efa <VgaText::putchar(char)>
c001123c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001123f:	e8 28 f5 fe ff       	call   c000076c <strlen>
c0011244:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c001124c:	eb 22                	jmp    c0011270 <VgaText::receiveKey(unsigned char)+0x70>
c001124e:	0f be c3             	movsx  eax,bl
c0011251:	52                   	push   edx
c0011252:	52                   	push   edx
c0011253:	50                   	push   eax
c0011254:	56                   	push   esi
c0011255:	e8 a0 fc ff ff       	call   c0010efa <VgaText::putchar(char)>
c001125a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001125e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011263:	59                   	pop    ecx
c0011264:	5d                   	pop    ebp
c0011265:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011269:	50                   	push   eax
c001126a:	57                   	push   edi
c001126b:	e8 dc f6 fe ff       	call   c000094c <strcat>
c0011270:	83 c4 10             	add    esp,0x10
c0011273:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c001127a:	75 05                	jne    c0011281 <VgaText::receiveKey(unsigned char)+0x81>
c001127c:	80 fb 0a             	cmp    bl,0xa
c001127f:	75 53                	jne    c00112d4 <VgaText::receiveKey(unsigned char)+0xd4>
c0011281:	83 ec 0c             	sub    esp,0xc
c0011284:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c001128a:	53                   	push   ebx
c001128b:	e8 dc f4 fe ff       	call   c000076c <strlen>
c0011290:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011293:	89 c5                	mov    ebp,eax
c0011295:	e8 d2 f4 fe ff       	call   c000076c <strlen>
c001129a:	83 c4 10             	add    esp,0x10
c001129d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112a1:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112a6:	76 10                	jbe    c00112b8 <VgaText::receiveKey(unsigned char)+0xb8>
c00112a8:	83 ec 0c             	sub    esp,0xc
c00112ab:	68 1f b2 02 c0       	push   0xc002b21f
c00112b0:	e8 f0 96 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c00112b5:	83 c4 10             	add    esp,0x10
c00112b8:	50                   	push   eax
c00112b9:	50                   	push   eax
c00112ba:	57                   	push   edi
c00112bb:	53                   	push   ebx
c00112bc:	e8 8b f6 fe ff       	call   c000094c <strcat>
c00112c1:	83 c4 0c             	add    esp,0xc
c00112c4:	68 96 00 00 00       	push   0x96
c00112c9:	6a 00                	push   0x0
c00112cb:	57                   	push   edi
c00112cc:	e8 7f f4 fe ff       	call   c0000750 <memset>
c00112d1:	83 c4 10             	add    esp,0x10
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	56                   	push   esi
c00112d8:	e8 3d fa ff ff       	call   c0010d1a <VgaText::doUpdate()>
c00112dd:	83 c4 10             	add    esp,0x10
c00112e0:	83 c4 1c             	add    esp,0x1c
c00112e3:	5b                   	pop    ebx
c00112e4:	5e                   	pop    esi
c00112e5:	5f                   	pop    edi
c00112e6:	5d                   	pop    ebp
c00112e7:	c3                   	ret    

c00112e8 <VgaText::write(unsigned long long, void*, int*)>:
c00112e8:	55                   	push   ebp
c00112e9:	57                   	push   edi
c00112ea:	56                   	push   esi
c00112eb:	53                   	push   ebx
c00112ec:	83 ec 0c             	sub    esp,0xc
c00112ef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112f3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00112f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112fb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011302:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011305:	39 eb                	cmp    ebx,ebp
c0011307:	74 13                	je     c001131c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011309:	43                   	inc    ebx
c001130a:	50                   	push   eax
c001130b:	50                   	push   eax
c001130c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011310:	50                   	push   eax
c0011311:	56                   	push   esi
c0011312:	e8 e3 fb ff ff       	call   c0010efa <VgaText::putchar(char)>
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	eb e9                	jmp    c0011305 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001131c:	83 ec 0c             	sub    esp,0xc
c001131f:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011326:	56                   	push   esi
c0011327:	e8 ee f9 ff ff       	call   c0010d1a <VgaText::doUpdate()>
c001132c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011330:	89 38                	mov    DWORD PTR [eax],edi
c0011332:	83 c4 1c             	add    esp,0x1c
c0011335:	31 c0                	xor    eax,eax
c0011337:	5b                   	pop    ebx
c0011338:	5e                   	pop    esi
c0011339:	5f                   	pop    edi
c001133a:	5d                   	pop    ebp
c001133b:	c3                   	ret    

c001133c <newTerminal(char*)>:
c001133c:	83 ec 28             	sub    esp,0x28
c001133f:	68 c4 02 00 00       	push   0x2c4
c0011344:	e8 43 e5 ff ff       	call   c000f88c <malloc>
c0011349:	5a                   	pop    edx
c001134a:	59                   	pop    ecx
c001134b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001134f:	50                   	push   eax
c0011350:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011354:	e8 f9 fc ff ff       	call   c0011052 <VgaText::VgaText(char const*)>
c0011359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001135d:	83 c4 2c             	add    esp,0x2c
c0011360:	c3                   	ret    
c0011361:	90                   	nop

c0011362 <TSS::TSS()>:
c0011362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011366:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001136d:	90                   	nop
c001136e:	c3                   	ret    
c001136f:	90                   	nop

c0011370 <TSS::setESP(unsigned long)>:
c0011370:	55                   	push   ebp
c0011371:	89 e5                	mov    ebp,esp
c0011373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011376:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011379:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001137c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001137f:	90                   	nop
c0011380:	5d                   	pop    ebp
c0011381:	c3                   	ret    

c0011382 <TSS::flush()>:
c0011382:	55                   	push   ebp
c0011383:	89 e5                	mov    ebp,esp
c0011385:	83 ec 10             	sub    esp,0x10
c0011388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001138b:	8b 00                	mov    eax,DWORD PTR [eax]
c001138d:	83 c8 03             	or     eax,0x3
c0011390:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011394:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011398:	66 89 d0             	mov    ax,dx
c001139b:	0f 00 d8             	ltr    ax
c001139e:	90                   	nop
c001139f:	c9                   	leave  
c00113a0:	c3                   	ret    
c00113a1:	90                   	nop

c00113a2 <TSS::setup(unsigned long, unsigned long)>:
c00113a2:	55                   	push   ebp
c00113a3:	89 e5                	mov    ebp,esp
c00113a5:	83 ec 18             	sub    esp,0x18
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	6a 68                	push   0x68
c00113ad:	e8 da e4 ff ff       	call   c000f88c <malloc>
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	89 c2                	mov    edx,eax
c00113b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113c3:	83 ec 04             	sub    esp,0x4
c00113c6:	6a 68                	push   0x68
c00113c8:	6a 00                	push   0x0
c00113ca:	50                   	push   eax
c00113cb:	e8 80 f3 fe ff       	call   c0000750 <memset>
c00113d0:	83 c4 10             	add    esp,0x10
c00113d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d9:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00113df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00113eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113fd:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011409:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001140f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011412:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011415:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001141b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001141e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011421:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001142a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001142d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011436:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011439:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001143f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011445:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011448:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001144b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001144e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011451:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011454:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001145d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011467:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146a:	0f 20 da             	mov    edx,cr3
c001146d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011470:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011473:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011479:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001147c:	83 ec 08             	sub    esp,0x8
c001147f:	50                   	push   eax
c0011480:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011483:	50                   	push   eax
c0011484:	e8 df db ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0011489:	83 c4 10             	add    esp,0x10
c001148c:	83 ec 08             	sub    esp,0x8
c001148f:	6a 68                	push   0x68
c0011491:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011494:	50                   	push   eax
c0011495:	e8 ea db ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c001149a:	83 c4 10             	add    esp,0x10
c001149d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114a1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114a4:	83 e0 0f             	and    eax,0xf
c00114a7:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114aa:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114ad:	83 c8 40             	or     eax,0x40
c00114b0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114b3:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c00114b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114be:	05 78 01 00 00       	add    eax,0x178
c00114c3:	83 ec 04             	sub    esp,0x4
c00114c6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00114c9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00114cc:	50                   	push   eax
c00114cd:	e8 e6 db ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c00114d2:	83 c4 10             	add    esp,0x10
c00114d5:	89 c2                	mov    edx,eax
c00114d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114da:	89 10                	mov    DWORD PTR [eax],edx
c00114dc:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c00114e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114e7:	05 78 01 00 00       	add    eax,0x178
c00114ec:	83 ec 0c             	sub    esp,0xc
c00114ef:	50                   	push   eax
c00114f0:	e8 07 dc ff ff       	call   c000f0fc <GDT::flush()>
c00114f5:	83 c4 10             	add    esp,0x10
c00114f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fd:	83 ec 08             	sub    esp,0x8
c0011500:	50                   	push   eax
c0011501:	68 88 b2 02 c0       	push   0xc002b288
c0011506:	e8 2c 19 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001150b:	83 c4 10             	add    esp,0x10
c001150e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011511:	8b 00                	mov    eax,DWORD PTR [eax]
c0011513:	c9                   	leave  
c0011514:	c3                   	ret    
c0011515:	90                   	nop

c0011516 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001151a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001151e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011521:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011526:	75 08                	jne    c0011530 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011528:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001152e:	eb 38                	jmp    c0011568 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011530:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011535:	75 17                	jne    c001154e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011537:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001153c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001153f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011545:	8b 10                	mov    edx,DWORD PTR [eax]
c0011547:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001154b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001154e:	89 c1                	mov    ecx,eax
c0011550:	83 e1 fd             	and    ecx,0xfffffffd
c0011553:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011559:	74 cd                	je     c0011528 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001155b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011560:	83 e0 ef             	and    eax,0xffffffef
c0011563:	83 f8 08             	cmp    eax,0x8
c0011566:	76 c0                	jbe    c0011528 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011568:	31 c0                	xor    eax,eax
c001156a:	c3                   	ret    
c001156b:	90                   	nop

c001156c <ReservedFilename::isAtty()>:
c001156c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011570:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011573:	31 c0                	xor    eax,eax
c0011575:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001157b:	74 09                	je     c0011586 <ReservedFilename::isAtty()+0x1a>
c001157d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011583:	0f 94 c0             	sete   al
c0011586:	c3                   	ret    
c0011587:	90                   	nop

c0011588 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001158c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011597:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001159c:	75 08                	jne    c00115a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001159e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115a4:	eb 3d                	jmp    c00115e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115a6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115ab:	75 17                	jne    c00115c4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115b5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00115bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115c1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00115c4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115c9:	75 04                	jne    c00115cf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00115cb:	89 0a                	mov    DWORD PTR [edx],ecx
c00115cd:	eb 14                	jmp    c00115e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115cf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00115d4:	74 c8                	je     c001159e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115d6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115db:	83 e0 ef             	and    eax,0xffffffef
c00115de:	83 f8 08             	cmp    eax,0x8
c00115e1:	76 bb                	jbe    c001159e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115e3:	31 c0                	xor    eax,eax
c00115e5:	c3                   	ret    

c00115e6 <UnixFile::getFileDescriptor()>:
c00115e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ed:	c3                   	ret    

c00115ee <UnixFile::UnixFile(int)>:
c00115ee:	53                   	push   ebx
c00115ef:	83 ec 28             	sub    esp,0x28
c00115f2:	ba 74 b3 02 c0       	mov    edx,0xc002b374
c00115f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115fb:	89 10                	mov    DWORD PTR [eax],edx
c00115fd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011605:	0f 8f 8c 01 00 00    	jg     c0011797 <UnixFile::UnixFile(int)+0x1a9>
c001160b:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c0011610:	8d 50 01             	lea    edx,[eax+0x1]
c0011613:	89 15 a0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a0,edx
c0011619:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001161d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011620:	83 ec 08             	sub    esp,0x8
c0011623:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011627:	68 78 f5 02 c0       	push   0xc002f578
c001162c:	e8 4b 7e 01 00       	call   c002947c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011631:	83 c4 10             	add    esp,0x10
c0011634:	a0 74 f5 02 c0       	mov    al,ds:0xc002f574
c0011639:	83 f0 01             	xor    eax,0x1
c001163c:	84 c0                	test   al,al
c001163e:	0f 84 54 01 00 00    	je     c0011798 <UnixFile::UnixFile(int)+0x1aa>
c0011644:	c6 05 74 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f574,0x1
c001164b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011653:	83 ec 0c             	sub    esp,0xc
c0011656:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001165a:	e8 2d e2 ff ff       	call   c000f88c <malloc>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	89 c3                	mov    ebx,eax
c0011664:	83 ec 08             	sub    esp,0x8
c0011667:	68 03 ff ff 0f       	push   0xfffff03
c001166c:	53                   	push   ebx
c001166d:	e8 2c 01 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011672:	83 c4 10             	add    esp,0x10
c0011675:	89 1d 6c f5 02 c0    	mov    DWORD PTR ds:0xc002f56c,ebx
c001167b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011683:	83 ec 0c             	sub    esp,0xc
c0011686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001168a:	e8 fd e1 ff ff       	call   c000f88c <malloc>
c001168f:	83 c4 10             	add    esp,0x10
c0011692:	89 c3                	mov    ebx,eax
c0011694:	83 ec 08             	sub    esp,0x8
c0011697:	68 01 ff ff 0f       	push   0xfffff01
c001169c:	53                   	push   ebx
c001169d:	e8 fc 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c00116a2:	83 c4 10             	add    esp,0x10
c00116a5:	89 1d 70 f5 02 c0    	mov    DWORD PTR ds:0xc002f570,ebx
c00116ab:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00116b3:	83 ec 0c             	sub    esp,0xc
c00116b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116ba:	e8 cd e1 ff ff       	call   c000f88c <malloc>
c00116bf:	83 c4 10             	add    esp,0x10
c00116c2:	89 c3                	mov    ebx,eax
c00116c4:	83 ec 08             	sub    esp,0x8
c00116c7:	68 00 ff ff 0f       	push   0xfffff00
c00116cc:	53                   	push   ebx
c00116cd:	e8 cc 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c00116d2:	83 c4 10             	add    esp,0x10
c00116d5:	89 1d 64 f5 02 c0    	mov    DWORD PTR ds:0xc002f564,ebx
c00116db:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116e3:	83 ec 0c             	sub    esp,0xc
c00116e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116ea:	e8 9d e1 ff ff       	call   c000f88c <malloc>
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	89 c3                	mov    ebx,eax
c00116f4:	83 ec 08             	sub    esp,0x8
c00116f7:	68 02 ff ff 0f       	push   0xfffff02
c00116fc:	53                   	push   ebx
c00116fd:	e8 9c 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	89 1d 68 f5 02 c0    	mov    DWORD PTR ds:0xc002f568,ebx
c001170b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011713:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011718:	7f 7e                	jg     c0011798 <UnixFile::UnixFile(int)+0x1aa>
c001171a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011722:	83 ec 0c             	sub    esp,0xc
c0011725:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011729:	e8 5e e1 ff ff       	call   c000f88c <malloc>
c001172e:	83 c4 10             	add    esp,0x10
c0011731:	89 c3                	mov    ebx,eax
c0011733:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011737:	05 10 ff ff 0f       	add    eax,0xfffff10
c001173c:	83 ec 08             	sub    esp,0x8
c001173f:	50                   	push   eax
c0011740:	53                   	push   ebx
c0011741:	e8 58 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011746:	83 c4 10             	add    esp,0x10
c0011749:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001174d:	89 1c 85 40 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ac0],ebx
c0011754:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011763:	e8 24 e1 ff ff       	call   c000f88c <malloc>
c0011768:	83 c4 10             	add    esp,0x10
c001176b:	89 c3                	mov    ebx,eax
c001176d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011771:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011776:	83 ec 08             	sub    esp,0x8
c0011779:	50                   	push   eax
c001177a:	53                   	push   ebx
c001177b:	e8 1e 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011780:	83 c4 10             	add    esp,0x10
c0011783:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011787:	89 1c 85 00 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b00],ebx
c001178e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011792:	e9 7c ff ff ff       	jmp    c0011713 <UnixFile::UnixFile(int)+0x125>
c0011797:	90                   	nop
c0011798:	83 c4 28             	add    esp,0x28
c001179b:	5b                   	pop    ebx
c001179c:	c3                   	ret    
c001179d:	90                   	nop

c001179e <ReservedFilename::ReservedFilename(int)>:
c001179e:	83 ec 0c             	sub    esp,0xc
c00117a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a5:	83 ec 08             	sub    esp,0x8
c00117a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117ac:	50                   	push   eax
c00117ad:	e8 3c fe ff ff       	call   c00115ee <UnixFile::UnixFile(int)>
c00117b2:	83 c4 10             	add    esp,0x10
c00117b5:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c00117ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117be:	89 10                	mov    DWORD PTR [eax],edx
c00117c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00117cb:	90                   	nop
c00117cc:	83 c4 0c             	add    esp,0xc
c00117cf:	c3                   	ret    

c00117d0 <UnixFile::~UnixFile()>:
c00117d0:	83 ec 1c             	sub    esp,0x1c
c00117d3:	ba 74 b3 02 c0       	mov    edx,0xc002b374
c00117d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117dc:	89 10                	mov    DWORD PTR [eax],edx
c00117de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117e5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00117ea:	7f 73                	jg     c001185f <UnixFile::~UnixFile()+0x8f>
c00117ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117f4:	83 ec 0c             	sub    esp,0xc
c00117f7:	68 78 f5 02 c0       	push   0xc002f578
c00117fc:	e8 4f 7d 01 00       	call   c0029550 <LinkedList<UnixFile>::getFirstElement()>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011808:	83 ec 0c             	sub    esp,0xc
c001180b:	68 78 f5 02 c0       	push   0xc002f578
c0011810:	e8 43 7d 01 00       	call   c0029558 <LinkedList<UnixFile>::removeFirst()>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001181c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011820:	74 40                	je     c0011862 <UnixFile::~UnixFile()+0x92>
c0011822:	83 ec 08             	sub    esp,0x8
c0011825:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011829:	68 78 f5 02 c0       	push   0xc002f578
c001182e:	e8 49 7c 01 00       	call   c002947c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001183a:	8d 50 01             	lea    edx,[eax+0x1]
c001183d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011841:	3d 88 13 00 00       	cmp    eax,0x1388
c0011846:	0f 94 c0             	sete   al
c0011849:	84 c0                	test   al,al
c001184b:	74 a7                	je     c00117f4 <UnixFile::~UnixFile()+0x24>
c001184d:	83 ec 0c             	sub    esp,0xc
c0011850:	68 4c b3 02 c0       	push   0xc002b34c
c0011855:	e8 4b 91 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c001185a:	83 c4 10             	add    esp,0x10
c001185d:	eb 95                	jmp    c00117f4 <UnixFile::~UnixFile()+0x24>
c001185f:	90                   	nop
c0011860:	eb 01                	jmp    c0011863 <UnixFile::~UnixFile()+0x93>
c0011862:	90                   	nop
c0011863:	90                   	nop
c0011864:	83 c4 1c             	add    esp,0x1c
c0011867:	c3                   	ret    

c0011868 <UnixFile::~UnixFile()>:
c0011868:	83 ec 0c             	sub    esp,0xc
c001186b:	83 ec 0c             	sub    esp,0xc
c001186e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011872:	e8 59 ff ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	83 ec 08             	sub    esp,0x8
c001187d:	6a 0c                	push   0xc
c001187f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011883:	e8 cf 14 00 00       	call   c0012d57 <operator delete(void*, unsigned long)>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	83 c4 0c             	add    esp,0xc
c001188e:	c3                   	ret    
c001188f:	90                   	nop

c0011890 <ReservedFilename::~ReservedFilename()>:
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0011898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001189c:	89 10                	mov    DWORD PTR [eax],edx
c001189e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a2:	83 ec 0c             	sub    esp,0xc
c00118a5:	50                   	push   eax
c00118a6:	e8 25 ff ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c00118ab:	83 c4 10             	add    esp,0x10
c00118ae:	90                   	nop
c00118af:	83 c4 0c             	add    esp,0xc
c00118b2:	c3                   	ret    
c00118b3:	90                   	nop

c00118b4 <ReservedFilename::~ReservedFilename()>:
c00118b4:	83 ec 0c             	sub    esp,0xc
c00118b7:	83 ec 0c             	sub    esp,0xc
c00118ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118be:	e8 cd ff ff ff       	call   c0011890 <ReservedFilename::~ReservedFilename()>
c00118c3:	83 c4 10             	add    esp,0x10
c00118c6:	83 ec 08             	sub    esp,0x8
c00118c9:	6a 0c                	push   0xc
c00118cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118cf:	e8 83 14 00 00       	call   c0012d57 <operator delete(void*, unsigned long)>
c00118d4:	83 c4 10             	add    esp,0x10
c00118d7:	83 c4 0c             	add    esp,0xc
c00118da:	c3                   	ret    

c00118db <getFromFileDescriptor(int)>:
c00118db:	53                   	push   ebx
c00118dc:	83 ec 08             	sub    esp,0x8
c00118df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118e3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00118e9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00118ef:	7f 2c                	jg     c001191d <getFromFileDescriptor(int)+0x42>
c00118f1:	83 ec 0c             	sub    esp,0xc
c00118f4:	68 78 f5 02 c0       	push   0xc002f578
c00118f9:	e8 52 7c 01 00       	call   c0029550 <LinkedList<UnixFile>::getFirstElement()>
c00118fe:	83 c4 10             	add    esp,0x10
c0011901:	85 c0                	test   eax,eax
c0011903:	75 04                	jne    c0011909 <getFromFileDescriptor(int)+0x2e>
c0011905:	31 c0                	xor    eax,eax
c0011907:	eb 6e                	jmp    c0011977 <getFromFileDescriptor(int)+0x9c>
c0011909:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001190c:	74 69                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c001190e:	52                   	push   edx
c001190f:	52                   	push   edx
c0011910:	50                   	push   eax
c0011911:	68 78 f5 02 c0       	push   0xc002f578
c0011916:	e8 df 7c 01 00       	call   c00295fa <LinkedList<UnixFile>::getNext(UnixFile*)>
c001191b:	eb e1                	jmp    c00118fe <getFromFileDescriptor(int)+0x23>
c001191d:	a1 6c f5 02 c0       	mov    eax,ds:0xc002f56c
c0011922:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011928:	74 4d                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c001192a:	a1 70 f5 02 c0       	mov    eax,ds:0xc002f570
c001192f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011935:	74 40                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c0011937:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c001193c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011942:	74 33                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c0011944:	a1 64 f5 02 c0       	mov    eax,ds:0xc002f564
c0011949:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001194f:	74 26                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c0011951:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011957:	83 f8 08             	cmp    eax,0x8
c001195a:	77 09                	ja     c0011965 <getFromFileDescriptor(int)+0x8a>
c001195c:	8b 04 85 40 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ac0]
c0011963:	eb 12                	jmp    c0011977 <getFromFileDescriptor(int)+0x9c>
c0011965:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001196b:	83 fb 08             	cmp    ebx,0x8
c001196e:	77 95                	ja     c0011905 <getFromFileDescriptor(int)+0x2a>
c0011970:	8b 04 9d 00 f5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0b00]
c0011977:	83 c4 08             	add    esp,0x8
c001197a:	5b                   	pop    ebx
c001197b:	c3                   	ret    

c001197c <__static_initialization_and_destruction_0(int, int)>:
c001197c:	83 ec 0c             	sub    esp,0xc
c001197f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011984:	75 34                	jne    c00119ba <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011986:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001198e:	75 2a                	jne    c00119ba <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	68 78 f5 02 c0       	push   0xc002f578
c0011998:	e8 87 7a 01 00       	call   c0029424 <LinkedList<UnixFile>::LinkedList()>
c001199d:	83 c4 10             	add    esp,0x10
c00119a0:	83 ec 04             	sub    esp,0x4
c00119a3:	68 28 e3 02 c0       	push   0xc002e328
c00119a8:	68 78 f5 02 c0       	push   0xc002f578
c00119ad:	68 22 94 02 c0       	push   0xc0029422
c00119b2:	e8 1a 13 00 00       	call   c0012cd1 <__cxa_atexit>
c00119b7:	83 c4 10             	add    esp,0x10
c00119ba:	90                   	nop
c00119bb:	83 c4 0c             	add    esp,0xc
c00119be:	c3                   	ret    

c00119bf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00119bf:	83 ec 0c             	sub    esp,0xc
c00119c2:	83 ec 08             	sub    esp,0x8
c00119c5:	68 ff ff 00 00       	push   0xffff
c00119ca:	6a 01                	push   0x1
c00119cc:	e8 ab ff ff ff       	call   c001197c <__static_initialization_and_destruction_0(int, int)>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 c4 0c             	add    esp,0xc
c00119d7:	c3                   	ret    

c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00119d8:	53                   	push   ebx
c00119d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119e1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00119e7:	89 c8                	mov    eax,ecx
c00119e9:	d1 e8                	shr    eax,1
c00119eb:	03 05 a8 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3a8
c00119f1:	83 e1 01             	and    ecx,0x1
c00119f4:	8a 10                	mov    dl,BYTE PTR [eax]
c00119f6:	75 09                	jne    c0011a01 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00119f8:	83 e2 f0             	and    edx,0xfffffff0
c00119fb:	09 da                	or     edx,ebx
c00119fd:	88 10                	mov    BYTE PTR [eax],dl
c00119ff:	5b                   	pop    ebx
c0011a00:	c3                   	ret    
c0011a01:	c1 e3 04             	shl    ebx,0x4
c0011a04:	83 e2 0f             	and    edx,0xf
c0011a07:	09 da                	or     edx,ebx
c0011a09:	88 10                	mov    BYTE PTR [eax],dl
c0011a0b:	5b                   	pop    ebx
c0011a0c:	c3                   	ret    

c0011a0d <Virt::getPageState(unsigned long)>:
c0011a0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a11:	8b 0d a8 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3a8
c0011a17:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a1d:	89 d0                	mov    eax,edx
c0011a1f:	d1 e8                	shr    eax,1
c0011a21:	83 e2 01             	and    edx,0x1
c0011a24:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a27:	75 04                	jne    c0011a2d <Virt::getPageState(unsigned long)+0x20>
c0011a29:	83 e0 0f             	and    eax,0xf
c0011a2c:	c3                   	ret    
c0011a2d:	c0 e8 04             	shr    al,0x4
c0011a30:	c3                   	ret    

c0011a31 <Virt::allocateKernelVirtualPages(int)>:
c0011a31:	55                   	push   ebp
c0011a32:	31 ed                	xor    ebp,ebp
c0011a34:	57                   	push   edi
c0011a35:	56                   	push   esi
c0011a36:	53                   	push   ebx
c0011a37:	31 db                	xor    ebx,ebx
c0011a39:	83 ec 1c             	sub    esp,0x1c
c0011a3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a40:	8b 3d a4 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e3a4
c0011a46:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a4b:	57                   	push   edi
c0011a4c:	e8 bc ff ff ff       	call   c0011a0d <Virt::getPageState(unsigned long)>
c0011a51:	5a                   	pop    edx
c0011a52:	84 c0                	test   al,al
c0011a54:	75 3a                	jne    c0011a90 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a56:	85 db                	test   ebx,ebx
c0011a58:	75 02                	jne    c0011a5c <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a5a:	89 fd                	mov    ebp,edi
c0011a5c:	43                   	inc    ebx
c0011a5d:	39 f3                	cmp    ebx,esi
c0011a5f:	74 5a                	je     c0011abb <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a61:	47                   	inc    edi
c0011a62:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a68:	76 31                	jbe    c0011a9b <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a6a:	c7 05 a4 e3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e3a4,0xc8000
c0011a74:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a79:	75 28                	jne    c0011aa3 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a7b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a80:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a85:	57                   	push   edi
c0011a86:	e8 82 ff ff ff       	call   c0011a0d <Virt::getPageState(unsigned long)>
c0011a8b:	5a                   	pop    edx
c0011a8c:	84 c0                	test   al,al
c0011a8e:	74 c6                	je     c0011a56 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a90:	31 db                	xor    ebx,ebx
c0011a92:	47                   	inc    edi
c0011a93:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a99:	77 cf                	ja     c0011a6a <Virt::allocateKernelVirtualPages(int)+0x39>
c0011a9b:	89 3d a4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a4,edi
c0011aa1:	eb a8                	jmp    c0011a4b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	68 a4 b3 02 c0       	push   0xc002b3a4
c0011aab:	e8 f5 8e 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0011ab0:	8b 3d a4 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e3a4
c0011ab6:	83 c4 10             	add    esp,0x10
c0011ab9:	eb 90                	jmp    c0011a4b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011abb:	89 2d a4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a4,ebp
c0011ac1:	4b                   	dec    ebx
c0011ac2:	74 5f                	je     c0011b23 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011ac4:	85 f6                	test   esi,esi
c0011ac6:	74 3d                	je     c0011b05 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ac8:	89 e8                	mov    eax,ebp
c0011aca:	31 db                	xor    ebx,ebx
c0011acc:	8d 7e ff             	lea    edi,[esi-0x1]
c0011acf:	eb 14                	jmp    c0011ae5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011ad1:	6a 01                	push   0x1
c0011ad3:	43                   	inc    ebx
c0011ad4:	50                   	push   eax
c0011ad5:	e8 fe fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ada:	58                   	pop    eax
c0011adb:	39 f3                	cmp    ebx,esi
c0011add:	5a                   	pop    edx
c0011ade:	74 25                	je     c0011b05 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ae0:	a1 a4 e3 02 c0       	mov    eax,ds:0xc002e3a4
c0011ae5:	8d 50 01             	lea    edx,[eax+0x1]
c0011ae8:	85 db                	test   ebx,ebx
c0011aea:	89 15 a4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a4,edx
c0011af0:	74 20                	je     c0011b12 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011af2:	39 df                	cmp    edi,ebx
c0011af4:	75 db                	jne    c0011ad1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011af6:	6a 03                	push   0x3
c0011af8:	43                   	inc    ebx
c0011af9:	50                   	push   eax
c0011afa:	e8 d9 fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aff:	59                   	pop    ecx
c0011b00:	39 f3                	cmp    ebx,esi
c0011b02:	58                   	pop    eax
c0011b03:	75 db                	jne    c0011ae0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b05:	83 c4 1c             	add    esp,0x1c
c0011b08:	89 e8                	mov    eax,ebp
c0011b0a:	5b                   	pop    ebx
c0011b0b:	c1 e0 0c             	shl    eax,0xc
c0011b0e:	5e                   	pop    esi
c0011b0f:	5f                   	pop    edi
c0011b10:	5d                   	pop    ebp
c0011b11:	c3                   	ret    
c0011b12:	6a 02                	push   0x2
c0011b14:	bb 01 00 00 00       	mov    ebx,0x1
c0011b19:	50                   	push   eax
c0011b1a:	e8 b9 fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b1f:	58                   	pop    eax
c0011b20:	5a                   	pop    edx
c0011b21:	eb bd                	jmp    c0011ae0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b23:	6a 04                	push   0x4
c0011b25:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b28:	55                   	push   ebp
c0011b29:	a3 a4 e3 02 c0       	mov    ds:0xc002e3a4,eax
c0011b2e:	e8 a5 fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b33:	59                   	pop    ecx
c0011b34:	89 e8                	mov    eax,ebp
c0011b36:	5b                   	pop    ebx
c0011b37:	c1 e0 0c             	shl    eax,0xc
c0011b3a:	83 c4 1c             	add    esp,0x1c
c0011b3d:	5b                   	pop    ebx
c0011b3e:	5e                   	pop    esi
c0011b3f:	5f                   	pop    edi
c0011b40:	5d                   	pop    ebp
c0011b41:	c3                   	ret    

c0011b42 <Virt::freeSwapfilePage(unsigned long)>:
c0011b42:	53                   	push   ebx
c0011b43:	8b 15 8c f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f58c
c0011b49:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b4d:	b8 01 00 00 00       	mov    eax,0x1
c0011b52:	89 cb                	mov    ebx,ecx
c0011b54:	d3 e0                	shl    eax,cl
c0011b56:	c1 eb 05             	shr    ebx,0x5
c0011b59:	f7 d0                	not    eax
c0011b5b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b5e:	5b                   	pop    ebx
c0011b5f:	c3                   	ret    

c0011b60 <Virt::swapIDToSector(unsigned long)>:
c0011b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b64:	0f af 05 ac e3 02 c0 	imul   eax,DWORD PTR ds:0xc002e3ac
c0011b6b:	03 05 b4 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3b4
c0011b71:	c3                   	ret    

c0011b72 <Virt::allocateSwapfilePage()>:
c0011b72:	55                   	push   ebp
c0011b73:	31 d2                	xor    edx,edx
c0011b75:	57                   	push   edi
c0011b76:	56                   	push   esi
c0011b77:	53                   	push   ebx
c0011b78:	83 ec 0c             	sub    esp,0xc
c0011b7b:	8b 0d ac e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3ac
c0011b81:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c0011b86:	f7 f1                	div    ecx
c0011b88:	39 0d b0 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3b0,ecx
c0011b8e:	72 2d                	jb     c0011bbd <Virt::allocateSwapfilePage()+0x4b>
c0011b90:	8b 35 8c f5 02 c0    	mov    esi,DWORD PTR ds:0xc002f58c
c0011b96:	8b 16                	mov    edx,DWORD PTR [esi]
c0011b98:	f6 c2 01             	test   dl,0x1
c0011b9b:	74 3c                	je     c0011bd9 <Virt::allocateSwapfilePage()+0x67>
c0011b9d:	31 c9                	xor    ecx,ecx
c0011b9f:	bf 01 00 00 00       	mov    edi,0x1
c0011ba4:	eb 12                	jmp    c0011bb8 <Virt::allocateSwapfilePage()+0x46>
c0011ba6:	89 fd                	mov    ebp,edi
c0011ba8:	89 ca                	mov    edx,ecx
c0011baa:	d3 e5                	shl    ebp,cl
c0011bac:	c1 ea 05             	shr    edx,0x5
c0011baf:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011bb2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bb4:	85 ea                	test   edx,ebp
c0011bb6:	74 2a                	je     c0011be2 <Virt::allocateSwapfilePage()+0x70>
c0011bb8:	41                   	inc    ecx
c0011bb9:	39 c8                	cmp    eax,ecx
c0011bbb:	77 e9                	ja     c0011ba6 <Virt::allocateSwapfilePage()+0x34>
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	68 2b b5 02 c0       	push   0xc002b52b
c0011bc5:	e8 db 8d 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0011bca:	83 c4 10             	add    esp,0x10
c0011bcd:	31 c9                	xor    ecx,ecx
c0011bcf:	83 c4 0c             	add    esp,0xc
c0011bd2:	89 c8                	mov    eax,ecx
c0011bd4:	5b                   	pop    ebx
c0011bd5:	5e                   	pop    esi
c0011bd6:	5f                   	pop    edi
c0011bd7:	5d                   	pop    ebp
c0011bd8:	c3                   	ret    
c0011bd9:	89 f3                	mov    ebx,esi
c0011bdb:	bd 01 00 00 00       	mov    ebp,0x1
c0011be0:	31 c9                	xor    ecx,ecx
c0011be2:	09 ea                	or     edx,ebp
c0011be4:	89 c8                	mov    eax,ecx
c0011be6:	89 13                	mov    DWORD PTR [ebx],edx
c0011be8:	83 c4 0c             	add    esp,0xc
c0011beb:	5b                   	pop    ebx
c0011bec:	5e                   	pop    esi
c0011bed:	5f                   	pop    edi
c0011bee:	5d                   	pop    ebp
c0011bef:	c3                   	ret    

c0011bf0 <Virt::virtualMemorySetup()>:
c0011bf0:	53                   	push   ebx
c0011bf1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bf6:	83 ec 08             	sub    esp,0x8
c0011bf9:	6a 0f                	push   0xf
c0011bfb:	53                   	push   ebx
c0011bfc:	43                   	inc    ebx
c0011bfd:	e8 d6 fd ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c02:	59                   	pop    ecx
c0011c03:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c09:	58                   	pop    eax
c0011c0a:	75 ed                	jne    c0011bf9 <Virt::virtualMemorySetup()+0x9>
c0011c0c:	83 ec 08             	sub    esp,0x8
c0011c0f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c14:	68 00 00 00 c8       	push   0xc8000000
c0011c19:	68 42 b5 02 c0       	push   0xc002b542
c0011c1e:	e8 14 12 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011c23:	58                   	pop    eax
c0011c24:	5a                   	pop    edx
c0011c25:	68 00 f0 ff ef       	push   0xeffff000
c0011c2a:	68 56 b5 02 c0       	push   0xc002b556
c0011c2f:	e8 03 12 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011c34:	83 c4 10             	add    esp,0x10
c0011c37:	83 ec 08             	sub    esp,0x8
c0011c3a:	6a 00                	push   0x0
c0011c3c:	53                   	push   ebx
c0011c3d:	43                   	inc    ebx
c0011c3e:	e8 95 fd ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c4c:	75 e9                	jne    c0011c37 <Virt::virtualMemorySetup()+0x47>
c0011c4e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c53:	83 ec 08             	sub    esp,0x8
c0011c56:	6a 0f                	push   0xf
c0011c58:	53                   	push   ebx
c0011c59:	43                   	inc    ebx
c0011c5a:	e8 79 fd ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c5f:	83 c4 10             	add    esp,0x10
c0011c62:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c68:	75 e9                	jne    c0011c53 <Virt::virtualMemorySetup()+0x63>
c0011c6a:	83 c4 08             	add    esp,0x8
c0011c6d:	5b                   	pop    ebx
c0011c6e:	c3                   	ret    

c0011c6f <Virt::swappingSetup()>:
c0011c6f:	c3                   	ret    

c0011c70 <Virt::setupPageSwapping(int)>:
c0011c70:	57                   	push   edi
c0011c71:	56                   	push   esi
c0011c72:	53                   	push   ebx
c0011c73:	83 ec 1c             	sub    esp,0x1c
c0011c76:	68 6a b5 02 c0       	push   0xc002b56a
c0011c7b:	e8 b7 11 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011c80:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c87:	e8 00 dc ff ff       	call   c000f88c <malloc>
c0011c8c:	83 c4 0c             	add    esp,0xc
c0011c8f:	89 c6                	mov    esi,eax
c0011c91:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c0011c97:	68 7e b5 02 c0       	push   0xc002b57e
c0011c9c:	50                   	push   eax
c0011c9d:	e8 f4 16 00 00       	call   c0013396 <File::File(char const*, Process*)>
c0011ca2:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ca5:	e8 c8 18 00 00       	call   c0013572 <File::unlink()>
c0011caa:	59                   	pop    ecx
c0011cab:	5b                   	pop    ebx
c0011cac:	6a 12                	push   0x12
c0011cae:	56                   	push   esi
c0011caf:	e8 46 17 00 00       	call   c00133fa <File::open(FileOpenMode)>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	85 c0                	test   eax,eax
c0011cb9:	0f 85 5b 01 00 00    	jne    c0011e1a <Virt::setupPageSwapping(int)+0x1aa>
c0011cbf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cc3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ccb:	c1 e3 08             	shl    ebx,0x8
c0011cce:	83 ec 0c             	sub    esp,0xc
c0011cd1:	68 00 00 01 00       	push   0x10000
c0011cd6:	e8 b1 db ff ff       	call   c000f88c <malloc>
c0011cdb:	83 c4 0c             	add    esp,0xc
c0011cde:	89 c7                	mov    edi,eax
c0011ce0:	68 00 00 01 00       	push   0x10000
c0011ce5:	68 ee 00 00 00       	push   0xee
c0011cea:	50                   	push   eax
c0011ceb:	e8 60 ea fe ff       	call   c0000750 <memset>
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	85 db                	test   ebx,ebx
c0011cf5:	79 03                	jns    c0011cfa <Virt::setupPageSwapping(int)+0x8a>
c0011cf7:	83 c3 0f             	add    ebx,0xf
c0011cfa:	c1 fb 04             	sar    ebx,0x4
c0011cfd:	4b                   	dec    ebx
c0011cfe:	83 fb ff             	cmp    ebx,0xffffffff
c0011d01:	74 4f                	je     c0011d52 <Virt::setupPageSwapping(int)+0xe2>
c0011d03:	83 ec 0c             	sub    esp,0xc
c0011d06:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d08:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d0c:	52                   	push   edx
c0011d0d:	57                   	push   edi
c0011d0e:	6a 00                	push   0x0
c0011d10:	68 00 00 01 00       	push   0x10000
c0011d15:	56                   	push   esi
c0011d16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d19:	83 c4 20             	add    esp,0x20
c0011d1c:	85 c0                	test   eax,eax
c0011d1e:	0f 85 e0 00 00 00    	jne    c0011e04 <Virt::setupPageSwapping(int)+0x194>
c0011d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d28:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d2d:	74 ce                	je     c0011cfd <Virt::setupPageSwapping(int)+0x8d>
c0011d2f:	83 ec 08             	sub    esp,0x8
c0011d32:	4b                   	dec    ebx
c0011d33:	50                   	push   eax
c0011d34:	68 d1 b5 02 c0       	push   0xc002b5d1
c0011d39:	e8 f9 10 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011d3e:	c7 04 24 da b5 02 c0 	mov    DWORD PTR [esp],0xc002b5da
c0011d45:	e8 5b 8c 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0011d4a:	83 c4 10             	add    esp,0x10
c0011d4d:	83 fb ff             	cmp    ebx,0xffffffff
c0011d50:	75 b1                	jne    c0011d03 <Virt::setupPageSwapping(int)+0x93>
c0011d52:	83 ec 0c             	sub    esp,0xc
c0011d55:	56                   	push   esi
c0011d56:	e8 fd 16 00 00       	call   c0013458 <File::close()>
c0011d5b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d5e:	e8 49 db ff ff       	call   c000f8ac <rfree>
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	85 f6                	test   esi,esi
c0011d68:	74 0c                	je     c0011d76 <Virt::setupPageSwapping(int)+0x106>
c0011d6a:	83 ec 0c             	sub    esp,0xc
c0011d6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d6f:	56                   	push   esi
c0011d70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d73:	83 c4 10             	add    esp,0x10
c0011d76:	83 ec 08             	sub    esp,0x8
c0011d79:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0011d7e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d84:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d86:	68 7e b5 02 c0       	push   0xc002b57e
c0011d8b:	50                   	push   eax
c0011d8c:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d93:	c6 05 b8 e3 02 c0 43 	mov    BYTE PTR ds:0xc002e3b8,0x43
c0011d9a:	c1 e2 0b             	shl    edx,0xb
c0011d9d:	a3 b4 e3 02 c0       	mov    ds:0xc002e3b4,eax
c0011da2:	89 15 b0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b0,edx
c0011da8:	c7 05 ac e3 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e3ac,0x8
c0011db2:	c1 ea 08             	shr    edx,0x8
c0011db5:	89 14 24             	mov    DWORD PTR [esp],edx
c0011db8:	e8 cf da ff ff       	call   c000f88c <malloc>
c0011dbd:	83 c4 0c             	add    esp,0xc
c0011dc0:	89 c1                	mov    ecx,eax
c0011dc2:	a3 8c f5 02 c0       	mov    ds:0xc002f58c,eax
c0011dc7:	31 d2                	xor    edx,edx
c0011dc9:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c0011dce:	f7 35 ac e3 02 c0    	div    DWORD PTR ds:0xc002e3ac
c0011dd4:	c1 e8 05             	shr    eax,0x5
c0011dd7:	50                   	push   eax
c0011dd8:	6a 00                	push   0x0
c0011dda:	51                   	push   ecx
c0011ddb:	e8 70 e9 fe ff       	call   c0000750 <memset>
c0011de0:	58                   	pop    eax
c0011de1:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c0011de6:	5a                   	pop    edx
c0011de7:	31 d2                	xor    edx,edx
c0011de9:	f7 35 ac e3 02 c0    	div    DWORD PTR ds:0xc002e3ac
c0011def:	c1 e8 05             	shr    eax,0x5
c0011df2:	50                   	push   eax
c0011df3:	68 e0 b5 02 c0       	push   0xc002b5e0
c0011df8:	e8 3a 10 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011dfd:	83 c4 20             	add    esp,0x20
c0011e00:	5b                   	pop    ebx
c0011e01:	5e                   	pop    esi
c0011e02:	5f                   	pop    edi
c0011e03:	c3                   	ret    
c0011e04:	83 ec 08             	sub    esp,0x8
c0011e07:	50                   	push   eax
c0011e08:	68 b9 b5 02 c0       	push   0xc002b5b9
c0011e0d:	e8 25 10 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	e9 0a ff ff ff       	jmp    c0011d24 <Virt::setupPageSwapping(int)+0xb4>
c0011e1a:	83 ec 08             	sub    esp,0x8
c0011e1d:	50                   	push   eax
c0011e1e:	68 95 b5 02 c0       	push   0xc002b595
c0011e23:	e8 0f 10 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011e28:	c7 04 24 9e b5 02 c0 	mov    DWORD PTR [esp],0xc002b59e
c0011e2f:	e8 71 8b 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0011e34:	83 c4 10             	add    esp,0x10
c0011e37:	e9 83 fe ff ff       	jmp    c0011cbf <Virt::setupPageSwapping(int)+0x4f>

c0011e3c <VAS::VAS()>:
c0011e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e4b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e56:	a3 90 f5 02 c0       	mov    ds:0xc002f590,eax
c0011e5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e5f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e67:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e6e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e75:	90                   	nop
c0011e76:	c3                   	ret    
c0011e77:	90                   	nop

c0011e78 <VAS::VAS(VAS*)>:
c0011e78:	83 ec 0c             	sub    esp,0xc
c0011e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e91:	83 ec 0c             	sub    esp,0xc
c0011e94:	68 c4 b3 02 c0       	push   0xc002b3c4
c0011e99:	e8 07 8b 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0011e9e:	83 c4 10             	add    esp,0x10
c0011ea1:	90                   	nop
c0011ea2:	83 c4 0c             	add    esp,0xc
c0011ea5:	c3                   	ret    

c0011ea6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eaa:	89 c2                	mov    edx,eax
c0011eac:	c1 e8 0a             	shr    eax,0xa
c0011eaf:	c1 ea 16             	shr    edx,0x16
c0011eb2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011eb7:	19 c9                	sbb    ecx,ecx
c0011eb9:	c1 e2 0c             	shl    edx,0xc
c0011ebc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ec2:	25 fc 0f 00 00       	and    eax,0xffc
c0011ec7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ece:	01 d0                	add    eax,edx
c0011ed0:	c3                   	ret    
c0011ed1:	90                   	nop

c0011ed2 <VAS::getPageTableEntry(unsigned long)>:
c0011ed2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ed6:	89 ca                	mov    edx,ecx
c0011ed8:	c1 e9 0a             	shr    ecx,0xa
c0011edb:	c1 ea 16             	shr    edx,0x16
c0011ede:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ee4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011eea:	c1 e0 0c             	shl    eax,0xc
c0011eed:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ef0:	c3                   	ret    

c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ef1:	57                   	push   edi
c0011ef2:	56                   	push   esi
c0011ef3:	be 01 00 00 00       	mov    esi,0x1
c0011ef8:	53                   	push   ebx
c0011ef9:	83 ec 10             	sub    esp,0x10
c0011efc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f00:	c1 eb 0c             	shr    ebx,0xc
c0011f03:	eb 3f                	jmp    c0011f44 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f05:	83 ec 08             	sub    esp,0x8
c0011f08:	57                   	push   edi
c0011f09:	ff 35 90 f5 02 c0    	push   DWORD PTR ds:0xc002f590
c0011f0f:	e8 be ff ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f19:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f1d:	f6 c4 04             	test   ah,0x4
c0011f20:	75 5f                	jne    c0011f81 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f22:	80 fa 04             	cmp    dl,0x4
c0011f25:	74 78                	je     c0011f9f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f27:	80 fa 02             	cmp    dl,0x2
c0011f2a:	0f 84 88 00 00 00    	je     c0011fb8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f30:	80 fa 03             	cmp    dl,0x3
c0011f33:	0f 84 ad 00 00 00    	je     c0011fe6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f39:	fe ca                	dec    dl
c0011f3b:	0f 84 92 00 00 00    	je     c0011fd3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f41:	43                   	inc    ebx
c0011f42:	31 f6                	xor    esi,esi
c0011f44:	53                   	push   ebx
c0011f45:	89 df                	mov    edi,ebx
c0011f47:	e8 c1 fa ff ff       	call   c0011a0d <Virt::getPageState(unsigned long)>
c0011f4c:	c1 e7 0c             	shl    edi,0xc
c0011f4f:	59                   	pop    ecx
c0011f50:	84 c0                	test   al,al
c0011f52:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f56:	75 ad                	jne    c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f58:	83 ec 0c             	sub    esp,0xc
c0011f5b:	68 fb b5 02 c0       	push   0xc002b5fb
c0011f60:	e8 40 8a 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0011f65:	58                   	pop    eax
c0011f66:	5a                   	pop    edx
c0011f67:	57                   	push   edi
c0011f68:	ff 35 90 f5 02 c0    	push   DWORD PTR ds:0xc002f590
c0011f6e:	e8 5f ff ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f78:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f7c:	f6 c4 04             	test   ah,0x4
c0011f7f:	74 c0                	je     c0011f41 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f81:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f85:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f8a:	83 ec 0c             	sub    esp,0xc
c0011f8d:	50                   	push   eax
c0011f8e:	e8 db de ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c0011f93:	83 c4 10             	add    esp,0x10
c0011f96:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f9a:	80 fa 04             	cmp    dl,0x4
c0011f9d:	75 88                	jne    c0011f27 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f9f:	89 f0                	mov    eax,esi
c0011fa1:	84 c0                	test   al,al
c0011fa3:	75 47                	jne    c0011fec <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011fa5:	c7 44 24 20 e8 b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b3e8
c0011fad:	83 c4 10             	add    esp,0x10
c0011fb0:	5b                   	pop    ebx
c0011fb1:	5e                   	pop    esi
c0011fb2:	5f                   	pop    edi
c0011fb3:	e9 ed 89 00 00       	jmp    c001a9a5 <Krnl::panic(char const*)>
c0011fb8:	89 f0                	mov    eax,esi
c0011fba:	84 c0                	test   al,al
c0011fbc:	75 15                	jne    c0011fd3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fbe:	83 ec 0c             	sub    esp,0xc
c0011fc1:	68 17 b6 02 c0       	push   0xc002b617
c0011fc6:	e8 da 89 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0011fcb:	83 c4 10             	add    esp,0x10
c0011fce:	e9 6e ff ff ff       	jmp    c0011f41 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fd3:	83 ec 08             	sub    esp,0x8
c0011fd6:	6a 00                	push   0x0
c0011fd8:	53                   	push   ebx
c0011fd9:	e8 fa f9 ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fde:	83 c4 10             	add    esp,0x10
c0011fe1:	e9 5b ff ff ff       	jmp    c0011f41 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fe6:	89 f0                	mov    eax,esi
c0011fe8:	84 c0                	test   al,al
c0011fea:	75 15                	jne    c0012001 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011fec:	83 ec 08             	sub    esp,0x8
c0011fef:	6a 00                	push   0x0
c0011ff1:	53                   	push   ebx
c0011ff2:	e8 e1 f9 ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	83 c4 10             	add    esp,0x10
c0011ffd:	5b                   	pop    ebx
c0011ffe:	5e                   	pop    esi
c0011fff:	5f                   	pop    edi
c0012000:	c3                   	ret    
c0012001:	c7 44 24 20 33 b6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b633
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	5b                   	pop    ebx
c001200d:	5e                   	pop    esi
c001200e:	5f                   	pop    edi
c001200f:	e9 91 89 00 00       	jmp    c001a9a5 <Krnl::panic(char const*)>

c0012014 <VAS::freeAllocatedPages(unsigned long)>:
c0012014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012018:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001201c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012020:	74 09                	je     c001202b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012022:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012026:	e9 c6 fe ff ff       	jmp    c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001202b:	c7 44 24 04 0c b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b40c
c0012033:	e9 ff 0d 00 00       	jmp    c0012e37 <Dbg::kprintf(char const*, ...)>

c0012038 <VAS::virtualToPhysical(unsigned long)>:
c0012038:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001203c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012040:	e8 8d fe ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012045:	5a                   	pop    edx
c0012046:	8b 00                	mov    eax,DWORD PTR [eax]
c0012048:	59                   	pop    ecx
c0012049:	25 00 f0 ff ff       	and    eax,0xfffff000
c001204e:	c3                   	ret    
c001204f:	90                   	nop

c0012050 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012050:	55                   	push   ebp
c0012051:	57                   	push   edi
c0012052:	56                   	push   esi
c0012053:	53                   	push   ebx
c0012054:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012058:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001205c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012060:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012064:	85 db                	test   ebx,ebx
c0012066:	7e 22                	jle    c001208a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012068:	c1 e3 0c             	shl    ebx,0xc
c001206b:	01 f3                	add    ebx,esi
c001206d:	56                   	push   esi
c001206e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012074:	55                   	push   ebp
c0012075:	e8 58 fe ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c001207a:	5a                   	pop    edx
c001207b:	59                   	pop    ecx
c001207c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001207e:	21 f9                	and    ecx,edi
c0012080:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012084:	39 f3                	cmp    ebx,esi
c0012086:	89 08                	mov    DWORD PTR [eax],ecx
c0012088:	75 e3                	jne    c001206d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001208a:	5b                   	pop    ebx
c001208b:	5e                   	pop    esi
c001208c:	5f                   	pop    edi
c001208d:	5d                   	pop    ebp
c001208e:	c3                   	ret    
c001208f:	90                   	nop

c0012090 <VAS::setToWriteCombining(unsigned long, int)>:
c0012090:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0012095:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001209b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120a2:	75 01                	jne    c00120a5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120a4:	c3                   	ret    
c00120a5:	68 80 00 00 00       	push   0x80
c00120aa:	6a ff                	push   0xffffffff
c00120ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120b8:	e8 93 ff ff ff       	call   c0012050 <VAS::reflagRange(unsigned long, int, int, int)>
c00120bd:	83 c4 14             	add    esp,0x14
c00120c0:	c3                   	ret    
c00120c1:	90                   	nop

c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>:
c00120c2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120cb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120d2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00120d5:	19 c0                	sbb    eax,eax
c00120d7:	83 ca 03             	or     edx,0x3
c00120da:	83 e0 fc             	and    eax,0xfffffffc
c00120dd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120e4:	0f 20 d8             	mov    eax,cr3
c00120e7:	0f 22 d8             	mov    cr3,eax
c00120ea:	c3                   	ret    
c00120eb:	90                   	nop

c00120ec <VAS::~VAS()>:
c00120ec:	83 ec 2c             	sub    esp,0x2c
c00120ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120f7:	fa                   	cli    
c00120f8:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c00120fd:	40                   	inc    eax
c00120fe:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0012103:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012108:	8b 00                	mov    eax,DWORD PTR [eax]
c001210a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001210d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012113:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012117:	6a 01                	push   0x1
c0012119:	50                   	push   eax
c001211a:	e8 a3 ff ff ff       	call   c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>
c001211f:	83 c4 0c             	add    esp,0xc
c0012122:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001212a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012132:	0f 8f d4 00 00 00    	jg     c001220c <VAS::~VAS()+0x120>
c0012138:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001213c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001213f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012143:	c1 e2 02             	shl    edx,0x2
c0012146:	01 d0                	add    eax,edx
c0012148:	8b 00                	mov    eax,DWORD PTR [eax]
c001214a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001214e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012152:	83 e0 01             	and    eax,0x1
c0012155:	0f 84 a8 00 00 00    	je     c0012203 <VAS::~VAS()+0x117>
c001215b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012163:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001216b:	7f 72                	jg     c00121df <VAS::~VAS()+0xf3>
c001216d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012171:	c1 e0 0a             	shl    eax,0xa
c0012174:	89 c2                	mov    edx,eax
c0012176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001217a:	01 d0                	add    eax,edx
c001217c:	c1 e0 0c             	shl    eax,0xc
c001217f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012183:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012188:	8b 00                	mov    eax,DWORD PTR [eax]
c001218a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001218d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012193:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012197:	6a 01                	push   0x1
c0012199:	50                   	push   eax
c001219a:	e8 07 fd ff ff       	call   c0011ea6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001219f:	83 c4 0c             	add    esp,0xc
c00121a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121b4:	25 01 04 00 00       	and    eax,0x401
c00121b9:	3d 01 04 00 00       	cmp    eax,0x401
c00121be:	75 19                	jne    c00121d9 <VAS::~VAS()+0xed>
c00121c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121c9:	83 ec 0c             	sub    esp,0xc
c00121cc:	50                   	push   eax
c00121cd:	e8 9c dc ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c00121d2:	83 c4 10             	add    esp,0x10
c00121d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121d9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121dd:	eb 84                	jmp    c0012163 <VAS::~VAS()+0x77>
c00121df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121e3:	25 00 04 00 00       	and    eax,0x400
c00121e8:	74 19                	je     c0012203 <VAS::~VAS()+0x117>
c00121ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121f3:	83 ec 0c             	sub    esp,0xc
c00121f6:	50                   	push   eax
c00121f7:	e8 72 dc ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c00121fc:	83 c4 10             	add    esp,0x10
c00121ff:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012203:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012207:	e9 1e ff ff ff       	jmp    c001212a <VAS::~VAS()+0x3e>
c001220c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012210:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012213:	83 ec 0c             	sub    esp,0xc
c0012216:	50                   	push   eax
c0012217:	e8 d5 fc ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001221c:	83 c4 10             	add    esp,0x10
c001221f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012223:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012226:	83 ec 0c             	sub    esp,0xc
c0012229:	50                   	push   eax
c001222a:	e8 3f dc ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012236:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001223a:	c1 e0 02             	shl    eax,0x2
c001223d:	83 ec 08             	sub    esp,0x8
c0012240:	50                   	push   eax
c0012241:	68 30 b4 02 c0       	push   0xc002b430
c0012246:	e8 ec 0b 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001224b:	83 c4 10             	add    esp,0x10
c001224e:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0012253:	48                   	dec    eax
c0012254:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0012259:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001225e:	85 c0                	test   eax,eax
c0012260:	75 01                	jne    c0012263 <VAS::~VAS()+0x177>
c0012262:	fb                   	sti    
c0012263:	90                   	nop
c0012264:	83 c4 2c             	add    esp,0x2c
c0012267:	c3                   	ret    

c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012268:	55                   	push   ebp
c0012269:	57                   	push   edi
c001226a:	56                   	push   esi
c001226b:	53                   	push   ebx
c001226c:	83 ec 1c             	sub    esp,0x1c
c001226f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012273:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012277:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001227d:	77 08                	ja     c0012287 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001227f:	0f 20 d8             	mov    eax,cr3
c0012282:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012285:	75 47                	jne    c00122ce <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012287:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001228b:	09 d8                	or     eax,ebx
c001228d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012292:	75 57                	jne    c00122eb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012294:	89 de                	mov    esi,ebx
c0012296:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012299:	c1 ee 16             	shr    esi,0x16
c001229c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122a3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122a7:	74 54                	je     c00122fd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122ad:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122b3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122b7:	c1 e6 0c             	shl    esi,0xc
c00122ba:	c1 eb 0a             	shr    ebx,0xa
c00122bd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122c3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00122c6:	83 c4 1c             	add    esp,0x1c
c00122c9:	5b                   	pop    ebx
c00122ca:	5e                   	pop    esi
c00122cb:	5f                   	pop    edi
c00122cc:	5d                   	pop    ebp
c00122cd:	c3                   	ret    
c00122ce:	83 ec 0c             	sub    esp,0xc
c00122d1:	68 50 b4 02 c0       	push   0xc002b450
c00122d6:	e8 5c 0b 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122e2:	09 d8                	or     eax,ebx
c00122e4:	a9 ff 0f 00 00       	test   eax,0xfff
c00122e9:	74 a9                	je     c0012294 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122eb:	83 ec 0c             	sub    esp,0xc
c00122ee:	68 b8 b4 02 c0       	push   0xc002b4b8
c00122f3:	e8 ad 86 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c00122f8:	83 c4 10             	add    esp,0x10
c00122fb:	eb 97                	jmp    c0012294 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012301:	e8 f2 db ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012306:	83 ec 0c             	sub    esp,0xc
c0012309:	89 c5                	mov    ebp,eax
c001230b:	8b 0d 90 f5 02 c0    	mov    ecx,DWORD PTR ds:0xc002f590
c0012311:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012315:	6a 01                	push   0x1
c0012317:	e8 15 f7 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001231c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012323:	6a 01                	push   0x1
c0012325:	50                   	push   eax
c0012326:	55                   	push   ebp
c0012327:	81 cd 07 04 00 00    	or     ebp,0x407
c001232d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012331:	51                   	push   ecx
c0012332:	e8 27 02 00 00       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012337:	83 c4 1c             	add    esp,0x1c
c001233a:	68 00 10 00 00       	push   0x1000
c001233f:	6a 00                	push   0x0
c0012341:	50                   	push   eax
c0012342:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012346:	e8 05 e4 fe ff       	call   c0000750 <memset>
c001234b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001234f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012352:	e8 9a fb ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001235b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012364:	e9 40 ff ff ff       	jmp    c00122a9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012369:	90                   	nop

c001236a <VAS::allocatePages(int, int)>:
c001236a:	55                   	push   ebp
c001236b:	57                   	push   edi
c001236c:	56                   	push   esi
c001236d:	53                   	push   ebx
c001236e:	83 ec 1c             	sub    esp,0x1c
c0012371:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012375:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001237a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012380:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012386:	83 e0 01             	and    eax,0x1
c0012389:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001238d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012391:	0f 85 cc 00 00 00    	jne    c0012463 <VAS::allocatePages(int, int)+0xf9>
c0012397:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001239a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001239e:	85 c0                	test   eax,eax
c00123a0:	0f 84 a1 00 00 00    	je     c0012447 <VAS::allocatePages(int, int)+0xdd>
c00123a6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123ae:	c1 e6 0c             	shl    esi,0xc
c00123b1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123b5:	85 c0                	test   eax,eax
c00123b7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123ba:	7e 33                	jle    c00123ef <VAS::allocatePages(int, int)+0x85>
c00123bc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123c4:	81 cd 00 04 00 00    	or     ebp,0x400
c00123ca:	e8 29 db ff ff       	call   c000fef8 <Phys::allocatePage()>
c00123cf:	55                   	push   ebp
c00123d0:	53                   	push   ebx
c00123d1:	50                   	push   eax
c00123d2:	57                   	push   edi
c00123d3:	e8 90 fe ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123d8:	83 c4 10             	add    esp,0x10
c00123db:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123e0:	74 03                	je     c00123e5 <VAS::allocatePages(int, int)+0x7b>
c00123e2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123eb:	39 de                	cmp    esi,ebx
c00123ed:	75 db                	jne    c00123ca <VAS::allocatePages(int, int)+0x60>
c00123ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123f4:	75 12                	jne    c0012408 <VAS::allocatePages(int, int)+0x9e>
c00123f6:	0f 20 d8             	mov    eax,cr3
c00123f9:	0f 22 d8             	mov    cr3,eax
c00123fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012400:	83 c4 1c             	add    esp,0x1c
c0012403:	5b                   	pop    ebx
c0012404:	5e                   	pop    esi
c0012405:	5f                   	pop    edi
c0012406:	5d                   	pop    ebp
c0012407:	c3                   	ret    
c0012408:	c1 ee 0a             	shr    esi,0xa
c001240b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001240f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012415:	c1 eb 0a             	shr    ebx,0xa
c0012418:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001241e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012424:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001242a:	39 c3                	cmp    ebx,eax
c001242c:	77 ce                	ja     c00123fc <VAS::allocatePages(int, int)+0x92>
c001242e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012431:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012437:	39 d8                	cmp    eax,ebx
c0012439:	73 f3                	jae    c001242e <VAS::allocatePages(int, int)+0xc4>
c001243b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001243f:	83 c4 1c             	add    esp,0x1c
c0012442:	5b                   	pop    ebx
c0012443:	5e                   	pop    esi
c0012444:	5f                   	pop    edi
c0012445:	5d                   	pop    ebp
c0012446:	c3                   	ret    
c0012447:	83 ec 0c             	sub    esp,0xc
c001244a:	68 dc b4 02 c0       	push   0xc002b4dc
c001244f:	e8 51 85 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0012454:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001245b:	83 c4 10             	add    esp,0x10
c001245e:	e9 43 ff ff ff       	jmp    c00123a6 <VAS::allocatePages(int, int)+0x3c>
c0012463:	83 ec 0c             	sub    esp,0xc
c0012466:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001246a:	e8 c2 f5 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001246f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012473:	83 c4 10             	add    esp,0x10
c0012476:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001247b:	0f 87 9b 00 00 00    	ja     c001251c <VAS::allocatePages(int, int)+0x1b2>
c0012481:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012485:	85 d2                	test   edx,edx
c0012487:	7e 3c                	jle    c00124c5 <VAS::allocatePages(int, int)+0x15b>
c0012489:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001248d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012491:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012495:	c1 e5 0c             	shl    ebp,0xc
c0012498:	81 ce 00 04 00 00    	or     esi,0x400
c001249e:	01 dd                	add    ebp,ebx
c00124a0:	e8 53 da ff ff       	call   c000fef8 <Phys::allocatePage()>
c00124a5:	56                   	push   esi
c00124a6:	53                   	push   ebx
c00124a7:	50                   	push   eax
c00124a8:	57                   	push   edi
c00124a9:	e8 ba fd ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ae:	83 c4 10             	add    esp,0x10
c00124b1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124b6:	74 03                	je     c00124bb <VAS::allocatePages(int, int)+0x151>
c00124b8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124bb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124c1:	39 dd                	cmp    ebp,ebx
c00124c3:	75 db                	jne    c00124a0 <VAS::allocatePages(int, int)+0x136>
c00124c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ca:	0f 84 26 ff ff ff    	je     c00123f6 <VAS::allocatePages(int, int)+0x8c>
c00124d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124d8:	89 d3                	mov    ebx,edx
c00124da:	c1 e0 0c             	shl    eax,0xc
c00124dd:	c1 eb 0a             	shr    ebx,0xa
c00124e0:	01 d0                	add    eax,edx
c00124e2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124e8:	c1 e8 0a             	shr    eax,0xa
c00124eb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124f6:	2d 00 00 40 00       	sub    eax,0x400000
c00124fb:	39 c3                	cmp    ebx,eax
c00124fd:	0f 87 f9 fe ff ff    	ja     c00123fc <VAS::allocatePages(int, int)+0x92>
c0012503:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012506:	81 c3 00 10 00 00    	add    ebx,0x1000
c001250c:	39 d8                	cmp    eax,ebx
c001250e:	73 f3                	jae    c0012503 <VAS::allocatePages(int, int)+0x199>
c0012510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012514:	83 c4 1c             	add    esp,0x1c
c0012517:	5b                   	pop    ebx
c0012518:	5e                   	pop    esi
c0012519:	5f                   	pop    edi
c001251a:	5d                   	pop    ebp
c001251b:	c3                   	ret    
c001251c:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0012521:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012527:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001252e:	0f 84 4d ff ff ff    	je     c0012481 <VAS::allocatePages(int, int)+0x117>
c0012534:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001253c:	e9 40 ff ff ff       	jmp    c0012481 <VAS::allocatePages(int, int)+0x117>
c0012541:	90                   	nop

c0012542 <VAS::setCPUSpecific(unsigned long)>:
c0012542:	83 ec 0c             	sub    esp,0xc
c0012545:	6a 05                	push   0x5
c0012547:	68 00 00 40 c2       	push   0xc2400000
c001254c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012554:	e8 0f fd ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012559:	83 c4 1c             	add    esp,0x1c
c001255c:	c3                   	ret    
c001255d:	90                   	nop

c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001255e:	55                   	push   ebp
c001255f:	57                   	push   edi
c0012560:	56                   	push   esi
c0012561:	53                   	push   ebx
c0012562:	83 ec 1c             	sub    esp,0x1c
c0012565:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001256a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001256e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012574:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012578:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001257e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012582:	83 e0 01             	and    eax,0x1
c0012585:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012589:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001258d:	85 c0                	test   eax,eax
c001258f:	7e 39                	jle    c00125ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012591:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012595:	89 f3                	mov    ebx,esi
c0012597:	c1 e0 0c             	shl    eax,0xc
c001259a:	01 f0                	add    eax,esi
c001259c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125a0:	55                   	push   ebp
c00125a1:	53                   	push   ebx
c00125a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125a6:	29 f0                	sub    eax,esi
c00125a8:	01 d8                	add    eax,ebx
c00125aa:	50                   	push   eax
c00125ab:	57                   	push   edi
c00125ac:	e8 b7 fc ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125b9:	74 03                	je     c00125be <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125bb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125be:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00125c8:	75 d6                	jne    c00125a0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125ca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125cf:	75 10                	jne    c00125e1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125d1:	0f 20 d8             	mov    eax,cr3
c00125d4:	0f 22 d8             	mov    cr3,eax
c00125d7:	83 c4 1c             	add    esp,0x1c
c00125da:	89 f0                	mov    eax,esi
c00125dc:	5b                   	pop    ebx
c00125dd:	5e                   	pop    esi
c00125de:	5f                   	pop    edi
c00125df:	5d                   	pop    ebp
c00125e0:	c3                   	ret    
c00125e1:	89 f3                	mov    ebx,esi
c00125e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125e7:	c1 eb 0a             	shr    ebx,0xa
c00125ea:	c1 e0 0c             	shl    eax,0xc
c00125ed:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f3:	01 f0                	add    eax,esi
c00125f5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125fb:	c1 e8 0a             	shr    eax,0xa
c00125fe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012603:	2d 00 00 40 00       	sub    eax,0x400000
c0012608:	39 c3                	cmp    ebx,eax
c001260a:	77 cb                	ja     c00125d7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001260c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001260f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012615:	39 d8                	cmp    eax,ebx
c0012617:	73 f3                	jae    c001260c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012619:	83 c4 1c             	add    esp,0x1c
c001261c:	89 f0                	mov    eax,esi
c001261e:	5b                   	pop    ebx
c001261f:	5e                   	pop    esi
c0012620:	5f                   	pop    edi
c0012621:	5d                   	pop    ebp
c0012622:	c3                   	ret    
c0012623:	90                   	nop

c0012624 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012624:	55                   	push   ebp
c0012625:	57                   	push   edi
c0012626:	56                   	push   esi
c0012627:	53                   	push   ebx
c0012628:	83 ec 1c             	sub    esp,0x1c
c001262b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001262f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012633:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012637:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001263b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012640:	75 4a                	jne    c001268c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012642:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012646:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012649:	c1 eb 16             	shr    ebx,0x16
c001264c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012653:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012657:	74 4d                	je     c00126a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012659:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001265d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012661:	c1 e8 0a             	shr    eax,0xa
c0012664:	80 fa 01             	cmp    dl,0x1
c0012667:	19 d2                	sbb    edx,edx
c0012669:	c1 e3 0c             	shl    ebx,0xc
c001266c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012670:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012676:	25 fc 0f 00 00       	and    eax,0xffc
c001267b:	01 d8                	add    eax,ebx
c001267d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012684:	83 c4 1c             	add    esp,0x1c
c0012687:	5b                   	pop    ebx
c0012688:	5e                   	pop    esi
c0012689:	5f                   	pop    edi
c001268a:	5d                   	pop    ebp
c001268b:	c3                   	ret    
c001268c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012690:	83 ec 0c             	sub    esp,0xc
c0012693:	68 08 b5 02 c0       	push   0xc002b508
c0012698:	e8 08 83 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c001269d:	83 c4 10             	add    esp,0x10
c00126a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126a4:	eb 9c                	jmp    c0012642 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126aa:	e8 49 d8 ff ff       	call   c000fef8 <Phys::allocatePage()>
c00126af:	83 ec 0c             	sub    esp,0xc
c00126b2:	89 c5                	mov    ebp,eax
c00126b4:	8b 0d 90 f5 02 c0    	mov    ecx,DWORD PTR ds:0xc002f590
c00126ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126be:	6a 01                	push   0x1
c00126c0:	e8 6c f3 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c00126c5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126cc:	6a 01                	push   0x1
c00126ce:	50                   	push   eax
c00126cf:	55                   	push   ebp
c00126d0:	81 cd 07 04 00 00    	or     ebp,0x407
c00126d6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126da:	51                   	push   ecx
c00126db:	e8 7e fe ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126e0:	83 c4 1c             	add    esp,0x1c
c00126e3:	68 00 10 00 00       	push   0x1000
c00126e8:	6a 00                	push   0x0
c00126ea:	50                   	push   eax
c00126eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126ef:	e8 5c e0 fe ff       	call   c0000750 <memset>
c00126f4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126f8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00126fb:	e8 f1 f7 ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012700:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012703:	83 c4 10             	add    esp,0x10
c0012706:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012709:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001270d:	e9 47 ff ff ff       	jmp    c0012659 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012712 <VAS::VAS(bool)>:
c0012712:	53                   	push   ebx
c0012713:	83 ec 28             	sub    esp,0x28
c0012716:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001271a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001271e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012722:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012729:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012734:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012738:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001273c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001273f:	e8 b4 d7 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012744:	89 c2                	mov    edx,eax
c0012746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001274a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001274d:	8b 1d 90 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f590
c0012753:	83 ec 0c             	sub    esp,0xc
c0012756:	6a 01                	push   0x1
c0012758:	e8 d4 f2 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001275d:	83 c4 10             	add    esp,0x10
c0012760:	89 c2                	mov    edx,eax
c0012762:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012766:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012769:	83 ec 0c             	sub    esp,0xc
c001276c:	6a 03                	push   0x3
c001276e:	6a 01                	push   0x1
c0012770:	52                   	push   edx
c0012771:	50                   	push   eax
c0012772:	53                   	push   ebx
c0012773:	e8 e6 fd ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012778:	83 c4 20             	add    esp,0x20
c001277b:	89 c2                	mov    edx,eax
c001277d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012781:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012784:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001278c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012794:	7f 1c                	jg     c00127b2 <VAS::VAS(bool)+0xa0>
c0012796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001279a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001279d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127a1:	c1 e2 02             	shl    edx,0x2
c00127a4:	01 d0                	add    eax,edx
c00127a6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127b0:	eb da                	jmp    c001278c <VAS::VAS(bool)+0x7a>
c00127b2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127ba:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00127c2:	7f 7a                	jg     c001283e <VAS::VAS(bool)+0x12c>
c00127c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127c8:	2d 00 02 00 00       	sub    eax,0x200
c00127cd:	c1 e0 0c             	shl    eax,0xc
c00127d0:	83 c8 03             	or     eax,0x3
c00127d3:	89 c2                	mov    edx,eax
c00127d5:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c00127da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127e0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127e6:	83 e0 10             	and    eax,0x10
c00127e9:	84 c0                	test   al,al
c00127eb:	74 07                	je     c00127f4 <VAS::VAS(bool)+0xe2>
c00127ed:	b8 00 01 00 00       	mov    eax,0x100
c00127f2:	eb 05                	jmp    c00127f9 <VAS::VAS(bool)+0xe7>
c00127f4:	b8 00 00 00 00       	mov    eax,0x0
c00127f9:	09 d0                	or     eax,edx
c00127fb:	89 c1                	mov    ecx,eax
c00127fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012801:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012804:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012808:	c1 e2 02             	shl    edx,0x2
c001280b:	01 d0                	add    eax,edx
c001280d:	89 ca                	mov    edx,ecx
c001280f:	89 10                	mov    DWORD PTR [eax],edx
c0012811:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012815:	2d 40 03 00 00       	sub    eax,0x340
c001281a:	83 f8 7f             	cmp    eax,0x7f
c001281d:	77 16                	ja     c0012835 <VAS::VAS(bool)+0x123>
c001281f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012823:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012826:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001282a:	c1 e2 02             	shl    edx,0x2
c001282d:	01 d0                	add    eax,edx
c001282f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012835:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012839:	e9 7c ff ff ff       	jmp    c00127ba <VAS::VAS(bool)+0xa8>
c001283e:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0012843:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012849:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001284f:	83 e0 10             	and    eax,0x10
c0012852:	84 c0                	test   al,al
c0012854:	74 07                	je     c001285d <VAS::VAS(bool)+0x14b>
c0012856:	b8 03 41 00 00       	mov    eax,0x4103
c001285b:	eb 05                	jmp    c0012862 <VAS::VAS(bool)+0x150>
c001285d:	b8 03 40 00 00       	mov    eax,0x4003
c0012862:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012866:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012869:	81 c2 20 0c 00 00    	add    edx,0xc20
c001286f:	89 02                	mov    DWORD PTR [edx],eax
c0012871:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0012876:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001287c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012882:	83 ec 08             	sub    esp,0x8
c0012885:	50                   	push   eax
c0012886:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001288a:	e8 b3 fc ff ff       	call   c0012542 <VAS::setCPUSpecific(unsigned long)>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012896:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012899:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001289e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128aa:	83 e0 10             	and    eax,0x10
c00128ad:	84 c0                	test   al,al
c00128af:	74 07                	je     c00128b8 <VAS::VAS(bool)+0x1a6>
c00128b1:	b8 00 01 00 00       	mov    eax,0x100
c00128b6:	eb 05                	jmp    c00128bd <VAS::VAS(bool)+0x1ab>
c00128b8:	b8 00 00 00 00       	mov    eax,0x0
c00128bd:	09 c2                	or     edx,eax
c00128bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128c6:	05 fc 0f 00 00       	add    eax,0xffc
c00128cb:	83 ca 03             	or     edx,0x3
c00128ce:	89 10                	mov    DWORD PTR [eax],edx
c00128d0:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c00128d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128db:	83 ec 0c             	sub    esp,0xc
c00128de:	50                   	push   eax
c00128df:	e8 8c 1c 00 00       	call   c0014570 <Device::getName()>
c00128e4:	83 c4 10             	add    esp,0x10
c00128e7:	83 ec 08             	sub    esp,0x8
c00128ea:	68 4d b6 02 c0       	push   0xc002b64d
c00128ef:	50                   	push   eax
c00128f0:	e8 a3 df fe ff       	call   c0000898 <strcmp>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	85 c0                	test   eax,eax
c00128fa:	0f 94 c0             	sete   al
c00128fd:	84 c0                	test   al,al
c00128ff:	0f 84 87 00 00 00    	je     c001298c <VAS::VAS(bool)+0x27a>
c0012905:	fa                   	cli    
c0012906:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001290b:	40                   	inc    eax
c001290c:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0012911:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0012916:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001291c:	05 7c 09 00 00       	add    eax,0x97c
c0012921:	83 ec 0c             	sub    esp,0xc
c0012924:	50                   	push   eax
c0012925:	e8 e4 c9 ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001292a:	83 c4 10             	add    esp,0x10
c001292d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012932:	89 c3                	mov    ebx,eax
c0012934:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0012939:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001293f:	05 7c 09 00 00       	add    eax,0x97c
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	50                   	push   eax
c0012948:	e8 c1 c9 ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001294d:	83 c4 10             	add    esp,0x10
c0012950:	83 ec 08             	sub    esp,0x8
c0012953:	50                   	push   eax
c0012954:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012958:	e8 75 f5 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c001295d:	83 c4 10             	add    esp,0x10
c0012960:	8b 00                	mov    eax,DWORD PTR [eax]
c0012962:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012967:	6a 11                	push   0x11
c0012969:	53                   	push   ebx
c001296a:	50                   	push   eax
c001296b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001296f:	e8 f4 f8 ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001297c:	48                   	dec    eax
c001297d:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0012982:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0012987:	85 c0                	test   eax,eax
c0012989:	75 01                	jne    c001298c <VAS::VAS(bool)+0x27a>
c001298b:	fb                   	sti    
c001298c:	90                   	nop
c001298d:	83 c4 28             	add    esp,0x28
c0012990:	5b                   	pop    ebx
c0012991:	c3                   	ret    

c0012992 <VAS::evict(unsigned long)>:
c0012992:	55                   	push   ebp
c0012993:	57                   	push   edi
c0012994:	56                   	push   esi
c0012995:	53                   	push   ebx
c0012996:	83 ec 1c             	sub    esp,0x1c
c0012999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001299d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129a5:	e8 c8 f1 ff ff       	call   c0011b72 <Virt::allocateSwapfilePage()>
c00129aa:	89 c7                	mov    edi,eax
c00129ac:	a1 ac e3 02 c0       	mov    eax,ds:0xc002e3ac
c00129b1:	85 c0                	test   eax,eax
c00129b3:	7e 3d                	jle    c00129f2 <VAS::evict(unsigned long)+0x60>
c00129b5:	89 ee                	mov    esi,ebp
c00129b7:	31 db                	xor    ebx,ebx
c00129b9:	83 ec 0c             	sub    esp,0xc
c00129bc:	57                   	push   edi
c00129bd:	e8 9e f1 ff ff       	call   c0011b60 <Virt::swapIDToSector(unsigned long)>
c00129c2:	89 34 24             	mov    DWORD PTR [esp],esi
c00129c5:	01 d8                	add    eax,ebx
c00129c7:	6a 01                	push   0x1
c00129c9:	31 d2                	xor    edx,edx
c00129cb:	43                   	inc    ebx
c00129cc:	52                   	push   edx
c00129cd:	81 c6 00 02 00 00    	add    esi,0x200
c00129d3:	50                   	push   eax
c00129d4:	0f be 05 b8 e3 02 c0 	movsx  eax,BYTE PTR ds:0xc002e3b8
c00129db:	ff 34 85 1c f9 02 c0 	push   DWORD PTR [eax*4-0x3ffd06e4]
c00129e2:	e8 5f 3e 00 00       	call   c0016846 <LogicalDisk::write(unsigned long long, int, void*)>
c00129e7:	83 c4 20             	add    esp,0x20
c00129ea:	39 1d ac e3 02 c0    	cmp    DWORD PTR ds:0xc002e3ac,ebx
c00129f0:	7f c7                	jg     c00129b9 <VAS::evict(unsigned long)+0x27>
c00129f2:	83 ec 08             	sub    esp,0x8
c00129f5:	c1 e7 0b             	shl    edi,0xb
c00129f8:	55                   	push   ebp
c00129f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129fd:	e8 d0 f4 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012a02:	83 c4 0c             	add    esp,0xc
c0012a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a07:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a0d:	09 d7                	or     edi,edx
c0012a0f:	89 38                	mov    DWORD PTR [eax],edi
c0012a11:	a1 88 f5 02 c0       	mov    eax,ds:0xc002f588
c0012a16:	40                   	inc    eax
c0012a17:	a3 88 f5 02 c0       	mov    ds:0xc002f588,eax
c0012a1c:	0f 20 da             	mov    edx,cr3
c0012a1f:	0f 22 da             	mov    cr3,edx
c0012a22:	50                   	push   eax
c0012a23:	55                   	push   ebp
c0012a24:	68 5b b6 02 c0       	push   0xc002b65b
c0012a29:	e8 09 04 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012a2e:	a1 84 f5 02 c0       	mov    eax,ds:0xc002f584
c0012a33:	c7 44 24 40 70 b6 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b670
c0012a3b:	8d 50 01             	lea    edx,[eax+0x1]
c0012a3e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a42:	89 15 84 f5 02 c0    	mov    DWORD PTR ds:0xc002f584,edx
c0012a48:	83 c4 2c             	add    esp,0x2c
c0012a4b:	5b                   	pop    ebx
c0012a4c:	5e                   	pop    esi
c0012a4d:	5f                   	pop    edi
c0012a4e:	5d                   	pop    ebp
c0012a4f:	e9 e3 03 00 00       	jmp    c0012e37 <Dbg::kprintf(char const*, ...)>

c0012a54 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a54:	55                   	push   ebp
c0012a55:	57                   	push   edi
c0012a56:	56                   	push   esi
c0012a57:	53                   	push   ebx
c0012a58:	83 ec 0c             	sub    esp,0xc
c0012a5b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012a5f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012a65:	0f 84 dc 00 00 00    	je     c0012b47 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a6b:	56                   	push   esi
c0012a6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a70:	e8 5d f4 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012a75:	5b                   	pop    ebx
c0012a76:	85 c0                	test   eax,eax
c0012a78:	5f                   	pop    edi
c0012a79:	89 c3                	mov    ebx,eax
c0012a7b:	0f 84 c6 00 00 00    	je     c0012b47 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a81:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a83:	31 c0                	xor    eax,eax
c0012a85:	89 fa                	mov    edx,edi
c0012a87:	81 e2 01 04 00 00    	and    edx,0x401
c0012a8d:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012a93:	0f 85 b0 00 00 00    	jne    c0012b49 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012a99:	e8 5a d4 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012a9e:	c1 ef 0b             	shr    edi,0xb
c0012aa1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012aa3:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012aa9:	09 c2                	or     edx,eax
c0012aab:	81 ca 01 08 00 00    	or     edx,0x801
c0012ab1:	89 13                	mov    DWORD PTR [ebx],edx
c0012ab3:	8b 0d ac e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3ac
c0012ab9:	85 c9                	test   ecx,ecx
c0012abb:	7e 3d                	jle    c0012afa <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012abd:	89 f5                	mov    ebp,esi
c0012abf:	31 db                	xor    ebx,ebx
c0012ac1:	83 ec 0c             	sub    esp,0xc
c0012ac4:	57                   	push   edi
c0012ac5:	e8 96 f0 ff ff       	call   c0011b60 <Virt::swapIDToSector(unsigned long)>
c0012aca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012acd:	01 d8                	add    eax,ebx
c0012acf:	6a 01                	push   0x1
c0012ad1:	31 d2                	xor    edx,edx
c0012ad3:	43                   	inc    ebx
c0012ad4:	52                   	push   edx
c0012ad5:	81 c5 00 02 00 00    	add    ebp,0x200
c0012adb:	50                   	push   eax
c0012adc:	0f be 05 b8 e3 02 c0 	movsx  eax,BYTE PTR ds:0xc002e3b8
c0012ae3:	ff 34 85 1c f9 02 c0 	push   DWORD PTR [eax*4-0x3ffd06e4]
c0012aea:	e8 eb 3c 00 00       	call   c00167da <LogicalDisk::read(unsigned long long, int, void*)>
c0012aef:	83 c4 20             	add    esp,0x20
c0012af2:	39 1d ac e3 02 c0    	cmp    DWORD PTR ds:0xc002e3ac,ebx
c0012af8:	7f c7                	jg     c0012ac1 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012afa:	a1 88 f5 02 c0       	mov    eax,ds:0xc002f588
c0012aff:	48                   	dec    eax
c0012b00:	52                   	push   edx
c0012b01:	a3 88 f5 02 c0       	mov    ds:0xc002f588,eax
c0012b06:	50                   	push   eax
c0012b07:	56                   	push   esi
c0012b08:	68 81 b6 02 c0       	push   0xc002b681
c0012b0d:	e8 25 03 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012b12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b15:	e8 28 f0 ff ff       	call   c0011b42 <Virt::freeSwapfilePage(unsigned long)>
c0012b1a:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0012b1f:	83 c4 10             	add    esp,0x10
c0012b22:	48                   	dec    eax
c0012b23:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0012b28:	85 c0                	test   eax,eax
c0012b2a:	75 01                	jne    c0012b2d <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b2c:	fb                   	sti    
c0012b2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b31:	25 ff 0f 00 00       	and    eax,0xfff
c0012b36:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b3b:	77 14                	ja     c0012b51 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b3d:	0f 20 d8             	mov    eax,cr3
c0012b40:	0f 22 d8             	mov    cr3,eax
c0012b43:	b0 01                	mov    al,0x1
c0012b45:	eb 02                	jmp    c0012b49 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b47:	31 c0                	xor    eax,eax
c0012b49:	83 c4 0c             	add    esp,0xc
c0012b4c:	5b                   	pop    ebx
c0012b4d:	5e                   	pop    esi
c0012b4e:	5f                   	pop    edi
c0012b4f:	5d                   	pop    ebp
c0012b50:	c3                   	ret    
c0012b51:	83 ec 0c             	sub    esp,0xc
c0012b54:	68 96 b6 02 c0       	push   0xc002b696
c0012b59:	e8 d9 02 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	eb da                	jmp    c0012b3d <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012b63:	90                   	nop

c0012b64 <VAS::scanForEviction()>:
c0012b64:	57                   	push   edi
c0012b65:	56                   	push   esi
c0012b66:	53                   	push   ebx
c0012b67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b6b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b6e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b74:	75 0e                	jne    c0012b84 <VAS::scanForEviction()+0x20>
c0012b76:	89 da                	mov    edx,ebx
c0012b78:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b7b:	c1 ea 16             	shr    edx,0x16
c0012b7e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b82:	74 48                	je     c0012bcc <VAS::scanForEviction()+0x68>
c0012b84:	53                   	push   ebx
c0012b85:	56                   	push   esi
c0012b86:	e8 47 f3 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012b8b:	5a                   	pop    edx
c0012b8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b8e:	59                   	pop    ecx
c0012b8f:	89 fa                	mov    edx,edi
c0012b91:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012b97:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012b9d:	74 3d                	je     c0012bdc <VAS::scanForEviction()+0x78>
c0012b9f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012ba5:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012bab:	76 2a                	jbe    c0012bd7 <VAS::scanForEviction()+0x73>
c0012bad:	31 db                	xor    ebx,ebx
c0012baf:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012bb6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bbc:	75 c6                	jne    c0012b84 <VAS::scanForEviction()+0x20>
c0012bbe:	89 da                	mov    edx,ebx
c0012bc0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bc3:	c1 ea 16             	shr    edx,0x16
c0012bc6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bca:	75 b8                	jne    c0012b84 <VAS::scanForEviction()+0x20>
c0012bcc:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012bd2:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bd5:	eb 97                	jmp    c0012b6e <VAS::scanForEviction()+0xa>
c0012bd7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bda:	eb 92                	jmp    c0012b6e <VAS::scanForEviction()+0xa>
c0012bdc:	f7 c7 01 00 00 00    	test   edi,0x1
c0012be2:	74 bb                	je     c0012b9f <VAS::scanForEviction()+0x3b>
c0012be4:	f7 c7 20 00 00 00    	test   edi,0x20
c0012bea:	74 0a                	je     c0012bf6 <VAS::scanForEviction()+0x92>
c0012bec:	83 e7 df             	and    edi,0xffffffdf
c0012bef:	89 38                	mov    DWORD PTR [eax],edi
c0012bf1:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012bf4:	eb a9                	jmp    c0012b9f <VAS::scanForEviction()+0x3b>
c0012bf6:	83 ec 08             	sub    esp,0x8
c0012bf9:	53                   	push   ebx
c0012bfa:	56                   	push   esi
c0012bfb:	e8 92 fd ff ff       	call   c0012992 <VAS::evict(unsigned long)>
c0012c00:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	89 f8                	mov    eax,edi
c0012c0c:	5b                   	pop    ebx
c0012c0d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c12:	5e                   	pop    esi
c0012c13:	5f                   	pop    edi
c0012c14:	c3                   	ret    

c0012c15 <mapVASFirstTime>:
c0012c15:	55                   	push   ebp
c0012c16:	57                   	push   edi
c0012c17:	56                   	push   esi
c0012c18:	53                   	push   ebx
c0012c19:	83 ec 0c             	sub    esp,0xc
c0012c1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c21:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c24:	4a                   	dec    edx
c0012c25:	0f 84 8e 00 00 00    	je     c0012cb9 <mapVASFirstTime+0xa4>
c0012c2b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c2e:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c31:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c36:	c1 e5 15             	shl    ebp,0x15
c0012c39:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c3e:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c44:	29 eb                	sub    ebx,ebp
c0012c46:	29 ee                	sub    esi,ebp
c0012c48:	e8 ab d2 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012c4d:	83 ec 0c             	sub    esp,0xc
c0012c50:	68 03 04 00 00       	push   0x403
c0012c55:	6a 01                	push   0x1
c0012c57:	53                   	push   ebx
c0012c58:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c5e:	50                   	push   eax
c0012c5f:	57                   	push   edi
c0012c60:	e8 f9 f8 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c65:	83 c4 20             	add    esp,0x20
c0012c68:	39 f3                	cmp    ebx,esi
c0012c6a:	75 dc                	jne    c0012c48 <mapVASFirstTime+0x33>
c0012c6c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c71:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c76:	29 ee                	sub    esi,ebp
c0012c78:	29 e8                	sub    eax,ebp
c0012c7a:	89 c5                	mov    ebp,eax
c0012c7c:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c80:	19 db                	sbb    ebx,ebx
c0012c82:	e8 71 d2 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012c87:	83 e3 04             	and    ebx,0x4
c0012c8a:	83 ec 0c             	sub    esp,0xc
c0012c8d:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c93:	53                   	push   ebx
c0012c94:	6a 01                	push   0x1
c0012c96:	56                   	push   esi
c0012c97:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c9d:	50                   	push   eax
c0012c9e:	57                   	push   edi
c0012c9f:	e8 ba f8 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ca4:	83 c4 20             	add    esp,0x20
c0012ca7:	39 f5                	cmp    ebp,esi
c0012ca9:	75 d1                	jne    c0012c7c <mapVASFirstTime+0x67>
c0012cab:	0f 20 d8             	mov    eax,cr3
c0012cae:	0f 22 d8             	mov    cr3,eax
c0012cb1:	83 c4 0c             	add    esp,0xc
c0012cb4:	5b                   	pop    ebx
c0012cb5:	5e                   	pop    esi
c0012cb6:	5f                   	pop    edi
c0012cb7:	5d                   	pop    ebp
c0012cb8:	c3                   	ret    
c0012cb9:	83 ec 0c             	sub    esp,0xc
c0012cbc:	68 a6 b6 02 c0       	push   0xc002b6a6
c0012cc1:	e8 71 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012cc6:	83 c4 10             	add    esp,0x10
c0012cc9:	83 c4 0c             	add    esp,0xc
c0012ccc:	5b                   	pop    ebx
c0012ccd:	5e                   	pop    esi
c0012cce:	5f                   	pop    edi
c0012ccf:	5d                   	pop    ebp
c0012cd0:	c3                   	ret    

c0012cd1 <__cxa_atexit>:
c0012cd1:	31 c0                	xor    eax,eax
c0012cd3:	c3                   	ret    

c0012cd4 <__cxa_finalize>:
c0012cd4:	c3                   	ret    

c0012cd5 <__stack_chk_fail>:
c0012cd5:	55                   	push   ebp
c0012cd6:	89 e5                	mov    ebp,esp
c0012cd8:	83 ec 14             	sub    esp,0x14
c0012cdb:	68 bf b6 02 c0       	push   0xc002b6bf
c0012ce0:	e8 52 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012ce5:	58                   	pop    eax
c0012ce6:	5a                   	pop    edx
c0012ce7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012cea:	68 0f b7 02 c0       	push   0xc002b70f
c0012cef:	e8 43 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012cf4:	59                   	pop    ecx
c0012cf5:	58                   	pop    eax
c0012cf6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cf9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cfc:	68 0f b7 02 c0       	push   0xc002b70f
c0012d01:	e8 31 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012d06:	5a                   	pop    edx
c0012d07:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d0a:	59                   	pop    ecx
c0012d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d0d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d10:	68 0f b7 02 c0       	push   0xc002b70f
c0012d15:	e8 1d 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012d1a:	5a                   	pop    edx
c0012d1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d1e:	59                   	pop    ecx
c0012d1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d23:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d26:	68 0f b7 02 c0       	push   0xc002b70f
c0012d2b:	e8 07 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012d30:	c7 04 24 17 b7 02 c0 	mov    DWORD PTR [esp],0xc002b717
c0012d37:	e8 69 7c 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0012d3c:	83 c4 10             	add    esp,0x10
c0012d3f:	c9                   	leave  
c0012d40:	c3                   	ret    

c0012d41 <__cxa_pure_virtual>:
c0012d41:	83 ec 18             	sub    esp,0x18
c0012d44:	68 2f b7 02 c0       	push   0xc002b72f
c0012d49:	e8 57 7c 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0012d4e:	83 c4 1c             	add    esp,0x1c
c0012d51:	c3                   	ret    

c0012d52 <operator new[](unsigned long)>:
c0012d52:	e9 35 cb ff ff       	jmp    c000f88c <malloc>

c0012d57 <operator delete(void*, unsigned long)>:
c0012d57:	e9 50 cb ff ff       	jmp    c000f8ac <rfree>

c0012d5c <operator delete[](void*)>:
c0012d5c:	e9 4b cb ff ff       	jmp    c000f8ac <rfree>

c0012d61 <operator delete[](void*, unsigned long)>:
c0012d61:	e9 46 cb ff ff       	jmp    c000f8ac <rfree>

c0012d66 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d66:	57                   	push   edi
c0012d67:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d6c:	56                   	push   esi
c0012d6d:	be 44 b7 02 c0       	mov    esi,0xc002b744
c0012d72:	53                   	push   ebx
c0012d73:	83 ec 40             	sub    esp,0x40
c0012d76:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d7a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d7e:	fc                   	cld    
c0012d7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d81:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d85:	83 f9 3e             	cmp    ecx,0x3e
c0012d88:	7e 05                	jle    c0012d8f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d8a:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d8f:	89 df                	mov    edi,ebx
c0012d91:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d95:	eb 02                	jmp    c0012d99 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012d97:	89 c7                	mov    edi,eax
c0012d99:	31 d2                	xor    edx,edx
c0012d9b:	46                   	inc    esi
c0012d9c:	89 f8                	mov    eax,edi
c0012d9e:	f7 f1                	div    ecx
c0012da0:	39 cf                	cmp    edi,ecx
c0012da2:	73 f3                	jae    c0012d97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012da4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012da7:	eb 02                	jmp    c0012dab <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012da9:	89 c3                	mov    ebx,eax
c0012dab:	31 d2                	xor    edx,edx
c0012dad:	4e                   	dec    esi
c0012dae:	89 d8                	mov    eax,ebx
c0012db0:	f7 f1                	div    ecx
c0012db2:	39 cb                	cmp    ebx,ecx
c0012db4:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012db8:	88 16                	mov    BYTE PTR [esi],dl
c0012dba:	73 ed                	jae    c0012da9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012dbc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012dc0:	83 c4 40             	add    esp,0x40
c0012dc3:	5b                   	pop    ebx
c0012dc4:	5e                   	pop    esi
c0012dc5:	5f                   	pop    edi
c0012dc6:	c3                   	ret    

c0012dc7 <Dbg::logc(char)>:
c0012dc7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012dcb:	ba fd 03 00 00       	mov    edx,0x3fd
c0012dd0:	ec                   	in     al,dx
c0012dd1:	a8 20                	test   al,0x20
c0012dd3:	74 fb                	je     c0012dd0 <Dbg::logc(char)+0x9>
c0012dd5:	ba f8 03 00 00       	mov    edx,0x3f8
c0012dda:	88 c8                	mov    al,cl
c0012ddc:	ee                   	out    dx,al
c0012ddd:	c3                   	ret    

c0012dde <Dbg::logs(char*)>:
c0012dde:	53                   	push   ebx
c0012ddf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012de3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012de6:	84 c0                	test   al,al
c0012de8:	74 0f                	je     c0012df9 <Dbg::logs(char*)+0x1b>
c0012dea:	50                   	push   eax
c0012deb:	43                   	inc    ebx
c0012dec:	e8 d6 ff ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012df1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012df4:	5a                   	pop    edx
c0012df5:	84 c0                	test   al,al
c0012df7:	75 f1                	jne    c0012dea <Dbg::logs(char*)+0xc>
c0012df9:	5b                   	pop    ebx
c0012dfa:	c3                   	ret    

c0012dfb <Dbg::logWriteInt(unsigned int)>:
c0012dfb:	83 ec 10             	sub    esp,0x10
c0012dfe:	6a 0a                	push   0xa
c0012e00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e04:	50                   	push   eax
c0012e05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e09:	e8 58 ff ff ff       	call   c0012d66 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e0e:	50                   	push   eax
c0012e0f:	e8 ca ff ff ff       	call   c0012dde <Dbg::logs(char*)>
c0012e14:	83 c4 20             	add    esp,0x20
c0012e17:	c3                   	ret    

c0012e18 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e18:	83 ec 10             	sub    esp,0x10
c0012e1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e1f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e23:	50                   	push   eax
c0012e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e28:	e8 39 ff ff ff       	call   c0012d66 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e2d:	50                   	push   eax
c0012e2e:	e8 ab ff ff ff       	call   c0012dde <Dbg::logs(char*)>
c0012e33:	83 c4 20             	add    esp,0x20
c0012e36:	c3                   	ret    

c0012e37 <Dbg::kprintf(char const*, ...)>:
c0012e37:	55                   	push   ebp
c0012e38:	57                   	push   edi
c0012e39:	56                   	push   esi
c0012e3a:	53                   	push   ebx
c0012e3b:	83 ec 0c             	sub    esp,0xc
c0012e3e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e42:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e4a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e4d:	84 c0                	test   al,al
c0012e4f:	74 4a                	je     c0012e9b <Dbg::kprintf(char const*, ...)+0x64>
c0012e51:	31 db                	xor    ebx,ebx
c0012e53:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e56:	3c 25                	cmp    al,0x25
c0012e58:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e5b:	0f 85 e4 00 00 00    	jne    c0012f45 <Dbg::kprintf(char const*, ...)+0x10e>
c0012e61:	83 c3 02             	add    ebx,0x2
c0012e64:	8a 07                	mov    al,BYTE PTR [edi]
c0012e66:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e69:	83 e8 25             	sub    eax,0x25
c0012e6c:	3c 53                	cmp    al,0x53
c0012e6e:	0f 87 ba 00 00 00    	ja     c0012f2e <Dbg::kprintf(char const*, ...)+0xf7>
c0012e74:	0f b6 c0             	movzx  eax,al
c0012e77:	ff 24 85 84 b7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd487c]
c0012e7e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e82:	89 c8                	mov    eax,ecx
c0012e84:	83 c1 04             	add    ecx,0x4
c0012e87:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e8b:	ff 30                	push   DWORD PTR [eax]
c0012e8d:	e8 4c ff ff ff       	call   c0012dde <Dbg::logs(char*)>
c0012e92:	58                   	pop    eax
c0012e93:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012e97:	84 c0                	test   al,al
c0012e99:	75 b8                	jne    c0012e53 <Dbg::kprintf(char const*, ...)+0x1c>
c0012e9b:	83 c4 0c             	add    esp,0xc
c0012e9e:	5b                   	pop    ebx
c0012e9f:	5e                   	pop    esi
c0012ea0:	5f                   	pop    edi
c0012ea1:	5d                   	pop    ebp
c0012ea2:	c3                   	ret    
c0012ea3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ea7:	89 d0                	mov    eax,edx
c0012ea9:	83 c2 04             	add    edx,0x4
c0012eac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eb0:	ff 30                	push   DWORD PTR [eax]
c0012eb2:	e8 44 ff ff ff       	call   c0012dfb <Dbg::logWriteInt(unsigned int)>
c0012eb7:	58                   	pop    eax
c0012eb8:	eb d9                	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012eba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ebe:	89 d0                	mov    eax,edx
c0012ec0:	83 c2 04             	add    edx,0x4
c0012ec3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ec6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eca:	50                   	push   eax
c0012ecb:	e8 f7 fe ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012ed0:	58                   	pop    eax
c0012ed1:	eb c0                	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ed3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ed7:	89 c8                	mov    eax,ecx
c0012ed9:	83 c1 04             	add    ecx,0x4
c0012edc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ee0:	ff 30                	push   DWORD PTR [eax]
c0012ee2:	e8 14 ff ff ff       	call   c0012dfb <Dbg::logWriteInt(unsigned int)>
c0012ee7:	5f                   	pop    edi
c0012ee8:	eb a9                	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012eea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012eee:	89 c8                	mov    eax,ecx
c0012ef0:	83 c1 04             	add    ecx,0x4
c0012ef3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ef7:	6a 10                	push   0x10
c0012ef9:	ff 30                	push   DWORD PTR [eax]
c0012efb:	e8 18 ff ff ff       	call   c0012e18 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f00:	59                   	pop    ecx
c0012f01:	5f                   	pop    edi
c0012f02:	eb 8f                	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f08:	89 d0                	mov    eax,edx
c0012f0a:	83 c2 08             	add    edx,0x8
c0012f0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f11:	6a 10                	push   0x10
c0012f13:	ff 30                	push   DWORD PTR [eax]
c0012f15:	e8 fe fe ff ff       	call   c0012e18 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f1a:	58                   	pop    eax
c0012f1b:	5a                   	pop    edx
c0012f1c:	e9 72 ff ff ff       	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f21:	6a 25                	push   0x25
c0012f23:	e8 9f fe ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012f28:	58                   	pop    eax
c0012f29:	e9 65 ff ff ff       	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f2e:	6a 25                	push   0x25
c0012f30:	e8 92 fe ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012f35:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f38:	50                   	push   eax
c0012f39:	e8 89 fe ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012f3e:	5a                   	pop    edx
c0012f3f:	59                   	pop    ecx
c0012f40:	e9 4e ff ff ff       	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f45:	50                   	push   eax
c0012f46:	89 eb                	mov    ebx,ebp
c0012f48:	e8 7a fe ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012f4d:	89 fd                	mov    ebp,edi
c0012f4f:	58                   	pop    eax
c0012f50:	e9 3e ff ff ff       	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f55:	90                   	nop

c0012f56 <File::read(unsigned long long, void*, int*)>:
c0012f56:	53                   	push   ebx
c0012f57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f5b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f5f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f66:	3c 19                	cmp    al,0x19
c0012f68:	77 35                	ja     c0012f9f <File::read(unsigned long long, void*, int*)+0x49>
c0012f6a:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c0012f71:	85 c0                	test   eax,eax
c0012f73:	74 2a                	je     c0012f9f <File::read(unsigned long long, void*, int*)+0x49>
c0012f75:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f7b:	85 c0                	test   eax,eax
c0012f7d:	74 20                	je     c0012f9f <File::read(unsigned long long, void*, int*)+0x49>
c0012f7f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f83:	74 21                	je     c0012fa6 <File::read(unsigned long long, void*, int*)+0x50>
c0012f85:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f8b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f99:	5b                   	pop    ebx
c0012f9a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f9d:	ff e0                	jmp    eax
c0012f9f:	b8 0b 00 00 00       	mov    eax,0xb
c0012fa4:	eb 05                	jmp    c0012fab <File::read(unsigned long long, void*, int*)+0x55>
c0012fa6:	b8 05 00 00 00       	mov    eax,0x5
c0012fab:	5b                   	pop    ebx
c0012fac:	c3                   	ret    
c0012fad:	90                   	nop

c0012fae <File::write(unsigned long long, void*, int*)>:
c0012fae:	53                   	push   ebx
c0012faf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fb3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fb7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fbe:	3c 19                	cmp    al,0x19
c0012fc0:	77 35                	ja     c0012ff7 <File::write(unsigned long long, void*, int*)+0x49>
c0012fc2:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c0012fc9:	85 c0                	test   eax,eax
c0012fcb:	74 2a                	je     c0012ff7 <File::write(unsigned long long, void*, int*)+0x49>
c0012fcd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fd3:	85 c0                	test   eax,eax
c0012fd5:	74 20                	je     c0012ff7 <File::write(unsigned long long, void*, int*)+0x49>
c0012fd7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fdb:	74 21                	je     c0012ffe <File::write(unsigned long long, void*, int*)+0x50>
c0012fdd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fdf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fe3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fe9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ff1:	5b                   	pop    ebx
c0012ff2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ff5:	ff e0                	jmp    eax
c0012ff7:	b8 0b 00 00 00       	mov    eax,0xb
c0012ffc:	eb 05                	jmp    c0013003 <File::write(unsigned long long, void*, int*)+0x55>
c0012ffe:	b8 05 00 00 00       	mov    eax,0x5
c0013003:	5b                   	pop    ebx
c0013004:	c3                   	ret    
c0013005:	90                   	nop

c0013006 <Directory::read(unsigned long long, void*, int*)>:
c0013006:	53                   	push   ebx
c0013007:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001300b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001300f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013016:	3c 19                	cmp    al,0x19
c0013018:	77 35                	ja     c001304f <Directory::read(unsigned long long, void*, int*)+0x49>
c001301a:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c0013021:	85 c0                	test   eax,eax
c0013023:	74 2a                	je     c001304f <Directory::read(unsigned long long, void*, int*)+0x49>
c0013025:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001302b:	85 c0                	test   eax,eax
c001302d:	74 20                	je     c001304f <Directory::read(unsigned long long, void*, int*)+0x49>
c001302f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013033:	74 21                	je     c0013056 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013035:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013037:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001303b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013045:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013049:	5b                   	pop    ebx
c001304a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001304d:	ff e0                	jmp    eax
c001304f:	b8 0b 00 00 00       	mov    eax,0xb
c0013054:	eb 05                	jmp    c001305b <Directory::read(unsigned long long, void*, int*)+0x55>
c0013056:	b8 05 00 00 00       	mov    eax,0x5
c001305b:	5b                   	pop    ebx
c001305c:	c3                   	ret    
c001305d:	90                   	nop

c001305e <Directory::write(unsigned long long, void*, int*)>:
c001305e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013062:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013069:	b8 0b 00 00 00       	mov    eax,0xb
c001306e:	80 fa 19             	cmp    dl,0x19
c0013071:	77 18                	ja     c001308b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013073:	8b 14 95 20 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd05e0]
c001307a:	85 d2                	test   edx,edx
c001307c:	74 0d                	je     c001308b <Directory::write(unsigned long long, void*, int*)+0x2d>
c001307e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013085:	19 c0                	sbb    eax,eax
c0013087:	83 e0 0a             	and    eax,0xa
c001308a:	40                   	inc    eax
c001308b:	c3                   	ret    

c001308c <File::isAtty()>:
c001308c:	31 c0                	xor    eax,eax
c001308e:	c3                   	ret    
c001308f:	90                   	nop

c0013090 <Directory::isAtty()>:
c0013090:	31 c0                	xor    eax,eax
c0013092:	c3                   	ret    
c0013093:	90                   	nop

c0013094 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013094:	b8 0a 00 00 00       	mov    eax,0xa
c0013099:	c3                   	ret    

c001309a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001309a:	b8 0a 00 00 00       	mov    eax,0xa
c001309f:	c3                   	ret    

c00130a0 <Filesystem::getFileFirstSector(char const*)>:
c00130a0:	31 c0                	xor    eax,eax
c00130a2:	31 d2                	xor    edx,edx
c00130a4:	c3                   	ret    
c00130a5:	90                   	nop

c00130a6 <File::~File()>:
c00130a6:	83 ec 0c             	sub    esp,0xc
c00130a9:	ba 44 b9 02 c0       	mov    edx,0xc002b944
c00130ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b2:	89 10                	mov    DWORD PTR [eax],edx
c00130b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b8:	83 ec 0c             	sub    esp,0xc
c00130bb:	50                   	push   eax
c00130bc:	e8 0f e7 ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c00130c1:	83 c4 10             	add    esp,0x10
c00130c4:	90                   	nop
c00130c5:	83 c4 0c             	add    esp,0xc
c00130c8:	c3                   	ret    
c00130c9:	90                   	nop

c00130ca <File::~File()>:
c00130ca:	83 ec 0c             	sub    esp,0xc
c00130cd:	83 ec 0c             	sub    esp,0xc
c00130d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d4:	e8 cd ff ff ff       	call   c00130a6 <File::~File()>
c00130d9:	83 c4 10             	add    esp,0x10
c00130dc:	83 ec 08             	sub    esp,0x8
c00130df:	68 14 01 00 00       	push   0x114
c00130e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e8:	e8 6a fc ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	83 c4 0c             	add    esp,0xc
c00130f3:	c3                   	ret    

c00130f4 <Directory::~Directory()>:
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	ba 60 b9 02 c0       	mov    edx,0xc002b960
c00130fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013100:	89 10                	mov    DWORD PTR [eax],edx
c0013102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	50                   	push   eax
c001310a:	e8 c1 e6 ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c001310f:	83 c4 10             	add    esp,0x10
c0013112:	90                   	nop
c0013113:	83 c4 0c             	add    esp,0xc
c0013116:	c3                   	ret    
c0013117:	90                   	nop

c0013118 <Directory::~Directory()>:
c0013118:	83 ec 0c             	sub    esp,0xc
c001311b:	83 ec 0c             	sub    esp,0xc
c001311e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013122:	e8 cd ff ff ff       	call   c00130f4 <Directory::~Directory()>
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	83 ec 08             	sub    esp,0x8
c001312d:	68 14 01 00 00       	push   0x114
c0013132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013136:	e8 1c fc ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	83 c4 0c             	add    esp,0xc
c0013141:	c3                   	ret    

c0013142 <Filesystem::Filesystem()>:
c0013142:	ba dc b8 02 c0       	mov    edx,0xc002b8dc
c0013147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001314b:	89 10                	mov    DWORD PTR [eax],edx
c001314d:	8b 15 94 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f594
c0013153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013157:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001315a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001315e:	a3 94 f5 02 c0       	mov    ds:0xc002f594,eax
c0013163:	90                   	nop
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <Filesystem::~Filesystem()>:
c0013166:	ba dc b8 02 c0       	mov    edx,0xc002b8dc
c001316b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001316f:	89 10                	mov    DWORD PTR [eax],edx
c0013171:	90                   	nop
c0013172:	c3                   	ret    
c0013173:	90                   	nop

c0013174 <Filesystem::~Filesystem()>:
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001317b:	e8 e6 ff ff ff       	call   c0013166 <Filesystem::~Filesystem()>
c0013180:	83 c4 04             	add    esp,0x4
c0013183:	83 ec 08             	sub    esp,0x8
c0013186:	6a 08                	push   0x8
c0013188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001318c:	e8 c6 fb ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0013191:	83 c4 10             	add    esp,0x10
c0013194:	83 c4 0c             	add    esp,0xc
c0013197:	c3                   	ret    

c0013198 <Fs::getcwd(Process*, char*, int)>:
c0013198:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001319c:	31 c0                	xor    eax,eax
c001319e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131a1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131a5:	7d 15                	jge    c00131bc <Fs::getcwd(Process*, char*, int)+0x24>
c00131a7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131ab:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131b2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131b5:	84 c9                	test   cl,cl
c00131b7:	74 06                	je     c00131bf <Fs::getcwd(Process*, char*, int)+0x27>
c00131b9:	40                   	inc    eax
c00131ba:	eb e2                	jmp    c001319e <Fs::getcwd(Process*, char*, int)+0x6>
c00131bc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00131bf:	31 c0                	xor    eax,eax
c00131c1:	c3                   	ret    

c00131c2 <Fs::initVFS()>:
c00131c2:	83 ec 18             	sub    esp,0x18
c00131c5:	6a 08                	push   0x8
c00131c7:	e8 c0 c6 ff ff       	call   c000f88c <malloc>
c00131cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00131cf:	e8 ba e7 00 00       	call   c002198e <FAT::FAT()>
c00131d4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00131db:	e8 ac c6 ff ff       	call   c000f88c <malloc>
c00131e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00131e3:	e8 e2 f9 00 00       	call   c0022bca <ISO9660::ISO9660()>
c00131e8:	83 c4 1c             	add    esp,0x1c
c00131eb:	c3                   	ret    

c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>:
c00131ec:	55                   	push   ebp
c00131ed:	57                   	push   edi
c00131ee:	56                   	push   esi
c00131ef:	53                   	push   ebx
c00131f0:	81 ec 10 04 00 00    	sub    esp,0x410
c00131f6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00131fd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013204:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001320b:	68 00 04 00 00       	push   0x400
c0013210:	6a 00                	push   0x0
c0013212:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013216:	56                   	push   esi
c0013217:	e8 34 d5 fe ff       	call   c0000750 <memset>
c001321c:	83 c4 10             	add    esp,0x10
c001321f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013223:	75 0b                	jne    c0013230 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013225:	50                   	push   eax
c0013226:	50                   	push   eax
c0013227:	57                   	push   edi
c0013228:	56                   	push   esi
c0013229:	e8 de d5 fe ff       	call   c000080c <strcpy>
c001322e:	eb 41                	jmp    c0013271 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013230:	8a 07                	mov    al,BYTE PTR [edi]
c0013232:	3c 5c                	cmp    al,0x5c
c0013234:	74 04                	je     c001323a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013236:	3c 2f                	cmp    al,0x2f
c0013238:	75 18                	jne    c0013252 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001323a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001323d:	3c 60                	cmp    al,0x60
c001323f:	7e 03                	jle    c0013244 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013241:	83 e8 20             	sub    eax,0x20
c0013244:	88 04 24             	mov    BYTE PTR [esp],al
c0013247:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001324e:	50                   	push   eax
c001324f:	50                   	push   eax
c0013250:	eb 18                	jmp    c001326a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013252:	50                   	push   eax
c0013253:	50                   	push   eax
c0013254:	55                   	push   ebp
c0013255:	56                   	push   esi
c0013256:	e8 b1 d5 fe ff       	call   c000080c <strcpy>
c001325b:	5a                   	pop    edx
c001325c:	59                   	pop    ecx
c001325d:	68 29 d1 02 c0       	push   0xc002d129
c0013262:	56                   	push   esi
c0013263:	e8 e4 d6 fe ff       	call   c000094c <strcat>
c0013268:	5d                   	pop    ebp
c0013269:	58                   	pop    eax
c001326a:	57                   	push   edi
c001326b:	56                   	push   esi
c001326c:	e8 db d6 fe ff       	call   c000094c <strcat>
c0013271:	83 c4 10             	add    esp,0x10
c0013274:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013277:	3c 60                	cmp    al,0x60
c0013279:	7e 03                	jle    c001327e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001327b:	83 e8 20             	sub    eax,0x20
c001327e:	88 04 24             	mov    BYTE PTR [esp],al
c0013281:	88 03                	mov    BYTE PTR [ebx],al
c0013283:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001328a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013290:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013294:	bf 03 00 00 00       	mov    edi,0x3
c0013299:	b8 03 00 00 00       	mov    eax,0x3
c001329e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132a1:	84 d2                	test   dl,dl
c00132a3:	0f 84 91 00 00 00    	je     c001333a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132a9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132ac:	80 fa 5c             	cmp    dl,0x5c
c00132af:	74 05                	je     c00132b6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132b1:	80 fa 2f             	cmp    dl,0x2f
c00132b4:	75 12                	jne    c00132c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132b6:	89 c5                	mov    ebp,eax
c00132b8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132bd:	74 09                	je     c00132c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132bf:	40                   	inc    eax
c00132c0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00132c4:	89 cf                	mov    edi,ecx
c00132c6:	eb d6                	jmp    c001329e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00132c8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00132cd:	75 5b                	jne    c001332a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132cf:	80 fa 2e             	cmp    dl,0x2e
c00132d2:	75 56                	jne    c001332a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132d4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00132d8:	74 19                	je     c00132f3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00132da:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132df:	74 53                	je     c0013334 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132e1:	89 f9                	mov    ecx,edi
c00132e3:	41                   	inc    ecx
c00132e4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00132e7:	80 fa 2f             	cmp    dl,0x2f
c00132ea:	74 f7                	je     c00132e3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132ec:	80 fa 5c             	cmp    dl,0x5c
c00132ef:	74 f2                	je     c00132e3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132f1:	eb d1                	jmp    c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132f3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132f8:	74 3a                	je     c0013334 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132fa:	83 f8 03             	cmp    eax,0x3
c00132fd:	74 c5                	je     c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132ff:	41                   	inc    ecx
c0013300:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013303:	80 fa 2f             	cmp    dl,0x2f
c0013306:	74 f7                	je     c00132ff <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013308:	80 fa 5c             	cmp    dl,0x5c
c001330b:	74 f2                	je     c00132ff <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001330d:	48                   	dec    eax
c001330e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013312:	75 06                	jne    c001331a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013314:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013318:	eb f3                	jmp    c001330d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001331a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001331e:	74 07                	je     c0013327 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013320:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013324:	48                   	dec    eax
c0013325:	eb f3                	jmp    c001331a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013327:	40                   	inc    eax
c0013328:	eb 9a                	jmp    c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001332a:	80 fa 2f             	cmp    dl,0x2f
c001332d:	74 95                	je     c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001332f:	80 fa 5c             	cmp    dl,0x5c
c0013332:	74 90                	je     c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013334:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013337:	40                   	inc    eax
c0013338:	eb 8a                	jmp    c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001333a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001333e:	83 ec 0c             	sub    esp,0xc
c0013341:	53                   	push   ebx
c0013342:	e8 25 d4 fe ff       	call   c000076c <strlen>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001334f:	75 26                	jne    c0013377 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013351:	83 ec 0c             	sub    esp,0xc
c0013354:	53                   	push   ebx
c0013355:	e8 12 d4 fe ff       	call   c000076c <strlen>
c001335a:	83 c4 10             	add    esp,0x10
c001335d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013362:	74 26                	je     c001338a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013364:	83 ec 0c             	sub    esp,0xc
c0013367:	53                   	push   ebx
c0013368:	e8 ff d3 fe ff       	call   c000076c <strlen>
c001336d:	83 c4 10             	add    esp,0x10
c0013370:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013375:	eb c7                	jmp    c001333e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013377:	83 ec 0c             	sub    esp,0xc
c001337a:	53                   	push   ebx
c001337b:	e8 ec d3 fe ff       	call   c000076c <strlen>
c0013380:	83 c4 10             	add    esp,0x10
c0013383:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013388:	74 c7                	je     c0013351 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001338a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013390:	5b                   	pop    ebx
c0013391:	5e                   	pop    esi
c0013392:	5f                   	pop    edi
c0013393:	5d                   	pop    ebp
c0013394:	c3                   	ret    
c0013395:	90                   	nop

c0013396 <File::File(char const*, Process*)>:
c0013396:	83 ec 0c             	sub    esp,0xc
c0013399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001339d:	83 ec 08             	sub    esp,0x8
c00133a0:	6a 00                	push   0x0
c00133a2:	50                   	push   eax
c00133a3:	e8 46 e2 ff ff       	call   c00115ee <UnixFile::UnixFile(int)>
c00133a8:	83 c4 10             	add    esp,0x10
c00133ab:	ba 44 b9 02 c0       	mov    edx,0xc002b944
c00133b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b4:	89 10                	mov    DWORD PTR [eax],edx
c00133b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c4:	83 c0 0d             	add    eax,0xd
c00133c7:	83 ec 04             	sub    esp,0x4
c00133ca:	52                   	push   edx
c00133cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133cf:	50                   	push   eax
c00133d0:	e8 17 fe ff ff       	call   c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133dc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00133df:	8d 50 bf             	lea    edx,[eax-0x41]
c00133e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00133ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00133f4:	90                   	nop
c00133f5:	83 c4 0c             	add    esp,0xc
c00133f8:	c3                   	ret    
c00133f9:	90                   	nop

c00133fa <File::open(FileOpenMode)>:
c00133fa:	53                   	push   ebx
c00133fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013400:	83 ec 08             	sub    esp,0x8
c0013403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013407:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001340e:	80 fa 19             	cmp    dl,0x19
c0013411:	77 40                	ja     c0013453 <File::open(FileOpenMode)+0x59>
c0013413:	8b 14 95 20 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd05e0]
c001341a:	85 d2                	test   edx,edx
c001341c:	74 35                	je     c0013453 <File::open(FileOpenMode)+0x59>
c001341e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013424:	85 d2                	test   edx,edx
c0013426:	74 2b                	je     c0013453 <File::open(FileOpenMode)+0x59>
c0013428:	b8 06 00 00 00       	mov    eax,0x6
c001342d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013431:	75 20                	jne    c0013453 <File::open(FileOpenMode)+0x59>
c0013433:	8b 02                	mov    eax,DWORD PTR [edx]
c0013435:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001343b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001343f:	51                   	push   ecx
c0013440:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013443:	51                   	push   ecx
c0013444:	52                   	push   edx
c0013445:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013448:	83 c4 10             	add    esp,0x10
c001344b:	85 c0                	test   eax,eax
c001344d:	75 04                	jne    c0013453 <File::open(FileOpenMode)+0x59>
c001344f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013453:	83 c4 08             	add    esp,0x8
c0013456:	5b                   	pop    ebx
c0013457:	c3                   	ret    

c0013458 <File::close()>:
c0013458:	53                   	push   ebx
c0013459:	b8 0b 00 00 00       	mov    eax,0xb
c001345e:	83 ec 08             	sub    esp,0x8
c0013461:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013465:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001346c:	80 fa 19             	cmp    dl,0x19
c001346f:	77 41                	ja     c00134b2 <File::close()+0x5a>
c0013471:	8b 1c 95 20 fa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd05e0]
c0013478:	85 db                	test   ebx,ebx
c001347a:	74 36                	je     c00134b2 <File::close()+0x5a>
c001347c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013483:	74 2d                	je     c00134b2 <File::close()+0x5a>
c0013485:	b8 05 00 00 00       	mov    eax,0x5
c001348a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001348e:	74 22                	je     c00134b2 <File::close()+0x5a>
c0013490:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013494:	8b 04 95 20 fa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd05e0]
c001349b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134a1:	53                   	push   ebx
c00134a2:	53                   	push   ebx
c00134a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00134a5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134ab:	50                   	push   eax
c00134ac:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	83 c4 08             	add    esp,0x8
c00134b5:	5b                   	pop    ebx
c00134b6:	c3                   	ret    
c00134b7:	90                   	nop

c00134b8 <File::seek(unsigned long long)>:
c00134b8:	56                   	push   esi
c00134b9:	53                   	push   ebx
c00134ba:	b8 0b 00 00 00       	mov    eax,0xb
c00134bf:	51                   	push   ecx
c00134c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00134c8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00134cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134d3:	80 fa 19             	cmp    dl,0x19
c00134d6:	77 31                	ja     c0013509 <File::seek(unsigned long long)+0x51>
c00134d8:	8b 14 95 20 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd05e0]
c00134df:	85 d2                	test   edx,edx
c00134e1:	74 26                	je     c0013509 <File::seek(unsigned long long)+0x51>
c00134e3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134e9:	85 d2                	test   edx,edx
c00134eb:	74 1c                	je     c0013509 <File::seek(unsigned long long)+0x51>
c00134ed:	b8 05 00 00 00       	mov    eax,0x5
c00134f2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00134f6:	74 11                	je     c0013509 <File::seek(unsigned long long)+0x51>
c00134f8:	8b 02                	mov    eax,DWORD PTR [edx]
c00134fa:	53                   	push   ebx
c00134fb:	51                   	push   ecx
c00134fc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013502:	52                   	push   edx
c0013503:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013506:	83 c4 10             	add    esp,0x10
c0013509:	5a                   	pop    edx
c001350a:	5b                   	pop    ebx
c001350b:	5e                   	pop    esi
c001350c:	c3                   	ret    
c001350d:	90                   	nop

c001350e <File::tell(unsigned long long*)>:
c001350e:	83 ec 0c             	sub    esp,0xc
c0013511:	b8 0b 00 00 00       	mov    eax,0xb
c0013516:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001351a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013521:	80 fa 19             	cmp    dl,0x19
c0013524:	77 34                	ja     c001355a <File::tell(unsigned long long*)+0x4c>
c0013526:	8b 14 95 20 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd05e0]
c001352d:	85 d2                	test   edx,edx
c001352f:	74 29                	je     c001355a <File::tell(unsigned long long*)+0x4c>
c0013531:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013537:	85 d2                	test   edx,edx
c0013539:	74 1f                	je     c001355a <File::tell(unsigned long long*)+0x4c>
c001353b:	b8 05 00 00 00       	mov    eax,0x5
c0013540:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013544:	74 14                	je     c001355a <File::tell(unsigned long long*)+0x4c>
c0013546:	50                   	push   eax
c0013547:	8b 02                	mov    eax,DWORD PTR [edx]
c0013549:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001354d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013553:	52                   	push   edx
c0013554:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	83 c4 0c             	add    esp,0xc
c001355d:	c3                   	ret    

c001355e <File::rewind()>:
c001355e:	83 ec 10             	sub    esp,0x10
c0013561:	6a 00                	push   0x0
c0013563:	6a 00                	push   0x0
c0013565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013569:	e8 4a ff ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001356e:	83 c4 1c             	add    esp,0x1c
c0013571:	c3                   	ret    

c0013572 <File::unlink()>:
c0013572:	83 ec 0c             	sub    esp,0xc
c0013575:	b8 0b 00 00 00       	mov    eax,0xb
c001357a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001357e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013585:	80 f9 19             	cmp    cl,0x19
c0013588:	77 2f                	ja     c00135b9 <File::unlink()+0x47>
c001358a:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c0013591:	85 c9                	test   ecx,ecx
c0013593:	74 24                	je     c00135b9 <File::unlink()+0x47>
c0013595:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001359b:	85 c9                	test   ecx,ecx
c001359d:	74 1a                	je     c00135b9 <File::unlink()+0x47>
c001359f:	b8 06 00 00 00       	mov    eax,0x6
c00135a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135a8:	75 0f                	jne    c00135b9 <File::unlink()+0x47>
c00135aa:	83 c2 0d             	add    edx,0xd
c00135ad:	50                   	push   eax
c00135ae:	50                   	push   eax
c00135af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135b1:	52                   	push   edx
c00135b2:	51                   	push   ecx
c00135b3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135b6:	83 c4 10             	add    esp,0x10
c00135b9:	83 c4 0c             	add    esp,0xc
c00135bc:	c3                   	ret    
c00135bd:	90                   	nop

c00135be <File::rename(char const*)>:
c00135be:	83 ec 0c             	sub    esp,0xc
c00135c1:	b8 0b 00 00 00       	mov    eax,0xb
c00135c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135d1:	80 f9 19             	cmp    cl,0x19
c00135d4:	77 32                	ja     c0013608 <File::rename(char const*)+0x4a>
c00135d6:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c00135dd:	85 c9                	test   ecx,ecx
c00135df:	74 27                	je     c0013608 <File::rename(char const*)+0x4a>
c00135e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135e7:	85 c9                	test   ecx,ecx
c00135e9:	74 1d                	je     c0013608 <File::rename(char const*)+0x4a>
c00135eb:	b8 06 00 00 00       	mov    eax,0x6
c00135f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135f4:	75 12                	jne    c0013608 <File::rename(char const*)+0x4a>
c00135f6:	83 c2 0d             	add    edx,0xd
c00135f9:	50                   	push   eax
c00135fa:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013600:	52                   	push   edx
c0013601:	51                   	push   ecx
c0013602:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013605:	83 c4 10             	add    esp,0x10
c0013608:	83 c4 0c             	add    esp,0xc
c001360b:	c3                   	ret    

c001360c <File::chfatattr(unsigned char, unsigned char)>:
c001360c:	57                   	push   edi
c001360d:	b8 0b 00 00 00       	mov    eax,0xb
c0013612:	56                   	push   esi
c0013613:	53                   	push   ebx
c0013614:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013618:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001361c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013623:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013627:	80 f9 19             	cmp    cl,0x19
c001362a:	77 37                	ja     c0013663 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001362c:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c0013633:	85 c9                	test   ecx,ecx
c0013635:	74 2c                	je     c0013663 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013637:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001363d:	85 c9                	test   ecx,ecx
c001363f:	74 22                	je     c0013663 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013641:	b8 06 00 00 00       	mov    eax,0x6
c0013646:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001364a:	75 17                	jne    c0013663 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001364c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001364e:	89 f0                	mov    eax,esi
c0013650:	83 c2 0d             	add    edx,0xd
c0013653:	0f b6 f0             	movzx  esi,al
c0013656:	0f b6 db             	movzx  ebx,bl
c0013659:	56                   	push   esi
c001365a:	53                   	push   ebx
c001365b:	52                   	push   edx
c001365c:	51                   	push   ecx
c001365d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013660:	83 c4 10             	add    esp,0x10
c0013663:	5b                   	pop    ebx
c0013664:	5e                   	pop    esi
c0013665:	5f                   	pop    edi
c0013666:	c3                   	ret    
c0013667:	90                   	nop

c0013668 <File::exists()>:
c0013668:	83 ec 0c             	sub    esp,0xc
c001366b:	31 c0                	xor    eax,eax
c001366d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013671:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013678:	80 f9 19             	cmp    cl,0x19
c001367b:	77 24                	ja     c00136a1 <File::exists()+0x39>
c001367d:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c0013684:	85 c9                	test   ecx,ecx
c0013686:	74 19                	je     c00136a1 <File::exists()+0x39>
c0013688:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001368e:	85 c9                	test   ecx,ecx
c0013690:	74 0f                	je     c00136a1 <File::exists()+0x39>
c0013692:	83 c2 0d             	add    edx,0xd
c0013695:	50                   	push   eax
c0013696:	50                   	push   eax
c0013697:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013699:	52                   	push   edx
c001369a:	51                   	push   ecx
c001369b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001369e:	83 c4 10             	add    esp,0x10
c00136a1:	83 c4 0c             	add    esp,0xc
c00136a4:	c3                   	ret    
c00136a5:	90                   	nop

c00136a6 <File::stat(unsigned long long*, bool*)>:
c00136a6:	56                   	push   esi
c00136a7:	53                   	push   ebx
c00136a8:	50                   	push   eax
c00136a9:	b8 0b 00 00 00       	mov    eax,0xb
c00136ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136c1:	80 f9 19             	cmp    cl,0x19
c00136c4:	77 3d                	ja     c0013703 <File::stat(unsigned long long*, bool*)+0x5d>
c00136c6:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c00136cd:	85 c9                	test   ecx,ecx
c00136cf:	74 32                	je     c0013703 <File::stat(unsigned long long*, bool*)+0x5d>
c00136d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136d7:	85 c9                	test   ecx,ecx
c00136d9:	74 28                	je     c0013703 <File::stat(unsigned long long*, bool*)+0x5d>
c00136db:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136dd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136e1:	74 13                	je     c00136f6 <File::stat(unsigned long long*, bool*)+0x50>
c00136e3:	83 ec 04             	sub    esp,0x4
c00136e6:	56                   	push   esi
c00136e7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00136ed:	51                   	push   ecx
c00136ee:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00136f1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00136f4:	eb 0a                	jmp    c0013700 <File::stat(unsigned long long*, bool*)+0x5a>
c00136f6:	53                   	push   ebx
c00136f7:	83 c2 0d             	add    edx,0xd
c00136fa:	56                   	push   esi
c00136fb:	52                   	push   edx
c00136fc:	51                   	push   ecx
c00136fd:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013700:	83 c4 10             	add    esp,0x10
c0013703:	5a                   	pop    edx
c0013704:	5b                   	pop    ebx
c0013705:	5e                   	pop    esi
c0013706:	c3                   	ret    

c0013707 <Fs::setcwd(Process*, char*)>:
c0013707:	55                   	push   ebp
c0013708:	57                   	push   edi
c0013709:	56                   	push   esi
c001370a:	53                   	push   ebx
c001370b:	81 ec 20 02 00 00    	sub    esp,0x220
c0013711:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013718:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001371e:	57                   	push   edi
c001371f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013726:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001372a:	56                   	push   esi
c001372b:	e8 bc fa ff ff       	call   c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>
c0013730:	89 34 24             	mov    DWORD PTR [esp],esi
c0013733:	e8 34 d0 fe ff       	call   c000076c <strlen>
c0013738:	83 c4 10             	add    esp,0x10
c001373b:	83 f8 02             	cmp    eax,0x2
c001373e:	77 17                	ja     c0013757 <Fs::setcwd(Process*, char*)+0x50>
c0013740:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013745:	83 e8 41             	sub    eax,0x41
c0013748:	83 f8 19             	cmp    eax,0x19
c001374b:	76 24                	jbe    c0013771 <Fs::setcwd(Process*, char*)+0x6a>
c001374d:	b8 03 00 00 00       	mov    eax,0x3
c0013752:	e9 e0 00 00 00       	jmp    c0013837 <Fs::setcwd(Process*, char*)+0x130>
c0013757:	83 ec 0c             	sub    esp,0xc
c001375a:	56                   	push   esi
c001375b:	e8 0c d0 fe ff       	call   c000076c <strlen>
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	83 f8 03             	cmp    eax,0x3
c0013766:	75 34                	jne    c001379c <Fs::setcwd(Process*, char*)+0x95>
c0013768:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001376d:	75 2d                	jne    c001379c <Fs::setcwd(Process*, char*)+0x95>
c001376f:	eb cf                	jmp    c0013740 <Fs::setcwd(Process*, char*)+0x39>
c0013771:	8b 14 85 20 fa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd05e0]
c0013778:	b8 05 00 00 00       	mov    eax,0x5
c001377d:	85 d2                	test   edx,edx
c001377f:	0f 84 b2 00 00 00    	je     c0013837 <Fs::setcwd(Process*, char*)+0x130>
c0013785:	b8 06 00 00 00       	mov    eax,0x6
c001378a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013791:	0f 85 92 00 00 00    	jne    c0013829 <Fs::setcwd(Process*, char*)+0x122>
c0013797:	e9 9b 00 00 00       	jmp    c0013837 <Fs::setcwd(Process*, char*)+0x130>
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	68 14 01 00 00       	push   0x114
c00137a4:	e8 e3 c0 ff ff       	call   c000f88c <malloc>
c00137a9:	83 c4 0c             	add    esp,0xc
c00137ac:	89 c3                	mov    ebx,eax
c00137ae:	55                   	push   ebp
c00137af:	56                   	push   esi
c00137b0:	50                   	push   eax
c00137b1:	e8 e0 fb ff ff       	call   c0013396 <File::File(char const*, Process*)>
c00137b6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00137bb:	83 c4 0c             	add    esp,0xc
c00137be:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00137c2:	50                   	push   eax
c00137c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137c7:	50                   	push   eax
c00137c8:	53                   	push   ebx
c00137c9:	e8 d8 fe ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	83 f8 02             	cmp    eax,0x2
c00137d4:	74 04                	je     c00137da <Fs::setcwd(Process*, char*)+0xd3>
c00137d6:	85 c0                	test   eax,eax
c00137d8:	74 1c                	je     c00137f6 <Fs::setcwd(Process*, char*)+0xef>
c00137da:	b8 01 00 00 00       	mov    eax,0x1
c00137df:	85 db                	test   ebx,ebx
c00137e1:	74 54                	je     c0013837 <Fs::setcwd(Process*, char*)+0x130>
c00137e3:	83 ec 0c             	sub    esp,0xc
c00137e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137e8:	53                   	push   ebx
c00137e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	b8 01 00 00 00       	mov    eax,0x1
c00137f4:	eb 41                	jmp    c0013837 <Fs::setcwd(Process*, char*)+0x130>
c00137f6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00137fb:	75 1c                	jne    c0013819 <Fs::setcwd(Process*, char*)+0x112>
c00137fd:	b8 02 00 00 00       	mov    eax,0x2
c0013802:	85 db                	test   ebx,ebx
c0013804:	74 31                	je     c0013837 <Fs::setcwd(Process*, char*)+0x130>
c0013806:	83 ec 0c             	sub    esp,0xc
c0013809:	8b 03                	mov    eax,DWORD PTR [ebx]
c001380b:	53                   	push   ebx
c001380c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001380f:	83 c4 10             	add    esp,0x10
c0013812:	b8 02 00 00 00       	mov    eax,0x2
c0013817:	eb 1e                	jmp    c0013837 <Fs::setcwd(Process*, char*)+0x130>
c0013819:	85 db                	test   ebx,ebx
c001381b:	74 0c                	je     c0013829 <Fs::setcwd(Process*, char*)+0x122>
c001381d:	83 ec 0c             	sub    esp,0xc
c0013820:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013822:	53                   	push   ebx
c0013823:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	50                   	push   eax
c001382a:	50                   	push   eax
c001382b:	56                   	push   esi
c001382c:	57                   	push   edi
c001382d:	e8 da cf fe ff       	call   c000080c <strcpy>
c0013832:	83 c4 10             	add    esp,0x10
c0013835:	31 c0                	xor    eax,eax
c0013837:	81 c4 1c 02 00 00    	add    esp,0x21c
c001383d:	5b                   	pop    ebx
c001383e:	5e                   	pop    esi
c001383f:	5f                   	pop    edi
c0013840:	5d                   	pop    ebp
c0013841:	c3                   	ret    

c0013842 <Directory::Directory(char const*, Process*)>:
c0013842:	83 ec 0c             	sub    esp,0xc
c0013845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013849:	83 ec 08             	sub    esp,0x8
c001384c:	6a 00                	push   0x0
c001384e:	50                   	push   eax
c001384f:	e8 9a dd ff ff       	call   c00115ee <UnixFile::UnixFile(int)>
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	ba 60 b9 02 c0       	mov    edx,0xc002b960
c001385c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013860:	89 10                	mov    DWORD PTR [eax],edx
c0013862:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013866:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001386c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013870:	83 c0 0d             	add    eax,0xd
c0013873:	83 ec 04             	sub    esp,0x4
c0013876:	52                   	push   edx
c0013877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001387b:	50                   	push   eax
c001387c:	e8 6b f9 ff ff       	call   c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>
c0013881:	83 c4 10             	add    esp,0x10
c0013884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013888:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001388b:	8d 50 bf             	lea    edx,[eax-0x41]
c001388e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013892:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001389c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138a0:	90                   	nop
c00138a1:	83 c4 0c             	add    esp,0xc
c00138a4:	c3                   	ret    
c00138a5:	90                   	nop

c00138a6 <Directory::open()>:
c00138a6:	53                   	push   ebx
c00138a7:	b8 0b 00 00 00       	mov    eax,0xb
c00138ac:	83 ec 08             	sub    esp,0x8
c00138af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00138ba:	80 fa 19             	cmp    dl,0x19
c00138bd:	77 3d                	ja     c00138fc <Directory::open()+0x56>
c00138bf:	8b 14 95 20 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd05e0]
c00138c6:	85 d2                	test   edx,edx
c00138c8:	74 32                	je     c00138fc <Directory::open()+0x56>
c00138ca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00138d0:	85 d2                	test   edx,edx
c00138d2:	74 28                	je     c00138fc <Directory::open()+0x56>
c00138d4:	b8 06 00 00 00       	mov    eax,0x6
c00138d9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00138dd:	75 1d                	jne    c00138fc <Directory::open()+0x56>
c00138df:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00138e5:	50                   	push   eax
c00138e6:	8b 02                	mov    eax,DWORD PTR [edx]
c00138e8:	51                   	push   ecx
c00138e9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00138ec:	51                   	push   ecx
c00138ed:	52                   	push   edx
c00138ee:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00138f1:	83 c4 10             	add    esp,0x10
c00138f4:	85 c0                	test   eax,eax
c00138f6:	75 04                	jne    c00138fc <Directory::open()+0x56>
c00138f8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00138fc:	83 c4 08             	add    esp,0x8
c00138ff:	5b                   	pop    ebx
c0013900:	c3                   	ret    
c0013901:	90                   	nop

c0013902 <Directory::close()>:
c0013902:	53                   	push   ebx
c0013903:	b8 0b 00 00 00       	mov    eax,0xb
c0013908:	83 ec 08             	sub    esp,0x8
c001390b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001390f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013916:	80 fa 19             	cmp    dl,0x19
c0013919:	77 41                	ja     c001395c <Directory::close()+0x5a>
c001391b:	8b 1c 95 20 fa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd05e0]
c0013922:	85 db                	test   ebx,ebx
c0013924:	74 36                	je     c001395c <Directory::close()+0x5a>
c0013926:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001392d:	74 2d                	je     c001395c <Directory::close()+0x5a>
c001392f:	b8 05 00 00 00       	mov    eax,0x5
c0013934:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013938:	74 22                	je     c001395c <Directory::close()+0x5a>
c001393a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001393e:	8b 04 95 20 fa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd05e0]
c0013945:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001394b:	53                   	push   ebx
c001394c:	53                   	push   ebx
c001394d:	8b 10                	mov    edx,DWORD PTR [eax]
c001394f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013955:	50                   	push   eax
c0013956:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013959:	83 c4 10             	add    esp,0x10
c001395c:	83 c4 08             	add    esp,0x8
c001395f:	5b                   	pop    ebx
c0013960:	c3                   	ret    
c0013961:	90                   	nop

c0013962 <Directory::unlink()>:
c0013962:	83 ec 0c             	sub    esp,0xc
c0013965:	b8 0b 00 00 00       	mov    eax,0xb
c001396a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001396e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013975:	80 f9 19             	cmp    cl,0x19
c0013978:	77 2f                	ja     c00139a9 <Directory::unlink()+0x47>
c001397a:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c0013981:	85 c9                	test   ecx,ecx
c0013983:	74 24                	je     c00139a9 <Directory::unlink()+0x47>
c0013985:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001398b:	85 c9                	test   ecx,ecx
c001398d:	74 1a                	je     c00139a9 <Directory::unlink()+0x47>
c001398f:	b8 06 00 00 00       	mov    eax,0x6
c0013994:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013998:	75 0f                	jne    c00139a9 <Directory::unlink()+0x47>
c001399a:	83 c2 0d             	add    edx,0xd
c001399d:	50                   	push   eax
c001399e:	50                   	push   eax
c001399f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139a1:	52                   	push   edx
c00139a2:	51                   	push   ecx
c00139a3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139a6:	83 c4 10             	add    esp,0x10
c00139a9:	83 c4 0c             	add    esp,0xc
c00139ac:	c3                   	ret    
c00139ad:	90                   	nop

c00139ae <Directory::rename(char const*)>:
c00139ae:	83 ec 0c             	sub    esp,0xc
c00139b1:	b8 0b 00 00 00       	mov    eax,0xb
c00139b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139c1:	80 f9 19             	cmp    cl,0x19
c00139c4:	77 32                	ja     c00139f8 <Directory::rename(char const*)+0x4a>
c00139c6:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c00139cd:	85 c9                	test   ecx,ecx
c00139cf:	74 27                	je     c00139f8 <Directory::rename(char const*)+0x4a>
c00139d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139d7:	85 c9                	test   ecx,ecx
c00139d9:	74 1d                	je     c00139f8 <Directory::rename(char const*)+0x4a>
c00139db:	b8 06 00 00 00       	mov    eax,0x6
c00139e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139e4:	75 12                	jne    c00139f8 <Directory::rename(char const*)+0x4a>
c00139e6:	83 c2 0d             	add    edx,0xd
c00139e9:	50                   	push   eax
c00139ea:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f0:	52                   	push   edx
c00139f1:	51                   	push   ecx
c00139f2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00139f5:	83 c4 10             	add    esp,0x10
c00139f8:	83 c4 0c             	add    esp,0xc
c00139fb:	c3                   	ret    

c00139fc <Directory::exists()>:
c00139fc:	83 ec 0c             	sub    esp,0xc
c00139ff:	31 c0                	xor    eax,eax
c0013a01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a05:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a0c:	80 f9 19             	cmp    cl,0x19
c0013a0f:	77 24                	ja     c0013a35 <Directory::exists()+0x39>
c0013a11:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c0013a18:	85 c9                	test   ecx,ecx
c0013a1a:	74 19                	je     c0013a35 <Directory::exists()+0x39>
c0013a1c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a22:	85 c9                	test   ecx,ecx
c0013a24:	74 0f                	je     c0013a35 <Directory::exists()+0x39>
c0013a26:	83 c2 0d             	add    edx,0xd
c0013a29:	50                   	push   eax
c0013a2a:	50                   	push   eax
c0013a2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a2d:	52                   	push   edx
c0013a2e:	51                   	push   ecx
c0013a2f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a32:	83 c4 10             	add    esp,0x10
c0013a35:	83 c4 0c             	add    esp,0xc
c0013a38:	c3                   	ret    
c0013a39:	90                   	nop

c0013a3a <Directory::read(dirent*)>:
c0013a3a:	83 ec 1c             	sub    esp,0x1c
c0013a3d:	b8 0b 00 00 00       	mov    eax,0xb
c0013a42:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a46:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a4d:	80 fa 19             	cmp    dl,0x19
c0013a50:	77 30                	ja     c0013a82 <Directory::read(dirent*)+0x48>
c0013a52:	8b 14 95 20 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd05e0]
c0013a59:	85 d2                	test   edx,edx
c0013a5b:	74 25                	je     c0013a82 <Directory::read(dirent*)+0x48>
c0013a5d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a64:	74 1c                	je     c0013a82 <Directory::read(dirent*)+0x48>
c0013a66:	83 ec 0c             	sub    esp,0xc
c0013a69:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a6b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a6f:	52                   	push   edx
c0013a70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a74:	6a 00                	push   0x0
c0013a76:	68 10 01 00 00       	push   0x110
c0013a7b:	51                   	push   ecx
c0013a7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a7f:	83 c4 20             	add    esp,0x20
c0013a82:	83 c4 1c             	add    esp,0x1c
c0013a85:	c3                   	ret    

c0013a86 <Directory::create()>:
c0013a86:	83 ec 0c             	sub    esp,0xc
c0013a89:	b8 0b 00 00 00       	mov    eax,0xb
c0013a8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a99:	80 f9 19             	cmp    cl,0x19
c0013a9c:	77 2f                	ja     c0013acd <Directory::create()+0x47>
c0013a9e:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c0013aa5:	85 c9                	test   ecx,ecx
c0013aa7:	74 24                	je     c0013acd <Directory::create()+0x47>
c0013aa9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013aaf:	85 c9                	test   ecx,ecx
c0013ab1:	74 1a                	je     c0013acd <Directory::create()+0x47>
c0013ab3:	b8 06 00 00 00       	mov    eax,0x6
c0013ab8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013abc:	75 0f                	jne    c0013acd <Directory::create()+0x47>
c0013abe:	83 c2 0d             	add    edx,0xd
c0013ac1:	50                   	push   eax
c0013ac2:	50                   	push   eax
c0013ac3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ac5:	52                   	push   edx
c0013ac6:	51                   	push   ecx
c0013ac7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013aca:	83 c4 10             	add    esp,0x10
c0013acd:	83 c4 0c             	add    esp,0xc
c0013ad0:	c3                   	ret    
c0013ad1:	90                   	nop

c0013ad2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013ad2:	b8 0a 00 00 00       	mov    eax,0xa
c0013ad7:	c3                   	ret    

c0013ad8 <Bus::Bus(char const*)>:
c0013ad8:	83 ec 0c             	sub    esp,0xc
c0013adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013adf:	83 ec 08             	sub    esp,0x8
c0013ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ae6:	50                   	push   eax
c0013ae7:	e8 88 09 00 00       	call   c0014474 <Device::Device(char const*)>
c0013aec:	83 c4 10             	add    esp,0x10
c0013aef:	ba 7c b9 02 c0       	mov    edx,0xc002b97c
c0013af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013af8:	89 10                	mov    DWORD PTR [eax],edx
c0013afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013afe:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b08:	90                   	nop
c0013b09:	83 c4 0c             	add    esp,0xc
c0013b0c:	c3                   	ret    
c0013b0d:	90                   	nop

c0013b0e <Bus::~Bus()>:
c0013b0e:	83 ec 0c             	sub    esp,0xc
c0013b11:	ba 7c b9 02 c0       	mov    edx,0xc002b97c
c0013b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1a:	89 10                	mov    DWORD PTR [eax],edx
c0013b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b20:	83 ec 0c             	sub    esp,0xc
c0013b23:	50                   	push   eax
c0013b24:	e8 15 06 00 00       	call   c001413e <Device::~Device()>
c0013b29:	83 c4 10             	add    esp,0x10
c0013b2c:	90                   	nop
c0013b2d:	83 c4 0c             	add    esp,0xc
c0013b30:	c3                   	ret    
c0013b31:	90                   	nop

c0013b32 <Bus::~Bus()>:
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	83 ec 0c             	sub    esp,0xc
c0013b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b3c:	e8 cd ff ff ff       	call   c0013b0e <Bus::~Bus()>
c0013b41:	83 c4 10             	add    esp,0x10
c0013b44:	83 ec 08             	sub    esp,0x8
c0013b47:	68 58 01 00 00       	push   0x158
c0013b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b50:	e8 02 f2 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0013b55:	83 c4 10             	add    esp,0x10
c0013b58:	83 c4 0c             	add    esp,0xc
c0013b5b:	c3                   	ret    

c0013b5c <Buzzer::Buzzer(char const*)>:
c0013b5c:	83 ec 0c             	sub    esp,0xc
c0013b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b63:	83 ec 08             	sub    esp,0x8
c0013b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b6a:	50                   	push   eax
c0013b6b:	e8 04 09 00 00       	call   c0014474 <Device::Device(char const*)>
c0013b70:	83 c4 10             	add    esp,0x10
c0013b73:	ba a8 b9 02 c0       	mov    edx,0xc002b9a8
c0013b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7c:	89 10                	mov    DWORD PTR [eax],edx
c0013b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b90:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013b9a:	90                   	nop
c0013b9b:	83 c4 0c             	add    esp,0xc
c0013b9e:	c3                   	ret    
c0013b9f:	90                   	nop

c0013ba0 <Buzzer::~Buzzer()>:
c0013ba0:	83 ec 0c             	sub    esp,0xc
c0013ba3:	ba a8 b9 02 c0       	mov    edx,0xc002b9a8
c0013ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bac:	89 10                	mov    DWORD PTR [eax],edx
c0013bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb2:	83 ec 0c             	sub    esp,0xc
c0013bb5:	50                   	push   eax
c0013bb6:	e8 83 05 00 00       	call   c001413e <Device::~Device()>
c0013bbb:	83 c4 10             	add    esp,0x10
c0013bbe:	90                   	nop
c0013bbf:	83 c4 0c             	add    esp,0xc
c0013bc2:	c3                   	ret    
c0013bc3:	90                   	nop

c0013bc4 <Buzzer::~Buzzer()>:
c0013bc4:	83 ec 0c             	sub    esp,0xc
c0013bc7:	83 ec 0c             	sub    esp,0xc
c0013bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bce:	e8 cd ff ff ff       	call   c0013ba0 <Buzzer::~Buzzer()>
c0013bd3:	83 c4 10             	add    esp,0x10
c0013bd6:	83 ec 08             	sub    esp,0x8
c0013bd9:	68 5c 01 00 00       	push   0x15c
c0013bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013be2:	e8 70 f1 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0013be7:	83 c4 10             	add    esp,0x10
c0013bea:	83 c4 0c             	add    esp,0xc
c0013bed:	c3                   	ret    

c0013bee <Buzzer::stop()>:
c0013bee:	83 ec 14             	sub    esp,0x14
c0013bf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bf5:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bf7:	6a 00                	push   0x0
c0013bf9:	50                   	push   eax
c0013bfa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013bfd:	83 c4 1c             	add    esp,0x1c
c0013c00:	c3                   	ret    

c0013c01 <beepThread(void*)>:
c0013c01:	53                   	push   ebx
c0013c02:	83 ec 08             	sub    esp,0x8
c0013c05:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0013c0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c0e:	48                   	dec    eax
c0013c0f:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0013c14:	75 01                	jne    c0013c17 <beepThread(void*)+0x16>
c0013c16:	fb                   	sti    
c0013c17:	50                   	push   eax
c0013c18:	50                   	push   eax
c0013c19:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c1e:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c24:	52                   	push   edx
c0013c25:	50                   	push   eax
c0013c26:	e8 30 ae 00 00       	call   c001ea5b <nanoSleep(unsigned long long)>
c0013c2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c2e:	e8 bb ff ff ff       	call   c0013bee <Buzzer::stop()>
c0013c33:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c3b:	83 c4 18             	add    esp,0x18
c0013c3e:	5b                   	pop    ebx
c0013c3f:	e9 13 ad 00 00       	jmp    c001e957 <blockTask(TaskState)>

c0013c44 <Buzzer::beep(int, int, bool)>:
c0013c44:	57                   	push   edi
c0013c45:	56                   	push   esi
c0013c46:	53                   	push   ebx
c0013c47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c4b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c53:	52                   	push   edx
c0013c54:	52                   	push   edx
c0013c55:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c5b:	56                   	push   esi
c0013c5c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c5f:	83 c4 10             	add    esp,0x10
c0013c62:	89 f8                	mov    eax,edi
c0013c64:	84 c0                	test   al,al
c0013c66:	74 1f                	je     c0013c87 <Buzzer::beep(int, int, bool)+0x43>
c0013c68:	50                   	push   eax
c0013c69:	50                   	push   eax
c0013c6a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c70:	99                   	cdq    
c0013c71:	52                   	push   edx
c0013c72:	50                   	push   eax
c0013c73:	e8 e3 ad 00 00       	call   c001ea5b <nanoSleep(unsigned long long)>
c0013c78:	83 c4 10             	add    esp,0x10
c0013c7b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c7f:	5b                   	pop    ebx
c0013c80:	5e                   	pop    esi
c0013c81:	5f                   	pop    edi
c0013c82:	e9 67 ff ff ff       	jmp    c0013bee <Buzzer::stop()>
c0013c87:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c8d:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0013c92:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013c9a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013c9e:	c7 44 24 14 01 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c01
c0013ca6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013caa:	5b                   	pop    ebx
c0013cab:	5e                   	pop    esi
c0013cac:	5f                   	pop    edi
c0013cad:	e9 62 a8 00 00       	jmp    c001e514 <Process::createThread(void (*)(void*), void*, int)>

c0013cb2 <User::loadClockSettings(int)>:
c0013cb2:	53                   	push   ebx
c0013cb3:	83 ec 14             	sub    esp,0x14
c0013cb6:	68 14 01 00 00       	push   0x114
c0013cbb:	e8 cc bb ff ff       	call   c000f88c <malloc>
c0013cc0:	83 c4 0c             	add    esp,0xc
c0013cc3:	89 c3                	mov    ebx,eax
c0013cc5:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c0013ccb:	68 d0 b9 02 c0       	push   0xc002b9d0
c0013cd0:	50                   	push   eax
c0013cd1:	e8 c0 f6 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c0013cd6:	58                   	pop    eax
c0013cd7:	5a                   	pop    edx
c0013cd8:	6a 01                	push   0x1
c0013cda:	53                   	push   ebx
c0013cdb:	e8 1a f7 ff ff       	call   c00133fa <File::open(FileOpenMode)>
c0013ce0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ce3:	e8 70 f7 ff ff       	call   c0013458 <File::close()>
c0013ce8:	83 c4 10             	add    esp,0x10
c0013ceb:	85 db                	test   ebx,ebx
c0013ced:	74 0f                	je     c0013cfe <User::loadClockSettings(int)+0x4c>
c0013cef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cf1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013cf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013cf8:	83 c4 08             	add    esp,0x8
c0013cfb:	5b                   	pop    ebx
c0013cfc:	ff e0                	jmp    eax
c0013cfe:	83 c4 08             	add    esp,0x8
c0013d01:	5b                   	pop    ebx
c0013d02:	c3                   	ret    
c0013d03:	90                   	nop

c0013d04 <Clock::Clock(char const*)>:
c0013d04:	83 ec 0c             	sub    esp,0xc
c0013d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0b:	83 ec 08             	sub    esp,0x8
c0013d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d12:	50                   	push   eax
c0013d13:	e8 5c 07 00 00       	call   c0014474 <Device::Device(char const*)>
c0013d18:	83 c4 10             	add    esp,0x10
c0013d1b:	ba f8 b9 02 c0       	mov    edx,0xc002b9f8
c0013d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d24:	89 10                	mov    DWORD PTR [eax],edx
c0013d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d34:	90                   	nop
c0013d35:	83 c4 0c             	add    esp,0xc
c0013d38:	c3                   	ret    
c0013d39:	90                   	nop

c0013d3a <Clock::~Clock()>:
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	ba f8 b9 02 c0       	mov    edx,0xc002b9f8
c0013d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d46:	89 10                	mov    DWORD PTR [eax],edx
c0013d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4c:	83 ec 0c             	sub    esp,0xc
c0013d4f:	50                   	push   eax
c0013d50:	e8 e9 03 00 00       	call   c001413e <Device::~Device()>
c0013d55:	83 c4 10             	add    esp,0x10
c0013d58:	90                   	nop
c0013d59:	83 c4 0c             	add    esp,0xc
c0013d5c:	c3                   	ret    
c0013d5d:	90                   	nop

c0013d5e <Clock::~Clock()>:
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	83 ec 0c             	sub    esp,0xc
c0013d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d68:	e8 cd ff ff ff       	call   c0013d3a <Clock::~Clock()>
c0013d6d:	83 c4 10             	add    esp,0x10
c0013d70:	83 ec 08             	sub    esp,0x8
c0013d73:	68 58 01 00 00       	push   0x158
c0013d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d7c:	e8 d6 ef ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0013d81:	83 c4 10             	add    esp,0x10
c0013d84:	83 c4 0c             	add    esp,0xc
c0013d87:	c3                   	ret    

c0013d88 <Clock::timeInSecondsLocal()>:
c0013d88:	53                   	push   ebx
c0013d89:	83 ec 14             	sub    esp,0x14
c0013d8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d90:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d92:	50                   	push   eax
c0013d93:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d96:	0f b6 0d 9c f5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f59c
c0013d9d:	03 0d a0 f5 02 c0    	add    ecx,DWORD PTR ds:0xc002f5a0
c0013da3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013da9:	89 cb                	mov    ebx,ecx
c0013dab:	c1 fb 1f             	sar    ebx,0x1f
c0013dae:	01 c8                	add    eax,ecx
c0013db0:	11 da                	adc    edx,ebx
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	31 c9                	xor    ecx,ecx
c0013db7:	80 3d 9d f5 02 c0 00 	cmp    BYTE PTR ds:0xc002f59d,0x0
c0013dbe:	74 05                	je     c0013dc5 <Clock::timeInSecondsLocal()+0x3d>
c0013dc0:	b9 08 07 00 00       	mov    ecx,0x708
c0013dc5:	31 db                	xor    ebx,ebx
c0013dc7:	01 c8                	add    eax,ecx
c0013dc9:	11 da                	adc    edx,ebx
c0013dcb:	83 c4 08             	add    esp,0x8
c0013dce:	5b                   	pop    ebx
c0013dcf:	c3                   	ret    

c0013dd0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013dd0:	57                   	push   edi
c0013dd1:	56                   	push   esi
c0013dd2:	53                   	push   ebx
c0013dd3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013dd7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ddb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ddd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013de1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013de4:	0f b6 05 9c f5 02 c0 	movzx  eax,BYTE PTR ds:0xc002f59c
c0013deb:	03 05 a0 f5 02 c0    	add    eax,DWORD PTR ds:0xc002f5a0
c0013df1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013df7:	99                   	cdq    
c0013df8:	29 c6                	sub    esi,eax
c0013dfa:	19 d7                	sbb    edi,edx
c0013dfc:	89 f0                	mov    eax,esi
c0013dfe:	89 fa                	mov    edx,edi
c0013e00:	31 f6                	xor    esi,esi
c0013e02:	80 3d 9d f5 02 c0 00 	cmp    BYTE PTR ds:0xc002f59d,0x0
c0013e09:	74 05                	je     c0013e10 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e0b:	be 08 07 00 00       	mov    esi,0x708
c0013e10:	31 ff                	xor    edi,edi
c0013e12:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e16:	29 f0                	sub    eax,esi
c0013e18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e1c:	19 fa                	sbb    edx,edi
c0013e1e:	89 d8                	mov    eax,ebx
c0013e20:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e24:	5b                   	pop    ebx
c0013e25:	5e                   	pop    esi
c0013e26:	5f                   	pop    edi
c0013e27:	ff e0                	jmp    eax

c0013e29 <datetimeToSeconds(datetime_t)>:
c0013e29:	55                   	push   ebp
c0013e2a:	57                   	push   edi
c0013e2b:	56                   	push   esi
c0013e2c:	53                   	push   ebx
c0013e2d:	83 ec 14             	sub    esp,0x14
c0013e30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e34:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e38:	89 d3                	mov    ebx,edx
c0013e3a:	0f b6 c6             	movzx  eax,dh
c0013e3d:	c1 eb 10             	shr    ebx,0x10
c0013e40:	48                   	dec    eax
c0013e41:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e46:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e4a:	0f b6 f5             	movzx  esi,ch
c0013e4d:	89 cf                	mov    edi,ecx
c0013e4f:	6b f6 3c             	imul   esi,esi,0x3c
c0013e52:	c1 ef 10             	shr    edi,0x10
c0013e55:	0f b6 c9             	movzx  ecx,cl
c0013e58:	89 f8                	mov    eax,edi
c0013e5a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e60:	0f b6 f8             	movzx  edi,al
c0013e63:	0f b6 d2             	movzx  edx,dl
c0013e66:	01 fe                	add    esi,edi
c0013e68:	01 f1                	add    ecx,esi
c0013e6a:	0f b7 f3             	movzx  esi,bx
c0013e6d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e71:	c1 f9 1f             	sar    ecx,0x1f
c0013e74:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e7d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e82:	8b 0c 8d 40 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd45c0]
c0013e89:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e8d:	76 29                	jbe    c0013eb8 <datetimeToSeconds(datetime_t)+0x8f>
c0013e8f:	f6 c3 03             	test   bl,0x3
c0013e92:	75 24                	jne    c0013eb8 <datetimeToSeconds(datetime_t)+0x8f>
c0013e94:	31 d2                	xor    edx,edx
c0013e96:	bf 64 00 00 00       	mov    edi,0x64
c0013e9b:	89 d8                	mov    eax,ebx
c0013e9d:	66 f7 f7             	div    di
c0013ea0:	66 85 d2             	test   dx,dx
c0013ea3:	75 12                	jne    c0013eb7 <datetimeToSeconds(datetime_t)+0x8e>
c0013ea5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013eab:	bf 90 01 00 00       	mov    edi,0x190
c0013eb0:	99                   	cdq    
c0013eb1:	f7 ff                	idiv   edi
c0013eb3:	85 d2                	test   edx,edx
c0013eb5:	75 01                	jne    c0013eb8 <datetimeToSeconds(datetime_t)+0x8f>
c0013eb7:	41                   	inc    ecx
c0013eb8:	66 83 fb 46          	cmp    bx,0x46
c0013ebc:	76 45                	jbe    c0013f03 <datetimeToSeconds(datetime_t)+0xda>
c0013ebe:	bb 46 00 00 00       	mov    ebx,0x46
c0013ec3:	bf 64 00 00 00       	mov    edi,0x64
c0013ec8:	bd 90 01 00 00       	mov    ebp,0x190
c0013ecd:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ed2:	f6 c3 03             	test   bl,0x3
c0013ed5:	75 23                	jne    c0013efa <datetimeToSeconds(datetime_t)+0xd1>
c0013ed7:	89 d8                	mov    eax,ebx
c0013ed9:	99                   	cdq    
c0013eda:	f7 ff                	idiv   edi
c0013edc:	b8 6e 01 00 00       	mov    eax,0x16e
c0013ee1:	85 d2                	test   edx,edx
c0013ee3:	75 15                	jne    c0013efa <datetimeToSeconds(datetime_t)+0xd1>
c0013ee5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013eeb:	99                   	cdq    
c0013eec:	f7 fd                	idiv   ebp
c0013eee:	83 fa 01             	cmp    edx,0x1
c0013ef1:	19 c0                	sbb    eax,eax
c0013ef3:	f7 d0                	not    eax
c0013ef5:	05 6e 01 00 00       	add    eax,0x16e
c0013efa:	01 c1                	add    ecx,eax
c0013efc:	43                   	inc    ebx
c0013efd:	39 f3                	cmp    ebx,esi
c0013eff:	7c cc                	jl     c0013ecd <datetimeToSeconds(datetime_t)+0xa4>
c0013f01:	eb 35                	jmp    c0013f38 <datetimeToSeconds(datetime_t)+0x10f>
c0013f03:	74 33                	je     c0013f38 <datetimeToSeconds(datetime_t)+0x10f>
c0013f05:	b8 45 00 00 00       	mov    eax,0x45
c0013f0a:	89 c2                	mov    edx,eax
c0013f0c:	83 e2 03             	and    edx,0x3
c0013f0f:	39 f0                	cmp    eax,esi
c0013f11:	7e 0f                	jle    c0013f22 <datetimeToSeconds(datetime_t)+0xf9>
c0013f13:	83 fa 01             	cmp    edx,0x1
c0013f16:	19 d2                	sbb    edx,edx
c0013f18:	48                   	dec    eax
c0013f19:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f20:	eb e8                	jmp    c0013f0a <datetimeToSeconds(datetime_t)+0xe1>
c0013f22:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f27:	85 d2                	test   edx,edx
c0013f29:	75 0b                	jne    c0013f36 <datetimeToSeconds(datetime_t)+0x10d>
c0013f2b:	66 83 fb 01          	cmp    bx,0x1
c0013f2f:	19 c0                	sbb    eax,eax
c0013f31:	05 6e 01 00 00       	add    eax,0x16e
c0013f36:	29 c1                	sub    ecx,eax
c0013f38:	b8 80 51 01 00       	mov    eax,0x15180
c0013f3d:	f7 e9                	imul   ecx
c0013f3f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f43:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f47:	83 c4 14             	add    esp,0x14
c0013f4a:	5b                   	pop    ebx
c0013f4b:	5e                   	pop    esi
c0013f4c:	5f                   	pop    edi
c0013f4d:	5d                   	pop    ebp
c0013f4e:	c3                   	ret    
c0013f4f:	90                   	nop

c0013f50 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f50:	57                   	push   edi
c0013f51:	56                   	push   esi
c0013f52:	53                   	push   ebx
c0013f53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f57:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f59:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f64:	e8 c0 fe ff ff       	call   c0013e29 <datetimeToSeconds(datetime_t)>
c0013f69:	59                   	pop    ecx
c0013f6a:	0f b6 0d 9c f5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f59c
c0013f71:	5b                   	pop    ebx
c0013f72:	03 0d a0 f5 02 c0    	add    ecx,DWORD PTR ds:0xc002f5a0
c0013f78:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f7e:	89 cb                	mov    ebx,ecx
c0013f80:	c1 fb 1f             	sar    ebx,0x1f
c0013f83:	29 c8                	sub    eax,ecx
c0013f85:	19 da                	sbb    edx,ebx
c0013f87:	31 c9                	xor    ecx,ecx
c0013f89:	80 3d 9d f5 02 c0 00 	cmp    BYTE PTR ds:0xc002f59d,0x0
c0013f90:	74 05                	je     c0013f97 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f92:	b9 08 07 00 00       	mov    ecx,0x708
c0013f97:	31 db                	xor    ebx,ebx
c0013f99:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013f9d:	29 c8                	sub    eax,ecx
c0013f9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fa3:	19 da                	sbb    edx,ebx
c0013fa5:	89 f8                	mov    eax,edi
c0013fa7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fab:	5b                   	pop    ebx
c0013fac:	5e                   	pop    esi
c0013fad:	5f                   	pop    edi
c0013fae:	ff e0                	jmp    eax

c0013fb0 <secondsToDatetime(unsigned long long)>:
c0013fb0:	55                   	push   ebp
c0013fb1:	57                   	push   edi
c0013fb2:	56                   	push   esi
c0013fb3:	53                   	push   ebx
c0013fb4:	83 ec 1c             	sub    esp,0x1c
c0013fb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013fbb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fbf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013fc3:	6a 00                	push   0x0
c0013fc5:	68 80 51 01 00       	push   0x15180
c0013fca:	55                   	push   ebp
c0013fcb:	57                   	push   edi
c0013fcc:	e8 23 37 01 00       	call   c00276f4 <__udivdi3>
c0013fd1:	83 c4 10             	add    esp,0x10
c0013fd4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013fda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fde:	6a 00                	push   0x0
c0013fe0:	68 80 51 01 00       	push   0x15180
c0013fe5:	55                   	push   ebp
c0013fe6:	57                   	push   edi
c0013fe7:	bf 10 0e 00 00       	mov    edi,0xe10
c0013fec:	e8 03 38 01 00       	call   c00277f4 <__umoddi3>
c0013ff1:	83 c4 10             	add    esp,0x10
c0013ff4:	99                   	cdq    
c0013ff5:	f7 ff                	idiv   edi
c0013ff7:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ffc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013fff:	89 d0                	mov    eax,edx
c0014001:	99                   	cdq    
c0014002:	f7 ff                	idiv   edi
c0014004:	85 db                	test   ebx,ebx
c0014006:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014009:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001400c:	79 11                	jns    c001401f <secondsToDatetime(unsigned long long)+0x6f>
c001400e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014012:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014018:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001401d:	eb 07                	jmp    c0014026 <secondsToDatetime(unsigned long long)+0x76>
c001401f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014024:	89 d8                	mov    eax,ebx
c0014026:	bf b4 05 00 00       	mov    edi,0x5b4
c001402b:	99                   	cdq    
c001402c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014031:	f7 f9                	idiv   ecx
c0014033:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014038:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001403c:	31 d2                	xor    edx,edx
c001403e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014046:	01 c3                	add    ebx,eax
c0014048:	89 d8                	mov    eax,ebx
c001404a:	f7 f1                	div    ecx
c001404c:	31 d2                	xor    edx,edx
c001404e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014051:	89 d8                	mov    eax,ebx
c0014053:	f7 f7                	div    edi
c0014055:	31 d2                	xor    edx,edx
c0014057:	29 c1                	sub    ecx,eax
c0014059:	89 d8                	mov    eax,ebx
c001405b:	f7 f5                	div    ebp
c001405d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014062:	29 c1                	sub    ecx,eax
c0014064:	31 d2                	xor    edx,edx
c0014066:	89 c8                	mov    eax,ecx
c0014068:	f7 f5                	div    ebp
c001406a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001406f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014073:	31 d2                	xor    edx,edx
c0014075:	89 c8                	mov    eax,ecx
c0014077:	f7 f5                	div    ebp
c0014079:	31 d2                	xor    edx,edx
c001407b:	01 c3                	add    ebx,eax
c001407d:	89 c8                	mov    eax,ecx
c001407f:	f7 f7                	div    edi
c0014081:	bf 99 00 00 00       	mov    edi,0x99
c0014086:	29 c3                	sub    ebx,eax
c0014088:	31 d2                	xor    edx,edx
c001408a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014092:	29 c3                	sub    ebx,eax
c0014094:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014097:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001409a:	bb 05 00 00 00       	mov    ebx,0x5
c001409f:	83 c1 02             	add    ecx,0x2
c00140a2:	89 c8                	mov    eax,ecx
c00140a4:	f7 f7                	div    edi
c00140a6:	31 d2                	xor    edx,edx
c00140a8:	89 c7                	mov    edi,eax
c00140aa:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140b0:	83 c0 02             	add    eax,0x2
c00140b3:	f7 f3                	div    ebx
c00140b5:	89 eb                	mov    ebx,ebp
c00140b7:	29 c3                	sub    ebx,eax
c00140b9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140bf:	88 1e                	mov    BYTE PTR [esi],bl
c00140c1:	19 c0                	sbb    eax,eax
c00140c3:	31 d2                	xor    edx,edx
c00140c5:	83 e0 0c             	and    eax,0xc
c00140c8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00140cc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00140d4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00140d8:	83 f9 01             	cmp    ecx,0x1
c00140db:	0f 96 c2             	setbe  dl
c00140de:	41                   	inc    ecx
c00140df:	01 d0                	add    eax,edx
c00140e1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00140e4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00140e8:	83 c4 1c             	add    esp,0x1c
c00140eb:	89 f0                	mov    eax,esi
c00140ed:	5b                   	pop    ebx
c00140ee:	5e                   	pop    esi
c00140ef:	5f                   	pop    edi
c00140f0:	5d                   	pop    ebp
c00140f1:	c2 04 00             	ret    0x4

c00140f4 <Clock::timeInDatetimeLocal()>:
c00140f4:	53                   	push   ebx
c00140f5:	83 ec 14             	sub    esp,0x14
c00140f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014100:	e8 83 fc ff ff       	call   c0013d88 <Clock::timeInSecondsLocal()>
c0014105:	83 c4 0c             	add    esp,0xc
c0014108:	52                   	push   edx
c0014109:	50                   	push   eax
c001410a:	53                   	push   ebx
c001410b:	e8 a0 fe ff ff       	call   c0013fb0 <secondsToDatetime(unsigned long long)>
c0014110:	89 d8                	mov    eax,ebx
c0014112:	83 c4 14             	add    esp,0x14
c0014115:	5b                   	pop    ebx
c0014116:	c2 04 00             	ret    0x4
c0014119:	90                   	nop

c001411a <Device::hibernate()>:
c001411a:	c3                   	ret    
c001411b:	90                   	nop

c001411c <Device::wake()>:
c001411c:	c3                   	ret    
c001411d:	90                   	nop

c001411e <Device::detect()>:
c001411e:	c3                   	ret    
c001411f:	90                   	nop

c0014120 <Device::disableLegacy()>:
c0014120:	c3                   	ret    
c0014121:	90                   	nop

c0014122 <Device::powerSaving(PowerSavingLevel)>:
c0014122:	c3                   	ret    
c0014123:	90                   	nop

c0014124 <DriverlessDevice::close(int, int, void*)>:
c0014124:	31 c0                	xor    eax,eax
c0014126:	c3                   	ret    
c0014127:	90                   	nop

c0014128 <DriverlessDevice::detect()>:
c0014128:	c3                   	ret    
c0014129:	90                   	nop

c001412a <DriverlessDevice::open(int, int, void*)>:
c001412a:	83 ec 18             	sub    esp,0x18
c001412d:	68 70 ba 02 c0       	push   0xc002ba70
c0014132:	e8 6e 68 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0014137:	83 c8 ff             	or     eax,0xffffffff
c001413a:	83 c4 1c             	add    esp,0x1c
c001413d:	c3                   	ret    

c001413e <Device::~Device()>:
c001413e:	ba d0 ba 02 c0       	mov    edx,0xc002bad0
c0014143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014147:	89 10                	mov    DWORD PTR [eax],edx
c0014149:	90                   	nop
c001414a:	c3                   	ret    
c001414b:	90                   	nop

c001414c <Device::~Device()>:
c001414c:	83 ec 0c             	sub    esp,0xc
c001414f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014153:	e8 e6 ff ff ff       	call   c001413e <Device::~Device()>
c0014158:	83 c4 04             	add    esp,0x4
c001415b:	83 ec 08             	sub    esp,0x8
c001415e:	68 58 01 00 00       	push   0x158
c0014163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014167:	e8 eb eb ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001416c:	83 c4 10             	add    esp,0x10
c001416f:	83 c4 0c             	add    esp,0xc
c0014172:	c3                   	ret    
c0014173:	90                   	nop

c0014174 <Device::findAndLoadDriver()>:
c0014174:	c7 44 24 04 8e ba 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ba8e
c001417c:	e9 b6 ec ff ff       	jmp    c0012e37 <Dbg::kprintf(char const*, ...)>
c0014181:	90                   	nop

c0014182 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014182:	57                   	push   edi
c0014183:	b9 09 00 00 00       	mov    ecx,0x9
c0014188:	56                   	push   esi
c0014189:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001418d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014191:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001419b:	81 c7 18 01 00 00    	add    edi,0x118
c00141a1:	fc                   	cld    
c00141a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141a4:	5e                   	pop    esi
c00141a5:	5f                   	pop    edi
c00141a6:	c3                   	ret    
c00141a7:	90                   	nop

c00141a8 <Device::preOpenACPI(void*, char*, char*)>:
c00141a8:	57                   	push   edi
c00141a9:	b9 1e 00 00 00       	mov    ecx,0x1e
c00141ae:	56                   	push   esi
c00141af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141b7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00141c1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00141c7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00141cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141d3:	b9 0e 00 00 00       	mov    ecx,0xe
c00141d8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00141de:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141e4:	5e                   	pop    esi
c00141e5:	5f                   	pop    edi
c00141e6:	c3                   	ret    
c00141e7:	90                   	nop

c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141ec:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141f1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141f8:	75 0b                	jne    c0014205 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00141fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00141fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014200:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014203:	eb 1e                	jmp    c0014223 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014205:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001420a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014210:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014216:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014218:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001421c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014220:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014223:	ff e0                	jmp    eax
c0014225:	90                   	nop

c0014226 <Device::getParent()>:
c0014226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001422a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0014230:	c3                   	ret    
c0014231:	90                   	nop

c0014232 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014236:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001423b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014242:	75 0b                	jne    c001424f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014244:	8b 00                	mov    eax,DWORD PTR [eax]
c0014246:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001424a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001424d:	eb 1e                	jmp    c001426d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001424f:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0014254:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001425a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014260:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014262:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014266:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001426a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001426d:	ff e0                	jmp    eax
c001426f:	90                   	nop

c0014270 <Device::addChild(Device*)>:
c0014270:	53                   	push   ebx
c0014271:	83 ec 08             	sub    esp,0x8
c0014274:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014278:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001427c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014282:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014288:	8b 13                	mov    edx,DWORD PTR [ebx]
c001428a:	85 d2                	test   edx,edx
c001428c:	74 04                	je     c0014292 <Device::addChild(Device*)+0x22>
c001428e:	89 d3                	mov    ebx,edx
c0014290:	eb f6                	jmp    c0014288 <Device::addChild(Device*)+0x18>
c0014292:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014295:	83 ec 0c             	sub    esp,0xc
c0014298:	6a 08                	push   0x8
c001429a:	e8 ed b5 ff ff       	call   c000f88c <malloc>
c001429f:	89 03                	mov    DWORD PTR [ebx],eax
c00142a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142ae:	83 c4 18             	add    esp,0x18
c00142b1:	5b                   	pop    ebx
c00142b2:	c3                   	ret    
c00142b3:	90                   	nop

c00142b4 <Device::removeAllChildren()>:
c00142b4:	56                   	push   esi
c00142b5:	53                   	push   ebx
c00142b6:	52                   	push   edx
c00142b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142bb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142c4:	74 17                	je     c00142dd <Device::removeAllChildren()+0x29>
c00142c6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142c9:	85 c0                	test   eax,eax
c00142cb:	74 0c                	je     c00142d9 <Device::removeAllChildren()+0x25>
c00142cd:	83 ec 0c             	sub    esp,0xc
c00142d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00142d2:	50                   	push   eax
c00142d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00142d6:	83 c4 10             	add    esp,0x10
c00142d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142db:	eb e4                	jmp    c00142c1 <Device::removeAllChildren()+0xd>
c00142dd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142e9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142f6:	58                   	pop    eax
c00142f7:	5b                   	pop    ebx
c00142f8:	5e                   	pop    esi
c00142f9:	c3                   	ret    

c00142fa <Device::hibernateAll()>:
c00142fa:	53                   	push   ebx
c00142fb:	83 ec 14             	sub    esp,0x14
c00142fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014302:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014304:	53                   	push   ebx
c0014305:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014308:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001430e:	83 c4 10             	add    esp,0x10
c0014311:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014314:	74 0f                	je     c0014325 <Device::hibernateAll()+0x2b>
c0014316:	83 ec 0c             	sub    esp,0xc
c0014319:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001431c:	e8 d9 ff ff ff       	call   c00142fa <Device::hibernateAll()>
c0014321:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014323:	eb e9                	jmp    c001430e <Device::hibernateAll()+0x14>
c0014325:	83 c4 08             	add    esp,0x8
c0014328:	5b                   	pop    ebx
c0014329:	c3                   	ret    

c001432a <Device::wakeAll()>:
c001432a:	53                   	push   ebx
c001432b:	83 ec 14             	sub    esp,0x14
c001432e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014332:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014334:	53                   	push   ebx
c0014335:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014338:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001433e:	83 c4 10             	add    esp,0x10
c0014341:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014344:	74 0f                	je     c0014355 <Device::wakeAll()+0x2b>
c0014346:	83 ec 0c             	sub    esp,0xc
c0014349:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001434c:	e8 d9 ff ff ff       	call   c001432a <Device::wakeAll()>
c0014351:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014353:	eb e9                	jmp    c001433e <Device::wakeAll()+0x14>
c0014355:	83 c4 08             	add    esp,0x8
c0014358:	5b                   	pop    ebx
c0014359:	c3                   	ret    

c001435a <Device::detectAll()>:
c001435a:	53                   	push   ebx
c001435b:	83 ec 14             	sub    esp,0x14
c001435e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014362:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014364:	53                   	push   ebx
c0014365:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014368:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001436e:	83 c4 10             	add    esp,0x10
c0014371:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014374:	74 0f                	je     c0014385 <Device::detectAll()+0x2b>
c0014376:	83 ec 0c             	sub    esp,0xc
c0014379:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001437c:	e8 d9 ff ff ff       	call   c001435a <Device::detectAll()>
c0014381:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014383:	eb e9                	jmp    c001436e <Device::detectAll()+0x14>
c0014385:	83 c4 08             	add    esp,0x8
c0014388:	5b                   	pop    ebx
c0014389:	c3                   	ret    

c001438a <Device::disableLegacyAll()>:
c001438a:	53                   	push   ebx
c001438b:	83 ec 14             	sub    esp,0x14
c001438e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014392:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014394:	53                   	push   ebx
c0014395:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014398:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001439e:	83 c4 10             	add    esp,0x10
c00143a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143a4:	74 0f                	je     c00143b5 <Device::disableLegacyAll()+0x2b>
c00143a6:	83 ec 0c             	sub    esp,0xc
c00143a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143ac:	e8 d9 ff ff ff       	call   c001438a <Device::disableLegacyAll()>
c00143b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143b3:	eb e9                	jmp    c001439e <Device::disableLegacyAll()+0x14>
c00143b5:	83 c4 08             	add    esp,0x8
c00143b8:	5b                   	pop    ebx
c00143b9:	c3                   	ret    

c00143ba <Device::loadDriversForAll()>:
c00143ba:	53                   	push   ebx
c00143bb:	83 ec 08             	sub    esp,0x8
c00143be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143c2:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c00143c9:	75 0c                	jne    c00143d7 <Device::loadDriversForAll()+0x1d>
c00143cb:	83 ec 0c             	sub    esp,0xc
c00143ce:	53                   	push   ebx
c00143cf:	e8 a0 fd ff ff       	call   c0014174 <Device::findAndLoadDriver()>
c00143d4:	83 c4 10             	add    esp,0x10
c00143d7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143e0:	74 12                	je     c00143f4 <Device::loadDriversForAll()+0x3a>
c00143e2:	83 ec 0c             	sub    esp,0xc
c00143e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143e8:	e8 cd ff ff ff       	call   c00143ba <Device::loadDriversForAll()>
c00143ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143ef:	83 c4 10             	add    esp,0x10
c00143f2:	eb e9                	jmp    c00143dd <Device::loadDriversForAll()+0x23>
c00143f4:	83 c4 08             	add    esp,0x8
c00143f7:	5b                   	pop    ebx
c00143f8:	c3                   	ret    
c00143f9:	90                   	nop

c00143fa <Device::closeAll()>:
c00143fa:	53                   	push   ebx
c00143fb:	83 ec 08             	sub    esp,0x8
c00143fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014402:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014404:	6a 00                	push   0x0
c0014406:	6a 00                	push   0x0
c0014408:	6a 00                	push   0x0
c001440a:	53                   	push   ebx
c001440b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001440e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014414:	83 c4 10             	add    esp,0x10
c0014417:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001441a:	74 0f                	je     c001442b <Device::closeAll()+0x31>
c001441c:	83 ec 0c             	sub    esp,0xc
c001441f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014422:	e8 d3 ff ff ff       	call   c00143fa <Device::closeAll()>
c0014427:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014429:	eb e9                	jmp    c0014414 <Device::closeAll()+0x1a>
c001442b:	83 c4 08             	add    esp,0x8
c001442e:	5b                   	pop    ebx
c001442f:	c3                   	ret    

c0014430 <Device::powerSavingAll(PowerSavingLevel)>:
c0014430:	56                   	push   esi
c0014431:	53                   	push   ebx
c0014432:	83 ec 0c             	sub    esp,0xc
c0014435:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014439:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001443d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001443f:	56                   	push   esi
c0014440:	53                   	push   ebx
c0014441:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014444:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001444a:	83 c4 10             	add    esp,0x10
c001444d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014450:	74 0f                	je     c0014461 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014452:	52                   	push   edx
c0014453:	52                   	push   edx
c0014454:	56                   	push   esi
c0014455:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014458:	e8 d3 ff ff ff       	call   c0014430 <Device::powerSavingAll(PowerSavingLevel)>
c001445d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001445f:	eb e9                	jmp    c001444a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014461:	58                   	pop    eax
c0014462:	5b                   	pop    ebx
c0014463:	5e                   	pop    esi
c0014464:	c3                   	ret    
c0014465:	90                   	nop

c0014466 <Device::setName(char const*)>:
c0014466:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001446e:	e9 99 c3 fe ff       	jmp    c000080c <strcpy>
c0014473:	90                   	nop

c0014474 <Device::Device(char const*)>:
c0014474:	83 ec 1c             	sub    esp,0x1c
c0014477:	ba d0 ba 02 c0       	mov    edx,0xc002bad0
c001447c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014480:	89 10                	mov    DWORD PTR [eax],edx
c0014482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014486:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014494:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001449e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144ba:	83 ec 08             	sub    esp,0x8
c00144bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144c5:	e8 9c ff ff ff       	call   c0014466 <Device::setName(char const*)>
c00144ca:	83 c4 10             	add    esp,0x10
c00144cd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144d5:	83 ec 0c             	sub    esp,0xc
c00144d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144dc:	e8 ab b3 ff ff       	call   c000f88c <malloc>
c00144e1:	83 c4 10             	add    esp,0x10
c00144e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144f5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00144fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ff:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014505:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001450b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014515:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001451c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014520:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001452b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014536:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014544:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001454e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014552:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001455c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014560:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001456a:	90                   	nop
c001456b:	83 c4 1c             	add    esp,0x1c
c001456e:	c3                   	ret    
c001456f:	90                   	nop

c0014570 <Device::getName()>:
c0014570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014574:	05 d0 00 00 00       	add    eax,0xd0
c0014579:	c3                   	ret    

c001457a <DriverlessDevice::DriverlessDevice(char const*)>:
c001457a:	83 ec 0c             	sub    esp,0xc
c001457d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014581:	83 ec 08             	sub    esp,0x8
c0014584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014588:	50                   	push   eax
c0014589:	e8 e6 fe ff ff       	call   c0014474 <Device::Device(char const*)>
c001458e:	83 c4 10             	add    esp,0x10
c0014591:	ba fc ba 02 c0       	mov    edx,0xc002bafc
c0014596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001459a:	89 10                	mov    DWORD PTR [eax],edx
c001459c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145aa:	90                   	nop
c00145ab:	83 c4 0c             	add    esp,0xc
c00145ae:	c3                   	ret    
c00145af:	90                   	nop

c00145b0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145b0:	57                   	push   edi
c00145b1:	56                   	push   esi
c00145b2:	53                   	push   ebx
c00145b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145bf:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145c5:	75 0c                	jne    c00145d3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145c7:	52                   	push   edx
c00145c8:	52                   	push   edx
c00145c9:	53                   	push   ebx
c00145ca:	56                   	push   esi
c00145cb:	e8 76 50 01 00       	call   c0029646 <LinkedList<Device>::addElement(Device*)>
c00145d0:	83 c4 10             	add    esp,0x10
c00145d3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145dc:	74 12                	je     c00145f0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00145de:	50                   	push   eax
c00145df:	57                   	push   edi
c00145e0:	56                   	push   esi
c00145e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145e4:	e8 c7 ff ff ff       	call   c00145b0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145eb:	83 c4 10             	add    esp,0x10
c00145ee:	eb e9                	jmp    c00145d9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00145f0:	5b                   	pop    ebx
c00145f1:	5e                   	pop    esi
c00145f2:	5f                   	pop    edi
c00145f3:	c3                   	ret    

c00145f4 <getDevicesOfType(DeviceType)>:
c00145f4:	53                   	push   ebx
c00145f5:	83 ec 14             	sub    esp,0x14
c00145f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145fc:	53                   	push   ebx
c00145fd:	e8 20 51 01 00       	call   c0029722 <LinkedList<Device>::LinkedList()>
c0014602:	83 c4 0c             	add    esp,0xc
c0014605:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014609:	53                   	push   ebx
c001460a:	ff 35 08 f4 02 c0    	push   DWORD PTR ds:0xc002f408
c0014610:	e8 9b ff ff ff       	call   c00145b0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014615:	89 d8                	mov    eax,ebx
c0014617:	83 c4 18             	add    esp,0x18
c001461a:	5b                   	pop    ebx
c001461b:	c2 04 00             	ret    0x4

c001461e <HardDiskController::HardDiskController(char const*)>:
c001461e:	83 ec 0c             	sub    esp,0xc
c0014621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014625:	83 ec 08             	sub    esp,0x8
c0014628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462c:	50                   	push   eax
c001462d:	e8 42 fe ff ff       	call   c0014474 <Device::Device(char const*)>
c0014632:	83 c4 10             	add    esp,0x10
c0014635:	ba 28 bb 02 c0       	mov    edx,0xc002bb28
c001463a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463e:	89 10                	mov    DWORD PTR [eax],edx
c0014640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014644:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001464e:	90                   	nop
c001464f:	83 c4 0c             	add    esp,0xc
c0014652:	c3                   	ret    
c0014653:	90                   	nop

c0014654 <HardDiskController::~HardDiskController()>:
c0014654:	83 ec 0c             	sub    esp,0xc
c0014657:	ba 28 bb 02 c0       	mov    edx,0xc002bb28
c001465c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014660:	89 10                	mov    DWORD PTR [eax],edx
c0014662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014666:	83 ec 0c             	sub    esp,0xc
c0014669:	50                   	push   eax
c001466a:	e8 cf fa ff ff       	call   c001413e <Device::~Device()>
c001466f:	83 c4 10             	add    esp,0x10
c0014672:	90                   	nop
c0014673:	83 c4 0c             	add    esp,0xc
c0014676:	c3                   	ret    
c0014677:	90                   	nop

c0014678 <HardDiskController::~HardDiskController()>:
c0014678:	83 ec 0c             	sub    esp,0xc
c001467b:	83 ec 0c             	sub    esp,0xc
c001467e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014682:	e8 cd ff ff ff       	call   c0014654 <HardDiskController::~HardDiskController()>
c0014687:	83 c4 10             	add    esp,0x10
c001468a:	83 ec 08             	sub    esp,0x8
c001468d:	68 58 01 00 00       	push   0x158
c0014692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014696:	e8 bc e6 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001469b:	83 c4 10             	add    esp,0x10
c001469e:	83 c4 0c             	add    esp,0xc
c00146a1:	c3                   	ret    

c00146a2 <PhysicalDisk::eject()>:
c00146a2:	83 ec 18             	sub    esp,0x18
c00146a5:	68 4c bb 02 c0       	push   0xc002bb4c
c00146aa:	e8 88 e7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00146af:	83 c8 ff             	or     eax,0xffffffff
c00146b2:	83 c4 1c             	add    esp,0x1c
c00146b5:	c3                   	ret    

c00146b6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146b6:	83 ec 0c             	sub    esp,0xc
c00146b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146bd:	83 ec 08             	sub    esp,0x8
c00146c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146c4:	50                   	push   eax
c00146c5:	e8 aa fd ff ff       	call   c0014474 <Device::Device(char const*)>
c00146ca:	83 c4 10             	add    esp,0x10
c00146cd:	ba 7c bb 02 c0       	mov    edx,0xc002bb7c
c00146d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d6:	89 10                	mov    DWORD PTR [eax],edx
c00146d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146dc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00146e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00146ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00146fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014700:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014704:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001470a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014718:	90                   	nop
c0014719:	83 c4 0c             	add    esp,0xc
c001471c:	c3                   	ret    
c001471d:	90                   	nop

c001471e <PhysicalDisk::startCache()>:
c001471e:	56                   	push   esi
c001471f:	53                   	push   ebx
c0014720:	83 ec 10             	sub    esp,0x10
c0014723:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014727:	6a 44                	push   0x44
c0014729:	e8 5e b1 ff ff       	call   c000f88c <malloc>
c001472e:	89 c6                	mov    esi,eax
c0014730:	58                   	pop    eax
c0014731:	5a                   	pop    edx
c0014732:	53                   	push   ebx
c0014733:	56                   	push   esi
c0014734:	e8 cf 28 00 00       	call   c0017008 <VCache::VCache(PhysicalDisk*)>
c0014739:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001473f:	83 c4 14             	add    esp,0x14
c0014742:	5b                   	pop    ebx
c0014743:	5e                   	pop    esi
c0014744:	c3                   	ret    
c0014745:	90                   	nop

c0014746 <PhysicalDisk::~PhysicalDisk()>:
c0014746:	83 ec 0c             	sub    esp,0xc
c0014749:	ba 7c bb 02 c0       	mov    edx,0xc002bb7c
c001474e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014752:	89 10                	mov    DWORD PTR [eax],edx
c0014754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014758:	83 ec 0c             	sub    esp,0xc
c001475b:	50                   	push   eax
c001475c:	e8 dd f9 ff ff       	call   c001413e <Device::~Device()>
c0014761:	83 c4 10             	add    esp,0x10
c0014764:	90                   	nop
c0014765:	83 c4 0c             	add    esp,0xc
c0014768:	c3                   	ret    
c0014769:	90                   	nop

c001476a <PhysicalDisk::~PhysicalDisk()>:
c001476a:	83 ec 0c             	sub    esp,0xc
c001476d:	83 ec 0c             	sub    esp,0xc
c0014770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014774:	e8 cd ff ff ff       	call   c0014746 <PhysicalDisk::~PhysicalDisk()>
c0014779:	83 c4 10             	add    esp,0x10
c001477c:	83 ec 08             	sub    esp,0x8
c001477f:	68 6c 01 00 00       	push   0x16c
c0014784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014788:	e8 ca e5 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001478d:	83 c4 10             	add    esp,0x10
c0014790:	83 c4 0c             	add    esp,0xc
c0014793:	c3                   	ret    

c0014794 <FPU::FPU(char const*)>:
c0014794:	83 ec 0c             	sub    esp,0xc
c0014797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479b:	83 ec 08             	sub    esp,0x8
c001479e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a2:	50                   	push   eax
c00147a3:	e8 cc fc ff ff       	call   c0014474 <Device::Device(char const*)>
c00147a8:	83 c4 10             	add    esp,0x10
c00147ab:	ba c0 bb 02 c0       	mov    edx,0xc002bbc0
c00147b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b4:	89 10                	mov    DWORD PTR [eax],edx
c00147b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ba:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147c4:	90                   	nop
c00147c5:	83 c4 0c             	add    esp,0xc
c00147c8:	c3                   	ret    
c00147c9:	90                   	nop

c00147ca <FPU::~FPU()>:
c00147ca:	83 ec 0c             	sub    esp,0xc
c00147cd:	ba c0 bb 02 c0       	mov    edx,0xc002bbc0
c00147d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d6:	89 10                	mov    DWORD PTR [eax],edx
c00147d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147dc:	83 ec 0c             	sub    esp,0xc
c00147df:	50                   	push   eax
c00147e0:	e8 59 f9 ff ff       	call   c001413e <Device::~Device()>
c00147e5:	83 c4 10             	add    esp,0x10
c00147e8:	90                   	nop
c00147e9:	83 c4 0c             	add    esp,0xc
c00147ec:	c3                   	ret    
c00147ed:	90                   	nop

c00147ee <FPU::~FPU()>:
c00147ee:	83 ec 0c             	sub    esp,0xc
c00147f1:	83 ec 0c             	sub    esp,0xc
c00147f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f8:	e8 cd ff ff ff       	call   c00147ca <FPU::~FPU()>
c00147fd:	83 c4 10             	add    esp,0x10
c0014800:	83 ec 08             	sub    esp,0x8
c0014803:	68 58 01 00 00       	push   0x158
c0014808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001480c:	e8 46 e5 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	83 c4 0c             	add    esp,0xc
c0014817:	c3                   	ret    

c0014818 <setupFPU()>:
c0014818:	53                   	push   ebx
c0014819:	83 ec 08             	sub    esp,0x8
c001481c:	8b 15 08 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f408
c0014822:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014829:	74 19                	je     c0014844 <setupFPU()+0x2c>
c001482b:	83 ec 0c             	sub    esp,0xc
c001482e:	68 58 01 00 00       	push   0x158
c0014833:	e8 54 b0 ff ff       	call   c000f88c <malloc>
c0014838:	89 c3                	mov    ebx,eax
c001483a:	89 04 24             	mov    DWORD PTR [esp],eax
c001483d:	e8 2c 1a 01 00       	call   c002626e <AVX::AVX()>
c0014842:	eb 5b                	jmp    c001489f <setupFPU()+0x87>
c0014844:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001484a:	84 c0                	test   al,al
c001484c:	79 19                	jns    c0014867 <setupFPU()+0x4f>
c001484e:	83 ec 0c             	sub    esp,0xc
c0014851:	68 58 01 00 00       	push   0x158
c0014856:	e8 31 b0 ff ff       	call   c000f88c <malloc>
c001485b:	89 c3                	mov    ebx,eax
c001485d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014860:	e8 2f 1b 01 00       	call   c0026394 <SSE::SSE()>
c0014865:	eb 38                	jmp    c001489f <setupFPU()+0x87>
c0014867:	a8 20                	test   al,0x20
c0014869:	74 19                	je     c0014884 <setupFPU()+0x6c>
c001486b:	83 ec 0c             	sub    esp,0xc
c001486e:	68 58 01 00 00       	push   0x158
c0014873:	e8 14 b0 ff ff       	call   c000f88c <malloc>
c0014878:	89 c3                	mov    ebx,eax
c001487a:	89 04 24             	mov    DWORD PTR [esp],eax
c001487d:	e8 7c 1a 01 00       	call   c00262fe <MMX::MMX()>
c0014882:	eb 1b                	jmp    c001489f <setupFPU()+0x87>
c0014884:	a8 10                	test   al,0x10
c0014886:	74 1c                	je     c00148a4 <setupFPU()+0x8c>
c0014888:	83 ec 0c             	sub    esp,0xc
c001488b:	68 58 01 00 00       	push   0x158
c0014890:	e8 f7 af ff ff       	call   c000f88c <malloc>
c0014895:	89 c3                	mov    ebx,eax
c0014897:	89 04 24             	mov    DWORD PTR [esp],eax
c001489a:	e8 83 1b 01 00       	call   c0026422 <x87::x87()>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	eb 24                	jmp    c00148c8 <setupFPU()+0xb0>
c00148a4:	83 e0 ef             	and    eax,0xffffffef
c00148a7:	83 ec 0c             	sub    esp,0xc
c00148aa:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148b0:	68 ac bb 02 c0       	push   0xc002bbac
c00148b5:	e8 7d e5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00148ba:	0f 20 c0             	mov    eax,cr0
c00148bd:	83 c8 04             	or     eax,0x4
c00148c0:	0f 22 c0             	mov    cr0,eax
c00148c3:	31 db                	xor    ebx,ebx
c00148c5:	83 c4 10             	add    esp,0x10
c00148c8:	89 d8                	mov    eax,ebx
c00148ca:	83 c4 08             	add    esp,0x8
c00148cd:	5b                   	pop    ebx
c00148ce:	c3                   	ret    
c00148cf:	90                   	nop

c00148d0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148d8:	c1 e0 04             	shl    eax,0x4
c00148db:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00148df:	8d 50 10             	lea    edx,[eax+0x10]
c00148e2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00148e8:	74 08                	je     c00148f2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00148ea:	83 c0 04             	add    eax,0x4
c00148ed:	39 d0                	cmp    eax,edx
c00148ef:	75 f1                	jne    c00148e2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00148f1:	c3                   	ret    
c00148f2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148fc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014906:	eb e2                	jmp    c00148ea <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014908 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014908:	57                   	push   edi
c0014909:	31 c0                	xor    eax,eax
c001490b:	56                   	push   esi
c001490c:	53                   	push   ebx
c001490d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014911:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014915:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014919:	89 da                	mov    edx,ebx
c001491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001491f:	c1 e2 04             	shl    edx,0x4
c0014922:	01 ca                	add    edx,ecx
c0014924:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001492c:	74 16                	je     c0014944 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001492e:	40                   	inc    eax
c001492f:	83 f8 04             	cmp    eax,0x4
c0014932:	75 f0                	jne    c0014924 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014934:	c7 44 24 10 f0 bb 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bbf0
c001493c:	5b                   	pop    ebx
c001493d:	5e                   	pop    esi
c001493e:	5f                   	pop    edi
c001493f:	e9 61 60 00 00       	jmp    c001a9a5 <Krnl::panic(char const*)>
c0014944:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014947:	8d 04 81             	lea    eax,[ecx+eax*4]
c001494a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014950:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014956:	5b                   	pop    ebx
c0014957:	5e                   	pop    esi
c0014958:	5f                   	pop    edi
c0014959:	c3                   	ret    

c001495a <doubleFault(regs*, void*)>:
c001495a:	55                   	push   ebp
c001495b:	89 e5                	mov    ebp,esp
c001495d:	83 ec 08             	sub    esp,0x8
c0014960:	83 ec 0c             	sub    esp,0xc
c0014963:	68 2b bc 02 c0       	push   0xc002bc2b
c0014968:	e8 38 60 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c001496d:	83 c4 10             	add    esp,0x10
c0014970:	90                   	nop
c0014971:	c9                   	leave  
c0014972:	c3                   	ret    
c0014973:	90                   	nop

c0014974 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014974:	56                   	push   esi
c0014975:	53                   	push   ebx
c0014976:	50                   	push   eax
c0014977:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001497b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001497f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014984:	75 35                	jne    c00149bb <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014986:	8d 43 20             	lea    eax,[ebx+0x20]
c0014989:	31 d2                	xor    edx,edx
c001498b:	89 c1                	mov    ecx,eax
c001498d:	c1 e1 04             	shl    ecx,0x4
c0014990:	01 f1                	add    ecx,esi
c0014992:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001499a:	74 3e                	je     c00149da <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001499c:	42                   	inc    edx
c001499d:	83 fa 04             	cmp    edx,0x4
c00149a0:	75 f0                	jne    c0014992 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149a2:	83 ec 0c             	sub    esp,0xc
c00149a5:	68 70 bc 02 c0       	push   0xc002bc70
c00149aa:	e8 f6 5f 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c00149af:	83 c4 10             	add    esp,0x10
c00149b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149b7:	5a                   	pop    edx
c00149b8:	5b                   	pop    ebx
c00149b9:	5e                   	pop    esi
c00149ba:	c3                   	ret    
c00149bb:	83 ec 0c             	sub    esp,0xc
c00149be:	56                   	push   esi
c00149bf:	e8 ac fb ff ff       	call   c0014570 <Device::getName()>
c00149c4:	83 c4 10             	add    esp,0x10
c00149c7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149ca:	75 ba                	jne    c0014986 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149cc:	83 fb 0f             	cmp    ebx,0xf
c00149cf:	7f 29                	jg     c00149fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149d1:	0f b6 9b 60 e6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd19a0]
c00149d8:	eb ac                	jmp    c0014986 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149da:	8d 04 82             	lea    eax,[edx+eax*4]
c00149dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00149e1:	8d 04 86             	lea    eax,[esi+eax*4]
c00149e4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00149ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149ee:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00149f4:	89 d8                	mov    eax,ebx
c00149f6:	5a                   	pop    edx
c00149f7:	5b                   	pop    ebx
c00149f8:	5e                   	pop    esi
c00149f9:	c3                   	ret    
c00149fa:	83 ec 0c             	sub    esp,0xc
c00149fd:	68 38 bc 02 c0       	push   0xc002bc38
c0014a02:	e8 9e 5f 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0014a07:	83 c4 10             	add    esp,0x10
c0014a0a:	e9 77 ff ff ff       	jmp    c0014986 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a0f:	90                   	nop

c0014a10 <InterruptController::clearAllHandlers(int, bool)>:
c0014a10:	56                   	push   esi
c0014a11:	53                   	push   ebx
c0014a12:	52                   	push   edx
c0014a13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a1b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a20:	75 61                	jne    c0014a83 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a22:	8d 46 20             	lea    eax,[esi+0x20]
c0014a25:	c1 e6 04             	shl    esi,0x4
c0014a28:	c1 e0 04             	shl    eax,0x4
c0014a2b:	01 de                	add    esi,ebx
c0014a2d:	01 d8                	add    eax,ebx
c0014a2f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a39:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a43:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a4d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a57:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a61:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a6b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a75:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a7f:	58                   	pop    eax
c0014a80:	5b                   	pop    ebx
c0014a81:	5e                   	pop    esi
c0014a82:	c3                   	ret    
c0014a83:	83 ec 0c             	sub    esp,0xc
c0014a86:	53                   	push   ebx
c0014a87:	e8 e4 fa ff ff       	call   c0014570 <Device::getName()>
c0014a8c:	83 c4 10             	add    esp,0x10
c0014a8f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a92:	75 8e                	jne    c0014a22 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a94:	83 fe 0f             	cmp    esi,0xf
c0014a97:	7f 09                	jg     c0014aa2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a99:	0f b6 b6 60 e6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd19a0]
c0014aa0:	eb 80                	jmp    c0014a22 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014aa2:	83 ec 0c             	sub    esp,0xc
c0014aa5:	68 ac bc 02 c0       	push   0xc002bcac
c0014aaa:	e8 f6 5e 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0014aaf:	83 c4 10             	add    esp,0x10
c0014ab2:	e9 6b ff ff ff       	jmp    c0014a22 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ab7:	90                   	nop

c0014ab8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014ab8:	56                   	push   esi
c0014ab9:	53                   	push   ebx
c0014aba:	52                   	push   edx
c0014abb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014abf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ac3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ac8:	75 3a                	jne    c0014b04 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ace:	8d 50 20             	lea    edx,[eax+0x20]
c0014ad1:	c1 e2 04             	shl    edx,0x4
c0014ad4:	8d 04 16             	lea    eax,[esi+edx*1]
c0014ad7:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014adb:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014ae1:	74 0b                	je     c0014aee <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014ae3:	83 c0 04             	add    eax,0x4
c0014ae6:	39 d0                	cmp    eax,edx
c0014ae8:	75 f1                	jne    c0014adb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014aea:	58                   	pop    eax
c0014aeb:	5b                   	pop    ebx
c0014aec:	5e                   	pop    esi
c0014aed:	c3                   	ret    
c0014aee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014af8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b02:	eb df                	jmp    c0014ae3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b04:	83 ec 0c             	sub    esp,0xc
c0014b07:	56                   	push   esi
c0014b08:	e8 63 fa ff ff       	call   c0014570 <Device::getName()>
c0014b0d:	83 c4 10             	add    esp,0x10
c0014b10:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b13:	75 b5                	jne    c0014aca <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b15:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b1a:	7f 11                	jg     c0014b2d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b20:	0f b6 80 60 e6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd19a0]
c0014b27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b2b:	eb 9d                	jmp    c0014aca <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b2d:	83 ec 0c             	sub    esp,0xc
c0014b30:	68 ac bc 02 c0       	push   0xc002bcac
c0014b35:	e8 6b 5e 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0014b3a:	83 c4 10             	add    esp,0x10
c0014b3d:	eb 8b                	jmp    c0014aca <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b3f <nmiHandler(regs*, void*)>:
c0014b3f:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0014b44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b48:	e9 89 a4 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c0014b4d <int_handler>:
c0014b4d:	55                   	push   ebp
c0014b4e:	57                   	push   edi
c0014b4f:	56                   	push   esi
c0014b50:	53                   	push   ebx
c0014b51:	83 ec 0c             	sub    esp,0xc
c0014b54:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b58:	80 3d 64 1f 03 c0 00 	cmp    BYTE PTR ds:0xc0031f64,0x0
c0014b5f:	74 0b                	je     c0014b6c <int_handler+0x1f>
c0014b61:	fa                   	cli    
c0014b62:	f4                   	hlt    
c0014b63:	80 3d 64 1f 03 c0 00 	cmp    BYTE PTR ds:0xc0031f64,0x0
c0014b6a:	75 f5                	jne    c0014b61 <int_handler+0x14>
c0014b6c:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0014b71:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b7a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b80:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b83:	83 f8 17             	cmp    eax,0x17
c0014b86:	77 13                	ja     c0014b9b <int_handler+0x4e>
c0014b88:	83 ec 08             	sub    esp,0x8
c0014b8b:	8b 17                	mov    edx,DWORD PTR [edi]
c0014b8d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b90:	0f b6 c0             	movzx  eax,al
c0014b93:	50                   	push   eax
c0014b94:	57                   	push   edi
c0014b95:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b98:	83 c4 10             	add    esp,0x10
c0014b9b:	83 c3 15             	add    ebx,0x15
c0014b9e:	c1 e3 04             	shl    ebx,0x4
c0014ba1:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014ba5:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014bac:	31 db                	xor    ebx,ebx
c0014bae:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014bb2:	85 c0                	test   eax,eax
c0014bb4:	74 13                	je     c0014bc9 <int_handler+0x7c>
c0014bb6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014bb9:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bbd:	74 1c                	je     c0014bdb <int_handler+0x8e>
c0014bbf:	83 ec 08             	sub    esp,0x8
c0014bc2:	52                   	push   edx
c0014bc3:	56                   	push   esi
c0014bc4:	ff d0                	call   eax
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	43                   	inc    ebx
c0014bca:	83 fb 04             	cmp    ebx,0x4
c0014bcd:	75 df                	jne    c0014bae <int_handler+0x61>
c0014bcf:	83 c4 0c             	add    esp,0xc
c0014bd2:	31 c0                	xor    eax,eax
c0014bd4:	5b                   	pop    ebx
c0014bd5:	31 d2                	xor    edx,edx
c0014bd7:	5e                   	pop    esi
c0014bd8:	5f                   	pop    edi
c0014bd9:	5d                   	pop    ebp
c0014bda:	c3                   	ret    
c0014bdb:	83 ec 08             	sub    esp,0x8
c0014bde:	52                   	push   edx
c0014bdf:	56                   	push   esi
c0014be0:	ff d0                	call   eax
c0014be2:	83 c4 10             	add    esp,0x10
c0014be5:	83 c4 0c             	add    esp,0xc
c0014be8:	5b                   	pop    ebx
c0014be9:	5e                   	pop    esi
c0014bea:	5f                   	pop    edi
c0014beb:	5d                   	pop    ebp
c0014bec:	c3                   	ret    
c0014bed:	90                   	nop

c0014bee <InterruptController::InterruptController(char const*)>:
c0014bee:	83 ec 1c             	sub    esp,0x1c
c0014bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bf5:	83 ec 08             	sub    esp,0x8
c0014bf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bfc:	50                   	push   eax
c0014bfd:	e8 72 f8 ff ff       	call   c0014474 <Device::Device(char const*)>
c0014c02:	83 c4 10             	add    esp,0x10
c0014c05:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0014c0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c0e:	89 10                	mov    DWORD PTR [eax],edx
c0014c10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c14:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c26:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c2e:	7f 5e                	jg     c0014c8e <InterruptController::InterruptController(char const*)+0xa0>
c0014c30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c38:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c3d:	7f 49                	jg     c0014c88 <InterruptController::InterruptController(char const*)+0x9a>
c0014c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c47:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c52:	01 ca                	add    edx,ecx
c0014c54:	83 c2 54             	add    edx,0x54
c0014c57:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c67:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c72:	01 ca                	add    edx,ecx
c0014c74:	81 c2 54 04 00 00    	add    edx,0x454
c0014c7a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c82:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014c86:	eb b0                	jmp    c0014c38 <InterruptController::InterruptController(char const*)+0x4a>
c0014c88:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c8c:	eb 98                	jmp    c0014c26 <InterruptController::InterruptController(char const*)+0x38>
c0014c8e:	90                   	nop
c0014c8f:	83 c4 1c             	add    esp,0x1c
c0014c92:	c3                   	ret    
c0014c93:	90                   	nop

c0014c94 <InterruptController::~InterruptController()>:
c0014c94:	83 ec 0c             	sub    esp,0xc
c0014c97:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0014c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ca0:	89 10                	mov    DWORD PTR [eax],edx
c0014ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ca6:	83 ec 0c             	sub    esp,0xc
c0014ca9:	50                   	push   eax
c0014caa:	e8 8f f4 ff ff       	call   c001413e <Device::~Device()>
c0014caf:	83 c4 10             	add    esp,0x10
c0014cb2:	90                   	nop
c0014cb3:	83 c4 0c             	add    esp,0xc
c0014cb6:	c3                   	ret    
c0014cb7:	90                   	nop

c0014cb8 <InterruptController::~InterruptController()>:
c0014cb8:	83 ec 0c             	sub    esp,0xc
c0014cbb:	83 ec 0c             	sub    esp,0xc
c0014cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cc2:	e8 cd ff ff ff       	call   c0014c94 <InterruptController::~InterruptController()>
c0014cc7:	83 c4 10             	add    esp,0x10
c0014cca:	83 ec 08             	sub    esp,0x8
c0014ccd:	68 58 21 00 00       	push   0x2158
c0014cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cd6:	e8 7c e0 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0014cdb:	83 c4 10             	add    esp,0x10
c0014cde:	83 c4 0c             	add    esp,0xc
c0014ce1:	c3                   	ret    

c0014ce2 <displayDebugInfo(regs*)>:
c0014ce2:	55                   	push   ebp
c0014ce3:	57                   	push   edi
c0014ce4:	56                   	push   esi
c0014ce5:	53                   	push   ebx
c0014ce6:	83 ec 24             	sub    esp,0x24
c0014ce9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014ced:	0f 20 c2             	mov    edx,cr0
c0014cf0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014cf4:	0f 20 d7             	mov    edi,cr2
c0014cf7:	0f 20 de             	mov    esi,cr3
c0014cfa:	0f 20 e5             	mov    ebp,cr4
c0014cfd:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d00:	68 e6 bc 02 c0       	push   0xc002bce6
c0014d05:	e8 2d e1 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d0a:	59                   	pop    ecx
c0014d0b:	58                   	pop    eax
c0014d0c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d0f:	68 f1 bc 02 c0       	push   0xc002bcf1
c0014d14:	e8 1e e1 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d19:	58                   	pop    eax
c0014d1a:	5a                   	pop    edx
c0014d1b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d1e:	68 fc bc 02 c0       	push   0xc002bcfc
c0014d23:	e8 0f e1 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d28:	59                   	pop    ecx
c0014d29:	58                   	pop    eax
c0014d2a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d2d:	68 07 bd 02 c0       	push   0xc002bd07
c0014d32:	e8 00 e1 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d37:	58                   	pop    eax
c0014d38:	5a                   	pop    edx
c0014d39:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d3c:	68 12 bd 02 c0       	push   0xc002bd12
c0014d41:	e8 f1 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d46:	59                   	pop    ecx
c0014d47:	58                   	pop    eax
c0014d48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d4b:	68 1d bd 02 c0       	push   0xc002bd1d
c0014d50:	e8 e2 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d55:	58                   	pop    eax
c0014d56:	5a                   	pop    edx
c0014d57:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d5a:	68 28 bd 02 c0       	push   0xc002bd28
c0014d5f:	e8 d3 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d64:	59                   	pop    ecx
c0014d65:	58                   	pop    eax
c0014d66:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d69:	68 33 bd 02 c0       	push   0xc002bd33
c0014d6e:	e8 c4 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d73:	58                   	pop    eax
c0014d74:	5a                   	pop    edx
c0014d75:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d78:	68 3e bd 02 c0       	push   0xc002bd3e
c0014d7d:	e8 b5 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d82:	59                   	pop    ecx
c0014d83:	58                   	pop    eax
c0014d84:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d87:	68 4d bd 02 c0       	push   0xc002bd4d
c0014d8c:	e8 a6 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d91:	58                   	pop    eax
c0014d92:	5a                   	pop    edx
c0014d93:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d96:	68 58 bd 02 c0       	push   0xc002bd58
c0014d9b:	e8 97 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014da0:	59                   	pop    ecx
c0014da1:	58                   	pop    eax
c0014da2:	57                   	push   edi
c0014da3:	68 63 bd 02 c0       	push   0xc002bd63
c0014da8:	e8 8a e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014dad:	58                   	pop    eax
c0014dae:	5a                   	pop    edx
c0014daf:	56                   	push   esi
c0014db0:	68 6e bd 02 c0       	push   0xc002bd6e
c0014db5:	e8 7d e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014dba:	59                   	pop    ecx
c0014dbb:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014dc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc6:	e8 8f be ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c0014dcb:	58                   	pop    eax
c0014dcc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014dcf:	5a                   	pop    edx
c0014dd0:	c1 e0 05             	shl    eax,0x5
c0014dd3:	05 c0 e3 02 c0       	add    eax,0xc002e3c0
c0014dd8:	50                   	push   eax
c0014dd9:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014dde:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de4:	e8 fd c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014de9:	59                   	pop    ecx
c0014dea:	58                   	pop    eax
c0014deb:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014df0:	68 79 bd 02 c0       	push   0xc002bd79
c0014df5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dfb:	e8 e6 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e00:	58                   	pop    eax
c0014e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e06:	5a                   	pop    edx
c0014e07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e0a:	83 c0 0c             	add    eax,0xc
c0014e0d:	50                   	push   eax
c0014e0e:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014e13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e19:	e8 c8 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e1e:	59                   	pop    ecx
c0014e1f:	58                   	pop    eax
c0014e20:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014e25:	68 82 bd 02 c0       	push   0xc002bd82
c0014e2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e30:	e8 b1 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e35:	58                   	pop    eax
c0014e36:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014e3b:	5a                   	pop    edx
c0014e3c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e45:	e8 c2 c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014e4a:	59                   	pop    ecx
c0014e4b:	58                   	pop    eax
c0014e4c:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014e51:	68 8a bd 02 c0       	push   0xc002bd8a
c0014e56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e5c:	e8 85 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e61:	58                   	pop    eax
c0014e62:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014e67:	5a                   	pop    edx
c0014e68:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e71:	e8 96 c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014e76:	59                   	pop    ecx
c0014e77:	58                   	pop    eax
c0014e78:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014e7d:	68 92 bd 02 c0       	push   0xc002bd92
c0014e82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e88:	e8 59 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e8d:	58                   	pop    eax
c0014e8e:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014e93:	5a                   	pop    edx
c0014e94:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e9d:	e8 6a c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014ea2:	59                   	pop    ecx
c0014ea3:	58                   	pop    eax
c0014ea4:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014ea9:	68 9a bd 02 c0       	push   0xc002bd9a
c0014eae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb4:	e8 2d c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014eb9:	58                   	pop    eax
c0014eba:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014ebf:	5a                   	pop    edx
c0014ec0:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014ec3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec9:	e8 3e c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014ece:	59                   	pop    ecx
c0014ecf:	58                   	pop    eax
c0014ed0:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014ed5:	68 a2 bd 02 c0       	push   0xc002bda2
c0014eda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee0:	e8 01 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014ee5:	58                   	pop    eax
c0014ee6:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014eeb:	5a                   	pop    edx
c0014eec:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014eef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef5:	e8 12 c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014efa:	59                   	pop    ecx
c0014efb:	58                   	pop    eax
c0014efc:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014f01:	68 aa bd 02 c0       	push   0xc002bdaa
c0014f06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0c:	e8 d5 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f11:	58                   	pop    eax
c0014f12:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014f17:	5a                   	pop    edx
c0014f18:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f21:	e8 e6 c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014f26:	59                   	pop    ecx
c0014f27:	58                   	pop    eax
c0014f28:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014f2d:	68 b2 bd 02 c0       	push   0xc002bdb2
c0014f32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f38:	e8 a9 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f3d:	58                   	pop    eax
c0014f3e:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014f43:	5a                   	pop    edx
c0014f44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f48:	52                   	push   edx
c0014f49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4f:	e8 b8 c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014f54:	59                   	pop    ecx
c0014f55:	58                   	pop    eax
c0014f56:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014f5b:	68 bb bd 02 c0       	push   0xc002bdbb
c0014f60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f66:	e8 7b c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f6b:	58                   	pop    eax
c0014f6c:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014f71:	5a                   	pop    edx
c0014f72:	57                   	push   edi
c0014f73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f79:	e8 8e c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014f7e:	59                   	pop    ecx
c0014f7f:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014f84:	5f                   	pop    edi
c0014f85:	68 c3 bd 02 c0       	push   0xc002bdc3
c0014f8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f90:	e8 51 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f95:	58                   	pop    eax
c0014f96:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014f9b:	5a                   	pop    edx
c0014f9c:	56                   	push   esi
c0014f9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa3:	e8 64 c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014fa8:	59                   	pop    ecx
c0014fa9:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014fae:	5e                   	pop    esi
c0014faf:	68 cb bd 02 c0       	push   0xc002bdcb
c0014fb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fba:	e8 27 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014fbf:	5f                   	pop    edi
c0014fc0:	58                   	pop    eax
c0014fc1:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014fc6:	55                   	push   ebp
c0014fc7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fcd:	e8 3a c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014fd2:	58                   	pop    eax
c0014fd3:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014fd8:	5a                   	pop    edx
c0014fd9:	68 d3 bd 02 c0       	push   0xc002bdd3
c0014fde:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe4:	e8 fd bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014fe9:	0f 21 c0             	mov    eax,db0
c0014fec:	59                   	pop    ecx
c0014fed:	5e                   	pop    esi
c0014fee:	50                   	push   eax
c0014fef:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0014ff4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffa:	e8 0d c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014fff:	5f                   	pop    edi
c0015000:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0015005:	5d                   	pop    ebp
c0015006:	68 dc bd 02 c0       	push   0xc002bddc
c001500b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015011:	e8 d0 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015016:	0f 21 c8             	mov    eax,db1
c0015019:	5a                   	pop    edx
c001501a:	59                   	pop    ecx
c001501b:	50                   	push   eax
c001501c:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0015021:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015027:	e8 e0 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001502c:	5e                   	pop    esi
c001502d:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0015032:	5f                   	pop    edi
c0015033:	68 e4 bd 02 c0       	push   0xc002bde4
c0015038:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503e:	e8 a3 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015043:	0f 21 d0             	mov    eax,db2
c0015046:	5d                   	pop    ebp
c0015047:	5a                   	pop    edx
c0015048:	50                   	push   eax
c0015049:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001504e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015054:	e8 b3 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0015059:	59                   	pop    ecx
c001505a:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001505f:	5e                   	pop    esi
c0015060:	68 ec bd 02 c0       	push   0xc002bdec
c0015065:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506b:	e8 76 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015070:	0f 21 d8             	mov    eax,db3
c0015073:	5f                   	pop    edi
c0015074:	5d                   	pop    ebp
c0015075:	50                   	push   eax
c0015076:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001507b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015081:	e8 86 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0015086:	58                   	pop    eax
c0015087:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001508c:	5a                   	pop    edx
c001508d:	68 f4 bd 02 c0       	push   0xc002bdf4
c0015092:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015098:	e8 49 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001509d:	0f 21 f0             	mov    eax,db6
c00150a0:	59                   	pop    ecx
c00150a1:	5e                   	pop    esi
c00150a2:	50                   	push   eax
c00150a3:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c00150a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ae:	e8 59 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c00150b3:	5f                   	pop    edi
c00150b4:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c00150b9:	5d                   	pop    ebp
c00150ba:	68 fc bd 02 c0       	push   0xc002bdfc
c00150bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c5:	e8 1c bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c00150ca:	0f 21 f8             	mov    eax,db7
c00150cd:	5a                   	pop    edx
c00150ce:	59                   	pop    ecx
c00150cf:	50                   	push   eax
c00150d0:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c00150d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150db:	e8 2c bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c00150e0:	5e                   	pop    esi
c00150e1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150e4:	e8 3f 8c 00 00       	call   c001dd28 <Thr::getDriverNameFromAddress(unsigned long)>
c00150e9:	83 c4 10             	add    esp,0x10
c00150ec:	85 c0                	test   eax,eax
c00150ee:	74 7d                	je     c001516d <displayDebugInfo(regs*)+0x48b>
c00150f0:	89 c6                	mov    esi,eax
c00150f2:	50                   	push   eax
c00150f3:	50                   	push   eax
c00150f4:	56                   	push   esi
c00150f5:	68 04 be 02 c0       	push   0xc002be04
c00150fa:	e8 38 dd ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00150ff:	5a                   	pop    edx
c0015100:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0015105:	59                   	pop    ecx
c0015106:	68 12 be 02 c0       	push   0xc002be12
c001510b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015111:	e8 d0 be ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015116:	5f                   	pop    edi
c0015117:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001511c:	5d                   	pop    ebp
c001511d:	56                   	push   esi
c001511e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015124:	e8 bd be ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015129:	58                   	pop    eax
c001512a:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001512f:	5a                   	pop    edx
c0015130:	68 1e be 02 c0       	push   0xc002be1e
c0015135:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513b:	e8 a6 be ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015140:	59                   	pop    ecx
c0015141:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0015146:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001514c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001514f:	e8 0b 8c 00 00       	call   c001dd5f <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015154:	5b                   	pop    ebx
c0015155:	5d                   	pop    ebp
c0015156:	50                   	push   eax
c0015157:	57                   	push   edi
c0015158:	e8 af be ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001515d:	58                   	pop    eax
c001515e:	5a                   	pop    edx
c001515f:	56                   	push   esi
c0015160:	68 2a be 02 c0       	push   0xc002be2a
c0015165:	e8 cd dc ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	fa                   	cli    
c001516e:	f4                   	hlt    
c001516f:	eb fe                	jmp    c001516f <displayDebugInfo(regs*)+0x48d>

c0015171 <x87EmulHandler(regs*, void*)>:
c0015171:	83 ec 0c             	sub    esp,0xc
c0015174:	0f 20 c2             	mov    edx,cr0
c0015177:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001517c:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015180:	75 4b                	jne    c00151cd <x87EmulHandler(regs*, void*)+0x5c>
c0015182:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0015187:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001518d:	85 c0                	test   eax,eax
c001518f:	74 05                	je     c0015196 <x87EmulHandler(regs*, void*)+0x25>
c0015191:	83 e2 08             	and    edx,0x8
c0015194:	75 17                	jne    c00151ad <x87EmulHandler(regs*, void*)+0x3c>
c0015196:	83 ec 0c             	sub    esp,0xc
c0015199:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001519d:	e8 f6 b1 00 00       	call   c0020398 <Vm::x87Handler(regs*)>
c00151a2:	83 c4 10             	add    esp,0x10
c00151a5:	84 c0                	test   al,al
c00151a7:	74 24                	je     c00151cd <x87EmulHandler(regs*, void*)+0x5c>
c00151a9:	83 c4 0c             	add    esp,0xc
c00151ac:	c3                   	ret    
c00151ad:	83 ec 0c             	sub    esp,0xc
c00151b0:	68 50 be 02 c0       	push   0xc002be50
c00151b5:	e8 7d dc ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00151ba:	0f 06                	clts   
c00151bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151c1:	83 c4 10             	add    esp,0x10
c00151c4:	a3 a8 f5 02 c0       	mov    ds:0xc002f5a8,eax
c00151c9:	83 c4 0c             	add    esp,0xc
c00151cc:	c3                   	ret    
c00151cd:	83 ec 0c             	sub    esp,0xc
c00151d0:	68 3a be 02 c0       	push   0xc002be3a
c00151d5:	e8 5d dc ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00151da:	5a                   	pop    edx
c00151db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151df:	e8 fe fa ff ff       	call   c0014ce2 <displayDebugInfo(regs*)>

c00151e4 <gpFault(regs*, void*)>:
c00151e4:	53                   	push   ebx
c00151e5:	83 ec 14             	sub    esp,0x14
c00151e8:	c7 05 a4 f5 02 c0 15 f7 01 c0 	mov    DWORD PTR ds:0xc002f5a4,0xc001f715
c00151f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151f6:	53                   	push   ebx
c00151f7:	e8 19 a5 00 00       	call   c001f715 <Vm::faultHandler(regs*)>
c00151fc:	83 c4 10             	add    esp,0x10
c00151ff:	84 c0                	test   al,al
c0015201:	74 05                	je     c0015208 <gpFault(regs*, void*)+0x24>
c0015203:	83 c4 08             	add    esp,0x8
c0015206:	5b                   	pop    ebx
c0015207:	c3                   	ret    
c0015208:	83 ec 0c             	sub    esp,0xc
c001520b:	68 5d be 02 c0       	push   0xc002be5d
c0015210:	e8 22 dc ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0015215:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015218:	e8 c5 fa ff ff       	call   c0014ce2 <displayDebugInfo(regs*)>

c001521d <pgFault(regs*, void*)>:
c001521d:	83 ec 14             	sub    esp,0x14
c0015220:	0f 20 d0             	mov    eax,cr2
c0015223:	50                   	push   eax
c0015224:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015229:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001522c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015232:	e8 1d d8 ff ff       	call   c0012a54 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015237:	83 c4 10             	add    esp,0x10
c001523a:	84 c0                	test   al,al
c001523c:	74 04                	je     c0015242 <pgFault(regs*, void*)+0x25>
c001523e:	83 c4 0c             	add    esp,0xc
c0015241:	c3                   	ret    
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	68 78 be 02 c0       	push   0xc002be78
c001524a:	e8 e8 db ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001524f:	58                   	pop    eax
c0015250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015254:	e8 89 fa ff ff       	call   c0014ce2 <displayDebugInfo(regs*)>

c0015259 <otherISRHandler(regs*, void*)>:
c0015259:	53                   	push   ebx
c001525a:	83 ec 0c             	sub    esp,0xc
c001525d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015261:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015264:	50                   	push   eax
c0015265:	50                   	push   eax
c0015266:	68 85 be 02 c0       	push   0xc002be85
c001526b:	e8 c7 db ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0015270:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015273:	e8 6a fa ff ff       	call   c0014ce2 <displayDebugInfo(regs*)>

c0015278 <opcodeFault(regs*, void*)>:
c0015278:	55                   	push   ebp
c0015279:	89 e5                	mov    ebp,esp
c001527b:	56                   	push   esi
c001527c:	53                   	push   ebx
c001527d:	83 ec 40             	sub    esp,0x40
c0015280:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0015285:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001528b:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015291:	84 c0                	test   al,al
c0015293:	74 24                	je     c00152b9 <opcodeFault(regs*, void*)+0x41>
c0015295:	83 ec 0c             	sub    esp,0xc
c0015298:	68 a4 be 02 c0       	push   0xc002bea4
c001529d:	e8 95 db ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00152a2:	83 c4 10             	add    esp,0x10
c00152a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ab:	8d 50 19             	lea    edx,[eax+0x19]
c00152ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152b4:	e9 d5 05 00 00       	jmp    c001588e <opcodeFault(regs*, void*)+0x616>
c00152b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152bf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152c2:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152c6:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d6:	8a 00                	mov    al,BYTE PTR [eax]
c00152d8:	3c f0                	cmp    al,0xf0
c00152da:	75 17                	jne    c00152f3 <opcodeFault(regs*, void*)+0x7b>
c00152dc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e5:	8d 50 01             	lea    edx,[eax+0x1]
c00152e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152ee:	e9 da 00 00 00       	jmp    c00153cd <opcodeFault(regs*, void*)+0x155>
c00152f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f6:	8a 00                	mov    al,BYTE PTR [eax]
c00152f8:	3c f2                	cmp    al,0xf2
c00152fa:	74 09                	je     c0015305 <opcodeFault(regs*, void*)+0x8d>
c00152fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ff:	8a 00                	mov    al,BYTE PTR [eax]
c0015301:	3c f3                	cmp    al,0xf3
c0015303:	75 1b                	jne    c0015320 <opcodeFault(regs*, void*)+0xa8>
c0015305:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015309:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001530c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015312:	8d 50 01             	lea    edx,[eax+0x1]
c0015315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015318:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001531b:	e9 ad 00 00 00       	jmp    c00153cd <opcodeFault(regs*, void*)+0x155>
c0015320:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015323:	8a 00                	mov    al,BYTE PTR [eax]
c0015325:	3c 66                	cmp    al,0x66
c0015327:	75 1f                	jne    c0015348 <opcodeFault(regs*, void*)+0xd0>
c0015329:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001532d:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015331:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015337:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533a:	8d 50 01             	lea    edx,[eax+0x1]
c001533d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015340:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015343:	e9 85 00 00 00       	jmp    c00153cd <opcodeFault(regs*, void*)+0x155>
c0015348:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534b:	8a 00                	mov    al,BYTE PTR [eax]
c001534d:	3c 67                	cmp    al,0x67
c001534f:	75 18                	jne    c0015369 <opcodeFault(regs*, void*)+0xf1>
c0015351:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015355:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001535e:	8d 50 01             	lea    edx,[eax+0x1]
c0015361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015364:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015367:	eb 64                	jmp    c00153cd <opcodeFault(regs*, void*)+0x155>
c0015369:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536c:	8a 00                	mov    al,BYTE PTR [eax]
c001536e:	3c 2e                	cmp    al,0x2e
c0015370:	74 09                	je     c001537b <opcodeFault(regs*, void*)+0x103>
c0015372:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015375:	8a 00                	mov    al,BYTE PTR [eax]
c0015377:	3c 3e                	cmp    al,0x3e
c0015379:	75 18                	jne    c0015393 <opcodeFault(regs*, void*)+0x11b>
c001537b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001537f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015385:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015388:	8d 50 01             	lea    edx,[eax+0x1]
c001538b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015391:	eb 3a                	jmp    c00153cd <opcodeFault(regs*, void*)+0x155>
c0015393:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015396:	8a 00                	mov    al,BYTE PTR [eax]
c0015398:	3c 36                	cmp    al,0x36
c001539a:	74 1b                	je     c00153b7 <opcodeFault(regs*, void*)+0x13f>
c001539c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539f:	8a 00                	mov    al,BYTE PTR [eax]
c00153a1:	3c 26                	cmp    al,0x26
c00153a3:	74 12                	je     c00153b7 <opcodeFault(regs*, void*)+0x13f>
c00153a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a8:	8a 00                	mov    al,BYTE PTR [eax]
c00153aa:	3c 64                	cmp    al,0x64
c00153ac:	74 09                	je     c00153b7 <opcodeFault(regs*, void*)+0x13f>
c00153ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b1:	8a 00                	mov    al,BYTE PTR [eax]
c00153b3:	3c 65                	cmp    al,0x65
c00153b5:	75 16                	jne    c00153cd <opcodeFault(regs*, void*)+0x155>
c00153b7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153bb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c4:	8d 50 01             	lea    edx,[eax+0x1]
c00153c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d0:	8a 00                	mov    al,BYTE PTR [eax]
c00153d2:	3c 0f                	cmp    al,0xf
c00153d4:	0f 85 ad 00 00 00    	jne    c0015487 <opcodeFault(regs*, void*)+0x20f>
c00153da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153dd:	40                   	inc    eax
c00153de:	8a 00                	mov    al,BYTE PTR [eax]
c00153e0:	3c c2                	cmp    al,0xc2
c00153e2:	74 0e                	je     c00153f2 <opcodeFault(regs*, void*)+0x17a>
c00153e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e7:	40                   	inc    eax
c00153e8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ea:	3c c3                	cmp    al,0xc3
c00153ec:	0f 85 95 00 00 00    	jne    c0015487 <opcodeFault(regs*, void*)+0x20f>
c00153f2:	83 ec 0c             	sub    esp,0xc
c00153f5:	68 c7 be 02 c0       	push   0xc002bec7
c00153fa:	e8 38 da ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00153ff:	83 c4 10             	add    esp,0x10
c0015402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015405:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015408:	8d 50 01             	lea    edx,[eax+0x1]
c001540b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015411:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015414:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015417:	8a 00                	mov    al,BYTE PTR [eax]
c0015419:	8d 50 fe             	lea    edx,[eax-0x2]
c001541c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541f:	88 10                	mov    BYTE PTR [eax],dl
c0015421:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015424:	50                   	push   eax
c0015425:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015428:	50                   	push   eax
c0015429:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001542c:	50                   	push   eax
c001542d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015430:	e8 3d 4c 00 00       	call   c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015435:	83 c4 10             	add    esp,0x10
c0015438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001543e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015441:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015444:	01 d0                	add    eax,edx
c0015446:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001544f:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015452:	48                   	dec    eax
c0015453:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015459:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001545c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001545f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015462:	83 ec 04             	sub    esp,0x4
c0015465:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015468:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001546b:	50                   	push   eax
c001546c:	e8 43 ad fe ff       	call   c00001b4 <voodooXADD>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015477:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001547a:	01 c2                	add    edx,eax
c001547c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015482:	e9 07 04 00 00       	jmp    c001588e <opcodeFault(regs*, void*)+0x616>
c0015487:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548a:	8a 00                	mov    al,BYTE PTR [eax]
c001548c:	3c 0f                	cmp    al,0xf
c001548e:	0f 85 8b 01 00 00    	jne    c001561f <opcodeFault(regs*, void*)+0x3a7>
c0015494:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015497:	40                   	inc    eax
c0015498:	8a 00                	mov    al,BYTE PTR [eax]
c001549a:	3c c7                	cmp    al,0xc7
c001549c:	0f 86 7d 01 00 00    	jbe    c001561f <opcodeFault(regs*, void*)+0x3a7>
c00154a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a5:	40                   	inc    eax
c00154a6:	8a 00                	mov    al,BYTE PTR [eax]
c00154a8:	3c cf                	cmp    al,0xcf
c00154aa:	0f 87 6f 01 00 00    	ja     c001561f <opcodeFault(regs*, void*)+0x3a7>
c00154b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b3:	40                   	inc    eax
c00154b4:	8a 00                	mov    al,BYTE PTR [eax]
c00154b6:	83 c0 38             	add    eax,0x38
c00154b9:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154bc:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154c0:	75 0b                	jne    c00154cd <opcodeFault(regs*, void*)+0x255>
c00154c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154c8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154cb:	eb 75                	jmp    c0015542 <opcodeFault(regs*, void*)+0x2ca>
c00154cd:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154d1:	75 0b                	jne    c00154de <opcodeFault(regs*, void*)+0x266>
c00154d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154dc:	eb 64                	jmp    c0015542 <opcodeFault(regs*, void*)+0x2ca>
c00154de:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154e2:	75 0b                	jne    c00154ef <opcodeFault(regs*, void*)+0x277>
c00154e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ed:	eb 53                	jmp    c0015542 <opcodeFault(regs*, void*)+0x2ca>
c00154ef:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154f3:	75 0b                	jne    c0015500 <opcodeFault(regs*, void*)+0x288>
c00154f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154fe:	eb 42                	jmp    c0015542 <opcodeFault(regs*, void*)+0x2ca>
c0015500:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015504:	75 0b                	jne    c0015511 <opcodeFault(regs*, void*)+0x299>
c0015506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015509:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001550c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001550f:	eb 31                	jmp    c0015542 <opcodeFault(regs*, void*)+0x2ca>
c0015511:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015515:	75 0b                	jne    c0015522 <opcodeFault(regs*, void*)+0x2aa>
c0015517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001551d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015520:	eb 20                	jmp    c0015542 <opcodeFault(regs*, void*)+0x2ca>
c0015522:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015526:	75 0b                	jne    c0015533 <opcodeFault(regs*, void*)+0x2bb>
c0015528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001552e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015531:	eb 0f                	jmp    c0015542 <opcodeFault(regs*, void*)+0x2ca>
c0015533:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015537:	75 09                	jne    c0015542 <opcodeFault(regs*, void*)+0x2ca>
c0015539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001553f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015542:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015546:	74 10                	je     c0015558 <opcodeFault(regs*, void*)+0x2e0>
c0015548:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001554f:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015556:	eb 2d                	jmp    c0015585 <opcodeFault(regs*, void*)+0x30d>
c0015558:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001555b:	c1 e0 18             	shl    eax,0x18
c001555e:	89 c2                	mov    edx,eax
c0015560:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015563:	c1 e0 08             	shl    eax,0x8
c0015566:	25 00 00 ff 00       	and    eax,0xff0000
c001556b:	09 c2                	or     edx,eax
c001556d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015570:	c1 e8 08             	shr    eax,0x8
c0015573:	25 00 ff 00 00       	and    eax,0xff00
c0015578:	09 c2                	or     edx,eax
c001557a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001557d:	c1 e8 18             	shr    eax,0x18
c0015580:	09 d0                	or     eax,edx
c0015582:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015585:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015589:	75 0b                	jne    c0015596 <opcodeFault(regs*, void*)+0x31e>
c001558b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015591:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015594:	eb 75                	jmp    c001560b <opcodeFault(regs*, void*)+0x393>
c0015596:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001559a:	75 0b                	jne    c00155a7 <opcodeFault(regs*, void*)+0x32f>
c001559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155a2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00155a5:	eb 64                	jmp    c001560b <opcodeFault(regs*, void*)+0x393>
c00155a7:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155ab:	75 0b                	jne    c00155b8 <opcodeFault(regs*, void*)+0x340>
c00155ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b3:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155b6:	eb 53                	jmp    c001560b <opcodeFault(regs*, void*)+0x393>
c00155b8:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155bc:	75 0b                	jne    c00155c9 <opcodeFault(regs*, void*)+0x351>
c00155be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155c7:	eb 42                	jmp    c001560b <opcodeFault(regs*, void*)+0x393>
c00155c9:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155cd:	75 0b                	jne    c00155da <opcodeFault(regs*, void*)+0x362>
c00155cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155d5:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155d8:	eb 31                	jmp    c001560b <opcodeFault(regs*, void*)+0x393>
c00155da:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155de:	75 0b                	jne    c00155eb <opcodeFault(regs*, void*)+0x373>
c00155e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155e9:	eb 20                	jmp    c001560b <opcodeFault(regs*, void*)+0x393>
c00155eb:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155ef:	75 0b                	jne    c00155fc <opcodeFault(regs*, void*)+0x384>
c00155f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155f7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155fa:	eb 0f                	jmp    c001560b <opcodeFault(regs*, void*)+0x393>
c00155fc:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015600:	75 09                	jne    c001560b <opcodeFault(regs*, void*)+0x393>
c0015602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015605:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015608:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001560b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015611:	8d 50 02             	lea    edx,[eax+0x2]
c0015614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015617:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001561a:	e9 6f 02 00 00       	jmp    c001588e <opcodeFault(regs*, void*)+0x616>
c001561f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015622:	8a 00                	mov    al,BYTE PTR [eax]
c0015624:	3c 0f                	cmp    al,0xf
c0015626:	0f 85 8d 01 00 00    	jne    c00157b9 <opcodeFault(regs*, void*)+0x541>
c001562c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562f:	40                   	inc    eax
c0015630:	8a 00                	mov    al,BYTE PTR [eax]
c0015632:	3c c7                	cmp    al,0xc7
c0015634:	0f 85 7f 01 00 00    	jne    c00157b9 <opcodeFault(regs*, void*)+0x541>
c001563a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001563d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015640:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015643:	8d 50 01             	lea    edx,[eax+0x1]
c0015646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015649:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001564c:	8d 45 ba             	lea    eax,[ebp-0x46]
c001564f:	50                   	push   eax
c0015650:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015653:	50                   	push   eax
c0015654:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015657:	50                   	push   eax
c0015658:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001565b:	e8 12 4a 00 00       	call   c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015666:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015669:	83 f0 01             	xor    eax,0x1
c001566c:	84 c0                	test   al,al
c001566e:	0f 84 45 01 00 00    	je     c00157b9 <opcodeFault(regs*, void*)+0x541>
c0015674:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015677:	3c 01                	cmp    al,0x1
c0015679:	0f 85 3a 01 00 00    	jne    c00157b9 <opcodeFault(regs*, void*)+0x541>
c001567f:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015682:	83 f0 01             	xor    eax,0x1
c0015685:	84 c0                	test   al,al
c0015687:	0f 84 2c 01 00 00    	je     c00157b9 <opcodeFault(regs*, void*)+0x541>
c001568d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015690:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015693:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015696:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001569d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156a0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156a3:	89 c2                	mov    edx,eax
c00156a5:	b8 00 00 00 00       	mov    eax,0x0
c00156aa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156ad:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156b6:	ba 00 00 00 00       	mov    edx,0x0
c00156bb:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156be:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156c7:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156ca:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156d1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156d4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156d7:	89 c2                	mov    edx,eax
c00156d9:	b8 00 00 00 00       	mov    eax,0x0
c00156de:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156e1:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156ea:	ba 00 00 00 00       	mov    edx,0x0
c00156ef:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156f2:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156f5:	fa                   	cli    
c00156f6:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c00156fb:	40                   	inc    eax
c00156fc:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0015701:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015704:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015707:	8b 00                	mov    eax,DWORD PTR [eax]
c0015709:	89 c1                	mov    ecx,eax
c001570b:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001570e:	89 cb                	mov    ebx,ecx
c0015710:	89 d0                	mov    eax,edx
c0015712:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015715:	89 c6                	mov    esi,eax
c0015717:	89 f0                	mov    eax,esi
c0015719:	09 d8                	or     eax,ebx
c001571b:	85 c0                	test   eax,eax
c001571d:	75 21                	jne    c0015740 <opcodeFault(regs*, void*)+0x4c8>
c001571f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015722:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015725:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015728:	89 01                	mov    DWORD PTR [ecx],eax
c001572a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015733:	83 c8 40             	or     eax,0x40
c0015736:	89 c2                	mov    edx,eax
c0015738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001573e:	eb 3e                	jmp    c001577e <opcodeFault(regs*, void*)+0x506>
c0015740:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015743:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015746:	8b 00                	mov    eax,DWORD PTR [eax]
c0015748:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001574b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001574e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015754:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015757:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001575a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001575d:	89 d0                	mov    eax,edx
c001575f:	31 d2                	xor    edx,edx
c0015761:	89 c3                	mov    ebx,eax
c0015763:	89 d6                	mov    esi,edx
c0015765:	89 da                	mov    edx,ebx
c0015767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001576d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015770:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015773:	83 e0 bf             	and    eax,0xffffffbf
c0015776:	89 c2                	mov    edx,eax
c0015778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001577e:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0015783:	48                   	dec    eax
c0015784:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0015789:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001578e:	85 c0                	test   eax,eax
c0015790:	75 01                	jne    c0015793 <opcodeFault(regs*, void*)+0x51b>
c0015792:	fb                   	sti    
c0015793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015796:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015799:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001579c:	01 c2                	add    edx,eax
c001579e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157a4:	83 ec 0c             	sub    esp,0xc
c00157a7:	68 d6 be 02 c0       	push   0xc002bed6
c00157ac:	e8 86 d6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00157b1:	83 c4 10             	add    esp,0x10
c00157b4:	e9 d5 00 00 00       	jmp    c001588e <opcodeFault(regs*, void*)+0x616>
c00157b9:	83 ec 0c             	sub    esp,0xc
c00157bc:	68 e9 be 02 c0       	push   0xc002bee9
c00157c1:	e8 71 d6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00157c6:	83 c4 10             	add    esp,0x10
c00157c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157d5:	c1 e0 04             	shl    eax,0x4
c00157d8:	01 d0                	add    eax,edx
c00157da:	83 c0 03             	add    eax,0x3
c00157dd:	8a 00                	mov    al,BYTE PTR [eax]
c00157df:	0f b6 d8             	movzx  ebx,al
c00157e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157ee:	c1 e0 04             	shl    eax,0x4
c00157f1:	01 d0                	add    eax,edx
c00157f3:	83 c0 02             	add    eax,0x2
c00157f6:	8a 00                	mov    al,BYTE PTR [eax]
c00157f8:	0f b6 c8             	movzx  ecx,al
c00157fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fe:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015804:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015807:	c1 e0 04             	shl    eax,0x4
c001580a:	01 d0                	add    eax,edx
c001580c:	40                   	inc    eax
c001580d:	8a 00                	mov    al,BYTE PTR [eax]
c001580f:	0f b6 d0             	movzx  edx,al
c0015812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015815:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001581e:	c1 e0 04             	shl    eax,0x4
c0015821:	01 f0                	add    eax,esi
c0015823:	8a 00                	mov    al,BYTE PTR [eax]
c0015825:	0f b6 c0             	movzx  eax,al
c0015828:	83 ec 0c             	sub    esp,0xc
c001582b:	53                   	push   ebx
c001582c:	51                   	push   ecx
c001582d:	52                   	push   edx
c001582e:	50                   	push   eax
c001582f:	68 fc be 02 c0       	push   0xc002befc
c0015834:	e8 fe d5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0015839:	83 c4 20             	add    esp,0x20
c001583c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015842:	83 c0 03             	add    eax,0x3
c0015845:	8a 00                	mov    al,BYTE PTR [eax]
c0015847:	0f b6 d8             	movzx  ebx,al
c001584a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015850:	83 c0 02             	add    eax,0x2
c0015853:	8a 00                	mov    al,BYTE PTR [eax]
c0015855:	0f b6 c8             	movzx  ecx,al
c0015858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001585e:	40                   	inc    eax
c001585f:	8a 00                	mov    al,BYTE PTR [eax]
c0015861:	0f b6 d0             	movzx  edx,al
c0015864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015867:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001586a:	8a 00                	mov    al,BYTE PTR [eax]
c001586c:	0f b6 c0             	movzx  eax,al
c001586f:	83 ec 0c             	sub    esp,0xc
c0015872:	53                   	push   ebx
c0015873:	51                   	push   ecx
c0015874:	52                   	push   edx
c0015875:	50                   	push   eax
c0015876:	68 24 bf 02 c0       	push   0xc002bf24
c001587b:	e8 b7 d5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0015880:	83 c4 20             	add    esp,0x20
c0015883:	83 ec 0c             	sub    esp,0xc
c0015886:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015889:	e8 54 f4 ff ff       	call   c0014ce2 <displayDebugInfo(regs*)>
c001588e:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015891:	5b                   	pop    ebx
c0015892:	5e                   	pop    esi
c0015893:	5d                   	pop    ebp
c0015894:	c3                   	ret    

c0015895 <displayProgramFault(char const*)>:
c0015895:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001589a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001589d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00158a3:	85 c0                	test   eax,eax
c00158a5:	74 15                	je     c00158bc <displayProgramFault(char const*)+0x27>
c00158a7:	83 ec 0c             	sub    esp,0xc
c00158aa:	6a 04                	push   0x4
c00158ac:	6a 0f                	push   0xf
c00158ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158b2:	50                   	push   eax
c00158b3:	e8 70 b4 ff ff       	call   c0010d28 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158b8:	83 c4 1c             	add    esp,0x1c
c00158bb:	c3                   	ret    
c00158bc:	c3                   	ret    

c00158bd <setupInterruptController()>:
c00158bd:	55                   	push   ebp
c00158be:	89 e5                	mov    ebp,esp
c00158c0:	53                   	push   ebx
c00158c1:	83 ec 24             	sub    esp,0x24
c00158c4:	b8 00 00 00 00       	mov    eax,0x0
c00158c9:	85 c0                	test   eax,eax
c00158cb:	0f 95 c0             	setne  al
c00158ce:	84 c0                	test   al,al
c00158d0:	74 5b                	je     c001592d <setupInterruptController()+0x70>
c00158d2:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158d9:	83 ec 0c             	sub    esp,0xc
c00158dc:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158df:	e8 a8 9f ff ff       	call   c000f88c <malloc>
c00158e4:	83 c4 10             	add    esp,0x10
c00158e7:	89 c3                	mov    ebx,eax
c00158e9:	83 ec 0c             	sub    esp,0xc
c00158ec:	53                   	push   ebx
c00158ed:	e8 6e 0d 01 00       	call   c0026660 <APIC::APIC()>
c00158f2:	83 c4 10             	add    esp,0x10
c00158f5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158f8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015900:	83 c0 08             	add    eax,0x8
c0015903:	8b 00                	mov    eax,DWORD PTR [eax]
c0015905:	6a 00                	push   0x0
c0015907:	6a 00                	push   0x0
c0015909:	6a 00                	push   0x0
c001590b:	52                   	push   edx
c001590c:	ff d0                	call   eax
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0015916:	83 ec 08             	sub    esp,0x8
c0015919:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001591c:	50                   	push   eax
c001591d:	e8 4e e9 ff ff       	call   c0014270 <Device::addChild(Device*)>
c0015922:	83 c4 10             	add    esp,0x10
c0015925:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015928:	e9 89 03 00 00       	jmp    c0015cb6 <setupInterruptController()+0x3f9>
c001592d:	a0 a0 1d 03 c0       	mov    al,ds:0xc0031da0
c0015932:	84 c0                	test   al,al
c0015934:	75 24                	jne    c001595a <setupInterruptController()+0x9d>
c0015936:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001593b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015941:	83 e2 fe             	and    edx,0xfffffffe
c0015944:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001594a:	83 ec 0c             	sub    esp,0xc
c001594d:	68 49 bf 02 c0       	push   0xc002bf49
c0015952:	e8 e0 d4 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0015957:	83 c4 10             	add    esp,0x10
c001595a:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001595f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015965:	83 e0 01             	and    eax,0x1
c0015968:	84 c0                	test   al,al
c001596a:	0f 95 c0             	setne  al
c001596d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015970:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015977:	83 ec 0c             	sub    esp,0xc
c001597a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001597d:	e8 0a 9f ff ff       	call   c000f88c <malloc>
c0015982:	83 c4 10             	add    esp,0x10
c0015985:	89 c3                	mov    ebx,eax
c0015987:	83 ec 0c             	sub    esp,0xc
c001598a:	53                   	push   ebx
c001598b:	e8 28 12 01 00       	call   c0026bb8 <PIC::PIC()>
c0015990:	83 c4 10             	add    esp,0x10
c0015993:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015996:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015999:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001599c:	8b 00                	mov    eax,DWORD PTR [eax]
c001599e:	83 c0 08             	add    eax,0x8
c00159a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a3:	6a 00                	push   0x0
c00159a5:	6a 00                	push   0x0
c00159a7:	6a 00                	push   0x0
c00159a9:	52                   	push   edx
c00159aa:	ff d0                	call   eax
c00159ac:	83 c4 10             	add    esp,0x10
c00159af:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159b3:	74 73                	je     c0015a28 <setupInterruptController()+0x16b>
c00159b5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bd:	83 c0 0c             	add    eax,0xc
c00159c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c2:	6a 00                	push   0x0
c00159c4:	6a 00                	push   0x0
c00159c6:	6a 00                	push   0x0
c00159c8:	52                   	push   edx
c00159c9:	ff d0                	call   eax
c00159cb:	83 c4 10             	add    esp,0x10
c00159ce:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159d2:	74 15                	je     c00159e9 <setupInterruptController()+0x12c>
c00159d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d9:	83 c0 04             	add    eax,0x4
c00159dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159de:	83 ec 0c             	sub    esp,0xc
c00159e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159e4:	ff d0                	call   eax
c00159e6:	83 c4 10             	add    esp,0x10
c00159e9:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159f0:	83 ec 0c             	sub    esp,0xc
c00159f3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159f6:	e8 91 9e ff ff       	call   c000f88c <malloc>
c00159fb:	83 c4 10             	add    esp,0x10
c00159fe:	89 c3                	mov    ebx,eax
c0015a00:	83 ec 0c             	sub    esp,0xc
c0015a03:	53                   	push   ebx
c0015a04:	e8 57 0c 01 00       	call   c0026660 <APIC::APIC()>
c0015a09:	83 c4 10             	add    esp,0x10
c0015a0c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a0f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a17:	83 c0 08             	add    eax,0x8
c0015a1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1c:	6a 00                	push   0x0
c0015a1e:	6a 00                	push   0x0
c0015a20:	6a 00                	push   0x0
c0015a22:	52                   	push   edx
c0015a23:	ff d0                	call   eax
c0015a25:	83 c4 10             	add    esp,0x10
c0015a28:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0015a2d:	83 ec 08             	sub    esp,0x8
c0015a30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a33:	50                   	push   eax
c0015a34:	e8 37 e8 ff ff       	call   c0014270 <Device::addChild(Device*)>
c0015a39:	83 c4 10             	add    esp,0x10
c0015a3c:	c7 05 a8 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5a8,0x0
c0015a46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4b:	83 c0 24             	add    eax,0x24
c0015a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a50:	6a 00                	push   0x0
c0015a52:	68 59 52 01 c0       	push   0xc0015259
c0015a57:	6a 00                	push   0x0
c0015a59:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a5c:	ff d0                	call   eax
c0015a5e:	83 c4 10             	add    esp,0x10
c0015a61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a64:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a66:	83 c0 24             	add    eax,0x24
c0015a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6b:	6a 00                	push   0x0
c0015a6d:	68 59 52 01 c0       	push   0xc0015259
c0015a72:	6a 01                	push   0x1
c0015a74:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a77:	ff d0                	call   eax
c0015a79:	83 c4 10             	add    esp,0x10
c0015a7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a81:	83 c0 24             	add    eax,0x24
c0015a84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a86:	6a 00                	push   0x0
c0015a88:	68 3f 4b 01 c0       	push   0xc0014b3f
c0015a8d:	6a 02                	push   0x2
c0015a8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a92:	ff d0                	call   eax
c0015a94:	83 c4 10             	add    esp,0x10
c0015a97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9c:	83 c0 24             	add    eax,0x24
c0015a9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa1:	6a 00                	push   0x0
c0015aa3:	68 59 52 01 c0       	push   0xc0015259
c0015aa8:	6a 03                	push   0x3
c0015aaa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aad:	ff d0                	call   eax
c0015aaf:	83 c4 10             	add    esp,0x10
c0015ab2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab7:	83 c0 24             	add    eax,0x24
c0015aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abc:	6a 00                	push   0x0
c0015abe:	68 59 52 01 c0       	push   0xc0015259
c0015ac3:	6a 04                	push   0x4
c0015ac5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac8:	ff d0                	call   eax
c0015aca:	83 c4 10             	add    esp,0x10
c0015acd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad2:	83 c0 24             	add    eax,0x24
c0015ad5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad7:	6a 00                	push   0x0
c0015ad9:	68 59 52 01 c0       	push   0xc0015259
c0015ade:	6a 05                	push   0x5
c0015ae0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae3:	ff d0                	call   eax
c0015ae5:	83 c4 10             	add    esp,0x10
c0015ae8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aed:	83 c0 24             	add    eax,0x24
c0015af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af2:	6a 00                	push   0x0
c0015af4:	68 78 52 01 c0       	push   0xc0015278
c0015af9:	6a 06                	push   0x6
c0015afb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afe:	ff d0                	call   eax
c0015b00:	83 c4 10             	add    esp,0x10
c0015b03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b08:	83 c0 24             	add    eax,0x24
c0015b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0d:	6a 00                	push   0x0
c0015b0f:	68 71 51 01 c0       	push   0xc0015171
c0015b14:	6a 07                	push   0x7
c0015b16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b19:	ff d0                	call   eax
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b23:	83 c0 24             	add    eax,0x24
c0015b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b28:	6a 00                	push   0x0
c0015b2a:	68 5a 49 01 c0       	push   0xc001495a
c0015b2f:	6a 08                	push   0x8
c0015b31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b34:	ff d0                	call   eax
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3e:	83 c0 24             	add    eax,0x24
c0015b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b43:	6a 00                	push   0x0
c0015b45:	68 59 52 01 c0       	push   0xc0015259
c0015b4a:	6a 09                	push   0x9
c0015b4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4f:	ff d0                	call   eax
c0015b51:	83 c4 10             	add    esp,0x10
c0015b54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b59:	83 c0 24             	add    eax,0x24
c0015b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5e:	6a 00                	push   0x0
c0015b60:	68 59 52 01 c0       	push   0xc0015259
c0015b65:	6a 0a                	push   0xa
c0015b67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6a:	ff d0                	call   eax
c0015b6c:	83 c4 10             	add    esp,0x10
c0015b6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b74:	83 c0 24             	add    eax,0x24
c0015b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b79:	6a 00                	push   0x0
c0015b7b:	68 59 52 01 c0       	push   0xc0015259
c0015b80:	6a 0b                	push   0xb
c0015b82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b85:	ff d0                	call   eax
c0015b87:	83 c4 10             	add    esp,0x10
c0015b8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8f:	83 c0 24             	add    eax,0x24
c0015b92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b94:	6a 00                	push   0x0
c0015b96:	68 59 52 01 c0       	push   0xc0015259
c0015b9b:	6a 0c                	push   0xc
c0015b9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba0:	ff d0                	call   eax
c0015ba2:	83 c4 10             	add    esp,0x10
c0015ba5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baa:	83 c0 24             	add    eax,0x24
c0015bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baf:	6a 00                	push   0x0
c0015bb1:	68 e4 51 01 c0       	push   0xc00151e4
c0015bb6:	6a 0d                	push   0xd
c0015bb8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbb:	ff d0                	call   eax
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc5:	83 c0 24             	add    eax,0x24
c0015bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bca:	6a 00                	push   0x0
c0015bcc:	68 1d 52 01 c0       	push   0xc001521d
c0015bd1:	6a 0e                	push   0xe
c0015bd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd6:	ff d0                	call   eax
c0015bd8:	83 c4 10             	add    esp,0x10
c0015bdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be0:	83 c0 24             	add    eax,0x24
c0015be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be5:	6a 00                	push   0x0
c0015be7:	68 59 52 01 c0       	push   0xc0015259
c0015bec:	6a 0f                	push   0xf
c0015bee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf1:	ff d0                	call   eax
c0015bf3:	83 c4 10             	add    esp,0x10
c0015bf6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfb:	83 c0 24             	add    eax,0x24
c0015bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c00:	6a 00                	push   0x0
c0015c02:	68 59 52 01 c0       	push   0xc0015259
c0015c07:	6a 10                	push   0x10
c0015c09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0c:	ff d0                	call   eax
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c16:	83 c0 24             	add    eax,0x24
c0015c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1b:	6a 00                	push   0x0
c0015c1d:	68 59 52 01 c0       	push   0xc0015259
c0015c22:	6a 11                	push   0x11
c0015c24:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c27:	ff d0                	call   eax
c0015c29:	83 c4 10             	add    esp,0x10
c0015c2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c31:	83 c0 24             	add    eax,0x24
c0015c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c36:	6a 00                	push   0x0
c0015c38:	68 59 52 01 c0       	push   0xc0015259
c0015c3d:	6a 12                	push   0x12
c0015c3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c42:	ff d0                	call   eax
c0015c44:	83 c4 10             	add    esp,0x10
c0015c47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4c:	83 c0 24             	add    eax,0x24
c0015c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c51:	6a 00                	push   0x0
c0015c53:	68 59 52 01 c0       	push   0xc0015259
c0015c58:	6a 13                	push   0x13
c0015c5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5d:	ff d0                	call   eax
c0015c5f:	83 c4 10             	add    esp,0x10
c0015c62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c67:	83 c0 24             	add    eax,0x24
c0015c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6c:	6a 00                	push   0x0
c0015c6e:	68 59 52 01 c0       	push   0xc0015259
c0015c73:	6a 14                	push   0x14
c0015c75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c78:	ff d0                	call   eax
c0015c7a:	83 c4 10             	add    esp,0x10
c0015c7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c82:	83 c0 24             	add    eax,0x24
c0015c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c87:	6a 00                	push   0x0
c0015c89:	68 59 52 01 c0       	push   0xc0015259
c0015c8e:	6a 1e                	push   0x1e
c0015c90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c93:	ff d0                	call   eax
c0015c95:	83 c4 10             	add    esp,0x10
c0015c98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9d:	83 c0 24             	add    eax,0x24
c0015ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca2:	6a 00                	push   0x0
c0015ca4:	68 9e cd 01 c0       	push   0xc001cd9e
c0015ca9:	6a 60                	push   0x60
c0015cab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cae:	ff d0                	call   eax
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cb9:	c9                   	leave  
c0015cba:	c3                   	ret    
c0015cbb:	90                   	nop

c0015cbc <InterruptController::convertLegacyIRQNumber(int)>:
c0015cbc:	55                   	push   ebp
c0015cbd:	89 e5                	mov    ebp,esp
c0015cbf:	83 ec 08             	sub    esp,0x8
c0015cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc5:	83 ec 0c             	sub    esp,0xc
c0015cc8:	50                   	push   eax
c0015cc9:	e8 a2 e8 ff ff       	call   c0014570 <Device::getName()>
c0015cce:	83 c4 10             	add    esp,0x10
c0015cd1:	8a 00                	mov    al,BYTE PTR [eax]
c0015cd3:	3c 41                	cmp    al,0x41
c0015cd5:	0f 94 c0             	sete   al
c0015cd8:	84 c0                	test   al,al
c0015cda:	74 28                	je     c0015d04 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cdc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015ce0:	7f 12                	jg     c0015cf4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015ce2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ce5:	05 60 e6 02 c0       	add    eax,0xc002e660
c0015cea:	8a 00                	mov    al,BYTE PTR [eax]
c0015cec:	0f b6 c0             	movzx  eax,al
c0015cef:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015cf2:	eb 10                	jmp    c0015d04 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cf4:	83 ec 0c             	sub    esp,0xc
c0015cf7:	68 38 bc 02 c0       	push   0xc002bc38
c0015cfc:	e8 a4 4c 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d07:	c9                   	leave  
c0015d08:	c3                   	ret    
c0015d09:	90                   	nop

c0015d0a <startGUI(void*)>:
c0015d0a:	55                   	push   ebp
c0015d0b:	89 e5                	mov    ebp,esp
c0015d0d:	53                   	push   ebx
c0015d0e:	83 ec 04             	sub    esp,0x4
c0015d11:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0015d16:	48                   	dec    eax
c0015d17:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0015d1c:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0015d21:	85 c0                	test   eax,eax
c0015d23:	75 01                	jne    c0015d26 <startGUI(void*)+0x1c>
c0015d25:	fb                   	sti    
c0015d26:	8b 1d 08 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f408
c0015d2c:	83 ec 08             	sub    esp,0x8
c0015d2f:	6a 01                	push   0x1
c0015d31:	68 ac bf 02 c0       	push   0xc002bfac
c0015d36:	e8 3e 80 00 00       	call   c001dd79 <Thr::loadDLL(char const*, bool)>
c0015d3b:	83 c4 10             	add    esp,0x10
c0015d3e:	83 ec 08             	sub    esp,0x8
c0015d41:	53                   	push   ebx
c0015d42:	50                   	push   eax
c0015d43:	e8 5c 82 00 00       	call   c001dfa4 <Thr::executeDLL(unsigned long, void*)>
c0015d48:	83 c4 10             	add    esp,0x10
c0015d4b:	8b 1d 08 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f408
c0015d51:	83 ec 08             	sub    esp,0x8
c0015d54:	6a 01                	push   0x1
c0015d56:	68 c6 bf 02 c0       	push   0xc002bfc6
c0015d5b:	e8 19 80 00 00       	call   c001dd79 <Thr::loadDLL(char const*, bool)>
c0015d60:	83 c4 10             	add    esp,0x10
c0015d63:	83 ec 08             	sub    esp,0x8
c0015d66:	53                   	push   ebx
c0015d67:	50                   	push   eax
c0015d68:	e8 37 82 00 00       	call   c001dfa4 <Thr::executeDLL(unsigned long, void*)>
c0015d6d:	83 c4 10             	add    esp,0x10
c0015d70:	90                   	nop
c0015d71:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d74:	c9                   	leave  
c0015d75:	c3                   	ret    

c0015d76 <startGUIVESA(void*)>:
c0015d76:	55                   	push   ebp
c0015d77:	89 e5                	mov    ebp,esp
c0015d79:	53                   	push   ebx
c0015d7a:	83 ec 04             	sub    esp,0x4
c0015d7d:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0015d82:	48                   	dec    eax
c0015d83:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0015d88:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0015d8d:	85 c0                	test   eax,eax
c0015d8f:	75 01                	jne    c0015d92 <startGUIVESA(void*)+0x1c>
c0015d91:	fb                   	sti    
c0015d92:	8b 1d 08 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f408
c0015d98:	83 ec 08             	sub    esp,0x8
c0015d9b:	6a 01                	push   0x1
c0015d9d:	68 e0 bf 02 c0       	push   0xc002bfe0
c0015da2:	e8 d2 7f 00 00       	call   c001dd79 <Thr::loadDLL(char const*, bool)>
c0015da7:	83 c4 10             	add    esp,0x10
c0015daa:	83 ec 08             	sub    esp,0x8
c0015dad:	53                   	push   ebx
c0015dae:	50                   	push   eax
c0015daf:	e8 f0 81 00 00       	call   c001dfa4 <Thr::executeDLL(unsigned long, void*)>
c0015db4:	83 c4 10             	add    esp,0x10
c0015db7:	8b 1d 08 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f408
c0015dbd:	83 ec 08             	sub    esp,0x8
c0015dc0:	6a 01                	push   0x1
c0015dc2:	68 c6 bf 02 c0       	push   0xc002bfc6
c0015dc7:	e8 ad 7f 00 00       	call   c001dd79 <Thr::loadDLL(char const*, bool)>
c0015dcc:	83 c4 10             	add    esp,0x10
c0015dcf:	83 ec 08             	sub    esp,0x8
c0015dd2:	53                   	push   ebx
c0015dd3:	50                   	push   eax
c0015dd4:	e8 cb 81 00 00       	call   c001dfa4 <Thr::executeDLL(unsigned long, void*)>
c0015dd9:	83 c4 10             	add    esp,0x10
c0015ddc:	90                   	nop
c0015ddd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015de0:	c9                   	leave  
c0015de1:	c3                   	ret    

c0015de2 <sendKeyToTerminal(unsigned char)>:
c0015de2:	55                   	push   ebp
c0015de3:	89 e5                	mov    ebp,esp
c0015de5:	83 ec 28             	sub    esp,0x28
c0015de8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015deb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015dee:	a1 e4 f4 02 c0       	mov    eax,ds:0xc002f4e4
c0015df3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015df7:	83 ec 08             	sub    esp,0x8
c0015dfa:	52                   	push   edx
c0015dfb:	50                   	push   eax
c0015dfc:	e8 ff b3 ff ff       	call   c0011200 <VgaText::receiveKey(unsigned char)>
c0015e01:	83 c4 10             	add    esp,0x10
c0015e04:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e08:	0f 85 8f 00 00 00    	jne    c0015e9d <sendKeyToTerminal(unsigned char)+0xbb>
c0015e0e:	fa                   	cli    
c0015e0f:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0015e14:	40                   	inc    eax
c0015e15:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0015e1a:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c0015e1f:	40                   	inc    eax
c0015e20:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c0015e25:	a1 c0 f5 02 c0       	mov    eax,ds:0xc002f5c0
c0015e2a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e2d:	c7 05 c0 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5c0,0x0
c0015e37:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e3b:	74 1f                	je     c0015e5c <sendKeyToTerminal(unsigned char)+0x7a>
c0015e3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e40:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e49:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e4c:	83 ec 0c             	sub    esp,0xc
c0015e4f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e52:	e8 c5 8d 00 00       	call   c001ec1c <unblockTask(ThreadControlBlock*)>
c0015e57:	83 c4 10             	add    esp,0x10
c0015e5a:	eb db                	jmp    c0015e37 <sendKeyToTerminal(unsigned char)+0x55>
c0015e5c:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c0015e61:	48                   	dec    eax
c0015e62:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c0015e67:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c0015e6c:	85 c0                	test   eax,eax
c0015e6e:	75 18                	jne    c0015e88 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e70:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0015e75:	85 c0                	test   eax,eax
c0015e77:	74 0f                	je     c0015e88 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e79:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c0015e83:	e8 d0 88 00 00       	call   c001e758 <schedule()>
c0015e88:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0015e8d:	48                   	dec    eax
c0015e8e:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0015e93:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0015e98:	85 c0                	test   eax,eax
c0015e9a:	75 01                	jne    c0015e9d <sendKeyToTerminal(unsigned char)+0xbb>
c0015e9c:	fb                   	sti    
c0015e9d:	90                   	nop
c0015e9e:	c9                   	leave  
c0015e9f:	c3                   	ret    

c0015ea0 <sendKeyboardToken(KeyboardToken)>:
c0015ea0:	55                   	push   ebp
c0015ea1:	89 e5                	mov    ebp,esp
c0015ea3:	83 ec 18             	sub    esp,0x18
c0015ea6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eac:	0f b7 c0             	movzx  eax,ax
c0015eaf:	83 f2 01             	xor    edx,0x1
c0015eb2:	88 90 e0 f5 02 c0    	mov    BYTE PTR [eax-0x3ffd0a20],dl
c0015eb8:	a1 c8 f5 02 c0       	mov    eax,ds:0xc002f5c8
c0015ebd:	85 c0                	test   eax,eax
c0015ebf:	74 24                	je     c0015ee5 <sendKeyboardToken(KeyboardToken)+0x45>
c0015ec1:	8b 0d c8 f5 02 c0    	mov    ecx,DWORD PTR ds:0xc002f5c8
c0015ec7:	83 ec 04             	sub    esp,0x4
c0015eca:	68 e0 f5 02 c0       	push   0xc002f5e0
c0015ecf:	83 ec 08             	sub    esp,0x8
c0015ed2:	89 e2                	mov    edx,esp
c0015ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed7:	89 02                	mov    DWORD PTR [edx],eax
c0015ed9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015edc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ee0:	ff d1                	call   ecx
c0015ee2:	83 c4 10             	add    esp,0x10
c0015ee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee8:	66 3d 03 02          	cmp    ax,0x203
c0015eec:	75 07                	jne    c0015ef5 <sendKeyboardToken(KeyboardToken)+0x55>
c0015eee:	a0 e0 f6 02 c0       	mov    al,ds:0xc002f6e0
c0015ef3:	84 c0                	test   al,al
c0015ef5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ef9:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015efc:	a0 e8 f9 02 c0       	mov    al,ds:0xc002f9e8
c0015f01:	38 c2                	cmp    dl,al
c0015f03:	74 1c                	je     c0015f21 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f05:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f08:	a2 e8 f9 02 c0       	mov    ds:0xc002f9e8,al
c0015f0d:	a0 e8 f9 02 c0       	mov    al,ds:0xc002f9e8
c0015f12:	0f b6 c0             	movzx  eax,al
c0015f15:	83 ec 0c             	sub    esp,0xc
c0015f18:	50                   	push   eax
c0015f19:	e8 6a a6 ff ff       	call   c0010588 <setTerminalScrollLock(bool)>
c0015f1e:	83 c4 10             	add    esp,0x10
c0015f21:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f24:	84 c0                	test   al,al
c0015f26:	0f 84 ae 00 00 00    	je     c0015fda <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2f:	66 3d 10 03          	cmp    ax,0x310
c0015f33:	75 06                	jne    c0015f3b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f35:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3e:	66 3d 11 03          	cmp    ax,0x311
c0015f42:	75 06                	jne    c0015f4a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f44:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4d:	66 3d 12 03          	cmp    ax,0x312
c0015f51:	75 06                	jne    c0015f59 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f53:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5c:	66 3d 13 03          	cmp    ax,0x313
c0015f60:	75 06                	jne    c0015f68 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f62:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6b:	66 3d 14 03          	cmp    ax,0x314
c0015f6f:	75 06                	jne    c0015f77 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f71:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7a:	66 3d 15 03          	cmp    ax,0x315
c0015f7e:	75 06                	jne    c0015f86 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f80:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f89:	66 3d 16 03          	cmp    ax,0x316
c0015f8d:	75 06                	jne    c0015f95 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f8f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f98:	66 3d 17 03          	cmp    ax,0x317
c0015f9c:	75 06                	jne    c0015fa4 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f9e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa7:	66 3d 18 03          	cmp    ax,0x318
c0015fab:	75 06                	jne    c0015fb3 <sendKeyboardToken(KeyboardToken)+0x113>
c0015fad:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb6:	66 3d 19 03          	cmp    ax,0x319
c0015fba:	75 06                	jne    c0015fc2 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fbc:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc5:	66 3d 1a 03          	cmp    ax,0x31a
c0015fc9:	0f 85 c9 00 00 00    	jne    c0016098 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fcf:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fd5:	e9 be 00 00 00       	jmp    c0016098 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdd:	66 3d 10 03          	cmp    ax,0x310
c0015fe1:	75 0a                	jne    c0015fed <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fe3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fe9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff0:	66 3d 11 03          	cmp    ax,0x311
c0015ff4:	75 0a                	jne    c0016000 <sendKeyboardToken(KeyboardToken)+0x160>
c0015ff6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ffc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016003:	66 3d 12 03          	cmp    ax,0x312
c0016007:	75 0a                	jne    c0016013 <sendKeyboardToken(KeyboardToken)+0x173>
c0016009:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001600f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016016:	66 3d 13 03          	cmp    ax,0x313
c001601a:	75 0a                	jne    c0016026 <sendKeyboardToken(KeyboardToken)+0x186>
c001601c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016022:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016029:	66 3d 14 03          	cmp    ax,0x314
c001602d:	75 0a                	jne    c0016039 <sendKeyboardToken(KeyboardToken)+0x199>
c001602f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016035:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603c:	66 3d 15 03          	cmp    ax,0x315
c0016040:	75 0a                	jne    c001604c <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016042:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016048:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604f:	66 3d 16 03          	cmp    ax,0x316
c0016053:	75 0a                	jne    c001605f <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016055:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001605b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016062:	66 3d 17 03          	cmp    ax,0x317
c0016066:	75 0a                	jne    c0016072 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016068:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001606e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016075:	66 3d 18 03          	cmp    ax,0x318
c0016079:	75 0a                	jne    c0016085 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001607b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016081:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016088:	66 3d 19 03          	cmp    ax,0x319
c001608c:	75 0a                	jne    c0016098 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001608e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016094:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609b:	66 3d 00 02          	cmp    ax,0x200
c001609f:	75 2c                	jne    c00160cd <sendKeyboardToken(KeyboardToken)+0x22d>
c00160a1:	a0 e0 f9 02 c0       	mov    al,ds:0xc002f9e0
c00160a6:	83 f0 01             	xor    eax,0x1
c00160a9:	84 c0                	test   al,al
c00160ab:	74 20                	je     c00160cd <sendKeyboardToken(KeyboardToken)+0x22d>
c00160ad:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c00160b2:	6a 01                	push   0x1
c00160b4:	6a 00                	push   0x0
c00160b6:	68 0a 5d 01 c0       	push   0xc0015d0a
c00160bb:	50                   	push   eax
c00160bc:	e8 53 84 00 00       	call   c001e514 <Process::createThread(void (*)(void*), void*, int)>
c00160c1:	83 c4 10             	add    esp,0x10
c00160c4:	c6 05 e0 f9 02 c0 01 	mov    BYTE PTR ds:0xc002f9e0,0x1
c00160cb:	eb 33                	jmp    c0016100 <sendKeyboardToken(KeyboardToken)+0x260>
c00160cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d0:	66 3d 01 02          	cmp    ax,0x201
c00160d4:	75 2a                	jne    c0016100 <sendKeyboardToken(KeyboardToken)+0x260>
c00160d6:	a0 e0 f9 02 c0       	mov    al,ds:0xc002f9e0
c00160db:	83 f0 01             	xor    eax,0x1
c00160de:	84 c0                	test   al,al
c00160e0:	74 1e                	je     c0016100 <sendKeyboardToken(KeyboardToken)+0x260>
c00160e2:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c00160e7:	6a 01                	push   0x1
c00160e9:	6a 00                	push   0x0
c00160eb:	68 76 5d 01 c0       	push   0xc0015d76
c00160f0:	50                   	push   eax
c00160f1:	e8 1e 84 00 00       	call   c001e514 <Process::createThread(void (*)(void*), void*, int)>
c00160f6:	83 c4 10             	add    esp,0x10
c00160f9:	c6 05 e0 f9 02 c0 01 	mov    BYTE PTR ds:0xc002f9e0,0x1
c0016100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016103:	66 3d 1d 03          	cmp    ax,0x31d
c0016107:	75 06                	jne    c001610f <sendKeyboardToken(KeyboardToken)+0x26f>
c0016109:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001610f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016112:	66 3d 1c 03          	cmp    ax,0x31c
c0016116:	75 06                	jne    c001611e <sendKeyboardToken(KeyboardToken)+0x27e>
c0016118:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001611e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016121:	66 3d 1b 03          	cmp    ax,0x31b
c0016125:	75 06                	jne    c001612d <sendKeyboardToken(KeyboardToken)+0x28d>
c0016127:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001612d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016130:	66 3d 1e 03          	cmp    ax,0x31e
c0016134:	75 06                	jne    c001613c <sendKeyboardToken(KeyboardToken)+0x29c>
c0016136:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001613c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613f:	66 3d 1f 03          	cmp    ax,0x31f
c0016143:	75 06                	jne    c001614b <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016145:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001614b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614e:	66 3d 1a 03          	cmp    ax,0x31a
c0016152:	75 06                	jne    c001615a <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016154:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001615a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001615e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016161:	83 f0 01             	xor    eax,0x1
c0016164:	84 c0                	test   al,al
c0016166:	74 77                	je     c00161df <sendKeyboardToken(KeyboardToken)+0x33f>
c0016168:	a0 e1 f6 02 c0       	mov    al,ds:0xc002f6e1
c001616d:	84 c0                	test   al,al
c001616f:	74 41                	je     c00161b2 <sendKeyboardToken(KeyboardToken)+0x312>
c0016171:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016175:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016179:	74 2b                	je     c00161a6 <sendKeyboardToken(KeyboardToken)+0x306>
c001617b:	8b 15 e4 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f9e4
c0016181:	89 d0                	mov    eax,edx
c0016183:	c1 e0 02             	shl    eax,0x2
c0016186:	01 d0                	add    eax,edx
c0016188:	01 c0                	add    eax,eax
c001618a:	a3 e4 f9 02 c0       	mov    ds:0xc002f9e4,eax
c001618f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016192:	0f b7 c0             	movzx  eax,ax
c0016195:	8d 50 d0             	lea    edx,[eax-0x30]
c0016198:	a1 e4 f9 02 c0       	mov    eax,ds:0xc002f9e4
c001619d:	01 d0                	add    eax,edx
c001619f:	a3 e4 f9 02 c0       	mov    ds:0xc002f9e4,eax
c00161a4:	eb 6d                	jmp    c0016213 <sendKeyboardToken(KeyboardToken)+0x373>
c00161a6:	c7 05 e4 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9e4,0x0
c00161b0:	eb 61                	jmp    c0016213 <sendKeyboardToken(KeyboardToken)+0x373>
c00161b2:	a1 e4 f9 02 c0       	mov    eax,ds:0xc002f9e4
c00161b7:	85 c0                	test   eax,eax
c00161b9:	74 18                	je     c00161d3 <sendKeyboardToken(KeyboardToken)+0x333>
c00161bb:	a1 e4 f9 02 c0       	mov    eax,ds:0xc002f9e4
c00161c0:	0f b6 c0             	movzx  eax,al
c00161c3:	83 ec 0c             	sub    esp,0xc
c00161c6:	50                   	push   eax
c00161c7:	e8 16 fc ff ff       	call   c0015de2 <sendKeyToTerminal(unsigned char)>
c00161cc:	83 c4 10             	add    esp,0x10
c00161cf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161d3:	c7 05 e4 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9e4,0x0
c00161dd:	eb 34                	jmp    c0016213 <sendKeyboardToken(KeyboardToken)+0x373>
c00161df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e2:	66 3d 01 01          	cmp    ax,0x101
c00161e6:	75 2b                	jne    c0016213 <sendKeyboardToken(KeyboardToken)+0x373>
c00161e8:	a1 e4 f9 02 c0       	mov    eax,ds:0xc002f9e4
c00161ed:	85 c0                	test   eax,eax
c00161ef:	74 18                	je     c0016209 <sendKeyboardToken(KeyboardToken)+0x369>
c00161f1:	a1 e4 f9 02 c0       	mov    eax,ds:0xc002f9e4
c00161f6:	0f b6 c0             	movzx  eax,al
c00161f9:	83 ec 0c             	sub    esp,0xc
c00161fc:	50                   	push   eax
c00161fd:	e8 e0 fb ff ff       	call   c0015de2 <sendKeyToTerminal(unsigned char)>
c0016202:	83 c4 10             	add    esp,0x10
c0016205:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016209:	c7 05 e4 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9e4,0x0
c0016213:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016216:	83 f0 01             	xor    eax,0x1
c0016219:	84 c0                	test   al,al
c001621b:	74 4c                	je     c0016269 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001621d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016220:	83 f0 01             	xor    eax,0x1
c0016223:	84 c0                	test   al,al
c0016225:	74 42                	je     c0016269 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016227:	a0 e0 f6 02 c0       	mov    al,ds:0xc002f6e0
c001622c:	83 f0 01             	xor    eax,0x1
c001622f:	84 c0                	test   al,al
c0016231:	74 36                	je     c0016269 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016236:	66 83 f8 1f          	cmp    ax,0x1f
c001623a:	76 09                	jbe    c0016245 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001623c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623f:	66 83 f8 7e          	cmp    ax,0x7e
c0016243:	76 12                	jbe    c0016257 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016248:	66 83 f8 0a          	cmp    ax,0xa
c001624c:	74 09                	je     c0016257 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001624e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016251:	66 83 f8 08          	cmp    ax,0x8
c0016255:	75 12                	jne    c0016269 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625a:	0f b6 c0             	movzx  eax,al
c001625d:	83 ec 0c             	sub    esp,0xc
c0016260:	50                   	push   eax
c0016261:	e8 7c fb ff ff       	call   c0015de2 <sendKeyToTerminal(unsigned char)>
c0016266:	83 c4 10             	add    esp,0x10
c0016269:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001626c:	83 f0 01             	xor    eax,0x1
c001626f:	84 c0                	test   al,al
c0016271:	74 4f                	je     c00162c2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016273:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016276:	83 f0 01             	xor    eax,0x1
c0016279:	84 c0                	test   al,al
c001627b:	74 45                	je     c00162c2 <sendKeyboardToken(KeyboardToken)+0x422>
c001627d:	a0 e0 f6 02 c0       	mov    al,ds:0xc002f6e0
c0016282:	84 c0                	test   al,al
c0016284:	74 3c                	je     c00162c2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016289:	66 83 f8 3f          	cmp    ax,0x3f
c001628d:	76 33                	jbe    c00162c2 <sendKeyboardToken(KeyboardToken)+0x422>
c001628f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016292:	66 83 f8 7f          	cmp    ax,0x7f
c0016296:	77 2a                	ja     c00162c2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001629b:	88 c2                	mov    dl,al
c001629d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a0:	66 83 f8 5f          	cmp    ax,0x5f
c00162a4:	76 04                	jbe    c00162aa <sendKeyboardToken(KeyboardToken)+0x40a>
c00162a6:	b0 20                	mov    al,0x20
c00162a8:	eb 02                	jmp    c00162ac <sendKeyboardToken(KeyboardToken)+0x40c>
c00162aa:	b0 00                	mov    al,0x0
c00162ac:	29 c2                	sub    edx,eax
c00162ae:	88 d0                	mov    al,dl
c00162b0:	83 e8 40             	sub    eax,0x40
c00162b3:	0f b6 c0             	movzx  eax,al
c00162b6:	83 ec 0c             	sub    esp,0xc
c00162b9:	50                   	push   eax
c00162ba:	e8 23 fb ff ff       	call   c0015de2 <sendKeyToTerminal(unsigned char)>
c00162bf:	83 c4 10             	add    esp,0x10
c00162c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c5:	66 3d 00 03          	cmp    ax,0x300
c00162c9:	75 0f                	jne    c00162da <sendKeyboardToken(KeyboardToken)+0x43a>
c00162cb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162ce:	83 f0 01             	xor    eax,0x1
c00162d1:	84 c0                	test   al,al
c00162d3:	74 05                	je     c00162da <sendKeyboardToken(KeyboardToken)+0x43a>
c00162d5:	e8 26 aa ff ff       	call   c0010d00 <doTerminalCycle()>
c00162da:	90                   	nop
c00162db:	c9                   	leave  
c00162dc:	c3                   	ret    

c00162dd <clearInternalKeybuffer(VgaText*)>:
c00162dd:	55                   	push   ebp
c00162de:	89 e5                	mov    ebp,esp
c00162e0:	83 ec 08             	sub    esp,0x8
c00162e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e6:	05 98 01 00 00       	add    eax,0x198
c00162eb:	83 ec 0c             	sub    esp,0xc
c00162ee:	50                   	push   eax
c00162ef:	e8 78 a4 fe ff       	call   c000076c <strlen>
c00162f4:	83 c4 10             	add    esp,0x10
c00162f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162fa:	81 c2 98 01 00 00    	add    edx,0x198
c0016300:	83 ec 04             	sub    esp,0x4
c0016303:	50                   	push   eax
c0016304:	6a 00                	push   0x0
c0016306:	52                   	push   edx
c0016307:	e8 44 a4 fe ff       	call   c0000750 <memset>
c001630c:	83 c4 10             	add    esp,0x10
c001630f:	90                   	nop
c0016310:	c9                   	leave  
c0016311:	c3                   	ret    

c0016312 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016312:	55                   	push   ebp
c0016313:	89 e5                	mov    ebp,esp
c0016315:	83 ec 18             	sub    esp,0x18
c0016318:	a1 c8 f5 02 c0       	mov    eax,ds:0xc002f5c8
c001631d:	85 c0                	test   eax,eax
c001631f:	74 2a                	je     c001634b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0016321:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0016327:	8b 0d c8 f5 02 c0    	mov    ecx,DWORD PTR ds:0xc002f5c8
c001632d:	83 ec 04             	sub    esp,0x4
c0016330:	68 e0 f5 02 c0       	push   0xc002f5e0
c0016335:	83 ec 08             	sub    esp,0x8
c0016338:	89 e2                	mov    edx,esp
c001633a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001633d:	89 02                	mov    DWORD PTR [edx],eax
c001633f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016342:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0016346:	ff d1                	call   ecx
c0016348:	83 c4 10             	add    esp,0x10
c001634b:	83 ec 0c             	sub    esp,0xc
c001634e:	68 fb bf 02 c0       	push   0xc002bffb
c0016353:	e8 df ca ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0016358:	83 c4 10             	add    esp,0x10
c001635b:	fb                   	sti    
c001635c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016363:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016367:	0f 84 a1 00 00 00    	je     c001640e <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c001636d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016370:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016376:	84 c0                	test   al,al
c0016378:	75 28                	jne    c00163a2 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c001637a:	fa                   	cli    
c001637b:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0016380:	40                   	inc    eax
c0016381:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0016386:	e8 cd 83 00 00       	call   c001e758 <schedule()>
c001638b:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0016390:	48                   	dec    eax
c0016391:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0016396:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001639b:	85 c0                	test   eax,eax
c001639d:	75 ce                	jne    c001636d <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001639f:	fb                   	sti    
c00163a0:	eb cb                	jmp    c001636d <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c00163a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163a5:	8d 50 01             	lea    edx,[eax+0x1]
c00163a8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163ae:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c00163b4:	88 10                	mov    BYTE PTR [eax],dl
c00163b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163b9:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163bf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163c5:	05 98 01 00 00       	add    eax,0x198
c00163ca:	83 ec 0c             	sub    esp,0xc
c00163cd:	50                   	push   eax
c00163ce:	e8 99 a3 fe ff       	call   c000076c <strlen>
c00163d3:	83 c4 10             	add    esp,0x10
c00163d6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163d9:	81 c2 98 01 00 00    	add    edx,0x198
c00163df:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163e5:	81 c2 98 01 00 00    	add    edx,0x198
c00163eb:	83 ec 04             	sub    esp,0x4
c00163ee:	50                   	push   eax
c00163ef:	51                   	push   ecx
c00163f0:	52                   	push   edx
c00163f1:	e8 92 a2 fe ff       	call   c0000688 <memmove>
c00163f6:	83 c4 10             	add    esp,0x10
c00163f9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163fc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163ff:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016403:	0f 85 5a ff ff ff    	jne    c0016363 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0016409:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001640c:	eb 03                	jmp    c0016411 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c001640e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016411:	c9                   	leave  
c0016412:	c3                   	ret    
c0016413:	90                   	nop

c0016414 <Keyboard::Keyboard(char const*)>:
c0016414:	83 ec 0c             	sub    esp,0xc
c0016417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641b:	83 ec 08             	sub    esp,0x8
c001641e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016422:	50                   	push   eax
c0016423:	e8 4c e0 ff ff       	call   c0014474 <Device::Device(char const*)>
c0016428:	83 c4 10             	add    esp,0x10
c001642b:	ba 1c c0 02 c0       	mov    edx,0xc002c01c
c0016430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016434:	89 10                	mov    DWORD PTR [eax],edx
c0016436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016444:	c6 05 c4 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f5c4,0x1
c001644b:	90                   	nop
c001644c:	83 c4 0c             	add    esp,0xc
c001644f:	c3                   	ret    

c0016450 <Keyboard::~Keyboard()>:
c0016450:	83 ec 0c             	sub    esp,0xc
c0016453:	ba 1c c0 02 c0       	mov    edx,0xc002c01c
c0016458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645c:	89 10                	mov    DWORD PTR [eax],edx
c001645e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016462:	83 ec 0c             	sub    esp,0xc
c0016465:	50                   	push   eax
c0016466:	e8 d3 dc ff ff       	call   c001413e <Device::~Device()>
c001646b:	83 c4 10             	add    esp,0x10
c001646e:	90                   	nop
c001646f:	83 c4 0c             	add    esp,0xc
c0016472:	c3                   	ret    
c0016473:	90                   	nop

c0016474 <Keyboard::~Keyboard()>:
c0016474:	83 ec 0c             	sub    esp,0xc
c0016477:	83 ec 0c             	sub    esp,0xc
c001647a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001647e:	e8 cd ff ff ff       	call   c0016450 <Keyboard::~Keyboard()>
c0016483:	83 c4 10             	add    esp,0x10
c0016486:	83 ec 08             	sub    esp,0x8
c0016489:	68 5c 01 00 00       	push   0x15c
c001648e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016492:	e8 c0 c8 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0016497:	83 c4 10             	add    esp,0x10
c001649a:	83 c4 0c             	add    esp,0xc
c001649d:	c3                   	ret    

c001649e <LogicalDisk::close(int, int, void*)>:
c001649e:	83 c8 ff             	or     eax,0xffffffff
c00164a1:	c3                   	ret    

c00164a2 <LogicalDisk::~LogicalDisk()>:
c00164a2:	83 ec 0c             	sub    esp,0xc
c00164a5:	ba cc c0 02 c0       	mov    edx,0xc002c0cc
c00164aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ae:	89 10                	mov    DWORD PTR [eax],edx
c00164b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b4:	83 ec 0c             	sub    esp,0xc
c00164b7:	50                   	push   eax
c00164b8:	e8 81 dc ff ff       	call   c001413e <Device::~Device()>
c00164bd:	83 c4 10             	add    esp,0x10
c00164c0:	90                   	nop
c00164c1:	83 c4 0c             	add    esp,0xc
c00164c4:	c3                   	ret    
c00164c5:	90                   	nop

c00164c6 <LogicalDisk::~LogicalDisk()>:
c00164c6:	83 ec 0c             	sub    esp,0xc
c00164c9:	83 ec 0c             	sub    esp,0xc
c00164cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d0:	e8 cd ff ff ff       	call   c00164a2 <LogicalDisk::~LogicalDisk()>
c00164d5:	83 c4 10             	add    esp,0x10
c00164d8:	83 ec 08             	sub    esp,0x8
c00164db:	68 74 01 00 00       	push   0x174
c00164e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e4:	e8 6e c8 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c00164e9:	83 c4 10             	add    esp,0x10
c00164ec:	83 c4 0c             	add    esp,0xc
c00164ef:	c3                   	ret    

c00164f0 <LogicalDisk::open(int, int, void*)>:
c00164f0:	83 ec 18             	sub    esp,0x18
c00164f3:	68 48 c0 02 c0       	push   0xc002c048
c00164f8:	e8 a8 44 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c00164fd:	83 c8 ff             	or     eax,0xffffffff
c0016500:	83 c4 1c             	add    esp,0x1c
c0016503:	c3                   	ret    

c0016504 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016504:	53                   	push   ebx
c0016505:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016509:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001650d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016511:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016517:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001651d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016523:	77 10                	ja     c0016535 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016525:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001652b:	89 d3                	mov    ebx,edx
c001652d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016533:	72 05                	jb     c001653a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016535:	83 c8 ff             	or     eax,0xffffffff
c0016538:	89 c2                	mov    edx,eax
c001653a:	5b                   	pop    ebx
c001653b:	c3                   	ret    

c001653c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001653c:	56                   	push   esi
c001653d:	83 c8 ff             	or     eax,0xffffffff
c0016540:	53                   	push   ebx
c0016541:	89 c2                	mov    edx,eax
c0016543:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016547:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001654b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001654f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016555:	77 27                	ja     c001657e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016557:	89 d8                	mov    eax,ebx
c0016559:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001655f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016565:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001656a:	89 c2                	mov    edx,eax
c001656c:	73 10                	jae    c001657e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001656e:	89 c8                	mov    eax,ecx
c0016570:	89 da                	mov    edx,ebx
c0016572:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016578:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001657e:	5b                   	pop    ebx
c001657f:	5e                   	pop    esi
c0016580:	c3                   	ret    
c0016581:	90                   	nop

c0016582 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016582:	83 ec 1c             	sub    esp,0x1c
c0016585:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016589:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001658d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016591:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016595:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016599:	89 04 24             	mov    DWORD PTR [esp],eax
c001659c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a8:	83 ec 08             	sub    esp,0x8
c00165ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165af:	50                   	push   eax
c00165b0:	e8 bf de ff ff       	call   c0014474 <Device::Device(char const*)>
c00165b5:	83 c4 10             	add    esp,0x10
c00165b8:	ba cc c0 02 c0       	mov    edx,0xc002c0cc
c00165bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c1:	89 10                	mov    DWORD PTR [eax],edx
c00165c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165dd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165e7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165f3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165f9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165ff:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016603:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016606:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001660a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016610:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001661a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001661e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016628:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016632:	90                   	nop
c0016633:	83 c4 1c             	add    esp,0x1c
c0016636:	c3                   	ret    
c0016637:	90                   	nop

c0016638 <LogicalDisk::assignDriveLetter()>:
c0016638:	55                   	push   ebp
c0016639:	57                   	push   edi
c001663a:	56                   	push   esi
c001663b:	53                   	push   ebx
c001663c:	83 ec 14             	sub    esp,0x14
c001663f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016643:	8b 3d 00 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa00
c0016649:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001664f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016653:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016659:	8b 3d 04 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa04
c001665f:	3c 01                	cmp    al,0x1
c0016661:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016665:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016669:	19 c0                	sbb    eax,eax
c001666b:	83 e0 02             	and    eax,0x2
c001666e:	83 c0 41             	add    eax,0x41
c0016671:	0f be e8             	movsx  ebp,al
c0016674:	3c 43                	cmp    al,0x43
c0016676:	75 10                	jne    c0016688 <LogicalDisk::assignDriveLetter()+0x50>
c0016678:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001667f:	75 5d                	jne    c00166de <LogicalDisk::assignDriveLetter()+0xa6>
c0016681:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016686:	75 56                	jne    c00166de <LogicalDisk::assignDriveLetter()+0xa6>
c0016688:	8d 75 bf             	lea    esi,[ebp-0x41]
c001668b:	ba 01 00 00 00       	mov    edx,0x1
c0016690:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016694:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016698:	d3 e2                	shl    edx,cl
c001669a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001669e:	89 d7                	mov    edi,edx
c00166a0:	89 d6                	mov    esi,edx
c00166a2:	c1 ff 1f             	sar    edi,0x1f
c00166a5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166a9:	21 f9                	and    ecx,edi
c00166ab:	09 d1                	or     ecx,edx
c00166ad:	75 2f                	jne    c00166de <LogicalDisk::assignDriveLetter()+0xa6>
c00166af:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166b7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166bd:	09 f2                	or     edx,esi
c00166bf:	89 15 00 fa 02 c0    	mov    DWORD PTR ds:0xc002fa00,edx
c00166c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166c9:	09 fa                	or     edx,edi
c00166cb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166cf:	89 15 04 fa 02 c0    	mov    DWORD PTR ds:0xc002fa04,edx
c00166d5:	89 1c bd 20 fa 02 c0 	mov    DWORD PTR [edi*4-0x3ffd05e0],ebx
c00166dc:	eb 08                	jmp    c00166e6 <LogicalDisk::assignDriveLetter()+0xae>
c00166de:	45                   	inc    ebp
c00166df:	40                   	inc    eax
c00166e0:	3c 5b                	cmp    al,0x5b
c00166e2:	75 90                	jne    c0016674 <LogicalDisk::assignDriveLetter()+0x3c>
c00166e4:	31 c0                	xor    eax,eax
c00166e6:	83 c4 14             	add    esp,0x14
c00166e9:	5b                   	pop    ebx
c00166ea:	5e                   	pop    esi
c00166eb:	5f                   	pop    edi
c00166ec:	5d                   	pop    ebp
c00166ed:	c3                   	ret    

c00166ee <LogicalDisk::mount()>:
c00166ee:	56                   	push   esi
c00166ef:	53                   	push   ebx
c00166f0:	50                   	push   eax
c00166f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166f5:	8b 1d 94 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f594
c00166fb:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016705:	85 db                	test   ebx,ebx
c0016707:	74 50                	je     c0016759 <LogicalDisk::mount()+0x6b>
c0016709:	50                   	push   eax
c001670a:	50                   	push   eax
c001670b:	ff 35 48 29 03 c0    	push   DWORD PTR ds:0xc0032948
c0016711:	68 6c c0 02 c0       	push   0xc002c06c
c0016716:	e8 1c c7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001671b:	83 c4 0c             	add    esp,0xc
c001671e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016725:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016727:	83 e8 41             	sub    eax,0x41
c001672a:	50                   	push   eax
c001672b:	56                   	push   esi
c001672c:	53                   	push   ebx
c001672d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016730:	83 c4 10             	add    esp,0x10
c0016733:	84 c0                	test   al,al
c0016735:	74 08                	je     c001673f <LogicalDisk::mount()+0x51>
c0016737:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001673d:	eb 1c                	jmp    c001675b <LogicalDisk::mount()+0x6d>
c001673f:	51                   	push   ecx
c0016740:	51                   	push   ecx
c0016741:	ff 35 48 29 03 c0    	push   DWORD PTR ds:0xc0032948
c0016747:	68 87 c0 02 c0       	push   0xc002c087
c001674c:	e8 e6 c6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0016751:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016754:	83 c4 10             	add    esp,0x10
c0016757:	eb ac                	jmp    c0016705 <LogicalDisk::mount()+0x17>
c0016759:	31 c0                	xor    eax,eax
c001675b:	5a                   	pop    edx
c001675c:	5b                   	pop    ebx
c001675d:	5e                   	pop    esi
c001675e:	c3                   	ret    
c001675f:	90                   	nop

c0016760 <LogicalDisk::unmount()>:
c0016760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016764:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001676e:	c3                   	ret    
c001676f:	90                   	nop

c0016770 <LogicalDisk::eject()>:
c0016770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016774:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001677a:	8b 10                	mov    edx,DWORD PTR [eax]
c001677c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016780:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016783:	90                   	nop

c0016784 <LogicalDisk::unassignDriveLetter()>:
c0016784:	57                   	push   edi
c0016785:	56                   	push   esi
c0016786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001678a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016791:	84 c9                	test   cl,cl
c0016793:	75 0f                	jne    c00167a4 <LogicalDisk::unassignDriveLetter()+0x20>
c0016795:	c7 44 24 0c a2 c0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002c0a2
c001679d:	5e                   	pop    esi
c001679e:	5f                   	pop    edi
c001679f:	e9 01 42 00 00       	jmp    c001a9a5 <Krnl::panic(char const*)>
c00167a4:	83 e9 41             	sub    ecx,0x41
c00167a7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167ae:	b8 01 00 00 00       	mov    eax,0x1
c00167b3:	c7 04 8d 20 fa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd05e0],0x0
c00167be:	d3 e0                	shl    eax,cl
c00167c0:	89 c7                	mov    edi,eax
c00167c2:	f7 d0                	not    eax
c00167c4:	c1 ff 1f             	sar    edi,0x1f
c00167c7:	21 05 00 fa 02 c0    	and    DWORD PTR ds:0xc002fa00,eax
c00167cd:	89 fe                	mov    esi,edi
c00167cf:	f7 d6                	not    esi
c00167d1:	21 35 04 fa 02 c0    	and    DWORD PTR ds:0xc002fa04,esi
c00167d7:	5e                   	pop    esi
c00167d8:	5f                   	pop    edi
c00167d9:	c3                   	ret    

c00167da <LogicalDisk::read(unsigned long long, int, void*)>:
c00167da:	57                   	push   edi
c00167db:	56                   	push   esi
c00167dc:	53                   	push   ebx
c00167dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167e5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167ed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167f3:	77 41                	ja     c0016836 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167f5:	99                   	cdq    
c00167f6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167fc:	01 c8                	add    eax,ecx
c00167fe:	11 da                	adc    edx,ebx
c0016800:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016806:	19 d7                	sbb    edi,edx
c0016808:	72 33                	jb     c001683d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001680a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016810:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016816:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001681a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001681e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016824:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001682a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001682e:	5b                   	pop    ebx
c001682f:	5e                   	pop    esi
c0016830:	5f                   	pop    edi
c0016831:	e9 ec 0a 00 00       	jmp    c0017322 <VCache::read(unsigned long long, int, void*)>
c0016836:	b8 05 00 00 00       	mov    eax,0x5
c001683b:	eb 05                	jmp    c0016842 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001683d:	b8 07 00 00 00       	mov    eax,0x7
c0016842:	5b                   	pop    ebx
c0016843:	5e                   	pop    esi
c0016844:	5f                   	pop    edi
c0016845:	c3                   	ret    

c0016846 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016846:	57                   	push   edi
c0016847:	56                   	push   esi
c0016848:	53                   	push   ebx
c0016849:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001684d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016851:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016859:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001685f:	77 41                	ja     c00168a2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016861:	99                   	cdq    
c0016862:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016868:	01 c8                	add    eax,ecx
c001686a:	11 da                	adc    edx,ebx
c001686c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016872:	19 d7                	sbb    edi,edx
c0016874:	72 33                	jb     c00168a9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016876:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001687c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016882:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016886:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001688a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016890:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016896:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001689a:	5b                   	pop    ebx
c001689b:	5e                   	pop    esi
c001689c:	5f                   	pop    edi
c001689d:	e9 96 09 00 00       	jmp    c0017238 <VCache::write(unsigned long long, int, void*)>
c00168a2:	b8 05 00 00 00       	mov    eax,0x5
c00168a7:	eb 05                	jmp    c00168ae <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168a9:	b8 07 00 00 00       	mov    eax,0x7
c00168ae:	5b                   	pop    ebx
c00168af:	5e                   	pop    esi
c00168b0:	5f                   	pop    edi
c00168b1:	c3                   	ret    

c00168b2 <Mouse::Mouse(char const*)>:
c00168b2:	83 ec 0c             	sub    esp,0xc
c00168b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b9:	83 ec 08             	sub    esp,0x8
c00168bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c0:	50                   	push   eax
c00168c1:	e8 ae db ff ff       	call   c0014474 <Device::Device(char const*)>
c00168c6:	83 c4 10             	add    esp,0x10
c00168c9:	ba f8 c0 02 c0       	mov    edx,0xc002c0f8
c00168ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d2:	89 10                	mov    DWORD PTR [eax],edx
c00168d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d8:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168e2:	90                   	nop
c00168e3:	83 c4 0c             	add    esp,0xc
c00168e6:	c3                   	ret    
c00168e7:	90                   	nop

c00168e8 <Mouse::~Mouse()>:
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	ba f8 c0 02 c0       	mov    edx,0xc002c0f8
c00168f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f4:	89 10                	mov    DWORD PTR [eax],edx
c00168f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168fa:	83 ec 0c             	sub    esp,0xc
c00168fd:	50                   	push   eax
c00168fe:	e8 3b d8 ff ff       	call   c001413e <Device::~Device()>
c0016903:	83 c4 10             	add    esp,0x10
c0016906:	90                   	nop
c0016907:	83 c4 0c             	add    esp,0xc
c001690a:	c3                   	ret    
c001690b:	90                   	nop

c001690c <Mouse::~Mouse()>:
c001690c:	83 ec 0c             	sub    esp,0xc
c001690f:	83 ec 0c             	sub    esp,0xc
c0016912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016916:	e8 cd ff ff ff       	call   c00168e8 <Mouse::~Mouse()>
c001691b:	83 c4 10             	add    esp,0x10
c001691e:	83 ec 08             	sub    esp,0x8
c0016921:	68 58 01 00 00       	push   0x158
c0016926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001692a:	e8 28 c4 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	83 c4 0c             	add    esp,0xc
c0016935:	c3                   	ret    

c0016936 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016936:	55                   	push   ebp
c0016937:	57                   	push   edi
c0016938:	56                   	push   esi
c0016939:	53                   	push   ebx
c001693a:	81 ec 20 01 00 00    	sub    esp,0x120
c0016940:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016947:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001694e:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016955:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001695c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016964:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016968:	56                   	push   esi
c0016969:	68 1c c1 02 c0       	push   0xc002c11c
c001696e:	e8 c4 c4 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0016973:	58                   	pop    eax
c0016974:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001697b:	e8 f0 db ff ff       	call   c0014570 <Device::getName()>
c0016980:	5a                   	pop    edx
c0016981:	59                   	pop    ecx
c0016982:	50                   	push   eax
c0016983:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016987:	53                   	push   ebx
c0016988:	e8 7f 9e fe ff       	call   c000080c <strcpy>
c001698d:	5d                   	pop    ebp
c001698e:	58                   	pop    eax
c001698f:	68 4d c1 02 c0       	push   0xc002c14d
c0016994:	53                   	push   ebx
c0016995:	e8 b2 9f fe ff       	call   c000094c <strcat>
c001699a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169a1:	e8 e6 8e ff ff       	call   c000f88c <malloc>
c00169a6:	83 c4 0c             	add    esp,0xc
c00169a9:	89 c5                	mov    ebp,eax
c00169ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169b3:	57                   	push   edi
c00169b4:	56                   	push   esi
c00169b5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169bc:	53                   	push   ebx
c00169bd:	50                   	push   eax
c00169be:	e8 bf fb ff ff       	call   c0016582 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169c3:	83 c4 14             	add    esp,0x14
c00169c6:	55                   	push   ebp
c00169c7:	e8 6c fc ff ff       	call   c0016638 <LogicalDisk::assignDriveLetter()>
c00169cc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169cf:	0f be d8             	movsx  ebx,al
c00169d2:	e8 17 fd ff ff       	call   c00166ee <LogicalDisk::mount()>
c00169d7:	58                   	pop    eax
c00169d8:	5a                   	pop    edx
c00169d9:	55                   	push   ebp
c00169da:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169e1:	e8 8a d8 ff ff       	call   c0014270 <Device::addChild(Device*)>
c00169e6:	59                   	pop    ecx
c00169e7:	5e                   	pop    esi
c00169e8:	53                   	push   ebx
c00169e9:	68 58 c1 02 c0       	push   0xc002c158
c00169ee:	e8 44 c4 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00169f3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169f9:	5b                   	pop    ebx
c00169fa:	5e                   	pop    esi
c00169fb:	5f                   	pop    edi
c00169fc:	5d                   	pop    ebp
c00169fd:	c3                   	ret    

c00169fe <createPartitionsForDisk(PhysicalDisk*)>:
c00169fe:	55                   	push   ebp
c00169ff:	57                   	push   edi
c0016a00:	56                   	push   esi
c0016a01:	53                   	push   ebx
c0016a02:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a08:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a0f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a15:	3d 00 02 00 00       	cmp    eax,0x200
c0016a1a:	74 27                	je     c0016a43 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a1c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a22:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a28:	83 ec 10             	sub    esp,0x10
c0016a2b:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a2f:	99                   	cdq    
c0016a30:	c1 e6 0a             	shl    esi,0xa
c0016a33:	52                   	push   edx
c0016a34:	89 fd                	mov    ebp,edi
c0016a36:	50                   	push   eax
c0016a37:	55                   	push   ebp
c0016a38:	56                   	push   esi
c0016a39:	e8 b6 0c 01 00       	call   c00276f4 <__udivdi3>
c0016a3e:	e9 b1 00 00 00       	jmp    c0016af4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a43:	83 ec 0c             	sub    esp,0xc
c0016a46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a48:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a4c:	56                   	push   esi
c0016a4d:	6a 01                	push   0x1
c0016a4f:	6a 00                	push   0x0
c0016a51:	6a 00                	push   0x0
c0016a53:	53                   	push   ebx
c0016a54:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a57:	83 c4 20             	add    esp,0x20
c0016a5a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a62:	75 0a                	jne    c0016a6e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a64:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a6c:	74 2c                	je     c0016a9a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a6e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a74:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a7a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a80:	83 ec 10             	sub    esp,0x10
c0016a83:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a87:	89 f7                	mov    edi,esi
c0016a89:	c1 e0 0a             	shl    eax,0xa
c0016a8c:	c1 ff 1f             	sar    edi,0x1f
c0016a8f:	57                   	push   edi
c0016a90:	56                   	push   esi
c0016a91:	52                   	push   edx
c0016a92:	50                   	push   eax
c0016a93:	e8 5c 0c 01 00       	call   c00276f4 <__udivdi3>
c0016a98:	eb 5a                	jmp    c0016af4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a9a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016aa1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016aa8:	83 e1 7f             	and    ecx,0x7f
c0016aab:	83 e0 7f             	and    eax,0x7f
c0016aae:	01 c1                	add    ecx,eax
c0016ab0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016ab7:	83 e0 7f             	and    eax,0x7f
c0016aba:	01 c1                	add    ecx,eax
c0016abc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ac3:	83 e0 7f             	and    eax,0x7f
c0016ac6:	00 c1                	add    cl,al
c0016ac8:	74 41                	je     c0016b0b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016aca:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ad0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ad6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016adc:	83 ec 10             	sub    esp,0x10
c0016adf:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ae3:	89 f7                	mov    edi,esi
c0016ae5:	c1 e0 0a             	shl    eax,0xa
c0016ae8:	c1 ff 1f             	sar    edi,0x1f
c0016aeb:	57                   	push   edi
c0016aec:	56                   	push   esi
c0016aed:	52                   	push   edx
c0016aee:	50                   	push   eax
c0016aef:	e8 00 0c 01 00       	call   c00276f4 <__udivdi3>
c0016af4:	83 c4 14             	add    esp,0x14
c0016af7:	52                   	push   edx
c0016af8:	50                   	push   eax
c0016af9:	6a 00                	push   0x0
c0016afb:	6a 00                	push   0x0
c0016afd:	53                   	push   ebx
c0016afe:	e8 33 fe ff ff       	call   c0016936 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b03:	83 c4 20             	add    esp,0x20
c0016b06:	e9 79 01 00 00       	jmp    c0016c84 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b0b:	89 f0                	mov    eax,esi
c0016b0d:	31 f6                	xor    esi,esi
c0016b0f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b16:	75 02                	jne    c0016b1a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b18:	89 f1                	mov    ecx,esi
c0016b1a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b21:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b28:	c1 e2 08             	shl    edx,0x8
c0016b2b:	c1 e7 10             	shl    edi,0x10
c0016b2e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b36:	09 fa                	or     edx,edi
c0016b38:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b40:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b47:	83 c0 10             	add    eax,0x10
c0016b4a:	09 fa                	or     edx,edi
c0016b4c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b53:	c1 e7 18             	shl    edi,0x18
c0016b56:	09 fa                	or     edx,edi
c0016b58:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b5f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b63:	c1 e7 10             	shl    edi,0x10
c0016b66:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b6d:	c1 e2 08             	shl    edx,0x8
c0016b70:	09 fa                	or     edx,edi
c0016b72:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b79:	09 fa                	or     edx,edi
c0016b7b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b82:	c1 e7 18             	shl    edi,0x18
c0016b85:	09 fa                	or     edx,edi
c0016b87:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b8b:	46                   	inc    esi
c0016b8c:	83 fe 04             	cmp    esi,0x4
c0016b8f:	0f 85 7a ff ff ff    	jne    c0016b0f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b99:	83 f0 01             	xor    eax,0x1
c0016b9c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016ba0:	75 57                	jne    c0016bf9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ba2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ba6:	83 f0 01             	xor    eax,0x1
c0016ba9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016bad:	75 4a                	jne    c0016bf9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016baf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bb3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bbb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bc3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bc9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bcf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bd5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bd9:	89 f7                	mov    edi,esi
c0016bdb:	c1 e0 0a             	shl    eax,0xa
c0016bde:	c1 ff 1f             	sar    edi,0x1f
c0016be1:	57                   	push   edi
c0016be2:	56                   	push   esi
c0016be3:	52                   	push   edx
c0016be4:	50                   	push   eax
c0016be5:	e8 0a 0b 01 00       	call   c00276f4 <__udivdi3>
c0016bea:	83 c4 10             	add    esp,0x10
c0016bed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bf1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bf5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bf9:	84 c9                	test   cl,cl
c0016bfb:	74 53                	je     c0016c50 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bfd:	0f b6 c9             	movzx  ecx,cl
c0016c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c08:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c0c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c18:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c1c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c30:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c34:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c38:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c3c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c40:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c44:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c48:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c4c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c50:	31 ed                	xor    ebp,ebp
c0016c52:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c56:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c5a:	89 f8                	mov    eax,edi
c0016c5c:	09 f0                	or     eax,esi
c0016c5e:	74 1e                	je     c0016c7e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c60:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c64:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c68:	89 d1                	mov    ecx,edx
c0016c6a:	09 c1                	or     ecx,eax
c0016c6c:	74 10                	je     c0016c7e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c6e:	83 ec 0c             	sub    esp,0xc
c0016c71:	57                   	push   edi
c0016c72:	56                   	push   esi
c0016c73:	52                   	push   edx
c0016c74:	50                   	push   eax
c0016c75:	53                   	push   ebx
c0016c76:	e8 bb fc ff ff       	call   c0016936 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c7b:	83 c4 20             	add    esp,0x20
c0016c7e:	45                   	inc    ebp
c0016c7f:	83 fd 04             	cmp    ebp,0x4
c0016c82:	75 ce                	jne    c0016c52 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c84:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c8a:	5b                   	pop    ebx
c0016c8b:	5e                   	pop    esi
c0016c8c:	5f                   	pop    edi
c0016c8d:	5d                   	pop    ebp
c0016c8e:	c3                   	ret    
c0016c8f:	90                   	nop

c0016c90 <Serial::Serial(char const*)>:
c0016c90:	83 ec 0c             	sub    esp,0xc
c0016c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c97:	83 ec 08             	sub    esp,0x8
c0016c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c9e:	50                   	push   eax
c0016c9f:	e8 d0 d7 ff ff       	call   c0014474 <Device::Device(char const*)>
c0016ca4:	83 c4 10             	add    esp,0x10
c0016ca7:	ba 84 c1 02 c0       	mov    edx,0xc002c184
c0016cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb0:	89 10                	mov    DWORD PTR [eax],edx
c0016cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cc0:	90                   	nop
c0016cc1:	83 c4 0c             	add    esp,0xc
c0016cc4:	c3                   	ret    
c0016cc5:	90                   	nop

c0016cc6 <Serial::~Serial()>:
c0016cc6:	83 ec 0c             	sub    esp,0xc
c0016cc9:	ba 84 c1 02 c0       	mov    edx,0xc002c184
c0016cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd2:	89 10                	mov    DWORD PTR [eax],edx
c0016cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd8:	83 ec 0c             	sub    esp,0xc
c0016cdb:	50                   	push   eax
c0016cdc:	e8 5d d4 ff ff       	call   c001413e <Device::~Device()>
c0016ce1:	83 c4 10             	add    esp,0x10
c0016ce4:	90                   	nop
c0016ce5:	83 c4 0c             	add    esp,0xc
c0016ce8:	c3                   	ret    
c0016ce9:	90                   	nop

c0016cea <Serial::~Serial()>:
c0016cea:	83 ec 0c             	sub    esp,0xc
c0016ced:	83 ec 0c             	sub    esp,0xc
c0016cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf4:	e8 cd ff ff ff       	call   c0016cc6 <Serial::~Serial()>
c0016cf9:	83 c4 10             	add    esp,0x10
c0016cfc:	83 ec 08             	sub    esp,0x8
c0016cff:	68 58 01 00 00       	push   0x158
c0016d04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d08:	e8 4a c0 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0016d0d:	83 c4 10             	add    esp,0x10
c0016d10:	83 c4 0c             	add    esp,0xc
c0016d13:	c3                   	ret    

c0016d14 <Timer::Timer(char const*)>:
c0016d14:	83 ec 0c             	sub    esp,0xc
c0016d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1b:	83 ec 08             	sub    esp,0x8
c0016d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d22:	50                   	push   eax
c0016d23:	e8 4c d7 ff ff       	call   c0014474 <Device::Device(char const*)>
c0016d28:	83 c4 10             	add    esp,0x10
c0016d2b:	ba c8 c1 02 c0       	mov    edx,0xc002c1c8
c0016d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d34:	89 10                	mov    DWORD PTR [eax],edx
c0016d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d44:	90                   	nop
c0016d45:	83 c4 0c             	add    esp,0xc
c0016d48:	c3                   	ret    
c0016d49:	90                   	nop

c0016d4a <Timer::~Timer()>:
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	ba c8 c1 02 c0       	mov    edx,0xc002c1c8
c0016d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d56:	89 10                	mov    DWORD PTR [eax],edx
c0016d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5c:	83 ec 0c             	sub    esp,0xc
c0016d5f:	50                   	push   eax
c0016d60:	e8 d9 d3 ff ff       	call   c001413e <Device::~Device()>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	90                   	nop
c0016d69:	83 c4 0c             	add    esp,0xc
c0016d6c:	c3                   	ret    
c0016d6d:	90                   	nop

c0016d6e <Timer::~Timer()>:
c0016d6e:	83 ec 0c             	sub    esp,0xc
c0016d71:	83 ec 0c             	sub    esp,0xc
c0016d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d78:	e8 cd ff ff ff       	call   c0016d4a <Timer::~Timer()>
c0016d7d:	83 c4 10             	add    esp,0x10
c0016d80:	83 ec 08             	sub    esp,0x8
c0016d83:	68 5c 01 00 00       	push   0x15c
c0016d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d8c:	e8 c6 bf ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0016d91:	83 c4 10             	add    esp,0x10
c0016d94:	83 c4 0c             	add    esp,0xc
c0016d97:	c3                   	ret    

c0016d98 <Timer::read()>:
c0016d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d9c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016da2:	c3                   	ret    

c0016da3 <timerHandler(unsigned long long)>:
c0016da3:	55                   	push   ebp
c0016da4:	57                   	push   edi
c0016da5:	56                   	push   esi
c0016da6:	53                   	push   ebx
c0016da7:	83 ec 0c             	sub    esp,0xc
c0016daa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016dae:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016db2:	01 35 90 fa 02 c0    	add    DWORD PTR ds:0xc002fa90,esi
c0016db8:	11 3d 94 fa 02 c0    	adc    DWORD PTR ds:0xc002fa94,edi
c0016dbe:	80 3d 0d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f40d,0x0
c0016dc5:	0f 84 42 01 00 00    	je     c0016f0d <timerHandler(unsigned long long)+0x16a>
c0016dcb:	fa                   	cli    
c0016dcc:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c0016dd2:	83 ec 0c             	sub    esp,0xc
c0016dd5:	ff 05 44 29 03 c0    	inc    DWORD PTR ds:0xc0032944
c0016ddb:	68 58 29 03 c0       	push   0xc0032958
c0016de0:	e8 95 29 01 00       	call   c002977a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016de5:	83 c4 10             	add    esp,0x10
c0016de8:	84 c0                	test   al,al
c0016dea:	0f 85 a2 00 00 00    	jne    c0016e92 <timerHandler(unsigned long long)+0xef>
c0016df0:	83 ec 0c             	sub    esp,0xc
c0016df3:	68 58 29 03 c0       	push   0xc0032958
c0016df8:	e8 99 29 01 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dfd:	83 c4 10             	add    esp,0x10
c0016e00:	89 c3                	mov    ebx,eax
c0016e02:	83 ec 0c             	sub    esp,0xc
c0016e05:	68 58 29 03 c0       	push   0xc0032958
c0016e0a:	e8 87 29 01 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e0f:	c7 04 24 58 29 03 c0 	mov    DWORD PTR [esp],0xc0032958
c0016e16:	89 c5                	mov    ebp,eax
c0016e18:	e8 81 29 01 00       	call   c002979e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e1d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e20:	83 c4 10             	add    esp,0x10
c0016e23:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e26:	39 15 90 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa90,edx
c0016e2c:	a1 94 fa 02 c0       	mov    eax,ds:0xc002fa94
c0016e31:	19 c8                	sbb    eax,ecx
c0016e33:	72 21                	jb     c0016e56 <timerHandler(unsigned long long)+0xb3>
c0016e35:	83 ec 0c             	sub    esp,0xc
c0016e38:	55                   	push   ebp
c0016e39:	e8 de 7d 00 00       	call   c001ec1c <unblockTask(ThreadControlBlock*)>
c0016e3e:	83 c4 10             	add    esp,0x10
c0016e41:	39 eb                	cmp    ebx,ebp
c0016e43:	75 21                	jne    c0016e66 <timerHandler(unsigned long long)+0xc3>
c0016e45:	83 ec 0c             	sub    esp,0xc
c0016e48:	68 58 29 03 c0       	push   0xc0032958
c0016e4d:	e8 44 29 01 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e52:	89 c3                	mov    ebx,eax
c0016e54:	eb 0d                	jmp    c0016e63 <timerHandler(unsigned long long)+0xc0>
c0016e56:	50                   	push   eax
c0016e57:	50                   	push   eax
c0016e58:	55                   	push   ebp
c0016e59:	68 58 29 03 c0       	push   0xc0032958
c0016e5e:	e8 e9 29 01 00       	call   c002984c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e63:	83 c4 10             	add    esp,0x10
c0016e66:	83 ec 0c             	sub    esp,0xc
c0016e69:	68 58 29 03 c0       	push   0xc0032958
c0016e6e:	e8 07 29 01 00       	call   c002977a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e73:	83 c4 10             	add    esp,0x10
c0016e76:	84 c0                	test   al,al
c0016e78:	75 18                	jne    c0016e92 <timerHandler(unsigned long long)+0xef>
c0016e7a:	83 ec 0c             	sub    esp,0xc
c0016e7d:	68 58 29 03 c0       	push   0xc0032958
c0016e82:	e8 0f 29 01 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e87:	83 c4 10             	add    esp,0x10
c0016e8a:	39 d8                	cmp    eax,ebx
c0016e8c:	0f 85 70 ff ff ff    	jne    c0016e02 <timerHandler(unsigned long long)+0x5f>
c0016e92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e97:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016e9b:	74 3d                	je     c0016eda <timerHandler(unsigned long long)+0x137>
c0016e9d:	80 3d 0c f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f40c,0x0
c0016ea4:	74 34                	je     c0016eda <timerHandler(unsigned long long)+0x137>
c0016ea6:	fa                   	cli    
c0016ea7:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c0016ead:	31 d2                	xor    edx,edx
c0016eaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb4:	89 f9                	mov    ecx,edi
c0016eb6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ebe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ec1:	39 c6                	cmp    esi,eax
c0016ec3:	19 d1                	sbb    ecx,edx
c0016ec5:	72 05                	jb     c0016ecc <timerHandler(unsigned long long)+0x129>
c0016ec7:	e8 8c 78 00 00       	call   c001e758 <schedule()>
c0016ecc:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0016ed1:	48                   	dec    eax
c0016ed2:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0016ed7:	75 01                	jne    c0016eda <timerHandler(unsigned long long)+0x137>
c0016ed9:	fb                   	sti    
c0016eda:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c0016edf:	48                   	dec    eax
c0016ee0:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c0016ee5:	75 18                	jne    c0016eff <timerHandler(unsigned long long)+0x15c>
c0016ee7:	83 3d 40 29 03 c0 00 	cmp    DWORD PTR ds:0xc0032940,0x0
c0016eee:	74 0f                	je     c0016eff <timerHandler(unsigned long long)+0x15c>
c0016ef0:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c0016efa:	e8 59 78 00 00       	call   c001e758 <schedule()>
c0016eff:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0016f04:	48                   	dec    eax
c0016f05:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c0016f0a:	75 01                	jne    c0016f0d <timerHandler(unsigned long long)+0x16a>
c0016f0c:	fb                   	sti    
c0016f0d:	83 c4 0c             	add    esp,0xc
c0016f10:	5b                   	pop    ebx
c0016f11:	5e                   	pop    esi
c0016f12:	5f                   	pop    edi
c0016f13:	5d                   	pop    ebp
c0016f14:	c3                   	ret    

c0016f15 <setupTimer(int)>:
c0016f15:	57                   	push   edi
c0016f16:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0016f1b:	56                   	push   esi
c0016f1c:	53                   	push   ebx
c0016f1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f21:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f27:	83 ec 0c             	sub    esp,0xc
c0016f2a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f30:	e8 3b d6 ff ff       	call   c0014570 <Device::getName()>
c0016f35:	83 c4 10             	add    esp,0x10
c0016f38:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f3b:	0f 85 8d 00 00 00    	jne    c0016fce <setupTimer(int)+0xb9>
c0016f41:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0016f46:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f4d:	74 7f                	je     c0016fce <setupTimer(int)+0xb9>
c0016f4f:	83 ec 0c             	sub    esp,0xc
c0016f52:	68 5c 01 00 00       	push   0x15c
c0016f57:	e8 30 89 ff ff       	call   c000f88c <malloc>
c0016f5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f5f:	89 c3                	mov    ebx,eax
c0016f61:	e8 5c 03 01 00       	call   c00272c2 <PIT::PIT()>
c0016f66:	59                   	pop    ecx
c0016f67:	5f                   	pop    edi
c0016f68:	53                   	push   ebx
c0016f69:	ff 35 08 f4 02 c0    	push   DWORD PTR ds:0xc002f408
c0016f6f:	e8 fc d2 ff ff       	call   c0014270 <Device::addChild(Device*)>
c0016f74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f76:	6a 00                	push   0x0
c0016f78:	6a 00                	push   0x0
c0016f7a:	56                   	push   esi
c0016f7b:	53                   	push   ebx
c0016f7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f7f:	83 c4 14             	add    esp,0x14
c0016f82:	68 60 01 00 00       	push   0x160
c0016f87:	e8 00 89 ff ff       	call   c000f88c <malloc>
c0016f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f8f:	89 c7                	mov    edi,eax
c0016f91:	e8 dc 01 01 00       	call   c0027172 <APICTimer::APICTimer()>
c0016f96:	6a 00                	push   0x0
c0016f98:	6a 00                	push   0x0
c0016f9a:	56                   	push   esi
c0016f9b:	57                   	push   edi
c0016f9c:	e8 d3 00 01 00       	call   c0027074 <APICTimer::open(int, int, void*)>
c0016fa1:	83 c4 20             	add    esp,0x20
c0016fa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fa6:	6a 00                	push   0x0
c0016fa8:	6a 00                	push   0x0
c0016faa:	6a 00                	push   0x0
c0016fac:	53                   	push   ebx
c0016fad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fb0:	58                   	pop    eax
c0016fb1:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0016fb6:	5a                   	pop    edx
c0016fb7:	57                   	push   edi
c0016fb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fbe:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fc4:	e8 a7 d2 ff ff       	call   c0014270 <Device::addChild(Device*)>
c0016fc9:	83 c4 10             	add    esp,0x10
c0016fcc:	eb 33                	jmp    c0017001 <setupTimer(int)+0xec>
c0016fce:	83 ec 0c             	sub    esp,0xc
c0016fd1:	68 5c 01 00 00       	push   0x15c
c0016fd6:	e8 b1 88 ff ff       	call   c000f88c <malloc>
c0016fdb:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fde:	89 c3                	mov    ebx,eax
c0016fe0:	e8 dd 02 01 00       	call   c00272c2 <PIT::PIT()>
c0016fe5:	58                   	pop    eax
c0016fe6:	5a                   	pop    edx
c0016fe7:	53                   	push   ebx
c0016fe8:	ff 35 08 f4 02 c0    	push   DWORD PTR ds:0xc002f408
c0016fee:	e8 7d d2 ff ff       	call   c0014270 <Device::addChild(Device*)>
c0016ff3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ff5:	6a 00                	push   0x0
c0016ff7:	6a 00                	push   0x0
c0016ff9:	56                   	push   esi
c0016ffa:	53                   	push   ebx
c0016ffb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ffe:	83 c4 20             	add    esp,0x20
c0017001:	89 d8                	mov    eax,ebx
c0017003:	5b                   	pop    ebx
c0017004:	5e                   	pop    esi
c0017005:	5f                   	pop    edi
c0017006:	c3                   	ret    
c0017007:	90                   	nop

c0017008 <VCache::VCache(PhysicalDisk*)>:
c0017008:	53                   	push   ebx
c0017009:	83 ec 18             	sub    esp,0x18
c001700c:	ba f8 c1 02 c0       	mov    edx,0xc002c1f8
c0017011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017015:	89 10                	mov    DWORD PTR [eax],edx
c0017017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017026:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001702d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017031:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017038:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001703f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017043:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001704a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017051:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017055:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001705c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017060:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017068:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001706f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017082:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001708e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017092:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017099:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00170a1:	83 ec 0c             	sub    esp,0xc
c00170a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170a8:	e8 df 87 ff ff       	call   c000f88c <malloc>
c00170ad:	83 c4 10             	add    esp,0x10
c00170b0:	89 c3                	mov    ebx,eax
c00170b2:	83 ec 0c             	sub    esp,0xc
c00170b5:	53                   	push   ebx
c00170b6:	e8 47 74 00 00       	call   c001e502 <Mutex::Mutex()>
c00170bb:	83 c4 10             	add    esp,0x10
c00170be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170cd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170df:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170f0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170fc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017100:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017103:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001710a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001710e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017112:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017118:	05 00 01 00 00       	add    eax,0x100
c001711d:	c1 e0 04             	shl    eax,0x4
c0017120:	83 ec 0c             	sub    esp,0xc
c0017123:	50                   	push   eax
c0017124:	e8 63 87 ff ff       	call   c000f88c <malloc>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	89 c2                	mov    edx,eax
c001712e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017132:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017139:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017140:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017144:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017148:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001714c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017152:	c1 e0 07             	shl    eax,0x7
c0017155:	83 ec 0c             	sub    esp,0xc
c0017158:	50                   	push   eax
c0017159:	e8 2e 87 ff ff       	call   c000f88c <malloc>
c001715e:	83 c4 10             	add    esp,0x10
c0017161:	89 c2                	mov    edx,eax
c0017163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017167:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001716a:	90                   	nop
c001716b:	83 c4 18             	add    esp,0x18
c001716e:	5b                   	pop    ebx
c001716f:	c3                   	ret    

c0017170 <VCache::invalidateReadBuffer()>:
c0017170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017174:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001717a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001717e:	c3                   	ret    
c001717f:	90                   	nop

c0017180 <VCache::writeWriteBuffer()>:
c0017180:	53                   	push   ebx
c0017181:	83 ec 14             	sub    esp,0x14
c0017184:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017188:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001718b:	8b 10                	mov    edx,DWORD PTR [eax]
c001718d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017190:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017193:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017196:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017199:	50                   	push   eax
c001719a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001719d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00171a4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171ab:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171af:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171b6:	83 c4 28             	add    esp,0x28
c00171b9:	5b                   	pop    ebx
c00171ba:	c3                   	ret    
c00171bb:	90                   	nop

c00171bc <VCache::~VCache()>:
c00171bc:	83 ec 0c             	sub    esp,0xc
c00171bf:	ba f8 c1 02 c0       	mov    edx,0xc002c1f8
c00171c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c8:	89 10                	mov    DWORD PTR [eax],edx
c00171ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ce:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171d1:	84 c0                	test   al,al
c00171d3:	74 0f                	je     c00171e4 <VCache::~VCache()+0x28>
c00171d5:	83 ec 0c             	sub    esp,0xc
c00171d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171dc:	e8 9f ff ff ff       	call   c0017180 <VCache::writeWriteBuffer()>
c00171e1:	83 c4 10             	add    esp,0x10
c00171e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171eb:	83 ec 0c             	sub    esp,0xc
c00171ee:	50                   	push   eax
c00171ef:	e8 a8 86 ff ff       	call   c000f89c <free>
c00171f4:	83 c4 10             	add    esp,0x10
c00171f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171fe:	83 ec 0c             	sub    esp,0xc
c0017201:	50                   	push   eax
c0017202:	e8 95 86 ff ff       	call   c000f89c <free>
c0017207:	83 c4 10             	add    esp,0x10
c001720a:	90                   	nop
c001720b:	83 c4 0c             	add    esp,0xc
c001720e:	c3                   	ret    
c001720f:	90                   	nop

c0017210 <VCache::~VCache()>:
c0017210:	83 ec 0c             	sub    esp,0xc
c0017213:	83 ec 0c             	sub    esp,0xc
c0017216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001721a:	e8 9d ff ff ff       	call   c00171bc <VCache::~VCache()>
c001721f:	83 c4 10             	add    esp,0x10
c0017222:	83 ec 08             	sub    esp,0x8
c0017225:	6a 44                	push   0x44
c0017227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001722b:	e8 27 bb ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0017230:	83 c4 10             	add    esp,0x10
c0017233:	83 c4 0c             	add    esp,0xc
c0017236:	c3                   	ret    
c0017237:	90                   	nop

c0017238 <VCache::write(unsigned long long, int, void*)>:
c0017238:	55                   	push   ebp
c0017239:	57                   	push   edi
c001723a:	56                   	push   esi
c001723b:	53                   	push   ebx
c001723c:	83 ec 18             	sub    esp,0x18
c001723f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017243:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017247:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001724b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001724e:	e8 3d 78 00 00       	call   c001ea90 <Semaphore::acquire()>
c0017253:	83 c4 10             	add    esp,0x10
c0017256:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001725a:	74 0c                	je     c0017268 <VCache::write(unsigned long long, int, void*)+0x30>
c001725c:	83 ec 0c             	sub    esp,0xc
c001725f:	53                   	push   ebx
c0017260:	e8 0b ff ff ff       	call   c0017170 <VCache::invalidateReadBuffer()>
c0017265:	83 c4 10             	add    esp,0x10
c0017268:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001726c:	74 5c                	je     c00172ca <VCache::write(unsigned long long, int, void*)+0x92>
c001726e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0017271:	89 e8                	mov    eax,ebp
c0017273:	99                   	cdq    
c0017274:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017277:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001727a:	89 c1                	mov    ecx,eax
c001727c:	89 d0                	mov    eax,edx
c001727e:	31 f1                	xor    ecx,esi
c0017280:	31 f8                	xor    eax,edi
c0017282:	09 c1                	or     ecx,eax
c0017284:	75 38                	jne    c00172be <VCache::write(unsigned long long, int, void*)+0x86>
c0017286:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001728b:	75 31                	jne    c00172be <VCache::write(unsigned long long, int, void*)+0x86>
c001728d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017290:	89 ef                	mov    edi,ebp
c0017292:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017298:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001729c:	0f af f9             	imul   edi,ecx
c001729f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00172a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172a7:	40                   	inc    eax
c00172a8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172ab:	83 c0 80             	add    eax,0xffffff80
c00172ae:	75 5c                	jne    c001730c <VCache::write(unsigned long long, int, void*)+0xd4>
c00172b0:	83 ec 0c             	sub    esp,0xc
c00172b3:	53                   	push   ebx
c00172b4:	e8 c7 fe ff ff       	call   c0017180 <VCache::writeWriteBuffer()>
c00172b9:	83 c4 10             	add    esp,0x10
c00172bc:	eb 4e                	jmp    c001730c <VCache::write(unsigned long long, int, void*)+0xd4>
c00172be:	83 ec 0c             	sub    esp,0xc
c00172c1:	53                   	push   ebx
c00172c2:	e8 b9 fe ff ff       	call   c0017180 <VCache::writeWriteBuffer()>
c00172c7:	83 c4 10             	add    esp,0x10
c00172ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172cd:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00172d2:	7f 22                	jg     c00172f6 <VCache::write(unsigned long long, int, void*)+0xbe>
c00172d4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172d7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172da:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172de:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172e2:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00172e5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00172e8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00172ee:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172f4:	eb 16                	jmp    c001730c <VCache::write(unsigned long long, int, void*)+0xd4>
c00172f6:	83 ec 0c             	sub    esp,0xc
c00172f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00172fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017303:	57                   	push   edi
c0017304:	56                   	push   esi
c0017305:	50                   	push   eax
c0017306:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017309:	83 c4 20             	add    esp,0x20
c001730c:	83 ec 0c             	sub    esp,0xc
c001730f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017312:	e8 b3 7e 00 00       	call   c001f1ca <Semaphore::release()>
c0017317:	83 c4 1c             	add    esp,0x1c
c001731a:	31 c0                	xor    eax,eax
c001731c:	5b                   	pop    ebx
c001731d:	5e                   	pop    esi
c001731e:	5f                   	pop    edi
c001731f:	5d                   	pop    ebp
c0017320:	c3                   	ret    
c0017321:	90                   	nop

c0017322 <VCache::read(unsigned long long, int, void*)>:
c0017322:	55                   	push   ebp
c0017323:	57                   	push   edi
c0017324:	56                   	push   esi
c0017325:	53                   	push   ebx
c0017326:	83 ec 28             	sub    esp,0x28
c0017329:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001732d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017331:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017335:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017339:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001733c:	e8 4f 77 00 00       	call   c001ea90 <Semaphore::acquire()>
c0017341:	83 c4 10             	add    esp,0x10
c0017344:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017348:	74 0c                	je     c0017356 <VCache::read(unsigned long long, int, void*)+0x34>
c001734a:	83 ec 0c             	sub    esp,0xc
c001734d:	53                   	push   ebx
c001734e:	e8 2d fe ff ff       	call   c0017180 <VCache::writeWriteBuffer()>
c0017353:	83 c4 10             	add    esp,0x10
c0017356:	83 fd 01             	cmp    ebp,0x1
c0017359:	0f 85 80 00 00 00    	jne    c00173df <VCache::read(unsigned long long, int, void*)+0xbd>
c001735f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017362:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017366:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001736d:	75 70                	jne    c00173df <VCache::read(unsigned long long, int, void*)+0xbd>
c001736f:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0017372:	89 e9                	mov    ecx,ebp
c0017374:	f7 d9                	neg    ecx
c0017376:	89 c8                	mov    eax,ecx
c0017378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001737c:	c1 f8 1f             	sar    eax,0x1f
c001737f:	21 f1                	and    ecx,esi
c0017381:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017385:	89 c8                	mov    eax,ecx
c0017387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001738b:	21 f9                	and    ecx,edi
c001738d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017391:	89 ca                	mov    edx,ecx
c0017393:	74 0a                	je     c001739f <VCache::read(unsigned long long, int, void*)+0x7d>
c0017395:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017398:	75 05                	jne    c001739f <VCache::read(unsigned long long, int, void*)+0x7d>
c001739a:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001739d:	74 23                	je     c00173c2 <VCache::read(unsigned long long, int, void*)+0xa0>
c001739f:	83 ec 0c             	sub    esp,0xc
c00173a2:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00173aa:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00173ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00173b0:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00173b2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173b5:	55                   	push   ebp
c00173b6:	52                   	push   edx
c00173b7:	50                   	push   eax
c00173b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173bc:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173bf:	83 c4 20             	add    esp,0x20
c00173c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173c5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173c9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00173cf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173d2:	48                   	dec    eax
c00173d3:	21 c6                	and    esi,eax
c00173d5:	0f af f1             	imul   esi,ecx
c00173d8:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00173db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173dd:	eb 1d                	jmp    c00173fc <VCache::read(unsigned long long, int, void*)+0xda>
c00173df:	83 ec 0c             	sub    esp,0xc
c00173e2:	53                   	push   ebx
c00173e3:	e8 88 fd ff ff       	call   c0017170 <VCache::invalidateReadBuffer()>
c00173e8:	5a                   	pop    edx
c00173e9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00173ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173f2:	55                   	push   ebp
c00173f3:	57                   	push   edi
c00173f4:	56                   	push   esi
c00173f5:	50                   	push   eax
c00173f6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173f9:	83 c4 20             	add    esp,0x20
c00173fc:	83 ec 0c             	sub    esp,0xc
c00173ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017402:	e8 c3 7d 00 00       	call   c001f1ca <Semaphore::release()>
c0017407:	83 c4 2c             	add    esp,0x2c
c001740a:	31 c0                	xor    eax,eax
c001740c:	5b                   	pop    ebx
c001740d:	5e                   	pop    esi
c001740e:	5f                   	pop    edi
c001740f:	5d                   	pop    ebp
c0017410:	c3                   	ret    
c0017411:	90                   	nop

c0017412 <Video::putrect(int, int, int, int, unsigned int)>:
c0017412:	55                   	push   ebp
c0017413:	57                   	push   edi
c0017414:	56                   	push   esi
c0017415:	53                   	push   ebx
c0017416:	83 ec 1c             	sub    esp,0x1c
c0017419:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001741d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017421:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017425:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017429:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001742d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017431:	01 df                	add    edi,ebx
c0017433:	39 fb                	cmp    ebx,edi
c0017435:	7d 1f                	jge    c0017456 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017437:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001743b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001743f:	7d 12                	jge    c0017453 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017441:	8b 16                	mov    edx,DWORD PTR [esi]
c0017443:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017447:	53                   	push   ebx
c0017448:	55                   	push   ebp
c0017449:	45                   	inc    ebp
c001744a:	56                   	push   esi
c001744b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001744e:	83 c4 10             	add    esp,0x10
c0017451:	eb e8                	jmp    c001743b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017453:	43                   	inc    ebx
c0017454:	eb dd                	jmp    c0017433 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017456:	83 c4 1c             	add    esp,0x1c
c0017459:	5b                   	pop    ebx
c001745a:	5e                   	pop    esi
c001745b:	5f                   	pop    edi
c001745c:	5d                   	pop    ebp
c001745d:	c3                   	ret    

c001745e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001745e:	55                   	push   ebp
c001745f:	57                   	push   edi
c0017460:	31 ff                	xor    edi,edi
c0017462:	56                   	push   esi
c0017463:	53                   	push   ebx
c0017464:	83 ec 1c             	sub    esp,0x1c
c0017467:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001746b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001746f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017476:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001747b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001747f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017483:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017487:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001748a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001748e:	01 f9                	add    ecx,edi
c0017490:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017494:	7d 2f                	jge    c00174c5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017496:	31 f6                	xor    esi,esi
c0017498:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001749c:	01 f2                	add    edx,esi
c001749e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174a2:	7d 1a                	jge    c00174be <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174a4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174a7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174aa:	46                   	inc    esi
c00174ab:	51                   	push   ecx
c00174ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174b0:	52                   	push   edx
c00174b1:	55                   	push   ebp
c00174b2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174b5:	83 c4 10             	add    esp,0x10
c00174b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174bc:	eb da                	jmp    c0017498 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174be:	47                   	inc    edi
c00174bf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174c3:	eb c5                	jmp    c001748a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174c5:	83 c4 1c             	add    esp,0x1c
c00174c8:	5b                   	pop    ebx
c00174c9:	5e                   	pop    esi
c00174ca:	5f                   	pop    edi
c00174cb:	5d                   	pop    ebp
c00174cc:	c3                   	ret    
c00174cd:	90                   	nop

c00174ce <Video::blit(unsigned int*, int, int, int, int)>:
c00174ce:	55                   	push   ebp
c00174cf:	57                   	push   edi
c00174d0:	56                   	push   esi
c00174d1:	53                   	push   ebx
c00174d2:	83 ec 1c             	sub    esp,0x1c
c00174d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174dd:	85 c0                	test   eax,eax
c00174df:	79 02                	jns    c00174e3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174e1:	31 c0                	xor    eax,eax
c00174e3:	c1 e0 02             	shl    eax,0x2
c00174e6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174f2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174f6:	39 d8                	cmp    eax,ebx
c00174f8:	7e 49                	jle    c0017543 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174fa:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017500:	7c 41                	jl     c0017543 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017502:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017506:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001750a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001750e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017512:	39 f9                	cmp    ecx,edi
c0017514:	7e 22                	jle    c0017538 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017516:	83 c5 04             	add    ebp,0x4
c0017519:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001751f:	7c 14                	jl     c0017535 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017521:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017523:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017526:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001752a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001752e:	56                   	push   esi
c001752f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017532:	83 c4 10             	add    esp,0x10
c0017535:	47                   	inc    edi
c0017536:	eb d2                	jmp    c001750a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017538:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001753c:	43                   	inc    ebx
c001753d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017541:	eb ab                	jmp    c00174ee <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017543:	83 c4 1c             	add    esp,0x1c
c0017546:	5b                   	pop    ebx
c0017547:	5e                   	pop    esi
c0017548:	5f                   	pop    edi
c0017549:	5d                   	pop    ebp
c001754a:	c3                   	ret    
c001754b:	90                   	nop

c001754c <Video::clearScreen(unsigned int)>:
c001754c:	57                   	push   edi
c001754d:	56                   	push   esi
c001754e:	53                   	push   ebx
c001754f:	31 db                	xor    ebx,ebx
c0017551:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017555:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001755b:	7e 1f                	jle    c001757c <Video::clearScreen(unsigned int)+0x30>
c001755d:	31 ff                	xor    edi,edi
c001755f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017565:	7e 12                	jle    c0017579 <Video::clearScreen(unsigned int)+0x2d>
c0017567:	8b 06                	mov    eax,DWORD PTR [esi]
c0017569:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001756d:	53                   	push   ebx
c001756e:	57                   	push   edi
c001756f:	47                   	inc    edi
c0017570:	56                   	push   esi
c0017571:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017574:	83 c4 10             	add    esp,0x10
c0017577:	eb e6                	jmp    c001755f <Video::clearScreen(unsigned int)+0x13>
c0017579:	43                   	inc    ebx
c001757a:	eb d9                	jmp    c0017555 <Video::clearScreen(unsigned int)+0x9>
c001757c:	5b                   	pop    ebx
c001757d:	5e                   	pop    esi
c001757e:	5f                   	pop    edi
c001757f:	c3                   	ret    

c0017580 <Video::putpixel(int, int, unsigned int)>:
c0017580:	c7 44 24 04 00 c2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c200
c0017588:	e9 18 34 00 00       	jmp    c001a9a5 <Krnl::panic(char const*)>
c001758d:	90                   	nop

c001758e <Video::Video(char const*)>:
c001758e:	83 ec 0c             	sub    esp,0xc
c0017591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017595:	83 ec 08             	sub    esp,0x8
c0017598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001759c:	50                   	push   eax
c001759d:	e8 d2 ce ff ff       	call   c0014474 <Device::Device(char const*)>
c00175a2:	83 c4 10             	add    esp,0x10
c00175a5:	ba 84 c2 02 c0       	mov    edx,0xc002c284
c00175aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ae:	89 10                	mov    DWORD PTR [eax],edx
c00175b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175be:	90                   	nop
c00175bf:	83 c4 0c             	add    esp,0xc
c00175c2:	c3                   	ret    
c00175c3:	90                   	nop

c00175c4 <Video::~Video()>:
c00175c4:	83 ec 0c             	sub    esp,0xc
c00175c7:	ba 84 c2 02 c0       	mov    edx,0xc002c284
c00175cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d0:	89 10                	mov    DWORD PTR [eax],edx
c00175d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d6:	83 ec 0c             	sub    esp,0xc
c00175d9:	50                   	push   eax
c00175da:	e8 5f cb ff ff       	call   c001413e <Device::~Device()>
c00175df:	83 c4 10             	add    esp,0x10
c00175e2:	90                   	nop
c00175e3:	83 c4 0c             	add    esp,0xc
c00175e6:	c3                   	ret    
c00175e7:	90                   	nop

c00175e8 <Video::~Video()>:
c00175e8:	83 ec 0c             	sub    esp,0xc
c00175eb:	83 ec 0c             	sub    esp,0xc
c00175ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175f2:	e8 cd ff ff ff       	call   c00175c4 <Video::~Video()>
c00175f7:	83 c4 10             	add    esp,0x10
c00175fa:	83 ec 08             	sub    esp,0x8
c00175fd:	68 64 01 00 00       	push   0x164
c0017602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017606:	e8 4c b7 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	83 c4 0c             	add    esp,0xc
c0017611:	c3                   	ret    

c0017612 <Video::isMonochrome()>:
c0017612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017616:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001761c:	c3                   	ret    
c001761d:	90                   	nop

c001761e <Video::getWidth()>:
c001761e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017622:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017628:	c3                   	ret    
c0017629:	90                   	nop

c001762a <Video::getHeight()>:
c001762a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001762e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017634:	c3                   	ret    
c0017635:	90                   	nop

c0017636 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017636:	55                   	push   ebp
c0017637:	57                   	push   edi
c0017638:	56                   	push   esi
c0017639:	53                   	push   ebx
c001763a:	83 ec 2c             	sub    esp,0x2c
c001763d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017641:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017645:	83 f8 01             	cmp    eax,0x1
c0017648:	19 c9                	sbb    ecx,ecx
c001764a:	31 db                	xor    ebx,ebx
c001764c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017650:	89 cd                	mov    ebp,ecx
c0017652:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001765a:	f7 d5                	not    ebp
c001765c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017662:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017666:	01 d8                	add    eax,ebx
c0017668:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001766c:	56                   	push   esi
c001766d:	e8 b8 ff ff ff       	call   c001762a <Video::getHeight()>
c0017672:	59                   	pop    ecx
c0017673:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017677:	7e 70                	jle    c00176e9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017679:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001767d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017681:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017684:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017688:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001768c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017693:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017697:	89 f8                	mov    eax,edi
c0017699:	83 c0 20             	add    eax,0x20
c001769c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176a0:	56                   	push   esi
c00176a1:	e8 78 ff ff ff       	call   c001761e <Video::getWidth()>
c00176a6:	5a                   	pop    edx
c00176a7:	39 c7                	cmp    edi,eax
c00176a9:	7d 34                	jge    c00176df <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176ab:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176b0:	74 05                	je     c00176b7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00176b4:	55                   	push   ebp
c00176b5:	eb 0d                	jmp    c00176c4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176b7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176bc:	74 12                	je     c00176d0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176be:	8b 06                	mov    eax,DWORD PTR [esi]
c00176c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176c8:	57                   	push   edi
c00176c9:	56                   	push   esi
c00176ca:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176d4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176d8:	47                   	inc    edi
c00176d9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176dd:	75 c1                	jne    c00176a0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176df:	43                   	inc    ebx
c00176e0:	83 fb 20             	cmp    ebx,0x20
c00176e3:	0f 85 79 ff ff ff    	jne    c0017662 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176e9:	83 c4 2c             	add    esp,0x2c
c00176ec:	5b                   	pop    ebx
c00176ed:	5e                   	pop    esi
c00176ee:	5f                   	pop    edi
c00176ef:	5d                   	pop    ebp
c00176f0:	c3                   	ret    
c00176f1:	90                   	nop

c00176f2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176f2:	55                   	push   ebp
c00176f3:	57                   	push   edi
c00176f4:	56                   	push   esi
c00176f5:	53                   	push   ebx
c00176f6:	83 ec 28             	sub    esp,0x28
c00176f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176fd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017701:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017705:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017709:	c1 e7 08             	shl    edi,0x8
c001770c:	01 c7                	add    edi,eax
c001770e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017712:	c1 e0 08             	shl    eax,0x8
c0017715:	01 d0                	add    eax,edx
c0017717:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001771b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001771f:	0f af c7             	imul   eax,edi
c0017722:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017729:	50                   	push   eax
c001772a:	e8 5d 81 ff ff       	call   c000f88c <malloc>
c001772f:	83 c4 10             	add    esp,0x10
c0017732:	89 c5                	mov    ebp,eax
c0017734:	85 c0                	test   eax,eax
c0017736:	75 15                	jne    c001774d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017738:	83 ec 0c             	sub    esp,0xc
c001773b:	68 21 c2 02 c0       	push   0xc002c221
c0017740:	e8 f2 b6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0017745:	83 c4 10             	add    esp,0x10
c0017748:	e9 1c 01 00 00       	jmp    c0017869 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001774d:	be 12 00 00 00       	mov    esi,0x12
c0017752:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017756:	74 11                	je     c0017769 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017758:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001775c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017760:	c1 fe 03             	sar    esi,0x3
c0017763:	0f af f0             	imul   esi,eax
c0017766:	83 c6 12             	add    esi,0x12
c0017769:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001776d:	74 04                	je     c0017773 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001776f:	85 ff                	test   edi,edi
c0017771:	75 12                	jne    c0017785 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017773:	83 ec 0c             	sub    esp,0xc
c0017776:	68 38 c2 02 c0       	push   0xc002c238
c001777b:	e8 b7 b6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0017780:	e9 ce 00 00 00       	jmp    c0017853 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017785:	52                   	push   edx
c0017786:	52                   	push   edx
c0017787:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001778b:	50                   	push   eax
c001778c:	68 4d c2 02 c0       	push   0xc002c24d
c0017791:	e8 a1 b6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0017796:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001779a:	83 c4 10             	add    esp,0x10
c001779d:	80 fa 02             	cmp    dl,0x2
c00177a0:	0f 85 98 00 00 00    	jne    c001783e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177a6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177ab:	75 10                	jne    c00177bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177ad:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177b1:	75 0a                	jne    c00177bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177b3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177b6:	83 e8 18             	sub    eax,0x18
c00177b9:	a8 f7                	test   al,0xf7
c00177bb:	74 0a                	je     c00177c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177bd:	83 ec 0c             	sub    esp,0xc
c00177c0:	68 5a c2 02 c0       	push   0xc002c25a
c00177c5:	eb 7f                	jmp    c0017846 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177cf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177db:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177e3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177e7:	75 0c                	jne    c00177f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177e9:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177ee:	c1 e0 18             	shl    eax,0x18
c00177f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177f5:	41                   	inc    ecx
c00177f6:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177fb:	c1 e2 10             	shl    edx,0x10
c00177fe:	89 d0                	mov    eax,edx
c0017800:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017805:	c1 e2 08             	shl    edx,0x8
c0017808:	09 c2                	or     edx,eax
c001780a:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001780e:	09 c2                	or     edx,eax
c0017810:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017814:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017818:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001781c:	c1 f8 03             	sar    eax,0x3
c001781f:	01 c6                	add    esi,eax
c0017821:	89 c8                	mov    eax,ecx
c0017823:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017827:	39 c7                	cmp    edi,eax
c0017829:	7f b0                	jg     c00177db <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001782b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001782f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017833:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017836:	7e 22                	jle    c001785a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017838:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001783c:	eb 99                	jmp    c00177d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001783e:	50                   	push   eax
c001783f:	50                   	push   eax
c0017840:	52                   	push   edx
c0017841:	68 68 c2 02 c0       	push   0xc002c268
c0017846:	e8 ec b5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001784b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001784e:	e8 49 80 ff ff       	call   c000f89c <free>
c0017853:	83 c4 10             	add    esp,0x10
c0017856:	31 ed                	xor    ebp,ebp
c0017858:	eb 0f                	jmp    c0017869 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001785a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001785e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017861:	89 38                	mov    DWORD PTR [eax],edi
c0017863:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017867:	89 08                	mov    DWORD PTR [eax],ecx
c0017869:	83 c4 1c             	add    esp,0x1c
c001786c:	89 e8                	mov    eax,ebp
c001786e:	5b                   	pop    ebx
c001786f:	5e                   	pop    esi
c0017870:	5f                   	pop    edi
c0017871:	5d                   	pop    ebp
c0017872:	c3                   	ret    
c0017873:	90                   	nop

c0017874 <Video::putTGA(int, int, unsigned char*, int)>:
c0017874:	55                   	push   ebp
c0017875:	57                   	push   edi
c0017876:	56                   	push   esi
c0017877:	53                   	push   ebx
c0017878:	83 ec 28             	sub    esp,0x28
c001787b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001787f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017883:	50                   	push   eax
c0017884:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017888:	50                   	push   eax
c0017889:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001788d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017891:	56                   	push   esi
c0017892:	e8 5b fe ff ff       	call   c00176f2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017897:	83 c4 20             	add    esp,0x20
c001789a:	85 c0                	test   eax,eax
c001789c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178a0:	74 35                	je     c00178d7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178a2:	89 c7                	mov    edi,eax
c00178a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178a8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178ac:	39 d8                	cmp    eax,ebx
c00178ae:	7e 27                	jle    c00178d7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178b0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178b8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178bc:	39 e8                	cmp    eax,ebp
c00178be:	7e 14                	jle    c00178d4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00178c2:	83 c7 04             	add    edi,0x4
c00178c5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178c8:	53                   	push   ebx
c00178c9:	55                   	push   ebp
c00178ca:	45                   	inc    ebp
c00178cb:	56                   	push   esi
c00178cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178cf:	83 c4 10             	add    esp,0x10
c00178d2:	eb e0                	jmp    c00178b4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178d4:	43                   	inc    ebx
c00178d5:	eb cd                	jmp    c00178a4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178d7:	83 c4 1c             	add    esp,0x1c
c00178da:	5b                   	pop    ebx
c00178db:	5e                   	pop    esi
c00178dc:	5f                   	pop    edi
c00178dd:	5d                   	pop    ebp
c00178de:	c3                   	ret    
c00178df:	90                   	nop

c00178e0 <ACPI::close(int, int, void*)>:
c00178e0:	83 ec 1c             	sub    esp,0x1c
c00178e3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178eb:	74 0a                	je     c00178f7 <ACPI::close(int, int, void*)+0x17>
c00178ed:	b8 00 00 00 00       	mov    eax,0x0
c00178f2:	e9 9a 00 00 00       	jmp    c0017991 <ACPI::close(int, int, void*)+0xb1>
c00178f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178fc:	75 37                	jne    c0017935 <ACPI::close(int, int, void*)+0x55>
c00178fe:	83 ec 0c             	sub    esp,0xc
c0017901:	68 c4 c2 02 c0       	push   0xc002c2c4
c0017906:	e8 2c b5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001790b:	83 c4 10             	add    esp,0x10
c001790e:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c0017913:	85 c0                	test   eax,eax
c0017915:	74 07                	je     c001791e <ACPI::close(int, int, void*)+0x3e>
c0017917:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001791c:	ff d0                	call   eax
c001791e:	83 ec 0c             	sub    esp,0xc
c0017921:	68 38 c4 02 c0       	push   0xc002c438
c0017926:	e8 7a 30 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c001792b:	83 c4 10             	add    esp,0x10
c001792e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017933:	eb 5c                	jmp    c0017991 <ACPI::close(int, int, void*)+0xb1>
c0017935:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001793a:	75 50                	jne    c001798c <ACPI::close(int, int, void*)+0xac>
c001793c:	a1 c4 1a 03 c0       	mov    eax,ds:0xc0031ac4
c0017941:	85 c0                	test   eax,eax
c0017943:	74 07                	je     c001794c <ACPI::close(int, int, void*)+0x6c>
c0017945:	a1 c4 1a 03 c0       	mov    eax,ds:0xc0031ac4
c001794a:	ff d0                	call   eax
c001794c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017951:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017956:	83 e0 02             	and    eax,0x2
c0017959:	74 1c                	je     c0017977 <ACPI::close(int, int, void*)+0x97>
c001795b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017962:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017966:	89 c2                	mov    edx,eax
c0017968:	ec                   	in     al,dx
c0017969:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001796d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017971:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017975:	eb da                	jmp    c0017951 <ACPI::close(int, int, void*)+0x71>
c0017977:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001797e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017983:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017987:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001798b:	ee                   	out    dx,al
c001798c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017991:	83 c4 1c             	add    esp,0x1c
c0017994:	c3                   	ret    

c0017995 <findRSDP()>:
c0017995:	83 ec 1c             	sub    esp,0x1c
c0017998:	83 ec 0c             	sub    esp,0xc
c001799b:	68 d1 c2 02 c0       	push   0xc002c2d1
c00179a0:	e8 92 b4 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00179a5:	83 c4 10             	add    esp,0x10
c00179a8:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c00179ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179b3:	83 e0 04             	and    eax,0x4
c00179b6:	84 c0                	test   al,al
c00179b8:	75 07                	jne    c00179c1 <findRSDP()+0x2c>
c00179ba:	b8 00 00 00 00       	mov    eax,0x0
c00179bf:	eb 6a                	jmp    c0017a2b <findRSDP()+0x96>
c00179c1:	a1 54 f4 02 c0       	mov    eax,ds:0xc002f454
c00179c6:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179cb:	7f 1b                	jg     c00179e8 <findRSDP()+0x53>
c00179cd:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c00179d2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179d8:	83 e2 fb             	and    edx,0xfffffffb
c00179db:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179e1:	b8 00 00 00 00       	mov    eax,0x0
c00179e6:	eb 43                	jmp    c0017a2b <findRSDP()+0x96>
c00179e8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179f0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179f8:	77 2c                	ja     c0017a26 <findRSDP()+0x91>
c00179fa:	83 ec 04             	sub    esp,0x4
c00179fd:	6a 08                	push   0x8
c00179ff:	68 df c2 02 c0       	push   0xc002c2df
c0017a04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a08:	e8 3f 8c fe ff       	call   c000064c <memcmp>
c0017a0d:	83 c4 10             	add    esp,0x10
c0017a10:	85 c0                	test   eax,eax
c0017a12:	0f 94 c0             	sete   al
c0017a15:	84 c0                	test   al,al
c0017a17:	74 06                	je     c0017a1f <findRSDP()+0x8a>
c0017a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a1d:	eb 0c                	jmp    c0017a2b <findRSDP()+0x96>
c0017a1f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a24:	eb ca                	jmp    c00179f0 <findRSDP()+0x5b>
c0017a26:	b8 00 00 00 00       	mov    eax,0x0
c0017a2b:	83 c4 1c             	add    esp,0x1c
c0017a2e:	c3                   	ret    

c0017a2f <loadACPITables(unsigned char*)>:
c0017a2f:	57                   	push   edi
c0017a30:	56                   	push   esi
c0017a31:	53                   	push   ebx
c0017a32:	83 ec 60             	sub    esp,0x60
c0017a35:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0017a3a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a40:	83 e0 04             	and    eax,0x4
c0017a43:	84 c0                	test   al,al
c0017a45:	0f 84 33 02 00 00    	je     c0017c7e <loadACPITables(unsigned char*)+0x24f>
c0017a4b:	a0 e0 1c 03 c0       	mov    al,ds:0xc0031ce0
c0017a50:	84 c0                	test   al,al
c0017a52:	74 75                	je     c0017ac9 <loadACPITables(unsigned char*)+0x9a>
c0017a54:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a58:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017a5c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a63:	83 e8 24             	sub    eax,0x24
c0017a66:	c1 e8 03             	shr    eax,0x3
c0017a69:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a6d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017a75:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a79:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017a7d:	0f 8d b2 00 00 00    	jge    c0017b35 <loadACPITables(unsigned char*)+0x106>
c0017a83:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a87:	83 c0 24             	add    eax,0x24
c0017a8a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017a8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017a92:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017a96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a9a:	c1 e0 03             	shl    eax,0x3
c0017a9d:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017aa1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017aa5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017aa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0017aaa:	89 c1                	mov    ecx,eax
c0017aac:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c0017ab1:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab4:	89 15 cc 1a 03 c0    	mov    DWORD PTR ds:0xc0031acc,edx
c0017aba:	89 ca                	mov    edx,ecx
c0017abc:	89 14 c5 e4 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce51c],edx
c0017ac3:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017ac7:	eb ac                	jmp    c0017a75 <loadACPITables(unsigned char*)+0x46>
c0017ac9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017acd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017ad1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ad5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ad8:	83 e8 24             	sub    eax,0x24
c0017adb:	c1 e8 02             	shr    eax,0x2
c0017ade:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ae2:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017aea:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017aee:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017af2:	7d 41                	jge    c0017b35 <loadACPITables(unsigned char*)+0x106>
c0017af4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017af8:	83 c0 24             	add    eax,0x24
c0017afb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017aff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b03:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b07:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017b0b:	c1 e0 02             	shl    eax,0x2
c0017b0e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017b12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b16:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b18:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c0017b1d:	8d 50 01             	lea    edx,[eax+0x1]
c0017b20:	89 15 cc 1a 03 c0    	mov    DWORD PTR ds:0xc0031acc,edx
c0017b26:	89 ca                	mov    edx,ecx
c0017b28:	89 14 c5 e4 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce51c],edx
c0017b2f:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017b33:	eb b5                	jmp    c0017aea <loadACPITables(unsigned char*)+0xbb>
c0017b35:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017b3d:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c0017b42:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017b46:	0f 8d 33 01 00 00    	jge    c0017c7f <loadACPITables(unsigned char*)+0x250>
c0017b4c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b50:	8b 04 c5 e4 1a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce51c]
c0017b57:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b67:	25 ff 0f 00 00       	and    eax,0xfff
c0017b6c:	89 c6                	mov    esi,eax
c0017b6e:	8b 1d 90 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f590
c0017b74:	83 ec 0c             	sub    esp,0xc
c0017b77:	6a 01                	push   0x1
c0017b79:	e8 b3 9e ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017b7e:	83 c4 10             	add    esp,0x10
c0017b81:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b85:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b8b:	83 ec 0c             	sub    esp,0xc
c0017b8e:	6a 01                	push   0x1
c0017b90:	6a 01                	push   0x1
c0017b92:	50                   	push   eax
c0017b93:	52                   	push   edx
c0017b94:	53                   	push   ebx
c0017b95:	e8 c4 a9 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b9a:	83 c4 20             	add    esp,0x20
c0017b9d:	09 f0                	or     eax,esi
c0017b9f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ba3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017ba7:	c1 e0 03             	shl    eax,0x3
c0017baa:	05 e0 1a 03 c0       	add    eax,0xc0031ae0
c0017baf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017bb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bbb:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017bc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bcf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bd3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bd7:	89 c6                	mov    esi,eax
c0017bd9:	89 d7                	mov    edi,edx
c0017bdb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bdd:	89 c8                	mov    eax,ecx
c0017bdf:	89 fa                	mov    edx,edi
c0017be1:	89 f3                	mov    ebx,esi
c0017be3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017be7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017beb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bf6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017bfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bfe:	05 00 10 00 00       	add    eax,0x1000
c0017c03:	c1 e8 0c             	shr    eax,0xc
c0017c06:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c16:	25 ff 0f 00 00       	and    eax,0xfff
c0017c1b:	89 c6                	mov    esi,eax
c0017c1d:	8b 1d 90 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f590
c0017c23:	83 ec 0c             	sub    esp,0xc
c0017c26:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c2a:	e8 02 9e ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017c2f:	83 c4 10             	add    esp,0x10
c0017c32:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c36:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c3c:	83 ec 0c             	sub    esp,0xc
c0017c3f:	6a 01                	push   0x1
c0017c41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c45:	50                   	push   eax
c0017c46:	52                   	push   edx
c0017c47:	53                   	push   ebx
c0017c48:	e8 11 a9 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c4d:	83 c4 20             	add    esp,0x20
c0017c50:	09 f0                	or     eax,esi
c0017c52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c5a:	83 ec 0c             	sub    esp,0xc
c0017c5d:	50                   	push   eax
c0017c5e:	e8 8e a2 ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c63:	83 c4 10             	add    esp,0x10
c0017c66:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017c6a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c6e:	89 14 c5 e4 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce51c],edx
c0017c75:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017c79:	e9 bf fe ff ff       	jmp    c0017b3d <loadACPITables(unsigned char*)+0x10e>
c0017c7e:	90                   	nop
c0017c7f:	83 c4 60             	add    esp,0x60
c0017c82:	5b                   	pop    ebx
c0017c83:	5e                   	pop    esi
c0017c84:	5f                   	pop    edi
c0017c85:	c3                   	ret    

c0017c86 <findRSDT(unsigned char*)>:
c0017c86:	57                   	push   edi
c0017c87:	56                   	push   esi
c0017c88:	53                   	push   ebx
c0017c89:	83 ec 50             	sub    esp,0x50
c0017c8c:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0017c91:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c97:	83 e0 04             	and    eax,0x4
c0017c9a:	84 c0                	test   al,al
c0017c9c:	75 0a                	jne    c0017ca8 <findRSDT(unsigned char*)+0x22>
c0017c9e:	b8 00 00 00 00       	mov    eax,0x0
c0017ca3:	e9 21 01 00 00       	jmp    c0017dc9 <findRSDT(unsigned char*)+0x143>
c0017ca8:	89 e0                	mov    eax,esp
c0017caa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017cb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017cb6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017cbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017cca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017cce:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017cd2:	89 c6                	mov    esi,eax
c0017cd4:	89 d7                	mov    edi,edx
c0017cd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017cd8:	89 c8                	mov    eax,ecx
c0017cda:	89 fa                	mov    edx,edi
c0017cdc:	89 f3                	mov    ebx,esi
c0017cde:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017ce2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017ce6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017cea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017cee:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017cf2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017cfa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d02:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d0a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d0e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d12:	25 ff 0f 00 00       	and    eax,0xfff
c0017d17:	89 c6                	mov    esi,eax
c0017d19:	8b 1d 90 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f590
c0017d1f:	83 ec 0c             	sub    esp,0xc
c0017d22:	6a 02                	push   0x2
c0017d24:	e8 08 9d ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017d29:	83 c4 10             	add    esp,0x10
c0017d2c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d30:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d36:	83 ec 0c             	sub    esp,0xc
c0017d39:	6a 01                	push   0x1
c0017d3b:	6a 02                	push   0x2
c0017d3d:	50                   	push   eax
c0017d3e:	52                   	push   edx
c0017d3f:	53                   	push   ebx
c0017d40:	e8 19 a8 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d45:	83 c4 20             	add    esp,0x20
c0017d48:	09 f0                	or     eax,esi
c0017d4a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d52:	25 ff 0f 00 00       	and    eax,0xfff
c0017d57:	89 c6                	mov    esi,eax
c0017d59:	8b 1d 90 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f590
c0017d5f:	83 ec 0c             	sub    esp,0xc
c0017d62:	6a 02                	push   0x2
c0017d64:	e8 c8 9c ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017d69:	83 c4 10             	add    esp,0x10
c0017d6c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d70:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d76:	83 ec 0c             	sub    esp,0xc
c0017d79:	6a 01                	push   0x1
c0017d7b:	6a 02                	push   0x2
c0017d7d:	50                   	push   eax
c0017d7e:	52                   	push   edx
c0017d7f:	53                   	push   ebx
c0017d80:	e8 d9 a7 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d85:	83 c4 20             	add    esp,0x20
c0017d88:	09 f0                	or     eax,esi
c0017d8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d8e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017d93:	75 11                	jne    c0017da6 <findRSDT(unsigned char*)+0x120>
c0017d95:	c6 05 e0 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031ce0,0x0
c0017d9c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017da0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017da4:	eb 1f                	jmp    c0017dc5 <findRSDT(unsigned char*)+0x13f>
c0017da6:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017dab:	75 11                	jne    c0017dbe <findRSDT(unsigned char*)+0x138>
c0017dad:	c6 05 e0 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031ce0,0x1
c0017db4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017db8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017dbc:	eb 07                	jmp    c0017dc5 <findRSDT(unsigned char*)+0x13f>
c0017dbe:	b8 00 00 00 00       	mov    eax,0x0
c0017dc3:	eb 04                	jmp    c0017dc9 <findRSDT(unsigned char*)+0x143>
c0017dc5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017dc9:	83 c4 50             	add    esp,0x50
c0017dcc:	5b                   	pop    ebx
c0017dcd:	5e                   	pop    esi
c0017dce:	5f                   	pop    edi
c0017dcf:	c3                   	ret    

c0017dd0 <findDataTable(unsigned char*, char*)>:
c0017dd0:	83 ec 1c             	sub    esp,0x1c
c0017dd3:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0017dd8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017dde:	83 e0 04             	and    eax,0x4
c0017de1:	84 c0                	test   al,al
c0017de3:	75 07                	jne    c0017dec <findDataTable(unsigned char*, char*)+0x1c>
c0017de5:	b8 00 00 00 00       	mov    eax,0x0
c0017dea:	eb 7c                	jmp    c0017e68 <findDataTable(unsigned char*, char*)+0x98>
c0017dec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017df4:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c0017df9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017dfd:	7d 3a                	jge    c0017e39 <findDataTable(unsigned char*, char*)+0x69>
c0017dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e03:	c1 e0 03             	shl    eax,0x3
c0017e06:	05 e0 1a 03 c0       	add    eax,0xc0031ae0
c0017e0b:	83 ec 04             	sub    esp,0x4
c0017e0e:	6a 04                	push   0x4
c0017e10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e14:	50                   	push   eax
c0017e15:	e8 32 88 fe ff       	call   c000064c <memcmp>
c0017e1a:	83 c4 10             	add    esp,0x10
c0017e1d:	85 c0                	test   eax,eax
c0017e1f:	0f 94 c0             	sete   al
c0017e22:	84 c0                	test   al,al
c0017e24:	74 0d                	je     c0017e33 <findDataTable(unsigned char*, char*)+0x63>
c0017e26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e2a:	8b 04 c5 e4 1a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce51c]
c0017e31:	eb 35                	jmp    c0017e68 <findDataTable(unsigned char*, char*)+0x98>
c0017e33:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e37:	eb bb                	jmp    c0017df4 <findDataTable(unsigned char*, char*)+0x24>
c0017e39:	a0 e0 1c 03 c0       	mov    al,ds:0xc0031ce0
c0017e3e:	84 c0                	test   al,al
c0017e40:	74 07                	je     c0017e49 <findDataTable(unsigned char*, char*)+0x79>
c0017e42:	b8 58 00 00 00       	mov    eax,0x58
c0017e47:	eb 05                	jmp    c0017e4e <findDataTable(unsigned char*, char*)+0x7e>
c0017e49:	b8 52 00 00 00       	mov    eax,0x52
c0017e4e:	83 ec 04             	sub    esp,0x4
c0017e51:	50                   	push   eax
c0017e52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e56:	68 5c c4 02 c0       	push   0xc002c45c
c0017e5b:	e8 d7 af ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0017e60:	83 c4 10             	add    esp,0x10
c0017e63:	b8 00 00 00 00       	mov    eax,0x0
c0017e68:	83 c4 1c             	add    esp,0x1c
c0017e6b:	c3                   	ret    

c0017e6c <scanMADT()>:
c0017e6c:	53                   	push   ebx
c0017e6d:	83 ec 38             	sub    esp,0x38
c0017e70:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0017e75:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e7b:	83 e0 04             	and    eax,0x4
c0017e7e:	84 c0                	test   al,al
c0017e80:	0f 84 63 04 00 00    	je     c00182e9 <scanMADT()+0x47d>
c0017e86:	e8 0a fb ff ff       	call   c0017995 <findRSDP()>
c0017e8b:	a3 ec 1c 03 c0       	mov    ds:0xc0031cec,eax
c0017e90:	a1 ec 1c 03 c0       	mov    eax,ds:0xc0031cec
c0017e95:	85 c0                	test   eax,eax
c0017e97:	75 19                	jne    c0017eb2 <scanMADT()+0x46>
c0017e99:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0017e9e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ea4:	83 e2 fb             	and    edx,0xfffffffb
c0017ea7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ead:	e9 3b 04 00 00       	jmp    c00182ed <scanMADT()+0x481>
c0017eb2:	a1 ec 1c 03 c0       	mov    eax,ds:0xc0031cec
c0017eb7:	83 ec 0c             	sub    esp,0xc
c0017eba:	50                   	push   eax
c0017ebb:	e8 c6 fd ff ff       	call   c0017c86 <findRSDT(unsigned char*)>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	a3 e8 1c 03 c0       	mov    ds:0xc0031ce8,eax
c0017ec8:	a1 e8 1c 03 c0       	mov    eax,ds:0xc0031ce8
c0017ecd:	85 c0                	test   eax,eax
c0017ecf:	75 19                	jne    c0017eea <scanMADT()+0x7e>
c0017ed1:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0017ed6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017edc:	83 e2 fb             	and    edx,0xfffffffb
c0017edf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ee5:	e9 03 04 00 00       	jmp    c00182ed <scanMADT()+0x481>
c0017eea:	a1 e8 1c 03 c0       	mov    eax,ds:0xc0031ce8
c0017eef:	83 ec 0c             	sub    esp,0xc
c0017ef2:	50                   	push   eax
c0017ef3:	e8 37 fb ff ff       	call   c0017a2f <loadACPITables(unsigned char*)>
c0017ef8:	83 c4 10             	add    esp,0x10
c0017efb:	a1 e8 1c 03 c0       	mov    eax,ds:0xc0031ce8
c0017f00:	83 ec 08             	sub    esp,0x8
c0017f03:	68 e8 c2 02 c0       	push   0xc002c2e8
c0017f08:	50                   	push   eax
c0017f09:	e8 c2 fe ff ff       	call   c0017dd0 <findDataTable(unsigned char*, char*)>
c0017f0e:	83 c4 10             	add    esp,0x10
c0017f11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f15:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f1a:	75 19                	jne    c0017f35 <scanMADT()+0xc9>
c0017f1c:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0017f21:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f27:	83 e2 fe             	and    edx,0xfffffffe
c0017f2a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f30:	e9 b8 03 00 00       	jmp    c00182ed <scanMADT()+0x481>
c0017f35:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f44:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f48:	0f 87 9f 03 00 00    	ja     c00182ed <scanMADT()+0x481>
c0017f4e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f56:	0f 87 91 03 00 00    	ja     c00182ed <scanMADT()+0x481>
c0017f5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f68:	8d 50 01             	lea    edx,[eax+0x1]
c0017f6b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f73:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f77:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7f:	8d 50 01             	lea    edx,[eax+0x1]
c0017f82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f8a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f8e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f92:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f97:	0f 86 4f 03 00 00    	jbe    c00182ec <scanMADT()+0x480>
c0017f9d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017fa2:	75 57                	jne    c0017ffb <scanMADT()+0x18f>
c0017fa4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa8:	8d 50 01             	lea    edx,[eax+0x1]
c0017fab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017faf:	8a 15 e0 1e 03 c0    	mov    dl,BYTE PTR ds:0xc0031ee0
c0017fb5:	0f b6 d2             	movzx  edx,dl
c0017fb8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fbc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fc0:	88 82 20 1f 03 c0    	mov    BYTE PTR [edx-0x3ffce0e0],al
c0017fc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fca:	8d 50 01             	lea    edx,[eax+0x1]
c0017fcd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fd1:	8a 15 e0 1e 03 c0    	mov    dl,BYTE PTR ds:0xc0031ee0
c0017fd7:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fda:	88 0d e0 1e 03 c0    	mov    BYTE PTR ds:0xc0031ee0,cl
c0017fe0:	0f b6 d2             	movzx  edx,dl
c0017fe3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fe7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017feb:	88 82 00 1f 03 c0    	mov    BYTE PTR [edx-0x3ffce100],al
c0017ff1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ff6:	e9 da 02 00 00       	jmp    c00182d5 <scanMADT()+0x469>
c0017ffb:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0018000:	0f 85 14 01 00 00    	jne    c001811a <scanMADT()+0x2ae>
c0018006:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800a:	8d 50 01             	lea    edx,[eax+0x1]
c001800d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018011:	8a 15 a0 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031da0
c0018017:	0f b6 d2             	movzx  edx,dl
c001801a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001801e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018022:	88 82 c0 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce240],al
c0018028:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001802c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018030:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018034:	01 d0                	add    eax,edx
c0018036:	83 c0 2c             	add    eax,0x2c
c0018039:	8a 00                	mov    al,BYTE PTR [eax]
c001803b:	0f b6 d0             	movzx  edx,al
c001803e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018042:	8d 48 01             	lea    ecx,[eax+0x1]
c0018045:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018049:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001804d:	0f b6 c0             	movzx  eax,al
c0018050:	c1 e0 08             	shl    eax,0x8
c0018053:	89 d1                	mov    ecx,edx
c0018055:	09 c1                	or     ecx,eax
c0018057:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001805b:	8d 50 02             	lea    edx,[eax+0x2]
c001805e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018062:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018066:	0f b6 c0             	movzx  eax,al
c0018069:	c1 e0 10             	shl    eax,0x10
c001806c:	09 c1                	or     ecx,eax
c001806e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018072:	8d 50 03             	lea    edx,[eax+0x3]
c0018075:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018079:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001807d:	0f b6 c0             	movzx  eax,al
c0018080:	c1 e0 18             	shl    eax,0x18
c0018083:	09 c1                	or     ecx,eax
c0018085:	89 ca                	mov    edx,ecx
c0018087:	a0 a0 1d 03 c0       	mov    al,ds:0xc0031da0
c001808c:	0f b6 c0             	movzx  eax,al
c001808f:	89 14 85 e0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce220],edx
c0018096:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001809b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001809f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a3:	01 d0                	add    eax,edx
c00180a5:	83 c0 2c             	add    eax,0x2c
c00180a8:	8a 00                	mov    al,BYTE PTR [eax]
c00180aa:	0f b6 d0             	movzx  edx,al
c00180ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b1:	8d 48 01             	lea    ecx,[eax+0x1]
c00180b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180bc:	0f b6 c0             	movzx  eax,al
c00180bf:	c1 e0 08             	shl    eax,0x8
c00180c2:	89 d1                	mov    ecx,edx
c00180c4:	09 c1                	or     ecx,eax
c00180c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ca:	8d 50 02             	lea    edx,[eax+0x2]
c00180cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180d5:	0f b6 c0             	movzx  eax,al
c00180d8:	c1 e0 10             	shl    eax,0x10
c00180db:	09 c1                	or     ecx,eax
c00180dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e1:	8d 50 03             	lea    edx,[eax+0x3]
c00180e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180e8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180ec:	0f b6 c0             	movzx  eax,al
c00180ef:	c1 e0 18             	shl    eax,0x18
c00180f2:	09 c1                	or     ecx,eax
c00180f4:	89 ca                	mov    edx,ecx
c00180f6:	a0 a0 1d 03 c0       	mov    al,ds:0xc0031da0
c00180fb:	0f b6 c0             	movzx  eax,al
c00180fe:	89 14 85 60 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1a0],edx
c0018105:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001810a:	a0 a0 1d 03 c0       	mov    al,ds:0xc0031da0
c001810f:	40                   	inc    eax
c0018110:	a2 a0 1d 03 c0       	mov    ds:0xc0031da0,al
c0018115:	e9 bb 01 00 00       	jmp    c00182d5 <scanMADT()+0x469>
c001811a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001811f:	0f 85 e9 00 00 00    	jne    c001820e <scanMADT()+0x3a2>
c0018125:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018129:	8d 50 01             	lea    edx,[eax+0x1]
c001812c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018130:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018134:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018138:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001813c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018140:	8d 50 01             	lea    edx,[eax+0x1]
c0018143:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018147:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001814b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001814f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018153:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018157:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001815b:	01 d0                	add    eax,edx
c001815d:	83 c0 2c             	add    eax,0x2c
c0018160:	8a 00                	mov    al,BYTE PTR [eax]
c0018162:	0f b6 d0             	movzx  edx,al
c0018165:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018169:	8d 48 01             	lea    ecx,[eax+0x1]
c001816c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018170:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018174:	0f b6 c0             	movzx  eax,al
c0018177:	c1 e0 08             	shl    eax,0x8
c001817a:	89 d1                	mov    ecx,edx
c001817c:	09 c1                	or     ecx,eax
c001817e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018182:	8d 50 02             	lea    edx,[eax+0x2]
c0018185:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018189:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001818d:	0f b6 c0             	movzx  eax,al
c0018190:	c1 e0 10             	shl    eax,0x10
c0018193:	09 c1                	or     ecx,eax
c0018195:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018199:	8d 50 03             	lea    edx,[eax+0x3]
c001819c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181a0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181a4:	0f b6 c0             	movzx  eax,al
c00181a7:	c1 e0 18             	shl    eax,0x18
c00181aa:	09 c8                	or     eax,ecx
c00181ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181b0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00181b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181bd:	01 d0                	add    eax,edx
c00181bf:	83 c0 2c             	add    eax,0x2c
c00181c2:	8a 00                	mov    al,BYTE PTR [eax]
c00181c4:	0f b6 c0             	movzx  eax,al
c00181c7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00181ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181d2:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181d6:	0f b6 d2             	movzx  edx,dl
c00181d9:	c1 e2 08             	shl    edx,0x8
c00181dc:	09 d0                	or     eax,edx
c00181de:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181e3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181e8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181f1:	88 90 60 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd19a0],dl
c00181f7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181fc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018201:	66 89 84 12 80 1d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce280],ax
c0018209:	e9 c7 00 00 00       	jmp    c00182d5 <scanMADT()+0x469>
c001820e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018213:	0f 85 b0 00 00 00    	jne    c00182c9 <scanMADT()+0x45d>
c0018219:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001821d:	8d 50 01             	lea    edx,[eax+0x1]
c0018220:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018224:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018228:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001822c:	0f b6 c0             	movzx  eax,al
c001822f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018233:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001823b:	01 d0                	add    eax,edx
c001823d:	83 c0 2c             	add    eax,0x2c
c0018240:	8a 00                	mov    al,BYTE PTR [eax]
c0018242:	0f b6 d0             	movzx  edx,al
c0018245:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018249:	8d 48 01             	lea    ecx,[eax+0x1]
c001824c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018250:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018254:	0f b6 c0             	movzx  eax,al
c0018257:	c1 e0 08             	shl    eax,0x8
c001825a:	09 d0                	or     eax,edx
c001825c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018260:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018265:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018269:	8d 50 01             	lea    edx,[eax+0x1]
c001826c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018270:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018274:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018278:	0f b6 c0             	movzx  eax,al
c001827b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001827f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018283:	c1 e0 08             	shl    eax,0x8
c0018286:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001828a:	89 c1                	mov    ecx,eax
c001828c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018290:	c1 e0 18             	shl    eax,0x18
c0018293:	89 c3                	mov    ebx,eax
c0018295:	a1 f0 1c 03 c0       	mov    eax,ds:0xc0031cf0
c001829a:	8d 50 01             	lea    edx,[eax+0x1]
c001829d:	89 15 f0 1c 03 c0    	mov    DWORD PTR ds:0xc0031cf0,edx
c00182a3:	09 d9                	or     ecx,ebx
c00182a5:	89 ca                	mov    edx,ecx
c00182a7:	89 14 85 00 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce300],edx
c00182ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182ba:	68 8c c4 02 c0       	push   0xc002c48c
c00182bf:	e8 73 ab ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00182c4:	83 c4 10             	add    esp,0x10
c00182c7:	eb 0c                	jmp    c00182d5 <scanMADT()+0x469>
c00182c9:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00182ce:	75 05                	jne    c00182d5 <scanMADT()+0x469>
c00182d0:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00182d5:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182de:	01 d0                	add    eax,edx
c00182e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182e4:	e9 54 fc ff ff       	jmp    c0017f3d <scanMADT()+0xd1>
c00182e9:	90                   	nop
c00182ea:	eb 01                	jmp    c00182ed <scanMADT()+0x481>
c00182ec:	90                   	nop
c00182ed:	83 c4 38             	add    esp,0x38
c00182f0:	5b                   	pop    ebx
c00182f1:	c3                   	ret    

c00182f2 <ACPI::ACPI()>:
c00182f2:	83 ec 0c             	sub    esp,0xc
c00182f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182f9:	83 ec 08             	sub    esp,0x8
c00182fc:	68 ed c2 02 c0       	push   0xc002c2ed
c0018301:	50                   	push   eax
c0018302:	e8 6d c1 ff ff       	call   c0014474 <Device::Device(char const*)>
c0018307:	83 c4 10             	add    esp,0x10
c001830a:	ba 28 c5 02 c0       	mov    edx,0xc002c528
c001830f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018313:	89 10                	mov    DWORD PTR [eax],edx
c0018315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018319:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018324:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001832e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018332:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001833c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018340:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001834b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018352:	e8 15 fb ff ff       	call   c0017e6c <scanMADT()>
c0018357:	90                   	nop
c0018358:	83 c4 0c             	add    esp,0xc
c001835b:	c3                   	ret    

c001835c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001835c:	83 ec 2c             	sub    esp,0x2c
c001835f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018363:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018367:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001836b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001836f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018374:	88 d0                	mov    al,dl
c0018376:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001837a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001837f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018387:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001838b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018391:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018395:	0f 8d 97 00 00 00    	jge    c0018432 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001839b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001839f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183a3:	83 c2 2a             	add    edx,0x2a
c00183a6:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00183aa:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00183af:	75 78                	jne    c0018429 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183b9:	83 c2 2a             	add    edx,0x2a
c00183bc:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00183c0:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00183c4:	75 63                	jne    c0018429 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183c6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183cb:	74 3a                	je     c0018407 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00183cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183d5:	83 c2 2a             	add    edx,0x2a
c00183d8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183e3:	39 c2                	cmp    edx,eax
c00183e5:	74 10                	je     c00183f7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183e7:	83 ec 0c             	sub    esp,0xc
c00183ea:	68 c8 c4 02 c0       	push   0xc002c4c8
c00183ef:	e8 b1 25 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c00183f4:	83 c4 10             	add    esp,0x10
c00183f7:	83 ec 0c             	sub    esp,0xc
c00183fa:	68 f2 c2 02 c0       	push   0xc002c2f2
c00183ff:	e8 a1 25 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c0018404:	83 c4 10             	add    esp,0x10
c0018407:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001840b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001840f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018413:	83 c2 2a             	add    edx,0x2a
c0018416:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001841a:	8b 02                	mov    eax,DWORD PTR [edx]
c001841c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001841f:	89 01                	mov    DWORD PTR [ecx],eax
c0018421:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018424:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018429:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001842d:	e9 55 ff ff ff       	jmp    c0018387 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018432:	90                   	nop
c0018433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018437:	83 c4 2c             	add    esp,0x2c
c001843a:	c2 04 00             	ret    0x4
c001843d:	90                   	nop

c001843e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001843e:	83 ec 1c             	sub    esp,0x1c
c0018441:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018445:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018449:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001844d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018452:	88 c8                	mov    al,cl
c0018454:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018458:	88 d0                	mov    al,dl
c001845a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001845e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018462:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001846c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001846f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018473:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001847b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018481:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018485:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018488:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001848c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018495:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001849b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001849f:	8d 48 01             	lea    ecx,[eax+0x1]
c00184a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a6:	83 c2 2a             	add    edx,0x2a
c00184a9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00184ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184bb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184be:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184c2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00184c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ca:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184d0:	8d 50 01             	lea    edx,[eax+0x1]
c00184d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184d7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184e1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184e7:	3d 00 02 00 00       	cmp    eax,0x200
c00184ec:	75 10                	jne    c00184fe <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184ee:	83 ec 0c             	sub    esp,0xc
c00184f1:	68 01 c3 02 c0       	push   0xc002c301
c00184f6:	e8 aa 24 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c00184fb:	83 c4 10             	add    esp,0x10
c00184fe:	90                   	nop
c00184ff:	83 c4 1c             	add    esp,0x1c
c0018502:	c3                   	ret    
c0018503:	90                   	nop

c0018504 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018504:	b8 00 00 00 00       	mov    eax,0x0
c0018509:	c3                   	ret    

c001850a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001850a:	83 ec 1c             	sub    esp,0x1c
c001850d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018511:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018514:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018518:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001851d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018522:	83 ec 08             	sub    esp,0x8
c0018525:	52                   	push   edx
c0018526:	50                   	push   eax
c0018527:	e8 76 69 ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c001852c:	83 c4 10             	add    esp,0x10
c001852f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018533:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0018538:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001853d:	83 ec 04             	sub    esp,0x4
c0018540:	6a 01                	push   0x1
c0018542:	52                   	push   edx
c0018543:	50                   	push   eax
c0018544:	e8 6f 6a ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018549:	83 c4 10             	add    esp,0x10
c001854c:	90                   	nop
c001854d:	83 c4 1c             	add    esp,0x1c
c0018550:	c3                   	ret    
c0018551:	90                   	nop

c0018552 <ACPI::sleep()>:
c0018552:	83 ec 0c             	sub    esp,0xc
c0018555:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c001855a:	85 c0                	test   eax,eax
c001855c:	74 07                	je     c0018565 <ACPI::sleep()+0x13>
c001855e:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c0018563:	ff d0                	call   eax
c0018565:	90                   	nop
c0018566:	83 c4 0c             	add    esp,0xc
c0018569:	c3                   	ret    

c001856a <ACPI::open(int, int, void*)>:
c001856a:	57                   	push   edi
c001856b:	56                   	push   esi
c001856c:	53                   	push   ebx
c001856d:	81 ec 70 01 00 00    	sub    esp,0x170
c0018573:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001857a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018581:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018588:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001858f:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0018594:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001859a:	83 e0 04             	and    eax,0x4
c001859d:	84 c0                	test   al,al
c001859f:	74 53                	je     c00185f4 <ACPI::open(int, int, void*)+0x8a>
c00185a1:	a1 e8 1c 03 c0       	mov    eax,ds:0xc0031ce8
c00185a6:	83 ec 08             	sub    esp,0x8
c00185a9:	68 1e c3 02 c0       	push   0xc002c31e
c00185ae:	50                   	push   eax
c00185af:	e8 1c f8 ff ff       	call   c0017dd0 <findDataTable(unsigned char*, char*)>
c00185b4:	83 c4 10             	add    esp,0x10
c00185b7:	89 84 24 6c 01 00 00 	mov    DWORD PTR [esp+0x16c],eax
c00185be:	83 bc 24 6c 01 00 00 00 	cmp    DWORD PTR [esp+0x16c],0x0
c00185c6:	74 2c                	je     c00185f4 <ACPI::open(int, int, void*)+0x8a>
c00185c8:	83 ec 0c             	sub    esp,0xc
c00185cb:	68 23 c3 02 c0       	push   0xc002c323
c00185d0:	e8 62 a8 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00185d5:	83 c4 10             	add    esp,0x10
c00185d8:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00185df:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185e6:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00185ed:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185f4:	c7 84 24 68 01 00 00 5f 0c 00 00 	mov    DWORD PTR [esp+0x168],0xc5f
c00185ff:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0018606:	8a 00                	mov    al,BYTE PTR [eax]
c0018608:	3c 01                	cmp    al,0x1
c001860a:	75 2e                	jne    c001863a <ACPI::open(int, int, void*)+0xd0>
c001860c:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018613:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001861a:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018621:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018628:	83 ec 0c             	sub    esp,0xc
c001862b:	68 34 c3 02 c0       	push   0xc002c334
c0018630:	e8 02 a8 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0018635:	83 c4 10             	add    esp,0x10
c0018638:	eb 2b                	jmp    c0018665 <ACPI::open(int, int, void*)+0xfb>
c001863a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0018641:	8a 00                	mov    al,BYTE PTR [eax]
c0018643:	3c 02                	cmp    al,0x2
c0018645:	75 1e                	jne    c0018665 <ACPI::open(int, int, void*)+0xfb>
c0018647:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001864e:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018655:	83 ec 0c             	sub    esp,0xc
c0018658:	68 3c c3 02 c0       	push   0xc002c33c
c001865d:	e8 d5 a7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0018662:	83 c4 10             	add    esp,0x10
c0018665:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001866c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018672:	83 f0 01             	xor    eax,0x1
c0018675:	84 c0                	test   al,al
c0018677:	74 7c                	je     c00186f5 <ACPI::open(int, int, void*)+0x18b>
c0018679:	83 ec 0c             	sub    esp,0xc
c001867c:	68 44 c3 02 c0       	push   0xc002c344
c0018681:	e8 b1 a7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0018686:	83 c4 10             	add    esp,0x10
c0018689:	e8 c2 7a fe ff       	call   c0000150 <manualPCIProbe>
c001868e:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0018695:	83 bc 24 64 01 00 00 01 	cmp    DWORD PTR [esp+0x164],0x1
c001869d:	75 2e                	jne    c00186cd <ACPI::open(int, int, void*)+0x163>
c001869f:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00186a6:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186ad:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00186b4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186bb:	83 ec 0c             	sub    esp,0xc
c00186be:	68 52 c3 02 c0       	push   0xc002c352
c00186c3:	e8 6f a7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00186c8:	83 c4 10             	add    esp,0x10
c00186cb:	eb 28                	jmp    c00186f5 <ACPI::open(int, int, void*)+0x18b>
c00186cd:	83 bc 24 64 01 00 00 02 	cmp    DWORD PTR [esp+0x164],0x2
c00186d5:	75 1e                	jne    c00186f5 <ACPI::open(int, int, void*)+0x18b>
c00186d7:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00186de:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186e5:	83 ec 0c             	sub    esp,0xc
c00186e8:	68 5c c3 02 c0       	push   0xc002c35c
c00186ed:	e8 45 a7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00186f2:	83 c4 10             	add    esp,0x10
c00186f5:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00186fc:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018702:	84 c0                	test   al,al
c0018704:	74 16                	je     c001871c <ACPI::open(int, int, void*)+0x1b2>
c0018706:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001870d:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018713:	83 f0 01             	xor    eax,0x1
c0018716:	0f b6 c0             	movzx  eax,al
c0018719:	40                   	inc    eax
c001871a:	eb 05                	jmp    c0018721 <ACPI::open(int, int, void*)+0x1b7>
c001871c:	b8 00 00 00 00       	mov    eax,0x0
c0018721:	83 ec 08             	sub    esp,0x8
c0018724:	50                   	push   eax
c0018725:	68 66 c3 02 c0       	push   0xc002c366
c001872a:	e8 08 a7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001872f:	83 c4 10             	add    esp,0x10
c0018732:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018739:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001873f:	84 c0                	test   al,al
c0018741:	74 7c                	je     c00187bf <ACPI::open(int, int, void*)+0x255>
c0018743:	c7 84 24 44 01 00 00 58 01 00 00 	mov    DWORD PTR [esp+0x144],0x158
c001874e:	83 ec 0c             	sub    esp,0xc
c0018751:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0018758:	e8 2f 71 ff ff       	call   c000f88c <malloc>
c001875d:	83 c4 10             	add    esp,0x10
c0018760:	89 c3                	mov    ebx,eax
c0018762:	83 ec 0c             	sub    esp,0xc
c0018765:	53                   	push   ebx
c0018766:	e8 97 ab 00 00       	call   c0023302 <PCI::PCI()>
c001876b:	83 c4 10             	add    esp,0x10
c001876e:	89 9c 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],ebx
c0018775:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001877c:	83 ec 08             	sub    esp,0x8
c001877f:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018786:	50                   	push   eax
c0018787:	e8 e4 ba ff ff       	call   c0014270 <Device::addChild(Device*)>
c001878c:	83 c4 10             	add    esp,0x10
c001878f:	8b 84 24 60 01 00 00 	mov    eax,DWORD PTR [esp+0x160]
c0018796:	8b 00                	mov    eax,DWORD PTR [eax]
c0018798:	83 c0 08             	add    eax,0x8
c001879b:	8b 00                	mov    eax,DWORD PTR [eax]
c001879d:	6a 00                	push   0x0
c001879f:	6a 00                	push   0x0
c00187a1:	6a 00                	push   0x0
c00187a3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00187aa:	ff d0                	call   eax
c00187ac:	83 c4 10             	add    esp,0x10
c00187af:	83 ec 0c             	sub    esp,0xc
c00187b2:	68 6f c3 02 c0       	push   0xc002c36f
c00187b7:	e8 7b a6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00187bc:	83 c4 10             	add    esp,0x10
c00187bf:	83 ec 0c             	sub    esp,0xc
c00187c2:	68 7a c3 02 c0       	push   0xc002c37a
c00187c7:	e8 36 4b 00 00       	call   c001d302 <Thr::loadKernelSymbolTable(char const*)>
c00187cc:	83 c4 10             	add    esp,0x10
c00187cf:	83 ec 0c             	sub    esp,0xc
c00187d2:	6a 0c                	push   0xc
c00187d4:	e8 97 94 ff ff       	call   c0011c70 <Virt::setupPageSwapping(int)>
c00187d9:	83 c4 10             	add    esp,0x10
c00187dc:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00187e3:	83 ec 08             	sub    esp,0x8
c00187e6:	6a 12                	push   0x12
c00187e8:	50                   	push   eax
c00187e9:	e8 06 be ff ff       	call   c00145f4 <getDevicesOfType(DeviceType)>
c00187ee:	83 c4 0c             	add    esp,0xc
c00187f1:	83 ec 0c             	sub    esp,0xc
c00187f4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00187fb:	50                   	push   eax
c00187fc:	e8 6f 11 01 00       	call   c0029970 <LinkedList<Device>::isEmpty()>
c0018801:	83 c4 10             	add    esp,0x10
c0018804:	83 f0 01             	xor    eax,0x1
c0018807:	84 c0                	test   al,al
c0018809:	0f 84 c7 01 00 00    	je     c00189d6 <ACPI::open(int, int, void*)+0x46c>
c001880f:	83 ec 0c             	sub    esp,0xc
c0018812:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018819:	50                   	push   eax
c001881a:	e8 6d 11 01 00       	call   c002998c <LinkedList<Device>::getFirstElement()>
c001881f:	83 c4 10             	add    esp,0x10
c0018822:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018829:	83 ec 0c             	sub    esp,0xc
c001882c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018833:	50                   	push   eax
c0018834:	e8 5b 11 01 00       	call   c0029994 <LinkedList<Device>::removeFirst()>
c0018839:	83 c4 10             	add    esp,0x10
c001883c:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0018843:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001884a:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018851:	83 ec 0c             	sub    esp,0xc
c0018854:	50                   	push   eax
c0018855:	e8 16 bd ff ff       	call   c0014570 <Device::getName()>
c001885a:	83 c4 10             	add    esp,0x10
c001885d:	83 ec 08             	sub    esp,0x8
c0018860:	50                   	push   eax
c0018861:	68 f8 c4 02 c0       	push   0xc002c4f8
c0018866:	e8 cc a5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001886b:	83 c4 10             	add    esp,0x10
c001886e:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0018875:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018879:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001887f:	ba 09 00 00 00       	mov    edx,0x9
c0018884:	fc                   	cld    
c0018885:	89 c7                	mov    edi,eax
c0018887:	89 de                	mov    esi,ebx
c0018889:	89 d1                	mov    ecx,edx
c001888b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001888d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018891:	0f b6 c0             	movzx  eax,al
c0018894:	83 ec 08             	sub    esp,0x8
c0018897:	50                   	push   eax
c0018898:	68 98 c3 02 c0       	push   0xc002c398
c001889d:	e8 95 a5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00188a2:	83 c4 10             	add    esp,0x10
c00188a5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00188a9:	0f b6 c0             	movzx  eax,al
c00188ac:	83 ec 08             	sub    esp,0x8
c00188af:	50                   	push   eax
c00188b0:	68 aa c3 02 c0       	push   0xc002c3aa
c00188b5:	e8 7d a5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00188ba:	83 c4 10             	add    esp,0x10
c00188bd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00188c2:	0f b7 c0             	movzx  eax,ax
c00188c5:	83 ec 08             	sub    esp,0x8
c00188c8:	50                   	push   eax
c00188c9:	68 bc c3 02 c0       	push   0xc002c3bc
c00188ce:	e8 64 a5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00188d3:	83 c4 10             	add    esp,0x10
c00188d6:	83 ec 08             	sub    esp,0x8
c00188d9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00188dd:	50                   	push   eax
c00188de:	83 ec 24             	sub    esp,0x24
c00188e1:	89 e0                	mov    eax,esp
c00188e3:	89 c3                	mov    ebx,eax
c00188e5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00188e9:	ba 09 00 00 00       	mov    edx,0x9
c00188ee:	89 df                	mov    edi,ebx
c00188f0:	89 c6                	mov    esi,eax
c00188f2:	89 d1                	mov    ecx,edx
c00188f4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188f6:	e8 93 ad 00 00       	call   c002368e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00188fb:	83 c4 30             	add    esp,0x30
c00188fe:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018905:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001890d:	0f 84 de fe ff ff    	je     c00187f1 <ACPI::open(int, int, void*)+0x287>
c0018913:	83 ec 08             	sub    esp,0x8
c0018916:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001891d:	68 ce c3 02 c0       	push   0xc002c3ce
c0018922:	e8 10 a5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0018927:	83 c4 10             	add    esp,0x10
c001892a:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018935:	83 ec 0c             	sub    esp,0xc
c0018938:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001893f:	e8 48 6f ff ff       	call   c000f88c <malloc>
c0018944:	83 c4 10             	add    esp,0x10
c0018947:	89 c3                	mov    ebx,eax
c0018949:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001894e:	83 ec 04             	sub    esp,0x4
c0018951:	50                   	push   eax
c0018952:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018959:	53                   	push   ebx
c001895a:	e8 37 aa ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001895f:	83 c4 10             	add    esp,0x10
c0018962:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0018969:	83 ec 0c             	sub    esp,0xc
c001896c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018973:	e8 f0 ac ff ff       	call   c0013668 <File::exists()>
c0018978:	83 c4 10             	add    esp,0x10
c001897b:	84 c0                	test   al,al
c001897d:	74 27                	je     c00189a6 <ACPI::open(int, int, void*)+0x43c>
c001897f:	83 ec 08             	sub    esp,0x8
c0018982:	6a 01                	push   0x1
c0018984:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001898b:	e8 e9 53 00 00       	call   c001dd79 <Thr::loadDLL(char const*, bool)>
c0018990:	83 c4 10             	add    esp,0x10
c0018993:	83 ec 08             	sub    esp,0x8
c0018996:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001899d:	50                   	push   eax
c001899e:	e8 01 56 00 00       	call   c001dfa4 <Thr::executeDLL(unsigned long, void*)>
c00189a3:	83 c4 10             	add    esp,0x10
c00189a6:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00189ae:	0f 84 3d fe ff ff    	je     c00187f1 <ACPI::open(int, int, void*)+0x287>
c00189b4:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00189bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00189bd:	83 c0 08             	add    eax,0x8
c00189c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00189c2:	83 ec 0c             	sub    esp,0xc
c00189c5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00189cc:	ff d0                	call   eax
c00189ce:	83 c4 10             	add    esp,0x10
c00189d1:	e9 1b fe ff ff       	jmp    c00187f1 <ACPI::open(int, int, void*)+0x287>
c00189d6:	83 ec 0c             	sub    esp,0xc
c00189d9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00189e0:	50                   	push   eax
c00189e1:	e8 88 0f 01 00       	call   c002996e <LinkedList<Device>::~LinkedList()>
c00189e6:	83 c4 10             	add    esp,0x10
c00189e9:	8b 1d 08 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f408
c00189ef:	83 ec 08             	sub    esp,0x8
c00189f2:	6a 01                	push   0x1
c00189f4:	68 da c3 02 c0       	push   0xc002c3da
c00189f9:	e8 7b 53 00 00       	call   c001dd79 <Thr::loadDLL(char const*, bool)>
c00189fe:	83 c4 10             	add    esp,0x10
c0018a01:	83 ec 08             	sub    esp,0x8
c0018a04:	53                   	push   ebx
c0018a05:	50                   	push   eax
c0018a06:	e8 99 55 00 00       	call   c001dfa4 <Thr::executeDLL(unsigned long, void*)>
c0018a0b:	83 c4 10             	add    esp,0x10
c0018a0e:	8b 1d 08 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f408
c0018a14:	83 ec 08             	sub    esp,0x8
c0018a17:	6a 01                	push   0x1
c0018a19:	68 f7 c3 02 c0       	push   0xc002c3f7
c0018a1e:	e8 56 53 00 00       	call   c001dd79 <Thr::loadDLL(char const*, bool)>
c0018a23:	83 c4 10             	add    esp,0x10
c0018a26:	83 ec 08             	sub    esp,0x8
c0018a29:	53                   	push   ebx
c0018a2a:	50                   	push   eax
c0018a2b:	e8 74 55 00 00       	call   c001dfa4 <Thr::executeDLL(unsigned long, void*)>
c0018a30:	83 c4 10             	add    esp,0x10
c0018a33:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0018a38:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018a3e:	83 e0 04             	and    eax,0x4
c0018a41:	84 c0                	test   al,al
c0018a43:	0f 84 fd 00 00 00    	je     c0018b46 <ACPI::open(int, int, void*)+0x5dc>
c0018a49:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018a54:	83 ec 0c             	sub    esp,0xc
c0018a57:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018a5e:	e8 29 6e ff ff       	call   c000f88c <malloc>
c0018a63:	83 c4 10             	add    esp,0x10
c0018a66:	89 c3                	mov    ebx,eax
c0018a68:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0018a6d:	83 ec 04             	sub    esp,0x4
c0018a70:	50                   	push   eax
c0018a71:	68 14 c4 02 c0       	push   0xc002c414
c0018a76:	53                   	push   ebx
c0018a77:	e8 1a a9 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c0018a7c:	83 c4 10             	add    esp,0x10
c0018a7f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018a86:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018a8e:	74 1a                	je     c0018aaa <ACPI::open(int, int, void*)+0x540>
c0018a90:	83 ec 0c             	sub    esp,0xc
c0018a93:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018a9a:	e8 c9 ab ff ff       	call   c0013668 <File::exists()>
c0018a9f:	83 c4 10             	add    esp,0x10
c0018aa2:	84 c0                	test   al,al
c0018aa4:	74 04                	je     c0018aaa <ACPI::open(int, int, void*)+0x540>
c0018aa6:	b0 01                	mov    al,0x1
c0018aa8:	eb 02                	jmp    c0018aac <ACPI::open(int, int, void*)+0x542>
c0018aaa:	b0 00                	mov    al,0x0
c0018aac:	84 c0                	test   al,al
c0018aae:	74 25                	je     c0018ad5 <ACPI::open(int, int, void*)+0x56b>
c0018ab0:	83 ec 08             	sub    esp,0x8
c0018ab3:	6a 01                	push   0x1
c0018ab5:	68 14 c4 02 c0       	push   0xc002c414
c0018aba:	e8 ba 52 00 00       	call   c001dd79 <Thr::loadDLL(char const*, bool)>
c0018abf:	83 c4 10             	add    esp,0x10
c0018ac2:	83 ec 08             	sub    esp,0x8
c0018ac5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0018acc:	50                   	push   eax
c0018acd:	e8 d2 54 00 00       	call   c001dfa4 <Thr::executeDLL(unsigned long, void*)>
c0018ad2:	83 c4 10             	add    esp,0x10
c0018ad5:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018add:	74 27                	je     c0018b06 <ACPI::open(int, int, void*)+0x59c>
c0018adf:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018ae7:	74 1d                	je     c0018b06 <ACPI::open(int, int, void*)+0x59c>
c0018ae9:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018af2:	83 c0 08             	add    eax,0x8
c0018af5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018af7:	83 ec 0c             	sub    esp,0xc
c0018afa:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018b01:	ff d0                	call   eax
c0018b03:	83 c4 10             	add    esp,0x10
c0018b06:	a1 e8 1c 03 c0       	mov    eax,ds:0xc0031ce8
c0018b0b:	83 ec 08             	sub    esp,0x8
c0018b0e:	68 31 c4 02 c0       	push   0xc002c431
c0018b13:	50                   	push   eax
c0018b14:	e8 b7 f2 ff ff       	call   c0017dd0 <findDataTable(unsigned char*, char*)>
c0018b19:	83 c4 10             	add    esp,0x10
c0018b1c:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0018b23:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018b2b:	74 19                	je     c0018b46 <ACPI::open(int, int, void*)+0x5dc>
c0018b2d:	83 ec 08             	sub    esp,0x8
c0018b30:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0018b37:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0018b3e:	e8 c7 f9 ff ff       	call   c001850a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018b43:	83 c4 10             	add    esp,0x10
c0018b46:	b8 00 00 00 00       	mov    eax,0x0
c0018b4b:	81 c4 70 01 00 00    	add    esp,0x170
c0018b51:	5b                   	pop    ebx
c0018b52:	5e                   	pop    esi
c0018b53:	5f                   	pop    edi
c0018b54:	c3                   	ret    
c0018b55:	90                   	nop

c0018b56 <CPU::close(int, int, void*)>:
c0018b56:	31 c0                	xor    eax,eax
c0018b58:	c3                   	ret    
c0018b59:	90                   	nop

c0018b5a <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018b5a:	55                   	push   ebp
c0018b5b:	57                   	push   edi
c0018b5c:	56                   	push   esi
c0018b5d:	53                   	push   ebx
c0018b5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018b62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018b66:	89 ce                	mov    esi,ecx
c0018b68:	89 d5                	mov    ebp,edx
c0018b6a:	80 f9 04             	cmp    cl,0x4
c0018b6d:	75 28                	jne    c0018b97 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018b6f:	8d 42 f9             	lea    eax,[edx-0x7]
c0018b72:	3c 03                	cmp    al,0x3
c0018b74:	0f 86 63 01 00 00    	jbe    c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018b7a:	80 fa 03             	cmp    dl,0x3
c0018b7d:	0f 84 5a 01 00 00    	je     c0018cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018b83:	8d 7a f2             	lea    edi,[edx-0xe]
c0018b86:	b8 30 e8 02 c0       	mov    eax,0xc002e830
c0018b8b:	89 fb                	mov    ebx,edi
c0018b8d:	80 fb 01             	cmp    bl,0x1
c0018b90:	77 4e                	ja     c0018be0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018b92:	e9 52 01 00 00       	jmp    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b97:	80 f9 05             	cmp    cl,0x5
c0018b9a:	75 4d                	jne    c0018be9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018b9c:	b8 40 e8 02 c0       	mov    eax,0xc002e840
c0018ba1:	80 fa 03             	cmp    dl,0x3
c0018ba4:	0f 86 3f 01 00 00    	jbe    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018baa:	8d 7a fa             	lea    edi,[edx-0x6]
c0018bad:	b8 50 e8 02 c0       	mov    eax,0xc002e850
c0018bb2:	89 fb                	mov    ebx,edi
c0018bb4:	80 fb 01             	cmp    bl,0x1
c0018bb7:	0f 86 2c 01 00 00    	jbe    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bbd:	b8 60 e8 02 c0       	mov    eax,0xc002e860
c0018bc2:	80 fa 08             	cmp    dl,0x8
c0018bc5:	0f 84 1e 01 00 00    	je     c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bcb:	89 d7                	mov    edi,edx
c0018bcd:	b8 70 e8 02 c0       	mov    eax,0xc002e870
c0018bd2:	83 e7 fb             	and    edi,0xfffffffb
c0018bd5:	89 fb                	mov    ebx,edi
c0018bd7:	80 fb 09             	cmp    bl,0x9
c0018bda:	0f 84 09 01 00 00    	je     c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018be0:	31 c0                	xor    eax,eax
c0018be2:	89 eb                	mov    ebx,ebp
c0018be4:	0f b6 fb             	movzx  edi,bl
c0018be7:	eb 30                	jmp    c0018c19 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018be9:	31 c0                	xor    eax,eax
c0018beb:	80 f9 06             	cmp    cl,0x6
c0018bee:	75 f2                	jne    c0018be2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018bf0:	80 fa 0a             	cmp    dl,0xa
c0018bf3:	77 ed                	ja     c0018be2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018bf5:	bf de 05 00 00       	mov    edi,0x5de
c0018bfa:	0f a3 d7             	bt     edi,edx
c0018bfd:	73 e3                	jae    c0018be2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018bff:	b8 80 e8 02 c0       	mov    eax,0xc002e880
c0018c04:	e9 e0 00 00 00       	jmp    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c09:	39 c7                	cmp    edi,eax
c0018c0b:	0f 84 d3 00 00 00    	je     c0018ce4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018c11:	40                   	inc    eax
c0018c12:	3d d0 00 00 00       	cmp    eax,0xd0
c0018c17:	74 09                	je     c0018c22 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018c19:	89 f3                	mov    ebx,esi
c0018c1b:	80 fb 0f             	cmp    bl,0xf
c0018c1e:	75 f1                	jne    c0018c11 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018c20:	eb e7                	jmp    c0018c09 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018c22:	80 f9 10             	cmp    cl,0x10
c0018c25:	75 14                	jne    c0018c3b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018c27:	8d 42 fc             	lea    eax,[edx-0x4]
c0018c2a:	83 e0 fb             	and    eax,0xfffffffb
c0018c2d:	3c 02                	cmp    al,0x2
c0018c2f:	76 34                	jbe    c0018c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018c31:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018c36:	80 fa 02             	cmp    dl,0x2
c0018c39:	eb 24                	jmp    c0018c5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018c3b:	80 f9 11             	cmp    cl,0x11
c0018c3e:	75 13                	jne    c0018c53 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018c40:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018c45:	80 fa 03             	cmp    dl,0x3
c0018c48:	0f 85 9b 00 00 00    	jne    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c4e:	e9 91 00 00 00       	jmp    c0018ce4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018c53:	80 f9 12             	cmp    cl,0x12
c0018c56:	75 14                	jne    c0018c6c <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018c58:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018c5d:	fe ca                	dec    dl
c0018c5f:	0f 85 84 00 00 00    	jne    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c65:	b8 a0 e8 02 c0       	mov    eax,0xc002e8a0
c0018c6a:	eb 7d                	jmp    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c6c:	80 f9 14             	cmp    cl,0x14
c0018c6f:	75 12                	jne    c0018c83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018c71:	4a                   	dec    edx
c0018c72:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018c77:	80 fa 01             	cmp    dl,0x1
c0018c7a:	77 6d                	ja     c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c7c:	b8 b0 e8 02 c0       	mov    eax,0xc002e8b0
c0018c81:	eb 66                	jmp    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c83:	80 f9 15             	cmp    cl,0x15
c0018c86:	75 31                	jne    c0018cb9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018c88:	b8 c0 e8 02 c0       	mov    eax,0xc002e8c0
c0018c8d:	80 fa 01             	cmp    dl,0x1
c0018c90:	74 57                	je     c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c92:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018c97:	80 fa 13             	cmp    dl,0x13
c0018c9a:	76 0c                	jbe    c0018ca8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018c9c:	80 fa 30             	cmp    dl,0x30
c0018c9f:	75 48                	jne    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ca1:	b8 e0 e8 02 c0       	mov    eax,0xc002e8e0
c0018ca6:	eb 41                	jmp    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ca8:	b9 04 00 09 00       	mov    ecx,0x90004
c0018cad:	0f a3 d1             	bt     ecx,edx
c0018cb0:	73 37                	jae    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cb2:	b8 d0 e8 02 c0       	mov    eax,0xc002e8d0
c0018cb7:	eb 30                	jmp    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cb9:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018cbe:	80 f9 16             	cmp    cl,0x16
c0018cc1:	75 26                	jne    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cc3:	b8 f0 e8 02 c0       	mov    eax,0xc002e8f0
c0018cc8:	84 d2                	test   dl,dl
c0018cca:	74 1d                	je     c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ccc:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018cd1:	80 fa 30             	cmp    dl,0x30
c0018cd4:	75 13                	jne    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cd6:	b8 00 e9 02 c0       	mov    eax,0xc002e900
c0018cdb:	eb 0c                	jmp    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018cdd:	b8 20 e8 02 c0       	mov    eax,0xc002e820
c0018ce2:	eb 05                	jmp    c0018ce9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ce4:	b8 90 e8 02 c0       	mov    eax,0xc002e890
c0018ce9:	5b                   	pop    ebx
c0018cea:	5e                   	pop    esi
c0018ceb:	5f                   	pop    edi
c0018cec:	5d                   	pop    ebp
c0018ced:	c3                   	ret    

c0018cee <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018cee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cf6:	80 f9 04             	cmp    cl,0x4
c0018cf9:	75 6b                	jne    c0018d66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018cfb:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018d00:	80 fa 01             	cmp    dl,0x1
c0018d03:	0f 86 92 02 00 00    	jbe    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d09:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c0018d0e:	80 fa 02             	cmp    dl,0x2
c0018d11:	0f 84 84 02 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d17:	b8 a0 e6 02 c0       	mov    eax,0xc002e6a0
c0018d1c:	80 fa 03             	cmp    dl,0x3
c0018d1f:	0f 84 76 02 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d25:	b8 b0 e6 02 c0       	mov    eax,0xc002e6b0
c0018d2a:	80 fa 04             	cmp    dl,0x4
c0018d2d:	0f 84 68 02 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d33:	b8 c0 e6 02 c0       	mov    eax,0xc002e6c0
c0018d38:	80 fa 05             	cmp    dl,0x5
c0018d3b:	0f 84 5a 02 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d41:	b8 a0 e6 02 c0       	mov    eax,0xc002e6a0
c0018d46:	80 fa 07             	cmp    dl,0x7
c0018d49:	0f 84 4c 02 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d4f:	83 ea 08             	sub    edx,0x8
c0018d52:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018d57:	80 fa 01             	cmp    dl,0x1
c0018d5a:	0f 87 3b 02 00 00    	ja     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d60:	b8 d0 e6 02 c0       	mov    eax,0xc002e6d0
c0018d65:	c3                   	ret    
c0018d66:	80 f9 05             	cmp    cl,0x5
c0018d69:	75 45                	jne    c0018db0 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018d6b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018d6e:	b8 e0 e6 02 c0       	mov    eax,0xc002e6e0
c0018d73:	80 f9 02             	cmp    cl,0x2
c0018d76:	0f 86 1f 02 00 00    	jbe    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d7c:	80 fa 04             	cmp    dl,0x4
c0018d7f:	0f 84 f3 01 00 00    	je     c0018f78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018d85:	80 fa 07             	cmp    dl,0x7
c0018d88:	0f 84 0d 02 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d8e:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c0018d93:	80 fa 08             	cmp    dl,0x8
c0018d96:	0f 84 ff 01 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d9c:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018da1:	80 fa 09             	cmp    dl,0x9
c0018da4:	0f 85 f1 01 00 00    	jne    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018daa:	b8 00 e7 02 c0       	mov    eax,0xc002e700
c0018daf:	c3                   	ret    
c0018db0:	80 f9 06             	cmp    cl,0x6
c0018db3:	0f 85 85 01 00 00    	jne    c0018f3e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018db9:	b8 10 e7 02 c0       	mov    eax,0xc002e710
c0018dbe:	80 fa 01             	cmp    dl,0x1
c0018dc1:	0f 84 d4 01 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc7:	8d 42 fb             	lea    eax,[edx-0x5]
c0018dca:	3c 01                	cmp    al,0x1
c0018dcc:	0f 86 ac 01 00 00    	jbe    c0018f7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018dd2:	80 fa 03             	cmp    dl,0x3
c0018dd5:	0f 84 a3 01 00 00    	je     c0018f7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ddb:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018dde:	b8 30 e7 02 c0       	mov    eax,0xc002e730
c0018de3:	80 f9 01             	cmp    cl,0x1
c0018de6:	0f 86 af 01 00 00    	jbe    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dec:	80 fa 09             	cmp    dl,0x9
c0018def:	0f 84 8f 01 00 00    	je     c0018f84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018df5:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018df8:	80 f9 01             	cmp    cl,0x1
c0018dfb:	0f 86 9a 01 00 00    	jbe    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e01:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c0018e06:	80 fa 0d             	cmp    dl,0xd
c0018e09:	0f 84 8c 01 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e0f:	b8 50 e7 02 c0       	mov    eax,0xc002e750
c0018e14:	80 fa 0e             	cmp    dl,0xe
c0018e17:	0f 84 7e 01 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e1d:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c0018e22:	80 fa 0f             	cmp    dl,0xf
c0018e25:	0f 84 70 01 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e2b:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c0018e30:	80 fa 15             	cmp    dl,0x15
c0018e33:	0f 84 62 01 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e39:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018e3c:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c0018e41:	80 f9 01             	cmp    cl,0x1
c0018e44:	0f 86 51 01 00 00    	jbe    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e4a:	80 fa 1a             	cmp    dl,0x1a
c0018e4d:	0f 84 37 01 00 00    	je     c0018f8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018e53:	80 fa 1c             	cmp    dl,0x1c
c0018e56:	0f 84 34 01 00 00    	je     c0018f90 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018e5c:	80 fa 1d             	cmp    dl,0x1d
c0018e5f:	0f 84 36 01 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e65:	b8 90 e7 02 c0       	mov    eax,0xc002e790
c0018e6a:	80 fa 25             	cmp    dl,0x25
c0018e6d:	0f 84 28 01 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e73:	8d 4a da             	lea    ecx,[edx-0x26]
c0018e76:	b8 80 e7 02 c0       	mov    eax,0xc002e780
c0018e7b:	80 f9 01             	cmp    cl,0x1
c0018e7e:	0f 86 17 01 00 00    	jbe    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e84:	b8 a0 e7 02 c0       	mov    eax,0xc002e7a0
c0018e89:	80 fa 2a             	cmp    dl,0x2a
c0018e8c:	0f 84 09 01 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e92:	b8 90 e7 02 c0       	mov    eax,0xc002e790
c0018e97:	80 fa 2c             	cmp    dl,0x2c
c0018e9a:	0f 84 fb 00 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ea0:	b8 a0 e7 02 c0       	mov    eax,0xc002e7a0
c0018ea5:	80 fa 2d             	cmp    dl,0x2d
c0018ea8:	0f 84 ed 00 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018eae:	b8 70 e7 02 c0       	mov    eax,0xc002e770
c0018eb3:	80 fa 2e             	cmp    dl,0x2e
c0018eb6:	0f 84 df 00 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ebc:	b8 90 e7 02 c0       	mov    eax,0xc002e790
c0018ec1:	80 fa 2f             	cmp    dl,0x2f
c0018ec4:	0f 84 d1 00 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018eca:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018ecd:	b8 80 e7 02 c0       	mov    eax,0xc002e780
c0018ed2:	80 f9 01             	cmp    cl,0x1
c0018ed5:	0f 86 c0 00 00 00    	jbe    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018edb:	b8 b0 e7 02 c0       	mov    eax,0xc002e7b0
c0018ee0:	80 fa 37             	cmp    dl,0x37
c0018ee3:	0f 84 b2 00 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ee9:	b8 c0 e7 02 c0       	mov    eax,0xc002e7c0
c0018eee:	80 fa 3a             	cmp    dl,0x3a
c0018ef1:	0f 84 a4 00 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ef7:	b8 d0 e7 02 c0       	mov    eax,0xc002e7d0
c0018efc:	80 fa 3c             	cmp    dl,0x3c
c0018eff:	0f 84 96 00 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f05:	b8 e0 e7 02 c0       	mov    eax,0xc002e7e0
c0018f0a:	80 fa 3d             	cmp    dl,0x3d
c0018f0d:	0f 84 88 00 00 00    	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f13:	b8 c0 e7 02 c0       	mov    eax,0xc002e7c0
c0018f18:	80 fa 3e             	cmp    dl,0x3e
c0018f1b:	74 7e                	je     c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f1d:	8d 42 bb             	lea    eax,[edx-0x45]
c0018f20:	3c 01                	cmp    al,0x1
c0018f22:	76 72                	jbe    c0018f96 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018f24:	80 fa 3f             	cmp    dl,0x3f
c0018f27:	74 6d                	je     c0018f96 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018f29:	80 fa 4a             	cmp    dl,0x4a
c0018f2c:	74 0a                	je     c0018f38 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018f2e:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018f33:	80 fa 4d             	cmp    dl,0x4d
c0018f36:	75 63                	jne    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f38:	b8 b0 e7 02 c0       	mov    eax,0xc002e7b0
c0018f3d:	c3                   	ret    
c0018f3e:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018f43:	80 f9 0b             	cmp    cl,0xb
c0018f46:	75 0a                	jne    c0018f52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018f48:	fe ca                	dec    dl
c0018f4a:	75 4f                	jne    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f4c:	b8 f0 e7 02 c0       	mov    eax,0xc002e7f0
c0018f51:	c3                   	ret    
c0018f52:	80 f9 0f             	cmp    cl,0xf
c0018f55:	75 44                	jne    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f57:	b8 00 e8 02 c0       	mov    eax,0xc002e800
c0018f5c:	80 fa 02             	cmp    dl,0x2
c0018f5f:	76 3a                	jbe    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f61:	8d 42 fd             	lea    eax,[edx-0x3]
c0018f64:	3c 01                	cmp    al,0x1
c0018f66:	76 0a                	jbe    c0018f72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018f68:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018f6d:	80 fa 06             	cmp    dl,0x6
c0018f70:	75 29                	jne    c0018f9b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018f72:	b8 10 e8 02 c0       	mov    eax,0xc002e810
c0018f77:	c3                   	ret    
c0018f78:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c0018f7d:	c3                   	ret    
c0018f7e:	b8 20 e7 02 c0       	mov    eax,0xc002e720
c0018f83:	c3                   	ret    
c0018f84:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c0018f89:	c3                   	ret    
c0018f8a:	b8 70 e7 02 c0       	mov    eax,0xc002e770
c0018f8f:	c3                   	ret    
c0018f90:	b8 80 e7 02 c0       	mov    eax,0xc002e780
c0018f95:	c3                   	ret    
c0018f96:	b8 d0 e7 02 c0       	mov    eax,0xc002e7d0
c0018f9b:	c3                   	ret    

c0018f9c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018f9c:	60                   	pusha  
c0018f9d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018fa1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fa5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018fa9:	9c                   	pushf  
c0018faa:	fa                   	cli    
c0018fab:	0f 09                	wbinvd 
c0018fad:	0f 30                	wrmsr  
c0018faf:	9d                   	popf   
c0018fb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fb4:	89 02                	mov    DWORD PTR [edx],eax
c0018fb6:	61                   	popa   
c0018fb7:	c3                   	ret    

c0018fb8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018fb8:	60                   	pusha  
c0018fb9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018fbd:	9c                   	pushf  
c0018fbe:	fa                   	cli    
c0018fbf:	0f 09                	wbinvd 
c0018fc1:	31 c0                	xor    eax,eax
c0018fc3:	31 d2                	xor    edx,edx
c0018fc5:	0f 32                	rdmsr  
c0018fc7:	9d                   	popf   
c0018fc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018fcc:	89 02                	mov    DWORD PTR [edx],eax
c0018fce:	61                   	popa   
c0018fcf:	c3                   	ret    

c0018fd0 <CPU::AMD_K6_writeback(int, int, int)>:
c0018fd0:	56                   	push   esi
c0018fd1:	53                   	push   ebx
c0018fd2:	83 ec 10             	sub    esp,0x10
c0018fd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018fd9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018fde:	75 5d                	jne    c001903d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018fe0:	83 f8 08             	cmp    eax,0x8
c0018fe3:	75 09                	jne    c0018fee <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018fe5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018fea:	7e 13                	jle    c0018fff <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018fec:	eb 30                	jmp    c001901e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018fee:	83 f8 06             	cmp    eax,0x6
c0018ff1:	7c 4a                	jl     c001903d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ff3:	83 f8 07             	cmp    eax,0x7
c0018ff6:	7e 07                	jle    c0018fff <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ff8:	83 f8 09             	cmp    eax,0x9
c0018ffb:	74 21                	je     c001901e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ffd:	eb 3e                	jmp    c001903d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018fff:	89 e6                	mov    esi,esp
c0019001:	8b 1d 48 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f448
c0019007:	56                   	push   esi
c0019008:	c1 eb 15             	shr    ebx,0x15
c001900b:	68 82 00 00 c0       	push   0xc0000082
c0019010:	83 e3 7e             	and    ebx,0x7e
c0019013:	e8 a0 ff ff ff       	call   c0018fb8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0019018:	56                   	push   esi
c0019019:	6a 00                	push   0x0
c001901b:	53                   	push   ebx
c001901c:	eb 12                	jmp    c0019030 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001901e:	89 e3                	mov    ebx,esp
c0019020:	53                   	push   ebx
c0019021:	68 82 00 00 c0       	push   0xc0000082
c0019026:	e8 8d ff ff ff       	call   c0018fb8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001902b:	53                   	push   ebx
c001902c:	6a 00                	push   0x0
c001902e:	6a 00                	push   0x0
c0019030:	68 82 00 00 c0       	push   0xc0000082
c0019035:	e8 62 ff ff ff       	call   c0018f9c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001903a:	83 c4 18             	add    esp,0x18
c001903d:	83 c4 10             	add    esp,0x10
c0019040:	5b                   	pop    ebx
c0019041:	5e                   	pop    esi
c0019042:	c3                   	ret    
c0019043:	90                   	nop

c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019044:	55                   	push   ebp
c0019045:	57                   	push   edi
c0019046:	56                   	push   esi
c0019047:	53                   	push   ebx
c0019048:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001904c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019050:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019054:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019058:	39 05 20 e9 02 c0    	cmp    DWORD PTR ds:0xc002e920,eax
c001905e:	75 23                	jne    c0019083 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0019060:	a1 4c 1f 03 c0       	mov    eax,ds:0xc0031f4c
c0019065:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019069:	89 06                	mov    DWORD PTR [esi],eax
c001906b:	a1 48 1f 03 c0       	mov    eax,ds:0xc0031f48
c0019070:	89 07                	mov    DWORD PTR [edi],eax
c0019072:	a1 44 1f 03 c0       	mov    eax,ds:0xc0031f44
c0019077:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001907a:	a1 40 1f 03 c0       	mov    eax,ds:0xc0031f40
c001907f:	89 02                	mov    DWORD PTR [edx],eax
c0019081:	eb 3f                	jmp    c00190c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0019083:	31 c9                	xor    ecx,ecx
c0019085:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019089:	0f a2                	cpuid  
c001908b:	89 06                	mov    DWORD PTR [esi],eax
c001908d:	89 1f                	mov    DWORD PTR [edi],ebx
c001908f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019093:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0019096:	89 10                	mov    DWORD PTR [eax],edx
c0019098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001909c:	a3 20 e9 02 c0       	mov    ds:0xc002e920,eax
c00190a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00190a3:	a3 4c 1f 03 c0       	mov    ds:0xc0031f4c,eax
c00190a8:	8b 07                	mov    eax,DWORD PTR [edi]
c00190aa:	a3 48 1f 03 c0       	mov    ds:0xc0031f48,eax
c00190af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00190b2:	a3 44 1f 03 c0       	mov    ds:0xc0031f44,eax
c00190b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00190bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00190bd:	a3 40 1f 03 c0       	mov    ds:0xc0031f40,eax
c00190c2:	5b                   	pop    ebx
c00190c3:	5e                   	pop    esi
c00190c4:	5f                   	pop    edi
c00190c5:	5d                   	pop    ebp
c00190c6:	c3                   	ret    
c00190c7:	90                   	nop

c00190c8 <CPU::cpuidCheckEDX(unsigned int)>:
c00190c8:	83 ec 10             	sub    esp,0x10
c00190cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190cf:	50                   	push   eax
c00190d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190d4:	50                   	push   eax
c00190d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190d9:	50                   	push   eax
c00190da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190de:	50                   	push   eax
c00190df:	6a 01                	push   0x1
c00190e1:	e8 5e ff ff ff       	call   c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190ea:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00190ee:	0f 95 c0             	setne  al
c00190f1:	83 c4 24             	add    esp,0x24
c00190f4:	c3                   	ret    
c00190f5:	90                   	nop

c00190f6 <CPU::cpuidCheckECX(unsigned int)>:
c00190f6:	83 ec 10             	sub    esp,0x10
c00190f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190fd:	50                   	push   eax
c00190fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019102:	50                   	push   eax
c0019103:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019107:	50                   	push   eax
c0019108:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001910c:	50                   	push   eax
c001910d:	6a 01                	push   0x1
c001910f:	e8 30 ff ff ff       	call   c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019114:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019118:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001911c:	0f 95 c0             	setne  al
c001911f:	83 c4 24             	add    esp,0x24
c0019122:	c3                   	ret    
c0019123:	90                   	nop

c0019124 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0019124:	83 ec 10             	sub    esp,0x10
c0019127:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001912b:	50                   	push   eax
c001912c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019130:	50                   	push   eax
c0019131:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019135:	50                   	push   eax
c0019136:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001913a:	50                   	push   eax
c001913b:	6a 07                	push   0x7
c001913d:	e8 02 ff ff ff       	call   c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019142:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019146:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001914a:	0f 95 c0             	setne  al
c001914d:	83 c4 24             	add    esp,0x24
c0019150:	c3                   	ret    
c0019151:	90                   	nop

c0019152 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0019152:	83 ec 10             	sub    esp,0x10
c0019155:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019159:	50                   	push   eax
c001915a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001915e:	50                   	push   eax
c001915f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019163:	50                   	push   eax
c0019164:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019168:	50                   	push   eax
c0019169:	6a 07                	push   0x7
c001916b:	e8 d4 fe ff ff       	call   c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019170:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019174:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019178:	0f 95 c0             	setne  al
c001917b:	83 c4 24             	add    esp,0x24
c001917e:	c3                   	ret    
c001917f:	90                   	nop

c0019180 <CPU::CPU()>:
c0019180:	83 ec 0c             	sub    esp,0xc
c0019183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019187:	83 ec 08             	sub    esp,0x8
c001918a:	68 3e c8 02 c0       	push   0xc002c83e
c001918f:	50                   	push   eax
c0019190:	e8 df b2 ff ff       	call   c0014474 <Device::Device(char const*)>
c0019195:	83 c4 10             	add    esp,0x10
c0019198:	ba 18 c9 02 c0       	mov    edx,0xc002c918
c001919d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191a1:	89 10                	mov    DWORD PTR [eax],edx
c00191a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191a7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00191b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191b5:	05 78 01 00 00       	add    eax,0x178
c00191ba:	83 ec 0c             	sub    esp,0xc
c00191bd:	50                   	push   eax
c00191be:	e8 df 5e ff ff       	call   c000f0a2 <GDT::GDT()>
c00191c3:	83 c4 10             	add    esp,0x10
c00191c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191ca:	05 7c 09 00 00       	add    eax,0x97c
c00191cf:	83 ec 0c             	sub    esp,0xc
c00191d2:	50                   	push   eax
c00191d3:	e8 34 61 ff ff       	call   c000f30c <IDT::IDT()>
c00191d8:	83 c4 10             	add    esp,0x10
c00191db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191df:	05 7c 11 00 00       	add    eax,0x117c
c00191e4:	83 ec 0c             	sub    esp,0xc
c00191e7:	50                   	push   eax
c00191e8:	e8 75 81 ff ff       	call   c0011362 <TSS::TSS()>
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191f4:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00191fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191ff:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0019209:	90                   	nop
c001920a:	83 c4 0c             	add    esp,0xc
c001920d:	c3                   	ret    

c001920e <CPU::displayFeatures()>:
c001920e:	53                   	push   ebx
c001920f:	83 ec 10             	sub    esp,0x10
c0019212:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019216:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001921c:	68 4c c5 02 c0       	push   0xc002c54c
c0019221:	e8 11 9c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019226:	59                   	pop    ecx
c0019227:	58                   	pop    eax
c0019228:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001922e:	50                   	push   eax
c001922f:	68 5d c5 02 c0       	push   0xc002c55d
c0019234:	e8 fe 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019239:	58                   	pop    eax
c001923a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019240:	5a                   	pop    edx
c0019241:	c1 e8 0e             	shr    eax,0xe
c0019244:	0f b6 c0             	movzx  eax,al
c0019247:	50                   	push   eax
c0019248:	68 6e c5 02 c0       	push   0xc002c56e
c001924d:	e8 e5 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019252:	59                   	pop    ecx
c0019253:	58                   	pop    eax
c0019254:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001925a:	66 c1 e8 06          	shr    ax,0x6
c001925e:	0f b6 c0             	movzx  eax,al
c0019261:	50                   	push   eax
c0019262:	68 7f c5 02 c0       	push   0xc002c57f
c0019267:	e8 cb 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001926c:	c7 04 24 2c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca2c
c0019273:	e8 bf 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019278:	83 c4 10             	add    esp,0x10
c001927b:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019280:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0019287:	74 05                	je     c001928e <CPU::displayFeatures()+0x80>
c0019289:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c001928e:	52                   	push   edx
c001928f:	52                   	push   edx
c0019290:	50                   	push   eax
c0019291:	68 90 c5 02 c0       	push   0xc002c590
c0019296:	e8 9c 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001929b:	83 c4 10             	add    esp,0x10
c001929e:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00192a3:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00192aa:	78 05                	js     c00192b1 <CPU::displayFeatures()+0xa3>
c00192ac:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00192b1:	51                   	push   ecx
c00192b2:	51                   	push   ecx
c00192b3:	50                   	push   eax
c00192b4:	68 a7 c5 02 c0       	push   0xc002c5a7
c00192b9:	e8 79 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00192be:	83 c4 10             	add    esp,0x10
c00192c1:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00192c6:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00192cd:	75 05                	jne    c00192d4 <CPU::displayFeatures()+0xc6>
c00192cf:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00192d4:	52                   	push   edx
c00192d5:	52                   	push   edx
c00192d6:	50                   	push   eax
c00192d7:	68 be c5 02 c0       	push   0xc002c5be
c00192dc:	e8 56 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00192e1:	83 c4 10             	add    esp,0x10
c00192e4:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00192e9:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00192f0:	75 05                	jne    c00192f7 <CPU::displayFeatures()+0xe9>
c00192f2:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00192f7:	51                   	push   ecx
c00192f8:	51                   	push   ecx
c00192f9:	50                   	push   eax
c00192fa:	68 d5 c5 02 c0       	push   0xc002c5d5
c00192ff:	e8 33 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019304:	83 c4 10             	add    esp,0x10
c0019307:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c001930c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019313:	75 05                	jne    c001931a <CPU::displayFeatures()+0x10c>
c0019315:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c001931a:	52                   	push   edx
c001931b:	52                   	push   edx
c001931c:	50                   	push   eax
c001931d:	68 ec c5 02 c0       	push   0xc002c5ec
c0019322:	e8 10 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019327:	83 c4 10             	add    esp,0x10
c001932a:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c001932f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019336:	75 05                	jne    c001933d <CPU::displayFeatures()+0x12f>
c0019338:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c001933d:	51                   	push   ecx
c001933e:	51                   	push   ecx
c001933f:	50                   	push   eax
c0019340:	68 03 c6 02 c0       	push   0xc002c603
c0019345:	e8 ed 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001934a:	83 c4 10             	add    esp,0x10
c001934d:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019352:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019359:	75 05                	jne    c0019360 <CPU::displayFeatures()+0x152>
c001935b:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019360:	52                   	push   edx
c0019361:	52                   	push   edx
c0019362:	50                   	push   eax
c0019363:	68 1a c6 02 c0       	push   0xc002c61a
c0019368:	e8 ca 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001936d:	83 c4 10             	add    esp,0x10
c0019370:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019375:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001937c:	75 05                	jne    c0019383 <CPU::displayFeatures()+0x175>
c001937e:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019383:	51                   	push   ecx
c0019384:	51                   	push   ecx
c0019385:	50                   	push   eax
c0019386:	68 31 c6 02 c0       	push   0xc002c631
c001938b:	e8 a7 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019390:	83 c4 10             	add    esp,0x10
c0019393:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019398:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001939f:	75 05                	jne    c00193a6 <CPU::displayFeatures()+0x198>
c00193a1:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00193a6:	52                   	push   edx
c00193a7:	52                   	push   edx
c00193a8:	50                   	push   eax
c00193a9:	68 48 c6 02 c0       	push   0xc002c648
c00193ae:	e8 84 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00193b3:	83 c4 10             	add    esp,0x10
c00193b6:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00193bb:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00193c2:	75 05                	jne    c00193c9 <CPU::displayFeatures()+0x1bb>
c00193c4:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00193c9:	51                   	push   ecx
c00193ca:	51                   	push   ecx
c00193cb:	50                   	push   eax
c00193cc:	68 5f c6 02 c0       	push   0xc002c65f
c00193d1:	e8 61 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00193d6:	83 c4 10             	add    esp,0x10
c00193d9:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00193de:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00193e5:	75 05                	jne    c00193ec <CPU::displayFeatures()+0x1de>
c00193e7:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00193ec:	52                   	push   edx
c00193ed:	52                   	push   edx
c00193ee:	50                   	push   eax
c00193ef:	68 76 c6 02 c0       	push   0xc002c676
c00193f4:	e8 3e 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00193f9:	83 c4 10             	add    esp,0x10
c00193fc:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019401:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019408:	75 05                	jne    c001940f <CPU::displayFeatures()+0x201>
c001940a:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c001940f:	51                   	push   ecx
c0019410:	51                   	push   ecx
c0019411:	50                   	push   eax
c0019412:	68 8d c6 02 c0       	push   0xc002c68d
c0019417:	e8 1b 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019424:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001942b:	75 05                	jne    c0019432 <CPU::displayFeatures()+0x224>
c001942d:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019432:	52                   	push   edx
c0019433:	52                   	push   edx
c0019434:	50                   	push   eax
c0019435:	68 a4 c6 02 c0       	push   0xc002c6a4
c001943a:	e8 f8 99 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001943f:	83 c4 10             	add    esp,0x10
c0019442:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019447:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001944e:	78 05                	js     c0019455 <CPU::displayFeatures()+0x247>
c0019450:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019455:	51                   	push   ecx
c0019456:	51                   	push   ecx
c0019457:	50                   	push   eax
c0019458:	68 bb c6 02 c0       	push   0xc002c6bb
c001945d:	e8 d5 99 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019462:	83 c4 10             	add    esp,0x10
c0019465:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c001946a:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019471:	75 05                	jne    c0019478 <CPU::displayFeatures()+0x26a>
c0019473:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019478:	52                   	push   edx
c0019479:	52                   	push   edx
c001947a:	50                   	push   eax
c001947b:	68 d2 c6 02 c0       	push   0xc002c6d2
c0019480:	e8 b2 99 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019485:	83 c4 18             	add    esp,0x18
c0019488:	5b                   	pop    ebx
c0019489:	c3                   	ret    

c001948a <CPU::detectFeatures()>:
c001948a:	55                   	push   ebp
c001948b:	57                   	push   edi
c001948c:	56                   	push   esi
c001948d:	53                   	push   ebx
c001948e:	83 ec 50             	sub    esp,0x50
c0019491:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019495:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001949f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00194a6:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00194ac:	6a 0d                	push   0xd
c00194ae:	6a 00                	push   0x0
c00194b0:	55                   	push   ebp
c00194b1:	e8 9a 72 fe ff       	call   c0000750 <memset>
c00194b6:	83 c4 10             	add    esp,0x10
c00194b9:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c00194be:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00194c5:	0f 84 22 09 00 00    	je     c0019ded <CPU::detectFeatures()+0x963>
c00194cb:	83 ec 0c             	sub    esp,0xc
c00194ce:	89 ef                	mov    edi,ebp
c00194d0:	6a 10                	push   0x10
c00194d2:	e8 f1 fb ff ff       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c00194d7:	83 e0 01             	and    eax,0x1
c00194da:	8d 14 00             	lea    edx,[eax+eax*1]
c00194dd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194e3:	83 e0 fd             	and    eax,0xfffffffd
c00194e6:	09 d0                	or     eax,edx
c00194e8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194ee:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00194f5:	e8 ce fb ff ff       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c00194fa:	83 e0 01             	and    eax,0x1
c00194fd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019504:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001950a:	83 e0 fb             	and    eax,0xfffffffb
c001950d:	09 d0                	or     eax,edx
c001950f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019515:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001951c:	e8 a7 fb ff ff       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c0019521:	83 e0 01             	and    eax,0x1
c0019524:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001952b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019531:	83 e0 f7             	and    eax,0xfffffff7
c0019534:	09 d0                	or     eax,edx
c0019536:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001953c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019543:	e8 80 fb ff ff       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c0019548:	83 e0 01             	and    eax,0x1
c001954b:	c1 e0 04             	shl    eax,0x4
c001954e:	88 c2                	mov    dl,al
c0019550:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019556:	83 e0 ef             	and    eax,0xffffffef
c0019559:	09 d0                	or     eax,edx
c001955b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019561:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019568:	e8 5b fb ff ff       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c001956d:	83 e0 01             	and    eax,0x1
c0019570:	c1 e0 05             	shl    eax,0x5
c0019573:	88 c2                	mov    dl,al
c0019575:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001957b:	83 e0 df             	and    eax,0xffffffdf
c001957e:	09 d0                	or     eax,edx
c0019580:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019586:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001958d:	e8 36 fb ff ff       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c0019592:	83 e0 01             	and    eax,0x1
c0019595:	8d 14 00             	lea    edx,[eax+eax*1]
c0019598:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001959e:	83 e0 fd             	and    eax,0xfffffffd
c00195a1:	09 d0                	or     eax,edx
c00195a3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195a9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00195b0:	e8 13 fb ff ff       	call   c00190c8 <CPU::cpuidCheckEDX(unsigned int)>
c00195b5:	83 e0 01             	and    eax,0x1
c00195b8:	c1 e0 06             	shl    eax,0x6
c00195bb:	88 c2                	mov    dl,al
c00195bd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195c3:	83 e0 bf             	and    eax,0xffffffbf
c00195c6:	09 d0                	or     eax,edx
c00195c8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195ce:	58                   	pop    eax
c00195cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195d3:	50                   	push   eax
c00195d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195d8:	50                   	push   eax
c00195d9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00195dd:	56                   	push   esi
c00195de:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195e2:	50                   	push   eax
c00195e3:	6a 00                	push   0x0
c00195e5:	e8 5a fa ff ff       	call   c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195ea:	b8 04 00 00 00       	mov    eax,0x4
c00195ef:	89 c1                	mov    ecx,eax
c00195f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00195f3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00195f9:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00195fd:	89 c1                	mov    ecx,eax
c00195ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019601:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0019607:	8d 74 24 38          	lea    esi,[esp+0x38]
c001960b:	89 c1                	mov    ecx,eax
c001960d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001960f:	83 c4 18             	add    esp,0x18
c0019612:	68 e9 c6 02 c0       	push   0xc002c6e9
c0019617:	55                   	push   ebp
c0019618:	e8 7b 72 fe ff       	call   c0000898 <strcmp>
c001961d:	83 c4 10             	add    esp,0x10
c0019620:	85 c0                	test   eax,eax
c0019622:	75 0f                	jne    c0019633 <CPU::detectFeatures()+0x1a9>
c0019624:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001962e:	e9 22 02 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c0019633:	50                   	push   eax
c0019634:	50                   	push   eax
c0019635:	68 f6 c6 02 c0       	push   0xc002c6f6
c001963a:	55                   	push   ebp
c001963b:	e8 58 72 fe ff       	call   c0000898 <strcmp>
c0019640:	83 c4 10             	add    esp,0x10
c0019643:	85 c0                	test   eax,eax
c0019645:	74 dd                	je     c0019624 <CPU::detectFeatures()+0x19a>
c0019647:	50                   	push   eax
c0019648:	50                   	push   eax
c0019649:	68 03 c7 02 c0       	push   0xc002c703
c001964e:	55                   	push   ebp
c001964f:	e8 44 72 fe ff       	call   c0000898 <strcmp>
c0019654:	83 c4 10             	add    esp,0x10
c0019657:	85 c0                	test   eax,eax
c0019659:	74 2a                	je     c0019685 <CPU::detectFeatures()+0x1fb>
c001965b:	50                   	push   eax
c001965c:	50                   	push   eax
c001965d:	68 10 c7 02 c0       	push   0xc002c710
c0019662:	55                   	push   ebp
c0019663:	e8 30 72 fe ff       	call   c0000898 <strcmp>
c0019668:	83 c4 10             	add    esp,0x10
c001966b:	85 c0                	test   eax,eax
c001966d:	74 16                	je     c0019685 <CPU::detectFeatures()+0x1fb>
c001966f:	50                   	push   eax
c0019670:	50                   	push   eax
c0019671:	68 1d c7 02 c0       	push   0xc002c71d
c0019676:	55                   	push   ebp
c0019677:	e8 1c 72 fe ff       	call   c0000898 <strcmp>
c001967c:	83 c4 10             	add    esp,0x10
c001967f:	85 c0                	test   eax,eax
c0019681:	74 48                	je     c00196cb <CPU::detectFeatures()+0x241>
c0019683:	eb 0f                	jmp    c0019694 <CPU::detectFeatures()+0x20a>
c0019685:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001968f:	e9 c1 01 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c0019694:	50                   	push   eax
c0019695:	50                   	push   eax
c0019696:	68 2a c7 02 c0       	push   0xc002c72a
c001969b:	55                   	push   ebp
c001969c:	e8 f7 71 fe ff       	call   c0000898 <strcmp>
c00196a1:	83 c4 10             	add    esp,0x10
c00196a4:	85 c0                	test   eax,eax
c00196a6:	74 23                	je     c00196cb <CPU::detectFeatures()+0x241>
c00196a8:	57                   	push   edi
c00196a9:	57                   	push   edi
c00196aa:	68 37 c7 02 c0       	push   0xc002c737
c00196af:	55                   	push   ebp
c00196b0:	e8 e3 71 fe ff       	call   c0000898 <strcmp>
c00196b5:	83 c4 10             	add    esp,0x10
c00196b8:	85 c0                	test   eax,eax
c00196ba:	75 1e                	jne    c00196da <CPU::detectFeatures()+0x250>
c00196bc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00196c6:	e9 8a 01 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c00196cb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00196d5:	e9 7b 01 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c00196da:	56                   	push   esi
c00196db:	56                   	push   esi
c00196dc:	68 44 c7 02 c0       	push   0xc002c744
c00196e1:	55                   	push   ebp
c00196e2:	e8 b1 71 fe ff       	call   c0000898 <strcmp>
c00196e7:	83 c4 10             	add    esp,0x10
c00196ea:	85 c0                	test   eax,eax
c00196ec:	75 0f                	jne    c00196fd <CPU::detectFeatures()+0x273>
c00196ee:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00196f8:	e9 58 01 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c00196fd:	51                   	push   ecx
c00196fe:	51                   	push   ecx
c00196ff:	68 03 c7 02 c0       	push   0xc002c703
c0019704:	55                   	push   ebp
c0019705:	e8 8e 71 fe ff       	call   c0000898 <strcmp>
c001970a:	83 c4 10             	add    esp,0x10
c001970d:	85 c0                	test   eax,eax
c001970f:	75 0f                	jne    c0019720 <CPU::detectFeatures()+0x296>
c0019711:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001971b:	e9 35 01 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c0019720:	52                   	push   edx
c0019721:	52                   	push   edx
c0019722:	68 51 c7 02 c0       	push   0xc002c751
c0019727:	55                   	push   ebp
c0019728:	e8 6b 71 fe ff       	call   c0000898 <strcmp>
c001972d:	83 c4 10             	add    esp,0x10
c0019730:	85 c0                	test   eax,eax
c0019732:	75 0f                	jne    c0019743 <CPU::detectFeatures()+0x2b9>
c0019734:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001973e:	e9 12 01 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c0019743:	50                   	push   eax
c0019744:	50                   	push   eax
c0019745:	68 5e c7 02 c0       	push   0xc002c75e
c001974a:	55                   	push   ebp
c001974b:	e8 48 71 fe ff       	call   c0000898 <strcmp>
c0019750:	83 c4 10             	add    esp,0x10
c0019753:	85 c0                	test   eax,eax
c0019755:	75 0f                	jne    c0019766 <CPU::detectFeatures()+0x2dc>
c0019757:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019761:	e9 ef 00 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c0019766:	50                   	push   eax
c0019767:	50                   	push   eax
c0019768:	68 6b c7 02 c0       	push   0xc002c76b
c001976d:	55                   	push   ebp
c001976e:	e8 25 71 fe ff       	call   c0000898 <strcmp>
c0019773:	83 c4 10             	add    esp,0x10
c0019776:	85 c0                	test   eax,eax
c0019778:	75 0f                	jne    c0019789 <CPU::detectFeatures()+0x2ff>
c001977a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019784:	e9 cc 00 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c0019789:	50                   	push   eax
c001978a:	50                   	push   eax
c001978b:	68 78 c7 02 c0       	push   0xc002c778
c0019790:	55                   	push   ebp
c0019791:	e8 02 71 fe ff       	call   c0000898 <strcmp>
c0019796:	83 c4 10             	add    esp,0x10
c0019799:	85 c0                	test   eax,eax
c001979b:	75 0f                	jne    c00197ac <CPU::detectFeatures()+0x322>
c001979d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00197a7:	e9 a9 00 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c00197ac:	50                   	push   eax
c00197ad:	50                   	push   eax
c00197ae:	68 85 c7 02 c0       	push   0xc002c785
c00197b3:	55                   	push   ebp
c00197b4:	e8 df 70 fe ff       	call   c0000898 <strcmp>
c00197b9:	83 c4 10             	add    esp,0x10
c00197bc:	85 c0                	test   eax,eax
c00197be:	75 0f                	jne    c00197cf <CPU::detectFeatures()+0x345>
c00197c0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00197ca:	e9 86 00 00 00       	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c00197cf:	50                   	push   eax
c00197d0:	50                   	push   eax
c00197d1:	68 92 c7 02 c0       	push   0xc002c792
c00197d6:	55                   	push   ebp
c00197d7:	e8 bc 70 fe ff       	call   c0000898 <strcmp>
c00197dc:	83 c4 10             	add    esp,0x10
c00197df:	85 c0                	test   eax,eax
c00197e1:	75 0c                	jne    c00197ef <CPU::detectFeatures()+0x365>
c00197e3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00197ed:	eb 66                	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c00197ef:	50                   	push   eax
c00197f0:	50                   	push   eax
c00197f1:	68 9f c7 02 c0       	push   0xc002c79f
c00197f6:	55                   	push   ebp
c00197f7:	e8 9c 70 fe ff       	call   c0000898 <strcmp>
c00197fc:	83 c4 10             	add    esp,0x10
c00197ff:	85 c0                	test   eax,eax
c0019801:	75 0c                	jne    c001980f <CPU::detectFeatures()+0x385>
c0019803:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001980d:	eb 46                	jmp    c0019855 <CPU::detectFeatures()+0x3cb>
c001980f:	57                   	push   edi
c0019810:	57                   	push   edi
c0019811:	68 ac c7 02 c0       	push   0xc002c7ac
c0019816:	55                   	push   ebp
c0019817:	e8 7c 70 fe ff       	call   c0000898 <strcmp>
c001981c:	83 c4 10             	add    esp,0x10
c001981f:	85 c0                	test   eax,eax
c0019821:	74 e0                	je     c0019803 <CPU::detectFeatures()+0x379>
c0019823:	56                   	push   esi
c0019824:	56                   	push   esi
c0019825:	68 b9 c7 02 c0       	push   0xc002c7b9
c001982a:	55                   	push   ebp
c001982b:	e8 68 70 fe ff       	call   c0000898 <strcmp>
c0019830:	83 c4 10             	add    esp,0x10
c0019833:	85 c0                	test   eax,eax
c0019835:	74 cc                	je     c0019803 <CPU::detectFeatures()+0x379>
c0019837:	51                   	push   ecx
c0019838:	51                   	push   ecx
c0019839:	68 c6 c7 02 c0       	push   0xc002c7c6
c001983e:	55                   	push   ebp
c001983f:	e8 54 70 fe ff       	call   c0000898 <strcmp>
c0019844:	83 c4 10             	add    esp,0x10
c0019847:	85 c0                	test   eax,eax
c0019849:	74 b8                	je     c0019803 <CPU::detectFeatures()+0x379>
c001984b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019855:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001985a:	0f 86 be 00 00 00    	jbe    c001991e <CPU::detectFeatures()+0x494>
c0019860:	83 ec 0c             	sub    esp,0xc
c0019863:	68 80 00 00 00       	push   0x80
c0019868:	e8 b7 f8 ff ff       	call   c0019124 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001986d:	83 e0 01             	and    eax,0x1
c0019870:	c1 e0 06             	shl    eax,0x6
c0019873:	88 c2                	mov    dl,al
c0019875:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001987b:	83 e0 bf             	and    eax,0xffffffbf
c001987e:	09 d0                	or     eax,edx
c0019880:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019886:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001988d:	e8 92 f8 ff ff       	call   c0019124 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019892:	83 e0 01             	and    eax,0x1
c0019895:	c1 e0 04             	shl    eax,0x4
c0019898:	88 c2                	mov    dl,al
c001989a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00198a0:	83 e0 ef             	and    eax,0xffffffef
c00198a3:	09 d0                	or     eax,edx
c00198a5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00198ab:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00198b2:	e8 6d f8 ff ff       	call   c0019124 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00198b7:	c1 e0 07             	shl    eax,0x7
c00198ba:	88 c2                	mov    dl,al
c00198bc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00198c2:	83 e0 7f             	and    eax,0x7f
c00198c5:	09 d0                	or     eax,edx
c00198c7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00198cd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00198d4:	e8 79 f8 ff ff       	call   c0019152 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00198d9:	83 e0 01             	and    eax,0x1
c00198dc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00198e3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00198e9:	83 e0 f7             	and    eax,0xfffffff7
c00198ec:	09 d0                	or     eax,edx
c00198ee:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00198f4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00198fb:	e8 52 f8 ff ff       	call   c0019152 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019900:	83 c4 10             	add    esp,0x10
c0019903:	83 e0 01             	and    eax,0x1
c0019906:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001990d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019913:	83 e0 fb             	and    eax,0xfffffffb
c0019916:	09 d0                	or     eax,edx
c0019918:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001991e:	83 ec 0c             	sub    esp,0xc
c0019921:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019925:	50                   	push   eax
c0019926:	8d 44 24 28          	lea    eax,[esp+0x28]
c001992a:	50                   	push   eax
c001992b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001992f:	56                   	push   esi
c0019930:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019934:	50                   	push   eax
c0019935:	6a 01                	push   0x1
c0019937:	e8 08 f7 ff ff       	call   c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001993c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019940:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019946:	88 ca                	mov    dl,cl
c0019948:	83 e0 f0             	and    eax,0xfffffff0
c001994b:	83 e2 0f             	and    edx,0xf
c001994e:	09 d0                	or     eax,edx
c0019950:	88 ca                	mov    dl,cl
c0019952:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019958:	c0 ea 04             	shr    dl,0x4
c001995b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001995f:	0f b6 c2             	movzx  eax,dl
c0019962:	83 c4 20             	add    esp,0x20
c0019965:	c1 e0 06             	shl    eax,0x6
c0019968:	89 c7                	mov    edi,eax
c001996a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019970:	66 25 3f c0          	and    ax,0xc03f
c0019974:	09 f8                	or     eax,edi
c0019976:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001997d:	89 c8                	mov    eax,ecx
c001997f:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019986:	c1 e8 08             	shr    eax,0x8
c0019989:	83 e5 3f             	and    ebp,0x3f
c001998c:	83 e0 0f             	and    eax,0xf
c001998f:	89 c7                	mov    edi,eax
c0019991:	c1 e7 06             	shl    edi,0x6
c0019994:	09 ef                	or     edi,ebp
c0019996:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001999d:	89 fa                	mov    edx,edi
c001999f:	83 e5 c0             	and    ebp,0xffffffc0
c00199a2:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00199a8:	88 c2                	mov    dl,al
c00199aa:	c0 ea 02             	shr    dl,0x2
c00199ad:	89 d7                	mov    edi,edx
c00199af:	09 ef                	or     edi,ebp
c00199b1:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00199b7:	89 fa                	mov    edx,edi
c00199b9:	83 e5 cf             	and    ebp,0xffffffcf
c00199bc:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00199c2:	89 cf                	mov    edi,ecx
c00199c4:	c1 ef 0c             	shr    edi,0xc
c00199c7:	83 e7 03             	and    edi,0x3
c00199ca:	c1 e7 04             	shl    edi,0x4
c00199cd:	09 ef                	or     edi,ebp
c00199cf:	3c 06                	cmp    al,0x6
c00199d1:	89 fa                	mov    edx,edi
c00199d3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00199d9:	74 04                	je     c00199df <CPU::detectFeatures()+0x555>
c00199db:	3c 0f                	cmp    al,0xf
c00199dd:	75 5c                	jne    c0019a3b <CPU::detectFeatures()+0x5b1>
c00199df:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00199e3:	89 cf                	mov    edi,ecx
c00199e5:	c1 ef 10             	shr    edi,0x10
c00199e8:	c1 e7 04             	shl    edi,0x4
c00199eb:	09 fa                	or     edx,edi
c00199ed:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00199f3:	0f b6 d2             	movzx  edx,dl
c00199f6:	66 81 e7 3f c0       	and    di,0xc03f
c00199fb:	c1 e2 06             	shl    edx,0x6
c00199fe:	09 fa                	or     edx,edi
c0019a00:	3c 0f                	cmp    al,0xf
c0019a02:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019a09:	75 30                	jne    c0019a3b <CPU::detectFeatures()+0x5b1>
c0019a0b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019a11:	c1 e9 14             	shr    ecx,0x14
c0019a14:	83 e0 3f             	and    eax,0x3f
c0019a17:	83 c1 0f             	add    ecx,0xf
c0019a1a:	88 ca                	mov    dl,cl
c0019a1c:	c0 e9 02             	shr    cl,0x2
c0019a1f:	c1 e2 06             	shl    edx,0x6
c0019a22:	09 d0                	or     eax,edx
c0019a24:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019a2a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019a30:	83 e0 c0             	and    eax,0xffffffc0
c0019a33:	09 c1                	or     ecx,eax
c0019a35:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019a3b:	83 ec 0c             	sub    esp,0xc
c0019a3e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a45:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019a49:	50                   	push   eax
c0019a4a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019a4e:	55                   	push   ebp
c0019a4f:	56                   	push   esi
c0019a50:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019a54:	57                   	push   edi
c0019a55:	68 00 00 00 80       	push   0x80000000
c0019a5a:	e8 e5 f5 ff ff       	call   c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a5f:	83 c4 20             	add    esp,0x20
c0019a62:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019a6a:	76 22                	jbe    c0019a8e <CPU::detectFeatures()+0x604>
c0019a6c:	83 ec 0c             	sub    esp,0xc
c0019a6f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019a73:	50                   	push   eax
c0019a74:	55                   	push   ebp
c0019a75:	56                   	push   esi
c0019a76:	57                   	push   edi
c0019a77:	68 01 00 00 80       	push   0x80000001
c0019a7c:	e8 c3 f5 ff ff       	call   c0019044 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a81:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019a8b:	83 c4 20             	add    esp,0x20
c0019a8e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019a94:	83 f8 01             	cmp    eax,0x1
c0019a97:	75 6f                	jne    c0019b08 <CPU::detectFeatures()+0x67e>
c0019a99:	51                   	push   ecx
c0019a9a:	51                   	push   ecx
c0019a9b:	68 d2 c7 02 c0       	push   0xc002c7d2
c0019aa0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019aa4:	56                   	push   esi
c0019aa5:	e8 62 6d fe ff       	call   c000080c <strcpy>
c0019aaa:	5f                   	pop    edi
c0019aab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ab1:	5d                   	pop    ebp
c0019ab2:	66 c1 e8 06          	shr    ax,0x6
c0019ab6:	0f b6 c0             	movzx  eax,al
c0019ab9:	50                   	push   eax
c0019aba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ac0:	c1 e8 0e             	shr    eax,0xe
c0019ac3:	0f b6 c0             	movzx  eax,al
c0019ac6:	50                   	push   eax
c0019ac7:	e8 22 f2 ff ff       	call   c0018cee <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019acc:	5a                   	pop    edx
c0019acd:	59                   	pop    ecx
c0019ace:	50                   	push   eax
c0019acf:	56                   	push   esi
c0019ad0:	e8 77 6e fe ff       	call   c000094c <strcat>
c0019ad5:	5f                   	pop    edi
c0019ad6:	5d                   	pop    ebp
c0019ad7:	56                   	push   esi
c0019ad8:	53                   	push   ebx
c0019ad9:	e8 88 a9 ff ff       	call   c0014466 <Device::setName(char const*)>
c0019ade:	58                   	pop    eax
c0019adf:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019ae5:	5a                   	pop    edx
c0019ae6:	68 d9 c7 02 c0       	push   0xc002c7d9
c0019aeb:	50                   	push   eax
c0019aec:	e8 a7 6d fe ff       	call   c0000898 <strcmp>
c0019af1:	83 c4 10             	add    esp,0x10
c0019af4:	85 c0                	test   eax,eax
c0019af6:	0f 85 71 03 00 00    	jne    c0019e6d <CPU::detectFeatures()+0x9e3>
c0019afc:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019b03:	e9 65 03 00 00       	jmp    c0019e6d <CPU::detectFeatures()+0x9e3>
c0019b08:	83 f8 02             	cmp    eax,0x2
c0019b0b:	0f 85 b5 00 00 00    	jne    c0019bc6 <CPU::detectFeatures()+0x73c>
c0019b11:	57                   	push   edi
c0019b12:	57                   	push   edi
c0019b13:	68 eb c7 02 c0       	push   0xc002c7eb
c0019b18:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019b1c:	56                   	push   esi
c0019b1d:	e8 ea 6c fe ff       	call   c000080c <strcpy>
c0019b22:	5d                   	pop    ebp
c0019b23:	58                   	pop    eax
c0019b24:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b2a:	66 c1 e8 06          	shr    ax,0x6
c0019b2e:	0f b6 c0             	movzx  eax,al
c0019b31:	50                   	push   eax
c0019b32:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b38:	c1 e8 0e             	shr    eax,0xe
c0019b3b:	0f b6 c0             	movzx  eax,al
c0019b3e:	50                   	push   eax
c0019b3f:	e8 16 f0 ff ff       	call   c0018b5a <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019b44:	5a                   	pop    edx
c0019b45:	59                   	pop    ecx
c0019b46:	50                   	push   eax
c0019b47:	56                   	push   esi
c0019b48:	e8 ff 6d fe ff       	call   c000094c <strcat>
c0019b4d:	5f                   	pop    edi
c0019b4e:	5d                   	pop    ebp
c0019b4f:	56                   	push   esi
c0019b50:	53                   	push   ebx
c0019b51:	e8 10 a9 ff ff       	call   c0014466 <Device::setName(char const*)>
c0019b56:	58                   	pop    eax
c0019b57:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019b5d:	5a                   	pop    edx
c0019b5e:	68 f0 c7 02 c0       	push   0xc002c7f0
c0019b63:	50                   	push   eax
c0019b64:	e8 2f 6d fe ff       	call   c0000898 <strcmp>
c0019b69:	83 c4 10             	add    esp,0x10
c0019b6c:	85 c0                	test   eax,eax
c0019b6e:	75 20                	jne    c0019b90 <CPU::detectFeatures()+0x706>
c0019b70:	8b 15 08 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f408
c0019b76:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019b7c:	a8 01                	test   al,0x1
c0019b7e:	74 10                	je     c0019b90 <CPU::detectFeatures()+0x706>
c0019b80:	83 e0 fe             	and    eax,0xfffffffe
c0019b83:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019b89:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019b90:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b96:	c1 e8 0e             	shr    eax,0xe
c0019b99:	3c 05                	cmp    al,0x5
c0019b9b:	0f 85 cc 02 00 00    	jne    c0019e6d <CPU::detectFeatures()+0x9e3>
c0019ba1:	56                   	push   esi
c0019ba2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019ba8:	83 e0 0f             	and    eax,0xf
c0019bab:	50                   	push   eax
c0019bac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019bb2:	66 c1 e8 06          	shr    ax,0x6
c0019bb6:	0f b6 c0             	movzx  eax,al
c0019bb9:	50                   	push   eax
c0019bba:	6a 05                	push   0x5
c0019bbc:	e8 0f f4 ff ff       	call   c0018fd0 <CPU::AMD_K6_writeback(int, int, int)>
c0019bc1:	e9 1f 02 00 00       	jmp    c0019de5 <CPU::detectFeatures()+0x95b>
c0019bc6:	8d 50 fd             	lea    edx,[eax-0x3]
c0019bc9:	83 fa 01             	cmp    edx,0x1
c0019bcc:	76 09                	jbe    c0019bd7 <CPU::detectFeatures()+0x74d>
c0019bce:	83 f8 06             	cmp    eax,0x6
c0019bd1:	0f 85 91 01 00 00    	jne    c0019d68 <CPU::detectFeatures()+0x8de>
c0019bd7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019bdd:	c1 ea 0e             	shr    edx,0xe
c0019be0:	80 fa 05             	cmp    dl,0x5
c0019be3:	75 7b                	jne    c0019c60 <CPU::detectFeatures()+0x7d6>
c0019be5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019beb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019bf0:	66 81 fa 00 01       	cmp    dx,0x100
c0019bf5:	75 0c                	jne    c0019c03 <CPU::detectFeatures()+0x779>
c0019bf7:	51                   	push   ecx
c0019bf8:	51                   	push   ecx
c0019bf9:	68 f7 c7 02 c0       	push   0xc002c7f7
c0019bfe:	e9 dc 01 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019c03:	66 81 fa 00 02       	cmp    dx,0x200
c0019c08:	75 0c                	jne    c0019c16 <CPU::detectFeatures()+0x78c>
c0019c0a:	52                   	push   edx
c0019c0b:	52                   	push   edx
c0019c0c:	68 0a c8 02 c0       	push   0xc002c80a
c0019c11:	e9 c9 01 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019c16:	66 81 fa 40 02       	cmp    dx,0x240
c0019c1b:	75 0c                	jne    c0019c29 <CPU::detectFeatures()+0x79f>
c0019c1d:	50                   	push   eax
c0019c1e:	50                   	push   eax
c0019c1f:	68 1c c8 02 c0       	push   0xc002c81c
c0019c24:	e9 b6 01 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019c29:	83 f8 06             	cmp    eax,0x6
c0019c2c:	75 0c                	jne    c0019c3a <CPU::detectFeatures()+0x7b0>
c0019c2e:	50                   	push   eax
c0019c2f:	50                   	push   eax
c0019c30:	68 2e c8 02 c0       	push   0xc002c82e
c0019c35:	e9 a5 01 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019c3a:	83 f8 04             	cmp    eax,0x4
c0019c3d:	75 0c                	jne    c0019c4b <CPU::detectFeatures()+0x7c1>
c0019c3f:	50                   	push   eax
c0019c40:	50                   	push   eax
c0019c41:	68 3a c8 02 c0       	push   0xc002c83a
c0019c46:	e9 94 01 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019c4b:	83 f8 03             	cmp    eax,0x3
c0019c4e:	0f 85 19 02 00 00    	jne    c0019e6d <CPU::detectFeatures()+0x9e3>
c0019c54:	50                   	push   eax
c0019c55:	50                   	push   eax
c0019c56:	68 42 c8 02 c0       	push   0xc002c842
c0019c5b:	e9 7f 01 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019c60:	80 fa 06             	cmp    dl,0x6
c0019c63:	0f 85 db 00 00 00    	jne    c0019d44 <CPU::detectFeatures()+0x8ba>
c0019c69:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019c6f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019c74:	66 81 fa 80 01       	cmp    dx,0x180
c0019c79:	75 0c                	jne    c0019c87 <CPU::detectFeatures()+0x7fd>
c0019c7b:	50                   	push   eax
c0019c7c:	50                   	push   eax
c0019c7d:	68 4d c8 02 c0       	push   0xc002c84d
c0019c82:	e9 58 01 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019c87:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019c8d:	66 f7 c1 80 ff       	test   cx,0xff80
c0019c92:	75 0c                	jne    c0019ca0 <CPU::detectFeatures()+0x816>
c0019c94:	50                   	push   eax
c0019c95:	50                   	push   eax
c0019c96:	68 5d c8 02 c0       	push   0xc002c85d
c0019c9b:	e9 3f 01 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019ca0:	66 81 fa 40 02       	cmp    dx,0x240
c0019ca5:	75 0c                	jne    c0019cb3 <CPU::detectFeatures()+0x829>
c0019ca7:	55                   	push   ebp
c0019ca8:	55                   	push   ebp
c0019ca9:	68 64 c8 02 c0       	push   0xc002c864
c0019cae:	e9 2c 01 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019cb3:	66 81 fa 80 02       	cmp    dx,0x280
c0019cb8:	75 0c                	jne    c0019cc6 <CPU::detectFeatures()+0x83c>
c0019cba:	57                   	push   edi
c0019cbb:	57                   	push   edi
c0019cbc:	68 6d c8 02 c0       	push   0xc002c86d
c0019cc1:	e9 19 01 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019cc6:	66 81 fa 40 03       	cmp    dx,0x340
c0019ccb:	74 ed                	je     c0019cba <CPU::detectFeatures()+0x830>
c0019ccd:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019cd2:	75 0c                	jne    c0019ce0 <CPU::detectFeatures()+0x856>
c0019cd4:	56                   	push   esi
c0019cd5:	56                   	push   esi
c0019cd6:	68 74 c8 02 c0       	push   0xc002c874
c0019cdb:	e9 ff 00 00 00       	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019ce0:	83 f8 06             	cmp    eax,0x6
c0019ce3:	0f 84 45 ff ff ff    	je     c0019c2e <CPU::detectFeatures()+0x7a4>
c0019ce9:	83 f8 04             	cmp    eax,0x4
c0019cec:	0f 84 4d ff ff ff    	je     c0019c3f <CPU::detectFeatures()+0x7b5>
c0019cf2:	83 f8 03             	cmp    eax,0x3
c0019cf5:	0f 85 72 01 00 00    	jne    c0019e6d <CPU::detectFeatures()+0x9e3>
c0019cfb:	51                   	push   ecx
c0019cfc:	51                   	push   ecx
c0019cfd:	68 7d c8 02 c0       	push   0xc002c87d
c0019d02:	53                   	push   ebx
c0019d03:	e8 5e a7 ff ff       	call   c0014466 <Device::setName(char const*)>
c0019d08:	b1 c1                	mov    cl,0xc1
c0019d0a:	88 c8                	mov    al,cl
c0019d0c:	e6 22                	out    0x22,al
c0019d0e:	e4 23                	in     al,0x23
c0019d10:	88 c2                	mov    dl,al
c0019d12:	88 c8                	mov    al,cl
c0019d14:	e6 22                	out    0x22,al
c0019d16:	88 d0                	mov    al,dl
c0019d18:	83 c8 10             	or     eax,0x10
c0019d1b:	e6 23                	out    0x23,al
c0019d1d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019d24:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019d27:	89 d0                	mov    eax,edx
c0019d29:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019d2f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019d33:	40                   	inc    eax
c0019d34:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019d3a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019d3f:	e9 a1 00 00 00       	jmp    c0019de5 <CPU::detectFeatures()+0x95b>
c0019d44:	83 f8 06             	cmp    eax,0x6
c0019d47:	0f 84 e1 fe ff ff    	je     c0019c2e <CPU::detectFeatures()+0x7a4>
c0019d4d:	83 f8 04             	cmp    eax,0x4
c0019d50:	0f 84 e9 fe ff ff    	je     c0019c3f <CPU::detectFeatures()+0x7b5>
c0019d56:	83 f8 03             	cmp    eax,0x3
c0019d59:	0f 85 0e 01 00 00    	jne    c0019e6d <CPU::detectFeatures()+0x9e3>
c0019d5f:	52                   	push   edx
c0019d60:	52                   	push   edx
c0019d61:	68 88 c8 02 c0       	push   0xc002c888
c0019d66:	eb 77                	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019d68:	83 f8 07             	cmp    eax,0x7
c0019d6b:	75 09                	jne    c0019d76 <CPU::detectFeatures()+0x8ec>
c0019d6d:	50                   	push   eax
c0019d6e:	50                   	push   eax
c0019d6f:	68 92 c8 02 c0       	push   0xc002c892
c0019d74:	eb 69                	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019d76:	83 f8 0a             	cmp    eax,0xa
c0019d79:	75 09                	jne    c0019d84 <CPU::detectFeatures()+0x8fa>
c0019d7b:	50                   	push   eax
c0019d7c:	50                   	push   eax
c0019d7d:	68 9d c8 02 c0       	push   0xc002c89d
c0019d82:	eb 5b                	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019d84:	83 f8 0b             	cmp    eax,0xb
c0019d87:	75 09                	jne    c0019d92 <CPU::detectFeatures()+0x908>
c0019d89:	50                   	push   eax
c0019d8a:	50                   	push   eax
c0019d8b:	68 a5 c8 02 c0       	push   0xc002c8a5
c0019d90:	eb 4d                	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019d92:	83 f8 08             	cmp    eax,0x8
c0019d95:	75 09                	jne    c0019da0 <CPU::detectFeatures()+0x916>
c0019d97:	50                   	push   eax
c0019d98:	50                   	push   eax
c0019d99:	68 ae c8 02 c0       	push   0xc002c8ae
c0019d9e:	eb 3f                	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019da0:	83 f8 09             	cmp    eax,0x9
c0019da3:	75 09                	jne    c0019dae <CPU::detectFeatures()+0x924>
c0019da5:	50                   	push   eax
c0019da6:	50                   	push   eax
c0019da7:	68 b6 c8 02 c0       	push   0xc002c8b6
c0019dac:	eb 31                	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019dae:	83 f8 05             	cmp    eax,0x5
c0019db1:	75 09                	jne    c0019dbc <CPU::detectFeatures()+0x932>
c0019db3:	50                   	push   eax
c0019db4:	50                   	push   eax
c0019db5:	68 be c8 02 c0       	push   0xc002c8be
c0019dba:	eb 23                	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019dbc:	83 f8 0c             	cmp    eax,0xc
c0019dbf:	75 09                	jne    c0019dca <CPU::detectFeatures()+0x940>
c0019dc1:	55                   	push   ebp
c0019dc2:	55                   	push   ebp
c0019dc3:	68 cc c8 02 c0       	push   0xc002c8cc
c0019dc8:	eb 15                	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019dca:	83 f8 0d             	cmp    eax,0xd
c0019dcd:	75 09                	jne    c0019dd8 <CPU::detectFeatures()+0x94e>
c0019dcf:	57                   	push   edi
c0019dd0:	57                   	push   edi
c0019dd1:	68 d7 c8 02 c0       	push   0xc002c8d7
c0019dd6:	eb 07                	jmp    c0019ddf <CPU::detectFeatures()+0x955>
c0019dd8:	56                   	push   esi
c0019dd9:	56                   	push   esi
c0019dda:	68 eb c8 02 c0       	push   0xc002c8eb
c0019ddf:	53                   	push   ebx
c0019de0:	e8 81 a6 ff ff       	call   c0014466 <Device::setName(char const*)>
c0019de5:	83 c4 10             	add    esp,0x10
c0019de8:	e9 80 00 00 00       	jmp    c0019e6d <CPU::detectFeatures()+0x9e3>
c0019ded:	51                   	push   ecx
c0019dee:	51                   	push   ecx
c0019def:	68 37 c7 02 c0       	push   0xc002c737
c0019df4:	55                   	push   ebp
c0019df5:	e8 12 6a fe ff       	call   c000080c <strcpy>
c0019dfa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019e04:	e8 a5 64 fe ff       	call   c00002ae <is486>
c0019e09:	83 c4 10             	add    esp,0x10
c0019e0c:	85 c0                	test   eax,eax
c0019e0e:	74 2b                	je     c0019e3b <CPU::detectFeatures()+0x9b1>
c0019e10:	52                   	push   edx
c0019e11:	52                   	push   edx
c0019e12:	68 f7 c8 02 c0       	push   0xc002c8f7
c0019e17:	53                   	push   ebx
c0019e18:	e8 49 a6 ff ff       	call   c0014466 <Device::setName(char const*)>
c0019e1d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019e24:	0f 20 c0             	mov    eax,cr0
c0019e27:	83 e0 14             	and    eax,0x14
c0019e2a:	83 c4 10             	add    esp,0x10
c0019e2d:	83 f8 04             	cmp    eax,0x4
c0019e30:	75 1f                	jne    c0019e51 <CPU::detectFeatures()+0x9c7>
c0019e32:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019e39:	eb 32                	jmp    c0019e6d <CPU::detectFeatures()+0x9e3>
c0019e3b:	50                   	push   eax
c0019e3c:	50                   	push   eax
c0019e3d:	68 02 c9 02 c0       	push   0xc002c902
c0019e42:	53                   	push   ebx
c0019e43:	e8 1e a6 ff ff       	call   c0014466 <Device::setName(char const*)>
c0019e48:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019e4f:	eb d3                	jmp    c0019e24 <CPU::detectFeatures()+0x99a>
c0019e51:	e8 33 64 fe ff       	call   c0000289 <hasLegacyFPU>
c0019e56:	83 e0 01             	and    eax,0x1
c0019e59:	8d 14 00             	lea    edx,[eax+eax*1]
c0019e5c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019e62:	83 e0 fd             	and    eax,0xfffffffd
c0019e65:	09 d0                	or     eax,edx
c0019e67:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019e6d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019e74:	83 c4 4c             	add    esp,0x4c
c0019e77:	5b                   	pop    ebx
c0019e78:	5e                   	pop    esi
c0019e79:	5f                   	pop    edi
c0019e7a:	5d                   	pop    ebp
c0019e7b:	c3                   	ret    

c0019e7c <CPU::setupSMEP()>:
c0019e7c:	0f 20 e0             	mov    eax,cr4
c0019e7f:	0d 00 00 10 00       	or     eax,0x100000
c0019e84:	0f 22 e0             	mov    cr4,eax
c0019e87:	c3                   	ret    

c0019e88 <CPU::setupUMIP()>:
c0019e88:	0f 20 e0             	mov    eax,cr4
c0019e8b:	80 cc 08             	or     ah,0x8
c0019e8e:	0f 22 e0             	mov    cr4,eax
c0019e91:	c3                   	ret    

c0019e92 <CPU::setupTSC()>:
c0019e92:	0f 20 e0             	mov    eax,cr4
c0019e95:	83 c8 04             	or     eax,0x4
c0019e98:	0f 22 e0             	mov    cr4,eax
c0019e9b:	c3                   	ret    

c0019e9c <CPU::setupLargePages()>:
c0019e9c:	0f 20 e0             	mov    eax,cr4
c0019e9f:	83 c8 10             	or     eax,0x10
c0019ea2:	0f 22 e0             	mov    cr4,eax
c0019ea5:	c3                   	ret    

c0019ea6 <CPU::setupPAT()>:
c0019ea6:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0019eab:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019eb2:	74 2c                	je     c0019ee0 <CPU::setupPAT()+0x3a>
c0019eb4:	53                   	push   ebx
c0019eb5:	83 ec 10             	sub    esp,0x10
c0019eb8:	68 77 02 00 00       	push   0x277
c0019ebd:	50                   	push   eax
c0019ebe:	e8 6f 4f ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019ec3:	83 e2 f8             	and    edx,0xfffffff8
c0019ec6:	83 ca 01             	or     edx,0x1
c0019ec9:	52                   	push   edx
c0019eca:	50                   	push   eax
c0019ecb:	68 77 02 00 00       	push   0x277
c0019ed0:	ff 35 08 f4 02 c0    	push   DWORD PTR ds:0xc002f408
c0019ed6:	e8 83 4f ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019edb:	83 c4 28             	add    esp,0x28
c0019ede:	5b                   	pop    ebx
c0019edf:	c3                   	ret    
c0019ee0:	c3                   	ret    
c0019ee1:	90                   	nop

c0019ee2 <CPU::setupMTRR()>:
c0019ee2:	c3                   	ret    
c0019ee3:	90                   	nop

c0019ee4 <CPU::setupGlobalPages()>:
c0019ee4:	0f 20 e0             	mov    eax,cr4
c0019ee7:	0c 80                	or     al,0x80
c0019ee9:	0f 22 e0             	mov    cr4,eax
c0019eec:	c3                   	ret    
c0019eed:	90                   	nop

c0019eee <CPU::allowUsermodeDataAccess()>:
c0019eee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ef2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ef9:	74 03                	je     c0019efe <CPU::allowUsermodeDataAccess()+0x10>
c0019efb:	0f 01 cb             	stac   
c0019efe:	c3                   	ret    
c0019eff:	90                   	nop

c0019f00 <CPU::prohibitUsermodeDataAccess()>:
c0019f00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f04:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019f0b:	74 03                	je     c0019f10 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019f0d:	0f 01 ca             	clac   
c0019f10:	c3                   	ret    
c0019f11:	90                   	nop

c0019f12 <CPU::setupSMAP()>:
c0019f12:	0f 20 e0             	mov    eax,cr4
c0019f15:	0d 00 00 20 00       	or     eax,0x200000
c0019f1a:	0f 22 e0             	mov    cr4,eax
c0019f1d:	eb e1                	jmp    c0019f00 <CPU::prohibitUsermodeDataAccess()>
c0019f1f:	90                   	nop

c0019f20 <CPU::setupFeatures()>:
c0019f20:	83 ec 0c             	sub    esp,0xc
c0019f23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f27:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019f2e:	74 07                	je     c0019f37 <CPU::setupFeatures()+0x17>
c0019f30:	52                   	push   edx
c0019f31:	e8 46 ff ff ff       	call   c0019e7c <CPU::setupSMEP()>
c0019f36:	58                   	pop    eax
c0019f37:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019f3e:	74 07                	je     c0019f47 <CPU::setupFeatures()+0x27>
c0019f40:	52                   	push   edx
c0019f41:	e8 cc ff ff ff       	call   c0019f12 <CPU::setupSMAP()>
c0019f46:	58                   	pop    eax
c0019f47:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019f4e:	74 07                	je     c0019f57 <CPU::setupFeatures()+0x37>
c0019f50:	52                   	push   edx
c0019f51:	e8 32 ff ff ff       	call   c0019e88 <CPU::setupUMIP()>
c0019f56:	58                   	pop    eax
c0019f57:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019f5e:	74 07                	je     c0019f67 <CPU::setupFeatures()+0x47>
c0019f60:	52                   	push   edx
c0019f61:	e8 2c ff ff ff       	call   c0019e92 <CPU::setupTSC()>
c0019f66:	58                   	pop    eax
c0019f67:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019f6e:	74 07                	je     c0019f77 <CPU::setupFeatures()+0x57>
c0019f70:	52                   	push   edx
c0019f71:	e8 26 ff ff ff       	call   c0019e9c <CPU::setupLargePages()>
c0019f76:	59                   	pop    ecx
c0019f77:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019f7e:	74 07                	je     c0019f87 <CPU::setupFeatures()+0x67>
c0019f80:	52                   	push   edx
c0019f81:	e8 5e ff ff ff       	call   c0019ee4 <CPU::setupGlobalPages()>
c0019f86:	58                   	pop    eax
c0019f87:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019f8e:	74 0c                	je     c0019f9c <CPU::setupFeatures()+0x7c>
c0019f90:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019f94:	83 c4 0c             	add    esp,0xc
c0019f97:	e9 0a ff ff ff       	jmp    c0019ea6 <CPU::setupPAT()>
c0019f9c:	83 c4 0c             	add    esp,0xc
c0019f9f:	c3                   	ret    

c0019fa0 <CPU::open(int, int, void*)>:
c0019fa0:	57                   	push   edi
c0019fa1:	56                   	push   esi
c0019fa2:	53                   	push   ebx
c0019fa3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019fa7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019fab:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019fb1:	83 ec 0c             	sub    esp,0xc
c0019fb4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019fba:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019fc0:	50                   	push   eax
c0019fc1:	e8 58 51 ff ff       	call   c000f11e <GDT::setup()>
c0019fc6:	83 c4 0c             	add    esp,0xc
c0019fc9:	6a 00                	push   0x0
c0019fcb:	68 ef be ad de       	push   0xdeadbeef
c0019fd0:	57                   	push   edi
c0019fd1:	e8 cc 73 ff ff       	call   c00113a2 <TSS::setup(unsigned long, unsigned long)>
c0019fd6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fd9:	e8 a4 73 ff ff       	call   c0011382 <TSS::flush()>
c0019fde:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019fe4:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fe7:	e8 96 53 ff ff       	call   c000f382 <IDT::setup()>
c0019fec:	b8 00 04 00 00       	mov    eax,0x400
c0019ff1:	0f 23 f8             	mov    db7,eax
c0019ff4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ffe:	e8 f5 5e ff ff       	call   c000fef8 <Phys::allocatePage()>
c001a003:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a009:	89 30                	mov    DWORD PTR [eax],esi
c001a00b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a011:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a014:	58                   	pop    eax
c001a015:	5a                   	pop    edx
c001a016:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a01c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a020:	e8 1d 85 ff ff       	call   c0012542 <VAS::setCPUSpecific(unsigned long)>
c001a025:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a028:	e8 5d f4 ff ff       	call   c001948a <CPU::detectFeatures()>
c001a02d:	e8 8b b8 ff ff       	call   c00158bd <setupInterruptController()>
c001a032:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001a038:	a1 20 f4 02 c0       	mov    eax,ds:0xc002f420
c001a03d:	83 e0 10             	and    eax,0x10
c001a040:	83 f8 01             	cmp    eax,0x1
c001a043:	19 c0                	sbb    eax,eax
c001a045:	83 e0 46             	and    eax,0x46
c001a048:	83 c0 1e             	add    eax,0x1e
c001a04b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a04e:	e8 c2 ce ff ff       	call   c0016f15 <setupTimer(int)>
c001a053:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001a059:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a05c:	e8 bf fe ff ff       	call   c0019f20 <CPU::setupFeatures()>
c001a061:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a064:	e8 a5 f1 ff ff       	call   c001920e <CPU::displayFeatures()>
c001a069:	83 c4 10             	add    esp,0x10
c001a06c:	31 c0                	xor    eax,eax
c001a06e:	5b                   	pop    ebx
c001a06f:	5e                   	pop    esi
c001a070:	5f                   	pop    edi
c001a071:	c3                   	ret    

c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001a072:	57                   	push   edi
c001a073:	56                   	push   esi
c001a074:	53                   	push   ebx
c001a075:	51                   	push   ecx
c001a076:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a07a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001a07d:	0f 02 c0             	lar    eax,ax
c001a080:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001a083:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a087:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001a08a:	88 ca                	mov    dl,cl
c001a08c:	c0 ea 06             	shr    dl,0x6
c001a08f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001a093:	89 ca                	mov    edx,ecx
c001a095:	66 c1 ea 03          	shr    dx,0x3
c001a099:	83 e2 07             	and    edx,0x7
c001a09c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001a0a1:	88 17                	mov    BYTE PTR [edi],dl
c001a0a3:	0f 84 a6 01 00 00    	je     c001a24f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001a0a9:	83 e1 07             	and    ecx,0x7
c001a0ac:	80 f9 04             	cmp    cl,0x4
c001a0af:	0f 84 98 00 00 00    	je     c001a14d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001a0b5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0ba:	0f 95 c0             	setne  al
c001a0bd:	80 f9 05             	cmp    cl,0x5
c001a0c0:	0f 95 c2             	setne  dl
c001a0c3:	08 c2                	or     dl,al
c001a0c5:	74 79                	je     c001a140 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001a0c7:	84 c9                	test   cl,cl
c001a0c9:	75 05                	jne    c001a0d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001a0cb:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a0ce:	eb 3c                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0d0:	80 f9 01             	cmp    cl,0x1
c001a0d3:	75 05                	jne    c001a0da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001a0d5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a0d8:	eb 32                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0da:	80 f9 02             	cmp    cl,0x2
c001a0dd:	75 05                	jne    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001a0df:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a0e2:	eb 28                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0e4:	31 c0                	xor    eax,eax
c001a0e6:	80 f9 03             	cmp    cl,0x3
c001a0e9:	75 05                	jne    c001a0f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001a0eb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0ee:	eb 1c                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0f0:	80 f9 05             	cmp    cl,0x5
c001a0f3:	75 05                	jne    c001a0fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001a0f5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0f8:	eb 12                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a0fa:	80 f9 06             	cmp    cl,0x6
c001a0fd:	75 05                	jne    c001a104 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001a0ff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a102:	eb 08                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a104:	80 f9 07             	cmp    cl,0x7
c001a107:	75 03                	jne    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a109:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a10c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a111:	75 10                	jne    c001a123 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001a113:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001a117:	b9 03 00 00 00       	mov    ecx,0x3
c001a11c:	01 d0                	add    eax,edx
c001a11e:	e9 37 01 00 00       	jmp    c001a25a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a123:	b9 02 00 00 00       	mov    ecx,0x2
c001a128:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a12d:	0f 85 27 01 00 00    	jne    c001a25a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a133:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a136:	b9 06 00 00 00       	mov    ecx,0x6
c001a13b:	e9 1a 01 00 00       	jmp    c001a25a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a140:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a143:	b9 06 00 00 00       	mov    ecx,0x6
c001a148:	e9 0f 01 00 00       	jmp    c001a25c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a14d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a150:	88 ca                	mov    dl,cl
c001a152:	c0 ea 06             	shr    dl,0x6
c001a155:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a159:	89 ca                	mov    edx,ecx
c001a15b:	66 c1 ea 03          	shr    dx,0x3
c001a15f:	83 e2 07             	and    edx,0x7
c001a162:	80 e1 07             	and    cl,0x7
c001a165:	75 05                	jne    c001a16c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a167:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a16a:	eb 4c                	jmp    c001a1b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a16c:	80 f9 01             	cmp    cl,0x1
c001a16f:	75 05                	jne    c001a176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a171:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a174:	eb 42                	jmp    c001a1b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a176:	80 f9 02             	cmp    cl,0x2
c001a179:	75 05                	jne    c001a180 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a17b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a17e:	eb 38                	jmp    c001a1b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a180:	80 f9 03             	cmp    cl,0x3
c001a183:	75 05                	jne    c001a18a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a185:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a188:	eb 2e                	jmp    c001a1b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a18a:	80 f9 04             	cmp    cl,0x4
c001a18d:	75 12                	jne    c001a1a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a18f:	f6 c4 60             	test   ah,0x60
c001a192:	75 08                	jne    c001a19c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a194:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a197:	8d 78 14             	lea    edi,[eax+0x14]
c001a19a:	eb 1c                	jmp    c001a1b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a19c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a19f:	eb 17                	jmp    c001a1b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a1a1:	80 f9 05             	cmp    cl,0x5
c001a1a4:	75 05                	jne    c001a1ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a1a6:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a1a9:	eb 0d                	jmp    c001a1b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a1ab:	80 f9 06             	cmp    cl,0x6
c001a1ae:	75 05                	jne    c001a1b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a1b0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a1b3:	eb 03                	jmp    c001a1b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a1b5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a1b8:	84 d2                	test   dl,dl
c001a1ba:	75 05                	jne    c001a1c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a1bc:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a1bf:	eb 3c                	jmp    c001a1fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1c1:	80 fa 01             	cmp    dl,0x1
c001a1c4:	75 05                	jne    c001a1cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a1c6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a1c9:	eb 32                	jmp    c001a1fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1cb:	80 fa 02             	cmp    dl,0x2
c001a1ce:	75 05                	jne    c001a1d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a1d0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a1d3:	eb 28                	jmp    c001a1fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1d5:	80 fa 03             	cmp    dl,0x3
c001a1d8:	75 05                	jne    c001a1df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a1da:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a1dd:	eb 1e                	jmp    c001a1fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1df:	31 c0                	xor    eax,eax
c001a1e1:	80 fa 04             	cmp    dl,0x4
c001a1e4:	74 17                	je     c001a1fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1e6:	80 fa 05             	cmp    dl,0x5
c001a1e9:	75 05                	jne    c001a1f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a1eb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a1ee:	eb 0d                	jmp    c001a1fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1f0:	80 fa 06             	cmp    dl,0x6
c001a1f3:	75 05                	jne    c001a1fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a1f5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a1f8:	eb 03                	jmp    c001a1fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a1fa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a1fd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a202:	0f 94 c2             	sete   dl
c001a205:	80 f9 05             	cmp    cl,0x5
c001a208:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a20c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a211:	d3 e0                	shl    eax,cl
c001a213:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a217:	74 0a                	je     c001a223 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a219:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a21c:	b9 07 00 00 00       	mov    ecx,0x7
c001a221:	eb 37                	jmp    c001a25a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a223:	01 f8                	add    eax,edi
c001a225:	b9 03 00 00 00       	mov    ecx,0x3
c001a22a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a22f:	74 2b                	je     c001a25c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a231:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a236:	75 0d                	jne    c001a245 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a238:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a23c:	01 c8                	add    eax,ecx
c001a23e:	b9 04 00 00 00       	mov    ecx,0x4
c001a243:	eb 17                	jmp    c001a25c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a245:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a248:	b9 07 00 00 00       	mov    ecx,0x7
c001a24d:	eb 0d                	jmp    c001a25c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a24f:	b9 02 00 00 00       	mov    ecx,0x2
c001a254:	b2 01                	mov    dl,0x1
c001a256:	31 c0                	xor    eax,eax
c001a258:	eb 02                	jmp    c001a25c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a25a:	31 d2                	xor    edx,edx
c001a25c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a260:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a262:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a266:	88 11                	mov    BYTE PTR [ecx],dl
c001a268:	5a                   	pop    edx
c001a269:	5b                   	pop    ebx
c001a26a:	5e                   	pop    esi
c001a26b:	5f                   	pop    edi
c001a26c:	c3                   	ret    

c001a26d <Krnl::smpEntry()>:
c001a26d:	eb fe                	jmp    c001a26d <Krnl::smpEntry()>

c001a26f <Krnl::startCPU(int)>:
c001a26f:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001a274:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a27b:	0f 84 36 01 00 00    	je     c001a3b7 <Krnl::startCPU(int)+0x148>
c001a281:	53                   	push   ebx
c001a282:	83 ec 10             	sub    esp,0x10
c001a285:	fa                   	cli    
c001a286:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001a28c:	6a 1b                	push   0x1b
c001a28e:	ff 35 08 f4 02 c0    	push   DWORD PTR ds:0xc002f408
c001a294:	e8 99 4b ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c001a299:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a29e:	89 c3                	mov    ebx,eax
c001a2a0:	58                   	pop    eax
c001a2a1:	5a                   	pop    edx
c001a2a2:	53                   	push   ebx
c001a2a3:	68 3c c9 02 c0       	push   0xc002c93c
c001a2a8:	e8 8a 8b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001a2ad:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a2b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2bb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a2c5:	c1 e0 18             	shl    eax,0x18
c001a2c8:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a2ce:	83 c4 10             	add    esp,0x10
c001a2d1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a2d7:	09 c2                	or     edx,eax
c001a2d9:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a2df:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a2e5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a2eb:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a2f1:	80 cd c5             	or     ch,0xc5
c001a2f4:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a2fa:	f3 90                	pause  
c001a2fc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a2fe:	0f ba e1 0c          	bt     ecx,0xc
c001a302:	72 f6                	jb     c001a2fa <Krnl::startCPU(int)+0x8b>
c001a304:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a30a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a310:	09 c1                	or     ecx,eax
c001a312:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a318:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a31e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a324:	80 cd 85             	or     ch,0x85
c001a327:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a32d:	f3 90                	pause  
c001a32f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a331:	0f ba e1 0c          	bt     ecx,0xc
c001a335:	72 f6                	jb     c001a32d <Krnl::startCPU(int)+0xbe>
c001a337:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a341:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a347:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a34d:	09 c1                	or     ecx,eax
c001a34f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a355:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a35b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a361:	81 c9 02 06 00 00    	or     ecx,0x602
c001a367:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a36d:	f3 90                	pause  
c001a36f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a371:	0f ba e1 0c          	bt     ecx,0xc
c001a375:	72 f6                	jb     c001a36d <Krnl::startCPU(int)+0xfe>
c001a377:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a381:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a387:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a38d:	09 c8                	or     eax,ecx
c001a38f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a395:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a39b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a3a0:	0d 02 06 00 00       	or     eax,0x602
c001a3a5:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a3ab:	f3 90                	pause  
c001a3ad:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3af:	0f ba e0 0c          	bt     eax,0xc
c001a3b3:	72 f6                	jb     c001a3ab <Krnl::startCPU(int)+0x13c>
c001a3b5:	eb fe                	jmp    c001a3b5 <Krnl::startCPU(int)+0x146>
c001a3b7:	c3                   	ret    

c001a3b8 <Krnl::startCPUs()>:
c001a3b8:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001a3bd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a3c3:	88 c2                	mov    dl,al
c001a3c5:	83 e2 0a             	and    edx,0xa
c001a3c8:	80 fa 0a             	cmp    dl,0xa
c001a3cb:	75 09                	jne    c001a3d6 <Krnl::startCPUs()+0x1e>
c001a3cd:	a8 01                	test   al,0x1
c001a3cf:	74 05                	je     c001a3d6 <Krnl::startCPUs()+0x1e>
c001a3d1:	e9 c5 5d fe ff       	jmp    c000019b <prepareTramp>
c001a3d6:	c3                   	ret    
c001a3d7:	90                   	nop

c001a3d8 <EnvVarContainer::getEnv(char const*)>:
c001a3d8:	57                   	push   edi
c001a3d9:	56                   	push   esi
c001a3da:	53                   	push   ebx
c001a3db:	31 db                	xor    ebx,ebx
c001a3dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3e1:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a3e3:	7e 2b                	jle    c001a410 <EnvVarContainer::getEnv(char const*)+0x38>
c001a3e5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a3ec:	50                   	push   eax
c001a3ed:	50                   	push   eax
c001a3ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a3f1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a3f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a3f8:	e8 9b 64 fe ff       	call   c0000898 <strcmp>
c001a3fd:	83 c4 10             	add    esp,0x10
c001a400:	85 c0                	test   eax,eax
c001a402:	75 09                	jne    c001a40d <EnvVarContainer::getEnv(char const*)+0x35>
c001a404:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a407:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a40b:	eb 05                	jmp    c001a412 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a40d:	43                   	inc    ebx
c001a40e:	eb d1                	jmp    c001a3e1 <EnvVarContainer::getEnv(char const*)+0x9>
c001a410:	31 c0                	xor    eax,eax
c001a412:	5b                   	pop    ebx
c001a413:	5e                   	pop    esi
c001a414:	5f                   	pop    edi
c001a415:	c3                   	ret    

c001a416 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a416:	55                   	push   ebp
c001a417:	57                   	push   edi
c001a418:	56                   	push   esi
c001a419:	53                   	push   ebx
c001a41a:	83 ec 28             	sub    esp,0x28
c001a41d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a421:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001a425:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a429:	56                   	push   esi
c001a42a:	e8 3d 63 fe ff       	call   c000076c <strlen>
c001a42f:	40                   	inc    eax
c001a430:	89 04 24             	mov    DWORD PTR [esp],eax
c001a433:	e8 54 54 ff ff       	call   c000f88c <malloc>
c001a438:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a43b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a43f:	e8 28 63 fe ff       	call   c000076c <strlen>
c001a444:	40                   	inc    eax
c001a445:	89 04 24             	mov    DWORD PTR [esp],eax
c001a448:	e8 3f 54 ff ff       	call   c000f88c <malloc>
c001a44d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a450:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a454:	e8 13 63 fe ff       	call   c000076c <strlen>
c001a459:	83 c4 0c             	add    esp,0xc
c001a45c:	40                   	inc    eax
c001a45d:	50                   	push   eax
c001a45e:	6a 00                	push   0x0
c001a460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a464:	e8 e7 62 fe ff       	call   c0000750 <memset>
c001a469:	89 34 24             	mov    DWORD PTR [esp],esi
c001a46c:	e8 fb 62 fe ff       	call   c000076c <strlen>
c001a471:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a475:	8d 48 01             	lea    ecx,[eax+0x1]
c001a478:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a47a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a47d:	89 de                	mov    esi,ebx
c001a47f:	e8 e8 62 fe ff       	call   c000076c <strlen>
c001a484:	83 c4 0c             	add    esp,0xc
c001a487:	40                   	inc    eax
c001a488:	50                   	push   eax
c001a489:	6a 00                	push   0x0
c001a48b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a48f:	e8 bc 62 fe ff       	call   c0000750 <memset>
c001a494:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a497:	e8 d0 62 fe ff       	call   c000076c <strlen>
c001a49c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a4a0:	8d 48 01             	lea    ecx,[eax+0x1]
c001a4a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4a8:	40                   	inc    eax
c001a4a9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a4ac:	c1 e0 03             	shl    eax,0x3
c001a4af:	5a                   	pop    edx
c001a4b0:	59                   	pop    ecx
c001a4b1:	50                   	push   eax
c001a4b2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4b5:	e8 be 53 ff ff       	call   c000f878 <realloc>
c001a4ba:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a4be:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a4c1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a4c4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a4c8:	b9 08 00 00 00       	mov    ecx,0x8
c001a4cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4cf:	83 c4 2c             	add    esp,0x2c
c001a4d2:	5b                   	pop    ebx
c001a4d3:	5e                   	pop    esi
c001a4d4:	5f                   	pop    edi
c001a4d5:	5d                   	pop    ebp
c001a4d6:	c3                   	ret    
c001a4d7:	90                   	nop

c001a4d8 <EnvVarContainer::deleteEnv(char const*)>:
c001a4d8:	c3                   	ret    
c001a4d9:	90                   	nop

c001a4da <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a4da:	55                   	push   ebp
c001a4db:	57                   	push   edi
c001a4dc:	56                   	push   esi
c001a4dd:	53                   	push   ebx
c001a4de:	81 ec 38 01 00 00    	sub    esp,0x138
c001a4e4:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a4eb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a4f2:	68 14 01 00 00       	push   0x114
c001a4f7:	e8 90 53 ff ff       	call   c000f88c <malloc>
c001a4fc:	83 c4 0c             	add    esp,0xc
c001a4ff:	89 c5                	mov    ebp,eax
c001a501:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a504:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a50b:	50                   	push   eax
c001a50c:	e8 85 8e ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001a511:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a514:	e8 4f 91 ff ff       	call   c0013668 <File::exists()>
c001a519:	83 c4 10             	add    esp,0x10
c001a51c:	84 c0                	test   al,al
c001a51e:	75 32                	jne    c001a552 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a520:	51                   	push   ecx
c001a521:	51                   	push   ecx
c001a522:	6a 12                	push   0x12
c001a524:	55                   	push   ebp
c001a525:	e8 d0 8e ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001a52a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a52d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a530:	89 34 24             	mov    DWORD PTR [esp],esi
c001a533:	e8 34 62 fe ff       	call   c000076c <strlen>
c001a538:	5a                   	pop    edx
c001a539:	31 d2                	xor    edx,edx
c001a53b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a53f:	51                   	push   ecx
c001a540:	56                   	push   esi
c001a541:	52                   	push   edx
c001a542:	50                   	push   eax
c001a543:	55                   	push   ebp
c001a544:	ff d7                	call   edi
c001a546:	83 c4 14             	add    esp,0x14
c001a549:	55                   	push   ebp
c001a54a:	e8 09 8f ff ff       	call   c0013458 <File::close()>
c001a54f:	83 c4 10             	add    esp,0x10
c001a552:	31 f6                	xor    esi,esi
c001a554:	50                   	push   eax
c001a555:	68 00 01 00 00       	push   0x100
c001a55a:	6a 00                	push   0x0
c001a55c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a560:	50                   	push   eax
c001a561:	e8 ea 61 fe ff       	call   c0000750 <memset>
c001a566:	58                   	pop    eax
c001a567:	5a                   	pop    edx
c001a568:	6a 01                	push   0x1
c001a56a:	55                   	push   ebp
c001a56b:	e8 8a 8e ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001a570:	83 c4 10             	add    esp,0x10
c001a573:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a57b:	83 ec 0c             	sub    esp,0xc
c001a57e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a581:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a585:	51                   	push   ecx
c001a586:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a58a:	52                   	push   edx
c001a58b:	6a 00                	push   0x0
c001a58d:	6a 01                	push   0x1
c001a58f:	55                   	push   ebp
c001a590:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a593:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a597:	83 c4 20             	add    esp,0x20
c001a59a:	3c 0d                	cmp    al,0xd
c001a59c:	0f 84 16 01 00 00    	je     c001a6b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a5a2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a5a7:	0f 84 fc 00 00 00    	je     c001a6a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a5ad:	3c 0a                	cmp    al,0xa
c001a5af:	74 13                	je     c001a5c4 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a5b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a5b6:	74 0c                	je     c001a5c4 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a5b8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a5be:	0f 8e e5 00 00 00    	jle    c001a6a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a5c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5c8:	83 ec 0c             	sub    esp,0xc
c001a5cb:	8d 78 01             	lea    edi,[eax+0x1]
c001a5ce:	57                   	push   edi
c001a5cf:	e8 b8 52 ff ff       	call   c000f88c <malloc>
c001a5d4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a5d8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a5dc:	8d 56 04             	lea    edx,[esi+0x4]
c001a5df:	89 14 24             	mov    DWORD PTR [esp],edx
c001a5e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a5e6:	e8 a1 52 ff ff       	call   c000f88c <malloc>
c001a5eb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a5ef:	83 c4 0c             	add    esp,0xc
c001a5f2:	57                   	push   edi
c001a5f3:	6a 00                	push   0x0
c001a5f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a5f9:	e8 52 61 fe ff       	call   c0000750 <memset>
c001a5fe:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a602:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a606:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a60a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a60c:	83 c4 0c             	add    esp,0xc
c001a60f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a613:	52                   	push   edx
c001a614:	6a 00                	push   0x0
c001a616:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a61a:	e8 31 61 fe ff       	call   c0000750 <memset>
c001a61f:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a623:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a627:	89 34 24             	mov    DWORD PTR [esp],esi
c001a62a:	e8 3d 61 fe ff       	call   c000076c <strlen>
c001a62f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a633:	89 c1                	mov    ecx,eax
c001a635:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a637:	5e                   	pop    esi
c001a638:	5f                   	pop    edi
c001a639:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a63d:	68 4d c9 02 c0       	push   0xc002c94d
c001a642:	e8 f0 87 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001a647:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a649:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a64c:	40                   	inc    eax
c001a64d:	83 c4 10             	add    esp,0x10
c001a650:	89 03                	mov    DWORD PTR [ebx],eax
c001a652:	85 d2                	test   edx,edx
c001a654:	75 0c                	jne    c001a662 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a656:	83 ec 0c             	sub    esp,0xc
c001a659:	6a 08                	push   0x8
c001a65b:	e8 2c 52 ff ff       	call   c000f88c <malloc>
c001a660:	eb 0c                	jmp    c001a66e <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a662:	c1 e0 03             	shl    eax,0x3
c001a665:	51                   	push   ecx
c001a666:	51                   	push   ecx
c001a667:	50                   	push   eax
c001a668:	52                   	push   edx
c001a669:	e8 0a 52 ff ff       	call   c000f878 <realloc>
c001a66e:	83 c4 10             	add    esp,0x10
c001a671:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a674:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a676:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a679:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a67d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a681:	b9 08 00 00 00       	mov    ecx,0x8
c001a686:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a688:	31 f6                	xor    esi,esi
c001a68a:	52                   	push   edx
c001a68b:	68 00 01 00 00       	push   0x100
c001a690:	6a 00                	push   0x0
c001a692:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a696:	50                   	push   eax
c001a697:	e8 b4 60 fe ff       	call   c0000750 <memset>
c001a69c:	83 c4 10             	add    esp,0x10
c001a69f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a6a7:	eb 0f                	jmp    c001a6b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a6a9:	3c 3d                	cmp    al,0x3d
c001a6ab:	74 07                	je     c001a6b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a6ad:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a6b1:	46                   	inc    esi
c001a6b2:	eb 04                	jmp    c001a6b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a6b4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a6b8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a6bd:	0f 85 b8 fe ff ff    	jne    c001a57b <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a6c3:	50                   	push   eax
c001a6c4:	50                   	push   eax
c001a6c5:	ff 33                	push   DWORD PTR [ebx]
c001a6c7:	68 5b c9 02 c0       	push   0xc002c95b
c001a6cc:	e8 66 87 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001a6d1:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a6d7:	5b                   	pop    ebx
c001a6d8:	5e                   	pop    esi
c001a6d9:	5f                   	pop    edi
c001a6da:	5d                   	pop    ebp
c001a6db:	c3                   	ret    

c001a6dc <EnvVarContainer::__loadSystem()>:
c001a6dc:	83 ec 10             	sub    esp,0x10
c001a6df:	68 40 e9 02 c0       	push   0xc002e940
c001a6e4:	68 86 c9 02 c0       	push   0xc002c986
c001a6e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6ed:	e8 e8 fd ff ff       	call   c001a4da <EnvVarContainer::loadFrom(char const*, char const*)>
c001a6f2:	83 c4 1c             	add    esp,0x1c
c001a6f5:	c3                   	ret    

c001a6f6 <EnvVarContainer::__loadUser()>:
c001a6f6:	c3                   	ret    
c001a6f7:	90                   	nop

c001a6f8 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a70a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a70d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a711:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a718:	90                   	nop
c001a719:	c3                   	ret    

c001a71a <EnvVarContainer::~EnvVarContainer()>:
c001a71a:	83 ec 0c             	sub    esp,0xc
c001a71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a724:	85 c0                	test   eax,eax
c001a726:	74 1d                	je     c001a745 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a72c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a72e:	85 c0                	test   eax,eax
c001a730:	74 13                	je     c001a745 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a736:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a739:	83 ec 0c             	sub    esp,0xc
c001a73c:	50                   	push   eax
c001a73d:	e8 5a 51 ff ff       	call   c000f89c <free>
c001a742:	83 c4 10             	add    esp,0x10
c001a745:	90                   	nop
c001a746:	83 c4 0c             	add    esp,0xc
c001a749:	c3                   	ret    

c001a74a <Krnl::getEnv(Process*, char const*)>:
c001a74a:	53                   	push   ebx
c001a74b:	83 ec 08             	sub    esp,0x8
c001a74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a752:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a756:	39 05 70 29 03 c0    	cmp    DWORD PTR ds:0xc0032970,eax
c001a75c:	74 04                	je     c001a762 <Krnl::getEnv(Process*, char const*)+0x18>
c001a75e:	85 c0                	test   eax,eax
c001a760:	75 0b                	jne    c001a76d <Krnl::getEnv(Process*, char const*)+0x23>
c001a762:	a1 54 1f 03 c0       	mov    eax,ds:0xc0031f54
c001a767:	85 c0                	test   eax,eax
c001a769:	75 19                	jne    c001a784 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a76b:	eb 27                	jmp    c001a794 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a76d:	52                   	push   edx
c001a76e:	52                   	push   edx
c001a76f:	53                   	push   ebx
c001a770:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a776:	e8 5d fc ff ff       	call   c001a3d8 <EnvVarContainer::getEnv(char const*)>
c001a77b:	83 c4 10             	add    esp,0x10
c001a77e:	85 c0                	test   eax,eax
c001a780:	75 28                	jne    c001a7aa <Krnl::getEnv(Process*, char const*)+0x60>
c001a782:	eb de                	jmp    c001a762 <Krnl::getEnv(Process*, char const*)+0x18>
c001a784:	52                   	push   edx
c001a785:	52                   	push   edx
c001a786:	53                   	push   ebx
c001a787:	50                   	push   eax
c001a788:	e8 4b fc ff ff       	call   c001a3d8 <EnvVarContainer::getEnv(char const*)>
c001a78d:	83 c4 10             	add    esp,0x10
c001a790:	85 c0                	test   eax,eax
c001a792:	75 16                	jne    c001a7aa <Krnl::getEnv(Process*, char const*)+0x60>
c001a794:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a798:	a1 58 1f 03 c0       	mov    eax,ds:0xc0031f58
c001a79d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a7a1:	83 c4 08             	add    esp,0x8
c001a7a4:	5b                   	pop    ebx
c001a7a5:	e9 2e fc ff ff       	jmp    c001a3d8 <EnvVarContainer::getEnv(char const*)>
c001a7aa:	83 c4 08             	add    esp,0x8
c001a7ad:	5b                   	pop    ebx
c001a7ae:	c3                   	ret    

c001a7af <Krnl::setEnvSystem(char const*, char const*)>:
c001a7af:	83 ec 10             	sub    esp,0x10
c001a7b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7ba:	ff 35 58 1f 03 c0    	push   DWORD PTR ds:0xc0031f58
c001a7c0:	e8 51 fc ff ff       	call   c001a416 <EnvVarContainer::setEnv(char const*, char const*)>
c001a7c5:	83 c4 1c             	add    esp,0x1c
c001a7c8:	c3                   	ret    

c001a7c9 <Krnl::setEnvUser(char const*, char const*)>:
c001a7c9:	a1 54 1f 03 c0       	mov    eax,ds:0xc0031f54
c001a7ce:	85 c0                	test   eax,eax
c001a7d0:	74 15                	je     c001a7e7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a7d2:	83 ec 10             	sub    esp,0x10
c001a7d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7dd:	50                   	push   eax
c001a7de:	e8 33 fc ff ff       	call   c001a416 <EnvVarContainer::setEnv(char const*, char const*)>
c001a7e3:	83 c4 1c             	add    esp,0x1c
c001a7e6:	c3                   	ret    
c001a7e7:	c3                   	ret    

c001a7e8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a7e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7ec:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a7f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7f6:	e9 1b fc ff ff       	jmp    c001a416 <EnvVarContainer::setEnv(char const*, char const*)>

c001a7fb <Krnl::deleteEnvSystem(char const*)>:
c001a7fb:	c3                   	ret    

c001a7fc <Krnl::deleteEnvUser(char const*)>:
c001a7fc:	c3                   	ret    

c001a7fd <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a7fd:	c3                   	ret    

c001a7fe <Krnl::newProcessEnv(Process*)>:
c001a7fe:	83 ec 28             	sub    esp,0x28
c001a801:	6a 0c                	push   0xc
c001a803:	e8 84 50 ff ff       	call   c000f88c <malloc>
c001a808:	5a                   	pop    edx
c001a809:	59                   	pop    ecx
c001a80a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a80e:	50                   	push   eax
c001a80f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a813:	e8 e0 fe ff ff       	call   c001a6f8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a818:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a81c:	83 c4 2c             	add    esp,0x2c
c001a81f:	c3                   	ret    

c001a820 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a820:	57                   	push   edi
c001a821:	56                   	push   esi
c001a822:	53                   	push   ebx
c001a823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a827:	83 ec 0c             	sub    esp,0xc
c001a82a:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a830:	6a 0c                	push   0xc
c001a832:	e8 55 50 ff ff       	call   c000f88c <malloc>
c001a837:	89 c3                	mov    ebx,eax
c001a839:	58                   	pop    eax
c001a83a:	5a                   	pop    edx
c001a83b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a83f:	53                   	push   ebx
c001a840:	e8 b3 fe ff ff       	call   c001a6f8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a845:	8b 07                	mov    eax,DWORD PTR [edi]
c001a847:	89 03                	mov    DWORD PTR [ebx],eax
c001a849:	c1 e0 03             	shl    eax,0x3
c001a84c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a84f:	e8 38 50 ff ff       	call   c000f88c <malloc>
c001a854:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a857:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a859:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a85c:	c1 e1 03             	shl    ecx,0x3
c001a85f:	89 c7                	mov    edi,eax
c001a861:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a863:	83 c4 10             	add    esp,0x10
c001a866:	89 d8                	mov    eax,ebx
c001a868:	5b                   	pop    ebx
c001a869:	5e                   	pop    esi
c001a86a:	5f                   	pop    edi
c001a86b:	c3                   	ret    

c001a86c <Krnl::loadSystemEnv()>:
c001a86c:	53                   	push   ebx
c001a86d:	83 ec 14             	sub    esp,0x14
c001a870:	6a 0c                	push   0xc
c001a872:	e8 15 50 ff ff       	call   c000f88c <malloc>
c001a877:	89 c3                	mov    ebx,eax
c001a879:	58                   	pop    eax
c001a87a:	5a                   	pop    edx
c001a87b:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c001a881:	53                   	push   ebx
c001a882:	e8 71 fe ff ff       	call   c001a6f8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a887:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a88a:	89 1d 58 1f 03 c0    	mov    DWORD PTR ds:0xc0031f58,ebx
c001a890:	e8 47 fe ff ff       	call   c001a6dc <EnvVarContainer::__loadSystem()>
c001a895:	83 c4 18             	add    esp,0x18
c001a898:	5b                   	pop    ebx
c001a899:	c3                   	ret    

c001a89a <Krnl::loadUserEnv()>:
c001a89a:	53                   	push   ebx
c001a89b:	83 ec 14             	sub    esp,0x14
c001a89e:	6a 0c                	push   0xc
c001a8a0:	e8 e7 4f ff ff       	call   c000f88c <malloc>
c001a8a5:	89 c3                	mov    ebx,eax
c001a8a7:	58                   	pop    eax
c001a8a8:	5a                   	pop    edx
c001a8a9:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c001a8af:	53                   	push   ebx
c001a8b0:	e8 43 fe ff ff       	call   c001a6f8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a8b5:	89 1d 54 1f 03 c0    	mov    DWORD PTR ds:0xc0031f54,ebx
c001a8bb:	83 c4 18             	add    esp,0x18
c001a8be:	5b                   	pop    ebx
c001a8bf:	c3                   	ret    

c001a8c0 <Krnl::flushEnv()>:
c001a8c0:	c3                   	ret    

c001a8c1 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a8c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c5:	8b 15 54 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031f54
c001a8cb:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a8d1:	a1 58 1f 03 c0       	mov    eax,ds:0xc0031f58
c001a8d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8d8:	03 01                	add    eax,DWORD PTR [ecx]
c001a8da:	85 d2                	test   edx,edx
c001a8dc:	74 02                	je     c001a8e0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a8de:	03 02                	add    eax,DWORD PTR [edx]
c001a8e0:	c3                   	ret    

c001a8e1 <Krnl::getProcessEnvPair(Process*, int)>:
c001a8e1:	57                   	push   edi
c001a8e2:	8b 0d 54 1f 03 c0    	mov    ecx,DWORD PTR ds:0xc0031f54
c001a8e8:	56                   	push   esi
c001a8e9:	85 c9                	test   ecx,ecx
c001a8eb:	53                   	push   ebx
c001a8ec:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a8f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a8f4:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a8fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a8fe:	8b 02                	mov    eax,DWORD PTR [edx]
c001a900:	75 47                	jne    c001a949 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a902:	39 c3                	cmp    ebx,eax
c001a904:	7c 47                	jl     c001a94d <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a906:	8b 15 58 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031f58
c001a90c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a90e:	01 c1                	add    ecx,eax
c001a910:	39 d9                	cmp    ecx,ebx
c001a912:	7e 6c                	jle    c001a980 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a914:	51                   	push   ecx
c001a915:	89 d9                	mov    ecx,ebx
c001a917:	29 c1                	sub    ecx,eax
c001a919:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a91c:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a920:	53                   	push   ebx
c001a921:	68 a8 c9 02 c0       	push   0xc002c9a8
c001a926:	e8 0c 85 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001a92b:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a931:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a933:	a1 58 1f 03 c0       	mov    eax,ds:0xc0031f58
c001a938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a93b:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a93f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a942:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a945:	89 06                	mov    DWORD PTR [esi],eax
c001a947:	eb 51                	jmp    c001a99a <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a949:	39 c3                	cmp    ebx,eax
c001a94b:	7d 05                	jge    c001a952 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a94d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a950:	eb 20                	jmp    c001a972 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a952:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a954:	8d 14 07             	lea    edx,[edi+eax*1]
c001a957:	39 da                	cmp    edx,ebx
c001a959:	7e 04                	jle    c001a95f <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a95b:	29 c3                	sub    ebx,eax
c001a95d:	eb 10                	jmp    c001a96f <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a95f:	8b 0d 58 1f 03 c0    	mov    ecx,DWORD PTR ds:0xc0031f58
c001a965:	03 11                	add    edx,DWORD PTR [ecx]
c001a967:	39 da                	cmp    edx,ebx
c001a969:	7e 15                	jle    c001a980 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a96b:	29 c3                	sub    ebx,eax
c001a96d:	29 fb                	sub    ebx,edi
c001a96f:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a972:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a976:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a979:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a97c:	89 06                	mov    DWORD PTR [esi],eax
c001a97e:	eb 1d                	jmp    c001a99d <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a980:	83 ec 0c             	sub    esp,0xc
c001a983:	68 bc c9 02 c0       	push   0xc002c9bc
c001a988:	e8 18 00 00 00       	call   c001a9a5 <Krnl::panic(char const*)>
c001a98d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a993:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a99a:	83 c4 10             	add    esp,0x10
c001a99d:	89 f0                	mov    eax,esi
c001a99f:	5b                   	pop    ebx
c001a9a0:	5e                   	pop    esi
c001a9a1:	5f                   	pop    edi
c001a9a2:	c2 04 00             	ret    0x4

c001a9a5 <Krnl::panic(char const*)>:
c001a9a5:	55                   	push   ebp
c001a9a6:	89 e5                	mov    ebp,esp
c001a9a8:	53                   	push   ebx
c001a9a9:	83 ec 0c             	sub    esp,0xc
c001a9ac:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a9af:	fa                   	cli    
c001a9b0:	c6 05 64 1f 03 c0 01 	mov    BYTE PTR ds:0xc0031f64,0x1
c001a9b7:	53                   	push   ebx
c001a9b8:	c6 05 44 e3 02 c0 00 	mov    BYTE PTR ds:0xc002e344,0x0
c001a9bf:	68 d6 c9 02 c0       	push   0xc002c9d6
c001a9c4:	e8 6e 84 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001a9c9:	58                   	pop    eax
c001a9ca:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001a9cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d5:	e8 80 62 ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c001a9da:	83 c4 0c             	add    esp,0xc
c001a9dd:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001a9e2:	6a 01                	push   0x1
c001a9e4:	6a 0f                	push   0xf
c001a9e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ec:	e8 07 5d ff ff       	call   c00106f8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a9f1:	58                   	pop    eax
c001a9f2:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001a9f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9fd:	e8 9e 64 ff ff       	call   c0010ea0 <VgaText::clearScreen()>
c001aa02:	58                   	pop    eax
c001aa03:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001aa08:	5a                   	pop    edx
c001aa09:	68 ef c9 02 c0       	push   0xc002c9ef
c001aa0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa14:	e8 cd 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa19:	59                   	pop    ecx
c001aa1a:	58                   	pop    eax
c001aa1b:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001aa20:	68 94 ca 02 c0       	push   0xc002ca94
c001aa25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa2b:	e8 b6 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa30:	58                   	pop    eax
c001aa31:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001aa36:	5a                   	pop    edx
c001aa37:	68 0b ca 02 c0       	push   0xc002ca0b
c001aa3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa42:	e8 9f 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa47:	59                   	pop    ecx
c001aa48:	58                   	pop    eax
c001aa49:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001aa4e:	53                   	push   ebx
c001aa4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa55:	e8 8c 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa5a:	58                   	pop    eax
c001aa5b:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001aa60:	5a                   	pop    edx
c001aa61:	68 2b ca 02 c0       	push   0xc002ca2b
c001aa66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa6c:	e8 75 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa71:	a1 60 1f 03 c0       	mov    eax,ds:0xc0031f60
c001aa76:	83 c4 10             	add    esp,0x10
c001aa79:	85 c0                	test   eax,eax
c001aa7b:	74 02                	je     c001aa7f <Krnl::panic(char const*)+0xda>
c001aa7d:	ff d0                	call   eax
c001aa7f:	83 ec 0c             	sub    esp,0xc
c001aa82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa85:	e8 9e 32 00 00       	call   c001dd28 <Thr::getDriverNameFromAddress(unsigned long)>
c001aa8a:	83 c4 10             	add    esp,0x10
c001aa8d:	89 c3                	mov    ebx,eax
c001aa8f:	85 c0                	test   eax,eax
c001aa91:	0f 84 50 02 00 00    	je     c001ace7 <Krnl::panic(char const*)+0x342>
c001aa97:	83 ec 08             	sub    esp,0x8
c001aa9a:	8b 15 70 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032970
c001aaa0:	68 d0 ca 02 c0       	push   0xc002cad0
c001aaa5:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001aaab:	e8 36 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aab0:	58                   	pop    eax
c001aab1:	5a                   	pop    edx
c001aab2:	8b 15 70 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032970
c001aab8:	68 0b ca 02 c0       	push   0xc002ca0b
c001aabd:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001aac3:	e8 1e 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aac8:	59                   	pop    ecx
c001aac9:	58                   	pop    eax
c001aaca:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001aacf:	53                   	push   ebx
c001aad0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad6:	e8 0b 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aadb:	83 c4 10             	add    esp,0x10
c001aade:	83 ec 08             	sub    esp,0x8
c001aae1:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001aae6:	68 2a ca 02 c0       	push   0xc002ca2a
c001aaeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaf1:	e8 f0 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aaf6:	58                   	pop    eax
c001aaf7:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001aafc:	5a                   	pop    edx
c001aafd:	68 28 cb 02 c0       	push   0xc002cb28
c001ab02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab08:	e8 d9 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab0d:	59                   	pop    ecx
c001ab0e:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ab13:	5b                   	pop    ebx
c001ab14:	68 68 cb 02 c0       	push   0xc002cb68
c001ab19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab1f:	e8 c2 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab24:	58                   	pop    eax
c001ab25:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ab2a:	5a                   	pop    edx
c001ab2b:	68 16 ca 02 c0       	push   0xc002ca16
c001ab30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab36:	e8 ab 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab3b:	59                   	pop    ecx
c001ab3c:	5b                   	pop    ebx
c001ab3d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab40:	68 2e ca 02 c0       	push   0xc002ca2e
c001ab45:	e8 ed 82 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ab4a:	58                   	pop    eax
c001ab4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ab4e:	5a                   	pop    edx
c001ab4f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001ab52:	68 37 ca 02 c0       	push   0xc002ca37
c001ab57:	e8 db 82 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ab5c:	59                   	pop    ecx
c001ab5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ab60:	5b                   	pop    ebx
c001ab61:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab63:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001ab66:	68 40 ca 02 c0       	push   0xc002ca40
c001ab6b:	e8 c7 82 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ab70:	58                   	pop    eax
c001ab71:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ab76:	5a                   	pop    edx
c001ab77:	68 ac cb 02 c0       	push   0xc002cbac
c001ab7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab82:	e8 5f 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab87:	59                   	pop    ecx
c001ab88:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ab8d:	5b                   	pop    ebx
c001ab8e:	68 49 ca 02 c0       	push   0xc002ca49
c001ab93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab99:	e8 48 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab9e:	0f 20 c0             	mov    eax,cr0
c001aba1:	5a                   	pop    edx
c001aba2:	59                   	pop    ecx
c001aba3:	50                   	push   eax
c001aba4:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001aba9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abaf:	e8 58 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001abb4:	5b                   	pop    ebx
c001abb5:	58                   	pop    eax
c001abb6:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001abbb:	68 53 ca 02 c0       	push   0xc002ca53
c001abc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abc6:	e8 1b 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001abcb:	0f 20 d0             	mov    eax,cr2
c001abce:	5a                   	pop    edx
c001abcf:	59                   	pop    ecx
c001abd0:	50                   	push   eax
c001abd1:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001abd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abdc:	e8 2b 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001abe1:	5b                   	pop    ebx
c001abe2:	58                   	pop    eax
c001abe3:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001abe8:	68 5d ca 02 c0       	push   0xc002ca5d
c001abed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abf3:	e8 ee 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001abf8:	0f 20 d8             	mov    eax,cr3
c001abfb:	5a                   	pop    edx
c001abfc:	59                   	pop    ecx
c001abfd:	50                   	push   eax
c001abfe:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ac03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac09:	e8 fe 63 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ac0e:	5b                   	pop    ebx
c001ac0f:	58                   	pop    eax
c001ac10:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ac15:	68 70 ca 02 c0       	push   0xc002ca70
c001ac1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac20:	e8 c1 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ac25:	0f 20 e0             	mov    eax,cr4
c001ac28:	5a                   	pop    edx
c001ac29:	59                   	pop    ecx
c001ac2a:	50                   	push   eax
c001ac2b:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ac30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac36:	e8 d1 63 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ac3b:	5b                   	pop    ebx
c001ac3c:	58                   	pop    eax
c001ac3d:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ac42:	68 7a ca 02 c0       	push   0xc002ca7a
c001ac47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac4d:	e8 94 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ac52:	5a                   	pop    edx
c001ac53:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ac58:	59                   	pop    ecx
c001ac59:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ac5f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ac62:	50                   	push   eax
c001ac63:	e8 a4 63 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ac68:	5b                   	pop    ebx
c001ac69:	58                   	pop    eax
c001ac6a:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ac6f:	68 91 ca 02 c0       	push   0xc002ca91
c001ac74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac7a:	e8 67 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ac7f:	5a                   	pop    edx
c001ac80:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ac85:	59                   	pop    ecx
c001ac86:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ac8c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ac8f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ac92:	50                   	push   eax
c001ac93:	e8 74 63 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ac98:	5b                   	pop    ebx
c001ac99:	58                   	pop    eax
c001ac9a:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ac9f:	68 91 ca 02 c0       	push   0xc002ca91
c001aca4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001acaa:	e8 37 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001acaf:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001acb4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001acb7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001acbd:	8b 12                	mov    edx,DWORD PTR [edx]
c001acbf:	59                   	pop    ecx
c001acc0:	5b                   	pop    ebx
c001acc1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001acc4:	50                   	push   eax
c001acc5:	e8 42 63 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001acca:	83 c4 10             	add    esp,0x10
c001accd:	b2 fe                	mov    dl,0xfe
c001accf:	e4 60                	in     al,0x60
c001acd1:	3c 1c                	cmp    al,0x1c
c001acd3:	74 04                	je     c001acd9 <Krnl::panic(char const*)+0x334>
c001acd5:	3c 5a                	cmp    al,0x5a
c001acd7:	75 f6                	jne    c001accf <Krnl::panic(char const*)+0x32a>
c001acd9:	e4 64                	in     al,0x64
c001acdb:	a8 02                	test   al,0x2
c001acdd:	75 fa                	jne    c001acd9 <Krnl::panic(char const*)+0x334>
c001acdf:	88 d0                	mov    al,dl
c001ace1:	e6 64                	out    0x64,al
c001ace3:	fa                   	cli    
c001ace4:	f4                   	hlt    
c001ace5:	eb e8                	jmp    c001accf <Krnl::panic(char const*)+0x32a>
c001ace7:	50                   	push   eax
c001ace8:	50                   	push   eax
c001ace9:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001acee:	68 fc ca 02 c0       	push   0xc002cafc
c001acf3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001acf9:	e8 e8 62 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001acfe:	58                   	pop    eax
c001acff:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ad04:	5a                   	pop    edx
c001ad05:	68 0b ca 02 c0       	push   0xc002ca0b
c001ad0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ad10:	e8 d1 62 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ad15:	59                   	pop    ecx
c001ad16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad1b:	5b                   	pop    ebx
c001ad1c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad1f:	83 c0 0c             	add    eax,0xc
c001ad22:	50                   	push   eax
c001ad23:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001ad28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ad2e:	e8 b3 62 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ad33:	83 c4 10             	add    esp,0x10
c001ad36:	e9 a3 fd ff ff       	jmp    c001aade <Krnl::panic(char const*)+0x139>

c001ad3b <Net::switchEndian16(unsigned short)>:
c001ad3b:	83 ec 04             	sub    esp,0x4
c001ad3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad42:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ad46:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ad4a:	c1 f8 08             	sar    eax,0x8
c001ad4d:	89 c2                	mov    edx,eax
c001ad4f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ad53:	c1 e0 08             	shl    eax,0x8
c001ad56:	09 d0                	or     eax,edx
c001ad58:	83 c4 04             	add    esp,0x4
c001ad5b:	c3                   	ret    

c001ad5c <Net::switchEndian32(unsigned int)>:
c001ad5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad60:	c1 e8 18             	shr    eax,0x18
c001ad63:	89 c2                	mov    edx,eax
c001ad65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad69:	c1 e0 08             	shl    eax,0x8
c001ad6c:	25 00 00 ff 00       	and    eax,0xff0000
c001ad71:	09 c2                	or     edx,eax
c001ad73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad77:	c1 e8 08             	shr    eax,0x8
c001ad7a:	25 00 ff 00 00       	and    eax,0xff00
c001ad7f:	09 c2                	or     edx,eax
c001ad81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad85:	c1 e0 18             	shl    eax,0x18
c001ad88:	09 d0                	or     eax,edx
c001ad8a:	c3                   	ret    

c001ad8b <Net::crc32Calc(unsigned char*, int)>:
c001ad8b:	83 ec 10             	sub    esp,0x10
c001ad8e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ad93:	75 07                	jne    c001ad9c <Net::crc32Calc(unsigned char*, int)+0x11>
c001ad95:	b8 00 00 00 00       	mov    eax,0x0
c001ad9a:	eb 7c                	jmp    c001ae18 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ad9c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ada1:	7f 07                	jg     c001adaa <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ada3:	b8 00 00 00 00       	mov    eax,0x0
c001ada8:	eb 6e                	jmp    c001ae18 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001adaa:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001adb2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001adba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adbe:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001adc2:	7d 4e                	jge    c001ae12 <Net::crc32Calc(unsigned char*, int)+0x87>
c001adc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adcc:	01 d0                	add    eax,edx
c001adce:	8a 00                	mov    al,BYTE PTR [eax]
c001add0:	0f b6 c0             	movzx  eax,al
c001add3:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001add7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001addf:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ade4:	7f 26                	jg     c001ae0c <Net::crc32Calc(unsigned char*, int)+0x81>
c001ade6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adea:	83 e0 01             	and    eax,0x1
c001aded:	74 0d                	je     c001adfc <Net::crc32Calc(unsigned char*, int)+0x71>
c001adef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adf3:	d1 e8                	shr    eax,1
c001adf5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001adfa:	eb 06                	jmp    c001ae02 <Net::crc32Calc(unsigned char*, int)+0x77>
c001adfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae00:	d1 e8                	shr    eax,1
c001ae02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae06:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ae0a:	eb d3                	jmp    c001addf <Net::crc32Calc(unsigned char*, int)+0x54>
c001ae0c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ae10:	eb a8                	jmp    c001adba <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ae12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae16:	f7 d0                	not    eax
c001ae18:	83 c4 10             	add    esp,0x10
c001ae1b:	c3                   	ret    

c001ae1c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ae1c:	57                   	push   edi
c001ae1d:	56                   	push   esi
c001ae1e:	53                   	push   ebx
c001ae1f:	83 ec 60             	sub    esp,0x60
c001ae22:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae29:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ae2d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001ae35:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001ae3a:	7f 1a                	jg     c001ae56 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001ae3c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae43:	8d 50 01             	lea    edx,[eax+0x1]
c001ae46:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ae4d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ae50:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001ae54:	eb df                	jmp    c001ae35 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001ae56:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae5d:	8d 50 01             	lea    edx,[eax+0x1]
c001ae60:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ae67:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ae6a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae75:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001ae79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae7d:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001ae85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae91:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae99:	89 c6                	mov    esi,eax
c001ae9b:	89 d7                	mov    edi,edx
c001ae9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae9f:	89 c8                	mov    eax,ecx
c001aea1:	89 fa                	mov    edx,edi
c001aea3:	89 f3                	mov    ebx,esi
c001aea5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001aea9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aead:	89 04 24             	mov    DWORD PTR [esp],eax
c001aeb0:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001aeb8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aebf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aec3:	8d 44 24 78          	lea    eax,[esp+0x78]
c001aec7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aecb:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aed3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aed7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aedb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aedf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aee3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aee7:	89 c6                	mov    esi,eax
c001aee9:	89 d7                	mov    edi,edx
c001aeeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aeed:	89 c8                	mov    eax,ecx
c001aeef:	89 fa                	mov    edx,edi
c001aef1:	89 f3                	mov    ebx,esi
c001aef3:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aef7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aefb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aeff:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001af07:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af0e:	0f b7 c0             	movzx  eax,ax
c001af11:	c1 f8 08             	sar    eax,0x8
c001af14:	89 c1                	mov    ecx,eax
c001af16:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af1d:	8d 50 01             	lea    edx,[eax+0x1]
c001af20:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af27:	88 ca                	mov    dl,cl
c001af29:	88 10                	mov    BYTE PTR [eax],dl
c001af2b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001af32:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af39:	8d 48 01             	lea    ecx,[eax+0x1]
c001af3c:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001af43:	88 10                	mov    BYTE PTR [eax],dl
c001af45:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af49:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001af4d:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001af54:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001af58:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001af5c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001af60:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001af64:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001af68:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af6c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001af70:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001af74:	89 c6                	mov    esi,eax
c001af76:	89 d7                	mov    edi,edx
c001af78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af7a:	89 c8                	mov    eax,ecx
c001af7c:	89 fa                	mov    edx,edi
c001af7e:	89 f3                	mov    ebx,esi
c001af80:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001af84:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001af88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001af8c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af90:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001af97:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af9e:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001afa2:	50                   	push   eax
c001afa3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001afa7:	e8 df fd ff ff       	call   c001ad8b <Net::crc32Calc(unsigned char*, int)>
c001afac:	83 c4 08             	add    esp,0x8
c001afaf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001afb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001afb7:	c1 e8 18             	shr    eax,0x18
c001afba:	89 c1                	mov    ecx,eax
c001afbc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001afc3:	8d 50 01             	lea    edx,[eax+0x1]
c001afc6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001afcd:	88 ca                	mov    dl,cl
c001afcf:	88 10                	mov    BYTE PTR [eax],dl
c001afd1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001afd5:	c1 e8 10             	shr    eax,0x10
c001afd8:	89 c1                	mov    ecx,eax
c001afda:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001afe1:	8d 50 01             	lea    edx,[eax+0x1]
c001afe4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001afeb:	88 ca                	mov    dl,cl
c001afed:	88 10                	mov    BYTE PTR [eax],dl
c001afef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aff3:	c1 e8 08             	shr    eax,0x8
c001aff6:	89 c1                	mov    ecx,eax
c001aff8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001afff:	8d 50 01             	lea    edx,[eax+0x1]
c001b002:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001b009:	88 ca                	mov    dl,cl
c001b00b:	88 10                	mov    BYTE PTR [eax],dl
c001b00d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b014:	8d 50 01             	lea    edx,[eax+0x1]
c001b017:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001b01e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b022:	88 10                	mov    BYTE PTR [eax],dl
c001b024:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b028:	83 c4 60             	add    esp,0x60
c001b02b:	5b                   	pop    ebx
c001b02c:	5e                   	pop    esi
c001b02d:	5f                   	pop    edi
c001b02e:	c3                   	ret    

c001b02f <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001b02f:	57                   	push   edi
c001b030:	56                   	push   esi
c001b031:	53                   	push   ebx
c001b032:	83 ec 70             	sub    esp,0x70
c001b035:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b03c:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001b040:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001b048:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b04f:	83 c0 0e             	add    eax,0xe
c001b052:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b056:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b05d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b061:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001b069:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b06d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b071:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b075:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b079:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001b07d:	89 c6                	mov    esi,eax
c001b07f:	89 d7                	mov    edi,edx
c001b081:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b083:	89 c8                	mov    eax,ecx
c001b085:	89 fa                	mov    edx,edi
c001b087:	89 f3                	mov    ebx,esi
c001b089:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001b08d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b091:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b095:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001b09d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0a4:	83 c0 08             	add    eax,0x8
c001b0a7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001b0ab:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b0b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b0b6:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001b0be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b0c2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b0c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b0ca:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b0ce:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b0d2:	89 c6                	mov    esi,eax
c001b0d4:	89 d7                	mov    edi,edx
c001b0d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0d8:	89 c8                	mov    eax,ecx
c001b0da:	89 fa                	mov    edx,edi
c001b0dc:	89 f3                	mov    ebx,esi
c001b0de:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b0e2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001b0e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b0ea:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001b0f2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b0f9:	8d 50 01             	lea    edx,[eax+0x1]
c001b0fc:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b103:	8a 00                	mov    al,BYTE PTR [eax]
c001b105:	0f b6 c0             	movzx  eax,al
c001b108:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001b10d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b114:	8d 50 01             	lea    edx,[eax+0x1]
c001b117:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b11e:	8a 00                	mov    al,BYTE PTR [eax]
c001b120:	0f b6 c0             	movzx  eax,al
c001b123:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001b128:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001b12d:	c1 e0 08             	shl    eax,0x8
c001b130:	89 c2                	mov    edx,eax
c001b132:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b136:	09 d0                	or     eax,edx
c001b138:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b13f:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001b143:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001b14b:	75 46                	jne    c001b193 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b14d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b154:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b157:	66 3d dc 05          	cmp    ax,0x5dc
c001b15b:	77 16                	ja     c001b173 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001b15d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b164:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b167:	0f b7 c0             	movzx  eax,ax
c001b16a:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001b171:	eb 20                	jmp    c001b193 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b173:	83 ec 0c             	sub    esp,0xc
c001b176:	68 d4 cb 02 c0       	push   0xc002cbd4
c001b17b:	e8 b7 7c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001b180:	83 c4 10             	add    esp,0x10
c001b183:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b18a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001b18e:	e9 17 01 00 00       	jmp    c001b2aa <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001b193:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b19a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b1a1:	8b 12                	mov    edx,DWORD PTR [edx]
c001b1a3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b1a7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001b1ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001b1b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b1b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b1c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1ca:	89 c6                	mov    esi,eax
c001b1cc:	89 d7                	mov    edi,edx
c001b1ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1d0:	89 c8                	mov    eax,ecx
c001b1d2:	89 fa                	mov    edx,edi
c001b1d4:	89 f3                	mov    ebx,esi
c001b1d6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001b1da:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b1de:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1e1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b1e8:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001b1ef:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b1f6:	8d 50 01             	lea    edx,[eax+0x1]
c001b1f9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b200:	8a 00                	mov    al,BYTE PTR [eax]
c001b202:	0f b6 c0             	movzx  eax,al
c001b205:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001b209:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b210:	8d 50 01             	lea    edx,[eax+0x1]
c001b213:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b21a:	8a 00                	mov    al,BYTE PTR [eax]
c001b21c:	0f b6 c0             	movzx  eax,al
c001b21f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001b223:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b22a:	8d 50 01             	lea    edx,[eax+0x1]
c001b22d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b234:	8a 00                	mov    al,BYTE PTR [eax]
c001b236:	0f b6 c0             	movzx  eax,al
c001b239:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001b23d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b244:	8d 50 01             	lea    edx,[eax+0x1]
c001b247:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b24e:	8a 00                	mov    al,BYTE PTR [eax]
c001b250:	0f b6 c0             	movzx  eax,al
c001b253:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001b257:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b25b:	c1 e0 18             	shl    eax,0x18
c001b25e:	89 c2                	mov    edx,eax
c001b260:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b264:	c1 e0 10             	shl    eax,0x10
c001b267:	09 c2                	or     edx,eax
c001b269:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b26d:	c1 e0 08             	shl    eax,0x8
c001b270:	09 d0                	or     eax,edx
c001b272:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001b276:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b27a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b281:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001b285:	83 e8 04             	sub    eax,0x4
c001b288:	83 ec 08             	sub    esp,0x8
c001b28b:	50                   	push   eax
c001b28c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b290:	e8 f6 fa ff ff       	call   c001ad8b <Net::crc32Calc(unsigned char*, int)>
c001b295:	83 c4 10             	add    esp,0x10
c001b298:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001b29c:	0f 94 c2             	sete   dl
c001b29f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b2a6:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b2a9:	90                   	nop
c001b2aa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b2b1:	83 c4 70             	add    esp,0x70
c001b2b4:	5b                   	pop    ebx
c001b2b5:	5e                   	pop    esi
c001b2b6:	5f                   	pop    edi
c001b2b7:	c2 04 00             	ret    0x4

c001b2ba <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b2ba:	55                   	push   ebp
c001b2bb:	57                   	push   edi
c001b2bc:	56                   	push   esi
c001b2bd:	53                   	push   ebx
c001b2be:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b2c4:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b2cb:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b2cd:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b2d0:	80 fb 40             	cmp    bl,0x40
c001b2d3:	75 1b                	jne    c001b2f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b2d5:	8a 16                	mov    dl,BYTE PTR [esi]
c001b2d7:	84 d2                	test   dl,dl
c001b2d9:	0f 84 f1 00 00 00    	je     c001b3d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b2df:	8d 46 01             	lea    eax,[esi+0x1]
c001b2e2:	80 fa 3a             	cmp    dl,0x3a
c001b2e5:	74 04                	je     c001b2eb <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b2e7:	89 c6                	mov    esi,eax
c001b2e9:	eb ea                	jmp    c001b2d5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b2eb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b2ee:	89 c6                	mov    esi,eax
c001b2f0:	50                   	push   eax
c001b2f1:	6a 40                	push   0x40
c001b2f3:	6a 00                	push   0x0
c001b2f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b2f9:	50                   	push   eax
c001b2fa:	e8 51 54 fe ff       	call   c0000750 <memset>
c001b2ff:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b306:	31 c0                	xor    eax,eax
c001b308:	83 c4 10             	add    esp,0x10
c001b30b:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b30d:	84 c9                	test   cl,cl
c001b30f:	0f 84 bb 00 00 00    	je     c001b3d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b315:	3d c7 00 00 00       	cmp    eax,0xc7
c001b31a:	0f 8f b0 00 00 00    	jg     c001b3d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b320:	80 f9 0a             	cmp    cl,0xa
c001b323:	0f 85 98 00 00 00    	jne    c001b3c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b329:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b32e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b332:	a8 df                	test   al,0xdf
c001b334:	0f 94 c1             	sete   cl
c001b337:	3c 23                	cmp    al,0x23
c001b339:	0f 94 c2             	sete   dl
c001b33c:	08 d1                	or     cl,dl
c001b33e:	75 4a                	jne    c001b38a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b340:	8d 50 f7             	lea    edx,[eax-0x9]
c001b343:	80 fa 01             	cmp    dl,0x1
c001b346:	76 42                	jbe    c001b38a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b348:	3c 5b                	cmp    al,0x5b
c001b34a:	75 42                	jne    c001b38e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b34c:	80 fb 40             	cmp    bl,0x40
c001b34f:	75 39                	jne    c001b38a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b351:	83 ec 0c             	sub    esp,0xc
c001b354:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b358:	52                   	push   edx
c001b359:	e8 0e 54 fe ff       	call   c000076c <strlen>
c001b35e:	83 c4 10             	add    esp,0x10
c001b361:	83 f8 3f             	cmp    eax,0x3f
c001b364:	77 6a                	ja     c001b3d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b366:	50                   	push   eax
c001b367:	50                   	push   eax
c001b368:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b36c:	52                   	push   edx
c001b36d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b371:	52                   	push   edx
c001b372:	e8 95 54 fe ff       	call   c000080c <strcpy>
c001b377:	58                   	pop    eax
c001b378:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b37c:	52                   	push   edx
c001b37d:	e8 ea 53 fe ff       	call   c000076c <strlen>
c001b382:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b387:	83 c4 10             	add    esp,0x10
c001b38a:	31 d2                	xor    edx,edx
c001b38c:	eb 3a                	jmp    c001b3c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b38e:	80 fb 40             	cmp    bl,0x40
c001b391:	74 06                	je     c001b399 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b393:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b397:	eb 20                	jmp    c001b3b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b399:	50                   	push   eax
c001b39a:	50                   	push   eax
c001b39b:	55                   	push   ebp
c001b39c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b3a0:	50                   	push   eax
c001b3a1:	e8 f2 54 fe ff       	call   c0000898 <strcmp>
c001b3a6:	83 c4 10             	add    esp,0x10
c001b3a9:	85 c0                	test   eax,eax
c001b3ab:	75 dd                	jne    c001b38a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b3ad:	eb e4                	jmp    c001b393 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b3af:	8d 50 01             	lea    edx,[eax+0x1]
c001b3b2:	80 f9 3d             	cmp    cl,0x3d
c001b3b5:	74 1d                	je     c001b3d4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b3b7:	89 d0                	mov    eax,edx
c001b3b9:	8a 08                	mov    cl,BYTE PTR [eax]
c001b3bb:	84 c9                	test   cl,cl
c001b3bd:	75 f0                	jne    c001b3af <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b3bf:	eb 0f                	jmp    c001b3d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b3c1:	8d 50 01             	lea    edx,[eax+0x1]
c001b3c4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b3c8:	47                   	inc    edi
c001b3c9:	89 d0                	mov    eax,edx
c001b3cb:	e9 3b ff ff ff       	jmp    c001b30b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b3d0:	31 c0                	xor    eax,eax
c001b3d2:	eb 33                	jmp    c001b407 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b3d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b3d8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b3db:	50                   	push   eax
c001b3dc:	50                   	push   eax
c001b3dd:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b3e1:	50                   	push   eax
c001b3e2:	56                   	push   esi
c001b3e3:	e8 b0 54 fe ff       	call   c0000898 <strcmp>
c001b3e8:	83 c4 10             	add    esp,0x10
c001b3eb:	85 c0                	test   eax,eax
c001b3ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b3f1:	75 97                	jne    c001b38a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b3f3:	51                   	push   ecx
c001b3f4:	51                   	push   ecx
c001b3f5:	52                   	push   edx
c001b3f6:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b3fd:	e8 0a 54 fe ff       	call   c000080c <strcpy>
c001b402:	83 c4 10             	add    esp,0x10
c001b405:	b0 01                	mov    al,0x1
c001b407:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b40d:	5b                   	pop    ebx
c001b40e:	5e                   	pop    esi
c001b40f:	5f                   	pop    edi
c001b410:	5d                   	pop    ebp
c001b411:	c3                   	ret    

c001b412 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b412:	57                   	push   edi
c001b413:	56                   	push   esi
c001b414:	53                   	push   ebx
c001b415:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b41b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b422:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b429:	53                   	push   ebx
c001b42a:	e8 3d 53 fe ff       	call   c000076c <strlen>
c001b42f:	89 34 24             	mov    DWORD PTR [esp],esi
c001b432:	89 c7                	mov    edi,eax
c001b434:	e8 33 53 fe ff       	call   c000076c <strlen>
c001b439:	83 c4 10             	add    esp,0x10
c001b43c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b440:	3d ff 00 00 00       	cmp    eax,0xff
c001b445:	0f 87 d3 00 00 00    	ja     c001b51e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b44b:	57                   	push   edi
c001b44c:	57                   	push   edi
c001b44d:	56                   	push   esi
c001b44e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b452:	56                   	push   esi
c001b453:	e8 b4 53 fe ff       	call   c000080c <strcpy>
c001b458:	58                   	pop    eax
c001b459:	5a                   	pop    edx
c001b45a:	68 29 d1 02 c0       	push   0xc002d129
c001b45f:	56                   	push   esi
c001b460:	e8 e7 54 fe ff       	call   c000094c <strcat>
c001b465:	59                   	pop    ecx
c001b466:	5f                   	pop    edi
c001b467:	53                   	push   ebx
c001b468:	56                   	push   esi
c001b469:	e8 de 54 fe ff       	call   c000094c <strcat>
c001b46e:	58                   	pop    eax
c001b46f:	5a                   	pop    edx
c001b470:	68 20 cc 02 c0       	push   0xc002cc20
c001b475:	56                   	push   esi
c001b476:	e8 d1 54 fe ff       	call   c000094c <strcat>
c001b47b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b482:	e8 05 44 ff ff       	call   c000f88c <malloc>
c001b487:	83 c4 0c             	add    esp,0xc
c001b48a:	89 c3                	mov    ebx,eax
c001b48c:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c001b492:	56                   	push   esi
c001b493:	50                   	push   eax
c001b494:	e8 fd 7e ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001b499:	83 c4 10             	add    esp,0x10
c001b49c:	85 db                	test   ebx,ebx
c001b49e:	74 7e                	je     c001b51e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b4a0:	51                   	push   ecx
c001b4a1:	51                   	push   ecx
c001b4a2:	6a 01                	push   0x1
c001b4a4:	53                   	push   ebx
c001b4a5:	e8 50 7f ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001b4aa:	83 c4 10             	add    esp,0x10
c001b4ad:	85 c0                	test   eax,eax
c001b4af:	74 08                	je     c001b4b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b4b1:	83 ec 0c             	sub    esp,0xc
c001b4b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4b6:	53                   	push   ebx
c001b4b7:	eb 5f                	jmp    c001b518 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b4b9:	52                   	push   edx
c001b4ba:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b4be:	50                   	push   eax
c001b4bf:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b4c3:	50                   	push   eax
c001b4c4:	53                   	push   ebx
c001b4c5:	e8 dc 81 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c001b4ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4ce:	83 c4 10             	add    esp,0x10
c001b4d1:	89 c1                	mov    ecx,eax
c001b4d3:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b4d7:	74 31                	je     c001b50a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b4d9:	83 ec 0c             	sub    esp,0xc
c001b4dc:	50                   	push   eax
c001b4dd:	e8 aa 43 ff ff       	call   c000f88c <malloc>
c001b4e2:	89 c6                	mov    esi,eax
c001b4e4:	58                   	pop    eax
c001b4e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4e7:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b4eb:	52                   	push   edx
c001b4ec:	56                   	push   esi
c001b4ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b4f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b4f5:	53                   	push   ebx
c001b4f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b4f9:	83 c4 20             	add    esp,0x20
c001b4fc:	85 c0                	test   eax,eax
c001b4fe:	75 0a                	jne    c001b50a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b500:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b504:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b508:	74 18                	je     c001b522 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b50a:	83 ec 0c             	sub    esp,0xc
c001b50d:	53                   	push   ebx
c001b50e:	e8 45 7f ff ff       	call   c0013458 <File::close()>
c001b513:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b515:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b518:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b51b:	83 c4 10             	add    esp,0x10
c001b51e:	31 c0                	xor    eax,eax
c001b520:	eb 3b                	jmp    c001b55d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b522:	83 ec 0c             	sub    esp,0xc
c001b525:	53                   	push   ebx
c001b526:	e8 2d 7f ff ff       	call   c0013458 <File::close()>
c001b52b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b52d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b530:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b533:	83 c4 0c             	add    esp,0xc
c001b536:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b53d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b544:	56                   	push   esi
c001b545:	e8 70 fd ff ff       	call   c001b2ba <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b54a:	89 34 24             	mov    DWORD PTR [esp],esi
c001b54d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b551:	e8 46 43 ff ff       	call   c000f89c <free>
c001b556:	83 c4 10             	add    esp,0x10
c001b559:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b55d:	81 c4 20 01 00 00    	add    esp,0x120
c001b563:	5b                   	pop    ebx
c001b564:	5e                   	pop    esi
c001b565:	5f                   	pop    edi
c001b566:	c3                   	ret    

c001b567 <Reg::getLine(char*, char*, char*)>:
c001b567:	57                   	push   edi
c001b568:	56                   	push   esi
c001b569:	53                   	push   ebx
c001b56a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b56e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b572:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b576:	57                   	push   edi
c001b577:	56                   	push   esi
c001b578:	53                   	push   ebx
c001b579:	68 25 cc 02 c0       	push   0xc002cc25
c001b57e:	e8 8f fe ff ff       	call   c001b412 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b583:	83 c4 10             	add    esp,0x10
c001b586:	84 c0                	test   al,al
c001b588:	75 10                	jne    c001b59a <Reg::getLine(char*, char*, char*)+0x33>
c001b58a:	57                   	push   edi
c001b58b:	56                   	push   esi
c001b58c:	53                   	push   ebx
c001b58d:	68 4a cc 02 c0       	push   0xc002cc4a
c001b592:	e8 7b fe ff ff       	call   c001b412 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b597:	83 c4 10             	add    esp,0x10
c001b59a:	5b                   	pop    ebx
c001b59b:	5e                   	pop    esi
c001b59c:	5f                   	pop    edi
c001b59d:	c3                   	ret    

c001b59e <Reg::readInt(char*, char*, int*)>:
c001b59e:	55                   	push   ebp
c001b59f:	57                   	push   edi
c001b5a0:	56                   	push   esi
c001b5a1:	53                   	push   ebx
c001b5a2:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b5a8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b5ac:	57                   	push   edi
c001b5ad:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b5b4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b5bb:	e8 a7 ff ff ff       	call   c001b567 <Reg::getLine(char*, char*, char*)>
c001b5c0:	83 c4 10             	add    esp,0x10
c001b5c3:	84 c0                	test   al,al
c001b5c5:	0f 84 b3 00 00 00    	je     c001b67e <Reg::readInt(char*, char*, int*)+0xe0>
c001b5cb:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b5cf:	80 fa 2b             	cmp    dl,0x2b
c001b5d2:	74 0c                	je     c001b5e0 <Reg::readInt(char*, char*, int*)+0x42>
c001b5d4:	80 fa 2d             	cmp    dl,0x2d
c001b5d7:	75 0e                	jne    c001b5e7 <Reg::readInt(char*, char*, int*)+0x49>
c001b5d9:	ba 01 00 00 00       	mov    edx,0x1
c001b5de:	eb 0b                	jmp    c001b5eb <Reg::readInt(char*, char*, int*)+0x4d>
c001b5e0:	ba 01 00 00 00       	mov    edx,0x1
c001b5e5:	eb 02                	jmp    c001b5e9 <Reg::readInt(char*, char*, int*)+0x4b>
c001b5e7:	31 d2                	xor    edx,edx
c001b5e9:	31 c0                	xor    eax,eax
c001b5eb:	be 0a 00 00 00       	mov    esi,0xa
c001b5f0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b5f5:	75 20                	jne    c001b617 <Reg::readInt(char*, char*, int*)+0x79>
c001b5f7:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b5fb:	80 f9 78             	cmp    cl,0x78
c001b5fe:	75 0a                	jne    c001b60a <Reg::readInt(char*, char*, int*)+0x6c>
c001b600:	83 c2 02             	add    edx,0x2
c001b603:	be 10 00 00 00       	mov    esi,0x10
c001b608:	eb 0d                	jmp    c001b617 <Reg::readInt(char*, char*, int*)+0x79>
c001b60a:	80 f9 62             	cmp    cl,0x62
c001b60d:	75 08                	jne    c001b617 <Reg::readInt(char*, char*, int*)+0x79>
c001b60f:	83 c2 02             	add    edx,0x2
c001b612:	be 02 00 00 00       	mov    esi,0x2
c001b617:	01 d7                	add    edi,edx
c001b619:	31 d2                	xor    edx,edx
c001b61b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b61d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b621:	80 fb 0d             	cmp    bl,0xd
c001b624:	0f 94 c3             	sete   bl
c001b627:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b62c:	0f 94 c1             	sete   cl
c001b62f:	08 cb                	or     bl,cl
c001b631:	75 3a                	jne    c001b66d <Reg::readInt(char*, char*, int*)+0xcf>
c001b633:	0f af d6             	imul   edx,esi
c001b636:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b63b:	83 fe 10             	cmp    esi,0x10
c001b63e:	75 26                	jne    c001b666 <Reg::readInt(char*, char*, int*)+0xc8>
c001b640:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b644:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b647:	89 e9                	mov    ecx,ebp
c001b649:	80 f9 05             	cmp    cl,0x5
c001b64c:	77 06                	ja     c001b654 <Reg::readInt(char*, char*, int*)+0xb6>
c001b64e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b652:	eb 16                	jmp    c001b66a <Reg::readInt(char*, char*, int*)+0xcc>
c001b654:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b658:	83 e9 61             	sub    ecx,0x61
c001b65b:	80 f9 05             	cmp    cl,0x5
c001b65e:	77 06                	ja     c001b666 <Reg::readInt(char*, char*, int*)+0xc8>
c001b660:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b664:	eb 04                	jmp    c001b66a <Reg::readInt(char*, char*, int*)+0xcc>
c001b666:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b66a:	47                   	inc    edi
c001b66b:	eb ae                	jmp    c001b61b <Reg::readInt(char*, char*, int*)+0x7d>
c001b66d:	84 c0                	test   al,al
c001b66f:	74 02                	je     c001b673 <Reg::readInt(char*, char*, int*)+0xd5>
c001b671:	f7 da                	neg    edx
c001b673:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b67a:	89 10                	mov    DWORD PTR [eax],edx
c001b67c:	88 d8                	mov    al,bl
c001b67e:	81 c4 ec 00 00 00    	add    esp,0xec
c001b684:	5b                   	pop    ebx
c001b685:	5e                   	pop    esi
c001b686:	5f                   	pop    edi
c001b687:	5d                   	pop    ebp
c001b688:	c3                   	ret    

c001b689 <Reg::readString(char*, char*, char*, int)>:
c001b689:	57                   	push   edi
c001b68a:	56                   	push   esi
c001b68b:	53                   	push   ebx
c001b68c:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b692:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b699:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b69d:	57                   	push   edi
c001b69e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b6a5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b6ac:	e8 b6 fe ff ff       	call   c001b567 <Reg::getLine(char*, char*, char*)>
c001b6b1:	83 c4 10             	add    esp,0x10
c001b6b4:	89 c6                	mov    esi,eax
c001b6b6:	84 c0                	test   al,al
c001b6b8:	74 44                	je     c001b6fe <Reg::readString(char*, char*, char*, int)+0x75>
c001b6ba:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b6c1:	31 c0                	xor    eax,eax
c001b6c3:	4a                   	dec    edx
c001b6c4:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b6c7:	84 c9                	test   cl,cl
c001b6c9:	74 0f                	je     c001b6da <Reg::readString(char*, char*, char*, int)+0x51>
c001b6cb:	39 c2                	cmp    edx,eax
c001b6cd:	7e 0b                	jle    c001b6da <Reg::readString(char*, char*, char*, int)+0x51>
c001b6cf:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b6d2:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b6d7:	40                   	inc    eax
c001b6d8:	eb ea                	jmp    c001b6c4 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b6da:	83 ec 0c             	sub    esp,0xc
c001b6dd:	53                   	push   ebx
c001b6de:	e8 89 50 fe ff       	call   c000076c <strlen>
c001b6e3:	83 c4 10             	add    esp,0x10
c001b6e6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b6eb:	75 11                	jne    c001b6fe <Reg::readString(char*, char*, char*, int)+0x75>
c001b6ed:	83 ec 0c             	sub    esp,0xc
c001b6f0:	53                   	push   ebx
c001b6f1:	e8 76 50 fe ff       	call   c000076c <strlen>
c001b6f6:	83 c4 10             	add    esp,0x10
c001b6f9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b6fe:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b704:	89 f0                	mov    eax,esi
c001b706:	5b                   	pop    ebx
c001b707:	5e                   	pop    esi
c001b708:	5f                   	pop    edi
c001b709:	c3                   	ret    

c001b70a <Reg::readBool(char*, char*, bool*)>:
c001b70a:	83 ec 20             	sub    esp,0x20
c001b70d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b711:	50                   	push   eax
c001b712:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b71a:	e8 7f fe ff ff       	call   c001b59e <Reg::readInt(char*, char*, int*)>
c001b71f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b724:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b728:	0f 95 02             	setne  BYTE PTR [edx]
c001b72b:	83 c4 2c             	add    esp,0x2c
c001b72e:	c3                   	ret    

c001b72f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b72f:	53                   	push   ebx
c001b730:	83 ec 1c             	sub    esp,0x1c
c001b733:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b737:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b73b:	50                   	push   eax
c001b73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b744:	e8 c1 ff ff ff       	call   c001b70a <Reg::readBool(char*, char*, bool*)>
c001b749:	83 c4 10             	add    esp,0x10
c001b74c:	84 c0                	test   al,al
c001b74e:	74 04                	je     c001b754 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b750:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b754:	88 d8                	mov    al,bl
c001b756:	83 c4 18             	add    esp,0x18
c001b759:	5b                   	pop    ebx
c001b75a:	c3                   	ret    

c001b75b <Reg::readIntWithDefault(char*, char*, int)>:
c001b75b:	53                   	push   ebx
c001b75c:	83 ec 1c             	sub    esp,0x1c
c001b75f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b763:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b767:	50                   	push   eax
c001b768:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b76c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b770:	e8 29 fe ff ff       	call   c001b59e <Reg::readInt(char*, char*, int*)>
c001b775:	83 c4 10             	add    esp,0x10
c001b778:	84 c0                	test   al,al
c001b77a:	74 04                	je     c001b780 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b77c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b780:	89 d8                	mov    eax,ebx
c001b782:	83 c4 18             	add    esp,0x18
c001b785:	5b                   	pop    ebx
c001b786:	c3                   	ret    

c001b787 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b787:	57                   	push   edi
c001b788:	56                   	push   esi
c001b789:	56                   	push   esi
c001b78a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b78e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b792:	56                   	push   esi
c001b793:	57                   	push   edi
c001b794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b79c:	e8 e8 fe ff ff       	call   c001b689 <Reg::readString(char*, char*, char*, int)>
c001b7a1:	83 c4 10             	add    esp,0x10
c001b7a4:	84 c0                	test   al,al
c001b7a6:	75 1a                	jne    c001b7c2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b7a8:	51                   	push   ecx
c001b7a9:	56                   	push   esi
c001b7aa:	6a 00                	push   0x0
c001b7ac:	57                   	push   edi
c001b7ad:	e8 9e 4f fe ff       	call   c0000750 <memset>
c001b7b2:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b7b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b7b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b7bb:	83 c4 10             	add    esp,0x10
c001b7be:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b7c2:	89 f8                	mov    eax,edi
c001b7c4:	5a                   	pop    edx
c001b7c5:	5e                   	pop    esi
c001b7c6:	5f                   	pop    edi
c001b7c7:	c3                   	ret    

c001b7c8 <Sys::eject(regs*)>:
c001b7c8:	83 ec 0c             	sub    esp,0xc
c001b7cb:	83 ca ff             	or     edx,0xffffffff
c001b7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b7d5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7da:	83 e9 41             	sub    ecx,0x41
c001b7dd:	83 f9 19             	cmp    ecx,0x19
c001b7e0:	77 18                	ja     c001b7fa <Sys::eject(regs*)+0x32>
c001b7e2:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c001b7e9:	85 c9                	test   ecx,ecx
c001b7eb:	74 0d                	je     c001b7fa <Sys::eject(regs*)+0x32>
c001b7ed:	83 ec 0c             	sub    esp,0xc
c001b7f0:	51                   	push   ecx
c001b7f1:	e8 7a af ff ff       	call   c0016770 <LogicalDisk::eject()>
c001b7f6:	83 c4 10             	add    esp,0x10
c001b7f9:	99                   	cdq    
c001b7fa:	83 c4 0c             	add    esp,0xc
c001b7fd:	c3                   	ret    

c001b7fe <Sys::exit(regs*)>:
c001b7fe:	83 ec 18             	sub    esp,0x18
c001b801:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b805:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b808:	e8 7e 38 00 00       	call   c001f08b <terminateTask(int)>
c001b80d:	83 c8 ff             	or     eax,0xffffffff
c001b810:	83 c4 1c             	add    esp,0x1c
c001b813:	89 c2                	mov    edx,eax
c001b815:	c3                   	ret    

c001b816 <Sys::getCwd(regs*)>:
c001b816:	83 ec 10             	sub    esp,0x10
c001b819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b81d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b820:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b828:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b82b:	e8 68 79 ff ff       	call   c0013198 <Fs::getcwd(Process*, char*, int)>
c001b830:	83 c4 1c             	add    esp,0x1c
c001b833:	99                   	cdq    
c001b834:	c3                   	ret    

c001b835 <Sys::getPID(regs*)>:
c001b835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b83a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b83d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b83f:	99                   	cdq    
c001b840:	c3                   	ret    

c001b841 <Sys::getRAMData(regs*)>:
c001b841:	8b 0d 54 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f454
c001b847:	6b 05 50 f4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f450,0x64
c001b84e:	99                   	cdq    
c001b84f:	f7 f9                	idiv   ecx
c001b851:	c1 e0 18             	shl    eax,0x18
c001b854:	09 c8                	or     eax,ecx
c001b856:	99                   	cdq    
c001b857:	c3                   	ret    

c001b858 <Sys::getVGAPtr(regs*)>:
c001b858:	55                   	push   ebp
c001b859:	57                   	push   edi
c001b85a:	56                   	push   esi
c001b85b:	53                   	push   ebx
c001b85c:	83 ec 18             	sub    esp,0x18
c001b85f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b863:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b866:	e8 02 33 00 00       	call   c001eb6d <Thr::processFromPID(int)>
c001b86b:	83 c4 10             	add    esp,0x10
c001b86e:	89 c1                	mov    ecx,eax
c001b870:	b8 01 00 00 00       	mov    eax,0x1
c001b875:	85 c9                	test   ecx,ecx
c001b877:	74 59                	je     c001b8d2 <Sys::getVGAPtr(regs*)+0x7a>
c001b879:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b87f:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b883:	74 0c                	je     c001b891 <Sys::getVGAPtr(regs*)+0x39>
c001b885:	83 ec 0c             	sub    esp,0xc
c001b888:	53                   	push   ebx
c001b889:	e8 cc 53 ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c001b88e:	83 c4 10             	add    esp,0x10
c001b891:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b894:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b897:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b89c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b89e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b8a1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b8a4:	81 c3 82 00 00 00    	add    ebx,0x82
c001b8aa:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b8b0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b8b3:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b8b6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b8bc:	50                   	push   eax
c001b8bd:	50                   	push   eax
c001b8be:	53                   	push   ebx
c001b8bf:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b8c2:	05 a8 0f 00 00       	add    eax,0xfa8
c001b8c7:	50                   	push   eax
c001b8c8:	e8 3f 4f fe ff       	call   c000080c <strcpy>
c001b8cd:	83 c4 10             	add    esp,0x10
c001b8d0:	31 c0                	xor    eax,eax
c001b8d2:	83 c4 0c             	add    esp,0xc
c001b8d5:	31 d2                	xor    edx,edx
c001b8d7:	5b                   	pop    ebx
c001b8d8:	5e                   	pop    esi
c001b8d9:	5f                   	pop    edi
c001b8da:	5d                   	pop    ebp
c001b8db:	c3                   	ret    

c001b8dc <Sys::loadDLL(regs*)>:
c001b8dc:	56                   	push   esi
c001b8dd:	53                   	push   ebx
c001b8de:	31 d2                	xor    edx,edx
c001b8e0:	51                   	push   ecx
c001b8e1:	b8 01 00 00 00       	mov    eax,0x1
c001b8e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8ea:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b8ee:	0f 84 8c 00 00 00    	je     c001b980 <Sys::loadDLL(regs*)+0xa4>
c001b8f4:	83 ec 0c             	sub    esp,0xc
c001b8f7:	68 14 01 00 00       	push   0x114
c001b8fc:	e8 8b 3f ff ff       	call   c000f88c <malloc>
c001b901:	83 c4 0c             	add    esp,0xc
c001b904:	89 c3                	mov    ebx,eax
c001b906:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b90b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b90e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b911:	53                   	push   ebx
c001b912:	e8 7f 7a ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001b917:	83 c4 10             	add    esp,0x10
c001b91a:	31 d2                	xor    edx,edx
c001b91c:	b8 02 00 00 00       	mov    eax,0x2
c001b921:	85 db                	test   ebx,ebx
c001b923:	74 5b                	je     c001b980 <Sys::loadDLL(regs*)+0xa4>
c001b925:	83 ec 0c             	sub    esp,0xc
c001b928:	53                   	push   ebx
c001b929:	e8 3a 7d ff ff       	call   c0013668 <File::exists()>
c001b92e:	83 c4 10             	add    esp,0x10
c001b931:	84 c0                	test   al,al
c001b933:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b935:	75 11                	jne    c001b948 <Sys::loadDLL(regs*)+0x6c>
c001b937:	83 ec 0c             	sub    esp,0xc
c001b93a:	53                   	push   ebx
c001b93b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b93e:	83 c4 10             	add    esp,0x10
c001b941:	b8 03 00 00 00       	mov    eax,0x3
c001b946:	eb 36                	jmp    c001b97e <Sys::loadDLL(regs*)+0xa2>
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	53                   	push   ebx
c001b94c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b94f:	58                   	pop    eax
c001b950:	5a                   	pop    edx
c001b951:	6a 00                	push   0x0
c001b953:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b956:	e8 1e 24 00 00       	call   c001dd79 <Thr::loadDLL(char const*, bool)>
c001b95b:	83 c4 10             	add    esp,0x10
c001b95e:	89 c1                	mov    ecx,eax
c001b960:	31 d2                	xor    edx,edx
c001b962:	b8 04 00 00 00       	mov    eax,0x4
c001b967:	85 c9                	test   ecx,ecx
c001b969:	74 15                	je     c001b980 <Sys::loadDLL(regs*)+0xa4>
c001b96b:	53                   	push   ebx
c001b96c:	53                   	push   ebx
c001b96d:	ff 35 08 f4 02 c0    	push   DWORD PTR ds:0xc002f408
c001b973:	51                   	push   ecx
c001b974:	e8 2b 26 00 00       	call   c001dfa4 <Thr::executeDLL(unsigned long, void*)>
c001b979:	83 c4 10             	add    esp,0x10
c001b97c:	31 c0                	xor    eax,eax
c001b97e:	31 d2                	xor    edx,edx
c001b980:	59                   	pop    ecx
c001b981:	5b                   	pop    ebx
c001b982:	5e                   	pop    esi
c001b983:	c3                   	ret    

c001b984 <Sys::read(regs*)>:
c001b984:	57                   	push   edi
c001b985:	56                   	push   esi
c001b986:	53                   	push   ebx
c001b987:	83 ec 10             	sub    esp,0x10
c001b98a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b98e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b991:	83 f8 02             	cmp    eax,0x2
c001b994:	77 10                	ja     c001b9a6 <Sys::read(regs*)+0x22>
c001b996:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b99b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b99e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b9a4:	eb 0e                	jmp    c001b9b4 <Sys::read(regs*)+0x30>
c001b9a6:	83 ec 0c             	sub    esp,0xc
c001b9a9:	50                   	push   eax
c001b9aa:	e8 2c 5f ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001b9af:	83 c4 10             	add    esp,0x10
c001b9b2:	89 c1                	mov    ecx,eax
c001b9b4:	83 c8 ff             	or     eax,0xffffffff
c001b9b7:	85 c9                	test   ecx,ecx
c001b9b9:	89 c2                	mov    edx,eax
c001b9bb:	74 28                	je     c001b9e5 <Sys::read(regs*)+0x61>
c001b9bd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9c5:	31 ff                	xor    edi,edi
c001b9c7:	83 ec 0c             	sub    esp,0xc
c001b9ca:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b9cc:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b9d0:	52                   	push   edx
c001b9d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9d4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b9d7:	57                   	push   edi
c001b9d8:	56                   	push   esi
c001b9d9:	51                   	push   ecx
c001b9da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b9dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b9e1:	83 c4 20             	add    esp,0x20
c001b9e4:	99                   	cdq    
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	5b                   	pop    ebx
c001b9e9:	5e                   	pop    esi
c001b9ea:	5f                   	pop    edi
c001b9eb:	c3                   	ret    

c001b9ec <Sys::sbrk(regs*)>:
c001b9ec:	56                   	push   esi
c001b9ed:	53                   	push   ebx
c001b9ee:	50                   	push   eax
c001b9ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9fb:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b9fe:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ba04:	85 db                	test   ebx,ebx
c001ba06:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ba09:	74 02                	je     c001ba0d <Sys::sbrk(regs*)+0x21>
c001ba0b:	79 06                	jns    c001ba13 <Sys::sbrk(regs*)+0x27>
c001ba0d:	89 f0                	mov    eax,esi
c001ba0f:	31 d2                	xor    edx,edx
c001ba11:	eb 2a                	jmp    c001ba3d <Sys::sbrk(regs*)+0x51>
c001ba13:	83 c8 ff             	or     eax,0xffffffff
c001ba16:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ba1c:	89 c2                	mov    edx,eax
c001ba1e:	77 1d                	ja     c001ba3d <Sys::sbrk(regs*)+0x51>
c001ba20:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ba26:	50                   	push   eax
c001ba27:	c1 ea 0c             	shr    edx,0xc
c001ba2a:	68 07 0c 00 00       	push   0xc07
c001ba2f:	52                   	push   edx
c001ba30:	51                   	push   ecx
c001ba31:	e8 34 69 ff ff       	call   c001236a <VAS::allocatePages(int, int)>
c001ba36:	89 f0                	mov    eax,esi
c001ba38:	31 d2                	xor    edx,edx
c001ba3a:	83 c4 10             	add    esp,0x10
c001ba3d:	59                   	pop    ecx
c001ba3e:	5b                   	pop    ebx
c001ba3f:	5e                   	pop    esi
c001ba40:	c3                   	ret    

c001ba41 <Sys::setCwd(regs*)>:
c001ba41:	83 ec 14             	sub    esp,0x14
c001ba44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba48:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ba4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba50:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba53:	e8 af 7c ff ff       	call   c0013707 <Fs::setcwd(Process*, char*)>
c001ba58:	83 c4 1c             	add    esp,0x1c
c001ba5b:	99                   	cdq    
c001ba5c:	c3                   	ret    

c001ba5d <Sys::setTime(regs*)>:
c001ba5d:	55                   	push   ebp
c001ba5e:	31 d2                	xor    edx,edx
c001ba60:	57                   	push   edi
c001ba61:	bf 18 00 00 00       	mov    edi,0x18
c001ba66:	56                   	push   esi
c001ba67:	53                   	push   ebx
c001ba68:	bb 3c 00 00 00       	mov    ebx,0x3c
c001ba6d:	83 ec 30             	sub    esp,0x30
c001ba70:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001ba74:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001ba77:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ba7a:	f7 f3                	div    ebx
c001ba7c:	89 d6                	mov    esi,edx
c001ba7e:	31 d2                	xor    edx,edx
c001ba80:	f7 f3                	div    ebx
c001ba82:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ba85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba89:	bb 10 0e 00 00       	mov    ebx,0xe10
c001ba8e:	31 d2                	xor    edx,edx
c001ba90:	f7 f3                	div    ebx
c001ba92:	31 d2                	xor    edx,edx
c001ba94:	bb 0c 00 00 00       	mov    ebx,0xc
c001ba99:	f7 f7                	div    edi
c001ba9b:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ba9e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001baa2:	0f b7 cd             	movzx  ecx,bp
c001baa5:	56                   	push   esi
c001baa6:	89 c7                	mov    edi,eax
c001baa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001baac:	c1 e6 10             	shl    esi,0x10
c001baaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bab3:	83 e7 1f             	and    edi,0x1f
c001bab6:	51                   	push   ecx
c001bab7:	47                   	inc    edi
c001bab8:	c1 e8 05             	shr    eax,0x5
c001babb:	31 d2                	xor    edx,edx
c001babd:	f7 f3                	div    ebx
c001babf:	31 db                	xor    ebx,ebx
c001bac1:	52                   	push   edx
c001bac2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001bac6:	57                   	push   edi
c001bac7:	68 65 cc 02 c0       	push   0xc002cc65
c001bacc:	e8 66 73 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001bad1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bad5:	89 f8                	mov    eax,edi
c001bad7:	31 c9                	xor    ecx,ecx
c001bad9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001badd:	88 c1                	mov    cl,al
c001badf:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001bae5:	88 d5                	mov    ch,dl
c001bae7:	c1 e0 10             	shl    eax,0x10
c001baea:	0f b7 d1             	movzx  edx,cx
c001baed:	09 c2                	or     edx,eax
c001baef:	89 d8                	mov    eax,ebx
c001baf1:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001baf6:	09 f0                	or     eax,esi
c001baf8:	89 c3                	mov    ebx,eax
c001bafa:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001bafe:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001bb02:	83 c4 18             	add    esp,0x18
c001bb05:	53                   	push   ebx
c001bb06:	52                   	push   edx
c001bb07:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bb0b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bb0f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001bb13:	e8 11 83 ff ff       	call   c0013e29 <datetimeToSeconds(datetime_t)>
c001bb18:	83 c4 0c             	add    esp,0xc
c001bb1b:	52                   	push   edx
c001bb1c:	50                   	push   eax
c001bb1d:	56                   	push   esi
c001bb1e:	e8 8d 84 ff ff       	call   c0013fb0 <secondsToDatetime(unsigned long long)>
c001bb23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb2b:	51                   	push   ecx
c001bb2c:	89 d6                	mov    esi,edx
c001bb2e:	51                   	push   ecx
c001bb2f:	c1 ee 10             	shr    esi,0x10
c001bb32:	89 f3                	mov    ebx,esi
c001bb34:	0f b6 f3             	movzx  esi,bl
c001bb37:	56                   	push   esi
c001bb38:	0f b6 f6             	movzx  esi,dh
c001bb3b:	0f b6 d2             	movzx  edx,dl
c001bb3e:	56                   	push   esi
c001bb3f:	52                   	push   edx
c001bb40:	89 c2                	mov    edx,eax
c001bb42:	c1 ea 10             	shr    edx,0x10
c001bb45:	52                   	push   edx
c001bb46:	0f b6 d4             	movzx  edx,ah
c001bb49:	0f b6 c0             	movzx  eax,al
c001bb4c:	52                   	push   edx
c001bb4d:	50                   	push   eax
c001bb4e:	68 81 cc 02 c0       	push   0xc002cc81
c001bb53:	e8 df 72 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001bb58:	83 c4 2c             	add    esp,0x2c
c001bb5b:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001bb60:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001bb64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001bb68:	53                   	push   ebx
c001bb69:	51                   	push   ecx
c001bb6a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001bb70:	e8 db 83 ff ff       	call   c0013f50 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001bb75:	83 f0 01             	xor    eax,0x1
c001bb78:	31 d2                	xor    edx,edx
c001bb7a:	0f b6 c0             	movzx  eax,al
c001bb7d:	83 c4 3c             	add    esp,0x3c
c001bb80:	5b                   	pop    ebx
c001bb81:	5e                   	pop    esi
c001bb82:	5f                   	pop    edi
c001bb83:	5d                   	pop    ebp
c001bb84:	c3                   	ret    

c001bb85 <Sys::timezone(regs*)>:
c001bb85:	53                   	push   ebx
c001bb86:	83 ec 08             	sub    esp,0x8
c001bb89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb8d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001bb91:	75 17                	jne    c001bbaa <Sys::timezone(regs*)+0x25>
c001bb93:	83 ec 0c             	sub    esp,0xc
c001bb96:	68 9d cc 02 c0       	push   0xc002cc9d
c001bb9b:	e8 97 72 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001bba0:	83 c8 ff             	or     eax,0xffffffff
c001bba3:	83 c4 10             	add    esp,0x10
c001bba6:	89 c2                	mov    edx,eax
c001bba8:	eb 20                	jmp    c001bbca <Sys::timezone(regs*)+0x45>
c001bbaa:	83 ec 0c             	sub    esp,0xc
c001bbad:	68 d5 cc 02 c0       	push   0xc002ccd5
c001bbb2:	e8 80 72 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001bbb7:	58                   	pop    eax
c001bbb8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001bbbb:	e8 f2 80 ff ff       	call   c0013cb2 <User::loadClockSettings(int)>
c001bbc0:	83 c4 10             	add    esp,0x10
c001bbc3:	b8 01 00 00 00       	mov    eax,0x1
c001bbc8:	31 d2                	xor    edx,edx
c001bbca:	83 c4 08             	add    esp,0x8
c001bbcd:	5b                   	pop    ebx
c001bbce:	c3                   	ret    

c001bbcf <Sys::write(regs*)>:
c001bbcf:	57                   	push   edi
c001bbd0:	56                   	push   esi
c001bbd1:	53                   	push   ebx
c001bbd2:	83 ec 10             	sub    esp,0x10
c001bbd5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbd9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bbdc:	83 f8 02             	cmp    eax,0x2
c001bbdf:	77 10                	ja     c001bbf1 <Sys::write(regs*)+0x22>
c001bbe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbe6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbe9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001bbef:	eb 0e                	jmp    c001bbff <Sys::write(regs*)+0x30>
c001bbf1:	83 ec 0c             	sub    esp,0xc
c001bbf4:	50                   	push   eax
c001bbf5:	e8 e1 5c ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bbfa:	83 c4 10             	add    esp,0x10
c001bbfd:	89 c1                	mov    ecx,eax
c001bbff:	83 c8 ff             	or     eax,0xffffffff
c001bc02:	85 c9                	test   ecx,ecx
c001bc04:	89 c2                	mov    edx,eax
c001bc06:	74 28                	je     c001bc30 <Sys::write(regs*)+0x61>
c001bc08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc10:	31 ff                	xor    edi,edi
c001bc12:	83 ec 0c             	sub    esp,0xc
c001bc15:	8b 01                	mov    eax,DWORD PTR [ecx]
c001bc17:	8d 54 24 18          	lea    edx,[esp+0x18]
c001bc1b:	52                   	push   edx
c001bc1c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc1f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001bc22:	57                   	push   edi
c001bc23:	56                   	push   esi
c001bc24:	51                   	push   ecx
c001bc25:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001bc28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bc2c:	83 c4 20             	add    esp,0x20
c001bc2f:	99                   	cdq    
c001bc30:	83 c4 10             	add    esp,0x10
c001bc33:	5b                   	pop    ebx
c001bc34:	5e                   	pop    esi
c001bc35:	5f                   	pop    edi
c001bc36:	c3                   	ret    

c001bc37 <Sys::wsbe(regs*)>:
c001bc37:	57                   	push   edi
c001bc38:	b9 0b 00 00 00       	mov    ecx,0xb
c001bc3d:	56                   	push   esi
c001bc3e:	be 14 cd 02 c0       	mov    esi,0xc002cd14
c001bc43:	53                   	push   ebx
c001bc44:	83 ec 30             	sub    esp,0x30
c001bc47:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bc4b:	fc                   	cld    
c001bc4c:	83 ec 0c             	sub    esp,0xc
c001bc4f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc51:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bc55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc5d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001bc63:	8b 06                	mov    eax,DWORD PTR [esi]
c001bc65:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001bc68:	57                   	push   edi
c001bc69:	e8 fe 4a fe ff       	call   c000076c <strlen>
c001bc6e:	5a                   	pop    edx
c001bc6f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001bc73:	52                   	push   edx
c001bc74:	31 d2                	xor    edx,edx
c001bc76:	57                   	push   edi
c001bc77:	52                   	push   edx
c001bc78:	50                   	push   eax
c001bc79:	56                   	push   esi
c001bc7a:	ff d3                	call   ebx
c001bc7c:	83 c4 14             	add    esp,0x14
c001bc7f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bc83:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc86:	e8 00 34 00 00       	call   c001f08b <terminateTask(int)>
c001bc8b:	83 c4 40             	add    esp,0x40
c001bc8e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bc93:	5b                   	pop    ebx
c001bc94:	31 d2                	xor    edx,edx
c001bc96:	5e                   	pop    esi
c001bc97:	5f                   	pop    edi
c001bc98:	c3                   	ret    

c001bc99 <Sys::yield(regs*)>:
c001bc99:	57                   	push   edi
c001bc9a:	56                   	push   esi
c001bc9b:	53                   	push   ebx
c001bc9c:	fa                   	cli    
c001bc9d:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001bca3:	e8 b0 2a 00 00       	call   c001e758 <schedule()>
c001bca8:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001bcad:	48                   	dec    eax
c001bcae:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001bcb3:	75 01                	jne    c001bcb6 <Sys::yield(regs*)+0x1d>
c001bcb5:	fb                   	sti    
c001bcb6:	8b 35 90 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa90
c001bcbc:	8b 3d 94 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa94
c001bcc2:	89 f0                	mov    eax,esi
c001bcc4:	89 fb                	mov    ebx,edi
c001bcc6:	89 f1                	mov    ecx,esi
c001bcc8:	c1 e0 07             	shl    eax,0x7
c001bccb:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001bccf:	25 80 30 0f 00       	and    eax,0xf3080
c001bcd4:	c1 eb 17             	shr    ebx,0x17
c001bcd7:	31 c8                	xor    eax,ecx
c001bcd9:	89 da                	mov    edx,ebx
c001bcdb:	5b                   	pop    ebx
c001bcdc:	5e                   	pop    esi
c001bcdd:	5f                   	pop    edi
c001bcde:	c3                   	ret    

c001bcdf <sysCallSeekDir(regs*)>:
c001bcdf:	31 c0                	xor    eax,eax
c001bce1:	31 d2                	xor    edx,edx
c001bce3:	c3                   	ret    

c001bce4 <sysCallTellDir(regs*)>:
c001bce4:	31 c0                	xor    eax,eax
c001bce6:	31 d2                	xor    edx,edx
c001bce8:	c3                   	ret    

c001bce9 <sysCallVerify(regs*)>:
c001bce9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bced:	31 d2                	xor    edx,edx
c001bcef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcf2:	c3                   	ret    

c001bcf3 <sysFormatDisk(regs*)>:
c001bcf3:	56                   	push   esi
c001bcf4:	53                   	push   ebx
c001bcf5:	53                   	push   ebx
c001bcf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bcfa:	8b 1d 94 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f594
c001bd00:	eb 25                	jmp    c001bd27 <sysFormatDisk(regs*)+0x34>
c001bd02:	83 ec 0c             	sub    esp,0xc
c001bd05:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bd08:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd0a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bd0d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bd10:	50                   	push   eax
c001bd11:	ff 34 85 20 fa 02 c0 	push   DWORD PTR [eax*4-0x3ffd05e0]
c001bd18:	53                   	push   ebx
c001bd19:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001bd1c:	83 c4 20             	add    esp,0x20
c001bd1f:	83 f8 08             	cmp    eax,0x8
c001bd22:	75 12                	jne    c001bd36 <sysFormatDisk(regs*)+0x43>
c001bd24:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001bd27:	85 db                	test   ebx,ebx
c001bd29:	75 d7                	jne    c001bd02 <sysFormatDisk(regs*)+0xf>
c001bd2b:	59                   	pop    ecx
c001bd2c:	b8 03 00 00 00       	mov    eax,0x3
c001bd31:	31 d2                	xor    edx,edx
c001bd33:	5b                   	pop    ebx
c001bd34:	5e                   	pop    esi
c001bd35:	c3                   	ret    
c001bd36:	85 c0                	test   eax,eax
c001bd38:	74 1b                	je     c001bd55 <sysFormatDisk(regs*)+0x62>
c001bd3a:	83 f8 09             	cmp    eax,0x9
c001bd3d:	74 0b                	je     c001bd4a <sysFormatDisk(regs*)+0x57>
c001bd3f:	59                   	pop    ecx
c001bd40:	b8 02 00 00 00       	mov    eax,0x2
c001bd45:	31 d2                	xor    edx,edx
c001bd47:	5b                   	pop    ebx
c001bd48:	5e                   	pop    esi
c001bd49:	c3                   	ret    
c001bd4a:	59                   	pop    ecx
c001bd4b:	b8 01 00 00 00       	mov    eax,0x1
c001bd50:	31 d2                	xor    edx,edx
c001bd52:	5b                   	pop    ebx
c001bd53:	5e                   	pop    esi
c001bd54:	c3                   	ret    
c001bd55:	59                   	pop    ecx
c001bd56:	31 c0                	xor    eax,eax
c001bd58:	31 d2                	xor    edx,edx
c001bd5a:	5b                   	pop    ebx
c001bd5b:	5e                   	pop    esi
c001bd5c:	c3                   	ret    

c001bd5d <sysSetDiskVolumeLabel(regs*)>:
c001bd5d:	56                   	push   esi
c001bd5e:	53                   	push   ebx
c001bd5f:	53                   	push   ebx
c001bd60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd64:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd67:	83 f8 19             	cmp    eax,0x19
c001bd6a:	77 29                	ja     c001bd95 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bd6c:	8b 0c 85 20 fa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd05e0]
c001bd73:	85 c9                	test   ecx,ecx
c001bd75:	74 1e                	je     c001bd95 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bd77:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bd7a:	85 d2                	test   edx,edx
c001bd7c:	74 17                	je     c001bd95 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bd7e:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bd84:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bd86:	52                   	push   edx
c001bd87:	50                   	push   eax
c001bd88:	51                   	push   ecx
c001bd89:	53                   	push   ebx
c001bd8a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bd8d:	83 c4 10             	add    esp,0x10
c001bd90:	99                   	cdq    
c001bd91:	59                   	pop    ecx
c001bd92:	5b                   	pop    ebx
c001bd93:	5e                   	pop    esi
c001bd94:	c3                   	ret    
c001bd95:	59                   	pop    ecx
c001bd96:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bd9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bda0:	5b                   	pop    ebx
c001bda1:	5e                   	pop    esi
c001bda2:	c3                   	ret    

c001bda3 <sysGetDiskVolumeLabel(regs*)>:
c001bda3:	57                   	push   edi
c001bda4:	56                   	push   esi
c001bda5:	53                   	push   ebx
c001bda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdaa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bdad:	83 fa 19             	cmp    edx,0x19
c001bdb0:	77 34                	ja     c001bde6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bdb2:	8b 0c 95 20 fa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd05e0]
c001bdb9:	85 c9                	test   ecx,ecx
c001bdbb:	74 29                	je     c001bde6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bdbd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bdc0:	85 db                	test   ebx,ebx
c001bdc2:	74 22                	je     c001bde6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bdc4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bdc7:	85 c0                	test   eax,eax
c001bdc9:	74 1b                	je     c001bde6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bdcb:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bdd1:	83 ec 0c             	sub    esp,0xc
c001bdd4:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bdd6:	50                   	push   eax
c001bdd7:	53                   	push   ebx
c001bdd8:	52                   	push   edx
c001bdd9:	51                   	push   ecx
c001bdda:	56                   	push   esi
c001bddb:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bdde:	83 c4 20             	add    esp,0x20
c001bde1:	99                   	cdq    
c001bde2:	5b                   	pop    ebx
c001bde3:	5e                   	pop    esi
c001bde4:	5f                   	pop    edi
c001bde5:	c3                   	ret    
c001bde6:	5b                   	pop    ebx
c001bde7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bdec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdf1:	5e                   	pop    esi
c001bdf2:	5f                   	pop    edi
c001bdf3:	c3                   	ret    

c001bdf4 <sysShutdown(regs*)>:
c001bdf4:	83 ec 0c             	sub    esp,0xc
c001bdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdfb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bdfe:	85 c0                	test   eax,eax
c001be00:	74 18                	je     c001be1a <sysShutdown(regs*)+0x26>
c001be02:	83 f8 01             	cmp    eax,0x1
c001be05:	74 38                	je     c001be3f <sysShutdown(regs*)+0x4b>
c001be07:	83 f8 02             	cmp    eax,0x2
c001be0a:	74 24                	je     c001be30 <sysShutdown(regs*)+0x3c>
c001be0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be11:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be16:	83 c4 0c             	add    esp,0xc
c001be19:	c3                   	ret    
c001be1a:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001be1f:	8b 10                	mov    edx,DWORD PTR [eax]
c001be21:	6a 00                	push   0x0
c001be23:	6a 00                	push   0x0
c001be25:	6a 00                	push   0x0
c001be27:	50                   	push   eax
c001be28:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be2b:	83 c4 10             	add    esp,0x10
c001be2e:	eb dc                	jmp    c001be0c <sysShutdown(regs*)+0x18>
c001be30:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001be35:	8b 10                	mov    edx,DWORD PTR [eax]
c001be37:	6a 00                	push   0x0
c001be39:	6a 00                	push   0x0
c001be3b:	6a 01                	push   0x1
c001be3d:	eb e8                	jmp    c001be27 <sysShutdown(regs*)+0x33>
c001be3f:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c001be44:	85 c0                	test   eax,eax
c001be46:	74 02                	je     c001be4a <sysShutdown(regs*)+0x56>
c001be48:	ff d0                	call   eax
c001be4a:	31 c0                	xor    eax,eax
c001be4c:	31 d2                	xor    edx,edx
c001be4e:	83 c4 0c             	add    esp,0xc
c001be51:	c3                   	ret    

c001be52 <sysCallRealpath(regs*)>:
c001be52:	83 ec 0c             	sub    esp,0xc
c001be55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be59:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001be5c:	85 d2                	test   edx,edx
c001be5e:	74 07                	je     c001be67 <sysCallRealpath(regs*)+0x15>
c001be60:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001be63:	85 c0                	test   eax,eax
c001be65:	75 0b                	jne    c001be72 <sysCallRealpath(regs*)+0x20>
c001be67:	b8 01 00 00 00       	mov    eax,0x1
c001be6c:	31 d2                	xor    edx,edx
c001be6e:	83 c4 0c             	add    esp,0xc
c001be71:	c3                   	ret    
c001be72:	51                   	push   ecx
c001be73:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be79:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be7c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001be82:	51                   	push   ecx
c001be83:	52                   	push   edx
c001be84:	50                   	push   eax
c001be85:	e8 62 73 ff ff       	call   c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>
c001be8a:	83 c4 10             	add    esp,0x10
c001be8d:	31 c0                	xor    eax,eax
c001be8f:	31 d2                	xor    edx,edx
c001be91:	83 c4 0c             	add    esp,0xc
c001be94:	c3                   	ret    

c001be95 <sysCallGetArgc(regs*)>:
c001be95:	83 ec 14             	sub    esp,0x14
c001be98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be9d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bea0:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bea6:	68 40 cd 02 c0       	push   0xc002cd40
c001beab:	e8 87 6f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001beb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beb5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beb8:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bebe:	83 c4 1c             	add    esp,0x1c
c001bec1:	99                   	cdq    
c001bec2:	c3                   	ret    

c001bec3 <sysCallReadDir(regs*)>:
c001bec3:	53                   	push   ebx
c001bec4:	83 ec 18             	sub    esp,0x18
c001bec7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001becb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bece:	83 f8 02             	cmp    eax,0x2
c001bed1:	76 53                	jbe    c001bf26 <sysCallReadDir(regs*)+0x63>
c001bed3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bed6:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bedc:	77 4f                	ja     c001bf2d <sysCallReadDir(regs*)+0x6a>
c001bede:	83 ec 0c             	sub    esp,0xc
c001bee1:	50                   	push   eax
c001bee2:	e8 f4 59 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bee7:	83 c4 10             	add    esp,0x10
c001beea:	85 c0                	test   eax,eax
c001beec:	74 50                	je     c001bf3e <sysCallReadDir(regs*)+0x7b>
c001beee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bef6:	83 ec 0c             	sub    esp,0xc
c001bef9:	8b 10                	mov    edx,DWORD PTR [eax]
c001befb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001beff:	51                   	push   ecx
c001bf00:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf03:	6a 00                	push   0x0
c001bf05:	68 10 01 00 00       	push   0x110
c001bf0a:	50                   	push   eax
c001bf0b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bf0e:	83 c4 20             	add    esp,0x20
c001bf11:	85 c0                	test   eax,eax
c001bf13:	74 38                	je     c001bf4d <sysCallReadDir(regs*)+0x8a>
c001bf15:	83 f8 07             	cmp    eax,0x7
c001bf18:	74 0c                	je     c001bf26 <sysCallReadDir(regs*)+0x63>
c001bf1a:	b8 02 00 00 00       	mov    eax,0x2
c001bf1f:	31 d2                	xor    edx,edx
c001bf21:	83 c4 18             	add    esp,0x18
c001bf24:	5b                   	pop    ebx
c001bf25:	c3                   	ret    
c001bf26:	b8 01 00 00 00       	mov    eax,0x1
c001bf2b:	eb f2                	jmp    c001bf1f <sysCallReadDir(regs*)+0x5c>
c001bf2d:	83 ec 08             	sub    esp,0x8
c001bf30:	52                   	push   edx
c001bf31:	68 64 ce 02 c0       	push   0xc002ce64
c001bf36:	e8 fc 6e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf43:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf48:	83 c4 18             	add    esp,0x18
c001bf4b:	5b                   	pop    ebx
c001bf4c:	c3                   	ret    
c001bf4d:	31 c0                	xor    eax,eax
c001bf4f:	eb ce                	jmp    c001bf1f <sysCallReadDir(regs*)+0x5c>

c001bf51 <sysCallIsATTY(regs*)>:
c001bf51:	83 ec 0c             	sub    esp,0xc
c001bf54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf5b:	83 f8 02             	cmp    eax,0x2
c001bf5e:	76 07                	jbe    c001bf67 <sysCallIsATTY(regs*)+0x16>
c001bf60:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf65:	75 26                	jne    c001bf8d <sysCallIsATTY(regs*)+0x3c>
c001bf67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf6f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bf75:	85 c0                	test   eax,eax
c001bf77:	74 24                	je     c001bf9d <sysCallIsATTY(regs*)+0x4c>
c001bf79:	83 ec 0c             	sub    esp,0xc
c001bf7c:	8b 10                	mov    edx,DWORD PTR [eax]
c001bf7e:	50                   	push   eax
c001bf7f:	ff 12                	call   DWORD PTR [edx]
c001bf81:	31 d2                	xor    edx,edx
c001bf83:	0f b6 c0             	movzx  eax,al
c001bf86:	83 c4 10             	add    esp,0x10
c001bf89:	83 c4 0c             	add    esp,0xc
c001bf8c:	c3                   	ret    
c001bf8d:	83 ec 0c             	sub    esp,0xc
c001bf90:	50                   	push   eax
c001bf91:	e8 45 59 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bf96:	83 c4 10             	add    esp,0x10
c001bf99:	85 c0                	test   eax,eax
c001bf9b:	75 dc                	jne    c001bf79 <sysCallIsATTY(regs*)+0x28>
c001bf9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfa2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfa7:	83 c4 0c             	add    esp,0xc
c001bfaa:	c3                   	ret    

c001bfab <sysCallSeek(regs*)>:
c001bfab:	53                   	push   ebx
c001bfac:	83 ec 08             	sub    esp,0x8
c001bfaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfb3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bfb6:	83 f8 02             	cmp    eax,0x2
c001bfb9:	76 4a                	jbe    c001c005 <sysCallSeek(regs*)+0x5a>
c001bfbb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bfc0:	77 32                	ja     c001bff4 <sysCallSeek(regs*)+0x49>
c001bfc2:	83 ec 0c             	sub    esp,0xc
c001bfc5:	50                   	push   eax
c001bfc6:	e8 10 59 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bfcb:	83 c4 0c             	add    esp,0xc
c001bfce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bfd1:	31 db                	xor    ebx,ebx
c001bfd3:	53                   	push   ebx
c001bfd4:	51                   	push   ecx
c001bfd5:	50                   	push   eax
c001bfd6:	e8 dd 74 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001bfdb:	83 c4 10             	add    esp,0x10
c001bfde:	85 c0                	test   eax,eax
c001bfe0:	0f 95 c0             	setne  al
c001bfe3:	31 d2                	xor    edx,edx
c001bfe5:	0f b6 c0             	movzx  eax,al
c001bfe8:	f7 d8                	neg    eax
c001bfea:	83 d2 00             	adc    edx,0x0
c001bfed:	83 c4 08             	add    esp,0x8
c001bff0:	f7 da                	neg    edx
c001bff2:	5b                   	pop    ebx
c001bff3:	c3                   	ret    
c001bff4:	83 ec 08             	sub    esp,0x8
c001bff7:	50                   	push   eax
c001bff8:	68 4b cd 02 c0       	push   0xc002cd4b
c001bffd:	e8 35 6e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c002:	83 c4 10             	add    esp,0x10
c001c005:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c00a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c00f:	83 c4 08             	add    esp,0x8
c001c012:	5b                   	pop    ebx
c001c013:	c3                   	ret    

c001c014 <sysCallTell(regs*)>:
c001c014:	53                   	push   ebx
c001c015:	83 ec 08             	sub    esp,0x8
c001c018:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c01c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c01f:	83 f8 02             	cmp    eax,0x2
c001c022:	76 5e                	jbe    c001c082 <sysCallTell(regs*)+0x6e>
c001c024:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c029:	77 2d                	ja     c001c058 <sysCallTell(regs*)+0x44>
c001c02b:	83 ec 0c             	sub    esp,0xc
c001c02e:	50                   	push   eax
c001c02f:	e8 a7 58 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c034:	5a                   	pop    edx
c001c035:	59                   	pop    ecx
c001c036:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c039:	50                   	push   eax
c001c03a:	e8 cf 74 ff ff       	call   c001350e <File::tell(unsigned long long*)>
c001c03f:	83 c4 10             	add    esp,0x10
c001c042:	85 c0                	test   eax,eax
c001c044:	0f 95 c0             	setne  al
c001c047:	31 d2                	xor    edx,edx
c001c049:	0f b6 c0             	movzx  eax,al
c001c04c:	f7 d8                	neg    eax
c001c04e:	83 d2 00             	adc    edx,0x0
c001c051:	83 c4 08             	add    esp,0x8
c001c054:	f7 da                	neg    edx
c001c056:	5b                   	pop    ebx
c001c057:	c3                   	ret    
c001c058:	83 ec 08             	sub    esp,0x8
c001c05b:	50                   	push   eax
c001c05c:	68 65 cd 02 c0       	push   0xc002cd65
c001c061:	e8 d1 6d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c066:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001c069:	83 c4 10             	add    esp,0x10
c001c06c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c072:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c079:	31 d2                	xor    edx,edx
c001c07b:	31 c0                	xor    eax,eax
c001c07d:	83 c4 08             	add    esp,0x8
c001c080:	5b                   	pop    ebx
c001c081:	c3                   	ret    
c001c082:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c087:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c08c:	83 c4 08             	add    esp,0x8
c001c08f:	5b                   	pop    ebx
c001c090:	c3                   	ret    

c001c091 <sysCallSize(regs*)>:
c001c091:	53                   	push   ebx
c001c092:	83 ec 18             	sub    esp,0x18
c001c095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c099:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c09c:	83 f8 02             	cmp    eax,0x2
c001c09f:	76 64                	jbe    c001c105 <sysCallSize(regs*)+0x74>
c001c0a1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c0a6:	77 33                	ja     c001c0db <sysCallSize(regs*)+0x4a>
c001c0a8:	83 ec 0c             	sub    esp,0xc
c001c0ab:	50                   	push   eax
c001c0ac:	e8 2a 58 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c0b1:	83 c4 0c             	add    esp,0xc
c001c0b4:	8d 54 24 13          	lea    edx,[esp+0x13]
c001c0b8:	52                   	push   edx
c001c0b9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c0bc:	50                   	push   eax
c001c0bd:	e8 e4 75 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c001c0c2:	83 c4 10             	add    esp,0x10
c001c0c5:	85 c0                	test   eax,eax
c001c0c7:	0f 95 c0             	setne  al
c001c0ca:	31 d2                	xor    edx,edx
c001c0cc:	0f b6 c0             	movzx  eax,al
c001c0cf:	f7 d8                	neg    eax
c001c0d1:	83 d2 00             	adc    edx,0x0
c001c0d4:	83 c4 18             	add    esp,0x18
c001c0d7:	f7 da                	neg    edx
c001c0d9:	5b                   	pop    ebx
c001c0da:	c3                   	ret    
c001c0db:	83 ec 08             	sub    esp,0x8
c001c0de:	50                   	push   eax
c001c0df:	68 7f cd 02 c0       	push   0xc002cd7f
c001c0e4:	e8 4e 6d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c0e9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001c0ec:	83 c4 10             	add    esp,0x10
c001c0ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c0f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c0fc:	31 d2                	xor    edx,edx
c001c0fe:	31 c0                	xor    eax,eax
c001c100:	83 c4 18             	add    esp,0x18
c001c103:	5b                   	pop    ebx
c001c104:	c3                   	ret    
c001c105:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c10a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c10f:	83 c4 18             	add    esp,0x18
c001c112:	5b                   	pop    ebx
c001c113:	c3                   	ret    

c001c114 <sysCallSizeFromFilename(regs*)>:
c001c114:	57                   	push   edi
c001c115:	56                   	push   esi
c001c116:	53                   	push   ebx
c001c117:	83 ec 20             	sub    esp,0x20
c001c11a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c11e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001c121:	83 fb 02             	cmp    ebx,0x2
c001c124:	0f 86 99 00 00 00    	jbe    c001c1c3 <sysCallSizeFromFilename(regs*)+0xaf>
c001c12a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001c130:	77 65                	ja     c001c197 <sysCallSizeFromFilename(regs*)+0x83>
c001c132:	83 ec 0c             	sub    esp,0xc
c001c135:	68 14 01 00 00       	push   0x114
c001c13a:	e8 4d 37 ff ff       	call   c000f88c <malloc>
c001c13f:	83 c4 0c             	add    esp,0xc
c001c142:	89 c6                	mov    esi,eax
c001c144:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c149:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c14c:	53                   	push   ebx
c001c14d:	56                   	push   esi
c001c14e:	e8 43 72 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001c153:	83 c4 0c             	add    esp,0xc
c001c156:	8d 44 24 23          	lea    eax,[esp+0x23]
c001c15a:	50                   	push   eax
c001c15b:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001c15e:	56                   	push   esi
c001c15f:	e8 42 75 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c001c164:	83 c4 10             	add    esp,0x10
c001c167:	85 f6                	test   esi,esi
c001c169:	74 14                	je     c001c17f <sysCallSizeFromFilename(regs*)+0x6b>
c001c16b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c16f:	8b 16                	mov    edx,DWORD PTR [esi]
c001c171:	83 ec 0c             	sub    esp,0xc
c001c174:	56                   	push   esi
c001c175:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c178:	83 c4 10             	add    esp,0x10
c001c17b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c17f:	85 c0                	test   eax,eax
c001c181:	0f 95 c0             	setne  al
c001c184:	31 d2                	xor    edx,edx
c001c186:	0f b6 c0             	movzx  eax,al
c001c189:	f7 d8                	neg    eax
c001c18b:	83 d2 00             	adc    edx,0x0
c001c18e:	83 c4 20             	add    esp,0x20
c001c191:	f7 da                	neg    edx
c001c193:	5b                   	pop    ebx
c001c194:	5e                   	pop    esi
c001c195:	5f                   	pop    edi
c001c196:	c3                   	ret    
c001c197:	83 ec 08             	sub    esp,0x8
c001c19a:	53                   	push   ebx
c001c19b:	68 7f cd 02 c0       	push   0xc002cd7f
c001c1a0:	e8 92 6c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c1a5:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001c1a8:	83 c4 10             	add    esp,0x10
c001c1ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c1b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1b8:	31 d2                	xor    edx,edx
c001c1ba:	83 c4 20             	add    esp,0x20
c001c1bd:	31 c0                	xor    eax,eax
c001c1bf:	5b                   	pop    ebx
c001c1c0:	5e                   	pop    esi
c001c1c1:	5f                   	pop    edi
c001c1c2:	c3                   	ret    
c001c1c3:	83 c4 20             	add    esp,0x20
c001c1c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1cb:	5b                   	pop    ebx
c001c1cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1d1:	5e                   	pop    esi
c001c1d2:	5f                   	pop    edi
c001c1d3:	c3                   	ret    

c001c1d4 <sysCallClose(regs*)>:
c001c1d4:	53                   	push   ebx
c001c1d5:	83 ec 08             	sub    esp,0x8
c001c1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c1df:	83 f8 02             	cmp    eax,0x2
c001c1e2:	76 50                	jbe    c001c234 <sysCallClose(regs*)+0x60>
c001c1e4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c1e9:	74 58                	je     c001c243 <sysCallClose(regs*)+0x6f>
c001c1eb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c1f0:	74 60                	je     c001c252 <sysCallClose(regs*)+0x7e>
c001c1f2:	77 2f                	ja     c001c223 <sysCallClose(regs*)+0x4f>
c001c1f4:	83 ec 0c             	sub    esp,0xc
c001c1f7:	50                   	push   eax
c001c1f8:	e8 de 56 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c1fd:	89 c3                	mov    ebx,eax
c001c1ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001c202:	e8 51 72 ff ff       	call   c0013458 <File::close()>
c001c207:	83 c4 10             	add    esp,0x10
c001c20a:	85 db                	test   ebx,ebx
c001c20c:	74 0c                	je     c001c21a <sysCallClose(regs*)+0x46>
c001c20e:	83 ec 0c             	sub    esp,0xc
c001c211:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c213:	53                   	push   ebx
c001c214:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c217:	83 c4 10             	add    esp,0x10
c001c21a:	31 c0                	xor    eax,eax
c001c21c:	31 d2                	xor    edx,edx
c001c21e:	83 c4 08             	add    esp,0x8
c001c221:	5b                   	pop    ebx
c001c222:	c3                   	ret    
c001c223:	83 ec 08             	sub    esp,0x8
c001c226:	50                   	push   eax
c001c227:	68 88 ce 02 c0       	push   0xc002ce88
c001c22c:	e8 06 6c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c231:	83 c4 10             	add    esp,0x10
c001c234:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c239:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c23e:	83 c4 08             	add    esp,0x8
c001c241:	5b                   	pop    ebx
c001c242:	c3                   	ret    
c001c243:	83 ec 0c             	sub    esp,0xc
c001c246:	68 9a cd 02 c0       	push   0xc002cd9a
c001c24b:	e8 e7 6b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c250:	eb c5                	jmp    c001c217 <sysCallClose(regs*)+0x43>
c001c252:	83 ec 0c             	sub    esp,0xc
c001c255:	68 a8 cd 02 c0       	push   0xc002cda8
c001c25a:	eb ef                	jmp    c001c24b <sysCallClose(regs*)+0x77>

c001c25c <sysCallOpenDir(regs*)>:
c001c25c:	56                   	push   esi
c001c25d:	53                   	push   ebx
c001c25e:	53                   	push   ebx
c001c25f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c263:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c266:	85 f6                	test   esi,esi
c001c268:	74 59                	je     c001c2c3 <sysCallOpenDir(regs*)+0x67>
c001c26a:	83 ec 0c             	sub    esp,0xc
c001c26d:	68 14 01 00 00       	push   0x114
c001c272:	e8 15 36 ff ff       	call   c000f88c <malloc>
c001c277:	83 c4 0c             	add    esp,0xc
c001c27a:	89 c6                	mov    esi,eax
c001c27c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c281:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c284:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c287:	56                   	push   esi
c001c288:	e8 b5 75 ff ff       	call   c0013842 <Directory::Directory(char const*, Process*)>
c001c28d:	83 c4 10             	add    esp,0x10
c001c290:	85 f6                	test   esi,esi
c001c292:	74 2f                	je     c001c2c3 <sysCallOpenDir(regs*)+0x67>
c001c294:	83 ec 0c             	sub    esp,0xc
c001c297:	56                   	push   esi
c001c298:	e8 09 76 ff ff       	call   c00138a6 <Directory::open()>
c001c29d:	83 c4 10             	add    esp,0x10
c001c2a0:	85 c0                	test   eax,eax
c001c2a2:	75 1f                	jne    c001c2c3 <sysCallOpenDir(regs*)+0x67>
c001c2a4:	83 ec 0c             	sub    esp,0xc
c001c2a7:	56                   	push   esi
c001c2a8:	e8 39 53 ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001c2ad:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c2b0:	83 c4 10             	add    esp,0x10
c001c2b3:	89 02                	mov    DWORD PTR [edx],eax
c001c2b5:	c1 f8 1f             	sar    eax,0x1f
c001c2b8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c2bb:	31 c0                	xor    eax,eax
c001c2bd:	59                   	pop    ecx
c001c2be:	31 d2                	xor    edx,edx
c001c2c0:	5b                   	pop    ebx
c001c2c1:	5e                   	pop    esi
c001c2c2:	c3                   	ret    
c001c2c3:	59                   	pop    ecx
c001c2c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2ce:	5b                   	pop    ebx
c001c2cf:	5e                   	pop    esi
c001c2d0:	c3                   	ret    

c001c2d1 <sysCallCloseDir(regs*)>:
c001c2d1:	53                   	push   ebx
c001c2d2:	83 ec 08             	sub    esp,0x8
c001c2d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c2dc:	83 f8 02             	cmp    eax,0x2
c001c2df:	76 47                	jbe    c001c328 <sysCallCloseDir(regs*)+0x57>
c001c2e1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c2e6:	77 2f                	ja     c001c317 <sysCallCloseDir(regs*)+0x46>
c001c2e8:	83 ec 0c             	sub    esp,0xc
c001c2eb:	50                   	push   eax
c001c2ec:	e8 ea 55 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c2f1:	89 c3                	mov    ebx,eax
c001c2f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2f6:	e8 07 76 ff ff       	call   c0013902 <Directory::close()>
c001c2fb:	83 c4 10             	add    esp,0x10
c001c2fe:	85 db                	test   ebx,ebx
c001c300:	74 0c                	je     c001c30e <sysCallCloseDir(regs*)+0x3d>
c001c302:	83 ec 0c             	sub    esp,0xc
c001c305:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c307:	53                   	push   ebx
c001c308:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c30b:	83 c4 10             	add    esp,0x10
c001c30e:	31 c0                	xor    eax,eax
c001c310:	31 d2                	xor    edx,edx
c001c312:	83 c4 08             	add    esp,0x8
c001c315:	5b                   	pop    ebx
c001c316:	c3                   	ret    
c001c317:	83 ec 08             	sub    esp,0x8
c001c31a:	50                   	push   eax
c001c31b:	68 b0 ce 02 c0       	push   0xc002ceb0
c001c320:	e8 12 6b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c325:	83 c4 10             	add    esp,0x10
c001c328:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c32d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c332:	83 c4 08             	add    esp,0x8
c001c335:	5b                   	pop    ebx
c001c336:	c3                   	ret    

c001c337 <sysCallMakeDir(regs*)>:
c001c337:	56                   	push   esi
c001c338:	53                   	push   ebx
c001c339:	83 ec 10             	sub    esp,0x10
c001c33c:	68 14 01 00 00       	push   0x114
c001c341:	e8 46 35 ff ff       	call   c000f88c <malloc>
c001c346:	83 c4 0c             	add    esp,0xc
c001c349:	89 c3                	mov    ebx,eax
c001c34b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c350:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c353:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c357:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c35a:	53                   	push   ebx
c001c35b:	e8 e2 74 ff ff       	call   c0013842 <Directory::Directory(char const*, Process*)>
c001c360:	83 c4 10             	add    esp,0x10
c001c363:	85 db                	test   ebx,ebx
c001c365:	74 32                	je     c001c399 <sysCallMakeDir(regs*)+0x62>
c001c367:	83 ec 0c             	sub    esp,0xc
c001c36a:	53                   	push   ebx
c001c36b:	e8 16 77 ff ff       	call   c0013a86 <Directory::create()>
c001c370:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c373:	89 c6                	mov    esi,eax
c001c375:	e8 88 75 ff ff       	call   c0013902 <Directory::close()>
c001c37a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c37c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c37f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c382:	83 c4 10             	add    esp,0x10
c001c385:	31 c0                	xor    eax,eax
c001c387:	59                   	pop    ecx
c001c388:	85 f6                	test   esi,esi
c001c38a:	5b                   	pop    ebx
c001c38b:	0f 95 c0             	setne  al
c001c38e:	5e                   	pop    esi
c001c38f:	31 d2                	xor    edx,edx
c001c391:	f7 d8                	neg    eax
c001c393:	83 d2 00             	adc    edx,0x0
c001c396:	f7 da                	neg    edx
c001c398:	c3                   	ret    
c001c399:	59                   	pop    ecx
c001c39a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c39f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3a4:	5b                   	pop    ebx
c001c3a5:	5e                   	pop    esi
c001c3a6:	c3                   	ret    

c001c3a7 <sysCallWait(regs*)>:
c001c3a7:	83 ec 10             	sub    esp,0x10
c001c3aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c3ae:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c3b1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c3b4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c3b7:	e8 c8 25 00 00       	call   c001e984 <waitTask(int, int*, int)>
c001c3bc:	83 c4 1c             	add    esp,0x1c
c001c3bf:	99                   	cdq    
c001c3c0:	c3                   	ret    

c001c3c1 <sysCallNotImpl(regs*)>:
c001c3c1:	83 ec 18             	sub    esp,0x18
c001c3c4:	68 b6 cd 02 c0       	push   0xc002cdb6
c001c3c9:	e8 d7 e5 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001c3ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3d8:	83 c4 1c             	add    esp,0x1c
c001c3db:	c3                   	ret    

c001c3dc <sysPanic(regs*)>:
c001c3dc:	83 ec 18             	sub    esp,0x18
c001c3df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3e3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c3e6:	e8 ba e5 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001c3eb:	c7 04 24 d0 cd 02 c0 	mov    DWORD PTR [esp],0xc002cdd0
c001c3f2:	e8 ae e5 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001c3f7:	b8 01 00 00 00       	mov    eax,0x1
c001c3fc:	31 d2                	xor    edx,edx
c001c3fe:	83 c4 1c             	add    esp,0x1c
c001c401:	c3                   	ret    

c001c402 <sysCallRmdir(regs*)>:
c001c402:	56                   	push   esi
c001c403:	53                   	push   ebx
c001c404:	83 ec 20             	sub    esp,0x20
c001c407:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c40b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c40e:	68 14 01 00 00       	push   0x114
c001c413:	e8 74 34 ff ff       	call   c000f88c <malloc>
c001c418:	83 c4 0c             	add    esp,0xc
c001c41b:	89 c3                	mov    ebx,eax
c001c41d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c422:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c425:	56                   	push   esi
c001c426:	53                   	push   ebx
c001c427:	e8 6a 6f ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001c42c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c42f:	e8 3e 71 ff ff       	call   c0013572 <File::unlink()>
c001c434:	83 c4 10             	add    esp,0x10
c001c437:	85 db                	test   ebx,ebx
c001c439:	74 14                	je     c001c44f <sysCallRmdir(regs*)+0x4d>
c001c43b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c43f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c441:	83 ec 0c             	sub    esp,0xc
c001c444:	53                   	push   ebx
c001c445:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c448:	83 c4 10             	add    esp,0x10
c001c44b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c44f:	85 c0                	test   eax,eax
c001c451:	0f 95 c0             	setne  al
c001c454:	31 d2                	xor    edx,edx
c001c456:	0f b6 c0             	movzx  eax,al
c001c459:	f7 d8                	neg    eax
c001c45b:	83 d2 00             	adc    edx,0x0
c001c45e:	83 c4 14             	add    esp,0x14
c001c461:	f7 da                	neg    edx
c001c463:	5b                   	pop    ebx
c001c464:	5e                   	pop    esi
c001c465:	c3                   	ret    

c001c466 <sysCallUnlink(regs*)>:
c001c466:	56                   	push   esi
c001c467:	53                   	push   ebx
c001c468:	83 ec 20             	sub    esp,0x20
c001c46b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c46f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c472:	68 14 01 00 00       	push   0x114
c001c477:	e8 10 34 ff ff       	call   c000f88c <malloc>
c001c47c:	83 c4 0c             	add    esp,0xc
c001c47f:	89 c3                	mov    ebx,eax
c001c481:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c486:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c489:	56                   	push   esi
c001c48a:	53                   	push   ebx
c001c48b:	e8 06 6f ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001c490:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c493:	e8 da 70 ff ff       	call   c0013572 <File::unlink()>
c001c498:	83 c4 10             	add    esp,0x10
c001c49b:	85 db                	test   ebx,ebx
c001c49d:	74 14                	je     c001c4b3 <sysCallUnlink(regs*)+0x4d>
c001c49f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4a3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c4a5:	83 ec 0c             	sub    esp,0xc
c001c4a8:	53                   	push   ebx
c001c4a9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c4ac:	83 c4 10             	add    esp,0x10
c001c4af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4b3:	85 c0                	test   eax,eax
c001c4b5:	0f 95 c0             	setne  al
c001c4b8:	31 d2                	xor    edx,edx
c001c4ba:	0f b6 c0             	movzx  eax,al
c001c4bd:	f7 d8                	neg    eax
c001c4bf:	83 d2 00             	adc    edx,0x0
c001c4c2:	83 c4 14             	add    esp,0x14
c001c4c5:	f7 da                	neg    edx
c001c4c7:	5b                   	pop    ebx
c001c4c8:	5e                   	pop    esi
c001c4c9:	c3                   	ret    

c001c4ca <sysCallGetArgv(regs*)>:
c001c4ca:	83 ec 0c             	sub    esp,0xc
c001c4cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4d1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c4d4:	85 c0                	test   eax,eax
c001c4d6:	78 2b                	js     c001c503 <sysCallGetArgv(regs*)+0x39>
c001c4d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c4de:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c4e1:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c4e7:	7d 1a                	jge    c001c503 <sysCallGetArgv(regs*)+0x39>
c001c4e9:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c4f0:	85 c0                	test   eax,eax
c001c4f2:	74 17                	je     c001c50b <sysCallGetArgv(regs*)+0x41>
c001c4f4:	83 ec 08             	sub    esp,0x8
c001c4f7:	50                   	push   eax
c001c4f8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c4fb:	e8 0c 43 fe ff       	call   c000080c <strcpy>
c001c500:	83 c4 10             	add    esp,0x10
c001c503:	31 c0                	xor    eax,eax
c001c505:	31 d2                	xor    edx,edx
c001c507:	83 c4 0c             	add    esp,0xc
c001c50a:	c3                   	ret    
c001c50b:	b8 01 00 00 00       	mov    eax,0x1
c001c510:	31 d2                	xor    edx,edx
c001c512:	83 c4 0c             	add    esp,0xc
c001c515:	c3                   	ret    

c001c516 <sysCallTTYName(regs*)>:
c001c516:	56                   	push   esi
c001c517:	53                   	push   ebx
c001c518:	53                   	push   ebx
c001c519:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c51d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c520:	85 c0                	test   eax,eax
c001c522:	74 5f                	je     c001c583 <sysCallTTYName(regs*)+0x6d>
c001c524:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c527:	83 f8 02             	cmp    eax,0x2
c001c52a:	77 3e                	ja     c001c56a <sysCallTTYName(regs*)+0x54>
c001c52c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c531:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c534:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c53a:	85 db                	test   ebx,ebx
c001c53c:	74 45                	je     c001c583 <sysCallTTYName(regs*)+0x6d>
c001c53e:	83 ec 0c             	sub    esp,0xc
c001c541:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c543:	53                   	push   ebx
c001c544:	ff 10                	call   DWORD PTR [eax]
c001c546:	83 c4 10             	add    esp,0x10
c001c549:	84 c0                	test   al,al
c001c54b:	74 41                	je     c001c58e <sysCallTTYName(regs*)+0x78>
c001c54d:	83 ec 08             	sub    esp,0x8
c001c550:	81 c3 82 00 00 00    	add    ebx,0x82
c001c556:	53                   	push   ebx
c001c557:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c55a:	e8 ad 42 fe ff       	call   c000080c <strcpy>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	31 c0                	xor    eax,eax
c001c564:	59                   	pop    ecx
c001c565:	31 d2                	xor    edx,edx
c001c567:	5b                   	pop    ebx
c001c568:	5e                   	pop    esi
c001c569:	c3                   	ret    
c001c56a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c56f:	74 bb                	je     c001c52c <sysCallTTYName(regs*)+0x16>
c001c571:	83 ec 0c             	sub    esp,0xc
c001c574:	50                   	push   eax
c001c575:	e8 61 53 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c57a:	83 c4 10             	add    esp,0x10
c001c57d:	89 c3                	mov    ebx,eax
c001c57f:	85 db                	test   ebx,ebx
c001c581:	75 bb                	jne    c001c53e <sysCallTTYName(regs*)+0x28>
c001c583:	59                   	pop    ecx
c001c584:	b8 01 00 00 00       	mov    eax,0x1
c001c589:	31 d2                	xor    edx,edx
c001c58b:	5b                   	pop    ebx
c001c58c:	5e                   	pop    esi
c001c58d:	c3                   	ret    
c001c58e:	59                   	pop    ecx
c001c58f:	b8 02 00 00 00       	mov    eax,0x2
c001c594:	31 d2                	xor    edx,edx
c001c596:	5b                   	pop    ebx
c001c597:	5e                   	pop    esi
c001c598:	c3                   	ret    

c001c599 <sysCallUSleep(regs*)>:
c001c599:	83 ec 14             	sub    esp,0x14
c001c59c:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c5a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c5a5:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c5ac:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c5af:	01 ca                	add    edx,ecx
c001c5b1:	52                   	push   edx
c001c5b2:	50                   	push   eax
c001c5b3:	e8 a3 24 00 00       	call   c001ea5b <nanoSleep(unsigned long long)>
c001c5b8:	31 c0                	xor    eax,eax
c001c5ba:	31 d2                	xor    edx,edx
c001c5bc:	83 c4 1c             	add    esp,0x1c
c001c5bf:	c3                   	ret    

c001c5c0 <sysCallSpawn(regs*)>:
c001c5c0:	56                   	push   esi
c001c5c1:	53                   	push   ebx
c001c5c2:	50                   	push   eax
c001c5c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c5c7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c5ca:	85 c0                	test   eax,eax
c001c5cc:	75 08                	jne    c001c5d6 <sysCallSpawn(regs*)+0x16>
c001c5ce:	59                   	pop    ecx
c001c5cf:	31 c0                	xor    eax,eax
c001c5d1:	31 d2                	xor    edx,edx
c001c5d3:	5b                   	pop    ebx
c001c5d4:	5e                   	pop    esi
c001c5d5:	c3                   	ret    
c001c5d6:	83 ec 08             	sub    esp,0x8
c001c5d9:	50                   	push   eax
c001c5da:	68 df cd 02 c0       	push   0xc002cddf
c001c5df:	e8 53 68 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c5e4:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c5eb:	e8 9c 32 ff ff       	call   c000f88c <malloc>
c001c5f0:	83 c4 10             	add    esp,0x10
c001c5f3:	89 c6                	mov    esi,eax
c001c5f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c5f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5fb:	85 c0                	test   eax,eax
c001c5fd:	75 32                	jne    c001c631 <sysCallSpawn(regs*)+0x71>
c001c5ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c604:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c607:	52                   	push   edx
c001c608:	50                   	push   eax
c001c609:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c60c:	56                   	push   esi
c001c60d:	e8 26 1b 00 00       	call   c001e138 <Process::Process(char const*, Process*, char**)>
c001c612:	83 c4 10             	add    esp,0x10
c001c615:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c61c:	75 b0                	jne    c001c5ce <sysCallSpawn(regs*)+0xe>
c001c61e:	83 ec 0c             	sub    esp,0xc
c001c621:	56                   	push   esi
c001c622:	e8 f3 1f 00 00       	call   c001e61a <Process::createUserThread()>
c001c627:	8b 06                	mov    eax,DWORD PTR [esi]
c001c629:	83 c4 10             	add    esp,0x10
c001c62c:	99                   	cdq    
c001c62d:	59                   	pop    ecx
c001c62e:	5b                   	pop    ebx
c001c62f:	5e                   	pop    esi
c001c630:	c3                   	ret    
c001c631:	31 c0                	xor    eax,eax
c001c633:	eb d2                	jmp    c001c607 <sysCallSpawn(regs*)+0x47>

c001c635 <sysCallGetEnv(regs*)>:
c001c635:	55                   	push   ebp
c001c636:	57                   	push   edi
c001c637:	56                   	push   esi
c001c638:	53                   	push   ebx
c001c639:	83 ec 28             	sub    esp,0x28
c001c63c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c640:	68 ed cd 02 c0       	push   0xc002cded
c001c645:	e8 ed 67 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c64a:	5f                   	pop    edi
c001c64b:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c64e:	5d                   	pop    ebp
c001c64f:	53                   	push   ebx
c001c650:	68 1a d1 02 c0       	push   0xc002d11a
c001c655:	e8 dd 67 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c65a:	58                   	pop    eax
c001c65b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c65e:	5a                   	pop    edx
c001c65f:	57                   	push   edi
c001c660:	68 f6 cd 02 c0       	push   0xc002cdf6
c001c665:	e8 cd 67 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c66a:	59                   	pop    ecx
c001c66b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c670:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c673:	e8 49 e2 ff ff       	call   c001a8c1 <Krnl::getProcessTotalEnvCount(Process*)>
c001c678:	5a                   	pop    edx
c001c679:	89 c5                	mov    ebp,eax
c001c67b:	59                   	pop    ecx
c001c67c:	50                   	push   eax
c001c67d:	68 00 ce 02 c0       	push   0xc002ce00
c001c682:	e8 b0 67 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c687:	83 c4 10             	add    esp,0x10
c001c68a:	39 ef                	cmp    edi,ebp
c001c68c:	7c 15                	jl     c001c6a3 <sysCallGetEnv(regs*)+0x6e>
c001c68e:	85 db                	test   ebx,ebx
c001c690:	75 0c                	jne    c001c69e <sysCallGetEnv(regs*)+0x69>
c001c692:	83 c4 1c             	add    esp,0x1c
c001c695:	31 c0                	xor    eax,eax
c001c697:	5b                   	pop    ebx
c001c698:	31 d2                	xor    edx,edx
c001c69a:	5e                   	pop    esi
c001c69b:	5f                   	pop    edi
c001c69c:	5d                   	pop    ebp
c001c69d:	c3                   	ret    
c001c69e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c6a1:	eb ef                	jmp    c001c692 <sysCallGetEnv(regs*)+0x5d>
c001c6a3:	83 ec 0c             	sub    esp,0xc
c001c6a6:	68 0c ce 02 c0       	push   0xc002ce0c
c001c6ab:	e8 87 67 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c6b0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c6b4:	83 c4 0c             	add    esp,0xc
c001c6b7:	57                   	push   edi
c001c6b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c6be:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c6c1:	50                   	push   eax
c001c6c2:	e8 1a e2 ff ff       	call   c001a8e1 <Krnl::getProcessEnvPair(Process*, int)>
c001c6c7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c6cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c6cf:	68 cb d1 02 c0       	push   0xc002d1cb
c001c6d4:	e8 5e 67 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c6d9:	83 c4 10             	add    esp,0x10
c001c6dc:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c6df:	85 f6                	test   esi,esi
c001c6e1:	75 47                	jne    c001c72a <sysCallGetEnv(regs*)+0xf5>
c001c6e3:	83 ec 0c             	sub    esp,0xc
c001c6e6:	55                   	push   ebp
c001c6e7:	e8 80 40 fe ff       	call   c000076c <strlen>
c001c6ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6ef:	89 c3                	mov    ebx,eax
c001c6f1:	e8 76 40 fe ff       	call   c000076c <strlen>
c001c6f6:	5a                   	pop    edx
c001c6f7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c6fb:	59                   	pop    ecx
c001c6fc:	50                   	push   eax
c001c6fd:	68 0f ce 02 c0       	push   0xc002ce0f
c001c702:	e8 30 67 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c707:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c70a:	e8 5d 40 fe ff       	call   c000076c <strlen>
c001c70f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c712:	89 c3                	mov    ebx,eax
c001c714:	e8 53 40 fe ff       	call   c000076c <strlen>
c001c719:	83 c4 10             	add    esp,0x10
c001c71c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c720:	83 c4 1c             	add    esp,0x1c
c001c723:	31 d2                	xor    edx,edx
c001c725:	5b                   	pop    ebx
c001c726:	5e                   	pop    esi
c001c727:	5f                   	pop    edi
c001c728:	5d                   	pop    ebp
c001c729:	c3                   	ret    
c001c72a:	83 ec 0c             	sub    esp,0xc
c001c72d:	68 e5 d1 02 c0       	push   0xc002d1e5
c001c732:	e8 00 67 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c737:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c73a:	58                   	pop    eax
c001c73b:	5a                   	pop    edx
c001c73c:	55                   	push   ebp
c001c73d:	53                   	push   ebx
c001c73e:	e8 c9 40 fe ff       	call   c000080c <strcpy>
c001c743:	59                   	pop    ecx
c001c744:	5e                   	pop    esi
c001c745:	68 19 ce 02 c0       	push   0xc002ce19
c001c74a:	53                   	push   ebx
c001c74b:	e8 fc 41 fe ff       	call   c000094c <strcat>
c001c750:	5d                   	pop    ebp
c001c751:	58                   	pop    eax
c001c752:	57                   	push   edi
c001c753:	53                   	push   ebx
c001c754:	e8 f3 41 fe ff       	call   c000094c <strcat>
c001c759:	c7 04 24 ff d1 02 c0 	mov    DWORD PTR [esp],0xc002d1ff
c001c760:	e8 d2 66 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c765:	83 c4 10             	add    esp,0x10
c001c768:	e9 25 ff ff ff       	jmp    c001c692 <sysCallGetEnv(regs*)+0x5d>

c001c76d <sysAppSettings(regs*)>:
c001c76d:	57                   	push   edi
c001c76e:	56                   	push   esi
c001c76f:	56                   	push   esi
c001c770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c774:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c777:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c77d:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c782:	66 3d c0 09          	cmp    ax,0x9c0
c001c786:	75 2e                	jne    c001c7b6 <sysAppSettings(regs*)+0x49>
c001c788:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c78e:	83 e0 1f             	and    eax,0x1f
c001c791:	3c 01                	cmp    al,0x1
c001c793:	74 2c                	je     c001c7c1 <sysAppSettings(regs*)+0x54>
c001c795:	3c 07                	cmp    al,0x7
c001c797:	0f 84 b3 00 00 00    	je     c001c850 <sysAppSettings(regs*)+0xe3>
c001c79d:	84 c0                	test   al,al
c001c79f:	0f 84 d2 00 00 00    	je     c001c877 <sysAppSettings(regs*)+0x10a>
c001c7a5:	3c 08                	cmp    al,0x8
c001c7a7:	74 63                	je     c001c80c <sysAppSettings(regs*)+0x9f>
c001c7a9:	59                   	pop    ecx
c001c7aa:	0f b6 c0             	movzx  eax,al
c001c7ad:	5e                   	pop    esi
c001c7ae:	05 e8 03 00 00       	add    eax,0x3e8
c001c7b3:	5f                   	pop    edi
c001c7b4:	99                   	cdq    
c001c7b5:	c3                   	ret    
c001c7b6:	b8 01 00 00 00       	mov    eax,0x1
c001c7bb:	59                   	pop    ecx
c001c7bc:	31 d2                	xor    edx,edx
c001c7be:	5e                   	pop    esi
c001c7bf:	5f                   	pop    edi
c001c7c0:	c3                   	ret    
c001c7c1:	50                   	push   eax
c001c7c2:	68 00 01 00 00       	push   0x100
c001c7c7:	6a 00                	push   0x0
c001c7c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7d1:	83 c0 0c             	add    eax,0xc
c001c7d4:	50                   	push   eax
c001c7d5:	e8 76 3f fe ff       	call   c0000750 <memset>
c001c7da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7df:	b9 ff 00 00 00       	mov    ecx,0xff
c001c7e4:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c7e7:	83 c7 0c             	add    edi,0xc
c001c7ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c7ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7f1:	5a                   	pop    edx
c001c7f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7f5:	59                   	pop    ecx
c001c7f6:	8d 50 0c             	lea    edx,[eax+0xc]
c001c7f9:	52                   	push   edx
c001c7fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c800:	e8 01 43 ff ff       	call   c0010b06 <VgaText::setTitle(char*)>
c001c805:	83 c4 10             	add    esp,0x10
c001c808:	31 c0                	xor    eax,eax
c001c80a:	eb af                	jmp    c001c7bb <sysAppSettings(regs*)+0x4e>
c001c80c:	83 ec 08             	sub    esp,0x8
c001c80f:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c815:	83 e0 0f             	and    eax,0xf
c001c818:	50                   	push   eax
c001c819:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c81e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c821:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c827:	e8 cc 42 ff ff       	call   c0010af8 <VgaText::setTitleColour(VgaColour)>
c001c82c:	5f                   	pop    edi
c001c82d:	58                   	pop    eax
c001c82e:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c834:	c1 e8 04             	shr    eax,0x4
c001c837:	83 e0 0f             	and    eax,0xf
c001c83a:	50                   	push   eax
c001c83b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c840:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c843:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c849:	e8 9c 42 ff ff       	call   c0010aea <VgaText::setTitleTextColour(VgaColour)>
c001c84e:	eb b5                	jmp    c001c805 <sysAppSettings(regs*)+0x98>
c001c850:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c855:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c858:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c85e:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c864:	c0 e8 06             	shr    al,0x6
c001c867:	83 e0 01             	and    eax,0x1
c001c86a:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c870:	31 c0                	xor    eax,eax
c001c872:	e9 44 ff ff ff       	jmp    c001c7bb <sysAppSettings(regs*)+0x4e>
c001c877:	b8 02 00 00 00       	mov    eax,0x2
c001c87c:	e9 3a ff ff ff       	jmp    c001c7bb <sysAppSettings(regs*)+0x4e>

c001c881 <sysSetFatAttrib(regs*)>:
c001c881:	57                   	push   edi
c001c882:	56                   	push   esi
c001c883:	53                   	push   ebx
c001c884:	83 ec 1c             	sub    esp,0x1c
c001c887:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c88b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c88e:	68 14 01 00 00       	push   0x114
c001c893:	e8 f4 2f ff ff       	call   c000f88c <malloc>
c001c898:	83 c4 0c             	add    esp,0xc
c001c89b:	89 c3                	mov    ebx,eax
c001c89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8a2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c8a5:	57                   	push   edi
c001c8a6:	53                   	push   ebx
c001c8a7:	e8 ea 6a ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001c8ac:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c8af:	83 c4 0c             	add    esp,0xc
c001c8b2:	0f b6 d4             	movzx  edx,ah
c001c8b5:	0f b6 c0             	movzx  eax,al
c001c8b8:	52                   	push   edx
c001c8b9:	50                   	push   eax
c001c8ba:	53                   	push   ebx
c001c8bb:	e8 4c 6d ff ff       	call   c001360c <File::chfatattr(unsigned char, unsigned char)>
c001c8c0:	83 c4 10             	add    esp,0x10
c001c8c3:	85 db                	test   ebx,ebx
c001c8c5:	74 14                	je     c001c8db <sysSetFatAttrib(regs*)+0x5a>
c001c8c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8cb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c8cd:	83 ec 0c             	sub    esp,0xc
c001c8d0:	53                   	push   ebx
c001c8d1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c8d4:	83 c4 10             	add    esp,0x10
c001c8d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8db:	85 c0                	test   eax,eax
c001c8dd:	0f 95 c0             	setne  al
c001c8e0:	31 d2                	xor    edx,edx
c001c8e2:	0f b6 c0             	movzx  eax,al
c001c8e5:	f7 d8                	neg    eax
c001c8e7:	83 d2 00             	adc    edx,0x0
c001c8ea:	83 c4 10             	add    esp,0x10
c001c8ed:	f7 da                	neg    edx
c001c8ef:	5b                   	pop    ebx
c001c8f0:	5e                   	pop    esi
c001c8f1:	5f                   	pop    edi
c001c8f2:	c3                   	ret    

c001c8f3 <sysPipe(regs*)>:
c001c8f3:	57                   	push   edi
c001c8f4:	56                   	push   esi
c001c8f5:	53                   	push   ebx
c001c8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fa:	83 ec 0c             	sub    esp,0xc
c001c8fd:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c900:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c903:	6a 20                	push   0x20
c001c905:	e8 82 2f ff ff       	call   c000f88c <malloc>
c001c90a:	89 c3                	mov    ebx,eax
c001c90c:	58                   	pop    eax
c001c90d:	5a                   	pop    edx
c001c90e:	68 00 50 00 00       	push   0x5000
c001c913:	53                   	push   ebx
c001c914:	e8 95 3b ff ff       	call   c00104ae <Pipe::Pipe(int)>
c001c919:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c91c:	e8 c5 4c ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001c921:	89 07                	mov    DWORD PTR [edi],eax
c001c923:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c926:	e8 bb 4c ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	89 06                	mov    DWORD PTR [esi],eax
c001c930:	31 d2                	xor    edx,edx
c001c932:	5b                   	pop    ebx
c001c933:	31 c0                	xor    eax,eax
c001c935:	5e                   	pop    esi
c001c936:	5f                   	pop    edi
c001c937:	c3                   	ret    

c001c938 <sysGetUnixTime(regs*)>:
c001c938:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001c93d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c943:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c947:	e9 3c 74 ff ff       	jmp    c0013d88 <Clock::timeInSecondsLocal()>

c001c94c <string_ends_with(char const*, char const*)>:
c001c94c:	57                   	push   edi
c001c94d:	56                   	push   esi
c001c94e:	53                   	push   ebx
c001c94f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c953:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c957:	83 ec 0c             	sub    esp,0xc
c001c95a:	53                   	push   ebx
c001c95b:	e8 0c 3e fe ff       	call   c000076c <strlen>
c001c960:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c963:	89 c6                	mov    esi,eax
c001c965:	e8 02 3e fe ff       	call   c000076c <strlen>
c001c96a:	83 c4 10             	add    esp,0x10
c001c96d:	39 c6                	cmp    esi,eax
c001c96f:	7d 06                	jge    c001c977 <string_ends_with(char const*, char const*)+0x2b>
c001c971:	5b                   	pop    ebx
c001c972:	31 c0                	xor    eax,eax
c001c974:	5e                   	pop    esi
c001c975:	5f                   	pop    edi
c001c976:	c3                   	ret    
c001c977:	83 ec 08             	sub    esp,0x8
c001c97a:	29 c6                	sub    esi,eax
c001c97c:	57                   	push   edi
c001c97d:	01 f3                	add    ebx,esi
c001c97f:	53                   	push   ebx
c001c980:	e8 13 3f fe ff       	call   c0000898 <strcmp>
c001c985:	83 c4 10             	add    esp,0x10
c001c988:	85 c0                	test   eax,eax
c001c98a:	5b                   	pop    ebx
c001c98b:	0f 94 c0             	sete   al
c001c98e:	5e                   	pop    esi
c001c98f:	0f b6 c0             	movzx  eax,al
c001c992:	5f                   	pop    edi
c001c993:	c3                   	ret    

c001c994 <sysCallOpen(regs*)>:
c001c994:	56                   	push   esi
c001c995:	53                   	push   ebx
c001c996:	81 ec 04 01 00 00    	sub    esp,0x104
c001c99c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c9a3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c9a6:	85 c9                	test   ecx,ecx
c001c9a8:	0f 84 b3 00 00 00    	je     c001ca61 <sysCallOpen(regs*)+0xcd>
c001c9ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c9b1:	85 c0                	test   eax,eax
c001c9b3:	0f 84 a8 00 00 00    	je     c001ca61 <sysCallOpen(regs*)+0xcd>
c001c9b9:	52                   	push   edx
c001c9ba:	68 1b ce 02 c0       	push   0xc002ce1b
c001c9bf:	50                   	push   eax
c001c9c0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c9c4:	56                   	push   esi
c001c9c5:	e8 22 68 ff ff       	call   c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>
c001c9ca:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9cd:	e8 9a 3d fe ff       	call   c000076c <strlen>
c001c9d2:	83 c4 10             	add    esp,0x10
c001c9d5:	48                   	dec    eax
c001c9d6:	74 1d                	je     c001c9f5 <sysCallOpen(regs*)+0x61>
c001c9d8:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c9db:	eb 0f                	jmp    c001c9ec <sysCallOpen(regs*)+0x58>
c001c9dd:	80 fa 3a             	cmp    dl,0x3a
c001c9e0:	74 0f                	je     c001c9f1 <sysCallOpen(regs*)+0x5d>
c001c9e2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c9e6:	48                   	dec    eax
c001c9e7:	74 0c                	je     c001c9f5 <sysCallOpen(regs*)+0x61>
c001c9e9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c9ec:	80 fa 2e             	cmp    dl,0x2e
c001c9ef:	75 ec                	jne    c001c9dd <sysCallOpen(regs*)+0x49>
c001c9f1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c9f5:	83 ec 08             	sub    esp,0x8
c001c9f8:	68 1f ce 02 c0       	push   0xc002ce1f
c001c9fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca00:	e8 47 ff ff ff       	call   c001c94c <string_ends_with(char const*, char const*)>
c001ca05:	83 c4 10             	add    esp,0x10
c001ca08:	85 c0                	test   eax,eax
c001ca0a:	75 17                	jne    c001ca23 <sysCallOpen(regs*)+0x8f>
c001ca0c:	83 ec 08             	sub    esp,0x8
c001ca0f:	68 40 ce 02 c0       	push   0xc002ce40
c001ca14:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca17:	e8 30 ff ff ff       	call   c001c94c <string_ends_with(char const*, char const*)>
c001ca1c:	83 c4 10             	add    esp,0x10
c001ca1f:	85 c0                	test   eax,eax
c001ca21:	74 51                	je     c001ca74 <sysCallOpen(regs*)+0xe0>
c001ca23:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca26:	83 ec 08             	sub    esp,0x8
c001ca29:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001ca2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca36:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca39:	ff 30                	push   DWORD PTR [eax]
c001ca3b:	68 24 ce 02 c0       	push   0xc002ce24
c001ca40:	e8 f2 63 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ca45:	c7 04 24 33 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce33
c001ca4c:	e8 e6 63 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ca51:	83 c4 10             	add    esp,0x10
c001ca54:	81 c4 04 01 00 00    	add    esp,0x104
c001ca5a:	31 c0                	xor    eax,eax
c001ca5c:	31 d2                	xor    edx,edx
c001ca5e:	5b                   	pop    ebx
c001ca5f:	5e                   	pop    esi
c001ca60:	c3                   	ret    
c001ca61:	81 c4 04 01 00 00    	add    esp,0x104
c001ca67:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ca6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ca71:	5b                   	pop    ebx
c001ca72:	5e                   	pop    esi
c001ca73:	c3                   	ret    
c001ca74:	83 ec 08             	sub    esp,0x8
c001ca77:	68 20 ce 02 c0       	push   0xc002ce20
c001ca7c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca7f:	e8 14 3e fe ff       	call   c0000898 <strcmp>
c001ca84:	83 c4 10             	add    esp,0x10
c001ca87:	85 c0                	test   eax,eax
c001ca89:	74 98                	je     c001ca23 <sysCallOpen(regs*)+0x8f>
c001ca8b:	83 ec 08             	sub    esp,0x8
c001ca8e:	68 1f ce 02 c0       	push   0xc002ce1f
c001ca93:	56                   	push   esi
c001ca94:	e8 b3 fe ff ff       	call   c001c94c <string_ends_with(char const*, char const*)>
c001ca99:	83 c4 10             	add    esp,0x10
c001ca9c:	85 c0                	test   eax,eax
c001ca9e:	75 83                	jne    c001ca23 <sysCallOpen(regs*)+0x8f>
c001caa0:	83 ec 08             	sub    esp,0x8
c001caa3:	68 45 ce 02 c0       	push   0xc002ce45
c001caa8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001caab:	e8 9c fe ff ff       	call   c001c94c <string_ends_with(char const*, char const*)>
c001cab0:	83 c4 10             	add    esp,0x10
c001cab3:	85 c0                	test   eax,eax
c001cab5:	0f 85 d9 00 00 00    	jne    c001cb94 <sysCallOpen(regs*)+0x200>
c001cabb:	83 ec 08             	sub    esp,0x8
c001cabe:	68 4a ce 02 c0       	push   0xc002ce4a
c001cac3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cac6:	e8 81 fe ff ff       	call   c001c94c <string_ends_with(char const*, char const*)>
c001cacb:	83 c4 10             	add    esp,0x10
c001cace:	85 c0                	test   eax,eax
c001cad0:	0f 85 be 00 00 00    	jne    c001cb94 <sysCallOpen(regs*)+0x200>
c001cad6:	83 ec 08             	sub    esp,0x8
c001cad9:	68 46 ce 02 c0       	push   0xc002ce46
c001cade:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cae1:	e8 b2 3d fe ff       	call   c0000898 <strcmp>
c001cae6:	83 c4 10             	add    esp,0x10
c001cae9:	85 c0                	test   eax,eax
c001caeb:	0f 84 a3 00 00 00    	je     c001cb94 <sysCallOpen(regs*)+0x200>
c001caf1:	83 ec 08             	sub    esp,0x8
c001caf4:	68 45 ce 02 c0       	push   0xc002ce45
c001caf9:	56                   	push   esi
c001cafa:	e8 4d fe ff ff       	call   c001c94c <string_ends_with(char const*, char const*)>
c001caff:	83 c4 10             	add    esp,0x10
c001cb02:	85 c0                	test   eax,eax
c001cb04:	0f 85 8a 00 00 00    	jne    c001cb94 <sysCallOpen(regs*)+0x200>
c001cb0a:	83 ec 0c             	sub    esp,0xc
c001cb0d:	68 14 01 00 00       	push   0x114
c001cb12:	e8 75 2d ff ff       	call   c000f88c <malloc>
c001cb17:	83 c4 0c             	add    esp,0xc
c001cb1a:	89 c6                	mov    esi,eax
c001cb1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb21:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001cb24:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cb27:	56                   	push   esi
c001cb28:	e8 69 68 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001cb2d:	83 c4 10             	add    esp,0x10
c001cb30:	85 f6                	test   esi,esi
c001cb32:	0f 84 29 ff ff ff    	je     c001ca61 <sysCallOpen(regs*)+0xcd>
c001cb38:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001cb3b:	0f b6 c2             	movzx  eax,dl
c001cb3e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001cb41:	89 d0                	mov    eax,edx
c001cb43:	83 e0 01             	and    eax,0x1
c001cb46:	f6 c2 02             	test   dl,0x2
c001cb49:	74 03                	je     c001cb4e <sysCallOpen(regs*)+0x1ba>
c001cb4b:	83 c8 02             	or     eax,0x2
c001cb4e:	f6 c2 04             	test   dl,0x4
c001cb51:	74 03                	je     c001cb56 <sysCallOpen(regs*)+0x1c2>
c001cb53:	83 c8 04             	or     eax,0x4
c001cb56:	f6 c2 08             	test   dl,0x8
c001cb59:	74 03                	je     c001cb5e <sysCallOpen(regs*)+0x1ca>
c001cb5b:	83 c8 0a             	or     eax,0xa
c001cb5e:	83 e2 10             	and    edx,0x10
c001cb61:	74 03                	je     c001cb66 <sysCallOpen(regs*)+0x1d2>
c001cb63:	83 c8 12             	or     eax,0x12
c001cb66:	83 ec 08             	sub    esp,0x8
c001cb69:	50                   	push   eax
c001cb6a:	56                   	push   esi
c001cb6b:	e8 8a 68 ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001cb70:	83 c4 10             	add    esp,0x10
c001cb73:	85 c0                	test   eax,eax
c001cb75:	0f 85 e6 fe ff ff    	jne    c001ca61 <sysCallOpen(regs*)+0xcd>
c001cb7b:	83 ec 0c             	sub    esp,0xc
c001cb7e:	56                   	push   esi
c001cb7f:	e8 62 4a ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001cb84:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001cb87:	89 02                	mov    DWORD PTR [edx],eax
c001cb89:	c1 f8 1f             	sar    eax,0x1f
c001cb8c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cb8f:	e9 bd fe ff ff       	jmp    c001ca51 <sysCallOpen(regs*)+0xbd>
c001cb94:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb97:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001cb9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cba4:	e9 ab fe ff ff       	jmp    c001ca54 <sysCallOpen(regs*)+0xc0>

c001cba9 <Sys::loadSyscalls()>:
c001cba9:	c7 05 80 1f 03 c0 99 bc 01 c0 	mov    DWORD PTR ds:0xc0031f80,0xc001bc99
c001cbb3:	c7 05 84 1f 03 c0 fe b7 01 c0 	mov    DWORD PTR ds:0xc0031f84,0xc001b7fe
c001cbbd:	c7 05 88 1f 03 c0 ec b9 01 c0 	mov    DWORD PTR ds:0xc0031f88,0xc001b9ec
c001cbc7:	c7 05 8c 1f 03 c0 cf bb 01 c0 	mov    DWORD PTR ds:0xc0031f8c,0xc001bbcf
c001cbd1:	c7 05 90 1f 03 c0 84 b9 01 c0 	mov    DWORD PTR ds:0xc0031f90,0xc001b984
c001cbdb:	c7 05 94 1f 03 c0 35 b8 01 c0 	mov    DWORD PTR ds:0xc0031f94,0xc001b835
c001cbe5:	c7 05 98 1f 03 c0 16 b8 01 c0 	mov    DWORD PTR ds:0xc0031f98,0xc001b816
c001cbef:	c7 05 9c 1f 03 c0 41 ba 01 c0 	mov    DWORD PTR ds:0xc0031f9c,0xc001ba41
c001cbf9:	c7 05 a4 1f 03 c0 d4 c1 01 c0 	mov    DWORD PTR ds:0xc0031fa4,0xc001c1d4
c001cc03:	c7 05 a0 1f 03 c0 94 c9 01 c0 	mov    DWORD PTR ds:0xc0031fa0,0xc001c994
c001cc0d:	c7 05 a8 1f 03 c0 5c c2 01 c0 	mov    DWORD PTR ds:0xc0031fa8,0xc001c25c
c001cc17:	c7 05 ac 1f 03 c0 c3 be 01 c0 	mov    DWORD PTR ds:0xc0031fac,0xc001bec3
c001cc21:	c7 05 b0 1f 03 c0 df bc 01 c0 	mov    DWORD PTR ds:0xc0031fb0,0xc001bcdf
c001cc2b:	c7 05 b4 1f 03 c0 e4 bc 01 c0 	mov    DWORD PTR ds:0xc0031fb4,0xc001bce4
c001cc35:	c7 05 b8 1f 03 c0 37 c3 01 c0 	mov    DWORD PTR ds:0xc0031fb8,0xc001c337
c001cc3f:	c7 05 bc 1f 03 c0 d1 c2 01 c0 	mov    DWORD PTR ds:0xc0031fbc,0xc001c2d1
c001cc49:	c7 05 c0 1f 03 c0 ab bf 01 c0 	mov    DWORD PTR ds:0xc0031fc0,0xc001bfab
c001cc53:	c7 05 c4 1f 03 c0 14 c0 01 c0 	mov    DWORD PTR ds:0xc0031fc4,0xc001c014
c001cc5d:	c7 05 c8 1f 03 c0 91 c0 01 c0 	mov    DWORD PTR ds:0xc0031fc8,0xc001c091
c001cc67:	c7 05 cc 1f 03 c0 e9 bc 01 c0 	mov    DWORD PTR ds:0xc0031fcc,0xc001bce9
c001cc71:	c7 05 d0 1f 03 c0 a7 c3 01 c0 	mov    DWORD PTR ds:0xc0031fd0,0xc001c3a7
c001cc7b:	c7 05 d4 1f 03 c0 c1 c3 01 c0 	mov    DWORD PTR ds:0xc0031fd4,0xc001c3c1
c001cc85:	c7 05 d8 1f 03 c0 c1 c3 01 c0 	mov    DWORD PTR ds:0xc0031fd8,0xc001c3c1
c001cc8f:	c7 05 dc 1f 03 c0 02 c4 01 c0 	mov    DWORD PTR ds:0xc0031fdc,0xc001c402
c001cc99:	c7 05 e0 1f 03 c0 66 c4 01 c0 	mov    DWORD PTR ds:0xc0031fe0,0xc001c466
c001cca3:	c7 05 e4 1f 03 c0 95 be 01 c0 	mov    DWORD PTR ds:0xc0031fe4,0xc001be95
c001ccad:	c7 05 e8 1f 03 c0 ca c4 01 c0 	mov    DWORD PTR ds:0xc0031fe8,0xc001c4ca
c001ccb7:	c7 05 ec 1f 03 c0 52 be 01 c0 	mov    DWORD PTR ds:0xc0031fec,0xc001be52
c001ccc1:	c7 05 f0 1f 03 c0 16 c5 01 c0 	mov    DWORD PTR ds:0xc0031ff0,0xc001c516
c001cccb:	c7 05 f4 1f 03 c0 51 bf 01 c0 	mov    DWORD PTR ds:0xc0031ff4,0xc001bf51
c001ccd5:	c7 05 f8 1f 03 c0 99 c5 01 c0 	mov    DWORD PTR ds:0xc0031ff8,0xc001c599
c001ccdf:	c7 05 fc 1f 03 c0 14 c1 01 c0 	mov    DWORD PTR ds:0xc0031ffc,0xc001c114
c001cce9:	c7 05 00 20 03 c0 c0 c5 01 c0 	mov    DWORD PTR ds:0xc0032000,0xc001c5c0
c001ccf3:	c7 05 04 20 03 c0 35 c6 01 c0 	mov    DWORD PTR ds:0xc0032004,0xc001c635
c001ccfd:	c7 05 08 20 03 c0 6d c7 01 c0 	mov    DWORD PTR ds:0xc0032008,0xc001c76d
c001cd07:	c7 05 0c 20 03 c0 f3 bc 01 c0 	mov    DWORD PTR ds:0xc003200c,0xc001bcf3
c001cd11:	c7 05 10 20 03 c0 5d bd 01 c0 	mov    DWORD PTR ds:0xc0032010,0xc001bd5d
c001cd1b:	c7 05 14 20 03 c0 a3 bd 01 c0 	mov    DWORD PTR ds:0xc0032014,0xc001bda3
c001cd25:	c7 05 18 20 03 c0 81 c8 01 c0 	mov    DWORD PTR ds:0xc0032018,0xc001c881
c001cd2f:	c7 05 1c 20 03 c0 dc c3 01 c0 	mov    DWORD PTR ds:0xc003201c,0xc001c3dc
c001cd39:	c7 05 20 20 03 c0 f4 bd 01 c0 	mov    DWORD PTR ds:0xc0032020,0xc001bdf4
c001cd43:	c7 05 24 20 03 c0 f3 c8 01 c0 	mov    DWORD PTR ds:0xc0032024,0xc001c8f3
c001cd4d:	c7 05 28 20 03 c0 38 c9 01 c0 	mov    DWORD PTR ds:0xc0032028,0xc001c938
c001cd57:	c7 05 2c 20 03 c0 dc b8 01 c0 	mov    DWORD PTR ds:0xc003202c,0xc001b8dc
c001cd61:	c7 05 30 20 03 c0 5d ba 01 c0 	mov    DWORD PTR ds:0xc0032030,0xc001ba5d
c001cd6b:	c7 05 34 20 03 c0 85 bb 01 c0 	mov    DWORD PTR ds:0xc0032034,0xc001bb85
c001cd75:	c7 05 38 20 03 c0 c8 b7 01 c0 	mov    DWORD PTR ds:0xc0032038,0xc001b7c8
c001cd7f:	c7 05 3c 20 03 c0 37 bc 01 c0 	mov    DWORD PTR ds:0xc003203c,0xc001bc37
c001cd89:	c7 05 40 20 03 c0 41 b8 01 c0 	mov    DWORD PTR ds:0xc0032040,0xc001b841
c001cd93:	c7 05 44 20 03 c0 58 b8 01 c0 	mov    DWORD PTR ds:0xc0032044,0xc001b858
c001cd9d:	c3                   	ret    

c001cd9e <Sys::systemCall(regs*, void*)>:
c001cd9e:	53                   	push   ebx
c001cd9f:	83 ec 08             	sub    esp,0x8
c001cda2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cda6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cda9:	83 f8 7f             	cmp    eax,0x7f
c001cdac:	77 16                	ja     c001cdc4 <Sys::systemCall(regs*, void*)+0x26>
c001cdae:	8b 14 85 80 1f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce080]
c001cdb5:	85 d2                	test   edx,edx
c001cdb7:	74 0b                	je     c001cdc4 <Sys::systemCall(regs*, void*)+0x26>
c001cdb9:	83 ec 0c             	sub    esp,0xc
c001cdbc:	53                   	push   ebx
c001cdbd:	ff d2                	call   edx
c001cdbf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cdc2:	eb 0d                	jmp    c001cdd1 <Sys::systemCall(regs*, void*)+0x33>
c001cdc4:	52                   	push   edx
c001cdc5:	52                   	push   edx
c001cdc6:	50                   	push   eax
c001cdc7:	68 4f ce 02 c0       	push   0xc002ce4f
c001cdcc:	e8 66 60 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001cdd1:	83 c4 10             	add    esp,0x10
c001cdd4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cdd9:	31 d2                	xor    edx,edx
c001cddb:	83 c4 08             	add    esp,0x8
c001cdde:	5b                   	pop    ebx
c001cddf:	c3                   	ret    

c001cde0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cde0:	55                   	push   ebp
c001cde1:	57                   	push   edi
c001cde2:	56                   	push   esi
c001cde3:	53                   	push   ebx
c001cde4:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cdea:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cdf1:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cdf8:	85 c0                	test   eax,eax
c001cdfa:	0f 95 c1             	setne  cl
c001cdfd:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001ce05:	0f 94 c2             	sete   dl
c001ce08:	84 d1                	test   cl,dl
c001ce0a:	74 23                	je     c001ce2f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001ce0c:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001ce12:	74 1b                	je     c001ce2f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001ce14:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ce1a:	89 da                	mov    edx,ebx
c001ce1c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001ce22:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001ce28:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001ce2f:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001ce36:	05 ff 0f 00 00       	add    eax,0xfff
c001ce3b:	83 ec 0c             	sub    esp,0xc
c001ce3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce42:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001ce48:	c1 e8 0c             	shr    eax,0xc
c001ce4b:	89 fe                	mov    esi,edi
c001ce4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce51:	c1 ee 0c             	shr    esi,0xc
c001ce54:	6a 01                	push   0x1
c001ce56:	e8 d6 4b ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001ce5b:	89 c5                	mov    ebp,eax
c001ce5d:	58                   	pop    eax
c001ce5e:	5a                   	pop    edx
c001ce5f:	56                   	push   esi
c001ce60:	68 d3 ce 02 c0       	push   0xc002ced3
c001ce65:	e8 cd 5f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ce6a:	59                   	pop    ecx
c001ce6b:	58                   	pop    eax
c001ce6c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce70:	68 e5 ce 02 c0       	push   0xc002cee5
c001ce75:	e8 bd 5f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ce7a:	83 c4 10             	add    esp,0x10
c001ce7d:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001ce83:	0f 86 31 01 00 00    	jbe    c001cfba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001ce89:	c1 e6 0c             	shl    esi,0xc
c001ce8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce8f:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001ce92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce96:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001ce9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cea0:	01 df                	add    edi,ebx
c001cea2:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001cea5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cea9:	0f 84 08 01 00 00    	je     c001cfb7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001ceaf:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001ceb5:	76 05                	jbe    c001cebc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001ceb7:	bf 00 10 00 00       	mov    edi,0x1000
c001cebc:	83 ec 0c             	sub    esp,0xc
c001cebf:	31 d2                	xor    edx,edx
c001cec1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cec8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ceca:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cece:	50                   	push   eax
c001cecf:	8d 74 24 30          	lea    esi,[esp+0x30]
c001ced3:	56                   	push   esi
c001ced4:	52                   	push   edx
c001ced5:	57                   	push   edi
c001ced6:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cedd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cee0:	83 c4 20             	add    esp,0x20
c001cee3:	85 c0                	test   eax,eax
c001cee5:	74 0a                	je     c001cef1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001cee7:	53                   	push   ebx
c001cee8:	53                   	push   ebx
c001cee9:	50                   	push   eax
c001ceea:	68 f7 ce 02 c0       	push   0xc002cef7
c001ceef:	eb 0f                	jmp    c001cf00 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001cef1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001cef5:	74 20                	je     c001cf17 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001cef7:	51                   	push   ecx
c001cef8:	51                   	push   ecx
c001cef9:	6a 00                	push   0x0
c001cefb:	68 22 cf 02 c0       	push   0xc002cf22
c001cf00:	e8 32 5f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001cf05:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf08:	e8 e4 4f ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001cf0d:	83 c4 10             	add    esp,0x10
c001cf10:	31 c0                	xor    eax,eax
c001cf12:	e9 68 01 00 00       	jmp    c001d07f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cf17:	fa                   	cli    
c001cf18:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001cf1e:	e8 d5 2f ff ff       	call   c000fef8 <Phys::allocatePage()>
c001cf23:	6a 07                	push   0x7
c001cf25:	89 c7                	mov    edi,eax
c001cf27:	55                   	push   ebp
c001cf28:	50                   	push   eax
c001cf29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf31:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf37:	e8 2c 53 ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cf3c:	83 c4 0c             	add    esp,0xc
c001cf3f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cf46:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf4c:	6a 00                	push   0x0
c001cf4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf56:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf5c:	e8 61 51 ff ff       	call   c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>
c001cf61:	58                   	pop    eax
c001cf62:	5a                   	pop    edx
c001cf63:	68 07 0c 00 00       	push   0xc07
c001cf68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cf6c:	57                   	push   edi
c001cf6d:	89 ef                	mov    edi,ebp
c001cf6f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cf76:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf7c:	6a 00                	push   0x0
c001cf7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf83:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf86:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf8c:	e8 93 56 ff ff       	call   c0012624 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cf91:	b9 00 10 00 00       	mov    ecx,0x1000
c001cf96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cf98:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001cf9d:	83 c4 20             	add    esp,0x20
c001cfa0:	48                   	dec    eax
c001cfa1:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001cfa6:	85 c0                	test   eax,eax
c001cfa8:	75 01                	jne    c001cfab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001cfaa:	fb                   	sti    
c001cfab:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cfb2:	e9 df fe ff ff       	jmp    c001ce96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001cfb7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001cfba:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cfc2:	0f 86 a9 00 00 00    	jbe    c001d071 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cfc8:	fa                   	cli    
c001cfc9:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001cfcf:	51                   	push   ecx
c001cfd0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cfd7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfdd:	6a 00                	push   0x0
c001cfdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cfe4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cfe7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfed:	e8 d0 50 ff ff       	call   c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>
c001cff2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cff6:	c1 e6 0c             	shl    esi,0xc
c001cff9:	01 de                	add    esi,ebx
c001cffb:	83 c4 10             	add    esp,0x10
c001cffe:	39 de                	cmp    esi,ebx
c001d000:	74 61                	je     c001d063 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001d002:	e8 f1 2e ff ff       	call   c000fef8 <Phys::allocatePage()>
c001d007:	6a 07                	push   0x7
c001d009:	89 c7                	mov    edi,eax
c001d00b:	55                   	push   ebp
c001d00c:	50                   	push   eax
c001d00d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d012:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d015:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001d01b:	e8 48 52 ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d020:	58                   	pop    eax
c001d021:	5a                   	pop    edx
c001d022:	68 07 0c 00 00       	push   0xc07
c001d027:	53                   	push   ebx
c001d028:	81 c3 00 10 00 00    	add    ebx,0x1000
c001d02e:	57                   	push   edi
c001d02f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001d036:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001d03c:	6a 00                	push   0x0
c001d03e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d043:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d046:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001d04c:	e8 d3 55 ff ff       	call   c0012624 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001d051:	83 c4 1c             	add    esp,0x1c
c001d054:	68 00 10 00 00       	push   0x1000
c001d059:	6a 00                	push   0x0
c001d05b:	55                   	push   ebp
c001d05c:	e8 ef 36 fe ff       	call   c0000750 <memset>
c001d061:	eb 98                	jmp    c001cffb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001d063:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001d068:	48                   	dec    eax
c001d069:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001d06e:	75 01                	jne    c001d071 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001d070:	fb                   	sti    
c001d071:	83 ec 0c             	sub    esp,0xc
c001d074:	55                   	push   ebp
c001d075:	e8 77 4e ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001d07a:	83 c4 10             	add    esp,0x10
c001d07d:	b0 01                	mov    al,0x1
c001d07f:	81 c4 2c 10 00 00    	add    esp,0x102c
c001d085:	5b                   	pop    ebx
c001d086:	5e                   	pop    esi
c001d087:	5f                   	pop    edi
c001d088:	5d                   	pop    ebp
c001d089:	c3                   	ret    

c001d08a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001d08a:	55                   	push   ebp
c001d08b:	57                   	push   edi
c001d08c:	56                   	push   esi
c001d08d:	53                   	push   ebx
c001d08e:	83 ec 48             	sub    esp,0x48
c001d091:	68 14 01 00 00       	push   0x114
c001d096:	e8 f1 27 ff ff       	call   c000f88c <malloc>
c001d09b:	83 c4 0c             	add    esp,0xc
c001d09e:	89 c6                	mov    esi,eax
c001d0a0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d0a4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001d0a8:	50                   	push   eax
c001d0a9:	e8 e8 62 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001d0ae:	58                   	pop    eax
c001d0af:	5a                   	pop    edx
c001d0b0:	6a 01                	push   0x1
c001d0b2:	56                   	push   esi
c001d0b3:	e8 42 63 ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001d0b8:	83 c4 10             	add    esp,0x10
c001d0bb:	85 c0                	test   eax,eax
c001d0bd:	0f 85 47 01 00 00    	jne    c001d20a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0c3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001d0cb:	83 ec 0c             	sub    esp,0xc
c001d0ce:	6a 34                	push   0x34
c001d0d0:	e8 b7 27 ff ff       	call   c000f88c <malloc>
c001d0d5:	89 c3                	mov    ebx,eax
c001d0d7:	58                   	pop    eax
c001d0d8:	8b 06                	mov    eax,DWORD PTR [esi]
c001d0da:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d0de:	57                   	push   edi
c001d0df:	53                   	push   ebx
c001d0e0:	6a 00                	push   0x0
c001d0e2:	6a 34                	push   0x34
c001d0e4:	56                   	push   esi
c001d0e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0e8:	83 c4 20             	add    esp,0x20
c001d0eb:	85 c0                	test   eax,eax
c001d0ed:	0f 85 17 01 00 00    	jne    c001d20a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0f3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001d0f9:	0f 85 0b 01 00 00    	jne    c001d20a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001d102:	85 c0                	test   eax,eax
c001d104:	0f 84 00 01 00 00    	je     c001d20a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d10a:	31 d2                	xor    edx,edx
c001d10c:	55                   	push   ebp
c001d10d:	52                   	push   edx
c001d10e:	50                   	push   eax
c001d10f:	56                   	push   esi
c001d110:	e8 a3 63 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d115:	83 c4 10             	add    esp,0x10
c001d118:	85 c0                	test   eax,eax
c001d11a:	0f 85 ea 00 00 00    	jne    c001d20a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d120:	83 ec 0c             	sub    esp,0xc
c001d123:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d126:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d12a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d12e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d132:	0f af c2             	imul   eax,edx
c001d135:	50                   	push   eax
c001d136:	e8 51 27 ff ff       	call   c000f88c <malloc>
c001d13b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d13d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d141:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d144:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d148:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d14c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d150:	0f af c2             	imul   eax,edx
c001d153:	99                   	cdq    
c001d154:	52                   	push   edx
c001d155:	50                   	push   eax
c001d156:	56                   	push   esi
c001d157:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d15a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001d15d:	83 c4 20             	add    esp,0x20
c001d160:	85 c0                	test   eax,eax
c001d162:	0f 84 a2 00 00 00    	je     c001d20a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d168:	31 d2                	xor    edx,edx
c001d16a:	51                   	push   ecx
c001d16b:	52                   	push   edx
c001d16c:	50                   	push   eax
c001d16d:	56                   	push   esi
c001d16e:	e8 45 63 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d173:	83 c4 10             	add    esp,0x10
c001d176:	85 c0                	test   eax,eax
c001d178:	0f 85 8c 00 00 00    	jne    c001d20a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d17e:	83 ec 0c             	sub    esp,0xc
c001d181:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d185:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d189:	31 ed                	xor    ebp,ebp
c001d18b:	0f af c2             	imul   eax,edx
c001d18e:	50                   	push   eax
c001d18f:	e8 f8 26 ff ff       	call   c000f88c <malloc>
c001d194:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d196:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d19a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d19d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1a1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d1a5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d1a9:	0f af c2             	imul   eax,edx
c001d1ac:	99                   	cdq    
c001d1ad:	52                   	push   edx
c001d1ae:	50                   	push   eax
c001d1af:	56                   	push   esi
c001d1b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1b3:	83 c4 20             	add    esp,0x20
c001d1b6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d1be:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001d1c2:	0f 86 80 00 00 00    	jbe    c001d248 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001d1c8:	0f b7 fd             	movzx  edi,bp
c001d1cb:	c1 e7 05             	shl    edi,0x5
c001d1ce:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001d1d2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001d1d5:	75 6b                	jne    c001d242 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d1d7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001d1da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1de:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d1e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d1e5:	52                   	push   edx
c001d1e6:	31 d2                	xor    edx,edx
c001d1e8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001d1eb:	52                   	push   edx
c001d1ec:	50                   	push   eax
c001d1ed:	56                   	push   esi
c001d1ee:	e8 c5 62 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d1f3:	83 c4 10             	add    esp,0x10
c001d1f6:	85 c0                	test   eax,eax
c001d1f8:	74 17                	je     c001d211 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001d1fa:	83 ec 0c             	sub    esp,0xc
c001d1fd:	68 4e cf 02 c0       	push   0xc002cf4e
c001d202:	e8 30 5c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001d207:	83 c4 10             	add    esp,0x10
c001d20a:	31 c0                	xor    eax,eax
c001d20c:	e9 87 00 00 00       	jmp    c001d298 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001d211:	83 ec 0c             	sub    esp,0xc
c001d214:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d217:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001d21a:	50                   	push   eax
c001d21b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d21f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d223:	56                   	push   esi
c001d224:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001d228:	e8 b3 fb ff ff       	call   c001cde0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001d22d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d231:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d235:	83 c4 20             	add    esp,0x20
c001d238:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d23c:	73 04                	jae    c001d242 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d23e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d242:	45                   	inc    ebp
c001d243:	e9 76 ff ff ff       	jmp    c001d1be <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d248:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d24c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d254:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d25a:	83 ec 0c             	sub    esp,0xc
c001d25d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d263:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d268:	05 00 10 00 00       	add    eax,0x1000
c001d26d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d274:	e8 23 26 ff ff       	call   c000f89c <free>
c001d279:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d27c:	e8 1b 26 ff ff       	call   c000f89c <free>
c001d281:	58                   	pop    eax
c001d282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d286:	e8 11 26 ff ff       	call   c000f89c <free>
c001d28b:	89 34 24             	mov    DWORD PTR [esp],esi
c001d28e:	e8 c5 61 ff ff       	call   c0013458 <File::close()>
c001d293:	83 c4 10             	add    esp,0x10
c001d296:	b0 01                	mov    al,0x1
c001d298:	83 c4 3c             	add    esp,0x3c
c001d29b:	5b                   	pop    ebx
c001d29c:	5e                   	pop    esi
c001d29d:	5f                   	pop    edi
c001d29e:	5d                   	pop    ebp
c001d29f:	c3                   	ret    

c001d2a0 <Thr::runtimeReferenceHelper()>:
c001d2a0:	83 ec 18             	sub    esp,0x18
c001d2a3:	68 56 cf 02 c0       	push   0xc002cf56
c001d2a8:	e8 8a 5b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001d2ad:	fa                   	cli    
c001d2ae:	83 c4 10             	add    esp,0x10
c001d2b1:	eb fe                	jmp    c001d2b1 <Thr::runtimeReferenceHelper()+0x11>

c001d2b3 <Thr::getAddressOfKernelSymbol(char const*)>:
c001d2b3:	57                   	push   edi
c001d2b4:	56                   	push   esi
c001d2b5:	53                   	push   ebx
c001d2b6:	31 db                	xor    ebx,ebx
c001d2b8:	39 1d 20 29 03 c0    	cmp    DWORD PTR ds:0xc0032920,ebx
c001d2be:	7e 3c                	jle    c001d2fc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d2c0:	8b 34 9d a0 28 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd760]
c001d2c7:	31 ff                	xor    edi,edi
c001d2c9:	39 3c 9d a0 27 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcd860],edi
c001d2d0:	7e 27                	jle    c001d2f9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d2d2:	50                   	push   eax
c001d2d3:	50                   	push   eax
c001d2d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2d8:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2da:	03 04 9d 20 28 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcd7e0]
c001d2e1:	50                   	push   eax
c001d2e2:	e8 b1 35 fe ff       	call   c0000898 <strcmp>
c001d2e7:	83 c4 10             	add    esp,0x10
c001d2ea:	85 c0                	test   eax,eax
c001d2ec:	75 05                	jne    c001d2f3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d2ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d2f1:	eb 0b                	jmp    c001d2fe <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d2f3:	83 c6 10             	add    esi,0x10
c001d2f6:	47                   	inc    edi
c001d2f7:	eb d0                	jmp    c001d2c9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d2f9:	43                   	inc    ebx
c001d2fa:	eb bc                	jmp    c001d2b8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d2fc:	31 c0                	xor    eax,eax
c001d2fe:	5b                   	pop    ebx
c001d2ff:	5e                   	pop    esi
c001d300:	5f                   	pop    edi
c001d301:	c3                   	ret    

c001d302 <Thr::loadKernelSymbolTable(char const*)>:
c001d302:	55                   	push   ebp
c001d303:	57                   	push   edi
c001d304:	56                   	push   esi
c001d305:	53                   	push   ebx
c001d306:	83 ec 68             	sub    esp,0x68
c001d309:	8b 35 70 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032970
c001d30f:	68 14 01 00 00       	push   0x114
c001d314:	e8 73 25 ff ff       	call   c000f88c <malloc>
c001d319:	83 c4 0c             	add    esp,0xc
c001d31c:	89 c3                	mov    ebx,eax
c001d31e:	56                   	push   esi
c001d31f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d323:	50                   	push   eax
c001d324:	e8 6d 60 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001d329:	5e                   	pop    esi
c001d32a:	5f                   	pop    edi
c001d32b:	6a 01                	push   0x1
c001d32d:	53                   	push   ebx
c001d32e:	e8 c7 60 ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001d333:	83 c4 10             	add    esp,0x10
c001d336:	85 c0                	test   eax,eax
c001d338:	74 0a                	je     c001d344 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d33a:	83 ec 0c             	sub    esp,0xc
c001d33d:	68 78 cf 02 c0       	push   0xc002cf78
c001d342:	eb 34                	jmp    c001d378 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d344:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d34c:	83 ec 0c             	sub    esp,0xc
c001d34f:	6a 34                	push   0x34
c001d351:	e8 36 25 ff ff       	call   c000f88c <malloc>
c001d356:	59                   	pop    ecx
c001d357:	89 c7                	mov    edi,eax
c001d359:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d35d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d35f:	56                   	push   esi
c001d360:	57                   	push   edi
c001d361:	6a 00                	push   0x0
c001d363:	6a 34                	push   0x34
c001d365:	53                   	push   ebx
c001d366:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d369:	83 c4 20             	add    esp,0x20
c001d36c:	85 c0                	test   eax,eax
c001d36e:	74 17                	je     c001d387 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d370:	83 ec 0c             	sub    esp,0xc
c001d373:	68 8f cf 02 c0       	push   0xc002cf8f
c001d378:	e8 28 d6 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001d37d:	83 c4 10             	add    esp,0x10
c001d380:	31 c0                	xor    eax,eax
c001d382:	e9 31 02 00 00       	jmp    c001d5b8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d387:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d38d:	75 e1                	jne    c001d370 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d38f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d392:	85 c0                	test   eax,eax
c001d394:	74 da                	je     c001d370 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d396:	52                   	push   edx
c001d397:	31 d2                	xor    edx,edx
c001d399:	52                   	push   edx
c001d39a:	50                   	push   eax
c001d39b:	53                   	push   ebx
c001d39c:	e8 17 61 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d3a1:	83 c4 10             	add    esp,0x10
c001d3a4:	85 c0                	test   eax,eax
c001d3a6:	75 c8                	jne    c001d370 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d3a8:	83 ec 0c             	sub    esp,0xc
c001d3ab:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3af:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3b3:	31 ed                	xor    ebp,ebp
c001d3b5:	0f af c2             	imul   eax,edx
c001d3b8:	50                   	push   eax
c001d3b9:	e8 ce 24 ff ff       	call   c000f88c <malloc>
c001d3be:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d3c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3c4:	89 34 24             	mov    DWORD PTR [esp],esi
c001d3c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d3cb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3cf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3d3:	0f af c2             	imul   eax,edx
c001d3d6:	99                   	cdq    
c001d3d7:	52                   	push   edx
c001d3d8:	50                   	push   eax
c001d3d9:	53                   	push   ebx
c001d3da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3dd:	83 c4 20             	add    esp,0x20
c001d3e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3e8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d3f0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d3f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d400:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d404:	0f 86 aa 00 00 00    	jbe    c001d4b4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d40a:	0f b7 f5             	movzx  esi,bp
c001d40d:	6b f6 28             	imul   esi,esi,0x28
c001d410:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d414:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d417:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d41b:	50                   	push   eax
c001d41c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d420:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d424:	8b 16                	mov    edx,DWORD PTR [esi]
c001d426:	6b c0 28             	imul   eax,eax,0x28
c001d429:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d42d:	89 d0                	mov    eax,edx
c001d42f:	31 d2                	xor    edx,edx
c001d431:	52                   	push   edx
c001d432:	50                   	push   eax
c001d433:	53                   	push   ebx
c001d434:	e8 7f 60 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d439:	83 c4 0c             	add    esp,0xc
c001d43c:	6a 20                	push   0x20
c001d43e:	6a 00                	push   0x0
c001d440:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d444:	52                   	push   edx
c001d445:	e8 06 33 fe ff       	call   c0000750 <memset>
c001d44a:	58                   	pop    eax
c001d44b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d44d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d451:	51                   	push   ecx
c001d452:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d456:	52                   	push   edx
c001d457:	6a 00                	push   0x0
c001d459:	6a 1f                	push   0x1f
c001d45b:	53                   	push   ebx
c001d45c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d45f:	83 c4 18             	add    esp,0x18
c001d462:	68 a6 cf 02 c0       	push   0xc002cfa6
c001d467:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d46b:	52                   	push   edx
c001d46c:	e8 27 34 fe ff       	call   c0000898 <strcmp>
c001d471:	83 c4 10             	add    esp,0x10
c001d474:	85 c0                	test   eax,eax
c001d476:	75 0f                	jne    c001d487 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d478:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d47b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d47f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d487:	50                   	push   eax
c001d488:	50                   	push   eax
c001d489:	68 ae cf 02 c0       	push   0xc002cfae
c001d48e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d492:	50                   	push   eax
c001d493:	e8 00 34 fe ff       	call   c0000898 <strcmp>
c001d498:	83 c4 10             	add    esp,0x10
c001d49b:	85 c0                	test   eax,eax
c001d49d:	75 0f                	jne    c001d4ae <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d49f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d4a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d4a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d4aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d4ae:	45                   	inc    ebp
c001d4af:	e9 4c ff ff ff       	jmp    c001d400 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d4b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d4b9:	75 10                	jne    c001d4cb <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d4bb:	83 ec 0c             	sub    esp,0xc
c001d4be:	68 b6 cf 02 c0       	push   0xc002cfb6
c001d4c3:	e8 dd d4 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001d4c8:	83 c4 10             	add    esp,0x10
c001d4cb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d4d0:	75 10                	jne    c001d4e2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d4d2:	83 ec 0c             	sub    esp,0xc
c001d4d5:	68 b6 cf 02 c0       	push   0xc002cfb6
c001d4da:	e8 c6 d4 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001d4df:	83 c4 10             	add    esp,0x10
c001d4e2:	31 d2                	xor    edx,edx
c001d4e4:	50                   	push   eax
c001d4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e9:	52                   	push   edx
c001d4ea:	50                   	push   eax
c001d4eb:	53                   	push   ebx
c001d4ec:	e8 c7 5f ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d4f1:	5a                   	pop    edx
c001d4f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4f6:	e8 91 23 ff ff       	call   c000f88c <malloc>
c001d4fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d4ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d503:	31 c9                	xor    ecx,ecx
c001d505:	5e                   	pop    esi
c001d506:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d508:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d50c:	55                   	push   ebp
c001d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d511:	51                   	push   ecx
c001d512:	52                   	push   edx
c001d513:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d517:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d51b:	53                   	push   ebx
c001d51c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d51f:	83 c4 14             	add    esp,0x14
c001d522:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d526:	e8 61 23 ff ff       	call   c000f88c <malloc>
c001d52b:	89 c6                	mov    esi,eax
c001d52d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d52f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d532:	56                   	push   esi
c001d533:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d537:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d53b:	51                   	push   ecx
c001d53c:	52                   	push   edx
c001d53d:	53                   	push   ebx
c001d53e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d545:	8b 15 20 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032920
c001d54b:	83 c4 1c             	add    esp,0x1c
c001d54e:	c1 e8 04             	shr    eax,0x4
c001d551:	89 04 95 a0 27 03 c0 	mov    DWORD PTR [edx*4-0x3ffcd860],eax
c001d558:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d55c:	31 d2                	xor    edx,edx
c001d55e:	52                   	push   edx
c001d55f:	50                   	push   eax
c001d560:	53                   	push   ebx
c001d561:	e8 52 5f ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d566:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d568:	31 d2                	xor    edx,edx
c001d56a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d56d:	56                   	push   esi
c001d56e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d572:	52                   	push   edx
c001d573:	50                   	push   eax
c001d574:	53                   	push   ebx
c001d575:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d578:	83 c4 14             	add    esp,0x14
c001d57b:	53                   	push   ebx
c001d57c:	e8 d7 5e ff ff       	call   c0013458 <File::close()>
c001d581:	5d                   	pop    ebp
c001d582:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d586:	e8 11 23 ff ff       	call   c000f89c <free>
c001d58b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d58e:	e8 09 23 ff ff       	call   c000f89c <free>
c001d593:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c001d598:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d59c:	8d 50 01             	lea    edx,[eax+0x1]
c001d59f:	89 0c 85 a0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd760],ecx
c001d5a6:	89 34 85 20 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd7e0],esi
c001d5ad:	89 15 20 29 03 c0    	mov    DWORD PTR ds:0xc0032920,edx
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	b0 01                	mov    al,0x1
c001d5b8:	83 c4 5c             	add    esp,0x5c
c001d5bb:	5b                   	pop    ebx
c001d5bc:	5e                   	pop    esi
c001d5bd:	5f                   	pop    edi
c001d5be:	5d                   	pop    ebp
c001d5bf:	c3                   	ret    

c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d5c0:	55                   	push   ebp
c001d5c1:	57                   	push   edi
c001d5c2:	56                   	push   esi
c001d5c3:	53                   	push   ebx
c001d5c4:	81 ec 68 03 00 00    	sub    esp,0x368
c001d5ca:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d5d1:	8b 1d 70 29 03 c0    	mov    ebx,DWORD PTR ds:0xc0032970
c001d5d7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d5db:	68 14 01 00 00       	push   0x114
c001d5e0:	e8 a7 22 ff ff       	call   c000f88c <malloc>
c001d5e5:	83 c4 0c             	add    esp,0xc
c001d5e8:	89 c5                	mov    ebp,eax
c001d5ea:	53                   	push   ebx
c001d5eb:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d5f2:	50                   	push   eax
c001d5f3:	e8 9e 5d ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001d5f8:	5e                   	pop    esi
c001d5f9:	5f                   	pop    edi
c001d5fa:	6a 01                	push   0x1
c001d5fc:	55                   	push   ebp
c001d5fd:	e8 f8 5d ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001d602:	83 c4 10             	add    esp,0x10
c001d605:	85 c0                	test   eax,eax
c001d607:	0f 85 a7 06 00 00    	jne    c001dcb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d60d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d615:	83 ec 0c             	sub    esp,0xc
c001d618:	6a 34                	push   0x34
c001d61a:	e8 6d 22 ff ff       	call   c000f88c <malloc>
c001d61f:	5b                   	pop    ebx
c001d620:	89 c7                	mov    edi,eax
c001d622:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d626:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d629:	53                   	push   ebx
c001d62a:	57                   	push   edi
c001d62b:	6a 00                	push   0x0
c001d62d:	6a 34                	push   0x34
c001d62f:	55                   	push   ebp
c001d630:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d633:	83 c4 20             	add    esp,0x20
c001d636:	85 c0                	test   eax,eax
c001d638:	0f 85 76 06 00 00    	jne    c001dcb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d63e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d644:	0f 85 6a 06 00 00    	jne    c001dcb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d64a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d64d:	85 c0                	test   eax,eax
c001d64f:	0f 84 5f 06 00 00    	je     c001dcb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d655:	31 d2                	xor    edx,edx
c001d657:	51                   	push   ecx
c001d658:	52                   	push   edx
c001d659:	50                   	push   eax
c001d65a:	55                   	push   ebp
c001d65b:	e8 58 5e ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d660:	83 c4 10             	add    esp,0x10
c001d663:	85 c0                	test   eax,eax
c001d665:	0f 85 49 06 00 00    	jne    c001dcb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d66b:	83 ec 0c             	sub    esp,0xc
c001d66e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d671:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d675:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d679:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d67d:	0f af c2             	imul   eax,edx
c001d680:	50                   	push   eax
c001d681:	e8 06 22 ff ff       	call   c000f88c <malloc>
c001d686:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d689:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d68d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d690:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d694:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d698:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d69c:	0f af c2             	imul   eax,edx
c001d69f:	99                   	cdq    
c001d6a0:	52                   	push   edx
c001d6a1:	50                   	push   eax
c001d6a2:	55                   	push   ebp
c001d6a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6a6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d6a9:	83 c4 20             	add    esp,0x20
c001d6ac:	85 c0                	test   eax,eax
c001d6ae:	0f 84 00 06 00 00    	je     c001dcb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d6b4:	52                   	push   edx
c001d6b5:	31 d2                	xor    edx,edx
c001d6b7:	52                   	push   edx
c001d6b8:	50                   	push   eax
c001d6b9:	55                   	push   ebp
c001d6ba:	e8 f9 5d ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d6bf:	83 c4 10             	add    esp,0x10
c001d6c2:	85 c0                	test   eax,eax
c001d6c4:	0f 85 ea 05 00 00    	jne    c001dcb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d6ca:	83 ec 0c             	sub    esp,0xc
c001d6cd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d6d1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d6d5:	31 f6                	xor    esi,esi
c001d6d7:	0f af c2             	imul   eax,edx
c001d6da:	50                   	push   eax
c001d6db:	e8 ac 21 ff ff       	call   c000f88c <malloc>
c001d6e0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d6ee:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d6f2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d6f6:	0f af c2             	imul   eax,edx
c001d6f9:	99                   	cdq    
c001d6fa:	52                   	push   edx
c001d6fb:	50                   	push   eax
c001d6fc:	55                   	push   ebp
c001d6fd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d700:	83 c4 20             	add    esp,0x20
c001d703:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d707:	0f 86 8a 00 00 00    	jbe    c001d797 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d70d:	0f b7 de             	movzx  ebx,si
c001d710:	c1 e3 05             	shl    ebx,0x5
c001d713:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d717:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d71a:	75 75                	jne    c001d791 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d71c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d71f:	31 d2                	xor    edx,edx
c001d721:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d725:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d728:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d72c:	50                   	push   eax
c001d72d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d730:	52                   	push   edx
c001d731:	50                   	push   eax
c001d732:	55                   	push   ebp
c001d733:	e8 80 5d ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d738:	83 c4 10             	add    esp,0x10
c001d73b:	85 c0                	test   eax,eax
c001d73d:	0f 85 71 05 00 00    	jne    c001dcb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d743:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d74a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d74d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d751:	31 d2                	xor    edx,edx
c001d753:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d757:	83 ec 0c             	sub    esp,0xc
c001d75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d75e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d765:	50                   	push   eax
c001d766:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d76a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d76e:	52                   	push   edx
c001d76f:	50                   	push   eax
c001d770:	55                   	push   ebp
c001d771:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d774:	83 c4 1c             	add    esp,0x1c
c001d777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d77a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d77d:	50                   	push   eax
c001d77e:	6a 00                	push   0x0
c001d780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d784:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d788:	50                   	push   eax
c001d789:	e8 c2 2f fe ff       	call   c0000750 <memset>
c001d78e:	83 c4 10             	add    esp,0x10
c001d791:	46                   	inc    esi
c001d792:	e9 6c ff ff ff       	jmp    c001d703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d797:	53                   	push   ebx
c001d798:	31 db                	xor    ebx,ebx
c001d79a:	68 00 01 00 00       	push   0x100
c001d79f:	6a 00                	push   0x0
c001d7a1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d7a5:	50                   	push   eax
c001d7a6:	e8 a5 2f fe ff       	call   c0000750 <memset>
c001d7ab:	83 c4 0c             	add    esp,0xc
c001d7ae:	68 00 01 00 00       	push   0x100
c001d7b3:	6a 00                	push   0x0
c001d7b5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d7bc:	50                   	push   eax
c001d7bd:	e8 8e 2f fe ff       	call   c0000750 <memset>
c001d7c2:	83 c4 10             	add    esp,0x10
c001d7c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d7cd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d7d5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d7dd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d7e5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d7ed:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d7f1:	0f 86 30 01 00 00    	jbe    c001d927 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d7f7:	0f b7 f3             	movzx  esi,bx
c001d7fa:	6b f6 28             	imul   esi,esi,0x28
c001d7fd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d801:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d804:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d808:	52                   	push   edx
c001d809:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d80d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d811:	8b 06                	mov    eax,DWORD PTR [esi]
c001d813:	6b d2 28             	imul   edx,edx,0x28
c001d816:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d81a:	31 d2                	xor    edx,edx
c001d81c:	52                   	push   edx
c001d81d:	50                   	push   eax
c001d81e:	55                   	push   ebp
c001d81f:	e8 94 5c ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d824:	83 c4 0c             	add    esp,0xc
c001d827:	6a 20                	push   0x20
c001d829:	6a 00                	push   0x0
c001d82b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d832:	51                   	push   ecx
c001d833:	e8 18 2f fe ff       	call   c0000750 <memset>
c001d838:	59                   	pop    ecx
c001d839:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d83c:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d840:	52                   	push   edx
c001d841:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d848:	51                   	push   ecx
c001d849:	6a 00                	push   0x0
c001d84b:	6a 1f                	push   0x1f
c001d84d:	55                   	push   ebp
c001d84e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d851:	83 c4 1c             	add    esp,0x1c
c001d854:	6a 09                	push   0x9
c001d856:	68 d0 cf 02 c0       	push   0xc002cfd0
c001d85b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d862:	51                   	push   ecx
c001d863:	e8 e4 2d fe ff       	call   c000064c <memcmp>
c001d868:	83 c4 10             	add    esp,0x10
c001d86b:	85 c0                	test   eax,eax
c001d86d:	75 21                	jne    c001d890 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d86f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d873:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d877:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d87b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d87f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d882:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d889:	89 d0                	mov    eax,edx
c001d88b:	40                   	inc    eax
c001d88c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d890:	50                   	push   eax
c001d891:	6a 09                	push   0x9
c001d893:	68 da cf 02 c0       	push   0xc002cfda
c001d898:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d89f:	50                   	push   eax
c001d8a0:	e8 a7 2d fe ff       	call   c000064c <memcmp>
c001d8a5:	83 c4 10             	add    esp,0x10
c001d8a8:	85 c0                	test   eax,eax
c001d8aa:	75 21                	jne    c001d8cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d8ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d8b4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d8b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d8bc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d8bf:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d8c6:	89 d0                	mov    eax,edx
c001d8c8:	40                   	inc    eax
c001d8c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d8cd:	50                   	push   eax
c001d8ce:	50                   	push   eax
c001d8cf:	68 a6 cf 02 c0       	push   0xc002cfa6
c001d8d4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d8db:	50                   	push   eax
c001d8dc:	e8 b7 2f fe ff       	call   c0000898 <strcmp>
c001d8e1:	83 c4 10             	add    esp,0x10
c001d8e4:	85 c0                	test   eax,eax
c001d8e6:	75 0f                	jne    c001d8f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d8e8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d8eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d8f7:	50                   	push   eax
c001d8f8:	50                   	push   eax
c001d8f9:	68 ae cf 02 c0       	push   0xc002cfae
c001d8fe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d905:	50                   	push   eax
c001d906:	e8 8d 2f fe ff       	call   c0000898 <strcmp>
c001d90b:	83 c4 10             	add    esp,0x10
c001d90e:	85 c0                	test   eax,eax
c001d910:	75 0f                	jne    c001d921 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d912:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d915:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d91d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d921:	43                   	inc    ebx
c001d922:	e9 c6 fe ff ff       	jmp    c001d7ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d927:	31 d2                	xor    edx,edx
c001d929:	50                   	push   eax
c001d92a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d92e:	52                   	push   edx
c001d92f:	50                   	push   eax
c001d930:	55                   	push   ebp
c001d931:	e8 82 5b ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d936:	58                   	pop    eax
c001d937:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d93b:	e8 4c 1f ff ff       	call   c000f88c <malloc>
c001d940:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d943:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d947:	31 d2                	xor    edx,edx
c001d949:	58                   	pop    eax
c001d94a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d94e:	53                   	push   ebx
c001d94f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d953:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d957:	52                   	push   edx
c001d958:	50                   	push   eax
c001d959:	55                   	push   ebp
c001d95a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d95d:	83 c4 14             	add    esp,0x14
c001d960:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d964:	e8 23 1f ff ff       	call   c000f88c <malloc>
c001d969:	31 d2                	xor    edx,edx
c001d96b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d96f:	83 c4 0c             	add    esp,0xc
c001d972:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d976:	52                   	push   edx
c001d977:	50                   	push   eax
c001d978:	55                   	push   ebp
c001d979:	e8 3a 5b ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d97e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d981:	31 d2                	xor    edx,edx
c001d983:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d986:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d98a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d98e:	52                   	push   edx
c001d98f:	50                   	push   eax
c001d990:	55                   	push   ebp
c001d991:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d994:	83 c4 20             	add    esp,0x20
c001d997:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d99f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d9a3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d9a7:	0f 84 0b 03 00 00    	je     c001dcb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d9ad:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d9b4:	31 d2                	xor    edx,edx
c001d9b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9ba:	c1 e8 03             	shr    eax,0x3
c001d9bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d9c1:	51                   	push   ecx
c001d9c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9c6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d9ca:	52                   	push   edx
c001d9cb:	50                   	push   eax
c001d9cc:	55                   	push   ebp
c001d9cd:	e8 e6 5a ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d9d2:	5b                   	pop    ebx
c001d9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9d7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d9de:	e8 a9 1e ff ff       	call   c000f88c <malloc>
c001d9e3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d9e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d9ea:	31 d2                	xor    edx,edx
c001d9ec:	5e                   	pop    esi
c001d9ed:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d9f1:	50                   	push   eax
c001d9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d9fa:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001da01:	52                   	push   edx
c001da02:	50                   	push   eax
c001da03:	55                   	push   ebp
c001da04:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001da07:	83 c4 20             	add    esp,0x20
c001da0a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001da12:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001da16:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001da1a:	0f 8d 7c 02 00 00    	jge    c001dc9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001da20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001da24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da28:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001da2d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001da30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001da34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da38:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001da3c:	89 d8                	mov    eax,ebx
c001da3e:	c1 e8 08             	shr    eax,0x8
c001da41:	89 c6                	mov    esi,eax
c001da43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001da47:	c1 e6 04             	shl    esi,0x4
c001da4a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001da4e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001da51:	85 d2                	test   edx,edx
c001da53:	0f 85 bf 00 00 00    	jne    c001db18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001da59:	83 ec 0c             	sub    esp,0xc
c001da5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da60:	03 06                	add    eax,DWORD PTR [esi]
c001da62:	50                   	push   eax
c001da63:	e8 4b f8 ff ff       	call   c001d2b3 <Thr::getAddressOfKernelSymbol(char const*)>
c001da68:	83 c4 10             	add    esp,0x10
c001da6b:	89 c2                	mov    edx,eax
c001da6d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001da72:	85 c0                	test   eax,eax
c001da74:	0f 85 9e 00 00 00    	jne    c001db18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001da7a:	83 ec 0c             	sub    esp,0xc
c001da7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da81:	03 06                	add    eax,DWORD PTR [esi]
c001da83:	50                   	push   eax
c001da84:	e8 b6 0a ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001da89:	83 c4 10             	add    esp,0x10
c001da8c:	89 c2                	mov    edx,eax
c001da8e:	85 c0                	test   eax,eax
c001da90:	0f 85 82 00 00 00    	jne    c001db18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001da96:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001da9a:	50                   	push   eax
c001da9b:	50                   	push   eax
c001da9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa0:	03 06                	add    eax,DWORD PTR [esi]
c001daa2:	50                   	push   eax
c001daa3:	68 e4 cf 02 c0       	push   0xc002cfe4
c001daa8:	e8 8a 53 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001daad:	58                   	pop    eax
c001daae:	5a                   	pop    edx
c001daaf:	68 fe cf 02 c0       	push   0xc002cffe
c001dab4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001dabb:	50                   	push   eax
c001dabc:	e8 4b 2d fe ff       	call   c000080c <strcpy>
c001dac1:	59                   	pop    ecx
c001dac2:	58                   	pop    eax
c001dac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac7:	03 06                	add    eax,DWORD PTR [esi]
c001dac9:	50                   	push   eax
c001daca:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001dad1:	50                   	push   eax
c001dad2:	e8 75 2e fe ff       	call   c000094c <strcat>
c001dad7:	58                   	pop    eax
c001dad8:	5a                   	pop    edx
c001dad9:	68 94 d0 02 c0       	push   0xc002d094
c001dade:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001dae5:	50                   	push   eax
c001dae6:	e8 61 2e fe ff       	call   c000094c <strcat>
c001daeb:	83 c4 10             	add    esp,0x10
c001daee:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001daf3:	0f 84 5d 01 00 00    	je     c001dc56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001daf9:	83 ec 0c             	sub    esp,0xc
c001dafc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001db03:	50                   	push   eax
c001db04:	e8 9c ce ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001db09:	83 c4 10             	add    esp,0x10
c001db0c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001db10:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db14:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001db18:	80 fb 01             	cmp    bl,0x1
c001db1b:	0f 85 88 00 00 00    	jne    c001dba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001db21:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001db28:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db2c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001db30:	01 ce                	add    esi,ecx
c001db32:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001db38:	0f 94 c0             	sete   al
c001db3b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001db41:	0f 94 c3             	sete   bl
c001db44:	09 c3                	or     ebx,eax
c001db46:	8b 06                	mov    eax,DWORD PTR [esi]
c001db48:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001db4d:	74 41                	je     c001db90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001db4f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001db52:	84 db                	test   bl,bl
c001db54:	75 15                	jne    c001db6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001db56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001db5a:	66 83 f8 0c          	cmp    ax,0xc
c001db5e:	76 05                	jbe    c001db65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001db60:	b8 0c 00 00 00       	mov    eax,0xc
c001db65:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001db69:	76 37                	jbe    c001dba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db6b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001db6f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db74:	0f 84 dc 00 00 00    	je     c001dc56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db7a:	83 ec 0c             	sub    esp,0xc
c001db7d:	68 15 d0 02 c0       	push   0xc002d015
c001db82:	e8 1e ce ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001db87:	83 c4 10             	add    esp,0x10
c001db8a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001db8e:	eb 12                	jmp    c001dba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db90:	01 c1                	add    ecx,eax
c001db92:	84 db                	test   bl,bl
c001db94:	75 0c                	jne    c001dba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db96:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001db9a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001db9e:	77 02                	ja     c001dba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001dba0:	01 d1                	add    ecx,edx
c001dba2:	89 0e                	mov    DWORD PTR [esi],ecx
c001dba4:	e9 ea 00 00 00       	jmp    c001dc93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dba9:	80 fb 02             	cmp    bl,0x2
c001dbac:	75 7c                	jne    c001dc2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001dbae:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001dbb5:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001dbb9:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001dbbd:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001dbc3:	74 20                	je     c001dbe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001dbc5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001dbcb:	74 18                	je     c001dbe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001dbcd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001dbd1:	b9 0a 00 00 00       	mov    ecx,0xa
c001dbd6:	66 83 f8 0e          	cmp    ax,0xe
c001dbda:	77 03                	ja     c001dbdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001dbdc:	8d 48 fc             	lea    ecx,[eax-0x4]
c001dbdf:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001dbe3:	76 1f                	jbe    c001dc04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001dbe5:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001dbe9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dbee:	74 66                	je     c001dc56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001dbf0:	83 ec 0c             	sub    esp,0xc
c001dbf3:	68 31 d0 02 c0       	push   0xc002d031
c001dbf8:	e8 a8 cd ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001dbfd:	83 c4 10             	add    esp,0x10
c001dc00:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc04:	8b 06                	mov    eax,DWORD PTR [esi]
c001dc06:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001dc0b:	74 13                	je     c001dc20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001dc0d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dc11:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001dc18:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001dc1c:	01 c8                	add    eax,ecx
c001dc1e:	eb 04                	jmp    c001dc24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001dc20:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001dc24:	01 c2                	add    edx,eax
c001dc26:	89 16                	mov    DWORD PTR [esi],edx
c001dc28:	eb 69                	jmp    c001dc93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dc2a:	0f b6 db             	movzx  ebx,bl
c001dc2d:	50                   	push   eax
c001dc2e:	50                   	push   eax
c001dc2f:	53                   	push   ebx
c001dc30:	68 4d d0 02 c0       	push   0xc002d04d
c001dc35:	e8 fd 51 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001dc3a:	83 c4 10             	add    esp,0x10
c001dc3d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dc42:	74 12                	je     c001dc56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001dc44:	83 ec 0c             	sub    esp,0xc
c001dc47:	68 58 d0 02 c0       	push   0xc002d058
c001dc4c:	e8 54 cd ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001dc51:	83 c4 10             	add    esp,0x10
c001dc54:	eb 3d                	jmp    c001dc93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dc56:	83 ec 0c             	sub    esp,0xc
c001dc59:	55                   	push   ebp
c001dc5a:	e8 f9 57 ff ff       	call   c0013458 <File::close()>
c001dc5f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dc62:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dc65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dc68:	59                   	pop    ecx
c001dc69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dc6d:	e8 2a 1c ff ff       	call   c000f89c <free>
c001dc72:	5b                   	pop    ebx
c001dc73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc77:	e8 20 1c ff ff       	call   c000f89c <free>
c001dc7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc7f:	e8 18 1c ff ff       	call   c000f89c <free>
c001dc84:	5e                   	pop    esi
c001dc85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc89:	e8 0e 1c ff ff       	call   c000f89c <free>
c001dc8e:	83 c4 10             	add    esp,0x10
c001dc91:	eb 21                	jmp    c001dcb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001dc93:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001dc97:	e9 76 fd ff ff       	jmp    c001da12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001dc9c:	83 ec 0c             	sub    esp,0xc
c001dc9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dca3:	e8 f4 1b ff ff       	call   c000f89c <free>
c001dca8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001dcac:	83 c4 10             	add    esp,0x10
c001dcaf:	e9 eb fc ff ff       	jmp    c001d99f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001dcb4:	31 c0                	xor    eax,eax
c001dcb6:	eb 33                	jmp    c001dceb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001dcb8:	83 ec 0c             	sub    esp,0xc
c001dcbb:	55                   	push   ebp
c001dcbc:	e8 97 57 ff ff       	call   c0013458 <File::close()>
c001dcc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dcc4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dcc7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dcca:	58                   	pop    eax
c001dccb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dccf:	e8 c8 1b ff ff       	call   c000f89c <free>
c001dcd4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dcd7:	e8 c0 1b ff ff       	call   c000f89c <free>
c001dcdc:	5a                   	pop    edx
c001dcdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dce1:	e8 b6 1b ff ff       	call   c000f89c <free>
c001dce6:	83 c4 10             	add    esp,0x10
c001dce9:	b0 01                	mov    al,0x1
c001dceb:	81 c4 5c 03 00 00    	add    esp,0x35c
c001dcf1:	5b                   	pop    ebx
c001dcf2:	5e                   	pop    esi
c001dcf3:	5f                   	pop    edi
c001dcf4:	5d                   	pop    ebp
c001dcf5:	c3                   	ret    

c001dcf6 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001dcf6:	56                   	push   esi
c001dcf7:	31 d2                	xor    edx,edx
c001dcf9:	53                   	push   ebx
c001dcfa:	8b 1d 80 21 03 c0    	mov    ebx,DWORD PTR ds:0xc0032180
c001dd00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd04:	39 d3                	cmp    ebx,edx
c001dd06:	7e 1b                	jle    c001dd23 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001dd08:	8b 04 95 a0 23 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdc60]
c001dd0f:	39 c8                	cmp    eax,ecx
c001dd11:	77 0d                	ja     c001dd20 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001dd13:	8b 34 95 a0 21 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcde60]
c001dd1a:	01 c6                	add    esi,eax
c001dd1c:	39 ce                	cmp    esi,ecx
c001dd1e:	77 05                	ja     c001dd25 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001dd20:	42                   	inc    edx
c001dd21:	eb e1                	jmp    c001dd04 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001dd23:	31 c0                	xor    eax,eax
c001dd25:	5b                   	pop    ebx
c001dd26:	5e                   	pop    esi
c001dd27:	c3                   	ret    

c001dd28 <Thr::getDriverNameFromAddress(unsigned long)>:
c001dd28:	53                   	push   ebx
c001dd29:	31 c0                	xor    eax,eax
c001dd2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dd2f:	8b 1d 80 21 03 c0    	mov    ebx,DWORD PTR ds:0xc0032180
c001dd35:	39 c3                	cmp    ebx,eax
c001dd37:	7e 22                	jle    c001dd5b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001dd39:	8b 14 85 a0 23 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdc60]
c001dd40:	39 ca                	cmp    edx,ecx
c001dd42:	77 14                	ja     c001dd58 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dd44:	03 14 85 a0 21 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcde60]
c001dd4b:	39 ca                	cmp    edx,ecx
c001dd4d:	76 09                	jbe    c001dd58 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dd4f:	8b 04 85 a0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda60]
c001dd56:	eb 05                	jmp    c001dd5d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001dd58:	40                   	inc    eax
c001dd59:	eb da                	jmp    c001dd35 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001dd5b:	31 c0                	xor    eax,eax
c001dd5d:	5b                   	pop    ebx
c001dd5e:	c3                   	ret    

c001dd5f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dd5f:	53                   	push   ebx
c001dd60:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dd64:	53                   	push   ebx
c001dd65:	e8 8c ff ff ff       	call   c001dcf6 <Thr::getDriverBaseFromAddress(unsigned long)>
c001dd6a:	5a                   	pop    edx
c001dd6b:	31 d2                	xor    edx,edx
c001dd6d:	85 c0                	test   eax,eax
c001dd6f:	74 04                	je     c001dd75 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dd71:	89 da                	mov    edx,ebx
c001dd73:	29 c2                	sub    edx,eax
c001dd75:	89 d0                	mov    eax,edx
c001dd77:	5b                   	pop    ebx
c001dd78:	c3                   	ret    

c001dd79 <Thr::loadDLL(char const*, bool)>:
c001dd79:	55                   	push   ebp
c001dd7a:	57                   	push   edi
c001dd7b:	56                   	push   esi
c001dd7c:	53                   	push   ebx
c001dd7d:	81 ec 34 01 00 00    	sub    esp,0x134
c001dd83:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dd8a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dd91:	56                   	push   esi
c001dd92:	68 70 d0 02 c0       	push   0xc002d070
c001dd97:	e8 9b 50 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001dd9c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dda3:	e8 e4 1a ff ff       	call   c000f88c <malloc>
c001dda8:	83 c4 0c             	add    esp,0xc
c001ddab:	89 c3                	mov    ebx,eax
c001ddad:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c001ddb3:	56                   	push   esi
c001ddb4:	50                   	push   eax
c001ddb5:	e8 dc 55 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001ddba:	83 c4 10             	add    esp,0x10
c001ddbd:	85 db                	test   ebx,ebx
c001ddbf:	75 3c                	jne    c001ddfd <Thr::loadDLL(char const*, bool)+0x84>
c001ddc1:	89 f8                	mov    eax,edi
c001ddc3:	84 c0                	test   al,al
c001ddc5:	0f 84 cc 01 00 00    	je     c001df97 <Thr::loadDLL(char const*, bool)+0x21e>
c001ddcb:	55                   	push   ebp
c001ddcc:	55                   	push   ebp
c001ddcd:	68 81 d0 02 c0       	push   0xc002d081
c001ddd2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001ddd6:	55                   	push   ebp
c001ddd7:	e8 30 2a fe ff       	call   c000080c <strcpy>
c001dddc:	58                   	pop    eax
c001dddd:	5a                   	pop    edx
c001ddde:	56                   	push   esi
c001dddf:	55                   	push   ebp
c001dde0:	e8 67 2b fe ff       	call   c000094c <strcat>
c001dde5:	59                   	pop    ecx
c001dde6:	58                   	pop    eax
c001dde7:	68 94 d0 02 c0       	push   0xc002d094
c001ddec:	55                   	push   ebp
c001dded:	e8 5a 2b fe ff       	call   c000094c <strcat>
c001ddf2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ddf5:	e8 ab cb ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001ddfa:	83 c4 10             	add    esp,0x10
c001ddfd:	51                   	push   ecx
c001ddfe:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001de02:	50                   	push   eax
c001de03:	8d 44 24 20          	lea    eax,[esp+0x20]
c001de07:	50                   	push   eax
c001de08:	53                   	push   ebx
c001de09:	e8 98 58 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c001de0e:	83 c4 10             	add    esp,0x10
c001de11:	85 db                	test   ebx,ebx
c001de13:	74 0c                	je     c001de21 <Thr::loadDLL(char const*, bool)+0xa8>
c001de15:	83 ec 0c             	sub    esp,0xc
c001de18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001de1a:	53                   	push   ebx
c001de1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001de1e:	83 c4 10             	add    esp,0x10
c001de21:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001de26:	75 0a                	jne    c001de32 <Thr::loadDLL(char const*, bool)+0xb9>
c001de28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001de2c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001de30:	75 3c                	jne    c001de6e <Thr::loadDLL(char const*, bool)+0xf5>
c001de32:	89 f8                	mov    eax,edi
c001de34:	84 c0                	test   al,al
c001de36:	0f 84 43 01 00 00    	je     c001df7f <Thr::loadDLL(char const*, bool)+0x206>
c001de3c:	51                   	push   ecx
c001de3d:	51                   	push   ecx
c001de3e:	68 81 d0 02 c0       	push   0xc002d081
c001de43:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001de47:	53                   	push   ebx
c001de48:	e8 bf 29 fe ff       	call   c000080c <strcpy>
c001de4d:	5d                   	pop    ebp
c001de4e:	58                   	pop    eax
c001de4f:	56                   	push   esi
c001de50:	53                   	push   ebx
c001de51:	e8 f6 2a fe ff       	call   c000094c <strcat>
c001de56:	58                   	pop    eax
c001de57:	5a                   	pop    edx
c001de58:	68 94 d0 02 c0       	push   0xc002d094
c001de5d:	53                   	push   ebx
c001de5e:	e8 e9 2a fe ff       	call   c000094c <strcat>
c001de63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001de66:	e8 3a cb ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001de6b:	83 c4 10             	add    esp,0x10
c001de6e:	52                   	push   edx
c001de6f:	6a 03                	push   0x3
c001de71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de75:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001de79:	05 ff 0f 00 00       	add    eax,0xfff
c001de7e:	83 d2 00             	adc    edx,0x0
c001de81:	0f ac d0 0c          	shrd   eax,edx,0xc
c001de85:	50                   	push   eax
c001de86:	ff 35 90 f5 02 c0    	push   DWORD PTR ds:0xc002f590
c001de8c:	e8 d9 44 ff ff       	call   c001236a <VAS::allocatePages(int, int)>
c001de91:	59                   	pop    ecx
c001de92:	89 c3                	mov    ebx,eax
c001de94:	5d                   	pop    ebp
c001de95:	50                   	push   eax
c001de96:	68 96 d0 02 c0       	push   0xc002d096
c001de9b:	e8 97 4f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001dea0:	89 34 24             	mov    DWORD PTR [esp],esi
c001dea3:	e8 c4 28 fe ff       	call   c000076c <strlen>
c001dea8:	8b 2d 80 21 03 c0    	mov    ebp,DWORD PTR ds:0xc0032180
c001deae:	40                   	inc    eax
c001deaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001deb2:	e8 d5 19 ff ff       	call   c000f88c <malloc>
c001deb7:	89 04 ad a0 25 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcda60],eax
c001debe:	58                   	pop    eax
c001debf:	a1 80 21 03 c0       	mov    eax,ds:0xc0032180
c001dec4:	5a                   	pop    edx
c001dec5:	56                   	push   esi
c001dec6:	ff 34 85 a0 25 03 c0 	push   DWORD PTR [eax*4-0x3ffcda60]
c001decd:	e8 3a 29 fe ff       	call   c000080c <strcpy>
c001ded2:	a1 80 21 03 c0       	mov    eax,ds:0xc0032180
c001ded7:	8d 50 01             	lea    edx,[eax+0x1]
c001deda:	89 1c 85 a0 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc60],ebx
c001dee1:	89 15 80 21 03 c0    	mov    DWORD PTR ds:0xc0032180,edx
c001dee7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001deeb:	83 c4 0c             	add    esp,0xc
c001deee:	89 14 85 a0 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde60],edx
c001def5:	6a 01                	push   0x1
c001def7:	53                   	push   ebx
c001def8:	56                   	push   esi
c001def9:	e8 c2 f6 ff ff       	call   c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001defe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001df02:	83 c4 10             	add    esp,0x10
c001df05:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001df0a:	0f 85 83 00 00 00    	jne    c001df93 <Thr::loadDLL(char const*, bool)+0x21a>
c001df10:	89 f8                	mov    eax,edi
c001df12:	84 c0                	test   al,al
c001df14:	74 6d                	je     c001df83 <Thr::loadDLL(char const*, bool)+0x20a>
c001df16:	83 ec 0c             	sub    esp,0xc
c001df19:	68 a3 d0 02 c0       	push   0xc002d0a3
c001df1e:	e8 82 ca ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001df23:	83 c4 10             	add    esp,0x10
c001df26:	eb 5b                	jmp    c001df83 <Thr::loadDLL(char const*, bool)+0x20a>
c001df28:	89 ee                	mov    esi,ebp
c001df2a:	50                   	push   eax
c001df2b:	c1 e6 0c             	shl    esi,0xc
c001df2e:	50                   	push   eax
c001df2f:	01 de                	add    esi,ebx
c001df31:	56                   	push   esi
c001df32:	ff 35 90 f5 02 c0    	push   DWORD PTR ds:0xc002f590
c001df38:	e8 95 3f ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c001df3d:	83 c4 10             	add    esp,0x10
c001df40:	f6 00 60             	test   BYTE PTR [eax],0x60
c001df43:	75 0c                	jne    c001df51 <Thr::loadDLL(char const*, bool)+0x1d8>
c001df45:	83 ec 0c             	sub    esp,0xc
c001df48:	56                   	push   esi
c001df49:	e8 20 1f ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c001df4e:	83 c4 10             	add    esp,0x10
c001df51:	45                   	inc    ebp
c001df52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001df56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df5a:	05 ff 0f 00 00       	add    eax,0xfff
c001df5f:	bf 00 00 00 00       	mov    edi,0x0
c001df64:	83 d2 00             	adc    edx,0x0
c001df67:	0f ac d0 0c          	shrd   eax,edx,0xc
c001df6b:	c1 ea 0c             	shr    edx,0xc
c001df6e:	39 c5                	cmp    ebp,eax
c001df70:	89 d1                	mov    ecx,edx
c001df72:	89 f8                	mov    eax,edi
c001df74:	19 c8                	sbb    eax,ecx
c001df76:	72 b0                	jb     c001df28 <Thr::loadDLL(char const*, bool)+0x1af>
c001df78:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001df7d:	75 18                	jne    c001df97 <Thr::loadDLL(char const*, bool)+0x21e>
c001df7f:	31 db                	xor    ebx,ebx
c001df81:	eb 14                	jmp    c001df97 <Thr::loadDLL(char const*, bool)+0x21e>
c001df83:	83 ec 0c             	sub    esp,0xc
c001df86:	68 c2 d0 02 c0       	push   0xc002d0c2
c001df8b:	e8 15 ca ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001df90:	83 c4 10             	add    esp,0x10
c001df93:	31 ed                	xor    ebp,ebp
c001df95:	eb bb                	jmp    c001df52 <Thr::loadDLL(char const*, bool)+0x1d9>
c001df97:	81 c4 2c 01 00 00    	add    esp,0x12c
c001df9d:	89 d8                	mov    eax,ebx
c001df9f:	5b                   	pop    ebx
c001dfa0:	5e                   	pop    esi
c001dfa1:	5f                   	pop    edi
c001dfa2:	5d                   	pop    ebp
c001dfa3:	c3                   	ret    

c001dfa4 <Thr::executeDLL(unsigned long, void*)>:
c001dfa4:	56                   	push   esi
c001dfa5:	53                   	push   ebx
c001dfa6:	52                   	push   edx
c001dfa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dfab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dfaf:	85 db                	test   ebx,ebx
c001dfb1:	75 10                	jne    c001dfc3 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dfb3:	83 ec 0c             	sub    esp,0xc
c001dfb6:	68 de d0 02 c0       	push   0xc002d0de
c001dfbb:	e8 e5 c9 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001dfc0:	83 c4 10             	add    esp,0x10
c001dfc3:	50                   	push   eax
c001dfc4:	50                   	push   eax
c001dfc5:	53                   	push   ebx
c001dfc6:	68 08 d1 02 c0       	push   0xc002d108
c001dfcb:	e8 67 4e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001dfd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dfd4:	89 d8                	mov    eax,ebx
c001dfd6:	83 c4 14             	add    esp,0x14
c001dfd9:	5b                   	pop    ebx
c001dfda:	5e                   	pop    esi
c001dfdb:	ff e0                	jmp    eax
c001dfdd:	90                   	nop

c001dfde <userModeEntryPoint(void*)>:
c001dfde:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001dfe3:	48                   	dec    eax
c001dfe4:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001dfe9:	75 01                	jne    c001dfec <userModeEntryPoint(void*)+0xe>
c001dfeb:	fb                   	sti    
c001dfec:	fb                   	sti    
c001dfed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dff2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dff5:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dffb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dfff:	e9 26 23 fe ff       	jmp    c000032a <goToUsermode>

c001e004 <changeTSS>:
c001e004:	83 ec 14             	sub    esp,0x14
c001e007:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e00c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001e00f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001e014:	c1 e2 15             	shl    edx,0x15
c001e017:	29 d0                	sub    eax,edx
c001e019:	50                   	push   eax
c001e01a:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001e01f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e025:	05 7c 11 00 00       	add    eax,0x117c
c001e02a:	50                   	push   eax
c001e02b:	e8 40 33 ff ff       	call   c0011370 <TSS::setESP(unsigned long)>
c001e030:	83 c4 1c             	add    esp,0x1c
c001e033:	c3                   	ret    

c001e034 <switchToThread(ThreadControlBlock*)>:
c001e034:	57                   	push   edi
c001e035:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001e03a:	56                   	push   esi
c001e03b:	85 c0                	test   eax,eax
c001e03d:	53                   	push   ebx
c001e03e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e042:	0f 85 88 00 00 00    	jne    c001e0d0 <switchToThread(ThreadControlBlock*)+0x9c>
c001e048:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001e04b:	3c ff                	cmp    al,0xff
c001e04d:	74 7d                	je     c001e0cc <switchToThread(ThreadControlBlock*)+0x98>
c001e04f:	0f b6 d0             	movzx  edx,al
c001e052:	b8 84 03 00 00       	mov    eax,0x384
c001e057:	29 d0                	sub    eax,edx
c001e059:	c1 e0 10             	shl    eax,0x10
c001e05c:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001e05f:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e062:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c001e067:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e06d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001e074:	74 4a                	je     c001e0c0 <switchToThread(ThreadControlBlock*)+0x8c>
c001e076:	0f 31                	rdtsc  
c001e078:	a3 88 29 03 c0       	mov    ds:0xc0032988,eax
c001e07d:	89 c6                	mov    esi,eax
c001e07f:	89 d7                	mov    edi,edx
c001e081:	2b 35 78 29 03 c0    	sub    esi,DWORD PTR ds:0xc0032978
c001e087:	89 15 8c 29 03 c0    	mov    DWORD PTR ds:0xc003298c,edx
c001e08d:	1b 3d 7c 29 03 c0    	sbb    edi,DWORD PTR ds:0xc003297c
c001e093:	89 35 80 29 03 c0    	mov    DWORD PTR ds:0xc0032980,esi
c001e099:	a3 78 29 03 c0       	mov    ds:0xc0032978,eax
c001e09e:	89 3d 84 29 03 c0    	mov    DWORD PTR ds:0xc0032984,edi
c001e0a4:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001e0aa:	89 15 7c 29 03 c0    	mov    DWORD PTR ds:0xc003297c,edx
c001e0b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001e0b3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001e0b6:	01 c6                	add    esi,eax
c001e0b8:	11 d7                	adc    edi,edx
c001e0ba:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001e0bd:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001e0c0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001e0c4:	5b                   	pop    ebx
c001e0c5:	5e                   	pop    esi
c001e0c6:	5f                   	pop    edi
c001e0c7:	e9 96 22 fe ff       	jmp    c0000362 <switchToThreadASM>
c001e0cc:	31 c0                	xor    eax,eax
c001e0ce:	eb 8f                	jmp    c001e05f <switchToThread(ThreadControlBlock*)+0x2b>
c001e0d0:	5b                   	pop    ebx
c001e0d1:	c7 05 40 29 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x1
c001e0db:	5e                   	pop    esi
c001e0dc:	5f                   	pop    edi
c001e0dd:	c3                   	ret    

c001e0de <Process::addArgs(char**)>:
c001e0de:	57                   	push   edi
c001e0df:	56                   	push   esi
c001e0e0:	53                   	push   ebx
c001e0e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0e5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e0e9:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001e0f3:	85 ff                	test   edi,edi
c001e0f5:	74 3d                	je     c001e134 <Process::addArgs(char**)+0x56>
c001e0f7:	8b 07                	mov    eax,DWORD PTR [edi]
c001e0f9:	85 c0                	test   eax,eax
c001e0fb:	74 37                	je     c001e134 <Process::addArgs(char**)+0x56>
c001e0fd:	31 db                	xor    ebx,ebx
c001e0ff:	83 ec 0c             	sub    esp,0xc
c001e102:	50                   	push   eax
c001e103:	e8 64 26 fe ff       	call   c000076c <strlen>
c001e108:	40                   	inc    eax
c001e109:	89 04 24             	mov    DWORD PTR [esp],eax
c001e10c:	e8 7b 17 ff ff       	call   c000f88c <malloc>
c001e111:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001e118:	5a                   	pop    edx
c001e119:	59                   	pop    ecx
c001e11a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001e11d:	43                   	inc    ebx
c001e11e:	50                   	push   eax
c001e11f:	e8 e8 26 fe ff       	call   c000080c <strcpy>
c001e124:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001e12a:	83 c4 10             	add    esp,0x10
c001e12d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e130:	85 c0                	test   eax,eax
c001e132:	75 cb                	jne    c001e0ff <Process::addArgs(char**)+0x21>
c001e134:	5b                   	pop    ebx
c001e135:	5e                   	pop    esi
c001e136:	5f                   	pop    edi
c001e137:	c3                   	ret    

c001e138 <Process::Process(char const*, Process*, char**)>:
c001e138:	56                   	push   esi
c001e139:	53                   	push   ebx
c001e13a:	83 ec 14             	sub    esp,0x14
c001e13d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e141:	05 0c 02 00 00       	add    eax,0x20c
c001e146:	bb 07 00 00 00       	mov    ebx,0x7
c001e14b:	89 c6                	mov    esi,eax
c001e14d:	85 db                	test   ebx,ebx
c001e14f:	78 12                	js     c001e163 <Process::Process(char const*, Process*, char**)+0x2b>
c001e151:	83 ec 0c             	sub    esp,0xc
c001e154:	56                   	push   esi
c001e155:	e8 38 b9 00 00       	call   c0029a92 <ThreadControlBlock::ThreadControlBlock()>
c001e15a:	83 c4 10             	add    esp,0x10
c001e15d:	83 c6 63             	add    esi,0x63
c001e160:	4b                   	dec    ebx
c001e161:	eb ea                	jmp    c001e14d <Process::Process(char const*, Process*, char**)+0x15>
c001e163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e167:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e16e:	83 ec 0c             	sub    esp,0xc
c001e171:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e175:	e8 84 c6 ff ff       	call   c001a7fe <Krnl::newProcessEnv(Process*)>
c001e17a:	83 c4 10             	add    esp,0x10
c001e17d:	89 c2                	mov    edx,eax
c001e17f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e183:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e189:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e18d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e196:	a1 90 e9 02 c0       	mov    eax,ds:0xc002e990
c001e19b:	8d 50 01             	lea    edx,[eax+0x1]
c001e19e:	89 15 90 e9 02 c0    	mov    DWORD PTR ds:0xc002e990,edx
c001e1a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e1a8:	89 02                	mov    DWORD PTR [edx],eax
c001e1aa:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e1b9:	e8 ce 16 ff ff       	call   c000f88c <malloc>
c001e1be:	83 c4 10             	add    esp,0x10
c001e1c1:	89 c3                	mov    ebx,eax
c001e1c3:	83 ec 08             	sub    esp,0x8
c001e1c6:	6a 00                	push   0x0
c001e1c8:	53                   	push   ebx
c001e1c9:	e8 44 45 ff ff       	call   c0012712 <VAS::VAS(bool)>
c001e1ce:	83 c4 10             	add    esp,0x10
c001e1d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1d5:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e1db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1df:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e1e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1f1:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e1f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1fb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e201:	85 c0                	test   eax,eax
c001e203:	74 42                	je     c001e247 <Process::Process(char const*, Process*, char**)+0x10f>
c001e205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e209:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e20f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e219:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e21f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e223:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e229:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e22f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e233:	05 0c 01 00 00       	add    eax,0x10c
c001e238:	83 ec 08             	sub    esp,0x8
c001e23b:	52                   	push   edx
c001e23c:	50                   	push   eax
c001e23d:	e8 ca 25 fe ff       	call   c000080c <strcpy>
c001e242:	83 c4 10             	add    esp,0x10
c001e245:	eb 63                	jmp    c001e2aa <Process::Process(char const*, Process*, char**)+0x172>
c001e247:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e24f:	83 ec 0c             	sub    esp,0xc
c001e252:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e256:	e8 31 16 ff ff       	call   c000f88c <malloc>
c001e25b:	83 c4 10             	add    esp,0x10
c001e25e:	89 c3                	mov    ebx,eax
c001e260:	83 ec 08             	sub    esp,0x8
c001e263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e267:	53                   	push   ebx
c001e268:	e8 e5 2d ff ff       	call   c0011052 <VgaText::VgaText(char const*)>
c001e26d:	83 c4 10             	add    esp,0x10
c001e270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e274:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e27a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e27e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e284:	83 ec 0c             	sub    esp,0xc
c001e287:	50                   	push   eax
c001e288:	e8 fc 22 ff ff       	call   c0010589 <addToTerminalCycle(VgaText*)>
c001e28d:	83 c4 10             	add    esp,0x10
c001e290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e294:	05 0c 01 00 00       	add    eax,0x10c
c001e299:	83 ec 08             	sub    esp,0x8
c001e29c:	68 27 d1 02 c0       	push   0xc002d127
c001e2a1:	50                   	push   eax
c001e2a2:	e8 65 25 fe ff       	call   c000080c <strcpy>
c001e2a7:	83 c4 10             	add    esp,0x10
c001e2aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e2ae:	83 c0 0c             	add    eax,0xc
c001e2b1:	83 ec 08             	sub    esp,0x8
c001e2b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2b8:	50                   	push   eax
c001e2b9:	e8 4e 25 fe ff       	call   c000080c <strcpy>
c001e2be:	83 c4 10             	add    esp,0x10
c001e2c1:	83 ec 08             	sub    esp,0x8
c001e2c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e2c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2cc:	e8 0d fe ff ff       	call   c001e0de <Process::addArgs(char**)>
c001e2d1:	83 c4 10             	add    esp,0x10
c001e2d4:	83 ec 08             	sub    esp,0x8
c001e2d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2df:	e8 a6 ed ff ff       	call   c001d08a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e2e4:	83 c4 10             	add    esp,0x10
c001e2e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e2eb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e2ef:	83 f0 01             	xor    eax,0x1
c001e2f2:	88 c2                	mov    dl,al
c001e2f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e2f8:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e2fe:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e303:	83 ec 08             	sub    esp,0x8
c001e306:	50                   	push   eax
c001e307:	68 54 d2 02 c0       	push   0xc002d254
c001e30c:	e8 26 4b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001e311:	83 c4 10             	add    esp,0x10
c001e314:	90                   	nop
c001e315:	83 c4 14             	add    esp,0x14
c001e318:	5b                   	pop    ebx
c001e319:	5e                   	pop    esi
c001e31a:	c3                   	ret    
c001e31b:	90                   	nop

c001e31c <Process::Process(bool, char const*, Process*, char**)>:
c001e31c:	56                   	push   esi
c001e31d:	53                   	push   ebx
c001e31e:	83 ec 24             	sub    esp,0x24
c001e321:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e325:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e329:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e32d:	05 0c 02 00 00       	add    eax,0x20c
c001e332:	bb 07 00 00 00       	mov    ebx,0x7
c001e337:	89 c6                	mov    esi,eax
c001e339:	85 db                	test   ebx,ebx
c001e33b:	78 12                	js     c001e34f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e33d:	83 ec 0c             	sub    esp,0xc
c001e340:	56                   	push   esi
c001e341:	e8 4c b7 00 00       	call   c0029a92 <ThreadControlBlock::ThreadControlBlock()>
c001e346:	83 c4 10             	add    esp,0x10
c001e349:	83 c6 63             	add    esi,0x63
c001e34c:	4b                   	dec    ebx
c001e34d:	eb ea                	jmp    c001e339 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e34f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e353:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e35a:	83 ec 0c             	sub    esp,0xc
c001e35d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e361:	e8 98 c4 ff ff       	call   c001a7fe <Krnl::newProcessEnv(Process*)>
c001e366:	83 c4 10             	add    esp,0x10
c001e369:	89 c2                	mov    edx,eax
c001e36b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e36f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e375:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e379:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e382:	a1 90 e9 02 c0       	mov    eax,ds:0xc002e990
c001e387:	8d 50 01             	lea    edx,[eax+0x1]
c001e38a:	89 15 90 e9 02 c0    	mov    DWORD PTR ds:0xc002e990,edx
c001e390:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e394:	89 02                	mov    DWORD PTR [edx],eax
c001e396:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e39e:	83 ec 0c             	sub    esp,0xc
c001e3a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e3a5:	e8 e2 14 ff ff       	call   c000f88c <malloc>
c001e3aa:	83 c4 10             	add    esp,0x10
c001e3ad:	89 c3                	mov    ebx,eax
c001e3af:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e3b4:	83 ec 08             	sub    esp,0x8
c001e3b7:	50                   	push   eax
c001e3b8:	53                   	push   ebx
c001e3b9:	e8 54 43 ff ff       	call   c0012712 <VAS::VAS(bool)>
c001e3be:	83 c4 10             	add    esp,0x10
c001e3c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3c5:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e3cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3cf:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e3d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3dd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e3e1:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e3e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3eb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e3f1:	85 c0                	test   eax,eax
c001e3f3:	74 42                	je     c001e437 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e3f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3f9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e3ff:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e405:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e409:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e40f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e413:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e419:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e41f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e423:	05 0c 01 00 00       	add    eax,0x10c
c001e428:	83 ec 08             	sub    esp,0x8
c001e42b:	52                   	push   edx
c001e42c:	50                   	push   eax
c001e42d:	e8 da 23 fe ff       	call   c000080c <strcpy>
c001e432:	83 c4 10             	add    esp,0x10
c001e435:	eb 63                	jmp    c001e49a <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e437:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e43f:	83 ec 0c             	sub    esp,0xc
c001e442:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e446:	e8 41 14 ff ff       	call   c000f88c <malloc>
c001e44b:	83 c4 10             	add    esp,0x10
c001e44e:	89 c3                	mov    ebx,eax
c001e450:	83 ec 08             	sub    esp,0x8
c001e453:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e457:	53                   	push   ebx
c001e458:	e8 f5 2b ff ff       	call   c0011052 <VgaText::VgaText(char const*)>
c001e45d:	83 c4 10             	add    esp,0x10
c001e460:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e464:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e46a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e46e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e474:	83 ec 0c             	sub    esp,0xc
c001e477:	50                   	push   eax
c001e478:	e8 0c 21 ff ff       	call   c0010589 <addToTerminalCycle(VgaText*)>
c001e47d:	83 c4 10             	add    esp,0x10
c001e480:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e484:	05 0c 01 00 00       	add    eax,0x10c
c001e489:	83 ec 08             	sub    esp,0x8
c001e48c:	68 27 d1 02 c0       	push   0xc002d127
c001e491:	50                   	push   eax
c001e492:	e8 75 23 fe ff       	call   c000080c <strcpy>
c001e497:	83 c4 10             	add    esp,0x10
c001e49a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e49e:	83 c0 0c             	add    eax,0xc
c001e4a1:	83 ec 08             	sub    esp,0x8
c001e4a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e4a8:	50                   	push   eax
c001e4a9:	e8 5e 23 fe ff       	call   c000080c <strcpy>
c001e4ae:	83 c4 10             	add    esp,0x10
c001e4b1:	83 ec 08             	sub    esp,0x8
c001e4b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e4b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e4bc:	e8 1d fc ff ff       	call   c001e0de <Process::addArgs(char**)>
c001e4c1:	83 c4 10             	add    esp,0x10
c001e4c4:	90                   	nop
c001e4c5:	83 c4 24             	add    esp,0x24
c001e4c8:	5b                   	pop    ebx
c001e4c9:	5e                   	pop    esi
c001e4ca:	c3                   	ret    

c001e4cb <taskStartupFunction>:
c001e4cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4d0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e4d3:	c3                   	ret    

c001e4d4 <Semaphore::Semaphore(int)>:
c001e4d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e4dc:	89 10                	mov    DWORD PTR [eax],edx
c001e4de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4e2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e4f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4f8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e4ff:	90                   	nop
c001e500:	c3                   	ret    
c001e501:	90                   	nop

c001e502 <Mutex::Mutex()>:
c001e502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e506:	6a 01                	push   0x1
c001e508:	50                   	push   eax
c001e509:	e8 c6 ff ff ff       	call   c001e4d4 <Semaphore::Semaphore(int)>
c001e50e:	83 c4 08             	add    esp,0x8
c001e511:	90                   	nop
c001e512:	c3                   	ret    
c001e513:	90                   	nop

c001e514 <Process::createThread(void (*)(void*), void*, int)>:
c001e514:	55                   	push   ebp
c001e515:	31 c9                	xor    ecx,ecx
c001e517:	57                   	push   edi
c001e518:	56                   	push   esi
c001e519:	53                   	push   ebx
c001e51a:	83 ec 1c             	sub    esp,0x1c
c001e51d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e521:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e528:	89 f2                	mov    edx,esi
c001e52a:	0f b7 c2             	movzx  eax,dx
c001e52d:	83 e2 01             	and    edx,0x1
c001e530:	74 16                	je     c001e548 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e532:	d1 f8                	sar    eax,1
c001e534:	41                   	inc    ecx
c001e535:	89 c2                	mov    edx,eax
c001e537:	83 f9 10             	cmp    ecx,0x10
c001e53a:	75 ee                	jne    c001e52a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e53c:	83 c4 1c             	add    esp,0x1c
c001e53f:	31 db                	xor    ebx,ebx
c001e541:	89 d8                	mov    eax,ebx
c001e543:	5b                   	pop    ebx
c001e544:	5e                   	pop    esi
c001e545:	5f                   	pop    edi
c001e546:	5d                   	pop    ebp
c001e547:	c3                   	ret    
c001e548:	b8 01 00 00 00       	mov    eax,0x1
c001e54d:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e550:	d3 e0                	shl    eax,cl
c001e552:	09 c6                	or     esi,eax
c001e554:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e557:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e55e:	89 c6                	mov    esi,eax
c001e560:	c1 e6 05             	shl    esi,0x5
c001e563:	01 f0                	add    eax,esi
c001e565:	01 d8                	add    eax,ebx
c001e567:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e56e:	75 0a                	jne    c001e57a <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e570:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e57a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e580:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e584:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e587:	01 ca                	add    edx,ecx
c001e589:	83 ec 08             	sub    esp,0x8
c001e58c:	89 d0                	mov    eax,edx
c001e58e:	c1 e0 05             	shl    eax,0x5
c001e591:	01 d0                	add    eax,edx
c001e593:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e597:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e59b:	01 d8                	add    eax,ebx
c001e59d:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e5a3:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e5a9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e5af:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e5b5:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e5bb:	89 cd                	mov    ebp,ecx
c001e5bd:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e5c1:	f7 dd                	neg    ebp
c001e5c3:	c1 e5 15             	shl    ebp,0x15
c001e5c6:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e5cc:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e5d2:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e5dc:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e5e2:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e5ec:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e5f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5fa:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e601:	53                   	push   ebx
c001e602:	68 64 29 03 c0       	push   0xc0032964
c001e607:	e8 40 b2 00 00       	call   c002984c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e60c:	89 d8                	mov    eax,ebx
c001e60e:	83 c4 10             	add    esp,0x10
c001e611:	83 c4 1c             	add    esp,0x1c
c001e614:	5b                   	pop    ebx
c001e615:	5e                   	pop    esi
c001e616:	5f                   	pop    edi
c001e617:	5d                   	pop    ebp
c001e618:	c3                   	ret    
c001e619:	90                   	nop

c001e61a <Process::createUserThread()>:
c001e61a:	83 ec 0c             	sub    esp,0xc
c001e61d:	68 80 00 00 00       	push   0x80
c001e622:	6a 00                	push   0x0
c001e624:	68 de df 01 c0       	push   0xc001dfde
c001e629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e62d:	e8 e2 fe ff ff       	call   c001e514 <Process::createThread(void (*)(void*), void*, int)>
c001e632:	83 c4 1c             	add    esp,0x1c
c001e635:	c3                   	ret    

c001e636 <setupMultitasking(void (*)())>:
c001e636:	56                   	push   esi
c001e637:	53                   	push   ebx
c001e638:	51                   	push   ecx
c001e639:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e63d:	eb 10                	jmp    c001e64f <setupMultitasking(void (*)())+0x19>
c001e63f:	83 ec 0c             	sub    esp,0xc
c001e642:	68 64 29 03 c0       	push   0xc0032964
c001e647:	e8 52 b1 00 00       	call   c002979e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e64c:	83 c4 10             	add    esp,0x10
c001e64f:	83 ec 0c             	sub    esp,0xc
c001e652:	68 64 29 03 c0       	push   0xc0032964
c001e657:	e8 1e b1 00 00       	call   c002977a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e65c:	83 c4 10             	add    esp,0x10
c001e65f:	84 c0                	test   al,al
c001e661:	74 dc                	je     c001e63f <setupMultitasking(void (*)())+0x9>
c001e663:	83 ec 0c             	sub    esp,0xc
c001e666:	68 3f 07 00 00       	push   0x73f
c001e66b:	e8 1c 12 ff ff       	call   c000f88c <malloc>
c001e670:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e677:	89 c3                	mov    ebx,eax
c001e679:	6a 00                	push   0x0
c001e67b:	68 2b d1 02 c0       	push   0xc002d12b
c001e680:	6a 01                	push   0x1
c001e682:	50                   	push   eax
c001e683:	e8 94 fc ff ff       	call   c001e31c <Process::Process(bool, char const*, Process*, char**)>
c001e688:	83 c4 18             	add    esp,0x18
c001e68b:	89 1d 70 29 03 c0    	mov    DWORD PTR ds:0xc0032970,ebx
c001e691:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e697:	68 7c d2 02 c0       	push   0xc002d27c
c001e69c:	e8 96 47 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001e6a1:	58                   	pop    eax
c001e6a2:	5a                   	pop    edx
c001e6a3:	6a 63                	push   0x63
c001e6a5:	68 b0 d2 02 c0       	push   0xc002d2b0
c001e6aa:	e8 88 47 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001e6af:	59                   	pop    ecx
c001e6b0:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e6b6:	e8 9f 25 ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c001e6bb:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e6c3:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e6cd:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e6d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e6d6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e6e0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e6e6:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e6ec:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e6f6:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e700:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e70a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e710:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e71a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e720:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e72a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e730:	58                   	pop    eax
c001e731:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e737:	5a                   	pop    edx
c001e738:	68 27 d1 02 c0       	push   0xc002d127
c001e73d:	50                   	push   eax
c001e73e:	e8 c9 20 fe ff       	call   c000080c <strcpy>
c001e743:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e74a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e74e:	83 c4 14             	add    esp,0x14
c001e751:	5b                   	pop    ebx
c001e752:	5e                   	pop    esi
c001e753:	e9 fc 1b fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e758 <schedule()>:
c001e758:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001e75d:	85 c0                	test   eax,eax
c001e75f:	74 0b                	je     c001e76c <schedule()+0x14>
c001e761:	c7 05 40 29 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x1
c001e76b:	c3                   	ret    
c001e76c:	53                   	push   ebx
c001e76d:	83 ec 14             	sub    esp,0x14
c001e770:	68 64 29 03 c0       	push   0xc0032964
c001e775:	e8 00 b0 00 00       	call   c002977a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e77a:	83 c4 10             	add    esp,0x10
c001e77d:	84 c0                	test   al,al
c001e77f:	75 38                	jne    c001e7b9 <schedule()+0x61>
c001e781:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e786:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e789:	4a                   	dec    edx
c001e78a:	74 32                	je     c001e7be <schedule()+0x66>
c001e78c:	83 ec 0c             	sub    esp,0xc
c001e78f:	68 64 29 03 c0       	push   0xc0032964
c001e794:	e8 fd af 00 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e799:	c7 04 24 64 29 03 c0 	mov    DWORD PTR [esp],0xc0032964
c001e7a0:	89 c3                	mov    ebx,eax
c001e7a2:	e8 f7 af 00 00       	call   c002979e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7a7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e7ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7b1:	e8 7e f8 ff ff       	call   c001e034 <switchToThread(ThreadControlBlock*)>
c001e7b6:	83 c4 10             	add    esp,0x10
c001e7b9:	83 c4 08             	add    esp,0x8
c001e7bc:	5b                   	pop    ebx
c001e7bd:	c3                   	ret    
c001e7be:	83 ec 08             	sub    esp,0x8
c001e7c1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e7c8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e7ce:	68 64 29 03 c0       	push   0xc0032964
c001e7d3:	e8 74 b0 00 00       	call   c002984c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7d8:	83 c4 10             	add    esp,0x10
c001e7db:	eb af                	jmp    c001e78c <schedule()+0x34>
c001e7dd:	90                   	nop

c001e7de <Semaphore::tryAcquire()>:
c001e7de:	53                   	push   ebx
c001e7df:	83 ec 08             	sub    esp,0x8
c001e7e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7e6:	fa                   	cli    
c001e7e7:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001e7ec:	8d 50 01             	lea    edx,[eax+0x1]
c001e7ef:	89 15 48 29 03 c0    	mov    DWORD PTR ds:0xc0032948,edx
c001e7f5:	8b 15 44 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032944
c001e7fb:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e7fe:	89 1d 44 29 03 c0    	mov    DWORD PTR ds:0xc0032944,ebx
c001e804:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e807:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e809:	7c 2a                	jl     c001e835 <Semaphore::tryAcquire()+0x57>
c001e80b:	89 15 44 29 03 c0    	mov    DWORD PTR ds:0xc0032944,edx
c001e811:	85 d2                	test   edx,edx
c001e813:	75 0a                	jne    c001e81f <Semaphore::tryAcquire()+0x41>
c001e815:	8b 15 40 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032940
c001e81b:	85 d2                	test   edx,edx
c001e81d:	75 5b                	jne    c001e87a <Semaphore::tryAcquire()+0x9c>
c001e81f:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001e824:	85 c0                	test   eax,eax
c001e826:	74 07                	je     c001e82f <Semaphore::tryAcquire()+0x51>
c001e828:	31 c0                	xor    eax,eax
c001e82a:	83 c4 08             	add    esp,0x8
c001e82d:	5b                   	pop    ebx
c001e82e:	c3                   	ret    
c001e82f:	fb                   	sti    
c001e830:	83 c4 08             	add    esp,0x8
c001e833:	5b                   	pop    ebx
c001e834:	c3                   	ret    
c001e835:	43                   	inc    ebx
c001e836:	89 15 44 29 03 c0    	mov    DWORD PTR ds:0xc0032944,edx
c001e83c:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e83f:	85 d2                	test   edx,edx
c001e841:	75 1f                	jne    c001e862 <Semaphore::tryAcquire()+0x84>
c001e843:	8b 0d 40 29 03 c0    	mov    ecx,DWORD PTR ds:0xc0032940
c001e849:	85 c9                	test   ecx,ecx
c001e84b:	74 15                	je     c001e862 <Semaphore::tryAcquire()+0x84>
c001e84d:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c001e857:	e8 fc fe ff ff       	call   c001e758 <schedule()>
c001e85c:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001e861:	48                   	dec    eax
c001e862:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001e867:	85 c0                	test   eax,eax
c001e869:	75 08                	jne    c001e873 <Semaphore::tryAcquire()+0x95>
c001e86b:	fb                   	sti    
c001e86c:	b0 01                	mov    al,0x1
c001e86e:	83 c4 08             	add    esp,0x8
c001e871:	5b                   	pop    ebx
c001e872:	c3                   	ret    
c001e873:	b0 01                	mov    al,0x1
c001e875:	83 c4 08             	add    esp,0x8
c001e878:	5b                   	pop    ebx
c001e879:	c3                   	ret    
c001e87a:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c001e884:	e8 cf fe ff ff       	call   c001e758 <schedule()>
c001e889:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001e88e:	48                   	dec    eax
c001e88f:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001e894:	85 c0                	test   eax,eax
c001e896:	75 90                	jne    c001e828 <Semaphore::tryAcquire()+0x4a>
c001e898:	eb 95                	jmp    c001e82f <Semaphore::tryAcquire()+0x51>

c001e89a <Semaphore::assertLocked(char const*)>:
c001e89a:	83 ec 0c             	sub    esp,0xc
c001e89d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8a1:	fa                   	cli    
c001e8a2:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001e8a8:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001e8ad:	8d 48 01             	lea    ecx,[eax+0x1]
c001e8b0:	89 0d 44 29 03 c0    	mov    DWORD PTR ds:0xc0032944,ecx
c001e8b6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e8b8:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e8bb:	7c 24                	jl     c001e8e1 <Semaphore::assertLocked(char const*)+0x47>
c001e8bd:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c001e8c2:	85 c0                	test   eax,eax
c001e8c4:	75 09                	jne    c001e8cf <Semaphore::assertLocked(char const*)+0x35>
c001e8c6:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c001e8cb:	85 c0                	test   eax,eax
c001e8cd:	75 29                	jne    c001e8f8 <Semaphore::assertLocked(char const*)+0x5e>
c001e8cf:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001e8d4:	48                   	dec    eax
c001e8d5:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001e8da:	75 01                	jne    c001e8dd <Semaphore::assertLocked(char const*)+0x43>
c001e8dc:	fb                   	sti    
c001e8dd:	83 c4 0c             	add    esp,0xc
c001e8e0:	c3                   	ret    
c001e8e1:	83 ec 0c             	sub    esp,0xc
c001e8e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e8e8:	e8 b8 c0 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001e8ed:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001e8f2:	83 c4 10             	add    esp,0x10
c001e8f5:	48                   	dec    eax
c001e8f6:	eb c5                	jmp    c001e8bd <Semaphore::assertLocked(char const*)+0x23>
c001e8f8:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c001e902:	e8 51 fe ff ff       	call   c001e758 <schedule()>
c001e907:	eb c6                	jmp    c001e8cf <Semaphore::assertLocked(char const*)+0x35>

c001e909 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e909:	83 ec 14             	sub    esp,0x14
c001e90c:	ff 35 48 29 03 c0    	push   DWORD PTR ds:0xc0032948
c001e912:	68 d4 d2 02 c0       	push   0xc002d2d4
c001e917:	e8 1b 45 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001e91c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e921:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e925:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e928:	e8 2b fe ff ff       	call   c001e758 <schedule()>
c001e92d:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001e932:	83 c4 10             	add    esp,0x10
c001e935:	48                   	dec    eax
c001e936:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001e93b:	85 c0                	test   eax,eax
c001e93d:	75 06                	jne    c001e945 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e93f:	fb                   	sti    
c001e940:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001e945:	83 ec 08             	sub    esp,0x8
c001e948:	50                   	push   eax
c001e949:	68 08 d3 02 c0       	push   0xc002d308
c001e94e:	e8 e4 44 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001e953:	83 c4 1c             	add    esp,0x1c
c001e956:	c3                   	ret    

c001e957 <blockTask(TaskState)>:
c001e957:	83 ec 0c             	sub    esp,0xc
c001e95a:	fa                   	cli    
c001e95b:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001e961:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e965:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e96a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e96d:	e8 e6 fd ff ff       	call   c001e758 <schedule()>
c001e972:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001e977:	48                   	dec    eax
c001e978:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001e97d:	75 01                	jne    c001e980 <blockTask(TaskState)+0x29>
c001e97f:	fb                   	sti    
c001e980:	83 c4 0c             	add    esp,0xc
c001e983:	c3                   	ret    

c001e984 <waitTask(int, int*, int)>:
c001e984:	83 ec 18             	sub    esp,0x18
c001e987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e98c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e990:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e993:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e99c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e99f:	6a 07                	push   0x7
c001e9a1:	e8 b1 ff ff ff       	call   c001e957 <blockTask(TaskState)>
c001e9a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9ab:	83 c4 10             	add    esp,0x10
c001e9ae:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e9b1:	85 d2                	test   edx,edx
c001e9b3:	74 0a                	je     c001e9bf <waitTask(int, int*, int)+0x3b>
c001e9b5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e9b8:	89 02                	mov    DWORD PTR [edx],eax
c001e9ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9bf:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e9c2:	83 c4 0c             	add    esp,0xc
c001e9c5:	c3                   	ret    

c001e9c6 <nanoSleepUntil(unsigned long long)>:
c001e9c6:	83 ec 0c             	sub    esp,0xc
c001e9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9d1:	3b 05 90 fa 02 c0    	cmp    eax,DWORD PTR ds:0xc002fa90
c001e9d7:	89 d1                	mov    ecx,edx
c001e9d9:	1b 0d 94 fa 02 c0    	sbb    ecx,DWORD PTR ds:0xc002fa94
c001e9df:	73 04                	jae    c001e9e5 <nanoSleepUntil(unsigned long long)+0x1f>
c001e9e1:	83 c4 0c             	add    esp,0xc
c001e9e4:	c3                   	ret    
c001e9e5:	fa                   	cli    
c001e9e6:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001e9ec:	83 ec 08             	sub    esp,0x8
c001e9ef:	ff 05 44 29 03 c0    	inc    DWORD PTR ds:0xc0032944
c001e9f5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9fb:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e9fe:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001ea01:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001ea07:	68 58 29 03 c0       	push   0xc0032958
c001ea0c:	e8 3b ae 00 00       	call   c002984c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea11:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001ea18:	e8 3a ff ff ff       	call   c001e957 <blockTask(TaskState)>
c001ea1d:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001ea22:	83 c4 10             	add    esp,0x10
c001ea25:	48                   	dec    eax
c001ea26:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c001ea2b:	85 c0                	test   eax,eax
c001ea2d:	75 09                	jne    c001ea38 <nanoSleepUntil(unsigned long long)+0x72>
c001ea2f:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c001ea34:	85 c0                	test   eax,eax
c001ea36:	75 12                	jne    c001ea4a <nanoSleepUntil(unsigned long long)+0x84>
c001ea38:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001ea3d:	48                   	dec    eax
c001ea3e:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001ea43:	75 9c                	jne    c001e9e1 <nanoSleepUntil(unsigned long long)+0x1b>
c001ea45:	fb                   	sti    
c001ea46:	83 c4 0c             	add    esp,0xc
c001ea49:	c3                   	ret    
c001ea4a:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c001ea54:	e8 ff fc ff ff       	call   c001e758 <schedule()>
c001ea59:	eb dd                	jmp    c001ea38 <nanoSleepUntil(unsigned long long)+0x72>

c001ea5b <nanoSleep(unsigned long long)>:
c001ea5b:	a1 90 fa 02 c0       	mov    eax,ds:0xc002fa90
c001ea60:	8b 15 94 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa94
c001ea66:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001ea6a:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001ea6e:	e9 53 ff ff ff       	jmp    c001e9c6 <nanoSleepUntil(unsigned long long)>

c001ea73 <sleep(unsigned long long)>:
c001ea73:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001ea7b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001ea80:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001ea84:	01 ca                	add    edx,ecx
c001ea86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ea8a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ea8e:	eb cb                	jmp    c001ea5b <nanoSleep(unsigned long long)>

c001ea90 <Semaphore::acquire()>:
c001ea90:	83 ec 0c             	sub    esp,0xc
c001ea93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea97:	fa                   	cli    
c001ea98:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001ea9d:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001eaa3:	8d 48 01             	lea    ecx,[eax+0x1]
c001eaa6:	89 0d 44 29 03 c0    	mov    DWORD PTR ds:0xc0032944,ecx
c001eaac:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001eaaf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001eab1:	7d 28                	jge    c001eadb <Semaphore::acquire()+0x4b>
c001eab3:	41                   	inc    ecx
c001eab4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001eab7:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c001eabc:	85 c0                	test   eax,eax
c001eabe:	75 09                	jne    c001eac9 <Semaphore::acquire()+0x39>
c001eac0:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c001eac5:	85 c0                	test   eax,eax
c001eac7:	75 4e                	jne    c001eb17 <Semaphore::acquire()+0x87>
c001eac9:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001eace:	48                   	dec    eax
c001eacf:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001ead4:	75 01                	jne    c001ead7 <Semaphore::acquire()+0x47>
c001ead6:	fb                   	sti    
c001ead7:	83 c4 0c             	add    esp,0xc
c001eada:	c3                   	ret    
c001eadb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eae0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eae7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001eaea:	85 c9                	test   ecx,ecx
c001eaec:	74 3a                	je     c001eb28 <Semaphore::acquire()+0x98>
c001eaee:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001eaf1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eaf7:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001eafa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eaff:	83 ec 0c             	sub    esp,0xc
c001eb02:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001eb05:	6a 05                	push   0x5
c001eb07:	e8 4b fe ff ff       	call   c001e957 <blockTask(TaskState)>
c001eb0c:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001eb11:	83 c4 10             	add    esp,0x10
c001eb14:	48                   	dec    eax
c001eb15:	eb a0                	jmp    c001eab7 <Semaphore::acquire()+0x27>
c001eb17:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c001eb21:	e8 32 fc ff ff       	call   c001e758 <schedule()>
c001eb26:	eb a1                	jmp    c001eac9 <Semaphore::acquire()+0x39>
c001eb28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb2d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eb30:	eb c8                	jmp    c001eafa <Semaphore::acquire()+0x6a>

c001eb32 <taskReturned>:
c001eb32:	83 ec 18             	sub    esp,0x18
c001eb35:	68 3c d3 02 c0       	push   0xc002d33c
c001eb3a:	e8 66 be ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001eb3f:	83 c4 10             	add    esp,0x10
c001eb42:	83 ec 0c             	sub    esp,0xc
c001eb45:	6a 02                	push   0x2
c001eb47:	e8 0b fe ff ff       	call   c001e957 <blockTask(TaskState)>
c001eb4c:	fa                   	cli    
c001eb4d:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001eb53:	e8 00 fc ff ff       	call   c001e758 <schedule()>
c001eb58:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001eb5d:	83 c4 10             	add    esp,0x10
c001eb60:	48                   	dec    eax
c001eb61:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001eb66:	85 c0                	test   eax,eax
c001eb68:	75 d8                	jne    c001eb42 <taskReturned+0x10>
c001eb6a:	fb                   	sti    
c001eb6b:	eb d5                	jmp    c001eb42 <taskReturned+0x10>

c001eb6d <Thr::processFromPID(int)>:
c001eb6d:	57                   	push   edi
c001eb6e:	56                   	push   esi
c001eb6f:	53                   	push   ebx
c001eb70:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb74:	83 ec 0c             	sub    esp,0xc
c001eb77:	68 32 d1 02 c0       	push   0xc002d132
c001eb7c:	e8 b6 42 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001eb81:	fa                   	cli    
c001eb82:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001eb88:	c7 04 24 64 29 03 c0 	mov    DWORD PTR [esp],0xc0032964
c001eb8f:	e8 02 ac 00 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb94:	83 c4 10             	add    esp,0x10
c001eb97:	89 c7                	mov    edi,eax
c001eb99:	eb 14                	jmp    c001ebaf <Thr::processFromPID(int)+0x42>
c001eb9b:	83 ec 0c             	sub    esp,0xc
c001eb9e:	68 64 29 03 c0       	push   0xc0032964
c001eba3:	e8 ee ab 00 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eba8:	83 c4 10             	add    esp,0x10
c001ebab:	39 f8                	cmp    eax,edi
c001ebad:	74 49                	je     c001ebf8 <Thr::processFromPID(int)+0x8b>
c001ebaf:	83 ec 0c             	sub    esp,0xc
c001ebb2:	68 64 29 03 c0       	push   0xc0032964
c001ebb7:	e8 da ab 00 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ebbc:	c7 04 24 64 29 03 c0 	mov    DWORD PTR [esp],0xc0032964
c001ebc3:	89 c3                	mov    ebx,eax
c001ebc5:	e8 d4 ab 00 00       	call   c002979e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ebca:	58                   	pop    eax
c001ebcb:	5a                   	pop    edx
c001ebcc:	53                   	push   ebx
c001ebcd:	68 64 29 03 c0       	push   0xc0032964
c001ebd2:	e8 75 ac 00 00       	call   c002984c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ebd7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebda:	83 c4 10             	add    esp,0x10
c001ebdd:	39 30                	cmp    DWORD PTR [eax],esi
c001ebdf:	75 ba                	jne    c001eb9b <Thr::processFromPID(int)+0x2e>
c001ebe1:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001ebe6:	48                   	dec    eax
c001ebe7:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001ebec:	74 07                	je     c001ebf5 <Thr::processFromPID(int)+0x88>
c001ebee:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebf1:	5b                   	pop    ebx
c001ebf2:	5e                   	pop    esi
c001ebf3:	5f                   	pop    edi
c001ebf4:	c3                   	ret    
c001ebf5:	fb                   	sti    
c001ebf6:	eb f6                	jmp    c001ebee <Thr::processFromPID(int)+0x81>
c001ebf8:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001ebfd:	48                   	dec    eax
c001ebfe:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001ec03:	75 01                	jne    c001ec06 <Thr::processFromPID(int)+0x99>
c001ec05:	fb                   	sti    
c001ec06:	83 ec 0c             	sub    esp,0xc
c001ec09:	68 4d d1 02 c0       	push   0xc002d14d
c001ec0e:	e8 24 42 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ec13:	83 c4 10             	add    esp,0x10
c001ec16:	31 c0                	xor    eax,eax
c001ec18:	5b                   	pop    ebx
c001ec19:	5e                   	pop    esi
c001ec1a:	5f                   	pop    edi
c001ec1b:	c3                   	ret    

c001ec1c <unblockTask(ThreadControlBlock*)>:
c001ec1c:	53                   	push   ebx
c001ec1d:	83 ec 08             	sub    esp,0x8
c001ec20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ec24:	fa                   	cli    
c001ec25:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001ec2b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ec2e:	85 c0                	test   eax,eax
c001ec30:	74 66                	je     c001ec98 <unblockTask(ThreadControlBlock*)+0x7c>
c001ec32:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ec35:	48                   	dec    eax
c001ec36:	74 31                	je     c001ec69 <unblockTask(ThreadControlBlock*)+0x4d>
c001ec38:	83 ec 0c             	sub    esp,0xc
c001ec3b:	68 64 29 03 c0       	push   0xc0032964
c001ec40:	e8 51 ab 00 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec45:	83 c4 10             	add    esp,0x10
c001ec48:	85 c0                	test   eax,eax
c001ec4a:	75 17                	jne    c001ec63 <unblockTask(ThreadControlBlock*)+0x47>
c001ec4c:	eb 68                	jmp    c001ecb6 <unblockTask(ThreadControlBlock*)+0x9a>
c001ec4e:	83 ec 08             	sub    esp,0x8
c001ec51:	50                   	push   eax
c001ec52:	68 64 29 03 c0       	push   0xc0032964
c001ec57:	e8 d8 ae 00 00       	call   c0029b34 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001ec5c:	83 c4 10             	add    esp,0x10
c001ec5f:	85 c0                	test   eax,eax
c001ec61:	74 53                	je     c001ecb6 <unblockTask(ThreadControlBlock*)+0x9a>
c001ec63:	39 c3                	cmp    ebx,eax
c001ec65:	75 e7                	jne    c001ec4e <unblockTask(ThreadControlBlock*)+0x32>
c001ec67:	eb 1c                	jmp    c001ec85 <unblockTask(ThreadControlBlock*)+0x69>
c001ec69:	83 ec 0c             	sub    esp,0xc
c001ec6c:	68 2c d4 02 c0       	push   0xc002d42c
c001ec71:	e8 c1 41 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ec76:	c7 04 24 b8 d3 02 c0 	mov    DWORD PTR [esp],0xc002d3b8
c001ec7d:	e8 b5 41 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ec82:	83 c4 10             	add    esp,0x10
c001ec85:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001ec8a:	48                   	dec    eax
c001ec8b:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001ec90:	75 01                	jne    c001ec93 <unblockTask(ThreadControlBlock*)+0x77>
c001ec92:	fb                   	sti    
c001ec93:	83 c4 08             	add    esp,0x8
c001ec96:	5b                   	pop    ebx
c001ec97:	c3                   	ret    
c001ec98:	83 ec 0c             	sub    esp,0xc
c001ec9b:	68 70 d3 02 c0       	push   0xc002d370
c001eca0:	e8 92 41 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001eca5:	c7 04 24 b8 d3 02 c0 	mov    DWORD PTR [esp],0xc002d3b8
c001ecac:	e8 86 41 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ecb1:	83 c4 10             	add    esp,0x10
c001ecb4:	eb cf                	jmp    c001ec85 <unblockTask(ThreadControlBlock*)+0x69>
c001ecb6:	83 ec 08             	sub    esp,0x8
c001ecb9:	53                   	push   ebx
c001ecba:	68 64 29 03 c0       	push   0xc0032964
c001ecbf:	e8 88 ab 00 00       	call   c002984c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ecc4:	83 c4 10             	add    esp,0x10
c001ecc7:	eb bc                	jmp    c001ec85 <unblockTask(ThreadControlBlock*)+0x69>

c001ecc9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ecc9:	55                   	push   ebp
c001ecca:	57                   	push   edi
c001eccb:	56                   	push   esi
c001eccc:	53                   	push   ebx
c001eccd:	83 ec 1c             	sub    esp,0x1c
c001ecd0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ecd4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecd7:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ecdd:	85 ff                	test   edi,edi
c001ecdf:	7e 20                	jle    c001ed01 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ece1:	31 f6                	xor    esi,esi
c001ece3:	83 ec 0c             	sub    esp,0xc
c001ece6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001eced:	46                   	inc    esi
c001ecee:	e8 a9 0b ff ff       	call   c000f89c <free>
c001ecf3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecf6:	83 c4 10             	add    esp,0x10
c001ecf9:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ecff:	7f e2                	jg     c001ece3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ed01:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ed0b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ed10:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ed13:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ed16:	d3 c0                	rol    eax,cl
c001ed18:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ed1f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed22:	89 f7                	mov    edi,esi
c001ed24:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ed2c:	0f 85 74 01 00 00    	jne    c001eea6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ed32:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ed38:	85 ed                	test   ebp,ebp
c001ed3a:	74 1b                	je     c001ed57 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ed3c:	83 ec 0c             	sub    esp,0xc
c001ed3f:	55                   	push   ebp
c001ed40:	e8 d5 b9 ff ff       	call   c001a71a <EnvVarContainer::~EnvVarContainer()>
c001ed45:	59                   	pop    ecx
c001ed46:	5e                   	pop    esi
c001ed47:	6a 0c                	push   0xc
c001ed49:	55                   	push   ebp
c001ed4a:	e8 08 40 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001ed4f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed52:	83 c4 10             	add    esp,0x10
c001ed55:	89 f7                	mov    edi,esi
c001ed57:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ed5d:	85 c0                	test   eax,eax
c001ed5f:	0f 84 aa 00 00 00    	je     c001ee0f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ed65:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ed68:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ed6c:	31 c9                	xor    ecx,ecx
c001ed6e:	eb 10                	jmp    c001ed80 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ed70:	41                   	inc    ecx
c001ed71:	83 f9 10             	cmp    ecx,0x10
c001ed74:	0f 84 95 00 00 00    	je     c001ee0f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ed7a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ed80:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ed87:	d3 fa                	sar    edx,cl
c001ed89:	83 e2 01             	and    edx,0x1
c001ed8c:	74 e2                	je     c001ed70 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed8e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ed91:	01 ca                	add    edx,ecx
c001ed93:	89 d5                	mov    ebp,edx
c001ed95:	c1 e5 05             	shl    ebp,0x5
c001ed98:	01 ea                	add    edx,ebp
c001ed9a:	01 d0                	add    eax,edx
c001ed9c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001eda2:	83 fd 07             	cmp    ebp,0x7
c001eda5:	75 c9                	jne    c001ed70 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eda7:	05 40 02 00 00       	add    eax,0x240
c001edac:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001edaf:	83 fd ff             	cmp    ebp,0xffffffff
c001edb2:	0f 8c 08 01 00 00    	jl     c001eec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001edb8:	0f 84 b9 01 00 00    	je     c001ef77 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001edbe:	85 ed                	test   ebp,ebp
c001edc0:	0f 84 a0 01 00 00    	je     c001ef66 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001edc6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001edc8:	75 a6                	jne    c001ed70 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001edca:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001edd0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edd4:	01 d0                	add    eax,edx
c001edd6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001edda:	83 ec 0c             	sub    esp,0xc
c001eddd:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ede3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ede6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001edec:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001edf3:	50                   	push   eax
c001edf4:	e8 23 fe ff ff       	call   c001ec1c <unblockTask(ThreadControlBlock*)>
c001edf9:	83 c4 10             	add    esp,0x10
c001edfc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001edff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee03:	89 f7                	mov    edi,esi
c001ee05:	41                   	inc    ecx
c001ee06:	83 f9 10             	cmp    ecx,0x10
c001ee09:	0f 85 6b ff ff ff    	jne    c001ed7a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ee0f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ee15:	85 c0                	test   eax,eax
c001ee17:	74 5d                	je     c001ee76 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ee19:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ee1f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ee25:	74 4f                	je     c001ee76 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ee27:	83 ec 0c             	sub    esp,0xc
c001ee2a:	68 64 29 03 c0       	push   0xc0032964
c001ee2f:	e8 62 a9 00 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee34:	c7 04 24 64 29 03 c0 	mov    DWORD PTR [esp],0xc0032964
c001ee3b:	89 c7                	mov    edi,eax
c001ee3d:	e8 38 a9 00 00       	call   c002977a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ee42:	83 c4 10             	add    esp,0x10
c001ee45:	84 c0                	test   al,al
c001ee47:	0f 84 e4 00 00 00    	je     c001ef31 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001ee4d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ee50:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ee56:	85 d2                	test   edx,edx
c001ee58:	74 0f                	je     c001ee69 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ee5a:	83 ec 0c             	sub    esp,0xc
c001ee5d:	8b 02                	mov    eax,DWORD PTR [edx]
c001ee5f:	52                   	push   edx
c001ee60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee63:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ee66:	83 c4 10             	add    esp,0x10
c001ee69:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ee73:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ee76:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ee7c:	85 db                	test   ebx,ebx
c001ee7e:	74 16                	je     c001ee96 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ee80:	83 ec 0c             	sub    esp,0xc
c001ee83:	53                   	push   ebx
c001ee84:	e8 63 32 ff ff       	call   c00120ec <VAS::~VAS()>
c001ee89:	58                   	pop    eax
c001ee8a:	5a                   	pop    edx
c001ee8b:	6a 14                	push   0x14
c001ee8d:	53                   	push   ebx
c001ee8e:	e8 c4 3e ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001ee93:	83 c4 10             	add    esp,0x10
c001ee96:	83 ec 0c             	sub    esp,0xc
c001ee99:	68 64 d1 02 c0       	push   0xc002d164
c001ee9e:	e8 94 3f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001eea3:	83 c4 10             	add    esp,0x10
c001eea6:	83 ec 08             	sub    esp,0x8
c001eea9:	68 3f 07 00 00       	push   0x73f
c001eeae:	68 72 d1 02 c0       	push   0xc002d172
c001eeb3:	e8 7f 3f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001eeb8:	83 c4 2c             	add    esp,0x2c
c001eebb:	5b                   	pop    ebx
c001eebc:	5e                   	pop    esi
c001eebd:	5f                   	pop    edi
c001eebe:	5d                   	pop    ebp
c001eebf:	c3                   	ret    
c001eec0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	68 70 d4 02 c0       	push   0xc002d470
c001eecc:	e8 d4 ba ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001eed1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eed4:	83 c4 10             	add    esp,0x10
c001eed7:	89 f7                	mov    edi,esi
c001eed9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eedd:	e9 8e fe ff ff       	jmp    c001ed70 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eee2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001eee8:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001eeee:	75 1c                	jne    c001ef0c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eef0:	83 ec 0c             	sub    esp,0xc
c001eef3:	68 d8 d4 02 c0       	push   0xc002d4d8
c001eef8:	e8 3a 3f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001eefd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ef04:	e8 4e fa ff ff       	call   c001e957 <blockTask(TaskState)>
c001ef09:	83 c4 10             	add    esp,0x10
c001ef0c:	83 ec 08             	sub    esp,0x8
c001ef0f:	56                   	push   esi
c001ef10:	68 64 29 03 c0       	push   0xc0032964
c001ef15:	e8 32 a9 00 00       	call   c002984c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ef1a:	c7 04 24 64 29 03 c0 	mov    DWORD PTR [esp],0xc0032964
c001ef21:	e8 70 a8 00 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ef26:	83 c4 10             	add    esp,0x10
c001ef29:	39 f8                	cmp    eax,edi
c001ef2b:	0f 84 1c ff ff ff    	je     c001ee4d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ef31:	83 ec 0c             	sub    esp,0xc
c001ef34:	68 64 29 03 c0       	push   0xc0032964
c001ef39:	e8 58 a8 00 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ef3e:	c7 04 24 64 29 03 c0 	mov    DWORD PTR [esp],0xc0032964
c001ef45:	89 c6                	mov    esi,eax
c001ef47:	e8 52 a8 00 00       	call   c002979e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ef4c:	83 c4 10             	add    esp,0x10
c001ef4f:	39 f3                	cmp    ebx,esi
c001ef51:	74 b9                	je     c001ef0c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ef53:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ef56:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ef59:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ef5f:	75 ab                	jne    c001ef0c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ef61:	e9 7c ff ff ff       	jmp    c001eee2 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ef66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ef6a:	83 ec 0c             	sub    esp,0xc
c001ef6d:	68 a4 d4 02 c0       	push   0xc002d4a4
c001ef72:	e9 55 ff ff ff       	jmp    c001eecc <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ef77:	8b 36                	mov    esi,DWORD PTR [esi]
c001ef79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ef7d:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ef80:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ef83:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ef89:	01 d7                	add    edi,edx
c001ef8b:	89 f8                	mov    eax,edi
c001ef8d:	e9 44 fe ff ff       	jmp    c001edd6 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ef92 <cleanerTaskFunction(void*)>:
c001ef92:	53                   	push   ebx
c001ef93:	83 ec 08             	sub    esp,0x8
c001ef96:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001ef9b:	48                   	dec    eax
c001ef9c:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001efa1:	75 01                	jne    c001efa4 <cleanerTaskFunction(void*)+0x12>
c001efa3:	fb                   	sti    
c001efa4:	fa                   	cli    
c001efa5:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001efaa:	80 3d 2c 29 03 c0 00 	cmp    BYTE PTR ds:0xc003292c,0x0
c001efb1:	8d 50 01             	lea    edx,[eax+0x1]
c001efb4:	89 15 48 29 03 c0    	mov    DWORD PTR ds:0xc0032948,edx
c001efba:	0f 84 b9 00 00 00    	je     c001f079 <cleanerTaskFunction(void*)+0xe7>
c001efc0:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001efc5:	85 c0                	test   eax,eax
c001efc7:	75 01                	jne    c001efca <cleanerTaskFunction(void*)+0x38>
c001efc9:	fb                   	sti    
c001efca:	c6 05 2c 29 03 c0 00 	mov    BYTE PTR ds:0xc003292c,0x0
c001efd1:	fa                   	cli    
c001efd2:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001efd8:	ff 05 44 29 03 c0    	inc    DWORD PTR ds:0xc0032944
c001efde:	fa                   	cli    
c001efdf:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001efe5:	eb 3e                	jmp    c001f025 <cleanerTaskFunction(void*)+0x93>
c001efe7:	83 ec 0c             	sub    esp,0xc
c001efea:	68 4c 29 03 c0       	push   0xc003294c
c001efef:	e8 a2 a7 00 00       	call   c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eff4:	c7 04 24 4c 29 03 c0 	mov    DWORD PTR [esp],0xc003294c
c001effb:	89 c3                	mov    ebx,eax
c001effd:	e8 9c a7 00 00       	call   c002979e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001f002:	c7 04 24 88 d1 02 c0 	mov    DWORD PTR [esp],0xc002d188
c001f009:	e8 29 3e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f00e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f011:	e8 b3 fc ff ff       	call   c001ecc9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001f016:	c7 04 24 a1 d1 02 c0 	mov    DWORD PTR [esp],0xc002d1a1
c001f01d:	e8 15 3e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f022:	83 c4 10             	add    esp,0x10
c001f025:	83 ec 0c             	sub    esp,0xc
c001f028:	68 4c 29 03 c0       	push   0xc003294c
c001f02d:	e8 48 a7 00 00       	call   c002977a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001f032:	83 c4 10             	add    esp,0x10
c001f035:	84 c0                	test   al,al
c001f037:	74 ae                	je     c001efe7 <cleanerTaskFunction(void*)+0x55>
c001f039:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f03e:	48                   	dec    eax
c001f03f:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001f044:	75 01                	jne    c001f047 <cleanerTaskFunction(void*)+0xb5>
c001f046:	fb                   	sti    
c001f047:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001f04c:	48                   	dec    eax
c001f04d:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c001f052:	0f 85 3e ff ff ff    	jne    c001ef96 <cleanerTaskFunction(void*)+0x4>
c001f058:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c001f05d:	85 c0                	test   eax,eax
c001f05f:	0f 84 31 ff ff ff    	je     c001ef96 <cleanerTaskFunction(void*)+0x4>
c001f065:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c001f06f:	e8 e4 f6 ff ff       	call   c001e758 <schedule()>
c001f074:	e9 1d ff ff ff       	jmp    c001ef96 <cleanerTaskFunction(void*)+0x4>
c001f079:	83 ec 0c             	sub    esp,0xc
c001f07c:	6a 02                	push   0x2
c001f07e:	e8 86 f8 ff ff       	call   c001e909 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f083:	83 c4 10             	add    esp,0x10
c001f086:	e9 3f ff ff ff       	jmp    c001efca <cleanerTaskFunction(void*)+0x38>

c001f08b <terminateTask(int)>:
c001f08b:	83 ec 14             	sub    esp,0x14
c001f08e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f093:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001f096:	83 c0 0c             	add    eax,0xc
c001f099:	50                   	push   eax
c001f09a:	68 00 d5 02 c0       	push   0xc002d500
c001f09f:	e8 93 3d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f0a4:	fa                   	cli    
c001f0a5:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001f0ab:	ff 05 44 29 03 c0    	inc    DWORD PTR ds:0xc0032944
c001f0b1:	fa                   	cli    
c001f0b2:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001f0b8:	c7 04 24 b4 d1 02 c0 	mov    DWORD PTR [esp],0xc002d1b4
c001f0bf:	e8 73 3d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f0c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f0c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0cd:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001f0d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f0d8:	5a                   	pop    edx
c001f0d9:	59                   	pop    ecx
c001f0da:	50                   	push   eax
c001f0db:	68 4c 29 03 c0       	push   0xc003294c
c001f0e0:	e8 67 a7 00 00       	call   c002984c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001f0e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0ea:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001f0f1:	c7 04 24 ce d1 02 c0 	mov    DWORD PTR [esp],0xc002d1ce
c001f0f8:	e8 3a 3d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f0fd:	83 c4 10             	add    esp,0x10
c001f100:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f105:	85 c0                	test   eax,eax
c001f107:	0f 84 8d 00 00 00    	je     c001f19a <terminateTask(int)+0x10f>
c001f10d:	83 ec 0c             	sub    esp,0xc
c001f110:	68 e8 d1 02 c0       	push   0xc002d1e8
c001f115:	e8 1d 3d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f11a:	58                   	pop    eax
c001f11b:	c6 05 2c 29 03 c0 01 	mov    BYTE PTR ds:0xc003292c,0x1
c001f122:	ff 35 28 29 03 c0    	push   DWORD PTR ds:0xc0032928
c001f128:	e8 ef fa ff ff       	call   c001ec1c <unblockTask(ThreadControlBlock*)>
c001f12d:	c7 04 24 02 d2 02 c0 	mov    DWORD PTR [esp],0xc002d202
c001f134:	e8 fe 3c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f139:	83 c4 10             	add    esp,0x10
c001f13c:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f141:	48                   	dec    eax
c001f142:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001f147:	75 01                	jne    c001f14a <terminateTask(int)+0xbf>
c001f149:	fb                   	sti    
c001f14a:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001f14f:	48                   	dec    eax
c001f150:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c001f155:	75 09                	jne    c001f160 <terminateTask(int)+0xd5>
c001f157:	83 3d 40 29 03 c0 00 	cmp    DWORD PTR ds:0xc0032940,0x0
c001f15e:	75 4c                	jne    c001f1ac <terminateTask(int)+0x121>
c001f160:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f165:	48                   	dec    eax
c001f166:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001f16b:	75 01                	jne    c001f16e <terminateTask(int)+0xe3>
c001f16d:	fb                   	sti    
c001f16e:	83 ec 0c             	sub    esp,0xc
c001f171:	68 3a d2 02 c0       	push   0xc002d23a
c001f176:	e8 bc 3c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f17b:	83 c4 10             	add    esp,0x10
c001f17e:	fa                   	cli    
c001f17f:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001f185:	e8 ce f5 ff ff       	call   c001e758 <schedule()>
c001f18a:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f18f:	48                   	dec    eax
c001f190:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001f195:	75 e7                	jne    c001f17e <terminateTask(int)+0xf3>
c001f197:	fb                   	sti    
c001f198:	eb e4                	jmp    c001f17e <terminateTask(int)+0xf3>
c001f19a:	83 ec 0c             	sub    esp,0xc
c001f19d:	68 1c d2 02 c0       	push   0xc002d21c
c001f1a2:	e8 90 3c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f1a7:	83 c4 10             	add    esp,0x10
c001f1aa:	eb 90                	jmp    c001f13c <terminateTask(int)+0xb1>
c001f1ac:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c001f1b6:	e8 9d f5 ff ff       	call   c001e758 <schedule()>
c001f1bb:	eb a3                	jmp    c001f160 <terminateTask(int)+0xd5>

c001f1bd <Thr::terminateFromIRQ(int)>:
c001f1bd:	83 ec 18             	sub    esp,0x18
c001f1c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c4:	e8 c2 fe ff ff       	call   c001f08b <terminateTask(int)>
c001f1c9:	90                   	nop

c001f1ca <Semaphore::release()>:
c001f1ca:	83 ec 0c             	sub    esp,0xc
c001f1cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1d1:	fa                   	cli    
c001f1d2:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001f1d7:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001f1dd:	8d 48 01             	lea    ecx,[eax+0x1]
c001f1e0:	89 0d 44 29 03 c0    	mov    DWORD PTR ds:0xc0032944,ecx
c001f1e6:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001f1e9:	85 c9                	test   ecx,ecx
c001f1eb:	74 3c                	je     c001f229 <Semaphore::release()+0x5f>
c001f1ed:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001f1f0:	83 ec 0c             	sub    esp,0xc
c001f1f3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001f1f6:	51                   	push   ecx
c001f1f7:	e8 20 fa ff ff       	call   c001ec1c <unblockTask(ThreadControlBlock*)>
c001f1fc:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c001f201:	83 c4 10             	add    esp,0x10
c001f204:	48                   	dec    eax
c001f205:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c001f20a:	85 c0                	test   eax,eax
c001f20c:	75 09                	jne    c001f217 <Semaphore::release()+0x4d>
c001f20e:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c001f213:	85 c0                	test   eax,eax
c001f215:	75 17                	jne    c001f22e <Semaphore::release()+0x64>
c001f217:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f21c:	48                   	dec    eax
c001f21d:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001f222:	75 01                	jne    c001f225 <Semaphore::release()+0x5b>
c001f224:	fb                   	sti    
c001f225:	83 c4 0c             	add    esp,0xc
c001f228:	c3                   	ret    
c001f229:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001f22c:	eb d7                	jmp    c001f205 <Semaphore::release()+0x3b>
c001f22e:	c7 05 40 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032940,0x0
c001f238:	e8 1b f5 ff ff       	call   c001e758 <schedule()>
c001f23d:	eb d8                	jmp    c001f217 <Semaphore::release()+0x4d>

c001f23f <__static_initialization_and_destruction_0(int, int)>:
c001f23f:	83 ec 0c             	sub    esp,0xc
c001f242:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f247:	0f 85 88 00 00 00    	jne    c001f2d5 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f24d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f255:	75 7e                	jne    c001f2d5 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f257:	83 ec 0c             	sub    esp,0xc
c001f25a:	68 64 29 03 c0       	push   0xc0032964
c001f25f:	e8 78 a8 00 00       	call   c0029adc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f264:	83 c4 10             	add    esp,0x10
c001f267:	83 ec 04             	sub    esp,0x4
c001f26a:	68 28 e3 02 c0       	push   0xc002e328
c001f26f:	68 64 29 03 c0       	push   0xc0032964
c001f274:	68 90 9a 02 c0       	push   0xc0029a90
c001f279:	e8 53 3a ff ff       	call   c0012cd1 <__cxa_atexit>
c001f27e:	83 c4 10             	add    esp,0x10
c001f281:	83 ec 0c             	sub    esp,0xc
c001f284:	68 58 29 03 c0       	push   0xc0032958
c001f289:	e8 4e a8 00 00       	call   c0029adc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f28e:	83 c4 10             	add    esp,0x10
c001f291:	83 ec 04             	sub    esp,0x4
c001f294:	68 28 e3 02 c0       	push   0xc002e328
c001f299:	68 58 29 03 c0       	push   0xc0032958
c001f29e:	68 90 9a 02 c0       	push   0xc0029a90
c001f2a3:	e8 29 3a ff ff       	call   c0012cd1 <__cxa_atexit>
c001f2a8:	83 c4 10             	add    esp,0x10
c001f2ab:	83 ec 0c             	sub    esp,0xc
c001f2ae:	68 4c 29 03 c0       	push   0xc003294c
c001f2b3:	e8 24 a8 00 00       	call   c0029adc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f2b8:	83 c4 10             	add    esp,0x10
c001f2bb:	83 ec 04             	sub    esp,0x4
c001f2be:	68 28 e3 02 c0       	push   0xc002e328
c001f2c3:	68 4c 29 03 c0       	push   0xc003294c
c001f2c8:	68 90 9a 02 c0       	push   0xc0029a90
c001f2cd:	e8 ff 39 ff ff       	call   c0012cd1 <__cxa_atexit>
c001f2d2:	83 c4 10             	add    esp,0x10
c001f2d5:	90                   	nop
c001f2d6:	83 c4 0c             	add    esp,0xc
c001f2d9:	c3                   	ret    

c001f2da <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f2da:	83 ec 0c             	sub    esp,0xc
c001f2dd:	83 ec 08             	sub    esp,0x8
c001f2e0:	68 ff ff 00 00       	push   0xffff
c001f2e5:	6a 01                	push   0x1
c001f2e7:	e8 53 ff ff ff       	call   c001f23f <__static_initialization_and_destruction_0(int, int)>
c001f2ec:	83 c4 10             	add    esp,0x10
c001f2ef:	83 c4 0c             	add    esp,0xc
c001f2f2:	c3                   	ret    

c001f2f3 <Vm::inbv(unsigned short)>:
c001f2f3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2f7:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f2fc:	75 06                	jne    c001f304 <Vm::inbv(unsigned short)+0x11>
c001f2fe:	a0 ac 29 03 c0       	mov    al,ds:0xc00329ac
c001f303:	c3                   	ret    
c001f304:	ec                   	in     al,dx
c001f305:	c3                   	ret    

c001f306 <Vm::outbv(unsigned short, unsigned char)>:
c001f306:	53                   	push   ebx
c001f307:	83 ec 08             	sub    esp,0x8
c001f30a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f30e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f312:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f317:	75 38                	jne    c001f351 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f319:	0f b6 c3             	movzx  eax,bl
c001f31c:	51                   	push   ecx
c001f31d:	51                   	push   ecx
c001f31e:	50                   	push   eax
c001f31f:	68 1f d5 02 c0       	push   0xc002d51f
c001f324:	e8 0e 3b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f329:	8b 15 ac 29 03 c0    	mov    edx,DWORD PTR ds:0xc00329ac
c001f32f:	83 c4 10             	add    esp,0x10
c001f332:	8d 42 01             	lea    eax,[edx+0x1]
c001f335:	88 9a c0 29 03 c0    	mov    BYTE PTR [edx-0x3ffcd640],bl
c001f33b:	a3 ac 29 03 c0       	mov    ds:0xc00329ac,eax
c001f340:	83 f8 20             	cmp    eax,0x20
c001f343:	75 0f                	jne    c001f354 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f345:	c7 05 ac 29 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00329ac,0x1f
c001f34f:	eb 03                	jmp    c001f354 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f351:	88 d8                	mov    al,bl
c001f353:	ee                   	out    dx,al
c001f354:	83 c4 08             	add    esp,0x8
c001f357:	5b                   	pop    ebx
c001f358:	c3                   	ret    

c001f359 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f359:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f35e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f363:	c1 e0 04             	shl    eax,0x4
c001f366:	01 d0                	add    eax,edx
c001f368:	c3                   	ret    

c001f369 <Vm::getSegment(unsigned int)>:
c001f369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f36d:	c1 e8 10             	shr    eax,0x10
c001f370:	c3                   	ret    

c001f371 <Vm::getOffset(unsigned int)>:
c001f371:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f375:	c3                   	ret    

c001f376 <Vm::mainloop2()>:
c001f376:	83 ec 18             	sub    esp,0x18
c001f379:	fa                   	cli    
c001f37a:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001f380:	6a 02                	push   0x2
c001f382:	c6 05 a5 29 03 c0 01 	mov    BYTE PTR ds:0xc00329a5,0x1
c001f389:	e8 7b f5 ff ff       	call   c001e909 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f38e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f393:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f397:	52                   	push   edx
c001f398:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f39c:	52                   	push   edx
c001f39d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f3a1:	52                   	push   edx
c001f3a2:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f3a6:	50                   	push   eax
c001f3a7:	e8 4e 0f fe ff       	call   c00002fa <goToVM86>
c001f3ac:	83 c4 2c             	add    esp,0x2c
c001f3af:	c3                   	ret    

c001f3b0 <Vm::mainVm8086Loop(void*)>:
c001f3b0:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f3b5:	48                   	dec    eax
c001f3b6:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001f3bb:	75 01                	jne    c001f3be <Vm::mainVm8086Loop(void*)+0xe>
c001f3bd:	fb                   	sti    
c001f3be:	eb b6                	jmp    c001f376 <Vm::mainloop2()>

c001f3c0 <Vm::mainloop3(unsigned long)>:
c001f3c0:	83 ec 18             	sub    esp,0x18
c001f3c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f3c7:	fa                   	cli    
c001f3c8:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001f3ce:	6a 02                	push   0x2
c001f3d0:	c6 05 a4 29 03 c0 01 	mov    BYTE PTR ds:0xc00329a4,0x1
c001f3d7:	a3 a0 29 03 c0       	mov    ds:0xc00329a0,eax
c001f3dc:	e8 28 f5 ff ff       	call   c001e909 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f3e1:	83 c4 1c             	add    esp,0x1c
c001f3e4:	eb 90                	jmp    c001f376 <Vm::mainloop2()>

c001f3e6 <Vm::initialise8086()>:
c001f3e6:	83 ec 0c             	sub    esp,0xc
c001f3e9:	68 80 00 00 00       	push   0x80
c001f3ee:	6a 00                	push   0x0
c001f3f0:	68 b0 f3 01 c0       	push   0xc001f3b0
c001f3f5:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c001f3fb:	e8 14 f1 ff ff       	call   c001e514 <Process::createThread(void (*)(void*), void*, int)>
c001f400:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f407:	a3 a8 29 03 c0       	mov    ds:0xc00329a8,eax
c001f40c:	68 00 01 00 00       	push   0x100
c001f411:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c001f416:	6a 00                	push   0x0
c001f418:	6a 00                	push   0x0
c001f41a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f420:	e8 39 31 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f425:	83 c4 2c             	add    esp,0x2c
c001f428:	c3                   	ret    

c001f429 <Vm::finish8086()>:
c001f429:	53                   	push   ebx
c001f42a:	83 ec 08             	sub    esp,0x8
c001f42d:	fa                   	cli    
c001f42e:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001f434:	80 3d a4 29 03 c0 00 	cmp    BYTE PTR ds:0xc00329a4,0x0
c001f43b:	75 15                	jne    c001f452 <Vm::finish8086()+0x29>
c001f43d:	e8 16 f3 ff ff       	call   c001e758 <schedule()>
c001f442:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f447:	48                   	dec    eax
c001f448:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001f44d:	75 de                	jne    c001f42d <Vm::finish8086()+0x4>
c001f44f:	fb                   	sti    
c001f450:	eb db                	jmp    c001f42d <Vm::finish8086()+0x4>
c001f452:	83 ec 0c             	sub    esp,0xc
c001f455:	8b 1d a0 29 03 c0    	mov    ebx,DWORD PTR ds:0xc00329a0
c001f45b:	ff 35 a8 29 03 c0    	push   DWORD PTR ds:0xc00329a8
c001f461:	c6 05 a4 29 03 c0 00 	mov    BYTE PTR ds:0xc00329a4,0x0
c001f468:	e8 af f7 ff ff       	call   c001ec1c <unblockTask(ThreadControlBlock*)>
c001f46d:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f472:	83 c4 10             	add    esp,0x10
c001f475:	8d 50 ff             	lea    edx,[eax-0x1]
c001f478:	89 15 48 29 03 c0    	mov    DWORD PTR ds:0xc0032948,edx
c001f47e:	85 d2                	test   edx,edx
c001f480:	75 01                	jne    c001f483 <Vm::finish8086()+0x5a>
c001f482:	fb                   	sti    
c001f483:	89 d8                	mov    eax,ebx
c001f485:	83 c4 08             	add    esp,0x8
c001f488:	5b                   	pop    ebx
c001f489:	c3                   	ret    

c001f48a <Vm::getOutput8086(unsigned char*)>:
c001f48a:	57                   	push   edi
c001f48b:	8b 0d ac 29 03 c0    	mov    ecx,DWORD PTR ds:0xc00329ac
c001f491:	56                   	push   esi
c001f492:	be c0 29 03 c0       	mov    esi,0xc00329c0
c001f497:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f49b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f49d:	a1 ac 29 03 c0       	mov    eax,ds:0xc00329ac
c001f4a2:	5e                   	pop    esi
c001f4a3:	c7 05 ac 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00329ac,0x0
c001f4ad:	5f                   	pop    edi
c001f4ae:	c3                   	ret    

c001f4af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f4af:	55                   	push   ebp
c001f4b0:	57                   	push   edi
c001f4b1:	56                   	push   esi
c001f4b2:	53                   	push   ebx
c001f4b3:	83 ec 2c             	sub    esp,0x2c
c001f4b6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f4ba:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f4be:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f4c2:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f4c6:	fa                   	cli    
c001f4c7:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c001f4cd:	0f b6 35 a5 29 03 c0 	movzx  esi,BYTE PTR ds:0xc00329a5
c001f4d4:	89 f0                	mov    eax,esi
c001f4d6:	84 c0                	test   al,al
c001f4d8:	75 1d                	jne    c001f4f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f4da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f4de:	e8 75 f2 ff ff       	call   c001e758 <schedule()>
c001f4e3:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f4e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f4ec:	48                   	dec    eax
c001f4ed:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001f4f2:	75 d2                	jne    c001f4c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f4f4:	fb                   	sti    
c001f4f5:	eb cf                	jmp    c001f4c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f4f7:	a1 a8 29 03 c0       	mov    eax,ds:0xc00329a8
c001f4fc:	c7 05 ac 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00329ac,0x0
c001f506:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f50a:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f50e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f512:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f516:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f51a:	50                   	push   eax
c001f51b:	6a 20                	push   0x20
c001f51d:	6a 00                	push   0x0
c001f51f:	68 c0 29 03 c0       	push   0xc00329c0
c001f524:	e8 27 12 fe ff       	call   c0000750 <memset>
c001f529:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f530:	e8 57 03 ff ff       	call   c000f88c <malloc>
c001f535:	83 c4 0c             	add    esp,0xc
c001f538:	89 c3                	mov    ebx,eax
c001f53a:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c001f540:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f544:	50                   	push   eax
c001f545:	e8 4c 3e ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001f54a:	83 c4 10             	add    esp,0x10
c001f54d:	85 db                	test   ebx,ebx
c001f54f:	75 0a                	jne    c001f55b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f551:	83 ec 0c             	sub    esp,0xc
c001f554:	68 3b d5 02 c0       	push   0xc002d53b
c001f559:	eb 3e                	jmp    c001f599 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f55b:	50                   	push   eax
c001f55c:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f560:	50                   	push   eax
c001f561:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f565:	50                   	push   eax
c001f566:	53                   	push   ebx
c001f567:	e8 3a 41 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c001f56c:	83 c4 10             	add    esp,0x10
c001f56f:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f574:	74 0a                	je     c001f580 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f576:	83 ec 0c             	sub    esp,0xc
c001f579:	68 4f d5 02 c0       	push   0xc002d54f
c001f57e:	eb 19                	jmp    c001f599 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f580:	51                   	push   ecx
c001f581:	51                   	push   ecx
c001f582:	6a 01                	push   0x1
c001f584:	53                   	push   ebx
c001f585:	e8 70 3e ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001f58a:	83 c4 10             	add    esp,0x10
c001f58d:	85 c0                	test   eax,eax
c001f58f:	74 24                	je     c001f5b5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f591:	83 ec 0c             	sub    esp,0xc
c001f594:	68 68 d5 02 c0       	push   0xc002d568
c001f599:	e8 07 b4 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c001f59e:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f5a3:	83 c4 10             	add    esp,0x10
c001f5a6:	48                   	dec    eax
c001f5a7:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001f5ac:	85 c0                	test   eax,eax
c001f5ae:	75 01                	jne    c001f5b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f5b0:	fb                   	sti    
c001f5b1:	31 f6                	xor    esi,esi
c001f5b3:	eb 58                	jmp    c001f60d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f5b5:	0f b7 ed             	movzx  ebp,bp
c001f5b8:	50                   	push   eax
c001f5b9:	0f b7 ff             	movzx  edi,di
c001f5bc:	50                   	push   eax
c001f5bd:	55                   	push   ebp
c001f5be:	57                   	push   edi
c001f5bf:	e8 95 fd ff ff       	call   c001f359 <Vm::realToLinear(unsigned short, unsigned short)>
c001f5c4:	5a                   	pop    edx
c001f5c5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f5c7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f5cb:	51                   	push   ecx
c001f5cc:	50                   	push   eax
c001f5cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f5d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f5d5:	53                   	push   ebx
c001f5d6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f5d9:	83 c4 14             	add    esp,0x14
c001f5dc:	53                   	push   ebx
c001f5dd:	e8 76 3e ff ff       	call   c0013458 <File::close()>
c001f5e2:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c001f5e7:	83 c4 10             	add    esp,0x10
c001f5ea:	48                   	dec    eax
c001f5eb:	c6 05 a5 29 03 c0 00 	mov    BYTE PTR ds:0xc00329a5,0x0
c001f5f2:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c001f5f7:	85 c0                	test   eax,eax
c001f5f9:	75 01                	jne    c001f5fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f5fb:	fb                   	sti    
c001f5fc:	83 ec 0c             	sub    esp,0xc
c001f5ff:	ff 35 a8 29 03 c0    	push   DWORD PTR ds:0xc00329a8
c001f605:	e8 12 f6 ff ff       	call   c001ec1c <unblockTask(ThreadControlBlock*)>
c001f60a:	83 c4 10             	add    esp,0x10
c001f60d:	83 c4 2c             	add    esp,0x2c
c001f610:	89 f0                	mov    eax,esi
c001f612:	5b                   	pop    ebx
c001f613:	5e                   	pop    esi
c001f614:	5f                   	pop    edi
c001f615:	5d                   	pop    ebp
c001f616:	c3                   	ret    

c001f617 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f617:	57                   	push   edi
c001f618:	56                   	push   esi
c001f619:	53                   	push   ebx
c001f61a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f61e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f622:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f626:	83 e8 06             	sub    eax,0x6
c001f629:	0f b7 c0             	movzx  eax,ax
c001f62c:	50                   	push   eax
c001f62d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f632:	50                   	push   eax
c001f633:	e8 21 fd ff ff       	call   c001f359 <Vm::realToLinear(unsigned short, unsigned short)>
c001f638:	5a                   	pop    edx
c001f639:	5e                   	pop    esi
c001f63a:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f63d:	8d 56 fa             	lea    edx,[esi-0x6]
c001f640:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f646:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f649:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f64c:	83 c2 02             	add    edx,0x2
c001f64f:	66 89 10             	mov    WORD PTR [eax],dx
c001f652:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f655:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f659:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f65c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f660:	89 d6                	mov    esi,edx
c001f662:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f668:	66 81 e6 ff fd       	and    si,0xfdff
c001f66d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f671:	74 07                	je     c001f67a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f673:	89 d6                	mov    esi,edx
c001f675:	66 81 ce 00 02       	or     si,0x200
c001f67a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f67e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f683:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f687:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f68f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f692:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f69a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f69d:	5b                   	pop    ebx
c001f69e:	5e                   	pop    esi
c001f69f:	5f                   	pop    edi
c001f6a0:	c3                   	ret    

c001f6a1 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f6a1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6a6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f6ab:	c1 e0 04             	shl    eax,0x4
c001f6ae:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f6b1:	c3                   	ret    

c001f6b2 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f6b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f6bc:	c1 e0 04             	shl    eax,0x4
c001f6bf:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f6c3:	c3                   	ret    

c001f6c4 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f6c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6c9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f6ce:	c1 e0 04             	shl    eax,0x4
c001f6d1:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f6d4:	c3                   	ret    

c001f6d5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f6d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6da:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f6df:	c1 e0 04             	shl    eax,0x4
c001f6e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f6e6:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f6e9:	c3                   	ret    

c001f6ea <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f6ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6ef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f6f4:	c1 e0 04             	shl    eax,0x4
c001f6f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f6fb:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f6ff:	c3                   	ret    

c001f700 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f700:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f705:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f70a:	c1 e0 04             	shl    eax,0x4
c001f70d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f711:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f714:	c3                   	ret    

c001f715 <Vm::faultHandler(regs*)>:
c001f715:	55                   	push   ebp
c001f716:	57                   	push   edi
c001f717:	56                   	push   esi
c001f718:	53                   	push   ebx
c001f719:	83 ec 1c             	sub    esp,0x1c
c001f71c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f720:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f723:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f726:	0f b7 c1             	movzx  eax,cx
c001f729:	50                   	push   eax
c001f72a:	0f b7 c3             	movzx  eax,bx
c001f72d:	c1 e3 04             	shl    ebx,0x4
c001f730:	50                   	push   eax
c001f731:	e8 23 fc ff ff       	call   c001f359 <Vm::realToLinear(unsigned short, unsigned short)>
c001f736:	5a                   	pop    edx
c001f737:	89 c5                	mov    ebp,eax
c001f739:	5e                   	pop    esi
c001f73a:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f73e:	50                   	push   eax
c001f73f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f743:	50                   	push   eax
c001f744:	e8 10 fc ff ff       	call   c001f359 <Vm::realToLinear(unsigned short, unsigned short)>
c001f749:	01 cb                	add    ebx,ecx
c001f74b:	89 c6                	mov    esi,eax
c001f74d:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f751:	50                   	push   eax
c001f752:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f756:	50                   	push   eax
c001f757:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f75b:	50                   	push   eax
c001f75c:	55                   	push   ebp
c001f75d:	53                   	push   ebx
c001f75e:	b3 06                	mov    bl,0x6
c001f760:	68 81 d5 02 c0       	push   0xc002d581
c001f765:	e8 cd 36 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f76a:	83 c4 20             	add    esp,0x20
c001f76d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f772:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f777:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f77b:	3c 9d                	cmp    al,0x9d
c001f77d:	0f 84 d7 02 00 00    	je     c001fa5a <Vm::faultHandler(regs*)+0x345>
c001f783:	0f 87 a3 00 00 00    	ja     c001f82c <Vm::faultHandler(regs*)+0x117>
c001f789:	3c 66                	cmp    al,0x66
c001f78b:	0f 84 15 02 00 00    	je     c001f9a6 <Vm::faultHandler(regs*)+0x291>
c001f791:	77 5f                	ja     c001f7f2 <Vm::faultHandler(regs*)+0xdd>
c001f793:	3c 36                	cmp    al,0x36
c001f795:	0f 84 f1 01 00 00    	je     c001f98c <Vm::faultHandler(regs*)+0x277>
c001f79b:	77 28                	ja     c001f7c5 <Vm::faultHandler(regs*)+0xb0>
c001f79d:	3c 26                	cmp    al,0x26
c001f79f:	0f 84 99 01 00 00    	je     c001f93e <Vm::faultHandler(regs*)+0x229>
c001f7a5:	3c 2e                	cmp    al,0x2e
c001f7a7:	0f 85 3b 07 00 00    	jne    c001fee8 <Vm::faultHandler(regs*)+0x7d3>
c001f7ad:	83 ec 0c             	sub    esp,0xc
c001f7b0:	31 db                	xor    ebx,ebx
c001f7b2:	68 96 d5 02 c0       	push   0xc002d596
c001f7b7:	e8 7b 36 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f7bc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7bf:	83 c4 10             	add    esp,0x10
c001f7c2:	45                   	inc    ebp
c001f7c3:	eb b2                	jmp    c001f777 <Vm::faultHandler(regs*)+0x62>
c001f7c5:	3c 64                	cmp    al,0x64
c001f7c7:	0f 84 8b 01 00 00    	je     c001f958 <Vm::faultHandler(regs*)+0x243>
c001f7cd:	0f 87 9f 01 00 00    	ja     c001f972 <Vm::faultHandler(regs*)+0x25d>
c001f7d3:	3c 3e                	cmp    al,0x3e
c001f7d5:	0f 85 0d 07 00 00    	jne    c001fee8 <Vm::faultHandler(regs*)+0x7d3>
c001f7db:	83 ec 0c             	sub    esp,0xc
c001f7de:	b3 01                	mov    bl,0x1
c001f7e0:	68 9a d5 02 c0       	push   0xc002d59a
c001f7e5:	e8 4d 36 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f7ea:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7ed:	83 c4 10             	add    esp,0x10
c001f7f0:	eb d0                	jmp    c001f7c2 <Vm::faultHandler(regs*)+0xad>
c001f7f2:	3c 6d                	cmp    al,0x6d
c001f7f4:	0f 84 af 03 00 00    	je     c001fba9 <Vm::faultHandler(regs*)+0x494>
c001f7fa:	77 15                	ja     c001f811 <Vm::faultHandler(regs*)+0xfc>
c001f7fc:	3c 67                	cmp    al,0x67
c001f7fe:	0f 84 bf 01 00 00    	je     c001f9c3 <Vm::faultHandler(regs*)+0x2ae>
c001f804:	3c 6c                	cmp    al,0x6c
c001f806:	0f 84 3f 03 00 00    	je     c001fb4b <Vm::faultHandler(regs*)+0x436>
c001f80c:	e9 d7 06 00 00       	jmp    c001fee8 <Vm::faultHandler(regs*)+0x7d3>
c001f811:	3c 6f                	cmp    al,0x6f
c001f813:	0f 84 a4 04 00 00    	je     c001fcbd <Vm::faultHandler(regs*)+0x5a8>
c001f819:	0f 82 11 04 00 00    	jb     c001fc30 <Vm::faultHandler(regs*)+0x51b>
c001f81f:	3c 9c                	cmp    al,0x9c
c001f821:	0f 84 ba 01 00 00    	je     c001f9e1 <Vm::faultHandler(regs*)+0x2cc>
c001f827:	e9 bc 06 00 00       	jmp    c001fee8 <Vm::faultHandler(regs*)+0x7d3>
c001f82c:	3c ec                	cmp    al,0xec
c001f82e:	0f 84 24 06 00 00    	je     c001fe58 <Vm::faultHandler(regs*)+0x743>
c001f834:	0f 87 93 00 00 00    	ja     c001f8cd <Vm::faultHandler(regs*)+0x1b8>
c001f83a:	3c e4                	cmp    al,0xe4
c001f83c:	0f 84 5c 05 00 00    	je     c001fd9e <Vm::faultHandler(regs*)+0x689>
c001f842:	77 6a                	ja     c001f8ae <Vm::faultHandler(regs*)+0x199>
c001f844:	3c cd                	cmp    al,0xcd
c001f846:	0f 84 7e 02 00 00    	je     c001faca <Vm::faultHandler(regs*)+0x3b5>
c001f84c:	3c cf                	cmp    al,0xcf
c001f84e:	0f 85 94 06 00 00    	jne    c001fee8 <Vm::faultHandler(regs*)+0x7d3>
c001f854:	83 ec 0c             	sub    esp,0xc
c001f857:	68 de d5 02 c0       	push   0xc002d5de
c001f85c:	e8 d6 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f861:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f864:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f867:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f86b:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f86e:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f872:	0d 00 02 02 00       	or     eax,0x20200
c001f877:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f87a:	56                   	push   esi
c001f87b:	53                   	push   ebx
c001f87c:	52                   	push   edx
c001f87d:	68 e4 d5 02 c0       	push   0xc002d5e4
c001f882:	e8 b0 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f887:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f88b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f891:	66 c1 e8 09          	shr    ax,0x9
c001f895:	83 e0 01             	and    eax,0x1
c001f898:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f89b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f89e:	83 c0 06             	add    eax,0x6
c001f8a1:	25 ff ff 00 00       	and    eax,0xffff
c001f8a6:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f8a9:	e9 95 02 00 00       	jmp    c001fb43 <Vm::faultHandler(regs*)+0x42e>
c001f8ae:	3c e6                	cmp    al,0xe6
c001f8b0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f8b4:	0f 84 4e 05 00 00    	je     c001fe08 <Vm::faultHandler(regs*)+0x6f3>
c001f8ba:	0f 82 0a 05 00 00    	jb     c001fdca <Vm::faultHandler(regs*)+0x6b5>
c001f8c0:	3c e7                	cmp    al,0xe7
c001f8c2:	0f 84 69 05 00 00    	je     c001fe31 <Vm::faultHandler(regs*)+0x71c>
c001f8c8:	e9 1b 06 00 00       	jmp    c001fee8 <Vm::faultHandler(regs*)+0x7d3>
c001f8cd:	3c ef                	cmp    al,0xef
c001f8cf:	0f 84 e6 05 00 00    	je     c001febb <Vm::faultHandler(regs*)+0x7a6>
c001f8d5:	77 37                	ja     c001f90e <Vm::faultHandler(regs*)+0x1f9>
c001f8d7:	3c ed                	cmp    al,0xed
c001f8d9:	0f 84 a3 05 00 00    	je     c001fe82 <Vm::faultHandler(regs*)+0x76d>
c001f8df:	3c ee                	cmp    al,0xee
c001f8e1:	0f 85 01 06 00 00    	jne    c001fee8 <Vm::faultHandler(regs*)+0x7d3>
c001f8e7:	52                   	push   edx
c001f8e8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f8eb:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f8ee:	68 7f d6 02 c0       	push   0xc002d67f
c001f8f3:	e8 3f 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f8f8:	59                   	pop    ecx
c001f8f9:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f8fd:	5b                   	pop    ebx
c001f8fe:	50                   	push   eax
c001f8ff:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f903:	50                   	push   eax
c001f904:	e8 fd f9 ff ff       	call   c001f306 <Vm::outbv(unsigned short, unsigned char)>
c001f909:	e9 a5 05 00 00       	jmp    c001feb3 <Vm::faultHandler(regs*)+0x79e>
c001f90e:	3c fa                	cmp    al,0xfa
c001f910:	0f 84 f7 01 00 00    	je     c001fb0d <Vm::faultHandler(regs*)+0x3f8>
c001f916:	3c fb                	cmp    al,0xfb
c001f918:	0f 84 0a 02 00 00    	je     c001fb28 <Vm::faultHandler(regs*)+0x413>
c001f91e:	3c f3                	cmp    al,0xf3
c001f920:	0f 85 c2 05 00 00    	jne    c001fee8 <Vm::faultHandler(regs*)+0x7d3>
c001f926:	83 ec 0c             	sub    esp,0xc
c001f929:	68 b7 d5 02 c0       	push   0xc002d5b7
c001f92e:	e8 04 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f933:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f936:	83 c4 10             	add    esp,0x10
c001f939:	e9 84 fe ff ff       	jmp    c001f7c2 <Vm::faultHandler(regs*)+0xad>
c001f93e:	83 ec 0c             	sub    esp,0xc
c001f941:	b3 02                	mov    bl,0x2
c001f943:	68 92 d5 02 c0       	push   0xc002d592
c001f948:	e8 ea 34 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f94d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	e9 6a fe ff ff       	jmp    c001f7c2 <Vm::faultHandler(regs*)+0xad>
c001f958:	83 ec 0c             	sub    esp,0xc
c001f95b:	b3 03                	mov    bl,0x3
c001f95d:	68 9e d5 02 c0       	push   0xc002d59e
c001f962:	e8 d0 34 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f967:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f96a:	83 c4 10             	add    esp,0x10
c001f96d:	e9 50 fe ff ff       	jmp    c001f7c2 <Vm::faultHandler(regs*)+0xad>
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	b3 04                	mov    bl,0x4
c001f977:	68 a2 d5 02 c0       	push   0xc002d5a2
c001f97c:	e8 b6 34 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f981:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f984:	83 c4 10             	add    esp,0x10
c001f987:	e9 36 fe ff ff       	jmp    c001f7c2 <Vm::faultHandler(regs*)+0xad>
c001f98c:	83 ec 0c             	sub    esp,0xc
c001f98f:	b3 05                	mov    bl,0x5
c001f991:	68 a6 d5 02 c0       	push   0xc002d5a6
c001f996:	e8 9c 34 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f99b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f99e:	83 c4 10             	add    esp,0x10
c001f9a1:	e9 1c fe ff ff       	jmp    c001f7c2 <Vm::faultHandler(regs*)+0xad>
c001f9a6:	83 ec 0c             	sub    esp,0xc
c001f9a9:	68 aa d5 02 c0       	push   0xc002d5aa
c001f9ae:	e8 84 34 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f9b3:	83 c4 10             	add    esp,0x10
c001f9b6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f9b9:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f9be:	e9 ff fd ff ff       	jmp    c001f7c2 <Vm::faultHandler(regs*)+0xad>
c001f9c3:	50                   	push   eax
c001f9c4:	50                   	push   eax
c001f9c5:	6a 01                	push   0x1
c001f9c7:	68 af d5 02 c0       	push   0xc002d5af
c001f9cc:	e8 66 34 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f9d1:	83 c4 10             	add    esp,0x10
c001f9d4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f9d7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f9dc:	e9 e1 fd ff ff       	jmp    c001f7c2 <Vm::faultHandler(regs*)+0xad>
c001f9e1:	83 ec 0c             	sub    esp,0xc
c001f9e4:	68 bd d5 02 c0       	push   0xc002d5bd
c001f9e9:	e8 49 34 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f9ee:	83 c4 10             	add    esp,0x10
c001f9f1:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f9f4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f9f9:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f9fc:	74 2f                	je     c001fa2d <Vm::faultHandler(regs*)+0x318>
c001f9fe:	83 ea 04             	sub    edx,0x4
c001fa01:	25 ff 0d 00 00       	and    eax,0xdff
c001fa06:	81 e2 ff ff 00 00    	and    edx,0xffff
c001fa0c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001fa0f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001fa12:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001fa18:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001fa1c:	0f 84 bf 04 00 00    	je     c001fee1 <Vm::faultHandler(regs*)+0x7cc>
c001fa22:	80 cc 02             	or     ah,0x2
c001fa25:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001fa28:	e9 b4 04 00 00       	jmp    c001fee1 <Vm::faultHandler(regs*)+0x7cc>
c001fa2d:	83 ea 02             	sub    edx,0x2
c001fa30:	81 e2 ff ff 00 00    	and    edx,0xffff
c001fa36:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001fa39:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001fa3d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001fa43:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001fa47:	74 05                	je     c001fa4e <Vm::faultHandler(regs*)+0x339>
c001fa49:	80 cc 02             	or     ah,0x2
c001fa4c:	eb 03                	jmp    c001fa51 <Vm::faultHandler(regs*)+0x33c>
c001fa4e:	80 e4 fd             	and    ah,0xfd
c001fa51:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001fa55:	e9 87 04 00 00       	jmp    c001fee1 <Vm::faultHandler(regs*)+0x7cc>
c001fa5a:	83 ec 0c             	sub    esp,0xc
c001fa5d:	68 c4 d5 02 c0       	push   0xc002d5c4
c001fa62:	e8 d0 33 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fa67:	83 c4 10             	add    esp,0x10
c001fa6a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa6f:	74 28                	je     c001fa99 <Vm::faultHandler(regs*)+0x384>
c001fa71:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa73:	25 ff 0d 00 00       	and    eax,0xdff
c001fa78:	0d 00 02 02 00       	or     eax,0x20200
c001fa7d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001fa80:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa82:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001fa88:	c1 e8 09             	shr    eax,0x9
c001fa8b:	83 e0 01             	and    eax,0x1
c001fa8e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001fa91:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001fa94:	83 c0 04             	add    eax,0x4
c001fa97:	eb 24                	jmp    c001fabd <Vm::faultHandler(regs*)+0x3a8>
c001fa99:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fa9c:	0d 00 02 02 00       	or     eax,0x20200
c001faa1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001faa4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001faa7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001faad:	66 c1 e8 09          	shr    ax,0x9
c001fab1:	83 e0 01             	and    eax,0x1
c001fab4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001fab7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001faba:	83 c0 02             	add    eax,0x2
c001fabd:	25 ff ff 00 00       	and    eax,0xffff
c001fac2:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001fac5:	e9 17 04 00 00       	jmp    c001fee1 <Vm::faultHandler(regs*)+0x7cc>
c001faca:	53                   	push   ebx
c001facb:	53                   	push   ebx
c001facc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad0:	50                   	push   eax
c001fad1:	68 ca d5 02 c0       	push   0xc002d5ca
c001fad6:	e8 5c 33 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fadb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fadf:	83 c4 10             	add    esp,0x10
c001fae2:	3c ee                	cmp    al,0xee
c001fae4:	75 10                	jne    c001faf6 <Vm::faultHandler(regs*)+0x3e1>
c001fae6:	83 ec 0c             	sub    esp,0xc
c001fae9:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001faec:	e8 cf f8 ff ff       	call   c001f3c0 <Vm::mainloop3(unsigned long)>
c001faf1:	e9 c0 03 00 00       	jmp    c001feb6 <Vm::faultHandler(regs*)+0x7a1>
c001faf6:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001fafa:	83 ec 0c             	sub    esp,0xc
c001fafd:	53                   	push   ebx
c001fafe:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001fb02:	53                   	push   ebx
c001fb03:	55                   	push   ebp
c001fb04:	50                   	push   eax
c001fb05:	57                   	push   edi
c001fb06:	e8 0c fb ff ff       	call   c001f617 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001fb0b:	eb 36                	jmp    c001fb43 <Vm::faultHandler(regs*)+0x42e>
c001fb0d:	83 ec 0c             	sub    esp,0xc
c001fb10:	68 d4 d5 02 c0       	push   0xc002d5d4
c001fb15:	e8 1d 33 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fb1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fb1f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fb23:	e9 8b 03 00 00       	jmp    c001feb3 <Vm::faultHandler(regs*)+0x79e>
c001fb28:	83 ec 0c             	sub    esp,0xc
c001fb2b:	68 d9 d5 02 c0       	push   0xc002d5d9
c001fb30:	e8 02 33 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fb35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fb3a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001fb3e:	e9 70 03 00 00       	jmp    c001feb3 <Vm::faultHandler(regs*)+0x79e>
c001fb43:	83 c4 20             	add    esp,0x20
c001fb46:	e9 99 03 00 00       	jmp    c001fee4 <Vm::faultHandler(regs*)+0x7cf>
c001fb4b:	83 ec 0c             	sub    esp,0xc
c001fb4e:	68 17 d6 02 c0       	push   0xc002d617
c001fb53:	e8 df 32 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fb58:	83 c4 10             	add    esp,0x10
c001fb5b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fb5e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fb63:	74 0d                	je     c001fb72 <Vm::faultHandler(regs*)+0x45d>
c001fb65:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fb6c:	0f 87 9e 01 00 00    	ja     c001fd10 <Vm::faultHandler(regs*)+0x5fb>
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fb79:	0f b7 db             	movzx  ebx,bx
c001fb7c:	50                   	push   eax
c001fb7d:	e8 71 f7 ff ff       	call   c001f2f3 <Vm::inbv(unsigned short)>
c001fb82:	83 c4 0c             	add    esp,0xc
c001fb85:	0f b6 c0             	movzx  eax,al
c001fb88:	50                   	push   eax
c001fb89:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001fb8d:	50                   	push   eax
c001fb8e:	53                   	push   ebx
c001fb8f:	e8 41 fb ff ff       	call   c001f6d5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001fb94:	83 c4 10             	add    esp,0x10
c001fb97:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fb9a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb9e:	74 03                	je     c001fba3 <Vm::faultHandler(regs*)+0x48e>
c001fba0:	48                   	dec    eax
c001fba1:	eb 01                	jmp    c001fba4 <Vm::faultHandler(regs*)+0x48f>
c001fba3:	40                   	inc    eax
c001fba4:	0f b7 c0             	movzx  eax,ax
c001fba7:	eb 7f                	jmp    c001fc28 <Vm::faultHandler(regs*)+0x513>
c001fba9:	83 ec 0c             	sub    esp,0xc
c001fbac:	68 49 d6 02 c0       	push   0xc002d649
c001fbb1:	e8 81 32 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fbb6:	83 c4 10             	add    esp,0x10
c001fbb9:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fbbc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fbc1:	74 0d                	je     c001fbd0 <Vm::faultHandler(regs*)+0x4bb>
c001fbc3:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fbca:	0f 87 40 01 00 00    	ja     c001fd10 <Vm::faultHandler(regs*)+0x5fb>
c001fbd0:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fbd3:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001fbd7:	0f b7 db             	movzx  ebx,bx
c001fbda:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbdf:	74 20                	je     c001fc01 <Vm::faultHandler(regs*)+0x4ec>
c001fbe1:	ed                   	in     eax,dx
c001fbe2:	51                   	push   ecx
c001fbe3:	50                   	push   eax
c001fbe4:	56                   	push   esi
c001fbe5:	53                   	push   ebx
c001fbe6:	e8 15 fb ff ff       	call   c001f700 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001fbeb:	83 c4 10             	add    esp,0x10
c001fbee:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fbf1:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fbf5:	74 05                	je     c001fbfc <Vm::faultHandler(regs*)+0x4e7>
c001fbf7:	83 e8 04             	sub    eax,0x4
c001fbfa:	eb 27                	jmp    c001fc23 <Vm::faultHandler(regs*)+0x50e>
c001fbfc:	83 c0 04             	add    eax,0x4
c001fbff:	eb 22                	jmp    c001fc23 <Vm::faultHandler(regs*)+0x50e>
c001fc01:	66 ed                	in     ax,dx
c001fc03:	0f b7 c0             	movzx  eax,ax
c001fc06:	52                   	push   edx
c001fc07:	50                   	push   eax
c001fc08:	56                   	push   esi
c001fc09:	53                   	push   ebx
c001fc0a:	e8 db fa ff ff       	call   c001f6ea <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001fc0f:	83 c4 10             	add    esp,0x10
c001fc12:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fc15:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fc19:	74 05                	je     c001fc20 <Vm::faultHandler(regs*)+0x50b>
c001fc1b:	83 e8 02             	sub    eax,0x2
c001fc1e:	eb 03                	jmp    c001fc23 <Vm::faultHandler(regs*)+0x50e>
c001fc20:	83 c0 02             	add    eax,0x2
c001fc23:	25 ff ff 00 00       	and    eax,0xffff
c001fc28:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fc2b:	e9 b1 02 00 00       	jmp    c001fee1 <Vm::faultHandler(regs*)+0x7cc>
c001fc30:	83 ec 0c             	sub    esp,0xc
c001fc33:	4b                   	dec    ebx
c001fc34:	68 4f d6 02 c0       	push   0xc002d64f
c001fc39:	e8 f9 31 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fc3e:	83 c4 10             	add    esp,0x10
c001fc41:	80 fb 05             	cmp    bl,0x5
c001fc44:	77 0a                	ja     c001fc50 <Vm::faultHandler(regs*)+0x53b>
c001fc46:	0f b6 db             	movzx  ebx,bl
c001fc49:	ff 24 9d c0 d6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2940]
c001fc50:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fc54:	eb 1b                	jmp    c001fc71 <Vm::faultHandler(regs*)+0x55c>
c001fc56:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fc5a:	eb 15                	jmp    c001fc71 <Vm::faultHandler(regs*)+0x55c>
c001fc5c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fc60:	eb 0f                	jmp    c001fc71 <Vm::faultHandler(regs*)+0x55c>
c001fc62:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fc66:	eb 09                	jmp    c001fc71 <Vm::faultHandler(regs*)+0x55c>
c001fc68:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fc6b:	eb 04                	jmp    c001fc71 <Vm::faultHandler(regs*)+0x55c>
c001fc6d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fc71:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fc76:	74 0d                	je     c001fc85 <Vm::faultHandler(regs*)+0x570>
c001fc78:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fc7f:	0f 87 8b 00 00 00    	ja     c001fd10 <Vm::faultHandler(regs*)+0x5fb>
c001fc85:	53                   	push   ebx
c001fc86:	53                   	push   ebx
c001fc87:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001fc8b:	52                   	push   edx
c001fc8c:	50                   	push   eax
c001fc8d:	e8 0f fa ff ff       	call   c001f6a1 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fc92:	5e                   	pop    esi
c001fc93:	0f b6 c0             	movzx  eax,al
c001fc96:	5d                   	pop    ebp
c001fc97:	50                   	push   eax
c001fc98:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fc9c:	50                   	push   eax
c001fc9d:	e8 64 f6 ff ff       	call   c001f306 <Vm::outbv(unsigned short, unsigned char)>
c001fca2:	83 c4 10             	add    esp,0x10
c001fca5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fca8:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fcac:	74 03                	je     c001fcb1 <Vm::faultHandler(regs*)+0x59c>
c001fcae:	48                   	dec    eax
c001fcaf:	eb 01                	jmp    c001fcb2 <Vm::faultHandler(regs*)+0x59d>
c001fcb1:	40                   	inc    eax
c001fcb2:	0f b7 c0             	movzx  eax,ax
c001fcb5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fcb8:	e9 24 02 00 00       	jmp    c001fee1 <Vm::faultHandler(regs*)+0x7cc>
c001fcbd:	83 ec 0c             	sub    esp,0xc
c001fcc0:	4b                   	dec    ebx
c001fcc1:	68 4f d6 02 c0       	push   0xc002d64f
c001fcc6:	e8 6c 31 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fccb:	83 c4 10             	add    esp,0x10
c001fcce:	80 fb 05             	cmp    bl,0x5
c001fcd1:	77 0a                	ja     c001fcdd <Vm::faultHandler(regs*)+0x5c8>
c001fcd3:	0f b6 db             	movzx  ebx,bl
c001fcd6:	ff 24 9d d8 d6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2928]
c001fcdd:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fce1:	eb 1b                	jmp    c001fcfe <Vm::faultHandler(regs*)+0x5e9>
c001fce3:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fce7:	eb 15                	jmp    c001fcfe <Vm::faultHandler(regs*)+0x5e9>
c001fce9:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fced:	eb 0f                	jmp    c001fcfe <Vm::faultHandler(regs*)+0x5e9>
c001fcef:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fcf3:	eb 09                	jmp    c001fcfe <Vm::faultHandler(regs*)+0x5e9>
c001fcf5:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fcf8:	eb 04                	jmp    c001fcfe <Vm::faultHandler(regs*)+0x5e9>
c001fcfa:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fcfe:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fd01:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fd06:	74 39                	je     c001fd41 <Vm::faultHandler(regs*)+0x62c>
c001fd08:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fd0e:	76 31                	jbe    c001fd41 <Vm::faultHandler(regs*)+0x62c>
c001fd10:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fd14:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fd18:	51                   	push   ecx
c001fd19:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fd1d:	51                   	push   ecx
c001fd1e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fd22:	51                   	push   ecx
c001fd23:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fd27:	51                   	push   ecx
c001fd28:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd2c:	52                   	push   edx
c001fd2d:	50                   	push   eax
c001fd2e:	50                   	push   eax
c001fd2f:	68 1c d6 02 c0       	push   0xc002d61c
c001fd34:	e8 fe 30 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fd39:	83 c4 20             	add    esp,0x20
c001fd3c:	e9 fb 01 00 00       	jmp    c001ff3c <Vm::faultHandler(regs*)+0x827>
c001fd41:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fd44:	0f b7 d3             	movzx  edx,bx
c001fd47:	81 e6 00 04 00 00    	and    esi,0x400
c001fd4d:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fd50:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd55:	74 1d                	je     c001fd74 <Vm::faultHandler(regs*)+0x65f>
c001fd57:	51                   	push   ecx
c001fd58:	51                   	push   ecx
c001fd59:	52                   	push   edx
c001fd5a:	50                   	push   eax
c001fd5b:	e8 64 f9 ff ff       	call   c001f6c4 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fd60:	83 c4 10             	add    esp,0x10
c001fd63:	89 ea                	mov    edx,ebp
c001fd65:	ef                   	out    dx,eax
c001fd66:	85 f6                	test   esi,esi
c001fd68:	74 05                	je     c001fd6f <Vm::faultHandler(regs*)+0x65a>
c001fd6a:	83 eb 04             	sub    ebx,0x4
c001fd6d:	eb 21                	jmp    c001fd90 <Vm::faultHandler(regs*)+0x67b>
c001fd6f:	83 c3 04             	add    ebx,0x4
c001fd72:	eb 1c                	jmp    c001fd90 <Vm::faultHandler(regs*)+0x67b>
c001fd74:	51                   	push   ecx
c001fd75:	51                   	push   ecx
c001fd76:	52                   	push   edx
c001fd77:	50                   	push   eax
c001fd78:	e8 35 f9 ff ff       	call   c001f6b2 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fd7d:	83 c4 10             	add    esp,0x10
c001fd80:	89 ea                	mov    edx,ebp
c001fd82:	66 ef                	out    dx,ax
c001fd84:	85 f6                	test   esi,esi
c001fd86:	74 05                	je     c001fd8d <Vm::faultHandler(regs*)+0x678>
c001fd88:	83 eb 02             	sub    ebx,0x2
c001fd8b:	eb 03                	jmp    c001fd90 <Vm::faultHandler(regs*)+0x67b>
c001fd8d:	83 c3 02             	add    ebx,0x2
c001fd90:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fd96:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fd99:	e9 43 01 00 00       	jmp    c001fee1 <Vm::faultHandler(regs*)+0x7cc>
c001fd9e:	53                   	push   ebx
c001fd9f:	53                   	push   ebx
c001fda0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fda4:	50                   	push   eax
c001fda5:	68 55 d6 02 c0       	push   0xc002d655
c001fdaa:	e8 88 30 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fdaf:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fdb6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdba:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdbd:	e8 31 f5 ff ff       	call   c001f2f3 <Vm::inbv(unsigned short)>
c001fdc2:	0f b6 c0             	movzx  eax,al
c001fdc5:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fdc8:	eb 5e                	jmp    c001fe28 <Vm::faultHandler(regs*)+0x713>
c001fdca:	51                   	push   ecx
c001fdcb:	51                   	push   ecx
c001fdcc:	53                   	push   ebx
c001fdcd:	68 5b d6 02 c0       	push   0xc002d65b
c001fdd2:	e8 60 30 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fdd7:	83 c4 10             	add    esp,0x10
c001fdda:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fddf:	74 07                	je     c001fde8 <Vm::faultHandler(regs*)+0x6d3>
c001fde1:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fde5:	ed                   	in     eax,dx
c001fde6:	eb 14                	jmp    c001fdfc <Vm::faultHandler(regs*)+0x6e7>
c001fde8:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fdeb:	66 31 db             	xor    bx,bx
c001fdee:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fdf1:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fdf5:	66 ed                	in     ax,dx
c001fdf7:	0f b7 c0             	movzx  eax,ax
c001fdfa:	09 d8                	or     eax,ebx
c001fdfc:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fdff:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fe03:	e9 dc 00 00 00       	jmp    c001fee4 <Vm::faultHandler(regs*)+0x7cf>
c001fe08:	50                   	push   eax
c001fe09:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fe0c:	53                   	push   ebx
c001fe0d:	68 61 d6 02 c0       	push   0xc002d661
c001fe12:	e8 20 30 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fe17:	58                   	pop    eax
c001fe18:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fe1c:	5a                   	pop    edx
c001fe1d:	50                   	push   eax
c001fe1e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe22:	50                   	push   eax
c001fe23:	e8 de f4 ff ff       	call   c001f306 <Vm::outbv(unsigned short, unsigned char)>
c001fe28:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fe2c:	e9 85 00 00 00       	jmp    c001feb6 <Vm::faultHandler(regs*)+0x7a1>
c001fe31:	50                   	push   eax
c001fe32:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fe35:	53                   	push   ebx
c001fe36:	68 6a d6 02 c0       	push   0xc002d66a
c001fe3b:	e8 f7 2f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fe40:	83 c4 10             	add    esp,0x10
c001fe43:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fe47:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fe4c:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fe4f:	74 03                	je     c001fe54 <Vm::faultHandler(regs*)+0x73f>
c001fe51:	ef                   	out    dx,eax
c001fe52:	eb ab                	jmp    c001fdff <Vm::faultHandler(regs*)+0x6ea>
c001fe54:	66 ef                	out    dx,ax
c001fe56:	eb a7                	jmp    c001fdff <Vm::faultHandler(regs*)+0x6ea>
c001fe58:	55                   	push   ebp
c001fe59:	55                   	push   ebp
c001fe5a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fe5d:	68 73 d6 02 c0       	push   0xc002d673
c001fe62:	e8 d0 2f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fe67:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fe6e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fe72:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe75:	e8 79 f4 ff ff       	call   c001f2f3 <Vm::inbv(unsigned short)>
c001fe7a:	0f b6 c0             	movzx  eax,al
c001fe7d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fe80:	eb 31                	jmp    c001feb3 <Vm::faultHandler(regs*)+0x79e>
c001fe82:	56                   	push   esi
c001fe83:	56                   	push   esi
c001fe84:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fe87:	68 79 d6 02 c0       	push   0xc002d679
c001fe8c:	e8 a6 2f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fe91:	83 c4 10             	add    esp,0x10
c001fe94:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fe97:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fe9c:	74 03                	je     c001fea1 <Vm::faultHandler(regs*)+0x78c>
c001fe9e:	ed                   	in     eax,dx
c001fe9f:	eb 0d                	jmp    c001feae <Vm::faultHandler(regs*)+0x799>
c001fea1:	66 ed                	in     ax,dx
c001fea3:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fea6:	0f b7 c0             	movzx  eax,ax
c001fea9:	66 31 d2             	xor    dx,dx
c001feac:	09 d0                	or     eax,edx
c001feae:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001feb1:	eb 2e                	jmp    c001fee1 <Vm::faultHandler(regs*)+0x7cc>
c001feb3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001feb6:	83 c4 10             	add    esp,0x10
c001feb9:	eb 29                	jmp    c001fee4 <Vm::faultHandler(regs*)+0x7cf>
c001febb:	50                   	push   eax
c001febc:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001febf:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fec2:	68 88 d6 02 c0       	push   0xc002d688
c001fec7:	e8 6b 2f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fecc:	83 c4 10             	add    esp,0x10
c001fecf:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fed2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fed7:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001feda:	74 03                	je     c001fedf <Vm::faultHandler(regs*)+0x7ca>
c001fedc:	ef                   	out    dx,eax
c001fedd:	eb 02                	jmp    c001fee1 <Vm::faultHandler(regs*)+0x7cc>
c001fedf:	66 ef                	out    dx,ax
c001fee1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fee4:	b0 01                	mov    al,0x1
c001fee6:	eb 56                	jmp    c001ff3e <Vm::faultHandler(regs*)+0x829>
c001fee8:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001feec:	51                   	push   ecx
c001feed:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fef1:	51                   	push   ecx
c001fef2:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fef6:	51                   	push   ecx
c001fef7:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fefb:	51                   	push   ecx
c001fefc:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ff00:	52                   	push   edx
c001ff01:	50                   	push   eax
c001ff02:	50                   	push   eax
c001ff03:	68 91 d6 02 c0       	push   0xc002d691
c001ff08:	e8 2a 2f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ff0d:	83 c4 20             	add    esp,0x20
c001ff10:	83 ec 0c             	sub    esp,0xc
c001ff13:	6a 60                	push   0x60
c001ff15:	e8 d9 f3 ff ff       	call   c001f2f3 <Vm::inbv(unsigned short)>
c001ff1a:	83 c4 10             	add    esp,0x10
c001ff1d:	3c 1c                	cmp    al,0x1c
c001ff1f:	74 04                	je     c001ff25 <Vm::faultHandler(regs*)+0x810>
c001ff21:	3c 5a                	cmp    al,0x5a
c001ff23:	75 eb                	jne    c001ff10 <Vm::faultHandler(regs*)+0x7fb>
c001ff25:	3c 1c                	cmp    al,0x1c
c001ff27:	74 04                	je     c001ff2d <Vm::faultHandler(regs*)+0x818>
c001ff29:	3c 5a                	cmp    al,0x5a
c001ff2b:	75 0f                	jne    c001ff3c <Vm::faultHandler(regs*)+0x827>
c001ff2d:	83 ec 0c             	sub    esp,0xc
c001ff30:	6a 60                	push   0x60
c001ff32:	e8 bc f3 ff ff       	call   c001f2f3 <Vm::inbv(unsigned short)>
c001ff37:	83 c4 10             	add    esp,0x10
c001ff3a:	eb e9                	jmp    c001ff25 <Vm::faultHandler(regs*)+0x810>
c001ff3c:	31 c0                	xor    eax,eax
c001ff3e:	83 c4 1c             	add    esp,0x1c
c001ff41:	5b                   	pop    ebx
c001ff42:	5e                   	pop    esi
c001ff43:	5f                   	pop    edi
c001ff44:	5d                   	pop    ebp
c001ff45:	c3                   	ret    

c001ff46 <Vm::fpuInternalTo32(unsigned long long)>:
c001ff46:	57                   	push   edi
c001ff47:	56                   	push   esi
c001ff48:	53                   	push   ebx
c001ff49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff51:	89 d6                	mov    esi,edx
c001ff53:	89 d7                	mov    edi,edx
c001ff55:	89 c1                	mov    ecx,eax
c001ff57:	c1 ef 14             	shr    edi,0x14
c001ff5a:	89 d3                	mov    ebx,edx
c001ff5c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ff62:	31 d2                	xor    edx,edx
c001ff64:	89 f8                	mov    eax,edi
c001ff66:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ff6c:	bf ff 00 00 00       	mov    edi,0xff
c001ff71:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ff76:	83 d2 ff             	adc    edx,0xffffffff
c001ff79:	39 c7                	cmp    edi,eax
c001ff7b:	bf 00 00 00 00       	mov    edi,0x0
c001ff80:	19 d7                	sbb    edi,edx
c001ff82:	72 15                	jb     c001ff99 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ff84:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ff88:	c1 e0 17             	shl    eax,0x17
c001ff8b:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ff91:	09 f1                	or     ecx,esi
c001ff93:	09 c1                	or     ecx,eax
c001ff95:	89 cf                	mov    edi,ecx
c001ff97:	eb 02                	jmp    c001ff9b <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ff99:	31 ff                	xor    edi,edi
c001ff9b:	89 f8                	mov    eax,edi
c001ff9d:	5b                   	pop    ebx
c001ff9e:	5e                   	pop    esi
c001ff9f:	5f                   	pop    edi
c001ffa0:	c3                   	ret    

c001ffa1 <Vm::fpuInternalTo64(unsigned long long)>:
c001ffa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffa5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ffa9:	c3                   	ret    

c001ffaa <Vm::fpu32ToInternal(unsigned int)>:
c001ffaa:	57                   	push   edi
c001ffab:	31 ff                	xor    edi,edi
c001ffad:	56                   	push   esi
c001ffae:	53                   	push   ebx
c001ffaf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ffb3:	89 cb                	mov    ebx,ecx
c001ffb5:	89 ce                	mov    esi,ecx
c001ffb7:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ffbd:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ffc3:	c1 e9 17             	shr    ecx,0x17
c001ffc6:	89 f0                	mov    eax,esi
c001ffc8:	0f b6 d1             	movzx  edx,cl
c001ffcb:	81 c2 80 03 00 00    	add    edx,0x380
c001ffd1:	89 d1                	mov    ecx,edx
c001ffd3:	89 fa                	mov    edx,edi
c001ffd5:	c1 e1 14             	shl    ecx,0x14
c001ffd8:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ffdc:	c1 e0 1d             	shl    eax,0x1d
c001ffdf:	89 d7                	mov    edi,edx
c001ffe1:	89 c6                	mov    esi,eax
c001ffe3:	89 ca                	mov    edx,ecx
c001ffe5:	89 f0                	mov    eax,esi
c001ffe7:	09 fa                	or     edx,edi
c001ffe9:	09 da                	or     edx,ebx
c001ffeb:	5b                   	pop    ebx
c001ffec:	5e                   	pop    esi
c001ffed:	5f                   	pop    edi
c001ffee:	c3                   	ret    

c001ffef <Vm::fpu64ToInternal(unsigned long long)>:
c001ffef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fff3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fff7:	c3                   	ret    

c001fff8 <Vm::fpuFloatToLong(unsigned long long)>:
c001fff8:	57                   	push   edi
c001fff9:	31 c0                	xor    eax,eax
c001fffb:	56                   	push   esi
c001fffc:	31 d2                	xor    edx,edx
c001fffe:	53                   	push   ebx
c001ffff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020003:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020007:	89 d9                	mov    ecx,ebx
c0020009:	c1 e9 14             	shr    ecx,0x14
c002000c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020012:	89 cf                	mov    edi,ecx
c0020014:	81 ef ff 03 00 00    	sub    edi,0x3ff
c002001a:	78 33                	js     c002004f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c002001c:	89 d9                	mov    ecx,ebx
c002001e:	89 f0                	mov    eax,esi
c0020020:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0020026:	81 c9 00 00 10 00    	or     ecx,0x100000
c002002c:	89 ca                	mov    edx,ecx
c002002e:	b9 34 00 00 00       	mov    ecx,0x34
c0020033:	29 f9                	sub    ecx,edi
c0020035:	0f ad d0             	shrd   eax,edx,cl
c0020038:	d3 fa                	sar    edx,cl
c002003a:	f6 c1 20             	test   cl,0x20
c002003d:	74 05                	je     c0020044 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c002003f:	89 d0                	mov    eax,edx
c0020041:	c1 fa 1f             	sar    edx,0x1f
c0020044:	85 db                	test   ebx,ebx
c0020046:	79 07                	jns    c002004f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c0020048:	f7 d8                	neg    eax
c002004a:	83 d2 00             	adc    edx,0x0
c002004d:	f7 da                	neg    edx
c002004f:	5b                   	pop    ebx
c0020050:	5e                   	pop    esi
c0020051:	5f                   	pop    edi
c0020052:	c3                   	ret    

c0020053 <Vm::fpuULongToFloat(unsigned long long)>:
c0020053:	57                   	push   edi
c0020054:	31 c9                	xor    ecx,ecx
c0020056:	56                   	push   esi
c0020057:	53                   	push   ebx
c0020058:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002005c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0020060:	0f ba e7 14          	bt     edi,0x14
c0020064:	72 07                	jb     c002006d <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c0020066:	01 f6                	add    esi,esi
c0020068:	11 ff                	adc    edi,edi
c002006a:	41                   	inc    ecx
c002006b:	eb f3                	jmp    c0020060 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c002006d:	89 fa                	mov    edx,edi
c002006f:	89 f0                	mov    eax,esi
c0020071:	bb 33 04 00 00       	mov    ebx,0x433
c0020076:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c002007c:	29 cb                	sub    ebx,ecx
c002007e:	89 d9                	mov    ecx,ebx
c0020080:	5b                   	pop    ebx
c0020081:	c1 e1 14             	shl    ecx,0x14
c0020084:	5e                   	pop    esi
c0020085:	09 ca                	or     edx,ecx
c0020087:	5f                   	pop    edi
c0020088:	c3                   	ret    

c0020089 <Vm::fpuLongToFloat(long long)>:
c0020089:	56                   	push   esi
c002008a:	31 c0                	xor    eax,eax
c002008c:	53                   	push   ebx
c002008d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020091:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020095:	39 c8                	cmp    eax,ecx
c0020097:	19 d8                	sbb    eax,ebx
c0020099:	7d 04                	jge    c002009f <Vm::fpuLongToFloat(long long)+0x16>
c002009b:	31 f6                	xor    esi,esi
c002009d:	eb 0c                	jmp    c00200ab <Vm::fpuLongToFloat(long long)+0x22>
c002009f:	f7 d9                	neg    ecx
c00200a1:	be 01 00 00 00       	mov    esi,0x1
c00200a6:	83 d3 00             	adc    ebx,0x0
c00200a9:	f7 db                	neg    ebx
c00200ab:	31 c0                	xor    eax,eax
c00200ad:	0f ba e3 14          	bt     ebx,0x14
c00200b1:	72 07                	jb     c00200ba <Vm::fpuLongToFloat(long long)+0x31>
c00200b3:	01 c9                	add    ecx,ecx
c00200b5:	11 db                	adc    ebx,ebx
c00200b7:	40                   	inc    eax
c00200b8:	eb f3                	jmp    c00200ad <Vm::fpuLongToFloat(long long)+0x24>
c00200ba:	ba 33 04 00 00       	mov    edx,0x433
c00200bf:	29 c2                	sub    edx,eax
c00200c1:	89 c8                	mov    eax,ecx
c00200c3:	c1 e2 14             	shl    edx,0x14
c00200c6:	89 d9                	mov    ecx,ebx
c00200c8:	89 f3                	mov    ebx,esi
c00200ca:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00200d0:	09 ca                	or     edx,ecx
c00200d2:	84 db                	test   bl,bl
c00200d4:	74 06                	je     c00200dc <Vm::fpuLongToFloat(long long)+0x53>
c00200d6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00200dc:	5b                   	pop    ebx
c00200dd:	5e                   	pop    esi
c00200de:	c3                   	ret    

c00200df <Vm::fpuGet0()>:
c00200df:	31 c0                	xor    eax,eax
c00200e1:	31 d2                	xor    edx,edx
c00200e3:	c3                   	ret    

c00200e4 <Vm::fpuGet1()>:
c00200e4:	b8 01 00 00 00       	mov    eax,0x1
c00200e9:	31 d2                	xor    edx,edx
c00200eb:	c3                   	ret    

c00200ec <Vm::fpuGetPi()>:
c00200ec:	b8 03 00 00 00       	mov    eax,0x3
c00200f1:	31 d2                	xor    edx,edx
c00200f3:	c3                   	ret    

c00200f4 <Vm::fpuGetLog2E()>:
c00200f4:	83 ec 18             	sub    esp,0x18
c00200f7:	68 f0 d6 02 c0       	push   0xc002d6f0
c00200fc:	e8 a4 a8 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0020101:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020106:	31 d2                	xor    edx,edx
c0020108:	83 c4 1c             	add    esp,0x1c
c002010b:	c3                   	ret    

c002010c <Vm::fpuGetLogE2()>:
c002010c:	83 ec 18             	sub    esp,0x18
c002010f:	68 fc d6 02 c0       	push   0xc002d6fc
c0020114:	e8 8c a8 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0020119:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002011e:	31 d2                	xor    edx,edx
c0020120:	83 c4 1c             	add    esp,0x1c
c0020123:	c3                   	ret    

c0020124 <Vm::fpuGetLog210()>:
c0020124:	83 ec 18             	sub    esp,0x18
c0020127:	68 08 d7 02 c0       	push   0xc002d708
c002012c:	e8 74 a8 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0020131:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020136:	31 d2                	xor    edx,edx
c0020138:	83 c4 1c             	add    esp,0x1c
c002013b:	c3                   	ret    

c002013c <Vm::fpuGetLog102()>:
c002013c:	83 ec 18             	sub    esp,0x18
c002013f:	68 15 d7 02 c0       	push   0xc002d715
c0020144:	e8 5c a8 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0020149:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002014e:	31 d2                	xor    edx,edx
c0020150:	83 c4 1c             	add    esp,0x1c
c0020153:	c3                   	ret    

c0020154 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0020154:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020158:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002015c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020160:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0020164:	0f 92 c0             	setb   al
c0020167:	c3                   	ret    

c0020168 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0020168:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002016c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020170:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0020174:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0020178:	09 c2                	or     edx,eax
c002017a:	0f 94 c0             	sete   al
c002017d:	c3                   	ret    

c002017e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c002017e:	57                   	push   edi
c002017f:	56                   	push   esi
c0020180:	53                   	push   ebx
c0020181:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020185:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020189:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002018d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020191:	57                   	push   edi
c0020192:	56                   	push   esi
c0020193:	53                   	push   ebx
c0020194:	51                   	push   ecx
c0020195:	e8 ce ff ff ff       	call   c0020168 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c002019a:	83 c4 10             	add    esp,0x10
c002019d:	88 c2                	mov    dl,al
c002019f:	31 c0                	xor    eax,eax
c00201a1:	84 d2                	test   dl,dl
c00201a3:	75 0c                	jne    c00201b1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c00201a5:	57                   	push   edi
c00201a6:	56                   	push   esi
c00201a7:	53                   	push   ebx
c00201a8:	51                   	push   ecx
c00201a9:	e8 a6 ff ff ff       	call   c0020154 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00201ae:	83 c4 10             	add    esp,0x10
c00201b1:	83 e0 01             	and    eax,0x1
c00201b4:	5b                   	pop    ebx
c00201b5:	88 c1                	mov    cl,al
c00201b7:	83 e2 01             	and    edx,0x1
c00201ba:	a0 e1 29 03 c0       	mov    al,ds:0xc00329e1
c00201bf:	c1 e2 06             	shl    edx,0x6
c00201c2:	83 e0 ba             	and    eax,0xffffffba
c00201c5:	5e                   	pop    esi
c00201c6:	09 c8                	or     eax,ecx
c00201c8:	5f                   	pop    edi
c00201c9:	09 d0                	or     eax,edx
c00201cb:	a2 e1 29 03 c0       	mov    ds:0xc00329e1,al
c00201d0:	c3                   	ret    

c00201d1 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00201d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00201d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00201d9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00201dd:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00201e1:	c3                   	ret    

c00201e2 <Vm::fpuAbs(unsigned long long)>:
c00201e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00201ea:	c3                   	ret    

c00201eb <Vm::fpuChs(unsigned long long)>:
c00201eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00201f3:	f7 d8                	neg    eax
c00201f5:	83 d2 00             	adc    edx,0x0
c00201f8:	f7 da                	neg    edx
c00201fa:	c3                   	ret    

c00201fb <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00201fb:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00201ff:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0020204:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0020208:	eb c7                	jmp    c00201d1 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c002020a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c002020a:	53                   	push   ebx
c002020b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002020f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020213:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020217:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002021b:	0f af ca             	imul   ecx,edx
c002021e:	0f af d8             	imul   ebx,eax
c0020221:	f7 e2                	mul    edx
c0020223:	01 d9                	add    ecx,ebx
c0020225:	5b                   	pop    ebx
c0020226:	01 ca                	add    edx,ecx
c0020228:	c3                   	ret    

c0020229 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0020229:	83 ec 0c             	sub    esp,0xc
c002022c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002023c:	e8 b3 74 00 00       	call   c00276f4 <__udivdi3>
c0020241:	83 c4 1c             	add    esp,0x1c
c0020244:	c3                   	ret    

c0020245 <Vm::fpuSquare(unsigned long long)>:
c0020245:	50                   	push   eax
c0020246:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002024a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002024e:	52                   	push   edx
c002024f:	50                   	push   eax
c0020250:	52                   	push   edx
c0020251:	50                   	push   eax
c0020252:	e8 b3 ff ff ff       	call   c002020a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020257:	83 c4 14             	add    esp,0x14
c002025a:	c3                   	ret    

c002025b <Vm::fpuGetReg(int)>:
c002025b:	83 ec 0c             	sub    esp,0xc
c002025e:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0020263:	76 10                	jbe    c0020275 <Vm::fpuGetReg(int)+0x1a>
c0020265:	83 ec 0c             	sub    esp,0xc
c0020268:	68 22 d7 02 c0       	push   0xc002d722
c002026d:	e8 33 a7 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0020272:	83 c4 10             	add    esp,0x10
c0020275:	a0 e1 29 03 c0       	mov    al,ds:0xc00329e1
c002027a:	b9 08 00 00 00       	mov    ecx,0x8
c002027f:	c0 e8 03             	shr    al,0x3
c0020282:	83 e0 07             	and    eax,0x7
c0020285:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020289:	99                   	cdq    
c002028a:	f7 f9                	idiv   ecx
c002028c:	8b 04 d5 e4 29 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd61c]
c0020293:	8b 14 d5 e8 29 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd618]
c002029a:	83 c4 0c             	add    esp,0xc
c002029d:	c3                   	ret    

c002029e <Vm::fpuSetReg(int, unsigned long long)>:
c002029e:	57                   	push   edi
c002029f:	56                   	push   esi
c00202a0:	52                   	push   edx
c00202a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00202a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00202a9:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00202ae:	76 10                	jbe    c00202c0 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c00202b0:	83 ec 0c             	sub    esp,0xc
c00202b3:	68 35 d7 02 c0       	push   0xc002d735
c00202b8:	e8 e8 a6 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c00202bd:	83 c4 10             	add    esp,0x10
c00202c0:	a0 e1 29 03 c0       	mov    al,ds:0xc00329e1
c00202c5:	b9 08 00 00 00       	mov    ecx,0x8
c00202ca:	c0 e8 03             	shr    al,0x3
c00202cd:	83 e0 07             	and    eax,0x7
c00202d0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00202d4:	99                   	cdq    
c00202d5:	f7 f9                	idiv   ecx
c00202d7:	89 34 d5 e4 29 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd61c],esi
c00202de:	89 3c d5 e8 29 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd618],edi
c00202e5:	58                   	pop    eax
c00202e6:	5e                   	pop    esi
c00202e7:	5f                   	pop    edi
c00202e8:	c3                   	ret    

c00202e9 <Vm::fpuPush(unsigned long long)>:
c00202e9:	a0 e1 29 03 c0       	mov    al,ds:0xc00329e1
c00202ee:	c0 e8 03             	shr    al,0x3
c00202f1:	83 e0 07             	and    eax,0x7
c00202f4:	83 c0 07             	add    eax,0x7
c00202f7:	88 c2                	mov    dl,al
c00202f9:	83 e0 07             	and    eax,0x7
c00202fc:	83 e2 07             	and    edx,0x7
c00202ff:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0020306:	8a 15 e1 29 03 c0    	mov    dl,BYTE PTR ds:0xc00329e1
c002030c:	83 e2 c7             	and    edx,0xffffffc7
c002030f:	09 ca                	or     edx,ecx
c0020311:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020315:	88 15 e1 29 03 c0    	mov    BYTE PTR ds:0xc00329e1,dl
c002031b:	89 0c c5 e8 29 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd618],ecx
c0020322:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020326:	89 14 c5 e4 29 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd61c],edx
c002032d:	a1 24 2a 03 c0       	mov    eax,ds:0xc0032a24
c0020332:	83 f8 08             	cmp    eax,0x8
c0020335:	75 08                	jne    c002033f <Vm::fpuPush(unsigned long long)+0x56>
c0020337:	80 0d e0 29 03 c0 40 	or     BYTE PTR ds:0xc00329e0,0x40
c002033e:	c3                   	ret    
c002033f:	40                   	inc    eax
c0020340:	a3 24 2a 03 c0       	mov    ds:0xc0032a24,eax
c0020345:	c3                   	ret    

c0020346 <Vm::fpuPop()>:
c0020346:	8a 0d e1 29 03 c0    	mov    cl,BYTE PTR ds:0xc00329e1
c002034c:	53                   	push   ebx
c002034d:	c0 e9 03             	shr    cl,0x3
c0020350:	8a 1d e1 29 03 c0    	mov    bl,BYTE PTR ds:0xc00329e1
c0020356:	83 e1 07             	and    ecx,0x7
c0020359:	83 e3 c7             	and    ebx,0xffffffc7
c002035c:	8b 04 cd e4 29 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd61c]
c0020363:	8b 14 cd e8 29 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd618]
c002036a:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0020371:	83 e1 38             	and    ecx,0x38
c0020374:	09 d9                	or     ecx,ebx
c0020376:	88 0d e1 29 03 c0    	mov    BYTE PTR ds:0xc00329e1,cl
c002037c:	8b 0d 24 2a 03 c0    	mov    ecx,DWORD PTR ds:0xc0032a24
c0020382:	85 c9                	test   ecx,ecx
c0020384:	74 09                	je     c002038f <Vm::fpuPop()+0x49>
c0020386:	49                   	dec    ecx
c0020387:	89 0d 24 2a 03 c0    	mov    DWORD PTR ds:0xc0032a24,ecx
c002038d:	eb 07                	jmp    c0020396 <Vm::fpuPop()+0x50>
c002038f:	80 0d e0 29 03 c0 40 	or     BYTE PTR ds:0xc00329e0,0x40
c0020396:	5b                   	pop    ebx
c0020397:	c3                   	ret    

c0020398 <Vm::x87Handler(regs*)>:
c0020398:	55                   	push   ebp
c0020399:	57                   	push   edi
c002039a:	56                   	push   esi
c002039b:	53                   	push   ebx
c002039c:	83 ec 1c             	sub    esp,0x1c
c002039f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00203a3:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00203a8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00203ab:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00203b3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00203b7:	50                   	push   eax
c00203b8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00203bc:	50                   	push   eax
c00203bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00203c1:	50                   	push   eax
c00203c2:	53                   	push   ebx
c00203c3:	e8 aa 9c ff ff       	call   c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00203c8:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	89 c6                	mov    esi,eax
c00203d0:	80 fa d9             	cmp    dl,0xd9
c00203d3:	0f 85 52 01 00 00    	jne    c002052b <Vm::x87Handler(regs*)+0x193>
c00203d9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00203dd:	8d 50 20             	lea    edx,[eax+0x20]
c00203e0:	80 fa 0e             	cmp    dl,0xe
c00203e3:	0f 87 86 00 00 00    	ja     c002046f <Vm::x87Handler(regs*)+0xd7>
c00203e9:	0f b6 d2             	movzx  edx,dl
c00203ec:	ff 24 95 48 d7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd28b8]
c00203f3:	e8 e7 fc ff ff       	call   c00200df <Vm::fpuGet0()>
c00203f8:	eb 05                	jmp    c00203ff <Vm::x87Handler(regs*)+0x67>
c00203fa:	e8 e5 fc ff ff       	call   c00200e4 <Vm::fpuGet1()>
c00203ff:	57                   	push   edi
c0020400:	57                   	push   edi
c0020401:	52                   	push   edx
c0020402:	50                   	push   eax
c0020403:	e8 e1 fe ff ff       	call   c00202e9 <Vm::fpuPush(unsigned long long)>
c0020408:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002040c:	83 c4 10             	add    esp,0x10
c002040f:	b0 01                	mov    al,0x1
c0020411:	e9 e3 09 00 00       	jmp    c0020df9 <Vm::x87Handler(regs*)+0xa61>
c0020416:	83 ec 0c             	sub    esp,0xc
c0020419:	6a 00                	push   0x0
c002041b:	e8 3b fe ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020420:	59                   	pop    ecx
c0020421:	5e                   	pop    esi
c0020422:	52                   	push   edx
c0020423:	50                   	push   eax
c0020424:	e8 c2 fd ff ff       	call   c00201eb <Vm::fpuChs(unsigned long long)>
c0020429:	eb 13                	jmp    c002043e <Vm::x87Handler(regs*)+0xa6>
c002042b:	83 ec 0c             	sub    esp,0xc
c002042e:	6a 00                	push   0x0
c0020430:	e8 26 fe ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020435:	5f                   	pop    edi
c0020436:	5d                   	pop    ebp
c0020437:	52                   	push   edx
c0020438:	50                   	push   eax
c0020439:	e8 a4 fd ff ff       	call   c00201e2 <Vm::fpuAbs(unsigned long long)>
c002043e:	83 c4 0c             	add    esp,0xc
c0020441:	52                   	push   edx
c0020442:	50                   	push   eax
c0020443:	6a 00                	push   0x0
c0020445:	e8 54 fe ff ff       	call   c002029e <Vm::fpuSetReg(int, unsigned long long)>
c002044a:	eb bc                	jmp    c0020408 <Vm::x87Handler(regs*)+0x70>
c002044c:	e8 d3 fc ff ff       	call   c0020124 <Vm::fpuGetLog210()>
c0020451:	eb ac                	jmp    c00203ff <Vm::x87Handler(regs*)+0x67>
c0020453:	e8 9c fc ff ff       	call   c00200f4 <Vm::fpuGetLog2E()>
c0020458:	eb a5                	jmp    c00203ff <Vm::x87Handler(regs*)+0x67>
c002045a:	e8 8d fc ff ff       	call   c00200ec <Vm::fpuGetPi()>
c002045f:	eb 9e                	jmp    c00203ff <Vm::x87Handler(regs*)+0x67>
c0020461:	e8 d6 fc ff ff       	call   c002013c <Vm::fpuGetLog102()>
c0020466:	eb 97                	jmp    c00203ff <Vm::x87Handler(regs*)+0x67>
c0020468:	e8 9f fc ff ff       	call   c002010c <Vm::fpuGetLogE2()>
c002046d:	eb 90                	jmp    c00203ff <Vm::x87Handler(regs*)+0x67>
c002046f:	8d 50 40             	lea    edx,[eax+0x40]
c0020472:	80 fa 07             	cmp    dl,0x7
c0020475:	77 15                	ja     c002048c <Vm::x87Handler(regs*)+0xf4>
c0020477:	83 ec 0c             	sub    esp,0xc
c002047a:	2d c0 00 00 00       	sub    eax,0xc0
c002047f:	50                   	push   eax
c0020480:	e8 d6 fd ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020485:	59                   	pop    ecx
c0020486:	5e                   	pop    esi
c0020487:	e9 75 ff ff ff       	jmp    c0020401 <Vm::x87Handler(regs*)+0x69>
c002048c:	8d 50 38             	lea    edx,[eax+0x38]
c002048f:	80 fa 07             	cmp    dl,0x7
c0020492:	77 3c                	ja     c00204d0 <Vm::x87Handler(regs*)+0x138>
c0020494:	83 ec 0c             	sub    esp,0xc
c0020497:	2d c8 00 00 00       	sub    eax,0xc8
c002049c:	50                   	push   eax
c002049d:	e8 b9 fd ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00204a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204a9:	89 c6                	mov    esi,eax
c00204ab:	89 d7                	mov    edi,edx
c00204ad:	e8 a9 fd ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00204b2:	83 c4 0c             	add    esp,0xc
c00204b5:	52                   	push   edx
c00204b6:	50                   	push   eax
c00204b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204bb:	2d c8 00 00 00       	sub    eax,0xc8
c00204c0:	50                   	push   eax
c00204c1:	e8 d8 fd ff ff       	call   c002029e <Vm::fpuSetReg(int, unsigned long long)>
c00204c6:	83 c4 0c             	add    esp,0xc
c00204c9:	57                   	push   edi
c00204ca:	56                   	push   esi
c00204cb:	e9 73 ff ff ff       	jmp    c0020443 <Vm::x87Handler(regs*)+0xab>
c00204d0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204d4:	84 d2                	test   dl,dl
c00204d6:	75 0f                	jne    c00204e7 <Vm::x87Handler(regs*)+0x14f>
c00204d8:	83 ec 0c             	sub    esp,0xc
c00204db:	ff 36                	push   DWORD PTR [esi]
c00204dd:	e8 c8 fa ff ff       	call   c001ffaa <Vm::fpu32ToInternal(unsigned int)>
c00204e2:	e9 bf 00 00 00       	jmp    c00205a6 <Vm::x87Handler(regs*)+0x20e>
c00204e7:	80 fa 03             	cmp    dl,0x3
c00204ea:	75 13                	jne    c00204ff <Vm::x87Handler(regs*)+0x167>
c00204ec:	e8 55 fe ff ff       	call   c0020346 <Vm::fpuPop()>
c00204f1:	55                   	push   ebp
c00204f2:	55                   	push   ebp
c00204f3:	52                   	push   edx
c00204f4:	50                   	push   eax
c00204f5:	e8 4c fa ff ff       	call   c001ff46 <Vm::fpuInternalTo32(unsigned long long)>
c00204fa:	e9 88 00 00 00       	jmp    c0020587 <Vm::x87Handler(regs*)+0x1ef>
c00204ff:	80 fa 05             	cmp    dl,0x5
c0020502:	75 0e                	jne    c0020512 <Vm::x87Handler(regs*)+0x17a>
c0020504:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020507:	66 a3 e2 29 03 c0    	mov    ds:0xc00329e2,ax
c002050d:	e9 df 00 00 00       	jmp    c00205f1 <Vm::x87Handler(regs*)+0x259>
c0020512:	31 c0                	xor    eax,eax
c0020514:	80 fa 07             	cmp    dl,0x7
c0020517:	0f 85 dc 08 00 00    	jne    c0020df9 <Vm::x87Handler(regs*)+0xa61>
c002051d:	66 a1 e2 29 03 c0    	mov    ax,ds:0xc00329e2
c0020523:	66 89 06             	mov    WORD PTR [esi],ax
c0020526:	e9 c6 00 00 00       	jmp    c00205f1 <Vm::x87Handler(regs*)+0x259>
c002052b:	80 fa d8             	cmp    dl,0xd8
c002052e:	0f 84 c9 00 00 00    	je     c00205fd <Vm::x87Handler(regs*)+0x265>
c0020534:	80 fa dc             	cmp    dl,0xdc
c0020537:	0f 84 0d 02 00 00    	je     c002074a <Vm::x87Handler(regs*)+0x3b2>
c002053d:	80 fa de             	cmp    dl,0xde
c0020540:	0f 84 cd 02 00 00    	je     c0020813 <Vm::x87Handler(regs*)+0x47b>
c0020546:	80 fa dd             	cmp    dl,0xdd
c0020549:	0f 84 5f 04 00 00    	je     c00209ae <Vm::x87Handler(regs*)+0x616>
c002054f:	80 fa da             	cmp    dl,0xda
c0020552:	0f 84 24 05 00 00    	je     c0020a7c <Vm::x87Handler(regs*)+0x6e4>
c0020558:	80 fa df             	cmp    dl,0xdf
c002055b:	0f 84 68 05 00 00    	je     c0020ac9 <Vm::x87Handler(regs*)+0x731>
c0020561:	31 c0                	xor    eax,eax
c0020563:	80 fa db             	cmp    dl,0xdb
c0020566:	0f 85 8d 08 00 00    	jne    c0020df9 <Vm::x87Handler(regs*)+0xa61>
c002056c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020570:	80 fa 03             	cmp    dl,0x3
c0020573:	0f 85 70 06 00 00    	jne    c0020be9 <Vm::x87Handler(regs*)+0x851>
c0020579:	e8 c8 fd ff ff       	call   c0020346 <Vm::fpuPop()>
c002057e:	55                   	push   ebp
c002057f:	55                   	push   ebp
c0020580:	52                   	push   edx
c0020581:	50                   	push   eax
c0020582:	e8 71 fa ff ff       	call   c001fff8 <Vm::fpuFloatToLong(unsigned long long)>
c0020587:	83 c4 10             	add    esp,0x10
c002058a:	89 06                	mov    DWORD PTR [esi],eax
c002058c:	eb 63                	jmp    c00205f1 <Vm::x87Handler(regs*)+0x259>
c002058e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020592:	84 d2                	test   dl,dl
c0020594:	0f 85 e6 05 00 00    	jne    c0020b80 <Vm::x87Handler(regs*)+0x7e8>
c002059a:	57                   	push   edi
c002059b:	57                   	push   edi
c002059c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002059f:	ff 36                	push   DWORD PTR [esi]
c00205a1:	e8 49 fa ff ff       	call   c001ffef <Vm::fpu64ToInternal(unsigned long long)>
c00205a6:	5e                   	pop    esi
c00205a7:	5f                   	pop    edi
c00205a8:	52                   	push   edx
c00205a9:	50                   	push   eax
c00205aa:	e8 3a fd ff ff       	call   c00202e9 <Vm::fpuPush(unsigned long long)>
c00205af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205b3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00205b6:	e9 51 fe ff ff       	jmp    c002040c <Vm::x87Handler(regs*)+0x74>
c00205bb:	80 fa 03             	cmp    dl,0x3
c00205be:	0f 85 d7 06 00 00    	jne    c0020c9b <Vm::x87Handler(regs*)+0x903>
c00205c4:	57                   	push   edi
c00205c5:	57                   	push   edi
c00205c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205c9:	ff 36                	push   DWORD PTR [esi]
c00205cb:	e8 1f fa ff ff       	call   c001ffef <Vm::fpu64ToInternal(unsigned long long)>
c00205d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205d7:	89 c6                	mov    esi,eax
c00205d9:	89 d7                	mov    edi,edx
c00205db:	e8 7b fc ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00205e0:	57                   	push   edi
c00205e1:	56                   	push   esi
c00205e2:	52                   	push   edx
c00205e3:	50                   	push   eax
c00205e4:	e8 95 fb ff ff       	call   c002017e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00205e9:	83 c4 20             	add    esp,0x20
c00205ec:	e8 55 fd ff ff       	call   c0020346 <Vm::fpuPop()>
c00205f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205f5:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00205f8:	e9 12 fe ff ff       	jmp    c002040f <Vm::x87Handler(regs*)+0x77>
c00205fd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020601:	8d 50 40             	lea    edx,[eax+0x40]
c0020604:	80 fa 07             	cmp    dl,0x7
c0020607:	77 29                	ja     c0020632 <Vm::x87Handler(regs*)+0x29a>
c0020609:	83 ec 0c             	sub    esp,0xc
c002060c:	2d c0 00 00 00       	sub    eax,0xc0
c0020611:	50                   	push   eax
c0020612:	e8 44 fc ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020617:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002061e:	89 c6                	mov    esi,eax
c0020620:	89 d7                	mov    edi,edx
c0020622:	e8 34 fc ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020627:	57                   	push   edi
c0020628:	56                   	push   esi
c0020629:	52                   	push   edx
c002062a:	50                   	push   eax
c002062b:	e8 a1 fb ff ff       	call   c00201d1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020630:	eb 2f                	jmp    c0020661 <Vm::x87Handler(regs*)+0x2c9>
c0020632:	8d 50 38             	lea    edx,[eax+0x38]
c0020635:	80 fa 07             	cmp    dl,0x7
c0020638:	77 2f                	ja     c0020669 <Vm::x87Handler(regs*)+0x2d1>
c002063a:	83 ec 0c             	sub    esp,0xc
c002063d:	2d c8 00 00 00       	sub    eax,0xc8
c0020642:	50                   	push   eax
c0020643:	e8 13 fc ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020648:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002064f:	89 c6                	mov    esi,eax
c0020651:	89 d7                	mov    edi,edx
c0020653:	e8 03 fc ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020658:	57                   	push   edi
c0020659:	56                   	push   esi
c002065a:	52                   	push   edx
c002065b:	50                   	push   eax
c002065c:	e8 a9 fb ff ff       	call   c002020a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020661:	83 c4 1c             	add    esp,0x1c
c0020664:	e9 d8 fd ff ff       	jmp    c0020441 <Vm::x87Handler(regs*)+0xa9>
c0020669:	8d 50 30             	lea    edx,[eax+0x30]
c002066c:	80 fa 07             	cmp    dl,0x7
c002066f:	77 0d                	ja     c002067e <Vm::x87Handler(regs*)+0x2e6>
c0020671:	83 ec 0c             	sub    esp,0xc
c0020674:	2d d0 00 00 00       	sub    eax,0xd0
c0020679:	e9 99 03 00 00       	jmp    c0020a17 <Vm::x87Handler(regs*)+0x67f>
c002067e:	8d 50 28             	lea    edx,[eax+0x28]
c0020681:	80 fa 07             	cmp    dl,0x7
c0020684:	77 0d                	ja     c0020693 <Vm::x87Handler(regs*)+0x2fb>
c0020686:	83 ec 0c             	sub    esp,0xc
c0020689:	2d d8 00 00 00       	sub    eax,0xd8
c002068e:	e9 c0 03 00 00       	jmp    c0020a53 <Vm::x87Handler(regs*)+0x6bb>
c0020693:	8d 50 20             	lea    edx,[eax+0x20]
c0020696:	80 fa 07             	cmp    dl,0x7
c0020699:	77 1b                	ja     c00206b6 <Vm::x87Handler(regs*)+0x31e>
c002069b:	83 ec 0c             	sub    esp,0xc
c002069e:	2d e0 00 00 00       	sub    eax,0xe0
c00206a3:	50                   	push   eax
c00206a4:	e8 b2 fb ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00206a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206b0:	89 c6                	mov    esi,eax
c00206b2:	89 d7                	mov    edi,edx
c00206b4:	eb 22                	jmp    c00206d8 <Vm::x87Handler(regs*)+0x340>
c00206b6:	8d 50 18             	lea    edx,[eax+0x18]
c00206b9:	80 fa 07             	cmp    dl,0x7
c00206bc:	77 2d                	ja     c00206eb <Vm::x87Handler(regs*)+0x353>
c00206be:	83 ec 0c             	sub    esp,0xc
c00206c1:	6a 00                	push   0x0
c00206c3:	e8 93 fb ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00206c8:	89 c6                	mov    esi,eax
c00206ca:	89 d7                	mov    edi,edx
c00206cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206d0:	2d e8 00 00 00       	sub    eax,0xe8
c00206d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00206d8:	e8 7e fb ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00206dd:	57                   	push   edi
c00206de:	56                   	push   esi
c00206df:	52                   	push   edx
c00206e0:	50                   	push   eax
c00206e1:	e8 15 fb ff ff       	call   c00201fb <Vm::fpuSub(unsigned long long, unsigned long long)>
c00206e6:	e9 76 ff ff ff       	jmp    c0020661 <Vm::x87Handler(regs*)+0x2c9>
c00206eb:	8d 50 10             	lea    edx,[eax+0x10]
c00206ee:	80 fa 07             	cmp    dl,0x7
c00206f1:	77 1b                	ja     c002070e <Vm::x87Handler(regs*)+0x376>
c00206f3:	83 ec 0c             	sub    esp,0xc
c00206f6:	2d f0 00 00 00       	sub    eax,0xf0
c00206fb:	50                   	push   eax
c00206fc:	e8 5a fb ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020701:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020708:	89 c6                	mov    esi,eax
c002070a:	89 d7                	mov    edi,edx
c002070c:	eb 22                	jmp    c0020730 <Vm::x87Handler(regs*)+0x398>
c002070e:	3c f7                	cmp    al,0xf7
c0020710:	0f 86 d1 03 00 00    	jbe    c0020ae7 <Vm::x87Handler(regs*)+0x74f>
c0020716:	83 ec 0c             	sub    esp,0xc
c0020719:	6a 00                	push   0x0
c002071b:	e8 3b fb ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020720:	89 c6                	mov    esi,eax
c0020722:	89 d7                	mov    edi,edx
c0020724:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020728:	2d f8 00 00 00       	sub    eax,0xf8
c002072d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020730:	e8 26 fb ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020735:	57                   	push   edi
c0020736:	56                   	push   esi
c0020737:	52                   	push   edx
c0020738:	50                   	push   eax
c0020739:	e8 eb fa ff ff       	call   c0020229 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002073e:	83 c4 1c             	add    esp,0x1c
c0020741:	52                   	push   edx
c0020742:	50                   	push   eax
c0020743:	6a 00                	push   0x0
c0020745:	e9 51 02 00 00       	jmp    c002099b <Vm::x87Handler(regs*)+0x603>
c002074a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002074e:	8d 50 40             	lea    edx,[eax+0x40]
c0020751:	80 fa 07             	cmp    dl,0x7
c0020754:	77 37                	ja     c002078d <Vm::x87Handler(regs*)+0x3f5>
c0020756:	83 ec 0c             	sub    esp,0xc
c0020759:	2d c0 00 00 00       	sub    eax,0xc0
c002075e:	50                   	push   eax
c002075f:	e8 f7 fa ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020764:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002076b:	89 c6                	mov    esi,eax
c002076d:	89 d7                	mov    edi,edx
c002076f:	e8 e7 fa ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020774:	57                   	push   edi
c0020775:	56                   	push   esi
c0020776:	52                   	push   edx
c0020777:	50                   	push   eax
c0020778:	e8 54 fa ff ff       	call   c00201d1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002077d:	83 c4 1c             	add    esp,0x1c
c0020780:	52                   	push   edx
c0020781:	50                   	push   eax
c0020782:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020786:	2d c0 00 00 00       	sub    eax,0xc0
c002078b:	eb 3d                	jmp    c00207ca <Vm::x87Handler(regs*)+0x432>
c002078d:	8d 50 38             	lea    edx,[eax+0x38]
c0020790:	80 fa 07             	cmp    dl,0x7
c0020793:	77 3b                	ja     c00207d0 <Vm::x87Handler(regs*)+0x438>
c0020795:	83 ec 0c             	sub    esp,0xc
c0020798:	2d c8 00 00 00       	sub    eax,0xc8
c002079d:	50                   	push   eax
c002079e:	e8 b8 fa ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00207a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207aa:	89 c6                	mov    esi,eax
c00207ac:	89 d7                	mov    edi,edx
c00207ae:	e8 a8 fa ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00207b3:	57                   	push   edi
c00207b4:	56                   	push   esi
c00207b5:	52                   	push   edx
c00207b6:	50                   	push   eax
c00207b7:	e8 4e fa ff ff       	call   c002020a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00207bc:	83 c4 1c             	add    esp,0x1c
c00207bf:	52                   	push   edx
c00207c0:	50                   	push   eax
c00207c1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207c5:	2d c8 00 00 00       	sub    eax,0xc8
c00207ca:	50                   	push   eax
c00207cb:	e9 75 fc ff ff       	jmp    c0020445 <Vm::x87Handler(regs*)+0xad>
c00207d0:	83 c0 18             	add    eax,0x18
c00207d3:	3c 07                	cmp    al,0x7
c00207d5:	0f 87 3b 04 00 00    	ja     c0020c16 <Vm::x87Handler(regs*)+0x87e>
c00207db:	83 ec 0c             	sub    esp,0xc
c00207de:	6a 00                	push   0x0
c00207e0:	e8 76 fa ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00207e5:	89 c6                	mov    esi,eax
c00207e7:	89 d7                	mov    edi,edx
c00207e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207ed:	2d e8 00 00 00       	sub    eax,0xe8
c00207f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00207f5:	e8 61 fa ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00207fa:	57                   	push   edi
c00207fb:	56                   	push   esi
c00207fc:	52                   	push   edx
c00207fd:	50                   	push   eax
c00207fe:	e8 f8 f9 ff ff       	call   c00201fb <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020803:	83 c4 1c             	add    esp,0x1c
c0020806:	52                   	push   edx
c0020807:	50                   	push   eax
c0020808:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002080c:	2d e8 00 00 00       	sub    eax,0xe8
c0020811:	eb b7                	jmp    c00207ca <Vm::x87Handler(regs*)+0x432>
c0020813:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020817:	8d 50 40             	lea    edx,[eax+0x40]
c002081a:	80 fa 07             	cmp    dl,0x7
c002081d:	77 3a                	ja     c0020859 <Vm::x87Handler(regs*)+0x4c1>
c002081f:	83 ec 0c             	sub    esp,0xc
c0020822:	2d c0 00 00 00       	sub    eax,0xc0
c0020827:	50                   	push   eax
c0020828:	e8 2e fa ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c002082d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020834:	89 c6                	mov    esi,eax
c0020836:	89 d7                	mov    edi,edx
c0020838:	e8 1e fa ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c002083d:	57                   	push   edi
c002083e:	56                   	push   esi
c002083f:	52                   	push   edx
c0020840:	50                   	push   eax
c0020841:	e8 8b f9 ff ff       	call   c00201d1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020846:	83 c4 1c             	add    esp,0x1c
c0020849:	52                   	push   edx
c002084a:	50                   	push   eax
c002084b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002084f:	2d c0 00 00 00       	sub    eax,0xc0
c0020854:	e9 9e 01 00 00       	jmp    c00209f7 <Vm::x87Handler(regs*)+0x65f>
c0020859:	8d 50 20             	lea    edx,[eax+0x20]
c002085c:	80 fa 07             	cmp    dl,0x7
c002085f:	77 3a                	ja     c002089b <Vm::x87Handler(regs*)+0x503>
c0020861:	83 ec 0c             	sub    esp,0xc
c0020864:	2d e0 00 00 00       	sub    eax,0xe0
c0020869:	50                   	push   eax
c002086a:	e8 ec f9 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c002086f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020876:	89 c6                	mov    esi,eax
c0020878:	89 d7                	mov    edi,edx
c002087a:	e8 dc f9 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c002087f:	57                   	push   edi
c0020880:	56                   	push   esi
c0020881:	52                   	push   edx
c0020882:	50                   	push   eax
c0020883:	e8 73 f9 ff ff       	call   c00201fb <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020888:	83 c4 1c             	add    esp,0x1c
c002088b:	52                   	push   edx
c002088c:	50                   	push   eax
c002088d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020891:	2d e0 00 00 00       	sub    eax,0xe0
c0020896:	e9 5c 01 00 00       	jmp    c00209f7 <Vm::x87Handler(regs*)+0x65f>
c002089b:	8d 50 18             	lea    edx,[eax+0x18]
c002089e:	80 fa 07             	cmp    dl,0x7
c00208a1:	77 3b                	ja     c00208de <Vm::x87Handler(regs*)+0x546>
c00208a3:	83 ec 0c             	sub    esp,0xc
c00208a6:	6a 00                	push   0x0
c00208a8:	e8 ae f9 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00208ad:	89 c6                	mov    esi,eax
c00208af:	89 d7                	mov    edi,edx
c00208b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208b5:	2d e8 00 00 00       	sub    eax,0xe8
c00208ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00208bd:	e8 99 f9 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00208c2:	57                   	push   edi
c00208c3:	56                   	push   esi
c00208c4:	52                   	push   edx
c00208c5:	50                   	push   eax
c00208c6:	e8 30 f9 ff ff       	call   c00201fb <Vm::fpuSub(unsigned long long, unsigned long long)>
c00208cb:	83 c4 1c             	add    esp,0x1c
c00208ce:	52                   	push   edx
c00208cf:	50                   	push   eax
c00208d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208d4:	2d e8 00 00 00       	sub    eax,0xe8
c00208d9:	e9 19 01 00 00       	jmp    c00209f7 <Vm::x87Handler(regs*)+0x65f>
c00208de:	8d 50 38             	lea    edx,[eax+0x38]
c00208e1:	80 fa 07             	cmp    dl,0x7
c00208e4:	77 37                	ja     c002091d <Vm::x87Handler(regs*)+0x585>
c00208e6:	83 ec 0c             	sub    esp,0xc
c00208e9:	2d c8 00 00 00       	sub    eax,0xc8
c00208ee:	50                   	push   eax
c00208ef:	e8 67 f9 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00208f4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00208fb:	89 c6                	mov    esi,eax
c00208fd:	89 d7                	mov    edi,edx
c00208ff:	e8 57 f9 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020904:	57                   	push   edi
c0020905:	56                   	push   esi
c0020906:	52                   	push   edx
c0020907:	50                   	push   eax
c0020908:	e8 fd f8 ff ff       	call   c002020a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002090d:	83 c4 1c             	add    esp,0x1c
c0020910:	52                   	push   edx
c0020911:	50                   	push   eax
c0020912:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020916:	2d c8 00 00 00       	sub    eax,0xc8
c002091b:	eb 7d                	jmp    c002099a <Vm::x87Handler(regs*)+0x602>
c002091d:	3c f7                	cmp    al,0xf7
c002091f:	76 38                	jbe    c0020959 <Vm::x87Handler(regs*)+0x5c1>
c0020921:	83 ec 0c             	sub    esp,0xc
c0020924:	6a 00                	push   0x0
c0020926:	e8 30 f9 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c002092b:	89 c6                	mov    esi,eax
c002092d:	89 d7                	mov    edi,edx
c002092f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020933:	2d f8 00 00 00       	sub    eax,0xf8
c0020938:	89 04 24             	mov    DWORD PTR [esp],eax
c002093b:	e8 1b f9 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020940:	57                   	push   edi
c0020941:	56                   	push   esi
c0020942:	52                   	push   edx
c0020943:	50                   	push   eax
c0020944:	e8 e0 f8 ff ff       	call   c0020229 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020949:	83 c4 1c             	add    esp,0x1c
c002094c:	52                   	push   edx
c002094d:	50                   	push   eax
c002094e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020952:	2d f8 00 00 00       	sub    eax,0xf8
c0020957:	eb 41                	jmp    c002099a <Vm::x87Handler(regs*)+0x602>
c0020959:	8d 50 10             	lea    edx,[eax+0x10]
c002095c:	80 fa 07             	cmp    dl,0x7
c002095f:	0f 87 5a 01 00 00    	ja     c0020abf <Vm::x87Handler(regs*)+0x727>
c0020965:	83 ec 0c             	sub    esp,0xc
c0020968:	2d f0 00 00 00       	sub    eax,0xf0
c002096d:	50                   	push   eax
c002096e:	e8 e8 f8 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020973:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002097a:	89 c6                	mov    esi,eax
c002097c:	89 d7                	mov    edi,edx
c002097e:	e8 d8 f8 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020983:	57                   	push   edi
c0020984:	56                   	push   esi
c0020985:	52                   	push   edx
c0020986:	50                   	push   eax
c0020987:	e8 9d f8 ff ff       	call   c0020229 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002098c:	83 c4 1c             	add    esp,0x1c
c002098f:	52                   	push   edx
c0020990:	50                   	push   eax
c0020991:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020995:	2d f0 00 00 00       	sub    eax,0xf0
c002099a:	50                   	push   eax
c002099b:	e8 fe f8 ff ff       	call   c002029e <Vm::fpuSetReg(int, unsigned long long)>
c00209a0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00209a4:	e8 9d f9 ff ff       	call   c0020346 <Vm::fpuPop()>
c00209a9:	e9 5e fa ff ff       	jmp    c002040c <Vm::x87Handler(regs*)+0x74>
c00209ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00209b2:	8d 50 30             	lea    edx,[eax+0x30]
c00209b5:	80 fa 07             	cmp    dl,0x7
c00209b8:	77 1d                	ja     c00209d7 <Vm::x87Handler(regs*)+0x63f>
c00209ba:	83 ec 0c             	sub    esp,0xc
c00209bd:	6a 00                	push   0x0
c00209bf:	e8 97 f8 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00209c4:	83 c4 0c             	add    esp,0xc
c00209c7:	52                   	push   edx
c00209c8:	50                   	push   eax
c00209c9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00209cd:	2d d0 00 00 00       	sub    eax,0xd0
c00209d2:	e9 f3 fd ff ff       	jmp    c00207ca <Vm::x87Handler(regs*)+0x432>
c00209d7:	8d 50 28             	lea    edx,[eax+0x28]
c00209da:	80 fa 07             	cmp    dl,0x7
c00209dd:	77 28                	ja     c0020a07 <Vm::x87Handler(regs*)+0x66f>
c00209df:	83 ec 0c             	sub    esp,0xc
c00209e2:	6a 00                	push   0x0
c00209e4:	e8 72 f8 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c00209e9:	83 c4 0c             	add    esp,0xc
c00209ec:	52                   	push   edx
c00209ed:	50                   	push   eax
c00209ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00209f2:	2d d8 00 00 00       	sub    eax,0xd8
c00209f7:	50                   	push   eax
c00209f8:	e8 a1 f8 ff ff       	call   c002029e <Vm::fpuSetReg(int, unsigned long long)>
c00209fd:	e8 44 f9 ff ff       	call   c0020346 <Vm::fpuPop()>
c0020a02:	e9 01 fa ff ff       	jmp    c0020408 <Vm::x87Handler(regs*)+0x70>
c0020a07:	8d 50 20             	lea    edx,[eax+0x20]
c0020a0a:	80 fa 07             	cmp    dl,0x7
c0020a0d:	77 30                	ja     c0020a3f <Vm::x87Handler(regs*)+0x6a7>
c0020a0f:	83 ec 0c             	sub    esp,0xc
c0020a12:	2d e0 00 00 00       	sub    eax,0xe0
c0020a17:	50                   	push   eax
c0020a18:	e8 3e f8 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020a1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a24:	89 c6                	mov    esi,eax
c0020a26:	89 d7                	mov    edi,edx
c0020a28:	e8 2e f8 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020a2d:	57                   	push   edi
c0020a2e:	56                   	push   esi
c0020a2f:	52                   	push   edx
c0020a30:	50                   	push   eax
c0020a31:	e8 48 f7 ff ff       	call   c002017e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020a36:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020a3a:	e9 54 02 00 00       	jmp    c0020c93 <Vm::x87Handler(regs*)+0x8fb>
c0020a3f:	8d 50 18             	lea    edx,[eax+0x18]
c0020a42:	80 fa 07             	cmp    dl,0x7
c0020a45:	0f 87 43 fb ff ff    	ja     c002058e <Vm::x87Handler(regs*)+0x1f6>
c0020a4b:	83 ec 0c             	sub    esp,0xc
c0020a4e:	2d e8 00 00 00       	sub    eax,0xe8
c0020a53:	50                   	push   eax
c0020a54:	e8 02 f8 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020a59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a60:	89 c6                	mov    esi,eax
c0020a62:	89 d7                	mov    edi,edx
c0020a64:	e8 f2 f7 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020a69:	57                   	push   edi
c0020a6a:	56                   	push   esi
c0020a6b:	52                   	push   edx
c0020a6c:	50                   	push   eax
c0020a6d:	e8 0c f7 ff ff       	call   c002017e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020a72:	83 c4 20             	add    esp,0x20
c0020a75:	e8 cc f8 ff ff       	call   c0020346 <Vm::fpuPop()>
c0020a7a:	eb 62                	jmp    c0020ade <Vm::x87Handler(regs*)+0x746>
c0020a7c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020a80:	0f 85 0f 01 00 00    	jne    c0020b95 <Vm::x87Handler(regs*)+0x7fd>
c0020a86:	83 ec 0c             	sub    esp,0xc
c0020a89:	6a 01                	push   0x1
c0020a8b:	e8 cb f7 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020a90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a97:	89 c6                	mov    esi,eax
c0020a99:	89 d7                	mov    edi,edx
c0020a9b:	e8 bb f7 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020aa0:	57                   	push   edi
c0020aa1:	56                   	push   esi
c0020aa2:	52                   	push   edx
c0020aa3:	50                   	push   eax
c0020aa4:	e8 d5 f6 ff ff       	call   c002017e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020aa9:	83 c4 20             	add    esp,0x20
c0020aac:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020ab0:	e8 91 f8 ff ff       	call   c0020346 <Vm::fpuPop()>
c0020ab5:	e8 8c f8 ff ff       	call   c0020346 <Vm::fpuPop()>
c0020aba:	e9 50 f9 ff ff       	jmp    c002040f <Vm::x87Handler(regs*)+0x77>
c0020abf:	3c d9                	cmp    al,0xd9
c0020ac1:	0f 85 b5 02 00 00    	jne    c0020d7c <Vm::x87Handler(regs*)+0x9e4>
c0020ac7:	eb bd                	jmp    c0020a86 <Vm::x87Handler(regs*)+0x6ee>
c0020ac9:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020acd:	0f 85 ea 02 00 00    	jne    c0020dbd <Vm::x87Handler(regs*)+0xa25>
c0020ad3:	0f b7 05 e0 29 03 c0 	movzx  eax,WORD PTR ds:0xc00329e0
c0020ada:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020ade:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020ae2:	e9 28 f9 ff ff       	jmp    c002040f <Vm::x87Handler(regs*)+0x77>
c0020ae7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020aeb:	84 d2                	test   dl,dl
c0020aed:	75 0f                	jne    c0020afe <Vm::x87Handler(regs*)+0x766>
c0020aef:	83 ec 0c             	sub    esp,0xc
c0020af2:	ff 36                	push   DWORD PTR [esi]
c0020af4:	e8 b1 f4 ff ff       	call   c001ffaa <Vm::fpu32ToInternal(unsigned int)>
c0020af9:	e9 2c 01 00 00       	jmp    c0020c2a <Vm::x87Handler(regs*)+0x892>
c0020afe:	80 fa 01             	cmp    dl,0x1
c0020b01:	75 0f                	jne    c0020b12 <Vm::x87Handler(regs*)+0x77a>
c0020b03:	83 ec 0c             	sub    esp,0xc
c0020b06:	ff 36                	push   DWORD PTR [esi]
c0020b08:	e8 9d f4 ff ff       	call   c001ffaa <Vm::fpu32ToInternal(unsigned int)>
c0020b0d:	e9 81 02 00 00       	jmp    c0020d93 <Vm::x87Handler(regs*)+0x9fb>
c0020b12:	80 fa 04             	cmp    dl,0x4
c0020b15:	75 0f                	jne    c0020b26 <Vm::x87Handler(regs*)+0x78e>
c0020b17:	83 ec 0c             	sub    esp,0xc
c0020b1a:	ff 36                	push   DWORD PTR [esi]
c0020b1c:	e8 89 f4 ff ff       	call   c001ffaa <Vm::fpu32ToInternal(unsigned int)>
c0020b21:	e9 86 01 00 00       	jmp    c0020cac <Vm::x87Handler(regs*)+0x914>
c0020b26:	80 fa 05             	cmp    dl,0x5
c0020b29:	75 1b                	jne    c0020b46 <Vm::x87Handler(regs*)+0x7ae>
c0020b2b:	83 ec 0c             	sub    esp,0xc
c0020b2e:	6a 00                	push   0x0
c0020b30:	e8 26 f7 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020b35:	89 c7                	mov    edi,eax
c0020b37:	89 d5                	mov    ebp,edx
c0020b39:	58                   	pop    eax
c0020b3a:	ff 36                	push   DWORD PTR [esi]
c0020b3c:	e8 69 f4 ff ff       	call   c001ffaa <Vm::fpu32ToInternal(unsigned int)>
c0020b41:	e9 a3 01 00 00       	jmp    c0020ce9 <Vm::x87Handler(regs*)+0x951>
c0020b46:	80 fa 06             	cmp    dl,0x6
c0020b49:	75 0f                	jne    c0020b5a <Vm::x87Handler(regs*)+0x7c2>
c0020b4b:	83 ec 0c             	sub    esp,0xc
c0020b4e:	ff 36                	push   DWORD PTR [esi]
c0020b50:	e8 55 f4 ff ff       	call   c001ffaa <Vm::fpu32ToInternal(unsigned int)>
c0020b55:	e9 ae 01 00 00       	jmp    c0020d08 <Vm::x87Handler(regs*)+0x970>
c0020b5a:	31 c0                	xor    eax,eax
c0020b5c:	80 fa 07             	cmp    dl,0x7
c0020b5f:	0f 85 94 02 00 00    	jne    c0020df9 <Vm::x87Handler(regs*)+0xa61>
c0020b65:	83 ec 0c             	sub    esp,0xc
c0020b68:	6a 00                	push   0x0
c0020b6a:	e8 ec f6 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020b6f:	89 c7                	mov    edi,eax
c0020b71:	89 d5                	mov    ebp,edx
c0020b73:	58                   	pop    eax
c0020b74:	ff 36                	push   DWORD PTR [esi]
c0020b76:	e8 2f f4 ff ff       	call   c001ffaa <Vm::fpu32ToInternal(unsigned int)>
c0020b7b:	e9 cb 01 00 00       	jmp    c0020d4b <Vm::x87Handler(regs*)+0x9b3>
c0020b80:	80 fa 03             	cmp    dl,0x3
c0020b83:	0f 85 d3 01 00 00    	jne    c0020d5c <Vm::x87Handler(regs*)+0x9c4>
c0020b89:	e8 b8 f7 ff ff       	call   c0020346 <Vm::fpuPop()>
c0020b8e:	51                   	push   ecx
c0020b8f:	51                   	push   ecx
c0020b90:	e9 de 01 00 00       	jmp    c0020d73 <Vm::x87Handler(regs*)+0x9db>
c0020b95:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b99:	80 fa 01             	cmp    dl,0x1
c0020b9c:	75 09                	jne    c0020ba7 <Vm::x87Handler(regs*)+0x80f>
c0020b9e:	57                   	push   edi
c0020b9f:	57                   	push   edi
c0020ba0:	8b 06                	mov    eax,DWORD PTR [esi]
c0020ba2:	e9 e3 01 00 00       	jmp    c0020d8a <Vm::x87Handler(regs*)+0x9f2>
c0020ba7:	80 fa 04             	cmp    dl,0x4
c0020baa:	75 12                	jne    c0020bbe <Vm::x87Handler(regs*)+0x826>
c0020bac:	31 d2                	xor    edx,edx
c0020bae:	51                   	push   ecx
c0020baf:	51                   	push   ecx
c0020bb0:	8b 06                	mov    eax,DWORD PTR [esi]
c0020bb2:	52                   	push   edx
c0020bb3:	50                   	push   eax
c0020bb4:	e8 d0 f4 ff ff       	call   c0020089 <Vm::fpuLongToFloat(long long)>
c0020bb9:	e9 ee 00 00 00       	jmp    c0020cac <Vm::x87Handler(regs*)+0x914>
c0020bbe:	31 c0                	xor    eax,eax
c0020bc0:	80 fa 07             	cmp    dl,0x7
c0020bc3:	0f 85 30 02 00 00    	jne    c0020df9 <Vm::x87Handler(regs*)+0xa61>
c0020bc9:	83 ec 0c             	sub    esp,0xc
c0020bcc:	6a 00                	push   0x0
c0020bce:	e8 88 f6 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020bd3:	89 c7                	mov    edi,eax
c0020bd5:	89 d5                	mov    ebp,edx
c0020bd7:	58                   	pop    eax
c0020bd8:	8b 06                	mov    eax,DWORD PTR [esi]
c0020bda:	5a                   	pop    edx
c0020bdb:	31 d2                	xor    edx,edx
c0020bdd:	52                   	push   edx
c0020bde:	50                   	push   eax
c0020bdf:	e8 a5 f4 ff ff       	call   c0020089 <Vm::fpuLongToFloat(long long)>
c0020be4:	e9 62 01 00 00       	jmp    c0020d4b <Vm::x87Handler(regs*)+0x9b3>
c0020be9:	84 d2                	test   dl,dl
c0020beb:	75 0d                	jne    c0020bfa <Vm::x87Handler(regs*)+0x862>
c0020bed:	31 d2                	xor    edx,edx
c0020bef:	55                   	push   ebp
c0020bf0:	55                   	push   ebp
c0020bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0020bf3:	52                   	push   edx
c0020bf4:	50                   	push   eax
c0020bf5:	e9 d3 01 00 00       	jmp    c0020dcd <Vm::x87Handler(regs*)+0xa35>
c0020bfa:	31 c0                	xor    eax,eax
c0020bfc:	80 fa 02             	cmp    dl,0x2
c0020bff:	0f 85 f4 01 00 00    	jne    c0020df9 <Vm::x87Handler(regs*)+0xa61>
c0020c05:	83 ec 0c             	sub    esp,0xc
c0020c08:	6a 00                	push   0x0
c0020c0a:	e8 4c f6 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020c0f:	59                   	pop    ecx
c0020c10:	5f                   	pop    edi
c0020c11:	e9 6a f9 ff ff       	jmp    c0020580 <Vm::x87Handler(regs*)+0x1e8>
c0020c16:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020c1a:	84 d2                	test   dl,dl
c0020c1c:	75 2a                	jne    c0020c48 <Vm::x87Handler(regs*)+0x8b0>
c0020c1e:	50                   	push   eax
c0020c1f:	50                   	push   eax
c0020c20:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c23:	ff 36                	push   DWORD PTR [esi]
c0020c25:	e8 c5 f3 ff ff       	call   c001ffef <Vm::fpu64ToInternal(unsigned long long)>
c0020c2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c31:	89 c6                	mov    esi,eax
c0020c33:	89 d7                	mov    edi,edx
c0020c35:	e8 21 f6 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020c3a:	57                   	push   edi
c0020c3b:	56                   	push   esi
c0020c3c:	52                   	push   edx
c0020c3d:	50                   	push   eax
c0020c3e:	e8 8e f5 ff ff       	call   c00201d1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020c43:	e9 64 01 00 00       	jmp    c0020dac <Vm::x87Handler(regs*)+0xa14>
c0020c48:	80 fa 01             	cmp    dl,0x1
c0020c4b:	75 11                	jne    c0020c5e <Vm::x87Handler(regs*)+0x8c6>
c0020c4d:	50                   	push   eax
c0020c4e:	50                   	push   eax
c0020c4f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c52:	ff 36                	push   DWORD PTR [esi]
c0020c54:	e8 96 f3 ff ff       	call   c001ffef <Vm::fpu64ToInternal(unsigned long long)>
c0020c59:	e9 35 01 00 00       	jmp    c0020d93 <Vm::x87Handler(regs*)+0x9fb>
c0020c5e:	80 fa 02             	cmp    dl,0x2
c0020c61:	0f 85 54 f9 ff ff    	jne    c00205bb <Vm::x87Handler(regs*)+0x223>
c0020c67:	55                   	push   ebp
c0020c68:	55                   	push   ebp
c0020c69:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c6c:	ff 36                	push   DWORD PTR [esi]
c0020c6e:	e8 7c f3 ff ff       	call   c001ffef <Vm::fpu64ToInternal(unsigned long long)>
c0020c73:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c7a:	89 c6                	mov    esi,eax
c0020c7c:	89 d7                	mov    edi,edx
c0020c7e:	e8 d8 f5 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020c83:	57                   	push   edi
c0020c84:	56                   	push   esi
c0020c85:	52                   	push   edx
c0020c86:	50                   	push   eax
c0020c87:	e8 f2 f4 ff ff       	call   c002017e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020c8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c90:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020c93:	83 c4 20             	add    esp,0x20
c0020c96:	e9 74 f7 ff ff       	jmp    c002040f <Vm::x87Handler(regs*)+0x77>
c0020c9b:	80 fa 04             	cmp    dl,0x4
c0020c9e:	75 2a                	jne    c0020cca <Vm::x87Handler(regs*)+0x932>
c0020ca0:	51                   	push   ecx
c0020ca1:	51                   	push   ecx
c0020ca2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020ca5:	ff 36                	push   DWORD PTR [esi]
c0020ca7:	e8 43 f3 ff ff       	call   c001ffef <Vm::fpu64ToInternal(unsigned long long)>
c0020cac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020cb3:	89 c6                	mov    esi,eax
c0020cb5:	89 d7                	mov    edi,edx
c0020cb7:	e8 9f f5 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020cbc:	57                   	push   edi
c0020cbd:	56                   	push   esi
c0020cbe:	52                   	push   edx
c0020cbf:	50                   	push   eax
c0020cc0:	e8 36 f5 ff ff       	call   c00201fb <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020cc5:	e9 e2 00 00 00       	jmp    c0020dac <Vm::x87Handler(regs*)+0xa14>
c0020cca:	80 fa 05             	cmp    dl,0x5
c0020ccd:	75 28                	jne    c0020cf7 <Vm::x87Handler(regs*)+0x95f>
c0020ccf:	83 ec 0c             	sub    esp,0xc
c0020cd2:	6a 00                	push   0x0
c0020cd4:	e8 82 f5 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020cd9:	89 c7                	mov    edi,eax
c0020cdb:	89 d5                	mov    ebp,edx
c0020cdd:	58                   	pop    eax
c0020cde:	5a                   	pop    edx
c0020cdf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020ce2:	ff 36                	push   DWORD PTR [esi]
c0020ce4:	e8 06 f3 ff ff       	call   c001ffef <Vm::fpu64ToInternal(unsigned long long)>
c0020ce9:	83 c4 10             	add    esp,0x10
c0020cec:	55                   	push   ebp
c0020ced:	57                   	push   edi
c0020cee:	52                   	push   edx
c0020cef:	50                   	push   eax
c0020cf0:	e8 06 f5 ff ff       	call   c00201fb <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020cf5:	eb 60                	jmp    c0020d57 <Vm::x87Handler(regs*)+0x9bf>
c0020cf7:	80 fa 06             	cmp    dl,0x6
c0020cfa:	75 2a                	jne    c0020d26 <Vm::x87Handler(regs*)+0x98e>
c0020cfc:	51                   	push   ecx
c0020cfd:	51                   	push   ecx
c0020cfe:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020d01:	ff 36                	push   DWORD PTR [esi]
c0020d03:	e8 e7 f2 ff ff       	call   c001ffef <Vm::fpu64ToInternal(unsigned long long)>
c0020d08:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020d0f:	89 c6                	mov    esi,eax
c0020d11:	89 d7                	mov    edi,edx
c0020d13:	e8 43 f5 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020d18:	57                   	push   edi
c0020d19:	56                   	push   esi
c0020d1a:	52                   	push   edx
c0020d1b:	50                   	push   eax
c0020d1c:	e8 08 f5 ff ff       	call   c0020229 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020d21:	e9 86 00 00 00       	jmp    c0020dac <Vm::x87Handler(regs*)+0xa14>
c0020d26:	31 c0                	xor    eax,eax
c0020d28:	80 fa 07             	cmp    dl,0x7
c0020d2b:	0f 85 c8 00 00 00    	jne    c0020df9 <Vm::x87Handler(regs*)+0xa61>
c0020d31:	83 ec 0c             	sub    esp,0xc
c0020d34:	6a 00                	push   0x0
c0020d36:	e8 20 f5 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020d3b:	89 c7                	mov    edi,eax
c0020d3d:	89 d5                	mov    ebp,edx
c0020d3f:	58                   	pop    eax
c0020d40:	5a                   	pop    edx
c0020d41:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020d44:	ff 36                	push   DWORD PTR [esi]
c0020d46:	e8 a4 f2 ff ff       	call   c001ffef <Vm::fpu64ToInternal(unsigned long long)>
c0020d4b:	83 c4 10             	add    esp,0x10
c0020d4e:	55                   	push   ebp
c0020d4f:	57                   	push   edi
c0020d50:	52                   	push   edx
c0020d51:	50                   	push   eax
c0020d52:	e8 d2 f4 ff ff       	call   c0020229 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020d57:	83 c4 0c             	add    esp,0xc
c0020d5a:	eb 53                	jmp    c0020daf <Vm::x87Handler(regs*)+0xa17>
c0020d5c:	31 c0                	xor    eax,eax
c0020d5e:	80 fa 02             	cmp    dl,0x2
c0020d61:	0f 85 92 00 00 00    	jne    c0020df9 <Vm::x87Handler(regs*)+0xa61>
c0020d67:	83 ec 0c             	sub    esp,0xc
c0020d6a:	6a 00                	push   0x0
c0020d6c:	e8 ea f4 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020d71:	59                   	pop    ecx
c0020d72:	5f                   	pop    edi
c0020d73:	52                   	push   edx
c0020d74:	50                   	push   eax
c0020d75:	e8 27 f2 ff ff       	call   c001ffa1 <Vm::fpuInternalTo64(unsigned long long)>
c0020d7a:	eb 70                	jmp    c0020dec <Vm::x87Handler(regs*)+0xa54>
c0020d7c:	31 c0                	xor    eax,eax
c0020d7e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020d83:	75 74                	jne    c0020df9 <Vm::x87Handler(regs*)+0xa61>
c0020d85:	50                   	push   eax
c0020d86:	50                   	push   eax
c0020d87:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020d8a:	31 d2                	xor    edx,edx
c0020d8c:	52                   	push   edx
c0020d8d:	50                   	push   eax
c0020d8e:	e8 f6 f2 ff ff       	call   c0020089 <Vm::fpuLongToFloat(long long)>
c0020d93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020d9a:	89 c6                	mov    esi,eax
c0020d9c:	89 d7                	mov    edi,edx
c0020d9e:	e8 b8 f4 ff ff       	call   c002025b <Vm::fpuGetReg(int)>
c0020da3:	57                   	push   edi
c0020da4:	56                   	push   esi
c0020da5:	52                   	push   edx
c0020da6:	50                   	push   eax
c0020da7:	e8 5e f4 ff ff       	call   c002020a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020dac:	83 c4 1c             	add    esp,0x1c
c0020daf:	52                   	push   edx
c0020db0:	50                   	push   eax
c0020db1:	6a 00                	push   0x0
c0020db3:	e8 e6 f4 ff ff       	call   c002029e <Vm::fpuSetReg(int, unsigned long long)>
c0020db8:	e9 f2 f7 ff ff       	jmp    c00205af <Vm::x87Handler(regs*)+0x217>
c0020dbd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020dc1:	80 fa 05             	cmp    dl,0x5
c0020dc4:	75 11                	jne    c0020dd7 <Vm::x87Handler(regs*)+0xa3f>
c0020dc6:	55                   	push   ebp
c0020dc7:	55                   	push   ebp
c0020dc8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020dcb:	ff 36                	push   DWORD PTR [esi]
c0020dcd:	e8 81 f2 ff ff       	call   c0020053 <Vm::fpuULongToFloat(unsigned long long)>
c0020dd2:	e9 cf f7 ff ff       	jmp    c00205a6 <Vm::x87Handler(regs*)+0x20e>
c0020dd7:	31 c0                	xor    eax,eax
c0020dd9:	80 fa 07             	cmp    dl,0x7
c0020ddc:	75 1b                	jne    c0020df9 <Vm::x87Handler(regs*)+0xa61>
c0020dde:	e8 63 f5 ff ff       	call   c0020346 <Vm::fpuPop()>
c0020de3:	51                   	push   ecx
c0020de4:	51                   	push   ecx
c0020de5:	52                   	push   edx
c0020de6:	50                   	push   eax
c0020de7:	e8 0c f2 ff ff       	call   c001fff8 <Vm::fpuFloatToLong(unsigned long long)>
c0020dec:	83 c4 10             	add    esp,0x10
c0020def:	89 06                	mov    DWORD PTR [esi],eax
c0020df1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020df4:	e9 f8 f7 ff ff       	jmp    c00205f1 <Vm::x87Handler(regs*)+0x259>
c0020df9:	83 c4 1c             	add    esp,0x1c
c0020dfc:	5b                   	pop    ebx
c0020dfd:	5e                   	pop    esi
c0020dfe:	5f                   	pop    edi
c0020dff:	5d                   	pop    ebp
c0020e00:	c3                   	ret    

c0020e01 <__static_initialization_and_destruction_0(int, int)>:
c0020e01:	83 ec 0c             	sub    esp,0xc
c0020e04:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020e09:	75 1a                	jne    c0020e25 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020e0b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020e13:	75 10                	jne    c0020e25 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020e15:	83 ec 0c             	sub    esp,0xc
c0020e18:	68 e0 29 03 c0       	push   0xc00329e0
c0020e1d:	e8 1a 8d 00 00       	call   c0029b3c <Vm::_FPUState::_FPUState()>
c0020e22:	83 c4 10             	add    esp,0x10
c0020e25:	90                   	nop
c0020e26:	83 c4 0c             	add    esp,0xc
c0020e29:	c3                   	ret    

c0020e2a <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020e2a:	83 ec 0c             	sub    esp,0xc
c0020e2d:	83 ec 08             	sub    esp,0x8
c0020e30:	68 ff ff 00 00       	push   0xffff
c0020e35:	6a 01                	push   0x1
c0020e37:	e8 c5 ff ff ff       	call   c0020e01 <__static_initialization_and_destruction_0(int, int)>
c0020e3c:	83 c4 10             	add    esp,0x10
c0020e3f:	83 c4 0c             	add    esp,0xc
c0020e42:	c3                   	ret    
c0020e43:	90                   	nop

c0020e44 <FAT::getName()>:
c0020e44:	b8 84 d7 02 c0       	mov    eax,0xc002d784
c0020e49:	c3                   	ret    

c0020e4a <FAT::tell(void*, unsigned long long*)>:
c0020e4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020e4f:	75 06                	jne    c0020e57 <FAT::tell(void*, unsigned long long*)+0xd>
c0020e51:	b8 04 00 00 00       	mov    eax,0x4
c0020e56:	c3                   	ret    
c0020e57:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020e5c:	75 06                	jne    c0020e64 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020e5e:	b8 04 00 00 00       	mov    eax,0x4
c0020e63:	c3                   	ret    
c0020e64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e68:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020e6b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020e6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020e72:	89 01                	mov    DWORD PTR [ecx],eax
c0020e74:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020e77:	b8 00 00 00 00       	mov    eax,0x0
c0020e7c:	c3                   	ret    
c0020e7d:	90                   	nop

c0020e7e <FAT::stat(void*, unsigned long long*)>:
c0020e7e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020e83:	75 06                	jne    c0020e8b <FAT::stat(void*, unsigned long long*)+0xd>
c0020e85:	b8 04 00 00 00       	mov    eax,0x4
c0020e8a:	c3                   	ret    
c0020e8b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020e90:	75 06                	jne    c0020e98 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020e92:	b8 04 00 00 00       	mov    eax,0x4
c0020e97:	c3                   	ret    
c0020e98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e9c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020e9f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020ea2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020ea6:	89 01                	mov    DWORD PTR [ecx],eax
c0020ea8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020eab:	b8 00 00 00 00       	mov    eax,0x0
c0020eb0:	c3                   	ret    
c0020eb1:	90                   	nop

c0020eb2 <FAT::~FAT()>:
c0020eb2:	83 ec 0c             	sub    esp,0xc
c0020eb5:	ba 14 d8 02 c0       	mov    edx,0xc002d814
c0020eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ebe:	89 10                	mov    DWORD PTR [eax],edx
c0020ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ec4:	83 ec 0c             	sub    esp,0xc
c0020ec7:	50                   	push   eax
c0020ec8:	e8 99 22 ff ff       	call   c0013166 <Filesystem::~Filesystem()>
c0020ecd:	83 c4 10             	add    esp,0x10
c0020ed0:	90                   	nop
c0020ed1:	83 c4 0c             	add    esp,0xc
c0020ed4:	c3                   	ret    
c0020ed5:	90                   	nop

c0020ed6 <FAT::~FAT()>:
c0020ed6:	83 ec 0c             	sub    esp,0xc
c0020ed9:	83 ec 0c             	sub    esp,0xc
c0020edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ee0:	e8 cd ff ff ff       	call   c0020eb2 <FAT::~FAT()>
c0020ee5:	83 c4 10             	add    esp,0x10
c0020ee8:	83 ec 08             	sub    esp,0x8
c0020eeb:	6a 08                	push   0x8
c0020eed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ef1:	e8 61 1e ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0020ef6:	83 c4 10             	add    esp,0x10
c0020ef9:	83 c4 0c             	add    esp,0xc
c0020efc:	c3                   	ret    
c0020efd:	90                   	nop

c0020efe <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020efe:	83 ec 1c             	sub    esp,0x1c
c0020f01:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020f08:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020f0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f11:	8b 04 85 60 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5a0]
c0020f18:	83 f8 ff             	cmp    eax,0xffffffff
c0020f1b:	75 34                	jne    c0020f51 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020f1d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020f21:	88 c2                	mov    dl,al
c0020f23:	a1 40 2a 03 c0       	mov    eax,ds:0xc0032a40
c0020f28:	01 d0                	add    eax,edx
c0020f2a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020f2e:	8b 15 40 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032a40
c0020f34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f38:	89 14 85 60 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd5a0],edx
c0020f3f:	a1 40 2a 03 c0       	mov    eax,ds:0xc0032a40
c0020f44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020f48:	89 14 85 e0 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd520],edx
c0020f4f:	eb 17                	jmp    c0020f68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020f51:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020f55:	88 c2                	mov    dl,al
c0020f57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f5b:	8b 04 85 60 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5a0]
c0020f62:	01 d0                	add    eax,edx
c0020f64:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020f68:	83 ec 04             	sub    esp,0x4
c0020f6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f73:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020f77:	50                   	push   eax
c0020f78:	e8 81 5d fe ff       	call   c0006cfe <f_getlabel>
c0020f7d:	83 c4 10             	add    esp,0x10
c0020f80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f84:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020f89:	75 07                	jne    c0020f92 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020f8b:	b8 00 00 00 00       	mov    eax,0x0
c0020f90:	eb 05                	jmp    c0020f97 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020f92:	b8 01 00 00 00       	mov    eax,0x1
c0020f97:	83 c4 1c             	add    esp,0x1c
c0020f9a:	c3                   	ret    
c0020f9b:	90                   	nop

c0020f9c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020f9c:	57                   	push   edi
c0020f9d:	83 ec 58             	sub    esp,0x58
c0020fa0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020fa8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020fac:	b9 0f 00 00 00       	mov    ecx,0xf
c0020fb1:	b8 00 00 00 00       	mov    eax,0x0
c0020fb6:	fc                   	cld    
c0020fb7:	89 d7                	mov    edi,edx
c0020fb9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020fbb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020fbf:	8b 04 85 60 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5a0]
c0020fc6:	83 f8 ff             	cmp    eax,0xffffffff
c0020fc9:	75 34                	jne    c0020fff <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020fcb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020fcf:	88 c2                	mov    dl,al
c0020fd1:	a1 40 2a 03 c0       	mov    eax,ds:0xc0032a40
c0020fd6:	01 d0                	add    eax,edx
c0020fd8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020fdc:	8b 15 40 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032a40
c0020fe2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020fe6:	89 14 85 60 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd5a0],edx
c0020fed:	a1 40 2a 03 c0       	mov    eax,ds:0xc0032a40
c0020ff2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020ff6:	89 14 85 e0 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd520],edx
c0020ffd:	eb 17                	jmp    c0021016 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020fff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021003:	88 c2                	mov    dl,al
c0021005:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0021009:	8b 04 85 60 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5a0]
c0021010:	01 d0                	add    eax,edx
c0021012:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021016:	83 ec 08             	sub    esp,0x8
c0021019:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002101d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021021:	50                   	push   eax
c0021022:	e8 25 f9 fd ff       	call   c000094c <strcat>
c0021027:	83 c4 10             	add    esp,0x10
c002102a:	83 ec 0c             	sub    esp,0xc
c002102d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021031:	50                   	push   eax
c0021032:	e8 b5 5e fe ff       	call   c0006eec <f_setlabel>
c0021037:	83 c4 10             	add    esp,0x10
c002103a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002103e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0021043:	75 07                	jne    c002104c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0021045:	b8 00 00 00 00       	mov    eax,0x0
c002104a:	eb 05                	jmp    c0021051 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002104c:	b8 01 00 00 00       	mov    eax,0x1
c0021051:	83 c4 58             	add    esp,0x58
c0021054:	5f                   	pop    edi
c0021055:	c3                   	ret    

c0021056 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0021056:	83 ec 2c             	sub    esp,0x2c
c0021059:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0021061:	83 ec 08             	sub    esp,0x8
c0021064:	68 a8 d7 02 c0       	push   0xc002d7a8
c0021069:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002106d:	e8 26 f8 fd ff       	call   c0000898 <strcmp>
c0021072:	83 c4 10             	add    esp,0x10
c0021075:	85 c0                	test   eax,eax
c0021077:	0f 94 c0             	sete   al
c002107a:	84 c0                	test   al,al
c002107c:	74 0d                	je     c002108b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002107e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0021086:	e9 a6 00 00 00       	jmp    c0021131 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002108b:	83 ec 08             	sub    esp,0x8
c002108e:	68 9a d7 02 c0       	push   0xc002d79a
c0021093:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021097:	e8 fc f7 fd ff       	call   c0000898 <strcmp>
c002109c:	83 c4 10             	add    esp,0x10
c002109f:	85 c0                	test   eax,eax
c00210a1:	0f 94 c0             	sete   al
c00210a4:	84 c0                	test   al,al
c00210a6:	74 0a                	je     c00210b2 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00210a8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00210b0:	eb 7f                	jmp    c0021131 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00210b2:	83 ec 08             	sub    esp,0x8
c00210b5:	68 a0 d7 02 c0       	push   0xc002d7a0
c00210ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00210be:	e8 d5 f7 fd ff       	call   c0000898 <strcmp>
c00210c3:	83 c4 10             	add    esp,0x10
c00210c6:	85 c0                	test   eax,eax
c00210c8:	0f 94 c0             	sete   al
c00210cb:	84 c0                	test   al,al
c00210cd:	74 0a                	je     c00210d9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00210cf:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00210d7:	eb 58                	jmp    c0021131 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00210d9:	83 ec 08             	sub    esp,0x8
c00210dc:	68 ac a2 02 c0       	push   0xc002a2ac
c00210e1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00210e5:	e8 ae f7 fd ff       	call   c0000898 <strcmp>
c00210ea:	83 c4 10             	add    esp,0x10
c00210ed:	85 c0                	test   eax,eax
c00210ef:	0f 94 c0             	sete   al
c00210f2:	84 c0                	test   al,al
c00210f4:	74 0a                	je     c0021100 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00210f6:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00210fe:	eb 31                	jmp    c0021131 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021100:	83 ec 08             	sub    esp,0x8
c0021103:	68 a6 d7 02 c0       	push   0xc002d7a6
c0021108:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002110c:	e8 87 f7 fd ff       	call   c0000898 <strcmp>
c0021111:	83 c4 10             	add    esp,0x10
c0021114:	85 c0                	test   eax,eax
c0021116:	0f 94 c0             	sete   al
c0021119:	84 c0                	test   al,al
c002111b:	74 0a                	je     c0021127 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002111d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0021125:	eb 0a                	jmp    c0021131 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021127:	b8 08 00 00 00       	mov    eax,0x8
c002112c:	e9 04 01 00 00       	jmp    c0021235 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021131:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0021138:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002113d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021141:	8b 04 85 60 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5a0]
c0021148:	83 f8 ff             	cmp    eax,0xffffffff
c002114b:	75 34                	jne    c0021181 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002114d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0021151:	88 c2                	mov    dl,al
c0021153:	a1 40 2a 03 c0       	mov    eax,ds:0xc0032a40
c0021158:	01 d0                	add    eax,edx
c002115a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002115e:	8b 15 40 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032a40
c0021164:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021168:	89 14 85 60 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd5a0],edx
c002116f:	a1 40 2a 03 c0       	mov    eax,ds:0xc0032a40
c0021174:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0021178:	89 14 85 e0 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd520],edx
c002117f:	eb 17                	jmp    c0021198 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0021181:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0021185:	88 c2                	mov    dl,al
c0021187:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002118b:	8b 04 85 60 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5a0]
c0021192:	01 d0                	add    eax,edx
c0021194:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0021198:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002119c:	88 04 24             	mov    BYTE PTR [esp],al
c002119f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00211a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00211a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00211af:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00211b4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00211bc:	83 ec 0c             	sub    esp,0xc
c00211bf:	68 00 20 00 00       	push   0x2000
c00211c4:	e8 c3 e6 fe ff       	call   c000f88c <malloc>
c00211c9:	83 c4 10             	add    esp,0x10
c00211cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00211d0:	68 00 20 00 00       	push   0x2000
c00211d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211dd:	50                   	push   eax
c00211de:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00211e2:	50                   	push   eax
c00211e3:	e8 4f 61 fe ff       	call   c0007337 <f_mkfs>
c00211e8:	83 c4 10             	add    esp,0x10
c00211eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00211ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00211f4:	75 07                	jne    c00211fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00211f6:	b8 00 00 00 00       	mov    eax,0x0
c00211fb:	eb 38                	jmp    c0021235 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00211fd:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0021202:	75 17                	jne    c002121b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0021204:	83 ec 0c             	sub    esp,0xc
c0021207:	68 e4 d7 02 c0       	push   0xc002d7e4
c002120c:	e8 26 1c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0021211:	83 c4 10             	add    esp,0x10
c0021214:	b8 09 00 00 00       	mov    eax,0x9
c0021219:	eb 1a                	jmp    c0021235 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002121b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002121f:	83 ec 08             	sub    esp,0x8
c0021222:	50                   	push   eax
c0021223:	68 ac d7 02 c0       	push   0xc002d7ac
c0021228:	e8 0a 1c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002122d:	83 c4 10             	add    esp,0x10
c0021230:	b8 01 00 00 00       	mov    eax,0x1
c0021235:	83 c4 2c             	add    esp,0x2c
c0021238:	c3                   	ret    
c0021239:	90                   	nop

c002123a <FAT::tryMount(LogicalDisk*, int)>:
c002123a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0021240:	a1 40 2a 03 c0       	mov    eax,ds:0xc0032a40
c0021245:	83 f8 14             	cmp    eax,0x14
c0021248:	75 17                	jne    c0021261 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002124a:	83 ec 0c             	sub    esp,0xc
c002124d:	68 be d7 02 c0       	push   0xc002d7be
c0021252:	e8 4e 97 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0021257:	83 c4 10             	add    esp,0x10
c002125a:	b0 00                	mov    al,0x0
c002125c:	e9 d7 01 00 00       	jmp    c0021438 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021261:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0021268:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002126e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021274:	3d 00 02 00 00       	cmp    eax,0x200
c0021279:	74 07                	je     c0021282 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002127b:	b0 00                	mov    al,0x0
c002127d:	e9 b6 01 00 00       	jmp    c0021438 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021282:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002128a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021291:	8b 04 85 60 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5a0]
c0021298:	83 f8 ff             	cmp    eax,0xffffffff
c002129b:	74 07                	je     c00212a4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002129d:	b0 01                	mov    al,0x1
c002129f:	e9 94 01 00 00       	jmp    c0021438 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00212a4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00212ae:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00212b6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00212bd:	88 c2                	mov    dl,al
c00212bf:	a1 40 2a 03 c0       	mov    eax,ds:0xc0032a40
c00212c4:	01 d0                	add    eax,edx
c00212c6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00212cd:	8b 15 40 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032a40
c00212d3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00212da:	89 14 85 60 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd5a0],edx
c00212e1:	a1 40 2a 03 c0       	mov    eax,ds:0xc0032a40
c00212e6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00212ed:	89 14 85 e0 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd520],edx
c00212f4:	83 ec 0c             	sub    esp,0xc
c00212f7:	68 54 02 00 00       	push   0x254
c00212fc:	e8 8b e5 fe ff       	call   c000f88c <malloc>
c0021301:	83 c4 10             	add    esp,0x10
c0021304:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002130b:	83 ec 04             	sub    esp,0x4
c002130e:	6a 00                	push   0x0
c0021310:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021317:	50                   	push   eax
c0021318:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002131f:	e8 d1 3b fe ff       	call   c0004ef5 <f_mount>
c0021324:	83 c4 10             	add    esp,0x10
c0021327:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002132e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0021336:	74 19                	je     c0021351 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021338:	83 ec 0c             	sub    esp,0xc
c002133b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021342:	e8 65 e5 fe ff       	call   c000f8ac <rfree>
c0021347:	83 c4 10             	add    esp,0x10
c002134a:	b0 00                	mov    al,0x0
c002134c:	e9 e7 00 00 00       	jmp    c0021438 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021351:	83 ec 04             	sub    esp,0x4
c0021354:	68 00 01 00 00       	push   0x100
c0021359:	6a 00                	push   0x0
c002135b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021362:	50                   	push   eax
c0021363:	e8 e8 f3 fd ff       	call   c0000750 <memset>
c0021368:	83 c4 10             	add    esp,0x10
c002136b:	83 ec 08             	sub    esp,0x8
c002136e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021375:	50                   	push   eax
c0021376:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002137d:	50                   	push   eax
c002137e:	e8 c9 f5 fd ff       	call   c000094c <strcat>
c0021383:	83 c4 10             	add    esp,0x10
c0021386:	83 ec 08             	sub    esp,0x8
c0021389:	68 cc d7 02 c0       	push   0xc002d7cc
c002138e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021395:	50                   	push   eax
c0021396:	e8 b1 f5 fd ff       	call   c000094c <strcat>
c002139b:	83 c4 10             	add    esp,0x10
c002139e:	83 ec 04             	sub    esp,0x4
c00213a1:	6a 01                	push   0x1
c00213a3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00213aa:	50                   	push   eax
c00213ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00213af:	50                   	push   eax
c00213b0:	e8 a2 3b fe ff       	call   c0004f57 <f_open>
c00213b5:	83 c4 10             	add    esp,0x10
c00213b8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00213bf:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00213c6:	85 c0                	test   eax,eax
c00213c8:	74 0a                	je     c00213d4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00213ca:	78 2d                	js     c00213f9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00213cc:	83 e8 04             	sub    eax,0x4
c00213cf:	83 f8 01             	cmp    eax,0x1
c00213d2:	77 25                	ja     c00213f9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00213d4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00213dc:	83 ec 0c             	sub    esp,0xc
c00213df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00213e3:	50                   	push   eax
c00213e4:	e8 c0 46 fe ff       	call   c0005aa9 <f_close>
c00213e9:	83 c4 10             	add    esp,0x10
c00213ec:	90                   	nop
c00213ed:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00213f5:	74 3a                	je     c0021431 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00213f7:	eb 2d                	jmp    c0021426 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00213f9:	83 ec 0c             	sub    esp,0xc
c00213fc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021403:	e8 a4 e4 fe ff       	call   c000f8ac <rfree>
c0021408:	83 c4 10             	add    esp,0x10
c002140b:	83 ec 04             	sub    esp,0x4
c002140e:	6a 00                	push   0x0
c0021410:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021417:	50                   	push   eax
c0021418:	6a 00                	push   0x0
c002141a:	e8 d6 3a fe ff       	call   c0004ef5 <f_mount>
c002141f:	83 c4 10             	add    esp,0x10
c0021422:	b0 00                	mov    al,0x0
c0021424:	eb 12                	jmp    c0021438 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021426:	a1 40 2a 03 c0       	mov    eax,ds:0xc0032a40
c002142b:	40                   	inc    eax
c002142c:	a3 40 2a 03 c0       	mov    ds:0xc0032a40,eax
c0021431:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021438:	81 c4 6c 03 00 00    	add    esp,0x36c
c002143e:	c3                   	ret    
c002143f:	90                   	nop

c0021440 <FAT::getFileFirstSector(char const*)>:
c0021440:	53                   	push   ebx
c0021441:	83 ec 28             	sub    esp,0x28
c0021444:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002144c:	83 ec 0c             	sub    esp,0xc
c002144f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021453:	e8 34 e4 fe ff       	call   c000f88c <malloc>
c0021458:	83 c4 10             	add    esp,0x10
c002145b:	89 c3                	mov    ebx,eax
c002145d:	a1 70 29 03 c0       	mov    eax,ds:0xc0032970
c0021462:	83 ec 04             	sub    esp,0x4
c0021465:	50                   	push   eax
c0021466:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002146a:	53                   	push   ebx
c002146b:	e8 26 1f ff ff       	call   c0013396 <File::File(char const*, Process*)>
c0021470:	83 c4 10             	add    esp,0x10
c0021473:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0021477:	83 ec 08             	sub    esp,0x8
c002147a:	6a 01                	push   0x1
c002147c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021480:	e8 75 1f ff ff       	call   c00133fa <File::open(FileOpenMode)>
c0021485:	83 c4 10             	add    esp,0x10
c0021488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002148c:	8b 00                	mov    eax,DWORD PTR [eax]
c002148e:	83 c0 0c             	add    eax,0xc
c0021491:	8b 00                	mov    eax,DWORD PTR [eax]
c0021493:	83 ec 0c             	sub    esp,0xc
c0021496:	8d 54 24 14          	lea    edx,[esp+0x14]
c002149a:	52                   	push   edx
c002149b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002149f:	52                   	push   edx
c00214a0:	6a 00                	push   0x0
c00214a2:	6a 04                	push   0x4
c00214a4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00214a8:	ff d0                	call   eax
c00214aa:	83 c4 20             	add    esp,0x20
c00214ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214b1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00214b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214bf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00214c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00214c5:	83 ec 04             	sub    esp,0x4
c00214c8:	52                   	push   edx
c00214c9:	50                   	push   eax
c00214ca:	68 d7 d7 02 c0       	push   0xc002d7d7
c00214cf:	e8 63 19 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00214d4:	83 c4 10             	add    esp,0x10
c00214d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214db:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00214de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00214e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00214e5:	83 ec 0c             	sub    esp,0xc
c00214e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00214ec:	e8 67 1f ff ff       	call   c0013458 <File::close()>
c00214f1:	83 c4 10             	add    esp,0x10
c00214f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214f8:	ba 00 00 00 00       	mov    edx,0x0
c00214fd:	83 c4 28             	add    esp,0x28
c0021500:	5b                   	pop    ebx
c0021501:	c3                   	ret    

c0021502 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0021502:	57                   	push   edi
c0021503:	56                   	push   esi
c0021504:	53                   	push   ebx
c0021505:	81 ec 50 02 00 00    	sub    esp,0x250
c002150b:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0021513:	74 0a                	je     c002151f <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0021515:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c002151d:	75 0a                	jne    c0021529 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002151f:	b8 04 00 00 00       	mov    eax,0x4
c0021524:	e9 29 01 00 00       	jmp    c0021652 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021529:	83 ec 08             	sub    esp,0x8
c002152c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021533:	50                   	push   eax
c0021534:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002153b:	e8 73 4b fe ff       	call   c00060b3 <f_readdir>
c0021540:	83 c4 10             	add    esp,0x10
c0021543:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002154a:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0021551:	83 ec 0c             	sub    esp,0xc
c0021554:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002155b:	83 c0 1a             	add    eax,0x1a
c002155e:	50                   	push   eax
c002155f:	e8 08 f2 fd ff       	call   c000076c <strlen>
c0021564:	83 c4 10             	add    esp,0x10
c0021567:	ba 00 00 00 00       	mov    edx,0x0
c002156c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021570:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021574:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002157b:	0f b6 c0             	movzx  eax,al
c002157e:	83 e0 10             	and    eax,0x10
c0021581:	74 07                	je     c002158a <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0021583:	b8 02 00 00 00       	mov    eax,0x2
c0021588:	eb 05                	jmp    c002158f <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002158a:	b8 01 00 00 00       	mov    eax,0x1
c002158f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021593:	83 ec 08             	sub    esp,0x8
c0021596:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002159d:	83 c0 1a             	add    eax,0x1a
c00215a0:	50                   	push   eax
c00215a1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00215a5:	83 c0 10             	add    eax,0x10
c00215a8:	50                   	push   eax
c00215a9:	e8 5e f2 fd ff       	call   c000080c <strcpy>
c00215ae:	83 c4 10             	add    esp,0x10
c00215b1:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00215b8:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00215bf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00215c3:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00215ca:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00215d1:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00215d8:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00215df:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00215e6:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00215ed:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00215f4:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00215fb:	89 c6                	mov    esi,eax
c00215fd:	89 d7                	mov    edi,edx
c00215ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021601:	89 c8                	mov    eax,ecx
c0021603:	89 fa                	mov    edx,edi
c0021605:	89 f3                	mov    ebx,esi
c0021607:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002160e:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0021615:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c002161c:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0021623:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021629:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0021630:	84 c0                	test   al,al
c0021632:	75 07                	jne    c002163b <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0021634:	b8 07 00 00 00       	mov    eax,0x7
c0021639:	eb 17                	jmp    c0021652 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002163b:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0021642:	85 c0                	test   eax,eax
c0021644:	75 07                	jne    c002164d <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0021646:	b8 00 00 00 00       	mov    eax,0x0
c002164b:	eb 05                	jmp    c0021652 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002164d:	b8 01 00 00 00       	mov    eax,0x1
c0021652:	81 c4 50 02 00 00    	add    esp,0x250
c0021658:	5b                   	pop    ebx
c0021659:	5e                   	pop    esi
c002165a:	5f                   	pop    edi
c002165b:	c3                   	ret    

c002165c <FAT::read(void*, unsigned long, void*, int*)>:
c002165c:	83 ec 1c             	sub    esp,0x1c
c002165f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021664:	74 07                	je     c002166d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021666:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002166b:	75 07                	jne    c0021674 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002166d:	b8 04 00 00 00       	mov    eax,0x4
c0021672:	eb 3d                	jmp    c00216b1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021674:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021678:	50                   	push   eax
c0021679:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002167d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021681:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021685:	e8 09 3d fe ff       	call   c0005393 <f_read>
c002168a:	83 c4 10             	add    esp,0x10
c002168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021691:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021695:	89 c2                	mov    edx,eax
c0021697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002169b:	89 10                	mov    DWORD PTR [eax],edx
c002169d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216a1:	85 c0                	test   eax,eax
c00216a3:	75 07                	jne    c00216ac <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00216a5:	b8 00 00 00 00       	mov    eax,0x0
c00216aa:	eb 05                	jmp    c00216b1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00216ac:	b8 01 00 00 00       	mov    eax,0x1
c00216b1:	83 c4 1c             	add    esp,0x1c
c00216b4:	c3                   	ret    
c00216b5:	90                   	nop

c00216b6 <FAT::write(void*, unsigned long, void*, int*)>:
c00216b6:	83 ec 1c             	sub    esp,0x1c
c00216b9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00216be:	74 07                	je     c00216c7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00216c0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00216c5:	75 07                	jne    c00216ce <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00216c7:	b8 04 00 00 00       	mov    eax,0x4
c00216cc:	eb 3d                	jmp    c002170b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00216ce:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216d2:	50                   	push   eax
c00216d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00216d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00216db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216df:	e8 2f 3f fe ff       	call   c0005613 <f_write>
c00216e4:	83 c4 10             	add    esp,0x10
c00216e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00216eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216ef:	89 c2                	mov    edx,eax
c00216f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00216f5:	89 10                	mov    DWORD PTR [eax],edx
c00216f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216fb:	85 c0                	test   eax,eax
c00216fd:	75 07                	jne    c0021706 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00216ff:	b8 00 00 00 00       	mov    eax,0x0
c0021704:	eb 05                	jmp    c002170b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021706:	b8 01 00 00 00       	mov    eax,0x1
c002170b:	83 c4 1c             	add    esp,0x1c
c002170e:	c3                   	ret    
c002170f:	90                   	nop

c0021710 <FAT::close(void*)>:
c0021710:	83 ec 1c             	sub    esp,0x1c
c0021713:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021718:	75 07                	jne    c0021721 <FAT::close(void*)+0x11>
c002171a:	b8 04 00 00 00       	mov    eax,0x4
c002171f:	eb 36                	jmp    c0021757 <FAT::close(void*)+0x47>
c0021721:	83 ec 0c             	sub    esp,0xc
c0021724:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021728:	e8 7c 43 fe ff       	call   c0005aa9 <f_close>
c002172d:	83 c4 10             	add    esp,0x10
c0021730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021734:	83 ec 0c             	sub    esp,0xc
c0021737:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002173b:	e8 5c e1 fe ff       	call   c000f89c <free>
c0021740:	83 c4 10             	add    esp,0x10
c0021743:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021747:	85 c0                	test   eax,eax
c0021749:	75 07                	jne    c0021752 <FAT::close(void*)+0x42>
c002174b:	b8 00 00 00 00       	mov    eax,0x0
c0021750:	eb 05                	jmp    c0021757 <FAT::close(void*)+0x47>
c0021752:	b8 01 00 00 00       	mov    eax,0x1
c0021757:	83 c4 1c             	add    esp,0x1c
c002175a:	c3                   	ret    
c002175b:	90                   	nop

c002175c <FAT::closeDir(void*)>:
c002175c:	83 ec 1c             	sub    esp,0x1c
c002175f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021764:	75 07                	jne    c002176d <FAT::closeDir(void*)+0x11>
c0021766:	b8 04 00 00 00       	mov    eax,0x4
c002176b:	eb 36                	jmp    c00217a3 <FAT::closeDir(void*)+0x47>
c002176d:	83 ec 0c             	sub    esp,0xc
c0021770:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021774:	e8 18 49 fe ff       	call   c0006091 <f_closedir>
c0021779:	83 c4 10             	add    esp,0x10
c002177c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021780:	83 ec 0c             	sub    esp,0xc
c0021783:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021787:	e8 10 e1 fe ff       	call   c000f89c <free>
c002178c:	83 c4 10             	add    esp,0x10
c002178f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021793:	85 c0                	test   eax,eax
c0021795:	75 07                	jne    c002179e <FAT::closeDir(void*)+0x42>
c0021797:	b8 00 00 00 00       	mov    eax,0x0
c002179c:	eb 05                	jmp    c00217a3 <FAT::closeDir(void*)+0x47>
c002179e:	b8 01 00 00 00       	mov    eax,0x1
c00217a3:	83 c4 1c             	add    esp,0x1c
c00217a6:	c3                   	ret    
c00217a7:	90                   	nop

c00217a8 <FAT::seek(void*, unsigned long long)>:
c00217a8:	83 ec 2c             	sub    esp,0x2c
c00217ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00217af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00217b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00217b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00217bb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00217c0:	75 07                	jne    c00217c9 <FAT::seek(void*, unsigned long long)+0x21>
c00217c2:	b8 04 00 00 00       	mov    eax,0x4
c00217c7:	eb 2f                	jmp    c00217f8 <FAT::seek(void*, unsigned long long)+0x50>
c00217c9:	83 ec 04             	sub    esp,0x4
c00217cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00217d8:	e8 fb 42 fe ff       	call   c0005ad8 <f_lseek>
c00217dd:	83 c4 10             	add    esp,0x10
c00217e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00217e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00217e8:	85 c0                	test   eax,eax
c00217ea:	75 07                	jne    c00217f3 <FAT::seek(void*, unsigned long long)+0x4b>
c00217ec:	b8 00 00 00 00       	mov    eax,0x0
c00217f1:	eb 05                	jmp    c00217f8 <FAT::seek(void*, unsigned long long)+0x50>
c00217f3:	b8 01 00 00 00       	mov    eax,0x1
c00217f8:	83 c4 2c             	add    esp,0x2c
c00217fb:	c3                   	ret    

c00217fc <fatWrapperReadDisk>:
c00217fc:	83 ec 1c             	sub    esp,0x1c
c00217ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021803:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021807:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002180b:	89 04 24             	mov    DWORD PTR [esp],eax
c002180e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021812:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021816:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002181b:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c0021822:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021826:	83 ec 0c             	sub    esp,0xc
c0021829:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002182d:	52                   	push   edx
c002182e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021836:	50                   	push   eax
c0021837:	e8 9e 4f ff ff       	call   c00167da <LogicalDisk::read(unsigned long long, int, void*)>
c002183c:	83 c4 20             	add    esp,0x20
c002183f:	83 c4 1c             	add    esp,0x1c
c0021842:	c3                   	ret    

c0021843 <fatWrapperWriteDisk>:
c0021843:	83 ec 1c             	sub    esp,0x1c
c0021846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002184a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002184e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021852:	89 04 24             	mov    DWORD PTR [esp],eax
c0021855:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021859:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002185d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021862:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c0021869:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002186d:	83 ec 0c             	sub    esp,0xc
c0021870:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021874:	52                   	push   edx
c0021875:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021879:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002187d:	50                   	push   eax
c002187e:	e8 c3 4f ff ff       	call   c0016846 <LogicalDisk::write(unsigned long long, int, void*)>
c0021883:	83 c4 20             	add    esp,0x20
c0021886:	83 c4 1c             	add    esp,0x1c
c0021889:	c3                   	ret    

c002188a <fatWrapperIoctl>:
c002188a:	53                   	push   ebx
c002188b:	83 ec 28             	sub    esp,0x28
c002188e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021892:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021896:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002189a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002189e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00218a3:	75 31                	jne    c00218d6 <fatWrapperIoctl+0x4c>
c00218a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00218a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00218ad:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00218b2:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c00218b9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00218bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00218c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00218c9:	66 89 02             	mov    WORD PTR [edx],ax
c00218cc:	b8 00 00 00 00       	mov    eax,0x0
c00218d1:	e9 b2 00 00 00       	jmp    c0021988 <fatWrapperIoctl+0xfe>
c00218d6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00218db:	75 6a                	jne    c0021947 <fatWrapperIoctl+0xbd>
c00218dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00218e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00218e5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00218ea:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c00218f1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00218f7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00218fd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021903:	89 c8                	mov    eax,ecx
c0021905:	89 da                	mov    edx,ebx
c0021907:	0f a4 c2 0a          	shld   edx,eax,0xa
c002190b:	c1 e0 0a             	shl    eax,0xa
c002190e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021913:	8b 0c 8d 20 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd05e0]
c002191a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021920:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021926:	89 cb                	mov    ebx,ecx
c0021928:	c1 fb 1f             	sar    ebx,0x1f
c002192b:	53                   	push   ebx
c002192c:	51                   	push   ecx
c002192d:	52                   	push   edx
c002192e:	50                   	push   eax
c002192f:	e8 c0 5d 00 00       	call   c00276f4 <__udivdi3>
c0021934:	83 c4 10             	add    esp,0x10
c0021937:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002193b:	89 01                	mov    DWORD PTR [ecx],eax
c002193d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021940:	b8 00 00 00 00       	mov    eax,0x0
c0021945:	eb 41                	jmp    c0021988 <fatWrapperIoctl+0xfe>
c0021947:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002194c:	75 07                	jne    c0021955 <fatWrapperIoctl+0xcb>
c002194e:	b8 00 00 00 00       	mov    eax,0x0
c0021953:	eb 33                	jmp    c0021988 <fatWrapperIoctl+0xfe>
c0021955:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002195a:	75 19                	jne    c0021975 <fatWrapperIoctl+0xeb>
c002195c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021960:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021964:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021968:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002196e:	b8 00 00 00 00       	mov    eax,0x0
c0021973:	eb 13                	jmp    c0021988 <fatWrapperIoctl+0xfe>
c0021975:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002197a:	75 07                	jne    c0021983 <fatWrapperIoctl+0xf9>
c002197c:	b8 00 00 00 00       	mov    eax,0x0
c0021981:	eb 05                	jmp    c0021988 <fatWrapperIoctl+0xfe>
c0021983:	b8 04 00 00 00       	mov    eax,0x4
c0021988:	83 c4 28             	add    esp,0x28
c002198b:	5b                   	pop    ebx
c002198c:	c3                   	ret    
c002198d:	90                   	nop

c002198e <FAT::FAT()>:
c002198e:	83 ec 1c             	sub    esp,0x1c
c0021991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021995:	83 ec 0c             	sub    esp,0xc
c0021998:	50                   	push   eax
c0021999:	e8 a4 17 ff ff       	call   c0013142 <Filesystem::Filesystem()>
c002199e:	83 c4 10             	add    esp,0x10
c00219a1:	ba 14 d8 02 c0       	mov    edx,0xc002d814
c00219a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219aa:	89 10                	mov    DWORD PTR [eax],edx
c00219ac:	c7 05 40 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032a40,0x0
c00219b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00219be:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00219c3:	7f 15                	jg     c00219da <FAT::FAT()+0x4c>
c00219c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219c9:	c7 04 85 60 2a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd5a0],0xffffffff
c00219d4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00219d8:	eb e4                	jmp    c00219be <FAT::FAT()+0x30>
c00219da:	90                   	nop
c00219db:	83 c4 1c             	add    esp,0x1c
c00219de:	c3                   	ret    
c00219df:	90                   	nop

c00219e0 <FAT::fixFilepath(char*)>:
c00219e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219e4:	8a 00                	mov    al,BYTE PTR [eax]
c00219e6:	3c 40                	cmp    al,0x40
c00219e8:	7e 2c                	jle    c0021a16 <FAT::fixFilepath(char*)+0x36>
c00219ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219ee:	8a 00                	mov    al,BYTE PTR [eax]
c00219f0:	83 e8 41             	sub    eax,0x41
c00219f3:	88 c2                	mov    dl,al
c00219f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219f9:	88 10                	mov    BYTE PTR [eax],dl
c00219fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219ff:	8a 00                	mov    al,BYTE PTR [eax]
c0021a01:	0f be c0             	movsx  eax,al
c0021a04:	8b 04 85 60 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5a0]
c0021a0b:	83 c0 30             	add    eax,0x30
c0021a0e:	88 c2                	mov    dl,al
c0021a10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a14:	88 10                	mov    BYTE PTR [eax],dl
c0021a16:	90                   	nop
c0021a17:	c3                   	ret    

c0021a18 <FAT::open(char const*, void**, FileOpenMode)>:
c0021a18:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a1e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021a26:	74 0a                	je     c0021a32 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021a28:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021a30:	75 0a                	jne    c0021a3c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021a32:	b8 04 00 00 00       	mov    eax,0x4
c0021a37:	e9 fd 00 00 00       	jmp    c0021b39 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021a3c:	83 ec 08             	sub    esp,0x8
c0021a3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a46:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a4a:	50                   	push   eax
c0021a4b:	e8 bc ed fd ff       	call   c000080c <strcpy>
c0021a50:	83 c4 10             	add    esp,0x10
c0021a53:	83 ec 08             	sub    esp,0x8
c0021a56:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021a5a:	50                   	push   eax
c0021a5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a62:	e8 79 ff ff ff       	call   c00219e0 <FAT::fixFilepath(char*)>
c0021a67:	83 c4 10             	add    esp,0x10
c0021a6a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021a72:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a79:	83 e0 01             	and    eax,0x1
c0021a7c:	74 08                	je     c0021a86 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021a7e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021a86:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a8d:	83 e0 04             	and    eax,0x4
c0021a90:	74 10                	je     c0021aa2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021a92:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021a9a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021aa2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021aa9:	83 e0 02             	and    eax,0x2
c0021aac:	74 08                	je     c0021ab6 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021aae:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021ab6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021abd:	83 e0 08             	and    eax,0x8
c0021ac0:	74 08                	je     c0021aca <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021ac2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021aca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021ad1:	83 e0 10             	and    eax,0x10
c0021ad4:	74 08                	je     c0021ade <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021ad6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021ade:	83 ec 0c             	sub    esp,0xc
c0021ae1:	68 50 02 00 00       	push   0x250
c0021ae6:	e8 a1 dd fe ff       	call   c000f88c <malloc>
c0021aeb:	83 c4 10             	add    esp,0x10
c0021aee:	89 c2                	mov    edx,eax
c0021af0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021af7:	89 10                	mov    DWORD PTR [eax],edx
c0021af9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021b01:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b0a:	83 ec 04             	sub    esp,0x4
c0021b0d:	52                   	push   edx
c0021b0e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021b12:	52                   	push   edx
c0021b13:	50                   	push   eax
c0021b14:	e8 3e 34 fe ff       	call   c0004f57 <f_open>
c0021b19:	83 c4 10             	add    esp,0x10
c0021b1c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021b23:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021b2b:	74 07                	je     c0021b34 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021b2d:	b8 01 00 00 00       	mov    eax,0x1
c0021b32:	eb 05                	jmp    c0021b39 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021b34:	b8 00 00 00 00       	mov    eax,0x0
c0021b39:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b3f:	c3                   	ret    

c0021b40 <FAT::openDir(char const*, void**)>:
c0021b40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021b46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021b4e:	74 0a                	je     c0021b5a <FAT::openDir(char const*, void**)+0x1a>
c0021b50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021b58:	75 07                	jne    c0021b61 <FAT::openDir(char const*, void**)+0x21>
c0021b5a:	b8 04 00 00 00       	mov    eax,0x4
c0021b5f:	eb 7d                	jmp    c0021bde <FAT::openDir(char const*, void**)+0x9e>
c0021b61:	83 ec 08             	sub    esp,0x8
c0021b64:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b6b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b6f:	50                   	push   eax
c0021b70:	e8 97 ec fd ff       	call   c000080c <strcpy>
c0021b75:	83 c4 10             	add    esp,0x10
c0021b78:	83 ec 08             	sub    esp,0x8
c0021b7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b7f:	50                   	push   eax
c0021b80:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b87:	e8 54 fe ff ff       	call   c00219e0 <FAT::fixFilepath(char*)>
c0021b8c:	83 c4 10             	add    esp,0x10
c0021b8f:	83 ec 0c             	sub    esp,0xc
c0021b92:	6a 4c                	push   0x4c
c0021b94:	e8 f3 dc fe ff       	call   c000f88c <malloc>
c0021b99:	83 c4 10             	add    esp,0x10
c0021b9c:	89 c2                	mov    edx,eax
c0021b9e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021ba5:	89 10                	mov    DWORD PTR [eax],edx
c0021ba7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bb0:	83 ec 08             	sub    esp,0x8
c0021bb3:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021bb7:	52                   	push   edx
c0021bb8:	50                   	push   eax
c0021bb9:	e8 d1 43 fe ff       	call   c0005f8f <f_opendir>
c0021bbe:	83 c4 10             	add    esp,0x10
c0021bc1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021bc8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021bd0:	74 07                	je     c0021bd9 <FAT::openDir(char const*, void**)+0x99>
c0021bd2:	b8 01 00 00 00       	mov    eax,0x1
c0021bd7:	eb 05                	jmp    c0021bde <FAT::openDir(char const*, void**)+0x9e>
c0021bd9:	b8 00 00 00 00       	mov    eax,0x0
c0021bde:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021be4:	c3                   	ret    
c0021be5:	90                   	nop

c0021be6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021be6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021bec:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021bf4:	75 0a                	jne    c0021c00 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021bf6:	b8 04 00 00 00       	mov    eax,0x4
c0021bfb:	e9 c9 00 00 00       	jmp    c0021cc9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c00:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021c08:	75 0a                	jne    c0021c14 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021c0a:	b8 04 00 00 00       	mov    eax,0x4
c0021c0f:	e9 b5 00 00 00       	jmp    c0021cc9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c14:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021c1c:	75 0a                	jne    c0021c28 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021c1e:	b8 04 00 00 00       	mov    eax,0x4
c0021c23:	e9 a1 00 00 00       	jmp    c0021cc9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c28:	83 ec 08             	sub    esp,0x8
c0021c2b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021c32:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021c39:	50                   	push   eax
c0021c3a:	e8 cd eb fd ff       	call   c000080c <strcpy>
c0021c3f:	83 c4 10             	add    esp,0x10
c0021c42:	83 ec 08             	sub    esp,0x8
c0021c45:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021c4c:	50                   	push   eax
c0021c4d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021c54:	e8 87 fd ff ff       	call   c00219e0 <FAT::fixFilepath(char*)>
c0021c59:	83 c4 10             	add    esp,0x10
c0021c5c:	83 ec 08             	sub    esp,0x8
c0021c5f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c63:	50                   	push   eax
c0021c64:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021c6b:	50                   	push   eax
c0021c6c:	e8 dd 44 fe ff       	call   c000614e <f_stat>
c0021c71:	83 c4 10             	add    esp,0x10
c0021c74:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021c7b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021c82:	85 c0                	test   eax,eax
c0021c84:	74 07                	je     c0021c8d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021c86:	83 f8 04             	cmp    eax,0x4
c0021c89:	74 32                	je     c0021cbd <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021c8b:	eb 37                	jmp    c0021cc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021c8d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021c91:	0f b6 c0             	movzx  eax,al
c0021c94:	83 e0 10             	and    eax,0x10
c0021c97:	0f 95 c2             	setne  dl
c0021c9a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021ca1:	88 10                	mov    BYTE PTR [eax],dl
c0021ca3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021ca6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021caa:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021cb1:	89 01                	mov    DWORD PTR [ecx],eax
c0021cb3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021cb6:	b8 00 00 00 00       	mov    eax,0x0
c0021cbb:	eb 0c                	jmp    c0021cc9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021cbd:	b8 02 00 00 00       	mov    eax,0x2
c0021cc2:	eb 05                	jmp    c0021cc9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021cc4:	b8 01 00 00 00       	mov    eax,0x1
c0021cc9:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021ccf:	c3                   	ret    

c0021cd0 <FAT::unlink(char const*)>:
c0021cd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021cd6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021cde:	75 07                	jne    c0021ce7 <FAT::unlink(char const*)+0x17>
c0021ce0:	b8 04 00 00 00       	mov    eax,0x4
c0021ce5:	eb 5c                	jmp    c0021d43 <FAT::unlink(char const*)+0x73>
c0021ce7:	83 ec 08             	sub    esp,0x8
c0021cea:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021cf1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021cf5:	50                   	push   eax
c0021cf6:	e8 11 eb fd ff       	call   c000080c <strcpy>
c0021cfb:	83 c4 10             	add    esp,0x10
c0021cfe:	83 ec 08             	sub    esp,0x8
c0021d01:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d05:	50                   	push   eax
c0021d06:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021d0d:	e8 ce fc ff ff       	call   c00219e0 <FAT::fixFilepath(char*)>
c0021d12:	83 c4 10             	add    esp,0x10
c0021d15:	83 ec 0c             	sub    esp,0xc
c0021d18:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d1c:	50                   	push   eax
c0021d1d:	e8 7e 47 fe ff       	call   c00064a0 <f_unlink>
c0021d22:	83 c4 10             	add    esp,0x10
c0021d25:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021d2c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021d33:	85 c0                	test   eax,eax
c0021d35:	75 07                	jne    c0021d3e <FAT::unlink(char const*)+0x6e>
c0021d37:	b8 00 00 00 00       	mov    eax,0x0
c0021d3c:	eb 05                	jmp    c0021d43 <FAT::unlink(char const*)+0x73>
c0021d3e:	b8 01 00 00 00       	mov    eax,0x1
c0021d43:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021d49:	c3                   	ret    

c0021d4a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021d4a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021d50:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021d57:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021d5e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021d62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021d66:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021d6e:	75 0a                	jne    c0021d7a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021d70:	b8 04 00 00 00       	mov    eax,0x4
c0021d75:	e9 1c 01 00 00       	jmp    c0021e96 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021d7a:	83 ec 08             	sub    esp,0x8
c0021d7d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021d84:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d88:	50                   	push   eax
c0021d89:	e8 7e ea fd ff       	call   c000080c <strcpy>
c0021d8e:	83 c4 10             	add    esp,0x10
c0021d91:	83 ec 08             	sub    esp,0x8
c0021d94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021d98:	50                   	push   eax
c0021d99:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021da0:	e8 3b fc ff ff       	call   c00219e0 <FAT::fixFilepath(char*)>
c0021da5:	83 c4 10             	add    esp,0x10
c0021da8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021db0:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021dbd:	83 e0 01             	and    eax,0x1
c0021dc0:	74 08                	je     c0021dca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021dc2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021dca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021dcf:	83 e0 02             	and    eax,0x2
c0021dd2:	74 08                	je     c0021ddc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021dd4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021ddc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021de1:	83 e0 04             	and    eax,0x4
c0021de4:	74 08                	je     c0021dee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021de6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021dee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021df3:	83 e0 08             	and    eax,0x8
c0021df6:	74 08                	je     c0021e00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021df8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021e00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021e05:	83 e0 01             	and    eax,0x1
c0021e08:	74 08                	je     c0021e12 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021e0a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021e12:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021e17:	83 e0 02             	and    eax,0x2
c0021e1a:	74 08                	je     c0021e24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021e1c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021e24:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021e29:	83 e0 04             	and    eax,0x4
c0021e2c:	74 08                	je     c0021e36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021e2e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021e36:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021e3b:	83 e0 08             	and    eax,0x8
c0021e3e:	74 08                	je     c0021e48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021e40:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021e48:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021e4f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021e56:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021e5e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021e66:	83 ec 04             	sub    esp,0x4
c0021e69:	52                   	push   edx
c0021e6a:	50                   	push   eax
c0021e6b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021e6f:	50                   	push   eax
c0021e70:	e8 cd 4c fe ff       	call   c0006b42 <f_chmod>
c0021e75:	83 c4 10             	add    esp,0x10
c0021e78:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021e7f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021e86:	85 c0                	test   eax,eax
c0021e88:	75 07                	jne    c0021e91 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021e8a:	b8 00 00 00 00       	mov    eax,0x0
c0021e8f:	eb 05                	jmp    c0021e96 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021e91:	b8 01 00 00 00       	mov    eax,0x1
c0021e96:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021e9c:	c3                   	ret    
c0021e9d:	90                   	nop

c0021e9e <FAT::rename(char const*, char const*)>:
c0021e9e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021ea4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021eac:	74 0a                	je     c0021eb8 <FAT::rename(char const*, char const*)+0x1a>
c0021eae:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021eb6:	75 0a                	jne    c0021ec2 <FAT::rename(char const*, char const*)+0x24>
c0021eb8:	b8 04 00 00 00       	mov    eax,0x4
c0021ebd:	e9 98 00 00 00       	jmp    c0021f5a <FAT::rename(char const*, char const*)+0xbc>
c0021ec2:	83 ec 08             	sub    esp,0x8
c0021ec5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021ecc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021ed3:	50                   	push   eax
c0021ed4:	e8 33 e9 fd ff       	call   c000080c <strcpy>
c0021ed9:	83 c4 10             	add    esp,0x10
c0021edc:	83 ec 08             	sub    esp,0x8
c0021edf:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021ee6:	50                   	push   eax
c0021ee7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021eee:	e8 ed fa ff ff       	call   c00219e0 <FAT::fixFilepath(char*)>
c0021ef3:	83 c4 10             	add    esp,0x10
c0021ef6:	83 ec 08             	sub    esp,0x8
c0021ef9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021f00:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f04:	50                   	push   eax
c0021f05:	e8 02 e9 fd ff       	call   c000080c <strcpy>
c0021f0a:	83 c4 10             	add    esp,0x10
c0021f0d:	83 ec 08             	sub    esp,0x8
c0021f10:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f14:	50                   	push   eax
c0021f15:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021f1c:	e8 bf fa ff ff       	call   c00219e0 <FAT::fixFilepath(char*)>
c0021f21:	83 c4 10             	add    esp,0x10
c0021f24:	83 ec 08             	sub    esp,0x8
c0021f27:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f2b:	50                   	push   eax
c0021f2c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021f33:	50                   	push   eax
c0021f34:	e8 16 49 fe ff       	call   c000684f <f_rename>
c0021f39:	83 c4 10             	add    esp,0x10
c0021f3c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021f43:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021f4a:	85 c0                	test   eax,eax
c0021f4c:	75 07                	jne    c0021f55 <FAT::rename(char const*, char const*)+0xb7>
c0021f4e:	b8 00 00 00 00       	mov    eax,0x0
c0021f53:	eb 05                	jmp    c0021f5a <FAT::rename(char const*, char const*)+0xbc>
c0021f55:	b8 01 00 00 00       	mov    eax,0x1
c0021f5a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021f60:	c3                   	ret    
c0021f61:	90                   	nop

c0021f62 <FAT::mkdir(char const*)>:
c0021f62:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021f68:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021f70:	75 07                	jne    c0021f79 <FAT::mkdir(char const*)+0x17>
c0021f72:	b8 04 00 00 00       	mov    eax,0x4
c0021f77:	eb 5c                	jmp    c0021fd5 <FAT::mkdir(char const*)+0x73>
c0021f79:	83 ec 08             	sub    esp,0x8
c0021f7c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021f83:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f87:	50                   	push   eax
c0021f88:	e8 7f e8 fd ff       	call   c000080c <strcpy>
c0021f8d:	83 c4 10             	add    esp,0x10
c0021f90:	83 ec 08             	sub    esp,0x8
c0021f93:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f97:	50                   	push   eax
c0021f98:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021f9f:	e8 3c fa ff ff       	call   c00219e0 <FAT::fixFilepath(char*)>
c0021fa4:	83 c4 10             	add    esp,0x10
c0021fa7:	83 ec 0c             	sub    esp,0xc
c0021faa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fae:	50                   	push   eax
c0021faf:	e8 6f 46 fe ff       	call   c0006623 <f_mkdir>
c0021fb4:	83 c4 10             	add    esp,0x10
c0021fb7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021fbe:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021fc5:	85 c0                	test   eax,eax
c0021fc7:	75 07                	jne    c0021fd0 <FAT::mkdir(char const*)+0x6e>
c0021fc9:	b8 00 00 00 00       	mov    eax,0x0
c0021fce:	eb 05                	jmp    c0021fd5 <FAT::mkdir(char const*)+0x73>
c0021fd0:	b8 01 00 00 00       	mov    eax,0x1
c0021fd5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021fdb:	c3                   	ret    

c0021fdc <FAT::exists(char const*)>:
c0021fdc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021fe2:	83 ec 08             	sub    esp,0x8
c0021fe5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021fec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021ff0:	50                   	push   eax
c0021ff1:	e8 16 e8 fd ff       	call   c000080c <strcpy>
c0021ff6:	83 c4 10             	add    esp,0x10
c0021ff9:	83 ec 08             	sub    esp,0x8
c0021ffc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022000:	50                   	push   eax
c0022001:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0022008:	e8 d3 f9 ff ff       	call   c00219e0 <FAT::fixFilepath(char*)>
c002200d:	83 c4 10             	add    esp,0x10
c0022010:	83 ec 08             	sub    esp,0x8
c0022013:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002201a:	50                   	push   eax
c002201b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002201f:	50                   	push   eax
c0022020:	e8 29 41 fe ff       	call   c000614e <f_stat>
c0022025:	83 c4 10             	add    esp,0x10
c0022028:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002202f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0022036:	85 c0                	test   eax,eax
c0022038:	75 04                	jne    c002203e <FAT::exists(char const*)+0x62>
c002203a:	b0 01                	mov    al,0x1
c002203c:	eb 02                	jmp    c0022040 <FAT::exists(char const*)+0x64>
c002203e:	b0 00                	mov    al,0x0
c0022040:	81 c4 2c 02 00 00    	add    esp,0x22c
c0022046:	c3                   	ret    
c0022047:	90                   	nop

c0022048 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0022048:	b8 08 00 00 00       	mov    eax,0x8
c002204d:	c3                   	ret    

c002204e <ISO9660::seek(void*, unsigned long long)>:
c002204e:	53                   	push   ebx
c002204f:	b8 04 00 00 00       	mov    eax,0x4
c0022054:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022058:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002205c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022060:	85 d2                	test   edx,edx
c0022062:	74 17                	je     c002207b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0022064:	89 c8                	mov    eax,ecx
c0022066:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0022069:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002206c:	b8 01 00 00 00       	mov    eax,0x1
c0022071:	73 08                	jae    c002207b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0022073:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0022076:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0022079:	31 c0                	xor    eax,eax
c002207b:	5b                   	pop    ebx
c002207c:	c3                   	ret    
c002207d:	90                   	nop

c002207e <ISO9660::tell(void*, unsigned long long*)>:
c002207e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022086:	85 d2                	test   edx,edx
c0022088:	74 12                	je     c002209c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002208a:	85 c0                	test   eax,eax
c002208c:	74 0e                	je     c002209c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002208e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0022091:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0022094:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022097:	89 10                	mov    DWORD PTR [eax],edx
c0022099:	31 c0                	xor    eax,eax
c002209b:	c3                   	ret    
c002209c:	b8 04 00 00 00       	mov    eax,0x4
c00220a1:	c3                   	ret    

c00220a2 <ISO9660::getName()>:
c00220a2:	b8 74 d8 02 c0       	mov    eax,0xc002d874
c00220a7:	c3                   	ret    

c00220a8 <ISO9660::stat(void*, unsigned long long*)>:
c00220a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220b0:	85 d2                	test   edx,edx
c00220b2:	74 12                	je     c00220c6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00220b4:	85 c0                	test   eax,eax
c00220b6:	74 0e                	je     c00220c6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00220b8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00220bb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00220be:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00220c1:	89 10                	mov    DWORD PTR [eax],edx
c00220c3:	31 c0                	xor    eax,eax
c00220c5:	c3                   	ret    
c00220c6:	b8 04 00 00 00       	mov    eax,0x4
c00220cb:	c3                   	ret    

c00220cc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00220cc:	b8 01 00 00 00       	mov    eax,0x1
c00220d1:	c3                   	ret    

c00220d2 <ISO9660::unlink(char const*)>:
c00220d2:	b8 01 00 00 00       	mov    eax,0x1
c00220d7:	c3                   	ret    

c00220d8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00220d8:	b8 01 00 00 00       	mov    eax,0x1
c00220dd:	c3                   	ret    

c00220de <ISO9660::rename(char const*, char const*)>:
c00220de:	b8 01 00 00 00       	mov    eax,0x1
c00220e3:	c3                   	ret    

c00220e4 <ISO9660::mkdir(char const*)>:
c00220e4:	b8 01 00 00 00       	mov    eax,0x1
c00220e9:	c3                   	ret    

c00220ea <ISO9660::close(void*)>:
c00220ea:	83 ec 0c             	sub    esp,0xc
c00220ed:	b8 04 00 00 00       	mov    eax,0x4
c00220f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220f6:	85 d2                	test   edx,edx
c00220f8:	74 0e                	je     c0022108 <ISO9660::close(void*)+0x1e>
c00220fa:	83 ec 0c             	sub    esp,0xc
c00220fd:	52                   	push   edx
c00220fe:	e8 99 d7 fe ff       	call   c000f89c <free>
c0022103:	83 c4 10             	add    esp,0x10
c0022106:	31 c0                	xor    eax,eax
c0022108:	83 c4 0c             	add    esp,0xc
c002210b:	c3                   	ret    

c002210c <ISO9660::closeDir(void*)>:
c002210c:	83 ec 0c             	sub    esp,0xc
c002210f:	b8 04 00 00 00       	mov    eax,0x4
c0022114:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022118:	85 d2                	test   edx,edx
c002211a:	74 0e                	je     c002212a <ISO9660::closeDir(void*)+0x1e>
c002211c:	83 ec 0c             	sub    esp,0xc
c002211f:	52                   	push   edx
c0022120:	e8 77 d7 fe ff       	call   c000f89c <free>
c0022125:	83 c4 10             	add    esp,0x10
c0022128:	31 c0                	xor    eax,eax
c002212a:	83 c4 0c             	add    esp,0xc
c002212d:	c3                   	ret    

c002212e <ISO9660::~ISO9660()>:
c002212e:	83 ec 0c             	sub    esp,0xc
c0022131:	ba d8 d8 02 c0       	mov    edx,0xc002d8d8
c0022136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002213a:	89 10                	mov    DWORD PTR [eax],edx
c002213c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022140:	83 ec 0c             	sub    esp,0xc
c0022143:	50                   	push   eax
c0022144:	e8 1d 10 ff ff       	call   c0013166 <Filesystem::~Filesystem()>
c0022149:	83 c4 10             	add    esp,0x10
c002214c:	90                   	nop
c002214d:	83 c4 0c             	add    esp,0xc
c0022150:	c3                   	ret    
c0022151:	90                   	nop

c0022152 <ISO9660::~ISO9660()>:
c0022152:	83 ec 0c             	sub    esp,0xc
c0022155:	83 ec 0c             	sub    esp,0xc
c0022158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002215c:	e8 cd ff ff ff       	call   c002212e <ISO9660::~ISO9660()>
c0022161:	83 c4 10             	add    esp,0x10
c0022164:	83 ec 08             	sub    esp,0x8
c0022167:	6a 08                	push   0x8
c0022169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002216d:	e8 e5 0b ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0022172:	83 c4 10             	add    esp,0x10
c0022175:	83 c4 0c             	add    esp,0xc
c0022178:	c3                   	ret    

c0022179 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0022179:	55                   	push   ebp
c002217a:	31 c9                	xor    ecx,ecx
c002217c:	57                   	push   edi
c002217d:	56                   	push   esi
c002217e:	53                   	push   ebx
c002217f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0022183:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0022187:	89 eb                	mov    ebx,ebp
c0022189:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002218d:	39 ce                	cmp    esi,ecx
c002218f:	7e 17                	jle    c00221a8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0022191:	31 d2                	xor    edx,edx
c0022193:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0022197:	7d 13                	jge    c00221ac <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0022199:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002219d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00221a0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00221a3:	75 0d                	jne    c00221b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00221a5:	42                   	inc    edx
c00221a6:	eb eb                	jmp    c0022193 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00221a8:	31 c0                	xor    eax,eax
c00221aa:	eb 0a                	jmp    c00221b6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00221ac:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00221b0:	eb 04                	jmp    c00221b6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00221b2:	41                   	inc    ecx
c00221b3:	43                   	inc    ebx
c00221b4:	eb d7                	jmp    c002218d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00221b6:	5b                   	pop    ebx
c00221b7:	5e                   	pop    esi
c00221b8:	5f                   	pop    edi
c00221b9:	5d                   	pop    ebp
c00221ba:	c3                   	ret    

c00221bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00221bb:	57                   	push   edi
c00221bc:	56                   	push   esi
c00221bd:	53                   	push   ebx
c00221be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00221c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00221c6:	39 0d 40 2b 03 c0    	cmp    DWORD PTR ds:0xc0032b40,ecx
c00221cc:	75 08                	jne    c00221d6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00221ce:	38 05 94 e9 02 c0    	cmp    BYTE PTR ds:0xc002e994,al
c00221d4:	74 2b                	je     c0022201 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00221d6:	83 ec 0c             	sub    esp,0xc
c00221d9:	a2 94 e9 02 c0       	mov    ds:0xc002e994,al
c00221de:	68 60 2b 03 c0       	push   0xc0032b60
c00221e3:	0f be c0             	movsx  eax,al
c00221e6:	6a 01                	push   0x1
c00221e8:	89 0d 40 2b 03 c0    	mov    DWORD PTR ds:0xc0032b40,ecx
c00221ee:	31 db                	xor    ebx,ebx
c00221f0:	53                   	push   ebx
c00221f1:	51                   	push   ecx
c00221f2:	ff 34 85 1c f9 02 c0 	push   DWORD PTR [eax*4-0x3ffd06e4]
c00221f9:	e8 dc 45 ff ff       	call   c00167da <LogicalDisk::read(unsigned long long, int, void*)>
c00221fe:	83 c4 20             	add    esp,0x20
c0022201:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022205:	be 60 2b 03 c0       	mov    esi,0xc0032b60
c002220a:	b9 00 08 00 00       	mov    ecx,0x800
c002220f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022211:	5b                   	pop    ebx
c0022212:	5e                   	pop    esi
c0022213:	5f                   	pop    edi
c0022214:	c3                   	ret    
c0022215:	90                   	nop

c0022216 <ISO9660::tryMount(LogicalDisk*, int)>:
c0022216:	81 ec 10 08 00 00    	sub    esp,0x810
c002221c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0022223:	83 c0 41             	add    eax,0x41
c0022226:	0f be c0             	movsx  eax,al
c0022229:	50                   	push   eax
c002222a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002222e:	50                   	push   eax
c002222f:	6a 10                	push   0x10
c0022231:	e8 85 ff ff ff       	call   c00221bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022236:	83 c4 10             	add    esp,0x10
c0022239:	31 c0                	xor    eax,eax
c002223b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0022240:	75 1d                	jne    c002225f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022242:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0022247:	75 16                	jne    c002225f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022249:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002224e:	75 0f                	jne    c002225f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022250:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0022255:	75 08                	jne    c002225f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022257:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002225c:	0f 94 c0             	sete   al
c002225f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0022265:	c3                   	ret    

c0022266 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0022266:	55                   	push   ebp
c0022267:	57                   	push   edi
c0022268:	56                   	push   esi
c0022269:	53                   	push   ebx
c002226a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0022270:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0022277:	85 ed                	test   ebp,ebp
c0022279:	0f 84 da 01 00 00    	je     c0022459 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002227f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0022287:	0f 84 cc 01 00 00    	je     c0022459 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002228d:	b8 01 00 00 00       	mov    eax,0x1
c0022292:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0022296:	0f 85 c2 01 00 00    	jne    c002245e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002229c:	31 d2                	xor    edx,edx
c002229e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00222a5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00222a8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00222ab:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00222ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00222b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00222b5:	01 c8                	add    eax,ecx
c00222b7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00222ba:	11 da                	adc    edx,ebx
c00222bc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00222c0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00222c4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00222c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00222cc:	19 d7                	sbb    edi,edx
c00222ce:	72 11                	jb     c00222e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00222d0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00222d3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00222d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222df:	eb 0c                	jmp    c00222ed <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00222e1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00222e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00222e9:	29 ce                	sub    esi,ecx
c00222eb:	19 df                	sbb    edi,ebx
c00222ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00222f0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00222f3:	0f a4 c2 0b          	shld   edx,eax,0xb
c00222f7:	c1 e0 0b             	shl    eax,0xb
c00222fa:	01 c8                	add    eax,ecx
c00222fc:	11 da                	adc    edx,ebx
c00222fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0022301:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022305:	51                   	push   ecx
c0022306:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002230a:	50                   	push   eax
c002230b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002230f:	53                   	push   ebx
c0022310:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022318:	0f ac d0 0b          	shrd   eax,edx,0xb
c002231c:	50                   	push   eax
c002231d:	e8 99 fe ff ff       	call   c00221bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022322:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022325:	b8 00 08 00 00       	mov    eax,0x800
c002232a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0022330:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0022334:	29 d0                	sub    eax,edx
c0022336:	83 c4 10             	add    esp,0x10
c0022339:	89 f9                	mov    ecx,edi
c002233b:	39 c6                	cmp    esi,eax
c002233d:	83 d9 00             	sbb    ecx,0x0
c0022340:	7d 1b                	jge    c002235d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0022342:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022347:	75 12                	jne    c002235b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0022349:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022350:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022356:	e9 fa 00 00 00       	jmp    c0022455 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002235b:	89 f0                	mov    eax,esi
c002235d:	01 d3                	add    ebx,edx
c002235f:	31 d2                	xor    edx,edx
c0022361:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0022365:	39 c2                	cmp    edx,eax
c0022367:	7d 14                	jge    c002237d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0022369:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0022370:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022374:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0022377:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002237a:	42                   	inc    edx
c002237b:	eb e8                	jmp    c0022365 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002237d:	89 c2                	mov    edx,eax
c002237f:	85 c0                	test   eax,eax
c0022381:	79 02                	jns    c0022385 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0022383:	31 d2                	xor    edx,edx
c0022385:	01 c2                	add    edx,eax
c0022387:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002238a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0022391:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0022395:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0022399:	99                   	cdq    
c002239a:	01 c1                	add    ecx,eax
c002239c:	11 d3                	adc    ebx,edx
c002239e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00223a2:	29 c6                	sub    esi,eax
c00223a4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00223a8:	19 d7                	sbb    edi,edx
c00223aa:	89 34 24             	mov    DWORD PTR [esp],esi
c00223ad:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00223b1:	b8 ff 07 00 00       	mov    eax,0x7ff
c00223b6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00223b9:	b8 00 00 00 00       	mov    eax,0x0
c00223be:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00223c2:	7d 43                	jge    c0022407 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00223c4:	52                   	push   edx
c00223c5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00223c9:	50                   	push   eax
c00223ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00223ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00223d2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00223d6:	0f ac d0 0b          	shrd   eax,edx,0xb
c00223da:	50                   	push   eax
c00223db:	e8 db fd ff ff       	call   c00221bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00223e0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00223e8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00223ed:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00223f5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00223fd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0022402:	83 c4 10             	add    esp,0x10
c0022405:	eb aa                	jmp    c00223b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0022407:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002240b:	0b 04 24             	or     eax,DWORD PTR [esp]
c002240e:	74 2a                	je     c002243a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0022410:	50                   	push   eax
c0022411:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022415:	50                   	push   eax
c0022416:	8d 74 24 28          	lea    esi,[esp+0x28]
c002241a:	56                   	push   esi
c002241b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002241f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022423:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0022427:	51                   	push   ecx
c0022428:	e8 8e fd ff ff       	call   c00221bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002242d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022431:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022435:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022437:	83 c4 10             	add    esp,0x10
c002243a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022441:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022445:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022449:	89 18                	mov    DWORD PTR [eax],ebx
c002244b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002244f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022452:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022455:	31 c0                	xor    eax,eax
c0022457:	eb 05                	jmp    c002245e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0022459:	b8 04 00 00 00       	mov    eax,0x4
c002245e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022464:	5b                   	pop    ebx
c0022465:	5e                   	pop    esi
c0022466:	5f                   	pop    edi
c0022467:	5d                   	pop    ebp
c0022468:	c3                   	ret    
c0022469:	90                   	nop

c002246a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002246a:	55                   	push   ebp
c002246b:	57                   	push   edi
c002246c:	56                   	push   esi
c002246d:	53                   	push   ebx
c002246e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0022474:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002247b:	85 ed                	test   ebp,ebp
c002247d:	0f 84 51 02 00 00    	je     c00226d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0022483:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002248b:	0f 84 43 02 00 00    	je     c00226d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0022491:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022494:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0022497:	75 0a                	jne    c00224a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0022499:	b8 07 00 00 00       	mov    eax,0x7
c002249e:	e9 36 02 00 00       	jmp    c00226d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00224a3:	50                   	push   eax
c00224a4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00224a8:	50                   	push   eax
c00224a9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00224b0:	53                   	push   ebx
c00224b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00224b4:	c1 e0 0b             	shl    eax,0xb
c00224b7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00224ba:	c1 e8 0b             	shr    eax,0xb
c00224bd:	50                   	push   eax
c00224be:	e8 f8 fc ff ff       	call   c00221bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00224c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00224c6:	83 c4 10             	add    esp,0x10
c00224c9:	89 c1                	mov    ecx,eax
c00224cb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00224ce:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00224d4:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00224d7:	84 db                	test   bl,bl
c00224d9:	0f 85 8b 00 00 00    	jne    c002256a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00224df:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00224e5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00224e8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00224ee:	29 c6                	sub    esi,eax
c00224f0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00224f4:	89 f3                	mov    ebx,esi
c00224f6:	89 f1                	mov    ecx,esi
c00224f8:	c1 fb 1f             	sar    ebx,0x1f
c00224fb:	01 f0                	add    eax,esi
c00224fd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0022500:	11 da                	adc    edx,ebx
c0022502:	89 04 24             	mov    DWORD PTR [esp],eax
c0022505:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022509:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002250c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002250f:	89 d8                	mov    eax,ebx
c0022511:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0022515:	ba 00 00 00 00       	mov    edx,0x0
c002251a:	19 f8                	sbb    eax,edi
c002251c:	b8 00 00 00 00       	mov    eax,0x0
c0022521:	73 08                	jae    c002252b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0022523:	89 f0                	mov    eax,esi
c0022525:	89 fa                	mov    edx,edi
c0022527:	29 c8                	sub    eax,ecx
c0022529:	19 da                	sbb    edx,ebx
c002252b:	89 d7                	mov    edi,edx
c002252d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022530:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022533:	09 c7                	or     edi,eax
c0022535:	0f 84 5e ff ff ff    	je     c0022499 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002253b:	57                   	push   edi
c002253c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022540:	50                   	push   eax
c0022541:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022548:	53                   	push   ebx
c0022549:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002254c:	c1 e0 0b             	shl    eax,0xb
c002254f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0022553:	c1 e8 0b             	shr    eax,0xb
c0022556:	50                   	push   eax
c0022557:	e8 5f fc ff ff       	call   c00221bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002255c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002255f:	83 c4 10             	add    esp,0x10
c0022562:	25 ff 07 00 00       	and    eax,0x7ff
c0022567:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002256a:	31 ff                	xor    edi,edi
c002256c:	56                   	push   esi
c002256d:	6a 28                	push   0x28
c002256f:	6a 00                	push   0x0
c0022571:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022575:	50                   	push   eax
c0022576:	e8 d5 e1 fd ff       	call   c0000750 <memset>
c002257b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002257e:	25 ff 07 00 00       	and    eax,0x7ff
c0022583:	89 c6                	mov    esi,eax
c0022585:	83 c6 21             	add    esi,0x21
c0022588:	83 d7 00             	adc    edi,0x0
c002258b:	83 c4 10             	add    esp,0x10
c002258e:	31 c9                	xor    ecx,ecx
c0022590:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0022597:	83 f9 28             	cmp    ecx,0x28
c002259a:	88 04 24             	mov    BYTE PTR [esp],al
c002259d:	0f 94 c2             	sete   dl
c00225a0:	88 d0                	mov    al,dl
c00225a2:	ba ff 07 00 00       	mov    edx,0x7ff
c00225a7:	39 f2                	cmp    edx,esi
c00225a9:	ba 00 00 00 00       	mov    edx,0x0
c00225ae:	19 fa                	sbb    edx,edi
c00225b0:	0f 92 c2             	setb   dl
c00225b3:	09 c2                	or     edx,eax
c00225b5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00225b9:	0f 94 c0             	sete   al
c00225bc:	08 d0                	or     al,dl
c00225be:	75 16                	jne    c00225d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00225c0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00225c4:	74 10                	je     c00225d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00225c6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00225c9:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00225cd:	41                   	inc    ecx
c00225ce:	83 c6 01             	add    esi,0x1
c00225d1:	83 d7 00             	adc    edi,0x0
c00225d4:	eb ba                	jmp    c0022590 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00225d6:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00225dd:	83 ec 0c             	sub    esp,0xc
c00225e0:	8d 74 24 24          	lea    esi,[esp+0x24]
c00225e4:	56                   	push   esi
c00225e5:	e8 82 e1 fd ff       	call   c000076c <strlen>
c00225ea:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00225f1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00225f5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00225fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022600:	5a                   	pop    edx
c0022601:	25 ff 07 00 00       	and    eax,0x7ff
c0022606:	59                   	pop    ecx
c0022607:	01 f8                	add    eax,edi
c0022609:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002260f:	83 e0 02             	and    eax,0x2
c0022612:	3c 01                	cmp    al,0x1
c0022614:	19 c0                	sbb    eax,eax
c0022616:	83 c0 02             	add    eax,0x2
c0022619:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002261d:	56                   	push   esi
c002261e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022622:	50                   	push   eax
c0022623:	e8 e4 e1 fd ff       	call   c000080c <strcpy>
c0022628:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002262c:	83 c4 10             	add    esp,0x10
c002262f:	84 c0                	test   al,al
c0022631:	75 21                	jne    c0022654 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0022633:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002263b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022643:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002264b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022652:	eb 28                	jmp    c002267c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022654:	fe c8                	dec    al
c0022656:	75 24                	jne    c002267c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022658:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022660:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022668:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022670:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0022677:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002267c:	8d 74 24 40          	lea    esi,[esp+0x40]
c0022680:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0022687:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002268e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022690:	0f b6 f3             	movzx  esi,bl
c0022693:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002269a:	31 db                	xor    ebx,ebx
c002269c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00226a2:	89 df                	mov    edi,ebx
c00226a4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00226a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00226aa:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00226ad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00226b0:	39 c6                	cmp    esi,eax
c00226b2:	19 d7                	sbb    edi,edx
c00226b4:	72 10                	jb     c00226c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00226b6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00226bd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00226c4:	eb 0a                	jmp    c00226d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00226c6:	29 f0                	sub    eax,esi
c00226c8:	19 da                	sbb    edx,ebx
c00226ca:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00226cd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00226d0:	31 c0                	xor    eax,eax
c00226d2:	eb 05                	jmp    c00226d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00226d4:	b8 04 00 00 00       	mov    eax,0x4
c00226d9:	81 c4 5c 09 00 00    	add    esp,0x95c
c00226df:	5b                   	pop    ebx
c00226e0:	5e                   	pop    esi
c00226e1:	5f                   	pop    edi
c00226e2:	5d                   	pop    ebp
c00226e3:	c3                   	ret    

c00226e4 <readRoot(unsigned int*, unsigned int*, char)>:
c00226e4:	57                   	push   edi
c00226e5:	56                   	push   esi
c00226e6:	81 ec 38 08 00 00    	sub    esp,0x838
c00226ec:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00226f4:	50                   	push   eax
c00226f5:	8d 44 24 38          	lea    eax,[esp+0x38]
c00226f9:	50                   	push   eax
c00226fa:	6a 10                	push   0x10
c00226fc:	e8 ba fa ff ff       	call   c00221bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022701:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0022708:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c002270c:	b9 22 00 00 00       	mov    ecx,0x22
c0022711:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022713:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002271a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002271e:	89 10                	mov    DWORD PTR [eax],edx
c0022720:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0022727:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002272b:	89 10                	mov    DWORD PTR [eax],edx
c002272d:	81 c4 44 08 00 00    	add    esp,0x844
c0022733:	b0 01                	mov    al,0x1
c0022735:	5e                   	pop    esi
c0022736:	5f                   	pop    edi
c0022737:	c3                   	ret    

c0022738 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0022738:	55                   	push   ebp
c0022739:	57                   	push   edi
c002273a:	56                   	push   esi
c002273b:	53                   	push   ebx
c002273c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0022742:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0022749:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022750:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022754:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0022758:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002275c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022760:	75 03                	jne    c0022765 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022762:	83 c3 02             	add    ebx,0x2
c0022765:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0022768:	75 03                	jne    c002276d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002276a:	43                   	inc    ebx
c002276b:	eb f8                	jmp    c0022765 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002276d:	51                   	push   ecx
c002276e:	68 00 01 00 00       	push   0x100
c0022773:	6a 00                	push   0x0
c0022775:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022779:	50                   	push   eax
c002277a:	e8 d1 df fd ff       	call   c0000750 <memset>
c002277f:	83 c4 10             	add    esp,0x10
c0022782:	31 d2                	xor    edx,edx
c0022784:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022787:	84 c0                	test   al,al
c0022789:	74 21                	je     c00227ac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002278b:	3c 2f                	cmp    al,0x2f
c002278d:	75 0b                	jne    c002279a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002278f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0022793:	bd 01 00 00 00       	mov    ebp,0x1
c0022798:	eb 14                	jmp    c00227ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002279a:	8d 48 9f             	lea    ecx,[eax-0x61]
c002279d:	80 f9 19             	cmp    cl,0x19
c00227a0:	77 03                	ja     c00227a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00227a2:	83 e8 20             	sub    eax,0x20
c00227a5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00227a9:	42                   	inc    edx
c00227aa:	eb d8                	jmp    c0022784 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00227ac:	31 ed                	xor    ebp,ebp
c00227ae:	83 ec 0c             	sub    esp,0xc
c00227b1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00227b8:	e8 cf d0 fe ff       	call   c000f88c <malloc>
c00227bd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00227c4:	89 c6                	mov    esi,eax
c00227c6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00227cc:	c1 ef 0b             	shr    edi,0xb
c00227cf:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00227d6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00227da:	83 c4 10             	add    esp,0x10
c00227dd:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00227e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00227e6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00227ed:	74 28                	je     c0022817 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00227ef:	52                   	push   edx
c00227f0:	57                   	push   edi
c00227f1:	50                   	push   eax
c00227f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00227f6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00227fd:	e8 b9 f9 ff ff       	call   c00221bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022802:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022806:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002280d:	05 00 08 00 00       	add    eax,0x800
c0022812:	83 c4 10             	add    esp,0x10
c0022815:	eb cb                	jmp    c00227e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022817:	83 ec 0c             	sub    esp,0xc
c002281a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002281e:	57                   	push   edi
c002281f:	e8 48 df fd ff       	call   c000076c <strlen>
c0022824:	50                   	push   eax
c0022825:	57                   	push   edi
c0022826:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002282d:	56                   	push   esi
c002282e:	e8 46 f9 ff ff       	call   c0022179 <__memmem(unsigned char*, int, unsigned char*, int)>
c0022833:	83 c4 20             	add    esp,0x20
c0022836:	85 c0                	test   eax,eax
c0022838:	75 13                	jne    c002284d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002283a:	83 ec 0c             	sub    esp,0xc
c002283d:	56                   	push   esi
c002283e:	e8 59 d0 fe ff       	call   c000f89c <free>
c0022843:	83 c4 10             	add    esp,0x10
c0022846:	31 c0                	xor    eax,eax
c0022848:	e9 b3 00 00 00       	jmp    c0022900 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002284d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022851:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022855:	c1 e7 08             	shl    edi,0x8
c0022858:	c1 e2 10             	shl    edx,0x10
c002285b:	09 d7                	or     edi,edx
c002285d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022861:	09 d7                	or     edi,edx
c0022863:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022867:	c1 e2 18             	shl    edx,0x18
c002286a:	09 d7                	or     edi,edx
c002286c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022870:	89 d1                	mov    ecx,edx
c0022872:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022876:	c1 e1 08             	shl    ecx,0x8
c0022879:	c1 e2 10             	shl    edx,0x10
c002287c:	09 ca                	or     edx,ecx
c002287e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022882:	09 ca                	or     edx,ecx
c0022884:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022888:	c1 e1 18             	shl    ecx,0x18
c002288b:	09 ca                	or     edx,ecx
c002288d:	89 e9                	mov    ecx,ebp
c002288f:	84 c9                	test   cl,cl
c0022891:	74 3c                	je     c00228cf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022893:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022897:	83 ec 0c             	sub    esp,0xc
c002289a:	56                   	push   esi
c002289b:	e8 fc cf fe ff       	call   c000f89c <free>
c00228a0:	83 c4 0c             	add    esp,0xc
c00228a3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00228aa:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00228af:	50                   	push   eax
c00228b0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00228b7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00228be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00228c2:	52                   	push   edx
c00228c3:	57                   	push   edi
c00228c4:	53                   	push   ebx
c00228c5:	e8 6e fe ff ff       	call   c0022738 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00228ca:	83 c4 20             	add    esp,0x20
c00228cd:	eb 31                	jmp    c0022900 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00228cf:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00228d2:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00228d9:	d0 e8                	shr    al,1
c00228db:	89 3b                	mov    DWORD PTR [ebx],edi
c00228dd:	83 e0 01             	and    eax,0x1
c00228e0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00228e7:	83 ec 0c             	sub    esp,0xc
c00228ea:	89 13                	mov    DWORD PTR [ebx],edx
c00228ec:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00228f3:	89 03                	mov    DWORD PTR [ebx],eax
c00228f5:	56                   	push   esi
c00228f6:	e8 a1 cf fe ff       	call   c000f89c <free>
c00228fb:	83 c4 10             	add    esp,0x10
c00228fe:	b0 01                	mov    al,0x1
c0022900:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022906:	5b                   	pop    ebx
c0022907:	5e                   	pop    esi
c0022908:	5f                   	pop    edi
c0022909:	5d                   	pop    ebp
c002290a:	c3                   	ret    

c002290b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002290b:	55                   	push   ebp
c002290c:	57                   	push   edi
c002290d:	56                   	push   esi
c002290e:	53                   	push   ebx
c002290f:	83 ec 20             	sub    esp,0x20
c0022912:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022916:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002291a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002291e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022926:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002292e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022933:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022939:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002293f:	57                   	push   edi
c0022940:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022944:	50                   	push   eax
c0022945:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022949:	50                   	push   eax
c002294a:	e8 95 fd ff ff       	call   c00226e4 <readRoot(unsigned int*, unsigned int*, char)>
c002294f:	5a                   	pop    edx
c0022950:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022954:	e8 13 de fd ff       	call   c000076c <strlen>
c0022959:	83 c4 10             	add    esp,0x10
c002295c:	83 f8 03             	cmp    eax,0x3
c002295f:	77 17                	ja     c0022978 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022961:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022965:	89 03                	mov    DWORD PTR [ebx],eax
c0022967:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002296b:	89 06                	mov    DWORD PTR [esi],eax
c002296d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022974:	b0 01                	mov    al,0x1
c0022976:	eb 19                	jmp    c0022991 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022978:	50                   	push   eax
c0022979:	55                   	push   ebp
c002297a:	57                   	push   edi
c002297b:	56                   	push   esi
c002297c:	53                   	push   ebx
c002297d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022981:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022985:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022989:	e8 aa fd ff ff       	call   c0022738 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002298e:	83 c4 20             	add    esp,0x20
c0022991:	83 c4 1c             	add    esp,0x1c
c0022994:	5b                   	pop    ebx
c0022995:	5e                   	pop    esi
c0022996:	5f                   	pop    edi
c0022997:	5d                   	pop    ebp
c0022998:	c3                   	ret    
c0022999:	90                   	nop

c002299a <ISO9660::open(char const*, void**, FileOpenMode)>:
c002299a:	57                   	push   edi
c002299b:	56                   	push   esi
c002299c:	53                   	push   ebx
c002299d:	83 ec 10             	sub    esp,0x10
c00229a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00229a4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00229a8:	85 ff                	test   edi,edi
c00229aa:	0f 84 9d 00 00 00    	je     c0022a4d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00229b0:	85 f6                	test   esi,esi
c00229b2:	0f 84 95 00 00 00    	je     c0022a4d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00229b8:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00229bd:	74 17                	je     c00229d6 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00229bf:	83 ec 0c             	sub    esp,0xc
c00229c2:	68 8f d8 02 c0       	push   0xc002d88f
c00229c7:	e8 6b 04 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00229cc:	83 c4 10             	add    esp,0x10
c00229cf:	b8 03 00 00 00       	mov    eax,0x3
c00229d4:	eb 7c                	jmp    c0022a52 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00229d6:	83 ec 0c             	sub    esp,0xc
c00229d9:	6a 1c                	push   0x1c
c00229db:	e8 ac ce fe ff       	call   c000f88c <malloc>
c00229e0:	89 07                	mov    DWORD PTR [edi],eax
c00229e2:	89 c3                	mov    ebx,eax
c00229e4:	58                   	pop    eax
c00229e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00229e9:	50                   	push   eax
c00229ea:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00229ed:	50                   	push   eax
c00229ee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229f2:	50                   	push   eax
c00229f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229f7:	50                   	push   eax
c00229f8:	56                   	push   esi
c00229f9:	e8 0d ff ff ff       	call   c002290b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00229fe:	83 c4 20             	add    esp,0x20
c0022a01:	84 c0                	test   al,al
c0022a03:	74 07                	je     c0022a0c <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022a05:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022a0a:	74 0b                	je     c0022a17 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022a0c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022a10:	b8 01 00 00 00       	mov    eax,0x1
c0022a15:	eb 3b                	jmp    c0022a52 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022a17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a1b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022a1f:	89 03                	mov    DWORD PTR [ebx],eax
c0022a21:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022a28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022a2c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022a33:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a3a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022a3d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022a44:	8a 06                	mov    al,BYTE PTR [esi]
c0022a46:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022a49:	31 c0                	xor    eax,eax
c0022a4b:	eb 05                	jmp    c0022a52 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022a4d:	b8 04 00 00 00       	mov    eax,0x4
c0022a52:	83 c4 10             	add    esp,0x10
c0022a55:	5b                   	pop    ebx
c0022a56:	5e                   	pop    esi
c0022a57:	5f                   	pop    edi
c0022a58:	c3                   	ret    
c0022a59:	90                   	nop

c0022a5a <ISO9660::exists(char const*)>:
c0022a5a:	83 ec 28             	sub    esp,0x28
c0022a5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a61:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022a65:	52                   	push   edx
c0022a66:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022a69:	52                   	push   edx
c0022a6a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022a6e:	52                   	push   edx
c0022a6f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022a73:	52                   	push   edx
c0022a74:	50                   	push   eax
c0022a75:	e8 91 fe ff ff       	call   c002290b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022a7a:	83 c4 3c             	add    esp,0x3c
c0022a7d:	c3                   	ret    

c0022a7e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022a7e:	56                   	push   esi
c0022a7f:	53                   	push   ebx
c0022a80:	83 ec 14             	sub    esp,0x14
c0022a83:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022a87:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022a8b:	85 db                	test   ebx,ebx
c0022a8d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022a91:	0f 94 c2             	sete   dl
c0022a94:	85 f6                	test   esi,esi
c0022a96:	0f 94 c0             	sete   al
c0022a99:	08 c2                	or     dl,al
c0022a9b:	75 68                	jne    c0022b05 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022a9d:	85 c9                	test   ecx,ecx
c0022a9f:	74 64                	je     c0022b05 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022aa1:	83 ec 0c             	sub    esp,0xc
c0022aa4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022aa7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022aab:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022ab1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022ab8:	50                   	push   eax
c0022ab9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022abc:	50                   	push   eax
c0022abd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022ac1:	50                   	push   eax
c0022ac2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022ac6:	50                   	push   eax
c0022ac7:	51                   	push   ecx
c0022ac8:	e8 3e fe ff ff       	call   c002290b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022acd:	83 c4 20             	add    esp,0x20
c0022ad0:	ba 01 00 00 00       	mov    edx,0x1
c0022ad5:	84 c0                	test   al,al
c0022ad7:	74 31                	je     c0022b0a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022ad9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022add:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022ae4:	89 03                	mov    DWORD PTR [ebx],eax
c0022ae6:	ba 00 00 00 00       	mov    edx,0x0
c0022aeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022aef:	85 c0                	test   eax,eax
c0022af1:	0f 95 06             	setne  BYTE PTR [esi]
c0022af4:	74 14                	je     c0022b0a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022af6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022afc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022b03:	eb 05                	jmp    c0022b0a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022b05:	ba 04 00 00 00       	mov    edx,0x4
c0022b0a:	83 c4 14             	add    esp,0x14
c0022b0d:	89 d0                	mov    eax,edx
c0022b0f:	5b                   	pop    ebx
c0022b10:	5e                   	pop    esi
c0022b11:	c3                   	ret    

c0022b12 <ISO9660::openDir(char const*, void**)>:
c0022b12:	57                   	push   edi
c0022b13:	56                   	push   esi
c0022b14:	53                   	push   ebx
c0022b15:	83 ec 10             	sub    esp,0x10
c0022b18:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022b1c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022b20:	85 ff                	test   edi,edi
c0022b22:	0f 84 95 00 00 00    	je     c0022bbd <ISO9660::openDir(char const*, void**)+0xab>
c0022b28:	85 f6                	test   esi,esi
c0022b2a:	0f 84 8d 00 00 00    	je     c0022bbd <ISO9660::openDir(char const*, void**)+0xab>
c0022b30:	83 ec 0c             	sub    esp,0xc
c0022b33:	6a 1c                	push   0x1c
c0022b35:	e8 52 cd fe ff       	call   c000f88c <malloc>
c0022b3a:	89 07                	mov    DWORD PTR [edi],eax
c0022b3c:	89 c3                	mov    ebx,eax
c0022b3e:	59                   	pop    ecx
c0022b3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022b43:	50                   	push   eax
c0022b44:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022b47:	50                   	push   eax
c0022b48:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022b4c:	50                   	push   eax
c0022b4d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022b51:	50                   	push   eax
c0022b52:	56                   	push   esi
c0022b53:	e8 b3 fd ff ff       	call   c002290b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022b58:	83 c4 20             	add    esp,0x20
c0022b5b:	84 c0                	test   al,al
c0022b5d:	74 07                	je     c0022b66 <ISO9660::openDir(char const*, void**)+0x54>
c0022b5f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022b64:	75 21                	jne    c0022b87 <ISO9660::openDir(char const*, void**)+0x75>
c0022b66:	0f b6 c0             	movzx  eax,al
c0022b69:	52                   	push   edx
c0022b6a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022b6e:	50                   	push   eax
c0022b6f:	68 b5 d8 02 c0       	push   0xc002d8b5
c0022b74:	e8 be 02 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0022b79:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022b7d:	83 c4 10             	add    esp,0x10
c0022b80:	b8 01 00 00 00       	mov    eax,0x1
c0022b85:	eb 3b                	jmp    c0022bc2 <ISO9660::openDir(char const*, void**)+0xb0>
c0022b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b8b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022b8f:	89 03                	mov    DWORD PTR [ebx],eax
c0022b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022b98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022b9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022ba3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022baa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022bad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022bb4:	8a 06                	mov    al,BYTE PTR [esi]
c0022bb6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022bb9:	31 c0                	xor    eax,eax
c0022bbb:	eb 05                	jmp    c0022bc2 <ISO9660::openDir(char const*, void**)+0xb0>
c0022bbd:	b8 04 00 00 00       	mov    eax,0x4
c0022bc2:	83 c4 10             	add    esp,0x10
c0022bc5:	5b                   	pop    ebx
c0022bc6:	5e                   	pop    esi
c0022bc7:	5f                   	pop    edi
c0022bc8:	c3                   	ret    
c0022bc9:	90                   	nop

c0022bca <ISO9660::ISO9660()>:
c0022bca:	83 ec 0c             	sub    esp,0xc
c0022bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd1:	83 ec 0c             	sub    esp,0xc
c0022bd4:	50                   	push   eax
c0022bd5:	e8 68 05 ff ff       	call   c0013142 <Filesystem::Filesystem()>
c0022bda:	83 c4 10             	add    esp,0x10
c0022bdd:	ba d8 d8 02 c0       	mov    edx,0xc002d8d8
c0022be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be6:	89 10                	mov    DWORD PTR [eax],edx
c0022be8:	90                   	nop
c0022be9:	83 c4 0c             	add    esp,0xc
c0022bec:	c3                   	ret    
c0022bed:	90                   	nop

c0022bee <SoundChannel::~SoundChannel()>:
c0022bee:	83 ec 0c             	sub    esp,0xc
c0022bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bf5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022bf8:	83 ec 0c             	sub    esp,0xc
c0022bfb:	50                   	push   eax
c0022bfc:	e8 9b cc fe ff       	call   c000f89c <free>
c0022c01:	83 c4 10             	add    esp,0x10
c0022c04:	90                   	nop
c0022c05:	83 c4 0c             	add    esp,0xc
c0022c08:	c3                   	ret    
c0022c09:	90                   	nop

c0022c0a <SoundChannel::setSpeed(float)>:
c0022c0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022c12:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022c15:	c3                   	ret    

c0022c16 <SoundChannel::getSpeed()>:
c0022c16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c1a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022c1d:	c3                   	ret    

c0022c1e <SoundChannel::setVolume(int)>:
c0022c1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c22:	83 f8 64             	cmp    eax,0x64
c0022c25:	7e 05                	jle    c0022c2c <SoundChannel::setVolume(int)+0xe>
c0022c27:	b8 64 00 00 00       	mov    eax,0x64
c0022c2c:	85 c0                	test   eax,eax
c0022c2e:	79 02                	jns    c0022c32 <SoundChannel::setVolume(int)+0x14>
c0022c30:	31 c0                	xor    eax,eax
c0022c32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022c36:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022c39:	c3                   	ret    

c0022c3a <SoundChannel::getVolume()>:
c0022c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c3e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022c41:	c3                   	ret    

c0022c42 <SoundChannel::pause()>:
c0022c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c46:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022c4a:	c3                   	ret    
c0022c4b:	90                   	nop

c0022c4c <SoundChannel::SoundChannel(int, int, int, int)>:
c0022c4c:	83 ec 1c             	sub    esp,0x1c
c0022c4f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022c53:	e8 ea ff ff ff       	call   c0022c42 <SoundChannel::pause()>
c0022c58:	83 c4 04             	add    esp,0x4
c0022c5b:	6a 50                	push   0x50
c0022c5d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022c61:	e8 b8 ff ff ff       	call   c0022c1e <SoundChannel::setVolume(int)>
c0022c66:	83 c4 08             	add    esp,0x8
c0022c69:	a1 54 d9 02 c0       	mov    eax,ds:0xc002d954
c0022c6e:	50                   	push   eax
c0022c6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022c73:	e8 92 ff ff ff       	call   c0022c0a <SoundChannel::setSpeed(float)>
c0022c78:	83 c4 08             	add    esp,0x8
c0022c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022c83:	89 10                	mov    DWORD PTR [eax],edx
c0022c85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022c8d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022c98:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c9b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022ca0:	75 23                	jne    c0022cc5 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ca6:	8b 10                	mov    edx,DWORD PTR [eax]
c0022ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022caf:	0f af c2             	imul   eax,edx
c0022cb2:	85 c0                	test   eax,eax
c0022cb4:	79 03                	jns    c0022cb9 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022cb6:	83 c0 03             	add    eax,0x3
c0022cb9:	c1 f8 02             	sar    eax,0x2
c0022cbc:	05 a0 0f 00 00       	add    eax,0xfa0
c0022cc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cc9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022ccd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cd4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022cdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cdf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022ce6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022ced:	c1 e0 02             	shl    eax,0x2
c0022cf0:	83 ec 0c             	sub    esp,0xc
c0022cf3:	50                   	push   eax
c0022cf4:	e8 93 cb fe ff       	call   c000f88c <malloc>
c0022cf9:	83 c4 10             	add    esp,0x10
c0022cfc:	89 c2                	mov    edx,eax
c0022cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d02:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022d05:	83 ec 04             	sub    esp,0x4
c0022d08:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022d0c:	50                   	push   eax
c0022d0d:	6a 01                	push   0x1
c0022d0f:	6a 04                	push   0x4
c0022d11:	e8 4f 5e fe ff       	call   c0008b65 <src_new>
c0022d16:	83 c4 10             	add    esp,0x10
c0022d19:	89 c2                	mov    edx,eax
c0022d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d1f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d26:	85 c0                	test   eax,eax
c0022d28:	74 10                	je     c0022d3a <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022d2a:	83 ec 0c             	sub    esp,0xc
c0022d2d:	68 38 d9 02 c0       	push   0xc002d938
c0022d32:	e8 6e 7c ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0022d37:	83 c4 10             	add    esp,0x10
c0022d3a:	a0 60 37 03 c0       	mov    al,ds:0xc0033760
c0022d3f:	83 f0 01             	xor    eax,0x1
c0022d42:	84 c0                	test   al,al
c0022d44:	74 57                	je     c0022d9d <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022d46:	a1 58 d9 02 c0       	mov    eax,ds:0xc002d958
c0022d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d4f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022d57:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022d5f:	7f 35                	jg     c0022d96 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022d61:	83 ec 0c             	sub    esp,0xc
c0022d64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022d68:	e8 b2 52 00 00       	call   c002801f <__floatsisf>
c0022d6d:	83 c4 10             	add    esp,0x10
c0022d70:	8b 15 58 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d958
c0022d76:	83 ec 08             	sub    esp,0x8
c0022d79:	52                   	push   edx
c0022d7a:	50                   	push   eax
c0022d7b:	e8 b1 4e 00 00       	call   c0027c31 <__mulsf3>
c0022d80:	83 c4 10             	add    esp,0x10
c0022d83:	89 c2                	mov    edx,eax
c0022d85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d89:	89 14 85 60 33 03 c0 	mov    DWORD PTR [eax*4-0x3ffccca0],edx
c0022d90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022d94:	eb c1                	jmp    c0022d57 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022d96:	c6 05 60 37 03 c0 01 	mov    BYTE PTR ds:0xc0033760,0x1
c0022d9d:	90                   	nop
c0022d9e:	83 c4 1c             	add    esp,0x1c
c0022da1:	c3                   	ret    

c0022da2 <SoundChannel::play()>:
c0022da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022da6:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022daa:	c3                   	ret    
c0022dab:	90                   	nop

c0022dac <SoundChannel::paused()>:
c0022dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022db0:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022db3:	c3                   	ret    

c0022db4 <SoundChannel::getSampleRate()>:
c0022db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022db8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dba:	c3                   	ret    
c0022dbb:	90                   	nop

c0022dbc <SoundChannel::getBits()>:
c0022dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022dc3:	c3                   	ret    

c0022dc4 <SoundChannel::getBufferUsed()>:
c0022dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dc8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022dcb:	c3                   	ret    

c0022dcc <SoundChannel::getBufferSize()>:
c0022dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dd0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022dd3:	c3                   	ret    

c0022dd4 <SoundChannel::unbuffer(float*, int, int)>:
c0022dd4:	56                   	push   esi
c0022dd5:	53                   	push   ebx
c0022dd6:	83 ec 40             	sub    esp,0x40
c0022dd9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022ddd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022de0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022de4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022de7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022deb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022def:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022df3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022df7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022dfb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022dff:	e8 1b 52 00 00       	call   c002801f <__floatsisf>
c0022e04:	5a                   	pop    edx
c0022e05:	89 c6                	mov    esi,eax
c0022e07:	ff 33                	push   DWORD PTR [ebx]
c0022e09:	e8 11 52 00 00       	call   c002801f <__floatsisf>
c0022e0e:	59                   	pop    ecx
c0022e0f:	5a                   	pop    edx
c0022e10:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022e13:	50                   	push   eax
c0022e14:	e8 18 4e 00 00       	call   c0027c31 <__mulsf3>
c0022e19:	59                   	pop    ecx
c0022e1a:	5a                   	pop    edx
c0022e1b:	50                   	push   eax
c0022e1c:	56                   	push   esi
c0022e1d:	e8 d2 4f 00 00       	call   c0027df4 <__divsf3>
c0022e22:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e25:	e8 c5 64 00 00       	call   c00292ef <__extendsfdf2>
c0022e2a:	59                   	pop    ecx
c0022e2b:	5e                   	pop    esi
c0022e2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e30:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022e34:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022e3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022e40:	50                   	push   eax
c0022e41:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022e44:	e8 11 59 fe ff       	call   c000875a <src_process>
c0022e49:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e4d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022e50:	83 c4 0c             	add    esp,0xc
c0022e53:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022e56:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022e59:	29 d0                	sub    eax,edx
c0022e5b:	c1 e0 02             	shl    eax,0x2
c0022e5e:	50                   	push   eax
c0022e5f:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022e62:	50                   	push   eax
c0022e63:	51                   	push   ecx
c0022e64:	e8 1f d8 fd ff       	call   c0000688 <memmove>
c0022e69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e6d:	83 c4 44             	add    esp,0x44
c0022e70:	5b                   	pop    ebx
c0022e71:	5e                   	pop    esi
c0022e72:	c3                   	ret    
c0022e73:	90                   	nop

c0022e74 <SoundChannel::buffer8(unsigned char*, int)>:
c0022e74:	55                   	push   ebp
c0022e75:	57                   	push   edi
c0022e76:	56                   	push   esi
c0022e77:	53                   	push   ebx
c0022e78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e7c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022e80:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022e83:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022e87:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022e8a:	74 7a                	je     c0022f06 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022e8c:	85 ff                	test   edi,edi
c0022e8e:	7e 76                	jle    c0022f06 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022e90:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022e94:	8d 70 01             	lea    esi,[eax+0x1]
c0022e97:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022e9a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022e9d:	8b 1c 9d 60 33 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccca0]
c0022ea4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022ea7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022eaa:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022ead:	74 5e                	je     c0022f0d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022eaf:	83 ff 01             	cmp    edi,0x1
c0022eb2:	74 4b                	je     c0022eff <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022eb4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022eb8:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022ebb:	8d 70 01             	lea    esi,[eax+0x1]
c0022ebe:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022ec1:	8b 1c 9d 60 33 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccca0]
c0022ec8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022ecb:	b8 02 00 00 00       	mov    eax,0x2
c0022ed0:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022ed3:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022ed6:	75 23                	jne    c0022efb <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022ed8:	eb 27                	jmp    c0022f01 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022eda:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022edf:	8d 71 01             	lea    esi,[ecx+0x1]
c0022ee2:	40                   	inc    eax
c0022ee3:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022ee6:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022ee9:	8b 1c 9d 60 33 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccca0]
c0022ef0:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022ef3:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022ef6:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022ef9:	74 06                	je     c0022f01 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022efb:	39 c7                	cmp    edi,eax
c0022efd:	75 db                	jne    c0022eda <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022eff:	89 f8                	mov    eax,edi
c0022f01:	5b                   	pop    ebx
c0022f02:	5e                   	pop    esi
c0022f03:	5f                   	pop    edi
c0022f04:	5d                   	pop    ebp
c0022f05:	c3                   	ret    
c0022f06:	5b                   	pop    ebx
c0022f07:	31 c0                	xor    eax,eax
c0022f09:	5e                   	pop    esi
c0022f0a:	5f                   	pop    edi
c0022f0b:	5d                   	pop    ebp
c0022f0c:	c3                   	ret    
c0022f0d:	b8 01 00 00 00       	mov    eax,0x1
c0022f12:	eb ed                	jmp    c0022f01 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022f14 <SoundDevice::SoundDevice(char const*)>:
c0022f14:	83 ec 1c             	sub    esp,0x1c
c0022f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f1b:	83 ec 08             	sub    esp,0x8
c0022f1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f22:	50                   	push   eax
c0022f23:	e8 4c 15 ff ff       	call   c0014474 <Device::Device(char const*)>
c0022f28:	83 c4 10             	add    esp,0x10
c0022f2b:	ba 64 d9 02 c0       	mov    edx,0xc002d964
c0022f30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f34:	89 10                	mov    DWORD PTR [eax],edx
c0022f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f3a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f48:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022f52:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022f5a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022f5f:	7f 19                	jg     c0022f7a <SoundDevice::SoundDevice(char const*)+0x66>
c0022f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022f69:	83 c2 54             	add    edx,0x54
c0022f6c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022f74:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022f78:	eb e0                	jmp    c0022f5a <SoundDevice::SoundDevice(char const*)+0x46>
c0022f7a:	90                   	nop
c0022f7b:	83 c4 1c             	add    esp,0x1c
c0022f7e:	c3                   	ret    
c0022f7f:	90                   	nop

c0022f80 <SoundDevice::~SoundDevice()>:
c0022f80:	53                   	push   ebx
c0022f81:	83 ec 18             	sub    esp,0x18
c0022f84:	ba 64 d9 02 c0       	mov    edx,0xc002d964
c0022f89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f8d:	89 10                	mov    DWORD PTR [eax],edx
c0022f8f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022f97:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022f9c:	7f 46                	jg     c0022fe4 <SoundDevice::~SoundDevice()+0x64>
c0022f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022fa2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022fa6:	83 c2 54             	add    edx,0x54
c0022fa9:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022fad:	85 c0                	test   eax,eax
c0022faf:	74 2d                	je     c0022fde <SoundDevice::~SoundDevice()+0x5e>
c0022fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022fb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022fb9:	83 c2 54             	add    edx,0x54
c0022fbc:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022fc0:	85 db                	test   ebx,ebx
c0022fc2:	74 1a                	je     c0022fde <SoundDevice::~SoundDevice()+0x5e>
c0022fc4:	83 ec 0c             	sub    esp,0xc
c0022fc7:	53                   	push   ebx
c0022fc8:	e8 21 fc ff ff       	call   c0022bee <SoundChannel::~SoundChannel()>
c0022fcd:	83 c4 10             	add    esp,0x10
c0022fd0:	83 ec 08             	sub    esp,0x8
c0022fd3:	6a 2c                	push   0x2c
c0022fd5:	53                   	push   ebx
c0022fd6:	e8 7c fd fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0022fdb:	83 c4 10             	add    esp,0x10
c0022fde:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022fe2:	eb b3                	jmp    c0022f97 <SoundDevice::~SoundDevice()+0x17>
c0022fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022fe8:	83 ec 0c             	sub    esp,0xc
c0022feb:	50                   	push   eax
c0022fec:	e8 4d 11 ff ff       	call   c001413e <Device::~Device()>
c0022ff1:	83 c4 10             	add    esp,0x10
c0022ff4:	90                   	nop
c0022ff5:	83 c4 18             	add    esp,0x18
c0022ff8:	5b                   	pop    ebx
c0022ff9:	c3                   	ret    

c0022ffa <SoundDevice::~SoundDevice()>:
c0022ffa:	83 ec 0c             	sub    esp,0xc
c0022ffd:	83 ec 0c             	sub    esp,0xc
c0023000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023004:	e8 77 ff ff ff       	call   c0022f80 <SoundDevice::~SoundDevice()>
c0023009:	83 c4 10             	add    esp,0x10
c002300c:	83 ec 08             	sub    esp,0x8
c002300f:	68 e4 01 00 00       	push   0x1e4
c0023014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023018:	e8 3a fd fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c002301d:	83 c4 10             	add    esp,0x10
c0023020:	83 c4 0c             	add    esp,0xc
c0023023:	c3                   	ret    

c0023024 <SoundDevice::getFreeChannelNum()>:
c0023024:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023028:	31 c0                	xor    eax,eax
c002302a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0023032:	74 09                	je     c002303d <SoundDevice::getFreeChannelNum()+0x19>
c0023034:	40                   	inc    eax
c0023035:	83 f8 20             	cmp    eax,0x20
c0023038:	75 f0                	jne    c002302a <SoundDevice::getFreeChannelNum()+0x6>
c002303a:	83 c8 ff             	or     eax,0xffffffff
c002303d:	c3                   	ret    

c002303e <SoundDevice::addChannel(SoundChannel*)>:
c002303e:	56                   	push   esi
c002303f:	53                   	push   ebx
c0023040:	51                   	push   ecx
c0023041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023045:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0023049:	53                   	push   ebx
c002304a:	e8 d5 ff ff ff       	call   c0023024 <SoundDevice::getFreeChannelNum()>
c002304f:	5a                   	pop    edx
c0023050:	83 f8 ff             	cmp    eax,0xffffffff
c0023053:	74 51                	je     c00230a6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0023055:	85 f6                	test   esi,esi
c0023057:	74 4d                	je     c00230a6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0023059:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0023060:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0023067:	75 30                	jne    c0023099 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0023069:	83 ec 0c             	sub    esp,0xc
c002306c:	56                   	push   esi
c002306d:	e8 42 fd ff ff       	call   c0022db4 <SoundChannel::getSampleRate()>
c0023072:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0023078:	89 34 24             	mov    DWORD PTR [esp],esi
c002307b:	e8 3c fd ff ff       	call   c0022dbc <SoundChannel::getBits()>
c0023080:	83 c4 0c             	add    esp,0xc
c0023083:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0023089:	8b 13                	mov    edx,DWORD PTR [ebx]
c002308b:	50                   	push   eax
c002308c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0023092:	53                   	push   ebx
c0023093:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0023096:	83 c4 10             	add    esp,0x10
c0023099:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002309f:	b8 01 00 00 00       	mov    eax,0x1
c00230a4:	eb 03                	jmp    c00230a9 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00230a6:	83 c8 ff             	or     eax,0xffffffff
c00230a9:	5a                   	pop    edx
c00230aa:	5b                   	pop    ebx
c00230ab:	5e                   	pop    esi
c00230ac:	c3                   	ret    
c00230ad:	90                   	nop

c00230ae <SoundDevice::removeChannel(int)>:
c00230ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230b6:	83 fa 1f             	cmp    edx,0x1f
c00230b9:	77 23                	ja     c00230de <SoundDevice::removeChannel(int)+0x30>
c00230bb:	8d 14 90             	lea    edx,[eax+edx*4]
c00230be:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00230c5:	74 17                	je     c00230de <SoundDevice::removeChannel(int)+0x30>
c00230c7:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00230d1:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00230d7:	75 05                	jne    c00230de <SoundDevice::removeChannel(int)+0x30>
c00230d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00230db:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00230de:	c3                   	ret    
c00230df:	90                   	nop

c00230e0 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00230e0:	57                   	push   edi
c00230e1:	56                   	push   esi
c00230e2:	53                   	push   ebx
c00230e3:	31 db                	xor    ebx,ebx
c00230e5:	83 ec 10             	sub    esp,0x10
c00230e8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00230ec:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00230f0:	0f 8d cb 00 00 00    	jge    c00231c1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00230f6:	83 ec 0c             	sub    esp,0xc
c00230f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00230fd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0023100:	e8 ea 61 00 00       	call   c00292ef <__extendsfdf2>
c0023105:	83 c4 10             	add    esp,0x10
c0023108:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002310c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023110:	68 00 00 f0 3f       	push   0x3ff00000
c0023115:	6a 00                	push   0x0
c0023117:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002311b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002311f:	e8 57 51 00 00       	call   c002827b <__adddf3>
c0023124:	83 c4 10             	add    esp,0x10
c0023127:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002312b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002312f:	68 00 00 e0 3f       	push   0x3fe00000
c0023134:	6a 00                	push   0x0
c0023136:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002313a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002313e:	e8 b5 57 00 00       	call   c00288f8 <__muldf3>
c0023143:	83 c4 10             	add    esp,0x10
c0023146:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002314a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002314e:	68 00 00 60 40       	push   0x40600000
c0023153:	6a 00                	push   0x0
c0023155:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023159:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002315d:	e8 96 57 00 00       	call   c00288f8 <__muldf3>
c0023162:	59                   	pop    ecx
c0023163:	5f                   	pop    edi
c0023164:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023168:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002316c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023170:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023174:	e8 52 60 00 00       	call   c00291cb <__truncdfsf2>
c0023179:	5a                   	pop    edx
c002317a:	89 c7                	mov    edi,eax
c002317c:	59                   	pop    ecx
c002317d:	68 00 00 fe 42       	push   0x42fe0000
c0023182:	50                   	push   eax
c0023183:	e8 ed 50 00 00       	call   c0028275 <__gesf2>
c0023188:	83 c4 10             	add    esp,0x10
c002318b:	85 c0                	test   eax,eax
c002318d:	78 06                	js     c0023195 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002318f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0023193:	eb 26                	jmp    c00231bb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0023195:	50                   	push   eax
c0023196:	50                   	push   eax
c0023197:	6a 00                	push   0x0
c0023199:	57                   	push   edi
c002319a:	e8 da 50 00 00       	call   c0028279 <__lesf2>
c002319f:	83 c4 10             	add    esp,0x10
c00231a2:	85 c0                	test   eax,eax
c00231a4:	7f 06                	jg     c00231ac <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00231a6:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00231aa:	eb 0f                	jmp    c00231bb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00231ac:	83 ec 0c             	sub    esp,0xc
c00231af:	57                   	push   edi
c00231b0:	e8 d7 61 00 00       	call   c002938c <lrintf>
c00231b5:	83 c4 10             	add    esp,0x10
c00231b8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00231bb:	43                   	inc    ebx
c00231bc:	e9 2b ff ff ff       	jmp    c00230ec <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00231c1:	83 c4 10             	add    esp,0x10
c00231c4:	5b                   	pop    ebx
c00231c5:	5e                   	pop    esi
c00231c6:	5f                   	pop    edi
c00231c7:	c3                   	ret    

c00231c8 <SoundDevice::getAudio(int, float*, float*)>:
c00231c8:	55                   	push   ebp
c00231c9:	57                   	push   edi
c00231ca:	56                   	push   esi
c00231cb:	53                   	push   ebx
c00231cc:	31 db                	xor    ebx,ebx
c00231ce:	83 ec 20             	sub    esp,0x20
c00231d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00231d5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00231d9:	c1 e0 02             	shl    eax,0x2
c00231dc:	50                   	push   eax
c00231dd:	6a 00                	push   0x0
c00231df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00231e3:	e8 68 d5 fd ff       	call   c0000750 <memset>
c00231e8:	83 c4 10             	add    esp,0x10
c00231eb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00231ef:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00231f6:	85 c0                	test   eax,eax
c00231f8:	0f 84 d7 00 00 00    	je     c00232d5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00231fe:	83 ec 0c             	sub    esp,0xc
c0023201:	50                   	push   eax
c0023202:	e8 a5 fb ff ff       	call   c0022dac <SoundChannel::paused()>
c0023207:	83 c4 10             	add    esp,0x10
c002320a:	84 c0                	test   al,al
c002320c:	0f 85 c3 00 00 00    	jne    c00232d5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023212:	83 ec 0c             	sub    esp,0xc
c0023215:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002321c:	e8 19 fa ff ff       	call   c0022c3a <SoundChannel::getVolume()>
c0023221:	83 c4 10             	add    esp,0x10
c0023224:	85 c0                	test   eax,eax
c0023226:	0f 84 a9 00 00 00    	je     c00232d5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002322c:	83 ec 0c             	sub    esp,0xc
c002322f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023236:	e8 ff f9 ff ff       	call   c0022c3a <SoundChannel::getVolume()>
c002323b:	83 ec 0c             	sub    esp,0xc
c002323e:	50                   	push   eax
c002323f:	e8 db 4d 00 00       	call   c002801f <__floatsisf>
c0023244:	59                   	pop    ecx
c0023245:	5d                   	pop    ebp
c0023246:	31 ed                	xor    ebp,ebp
c0023248:	68 00 00 c8 42       	push   0x42c80000
c002324d:	50                   	push   eax
c002324e:	e8 a1 4b 00 00       	call   c0027df4 <__divsf3>
c0023253:	83 c4 10             	add    esp,0x10
c0023256:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002325a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002325e:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0023264:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0023268:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002326f:	e8 60 fb ff ff       	call   c0022dd4 <SoundChannel::unbuffer(float*, int, int)>
c0023274:	83 c4 20             	add    esp,0x20
c0023277:	89 c1                	mov    ecx,eax
c0023279:	39 cd                	cmp    ebp,ecx
c002327b:	7d 52                	jge    c00232cf <SoundDevice::getAudio(int, float*, float*)+0x107>
c002327d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023281:	50                   	push   eax
c0023282:	50                   	push   eax
c0023283:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0023287:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002328a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002328e:	e8 9e 49 00 00       	call   c0027c31 <__mulsf3>
c0023293:	5a                   	pop    edx
c0023294:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023298:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002329e:	e8 7c 4d 00 00       	call   c002801f <__floatsisf>
c00232a3:	59                   	pop    ecx
c00232a4:	5a                   	pop    edx
c00232a5:	50                   	push   eax
c00232a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232aa:	e8 45 4b 00 00       	call   c0027df4 <__divsf3>
c00232af:	59                   	pop    ecx
c00232b0:	5a                   	pop    edx
c00232b1:	50                   	push   eax
c00232b2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00232b6:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00232b9:	e8 50 46 00 00       	call   c002790e <__addsf3>
c00232be:	83 c4 10             	add    esp,0x10
c00232c1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00232c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00232c9:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00232cc:	45                   	inc    ebp
c00232cd:	eb aa                	jmp    c0023279 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00232cf:	39 cf                	cmp    edi,ecx
c00232d1:	7e 02                	jle    c00232d5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00232d3:	89 cf                	mov    edi,ecx
c00232d5:	43                   	inc    ebx
c00232d6:	83 fb 20             	cmp    ebx,0x20
c00232d9:	0f 85 10 ff ff ff    	jne    c00231ef <SoundDevice::getAudio(int, float*, float*)+0x27>
c00232df:	83 c4 1c             	add    esp,0x1c
c00232e2:	89 f8                	mov    eax,edi
c00232e4:	5b                   	pop    ebx
c00232e5:	5e                   	pop    esi
c00232e6:	5f                   	pop    edi
c00232e7:	5d                   	pop    ebp
c00232e8:	c3                   	ret    
c00232e9:	90                   	nop

c00232ea <PCI::open(int, int, void*)>:
c00232ea:	83 ec 18             	sub    esp,0x18
c00232ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00232f3:	50                   	push   eax
c00232f4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00232f7:	31 c0                	xor    eax,eax
c00232f9:	83 c4 1c             	add    esp,0x1c
c00232fc:	c3                   	ret    
c00232fd:	90                   	nop

c00232fe <PCI::close(int, int, void*)>:
c00232fe:	31 c0                	xor    eax,eax
c0023300:	c3                   	ret    
c0023301:	90                   	nop

c0023302 <PCI::PCI()>:
c0023302:	83 ec 0c             	sub    esp,0xc
c0023305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023309:	83 ec 08             	sub    esp,0x8
c002330c:	68 94 d9 02 c0       	push   0xc002d994
c0023311:	50                   	push   eax
c0023312:	e8 c1 07 ff ff       	call   c0013ad8 <Bus::Bus(char const*)>
c0023317:	83 c4 10             	add    esp,0x10
c002331a:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c002331f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023323:	89 10                	mov    DWORD PTR [eax],edx
c0023325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023329:	a3 64 37 03 c0       	mov    ds:0xc0033764,eax
c002332e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023332:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023338:	0f b6 d0             	movzx  edx,al
c002333b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002333f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002334a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023350:	0f b6 d0             	movzx  edx,al
c0023353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023357:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002335c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023360:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023366:	8d 50 01             	lea    edx,[eax+0x1]
c0023369:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002336d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023373:	0f b6 d0             	movzx  edx,al
c0023376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002337a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002337e:	83 c9 c0             	or     ecx,0xffffffc0
c0023381:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023385:	90                   	nop
c0023386:	83 c4 0c             	add    esp,0xc
c0023389:	c3                   	ret    

c002338a <PCI::readBAR8(unsigned int, int)>:
c002338a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002338e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023392:	f6 c2 01             	test   dl,0x1
c0023395:	74 07                	je     c002339e <PCI::readBAR8(unsigned int, int)+0x14>
c0023397:	83 e2 fc             	and    edx,0xfffffffc
c002339a:	01 c2                	add    edx,eax
c002339c:	ec                   	in     al,dx
c002339d:	c3                   	ret    
c002339e:	83 e2 f0             	and    edx,0xfffffff0
c00233a1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00233a4:	c3                   	ret    
c00233a5:	90                   	nop

c00233a6 <PCI::readBAR16(unsigned int, int)>:
c00233a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00233aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233ae:	f6 c2 01             	test   dl,0x1
c00233b1:	74 08                	je     c00233bb <PCI::readBAR16(unsigned int, int)+0x15>
c00233b3:	83 e2 fc             	and    edx,0xfffffffc
c00233b6:	01 c2                	add    edx,eax
c00233b8:	66 ed                	in     ax,dx
c00233ba:	c3                   	ret    
c00233bb:	83 e2 f0             	and    edx,0xfffffff0
c00233be:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00233c2:	c3                   	ret    
c00233c3:	90                   	nop

c00233c4 <PCI::readBAR32(unsigned int, int)>:
c00233c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00233c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233cc:	f6 c2 01             	test   dl,0x1
c00233cf:	74 07                	je     c00233d8 <PCI::readBAR32(unsigned int, int)+0x14>
c00233d1:	83 e2 fc             	and    edx,0xfffffffc
c00233d4:	01 c2                	add    edx,eax
c00233d6:	ed                   	in     eax,dx
c00233d7:	c3                   	ret    
c00233d8:	83 e2 f0             	and    edx,0xfffffff0
c00233db:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00233de:	c3                   	ret    
c00233df:	90                   	nop

c00233e0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00233e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00233e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00233ec:	f6 c2 01             	test   dl,0x1
c00233ef:	74 07                	je     c00233f8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00233f1:	83 e2 fc             	and    edx,0xfffffffc
c00233f4:	01 ca                	add    edx,ecx
c00233f6:	ee                   	out    dx,al
c00233f7:	c3                   	ret    
c00233f8:	83 e2 f0             	and    edx,0xfffffff0
c00233fb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00233fe:	c3                   	ret    
c00233ff:	90                   	nop

c0023400 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0023400:	57                   	push   edi
c0023401:	56                   	push   esi
c0023402:	53                   	push   ebx
c0023403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023407:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002340b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002340f:	f6 c2 01             	test   dl,0x1
c0023412:	74 24                	je     c0023438 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0023414:	89 d3                	mov    ebx,edx
c0023416:	83 e3 fc             	and    ebx,0xfffffffc
c0023419:	50                   	push   eax
c002341a:	0f b7 c7             	movzx  eax,di
c002341d:	50                   	push   eax
c002341e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0023421:	50                   	push   eax
c0023422:	68 9c d9 02 c0       	push   0xc002d99c
c0023427:	e8 0b fa fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002342c:	8d 14 33             	lea    edx,[ebx+esi*1]
c002342f:	89 f8                	mov    eax,edi
c0023431:	66 ef                	out    dx,ax
c0023433:	83 c4 10             	add    esp,0x10
c0023436:	eb 07                	jmp    c002343f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0023438:	83 e2 f0             	and    edx,0xfffffff0
c002343b:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c002343f:	5b                   	pop    ebx
c0023440:	5e                   	pop    esi
c0023441:	5f                   	pop    edi
c0023442:	c3                   	ret    
c0023443:	90                   	nop

c0023444 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0023444:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002344c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023450:	f6 c2 01             	test   dl,0x1
c0023453:	74 07                	je     c002345c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0023455:	83 e2 fc             	and    edx,0xfffffffc
c0023458:	01 ca                	add    edx,ecx
c002345a:	ef                   	out    dx,eax
c002345b:	c3                   	ret    
c002345c:	83 e2 f0             	and    edx,0xfffffff0
c002345f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023462:	c3                   	ret    
c0023463:	90                   	nop

c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023464:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023468:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002346d:	89 ca                	mov    edx,ecx
c002346f:	c1 e0 10             	shl    eax,0x10
c0023472:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023478:	09 d0                	or     eax,edx
c002347a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002347f:	c1 e2 08             	shl    edx,0x8
c0023482:	09 d0                	or     eax,edx
c0023484:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023489:	c1 e2 0b             	shl    edx,0xb
c002348c:	09 d0                	or     eax,edx
c002348e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023493:	0d 00 00 00 80       	or     eax,0x80000000
c0023498:	ef                   	out    dx,eax
c0023499:	ba fc 0c 00 00       	mov    edx,0xcfc
c002349e:	ed                   	in     eax,dx
c002349f:	83 e1 02             	and    ecx,0x2
c00234a2:	0f b6 c9             	movzx  ecx,cl
c00234a5:	c1 e1 03             	shl    ecx,0x3
c00234a8:	d3 e8                	shr    eax,cl
c00234aa:	c3                   	ret    
c00234ab:	90                   	nop

c00234ac <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00234ac:	6a 00                	push   0x0
c00234ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234b3:	50                   	push   eax
c00234b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234b9:	50                   	push   eax
c00234ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234bf:	50                   	push   eax
c00234c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234c4:	e8 9b ff ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234c9:	83 c4 14             	add    esp,0x14
c00234cc:	c3                   	ret    
c00234cd:	90                   	nop

c00234ce <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00234ce:	6a 0e                	push   0xe
c00234d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234d5:	50                   	push   eax
c00234d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234db:	50                   	push   eax
c00234dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234e1:	50                   	push   eax
c00234e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234e6:	e8 79 ff ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234eb:	83 c4 14             	add    esp,0x14
c00234ee:	0f b6 c0             	movzx  eax,al
c00234f1:	c3                   	ret    

c00234f2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00234f2:	55                   	push   ebp
c00234f3:	57                   	push   edi
c00234f4:	56                   	push   esi
c00234f5:	53                   	push   ebx
c00234f6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00234fb:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0023500:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0023505:	6a 0a                	push   0xa
c0023507:	56                   	push   esi
c0023508:	55                   	push   ebp
c0023509:	57                   	push   edi
c002350a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002350e:	e8 51 ff ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023513:	6a 0a                	push   0xa
c0023515:	89 c3                	mov    ebx,eax
c0023517:	56                   	push   esi
c0023518:	0f b6 db             	movzx  ebx,bl
c002351b:	55                   	push   ebp
c002351c:	57                   	push   edi
c002351d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023521:	e8 3e ff ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023526:	83 c4 28             	add    esp,0x28
c0023529:	25 00 ff 00 00       	and    eax,0xff00
c002352e:	09 d8                	or     eax,ebx
c0023530:	5b                   	pop    ebx
c0023531:	5e                   	pop    esi
c0023532:	5f                   	pop    edi
c0023533:	5d                   	pop    ebp
c0023534:	c3                   	ret    
c0023535:	90                   	nop

c0023536 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023536:	6a 08                	push   0x8
c0023538:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002353d:	50                   	push   eax
c002353e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023543:	50                   	push   eax
c0023544:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023549:	50                   	push   eax
c002354a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002354e:	e8 11 ff ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023553:	83 c4 14             	add    esp,0x14
c0023556:	0f b6 c4             	movzx  eax,ah
c0023559:	c3                   	ret    

c002355a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002355a:	6a 08                	push   0x8
c002355c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023561:	50                   	push   eax
c0023562:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023567:	50                   	push   eax
c0023568:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002356d:	50                   	push   eax
c002356e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023572:	e8 ed fe ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023577:	83 c4 14             	add    esp,0x14
c002357a:	c3                   	ret    
c002357b:	90                   	nop

c002357c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002357c:	6a 3c                	push   0x3c
c002357e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023583:	50                   	push   eax
c0023584:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023589:	50                   	push   eax
c002358a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002358f:	50                   	push   eax
c0023590:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023594:	e8 cb fe ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023599:	83 c4 14             	add    esp,0x14
c002359c:	c3                   	ret    
c002359d:	90                   	nop

c002359e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002359e:	6a 18                	push   0x18
c00235a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235a5:	50                   	push   eax
c00235a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235ab:	50                   	push   eax
c00235ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235b1:	50                   	push   eax
c00235b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00235b6:	e8 a9 fe ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235bb:	83 c4 14             	add    esp,0x14
c00235be:	0f b6 c4             	movzx  eax,ah
c00235c1:	c3                   	ret    

c00235c2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00235c2:	55                   	push   ebp
c00235c3:	57                   	push   edi
c00235c4:	56                   	push   esi
c00235c5:	53                   	push   ebx
c00235c6:	50                   	push   eax
c00235c7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00235cb:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00235d0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00235d5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00235da:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00235e1:	8d 43 12             	lea    eax,[ebx+0x12]
c00235e4:	83 c3 10             	add    ebx,0x10
c00235e7:	0f b6 c0             	movzx  eax,al
c00235ea:	0f b6 db             	movzx  ebx,bl
c00235ed:	50                   	push   eax
c00235ee:	51                   	push   ecx
c00235ef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00235f3:	57                   	push   edi
c00235f4:	55                   	push   ebp
c00235f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00235f9:	e8 66 fe ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235fe:	53                   	push   ebx
c00235ff:	89 c6                	mov    esi,eax
c0023601:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023605:	c1 e6 10             	shl    esi,0x10
c0023608:	51                   	push   ecx
c0023609:	57                   	push   edi
c002360a:	55                   	push   ebp
c002360b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002360f:	e8 50 fe ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023614:	83 c4 2c             	add    esp,0x2c
c0023617:	0f b7 c0             	movzx  eax,ax
c002361a:	5b                   	pop    ebx
c002361b:	09 f0                	or     eax,esi
c002361d:	5e                   	pop    esi
c002361e:	5f                   	pop    edi
c002361f:	5d                   	pop    ebp
c0023620:	c3                   	ret    
c0023621:	90                   	nop

c0023622 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023622:	53                   	push   ebx
c0023623:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023628:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002362d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023631:	c1 e1 10             	shl    ecx,0x10
c0023634:	25 fc 00 00 00       	and    eax,0xfc
c0023639:	09 c1                	or     ecx,eax
c002363b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023640:	c1 e0 08             	shl    eax,0x8
c0023643:	09 c1                	or     ecx,eax
c0023645:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002364a:	c1 e0 0b             	shl    eax,0xb
c002364d:	09 c1                	or     ecx,eax
c002364f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023655:	89 c8                	mov    eax,ecx
c0023657:	ef                   	out    dx,eax
c0023658:	ba fc 0c 00 00       	mov    edx,0xcfc
c002365d:	ed                   	in     eax,dx
c002365e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023663:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023668:	74 0a                	je     c0023674 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002366a:	0f b7 d8             	movzx  ebx,ax
c002366d:	89 d0                	mov    eax,edx
c002366f:	c1 e0 10             	shl    eax,0x10
c0023672:	eb 05                	jmp    c0023679 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0023674:	66 31 c0             	xor    ax,ax
c0023677:	89 d3                	mov    ebx,edx
c0023679:	09 c3                	or     ebx,eax
c002367b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023680:	89 c8                	mov    eax,ecx
c0023682:	ef                   	out    dx,eax
c0023683:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023688:	89 d8                	mov    eax,ebx
c002368a:	ef                   	out    dx,eax
c002368b:	5b                   	pop    ebx
c002368c:	c3                   	ret    
c002368d:	90                   	nop

c002368e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002368e:	55                   	push   ebp
c002368f:	57                   	push   edi
c0023690:	56                   	push   esi
c0023691:	53                   	push   ebx
c0023692:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0023698:	80 3d 70 37 03 c0 00 	cmp    BYTE PTR ds:0xc0033770,0x0
c002369f:	0f 85 96 00 00 00    	jne    c002373b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c00236a5:	83 ec 0c             	sub    esp,0xc
c00236a8:	68 14 01 00 00       	push   0x114
c00236ad:	e8 da c1 fe ff       	call   c000f88c <malloc>
c00236b2:	83 c4 0c             	add    esp,0xc
c00236b5:	89 c3                	mov    ebx,eax
c00236b7:	ff 35 70 29 03 c0    	push   DWORD PTR ds:0xc0032970
c00236bd:	68 b3 d9 02 c0       	push   0xc002d9b3
c00236c2:	50                   	push   eax
c00236c3:	e8 ce fc fe ff       	call   c0013396 <File::File(char const*, Process*)>
c00236c8:	5a                   	pop    edx
c00236c9:	59                   	pop    ecx
c00236ca:	6a 01                	push   0x1
c00236cc:	53                   	push   ebx
c00236cd:	e8 28 fd fe ff       	call   c00133fa <File::open(FileOpenMode)>
c00236d2:	83 c4 0c             	add    esp,0xc
c00236d5:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00236d9:	50                   	push   eax
c00236da:	8d 44 24 28          	lea    eax,[esp+0x28]
c00236de:	50                   	push   eax
c00236df:	53                   	push   ebx
c00236e0:	e8 c1 ff fe ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c00236e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00236e9:	40                   	inc    eax
c00236ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00236ed:	e8 9a c1 fe ff       	call   c000f88c <malloc>
c00236f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00236f6:	a3 6c 37 03 c0       	mov    ds:0xc003376c,eax
c00236fb:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00236ff:	5e                   	pop    esi
c0023700:	8b 13                	mov    edx,DWORD PTR [ebx]
c0023702:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0023706:	51                   	push   ecx
c0023707:	50                   	push   eax
c0023708:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002370c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023710:	53                   	push   ebx
c0023711:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0023714:	83 c4 14             	add    esp,0x14
c0023717:	53                   	push   ebx
c0023718:	e8 3b fd fe ff       	call   c0013458 <File::close()>
c002371d:	5f                   	pop    edi
c002371e:	5d                   	pop    ebp
c002371f:	ff 35 6c 37 03 c0    	push   DWORD PTR ds:0xc003376c
c0023725:	68 cc d9 02 c0       	push   0xc002d9cc
c002372a:	e8 08 f7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002372f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023733:	83 c4 10             	add    esp,0x10
c0023736:	a3 68 37 03 c0       	mov    ds:0xc0033768,eax
c002373b:	a1 68 37 03 c0       	mov    eax,ds:0xc0033768
c0023740:	8b 1d 6c 37 03 c0    	mov    ebx,DWORD PTR ds:0xc003376c
c0023746:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002374a:	66 8b bc 24 42 01 00 00 	mov    di,WORD PTR [esp+0x142]
c0023752:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023759:	31 f6                	xor    esi,esi
c002375b:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002375f:	31 d2                	xor    edx,edx
c0023761:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0023768:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002376c:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0023770:	0f 8e 08 01 00 00    	jle    c002387e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f0>
c0023776:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c0023779:	d4 40                	aam    0x40
c002377b:	d5 39                	aad    0x39
c002377d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0023781:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c0023785:	d4 40                	aam    0x40
c0023787:	d5 39                	aad    0x39
c0023789:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002378d:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c0023791:	d4 40                	aam    0x40
c0023793:	d5 39                	aad    0x39
c0023795:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0023799:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002379d:	d4 40                	aam    0x40
c002379f:	d5 39                	aad    0x39
c00237a1:	8a 4c 33 06          	mov    cl,BYTE PTR [ebx+esi*1+0x6]
c00237a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00237a9:	80 f9 58             	cmp    cl,0x58
c00237ac:	74 47                	je     c00237f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x167>
c00237ae:	88 c8                	mov    al,cl
c00237b0:	d4 40                	aam    0x40
c00237b2:	d5 39                	aad    0x39
c00237b4:	83 e8 30             	sub    eax,0x30
c00237b7:	0f b6 e8             	movzx  ebp,al
c00237ba:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c00237be:	c1 e5 04             	shl    ebp,0x4
c00237c1:	d4 40                	aam    0x40
c00237c3:	d5 39                	aad    0x39
c00237c5:	8d 50 d0             	lea    edx,[eax-0x30]
c00237c8:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c00237cc:	0f b6 d2             	movzx  edx,dl
c00237cf:	09 ea                	or     edx,ebp
c00237d1:	c1 e2 04             	shl    edx,0x4
c00237d4:	d4 40                	aam    0x40
c00237d6:	d5 39                	aad    0x39
c00237d8:	83 e8 30             	sub    eax,0x30
c00237db:	0f b6 e8             	movzx  ebp,al
c00237de:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c00237e2:	09 ea                	or     edx,ebp
c00237e4:	c1 e2 04             	shl    edx,0x4
c00237e7:	89 d5                	mov    ebp,edx
c00237e9:	d4 40                	aam    0x40
c00237eb:	d5 39                	aad    0x39
c00237ed:	8d 50 d0             	lea    edx,[eax-0x30]
c00237f0:	0f b6 d2             	movzx  edx,dl
c00237f3:	09 ea                	or     edx,ebp
c00237f5:	83 c6 0b             	add    esi,0xb
c00237f8:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00237fc:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c00237ff:	3c 0a                	cmp    al,0xa
c0023801:	74 0b                	je     c002380e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x180>
c0023803:	45                   	inc    ebp
c0023804:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0023808:	75 15                	jne    c002381f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x191>
c002380a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002380e:	3c 0a                	cmp    al,0xa
c0023810:	0f 94 c0             	sete   al
c0023813:	0f b6 c0             	movzx  eax,al
c0023816:	01 c6                	add    esi,eax
c0023818:	80 f9 58             	cmp    cl,0x58
c002381b:	75 0c                	jne    c0023829 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x19b>
c002381d:	eb 13                	jmp    c0023832 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a4>
c002381f:	46                   	inc    esi
c0023820:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023823:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023827:	eb d3                	jmp    c00237fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x16e>
c0023829:	66 39 d7             	cmp    di,dx
c002382c:	0f 85 3a ff ff ff    	jne    c002376c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xde>
c0023832:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0023836:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002383a:	c1 e1 04             	shl    ecx,0x4
c002383d:	83 e8 30             	sub    eax,0x30
c0023840:	09 c8                	or     eax,ecx
c0023842:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0023846:	0f 85 20 ff ff ff    	jne    c002376c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xde>
c002384c:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0023850:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023854:	c1 e1 04             	shl    ecx,0x4
c0023857:	83 e8 30             	sub    eax,0x30
c002385a:	09 c8                	or     eax,ecx
c002385c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0023860:	0f 85 06 ff ff ff    	jne    c002376c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xde>
c0023866:	50                   	push   eax
c0023867:	50                   	push   eax
c0023868:	8d 44 24 28          	lea    eax,[esp+0x28]
c002386c:	50                   	push   eax
c002386d:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0023874:	e8 93 cf fd ff       	call   c000080c <strcpy>
c0023879:	83 c4 10             	add    esp,0x10
c002387c:	eb 15                	jmp    c0023893 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c002387e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023885:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0023890:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023893:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002389a:	81 c4 2c 01 00 00    	add    esp,0x12c
c00238a0:	5b                   	pop    ebx
c00238a1:	5e                   	pop    esi
c00238a2:	5f                   	pop    edi
c00238a3:	5d                   	pop    ebp
c00238a4:	c3                   	ret    
c00238a5:	90                   	nop

c00238a6 <PCI::checkBus(unsigned char)>:
c00238a6:	56                   	push   esi
c00238a7:	53                   	push   ebx
c00238a8:	31 db                	xor    ebx,ebx
c00238aa:	51                   	push   ecx
c00238ab:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00238b0:	52                   	push   edx
c00238b1:	53                   	push   ebx
c00238b2:	43                   	inc    ebx
c00238b3:	56                   	push   esi
c00238b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238b8:	e8 41 03 00 00       	call   c0023bfe <PCI::checkDevice(unsigned char, unsigned char)>
c00238bd:	83 c4 10             	add    esp,0x10
c00238c0:	83 fb 20             	cmp    ebx,0x20
c00238c3:	75 eb                	jne    c00238b0 <PCI::checkBus(unsigned char)+0xa>
c00238c5:	58                   	pop    eax
c00238c6:	5b                   	pop    ebx
c00238c7:	5e                   	pop    esi
c00238c8:	c3                   	ret    
c00238c9:	90                   	nop

c00238ca <PCI::foundDevice(PCIDeviceInfo)>:
c00238ca:	55                   	push   ebp
c00238cb:	57                   	push   edi
c00238cc:	56                   	push   esi
c00238cd:	53                   	push   ebx
c00238ce:	83 ec 1c             	sub    esp,0x1c
c00238d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00238d5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00238db:	0f 84 68 01 00 00    	je     c0023a49 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00238e1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00238e5:	66 81 f9 06 04       	cmp    cx,0x406
c00238ea:	75 2c                	jne    c0023918 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00238ec:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00238f1:	50                   	push   eax
c00238f2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00238f7:	50                   	push   eax
c00238f8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00238fd:	50                   	push   eax
c00238fe:	56                   	push   esi
c00238ff:	e8 9a fc ff ff       	call   c002359e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023904:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023908:	0f b6 c0             	movzx  eax,al
c002390b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002390f:	83 c4 2c             	add    esp,0x2c
c0023912:	5b                   	pop    ebx
c0023913:	5e                   	pop    esi
c0023914:	5f                   	pop    edi
c0023915:	5d                   	pop    ebp
c0023916:	eb 8e                	jmp    c00238a6 <PCI::checkBus(unsigned char)>
c0023918:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002391c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023922:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023926:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002392a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002392e:	88 d3                	mov    bl,dl
c0023930:	85 c0                	test   eax,eax
c0023932:	74 33                	je     c0023967 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023934:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023937:	85 d2                	test   edx,edx
c0023939:	74 28                	je     c0023963 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002393b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023941:	31 ef                	xor    edi,ebp
c0023943:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023949:	75 18                	jne    c0023963 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002394b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002394f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023955:	75 0c                	jne    c0023963 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023957:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002395d:	0f 84 e6 00 00 00    	je     c0023a49 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0023963:	8b 00                	mov    eax,DWORD PTR [eax]
c0023965:	eb c9                	jmp    c0023930 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023967:	66 81 f9 01 06       	cmp    cx,0x601
c002396c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023970:	75 19                	jne    c002398b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023972:	83 ec 0c             	sub    esp,0xc
c0023975:	68 64 01 00 00       	push   0x164
c002397a:	e8 0d bf fe ff       	call   c000f88c <malloc>
c002397f:	89 c5                	mov    ebp,eax
c0023981:	89 04 24             	mov    DWORD PTR [esp],eax
c0023984:	e8 ab 0f 00 00       	call   c0024934 <SATABus::SATABus()>
c0023989:	eb 1e                	jmp    c00239a9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002398b:	66 81 f9 01 01       	cmp    cx,0x101
c0023990:	75 60                	jne    c00239f2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023992:	83 ec 0c             	sub    esp,0xc
c0023995:	68 70 02 00 00       	push   0x270
c002399a:	e8 ed be fe ff       	call   c000f88c <malloc>
c002399f:	89 c5                	mov    ebp,eax
c00239a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00239a4:	e8 19 03 00 00       	call   c0023cc2 <IDE::IDE()>
c00239a9:	58                   	pop    eax
c00239aa:	5a                   	pop    edx
c00239ab:	55                   	push   ebp
c00239ac:	56                   	push   esi
c00239ad:	e8 be 08 ff ff       	call   c0014270 <Device::addChild(Device*)>
c00239b2:	83 ec 1c             	sub    esp,0x1c
c00239b5:	b9 09 00 00 00       	mov    ecx,0x9
c00239ba:	fc                   	cld    
c00239bb:	89 e7                	mov    edi,esp
c00239bd:	89 de                	mov    esi,ebx
c00239bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00239c1:	55                   	push   ebp
c00239c2:	e8 bb 07 ff ff       	call   c0014182 <Device::preOpenPCI(PCIDeviceInfo)>
c00239c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00239ca:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00239ce:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00239d6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00239de:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00239e6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00239e9:	83 c4 4c             	add    esp,0x4c
c00239ec:	5b                   	pop    ebx
c00239ed:	5e                   	pop    esi
c00239ee:	5f                   	pop    edi
c00239ef:	5d                   	pop    ebp
c00239f0:	ff e0                	jmp    eax
c00239f2:	50                   	push   eax
c00239f3:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c00239f8:	50                   	push   eax
c00239f9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00239fe:	50                   	push   eax
c00239ff:	68 de d9 02 c0       	push   0xc002d9de
c0023a04:	e8 2e f4 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0023a09:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c0023a10:	e8 77 be fe ff       	call   c000f88c <malloc>
c0023a15:	5a                   	pop    edx
c0023a16:	89 c5                	mov    ebp,eax
c0023a18:	59                   	pop    ecx
c0023a19:	68 fa d9 02 c0       	push   0xc002d9fa
c0023a1e:	50                   	push   eax
c0023a1f:	e8 56 0b ff ff       	call   c001457a <DriverlessDevice::DriverlessDevice(char const*)>
c0023a24:	5f                   	pop    edi
c0023a25:	58                   	pop    eax
c0023a26:	55                   	push   ebp
c0023a27:	56                   	push   esi
c0023a28:	e8 43 08 ff ff       	call   c0014270 <Device::addChild(Device*)>
c0023a2d:	b9 09 00 00 00       	mov    ecx,0x9
c0023a32:	fc                   	cld    
c0023a33:	89 df                	mov    edi,ebx
c0023a35:	89 de                	mov    esi,ebx
c0023a37:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023a39:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023a3d:	83 c4 2c             	add    esp,0x2c
c0023a40:	5b                   	pop    ebx
c0023a41:	5e                   	pop    esi
c0023a42:	5f                   	pop    edi
c0023a43:	5d                   	pop    ebp
c0023a44:	e9 39 07 ff ff       	jmp    c0014182 <Device::preOpenPCI(PCIDeviceInfo)>
c0023a49:	83 c4 1c             	add    esp,0x1c
c0023a4c:	5b                   	pop    ebx
c0023a4d:	5e                   	pop    esi
c0023a4e:	5f                   	pop    edi
c0023a4f:	5d                   	pop    ebp
c0023a50:	c3                   	ret    
c0023a51:	90                   	nop

c0023a52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023a52:	55                   	push   ebp
c0023a53:	57                   	push   edi
c0023a54:	56                   	push   esi
c0023a55:	53                   	push   ebx
c0023a56:	83 ec 5c             	sub    esp,0x5c
c0023a59:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023a5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023a61:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023a65:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0023a6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023a6e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0023a72:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0023a77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023a7b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0023a80:	6a 0c                	push   0xc
c0023a82:	55                   	push   ebp
c0023a83:	53                   	push   ebx
c0023a84:	57                   	push   edi
c0023a85:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023a8c:	e8 d3 f9 ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023a91:	55                   	push   ebp
c0023a92:	53                   	push   ebx
c0023a93:	57                   	push   edi
c0023a94:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023a9b:	e8 52 fa ff ff       	call   c00234f2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023aa0:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0023aa5:	83 c4 24             	add    esp,0x24
c0023aa8:	55                   	push   ebp
c0023aa9:	53                   	push   ebx
c0023aaa:	57                   	push   edi
c0023aab:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023aaf:	e8 c8 fa ff ff       	call   c002357c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023ab4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0023ab8:	6a 3c                	push   0x3c
c0023aba:	55                   	push   ebp
c0023abb:	53                   	push   ebx
c0023abc:	57                   	push   edi
c0023abd:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023ac4:	e8 9b f9 ff ff       	call   c0023464 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023ac9:	0f b6 c4             	movzx  eax,ah
c0023acc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023ad0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023ad4:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0023ad8:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0023add:	83 c4 24             	add    esp,0x24
c0023ae0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023ae6:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023aed:	74 6c                	je     c0023b5b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023aef:	31 f6                	xor    esi,esi
c0023af1:	8b 15 08 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f408
c0023af7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023afd:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0023b03:	7e 56                	jle    c0023b5b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023b05:	8d 14 f2             	lea    edx,[edx+esi*8]
c0023b08:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023b0f:	39 cb                	cmp    ebx,ecx
c0023b11:	75 45                	jne    c0023b58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023b13:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023b1a:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0023b1e:	75 38                	jne    c0023b58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023b20:	83 ec 0c             	sub    esp,0xc
c0023b23:	68 14 da 02 c0       	push   0xc002da14
c0023b28:	e8 0a f3 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0023b2d:	8b 15 08 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f408
c0023b33:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023b39:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0023b41:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0023b45:	52                   	push   edx
c0023b46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023b4a:	53                   	push   ebx
c0023b4b:	68 39 da 02 c0       	push   0xc002da39
c0023b50:	e8 e2 f2 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0023b55:	83 c4 20             	add    esp,0x20
c0023b58:	46                   	inc    esi
c0023b59:	eb 96                	jmp    c0023af1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0023b5b:	31 d2                	xor    edx,edx
c0023b5d:	83 ec 0c             	sub    esp,0xc
c0023b60:	55                   	push   ebp
c0023b61:	53                   	push   ebx
c0023b62:	57                   	push   edi
c0023b63:	52                   	push   edx
c0023b64:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023b68:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023b6f:	e8 4e fa ff ff       	call   c00235c2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023b74:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0023b78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023b7c:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023b80:	42                   	inc    edx
c0023b81:	83 c4 20             	add    esp,0x20
c0023b84:	83 fa 06             	cmp    edx,0x6
c0023b87:	75 d4                	jne    c0023b5d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0023b89:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023b8d:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023b91:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023b95:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023b99:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023b9d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023ba1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0023ba6:	86 e0                	xchg   al,ah
c0023ba8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023bad:	55                   	push   ebp
c0023bae:	53                   	push   ebx
c0023baf:	57                   	push   edi
c0023bb0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023bb4:	e8 7d f9 ff ff       	call   c0023536 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023bb9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023bbd:	55                   	push   ebp
c0023bbe:	53                   	push   ebx
c0023bbf:	57                   	push   edi
c0023bc0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023bc7:	e8 e0 f8 ff ff       	call   c00234ac <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023bcc:	83 ec 0c             	sub    esp,0xc
c0023bcf:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023bd4:	b9 09 00 00 00       	mov    ecx,0x9
c0023bd9:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023bdd:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0023be1:	fc                   	cld    
c0023be2:	89 e7                	mov    edi,esp
c0023be4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023be6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023bed:	e8 d8 fc ff ff       	call   c00238ca <PCI::foundDevice(PCIDeviceInfo)>
c0023bf2:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023bf8:	5b                   	pop    ebx
c0023bf9:	5e                   	pop    esi
c0023bfa:	5f                   	pop    edi
c0023bfb:	5d                   	pop    ebp
c0023bfc:	c3                   	ret    
c0023bfd:	90                   	nop

c0023bfe <PCI::checkDevice(unsigned char, unsigned char)>:
c0023bfe:	55                   	push   ebp
c0023bff:	57                   	push   edi
c0023c00:	56                   	push   esi
c0023c01:	53                   	push   ebx
c0023c02:	83 ec 0c             	sub    esp,0xc
c0023c05:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023c09:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023c0e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023c13:	6a 00                	push   0x0
c0023c15:	56                   	push   esi
c0023c16:	57                   	push   edi
c0023c17:	55                   	push   ebp
c0023c18:	e8 8f f8 ff ff       	call   c00234ac <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023c1d:	6a 00                	push   0x0
c0023c1f:	56                   	push   esi
c0023c20:	57                   	push   edi
c0023c21:	55                   	push   ebp
c0023c22:	e8 2b fe ff ff       	call   c0023a52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023c27:	83 c4 20             	add    esp,0x20
c0023c2a:	6a 00                	push   0x0
c0023c2c:	56                   	push   esi
c0023c2d:	57                   	push   edi
c0023c2e:	55                   	push   ebp
c0023c2f:	e8 9a f8 ff ff       	call   c00234ce <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023c34:	83 c4 10             	add    esp,0x10
c0023c37:	84 c0                	test   al,al
c0023c39:	79 27                	jns    c0023c62 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023c3b:	bb 01 00 00 00       	mov    ebx,0x1
c0023c40:	53                   	push   ebx
c0023c41:	56                   	push   esi
c0023c42:	57                   	push   edi
c0023c43:	55                   	push   ebp
c0023c44:	e8 63 f8 ff ff       	call   c00234ac <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023c49:	83 c4 10             	add    esp,0x10
c0023c4c:	66 40                	inc    ax
c0023c4e:	74 0c                	je     c0023c5c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023c50:	53                   	push   ebx
c0023c51:	56                   	push   esi
c0023c52:	57                   	push   edi
c0023c53:	55                   	push   ebp
c0023c54:	e8 f9 fd ff ff       	call   c0023a52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023c59:	83 c4 10             	add    esp,0x10
c0023c5c:	43                   	inc    ebx
c0023c5d:	83 fb 08             	cmp    ebx,0x8
c0023c60:	75 de                	jne    c0023c40 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023c62:	83 c4 0c             	add    esp,0xc
c0023c65:	5b                   	pop    ebx
c0023c66:	5e                   	pop    esi
c0023c67:	5f                   	pop    edi
c0023c68:	5d                   	pop    ebp
c0023c69:	c3                   	ret    

c0023c6a <PCI::detect()>:
c0023c6a:	56                   	push   esi
c0023c6b:	53                   	push   ebx
c0023c6c:	53                   	push   ebx
c0023c6d:	31 db                	xor    ebx,ebx
c0023c6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023c73:	6a 00                	push   0x0
c0023c75:	6a 00                	push   0x0
c0023c77:	6a 00                	push   0x0
c0023c79:	56                   	push   esi
c0023c7a:	e8 4f f8 ff ff       	call   c00234ce <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023c7f:	83 c4 10             	add    esp,0x10
c0023c82:	a8 80                	test   al,0x80
c0023c84:	75 21                	jne    c0023ca7 <PCI::detect()+0x3d>
c0023c86:	51                   	push   ecx
c0023c87:	51                   	push   ecx
c0023c88:	6a 00                	push   0x0
c0023c8a:	56                   	push   esi
c0023c8b:	e8 16 fc ff ff       	call   c00238a6 <PCI::checkBus(unsigned char)>
c0023c90:	83 c4 10             	add    esp,0x10
c0023c93:	eb 24                	jmp    c0023cb9 <PCI::detect()+0x4f>
c0023c95:	52                   	push   edx
c0023c96:	52                   	push   edx
c0023c97:	53                   	push   ebx
c0023c98:	43                   	inc    ebx
c0023c99:	56                   	push   esi
c0023c9a:	e8 07 fc ff ff       	call   c00238a6 <PCI::checkBus(unsigned char)>
c0023c9f:	83 c4 10             	add    esp,0x10
c0023ca2:	83 fb 08             	cmp    ebx,0x8
c0023ca5:	74 12                	je     c0023cb9 <PCI::detect()+0x4f>
c0023ca7:	53                   	push   ebx
c0023ca8:	6a 00                	push   0x0
c0023caa:	6a 00                	push   0x0
c0023cac:	56                   	push   esi
c0023cad:	e8 fa f7 ff ff       	call   c00234ac <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023cb2:	83 c4 10             	add    esp,0x10
c0023cb5:	66 40                	inc    ax
c0023cb7:	74 dc                	je     c0023c95 <PCI::detect()+0x2b>
c0023cb9:	58                   	pop    eax
c0023cba:	5b                   	pop    ebx
c0023cbb:	5e                   	pop    esi
c0023cbc:	c3                   	ret    
c0023cbd:	90                   	nop

c0023cbe <IDE::close(int, int, void*)>:
c0023cbe:	83 c8 ff             	or     eax,0xffffffff
c0023cc1:	c3                   	ret    

c0023cc2 <IDE::IDE()>:
c0023cc2:	83 ec 0c             	sub    esp,0xc
c0023cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc9:	83 ec 08             	sub    esp,0x8
c0023ccc:	68 80 da 02 c0       	push   0xc002da80
c0023cd1:	50                   	push   eax
c0023cd2:	e8 47 09 ff ff       	call   c001461e <HardDiskController::HardDiskController(char const*)>
c0023cd7:	83 c4 10             	add    esp,0x10
c0023cda:	ba c0 dc 02 c0       	mov    edx,0xc002dcc0
c0023cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ce3:	89 10                	mov    DWORD PTR [eax],edx
c0023ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ce9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023cf0:	90                   	nop
c0023cf1:	83 c4 0c             	add    esp,0xc
c0023cf4:	c3                   	ret    
c0023cf5:	90                   	nop

c0023cf6 <IDE::prepareInterrupt(unsigned char)>:
c0023cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023cfb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023cff:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023d07:	c3                   	ret    

c0023d08 <selectDrive(unsigned char, unsigned char)>:
c0023d08:	c3                   	ret    
c0023d09:	90                   	nop

c0023d0a <IDE::getBase(unsigned char)>:
c0023d0a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023d0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023d13:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023d1b:	c3                   	ret    

c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023d1c:	55                   	push   ebp
c0023d1d:	57                   	push   edi
c0023d1e:	56                   	push   esi
c0023d1f:	53                   	push   ebx
c0023d20:	83 ec 1c             	sub    esp,0x1c
c0023d23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023d27:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023d2b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023d2e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023d32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023d36:	80 f9 03             	cmp    cl,0x3
c0023d39:	77 51                	ja     c0023d8c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d3f:	0f b6 f2             	movzx  esi,dl
c0023d42:	0f b6 db             	movzx  ebx,bl
c0023d45:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023d48:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023d4c:	83 ca 80             	or     edx,0xffffff80
c0023d4f:	0f b6 d2             	movzx  edx,dl
c0023d52:	52                   	push   edx
c0023d53:	6a 0c                	push   0xc
c0023d55:	56                   	push   esi
c0023d56:	57                   	push   edi
c0023d57:	e8 c0 ff ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d5c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023d61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023d65:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023d69:	ee                   	out    dx,al
c0023d6a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023d6f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023d73:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023d77:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023d7b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023d83:	83 c4 2c             	add    esp,0x2c
c0023d86:	5b                   	pop    ebx
c0023d87:	5e                   	pop    esi
c0023d88:	5f                   	pop    edi
c0023d89:	5d                   	pop    ebp
c0023d8a:	eb 90                	jmp    c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d8c:	80 fb 07             	cmp    bl,0x7
c0023d8f:	77 12                	ja     c0023da3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023d91:	0f b6 d2             	movzx  edx,dl
c0023d94:	0f b6 db             	movzx  ebx,bl
c0023d97:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023d9f:	89 da                	mov    edx,ebx
c0023da1:	eb 2f                	jmp    c0023dd2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023da3:	80 fb 0d             	cmp    bl,0xd
c0023da6:	77 13                	ja     c0023dbb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023da8:	0f b6 d2             	movzx  edx,dl
c0023dab:	0f b6 db             	movzx  ebx,bl
c0023dae:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023db5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023db9:	eb 17                	jmp    c0023dd2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023dbb:	80 fb 15             	cmp    bl,0x15
c0023dbe:	77 13                	ja     c0023dd3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023dc0:	0f b6 d2             	movzx  edx,dl
c0023dc3:	0f b6 db             	movzx  ebx,bl
c0023dc6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023dce:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023dd2:	ee                   	out    dx,al
c0023dd3:	83 c4 1c             	add    esp,0x1c
c0023dd6:	5b                   	pop    ebx
c0023dd7:	5e                   	pop    esi
c0023dd8:	5f                   	pop    edi
c0023dd9:	5d                   	pop    ebp
c0023dda:	c3                   	ret    
c0023ddb:	90                   	nop

c0023ddc <IDE::read(unsigned char, unsigned char)>:
c0023ddc:	55                   	push   ebp
c0023ddd:	57                   	push   edi
c0023dde:	56                   	push   esi
c0023ddf:	53                   	push   ebx
c0023de0:	83 ec 1c             	sub    esp,0x1c
c0023de3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023de7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023deb:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023dee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023df2:	3c 03                	cmp    al,0x3
c0023df4:	77 43                	ja     c0023e39 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023df6:	0f b6 f2             	movzx  esi,dl
c0023df9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023dfc:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023e00:	83 c8 80             	or     eax,0xffffff80
c0023e03:	0f b6 c0             	movzx  eax,al
c0023e06:	50                   	push   eax
c0023e07:	6a 0c                	push   0xc
c0023e09:	56                   	push   esi
c0023e0a:	57                   	push   edi
c0023e0b:	e8 0c ff ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e10:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023e15:	0f b6 c3             	movzx  eax,bl
c0023e18:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023e1c:	ec                   	in     al,dx
c0023e1d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023e21:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023e26:	52                   	push   edx
c0023e27:	6a 0c                	push   0xc
c0023e29:	56                   	push   esi
c0023e2a:	57                   	push   edi
c0023e2b:	e8 ec fe ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e30:	83 c4 20             	add    esp,0x20
c0023e33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023e37:	eb 49                	jmp    c0023e82 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023e39:	80 fb 07             	cmp    bl,0x7
c0023e3c:	77 12                	ja     c0023e50 <IDE::read(unsigned char, unsigned char)+0x74>
c0023e3e:	0f b6 d2             	movzx  edx,dl
c0023e41:	0f b6 c3             	movzx  eax,bl
c0023e44:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023e4c:	89 c2                	mov    edx,eax
c0023e4e:	eb 31                	jmp    c0023e81 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023e50:	80 fb 0d             	cmp    bl,0xd
c0023e53:	77 13                	ja     c0023e68 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023e55:	0f b6 d2             	movzx  edx,dl
c0023e58:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023e5f:	0f b6 d3             	movzx  edx,bl
c0023e62:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023e66:	eb 19                	jmp    c0023e81 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023e68:	31 c0                	xor    eax,eax
c0023e6a:	80 fb 15             	cmp    bl,0x15
c0023e6d:	77 13                	ja     c0023e82 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023e6f:	0f b6 d2             	movzx  edx,dl
c0023e72:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023e7a:	0f b6 d3             	movzx  edx,bl
c0023e7d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023e81:	ec                   	in     al,dx
c0023e82:	83 c4 1c             	add    esp,0x1c
c0023e85:	5b                   	pop    ebx
c0023e86:	5e                   	pop    esi
c0023e87:	5f                   	pop    edi
c0023e88:	5d                   	pop    ebp
c0023e89:	c3                   	ret    

c0023e8a <IDE::waitInterrupt(unsigned char)>:
c0023e8a:	55                   	push   ebp
c0023e8b:	57                   	push   edi
c0023e8c:	56                   	push   esi
c0023e8d:	53                   	push   ebx
c0023e8e:	31 db                	xor    ebx,ebx
c0023e90:	83 ec 0c             	sub    esp,0xc
c0023e93:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023e97:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023e9c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023ea4:	89 e8                	mov    eax,ebp
c0023ea6:	84 c0                	test   al,al
c0023ea8:	75 34                	jne    c0023ede <IDE::waitInterrupt(unsigned char)+0x54>
c0023eaa:	52                   	push   edx
c0023eab:	6a 0c                	push   0xc
c0023ead:	56                   	push   esi
c0023eae:	57                   	push   edi
c0023eaf:	e8 28 ff ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0023eb4:	83 c4 10             	add    esp,0x10
c0023eb7:	a8 01                	test   al,0x1
c0023eb9:	75 2b                	jne    c0023ee6 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023ebb:	f6 c3 04             	test   bl,0x4
c0023ebe:	75 16                	jne    c0023ed6 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023ec0:	83 fb 32             	cmp    ebx,0x32
c0023ec3:	7e 11                	jle    c0023ed6 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023ec5:	50                   	push   eax
c0023ec6:	50                   	push   eax
c0023ec7:	6a 00                	push   0x0
c0023ec9:	68 80 96 98 00       	push   0x989680
c0023ece:	e8 88 ab ff ff       	call   c001ea5b <nanoSleep(unsigned long long)>
c0023ed3:	83 c4 10             	add    esp,0x10
c0023ed6:	83 fb 3c             	cmp    ebx,0x3c
c0023ed9:	74 0b                	je     c0023ee6 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023edb:	43                   	inc    ebx
c0023edc:	eb be                	jmp    c0023e9c <IDE::waitInterrupt(unsigned char)+0x12>
c0023ede:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023ee6:	83 c4 0c             	add    esp,0xc
c0023ee9:	89 e8                	mov    eax,ebp
c0023eeb:	5b                   	pop    ebx
c0023eec:	5e                   	pop    esi
c0023eed:	5f                   	pop    edi
c0023eee:	5d                   	pop    ebp
c0023eef:	c3                   	ret    

c0023ef0 <ideChannel0IRQHandler(regs*, void*)>:
c0023ef0:	83 ec 10             	sub    esp,0x10
c0023ef3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ef7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023efe:	6a 07                	push   0x7
c0023f00:	6a 00                	push   0x0
c0023f02:	50                   	push   eax
c0023f03:	e8 d4 fe ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0023f08:	83 c4 1c             	add    esp,0x1c
c0023f0b:	c3                   	ret    

c0023f0c <ideChannel1IRQHandler(regs*, void*)>:
c0023f0c:	83 ec 10             	sub    esp,0x10
c0023f0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f13:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023f1a:	6a 07                	push   0x7
c0023f1c:	6a 01                	push   0x1
c0023f1e:	50                   	push   eax
c0023f1f:	e8 b8 fe ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0023f24:	83 c4 1c             	add    esp,0x1c
c0023f27:	c3                   	ret    

c0023f28 <IDE::enableIRQs(unsigned char, bool)>:
c0023f28:	57                   	push   edi
c0023f29:	56                   	push   esi
c0023f2a:	be 04 00 00 00       	mov    esi,0x4
c0023f2f:	53                   	push   ebx
c0023f30:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023f35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f39:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023f3e:	0f 94 c0             	sete   al
c0023f41:	d1 e0                	shl    eax,1
c0023f43:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023f4a:	0f b6 c0             	movzx  eax,al
c0023f4d:	50                   	push   eax
c0023f4e:	6a 0c                	push   0xc
c0023f50:	57                   	push   edi
c0023f51:	53                   	push   ebx
c0023f52:	e8 c5 fd ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f57:	83 c4 10             	add    esp,0x10
c0023f5a:	50                   	push   eax
c0023f5b:	6a 0c                	push   0xc
c0023f5d:	57                   	push   edi
c0023f5e:	53                   	push   ebx
c0023f5f:	e8 78 fe ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0023f64:	83 c4 10             	add    esp,0x10
c0023f67:	4e                   	dec    esi
c0023f68:	75 f0                	jne    c0023f5a <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023f6a:	5b                   	pop    ebx
c0023f6b:	5e                   	pop    esi
c0023f6c:	5f                   	pop    edi
c0023f6d:	c3                   	ret    

c0023f6e <IDE::open(int, int, void*)>:
c0023f6e:	55                   	push   ebp
c0023f6f:	57                   	push   edi
c0023f70:	56                   	push   esi
c0023f71:	53                   	push   ebx
c0023f72:	83 ec 1c             	sub    esp,0x1c
c0023f75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023f79:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023f82:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023f8b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023f92:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023f99:	0f 85 b0 02 00 00    	jne    c002424f <IDE::open(int, int, void*)+0x2e1>
c0023f9f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023fa5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023fa9:	83 e0 7f             	and    eax,0x7f
c0023fac:	3c 05                	cmp    al,0x5
c0023fae:	74 04                	je     c0023fb4 <IDE::open(int, int, void*)+0x46>
c0023fb0:	3c 0f                	cmp    al,0xf
c0023fb2:	75 32                	jne    c0023fe6 <IDE::open(int, int, void*)+0x78>
c0023fb4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023fba:	83 e0 fc             	and    eax,0xfffffffc
c0023fbd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023fc4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023fca:	83 e0 fc             	and    eax,0xfffffffc
c0023fcd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023fd4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023fda:	83 e0 fc             	and    eax,0xfffffffc
c0023fdd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023fe4:	eb 14                	jmp    c0023ffa <IDE::open(int, int, void*)+0x8c>
c0023fe6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023ff0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023ffa:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0024001:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0024008:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002400c:	89 c6                	mov    esi,eax
c002400e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0024013:	c1 e6 10             	shl    esi,0x10
c0024016:	89 e8                	mov    eax,ebp
c0024018:	89 fa                	mov    edx,edi
c002401a:	c1 e0 0b             	shl    eax,0xb
c002401d:	09 f0                	or     eax,esi
c002401f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0024026:	c1 e6 08             	shl    esi,0x8
c0024029:	09 c6                	or     esi,eax
c002402b:	89 f0                	mov    eax,esi
c002402d:	0d 08 00 00 80       	or     eax,0x80000008
c0024032:	ef                   	out    dx,eax
c0024033:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0024038:	89 ca                	mov    edx,ecx
c002403a:	ed                   	in     eax,dx
c002403b:	c1 e8 10             	shr    eax,0x10
c002403e:	3d ff ff 00 00       	cmp    eax,0xffff
c0024043:	0f 84 f5 00 00 00    	je     c002413e <IDE::open(int, int, void*)+0x1d0>
c0024049:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002404f:	89 fa                	mov    edx,edi
c0024051:	89 f0                	mov    eax,esi
c0024053:	ef                   	out    dx,eax
c0024054:	b0 fe                	mov    al,0xfe
c0024056:	89 ca                	mov    edx,ecx
c0024058:	ee                   	out    dx,al
c0024059:	89 f0                	mov    eax,esi
c002405b:	89 fa                	mov    edx,edi
c002405d:	ef                   	out    dx,eax
c002405e:	89 ca                	mov    edx,ecx
c0024060:	ed                   	in     eax,dx
c0024061:	3c fe                	cmp    al,0xfe
c0024063:	0f 85 a9 00 00 00    	jne    c0024112 <IDE::open(int, int, void*)+0x1a4>
c0024069:	8b 15 08 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f408
c002406f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0024076:	74 33                	je     c00240ab <IDE::open(int, int, void*)+0x13d>
c0024078:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002407e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0024082:	40                   	inc    eax
c0024083:	83 ec 0c             	sub    esp,0xc
c0024086:	0f b6 c0             	movzx  eax,al
c0024089:	50                   	push   eax
c002408a:	55                   	push   ebp
c002408b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002408f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0024095:	51                   	push   ecx
c0024096:	e8 c1 42 ff ff       	call   c001835c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002409b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00240a0:	83 c4 1c             	add    esp,0x1c
c00240a3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00240a9:	eb 0a                	jmp    c00240b5 <IDE::open(int, int, void*)+0x147>
c00240ab:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00240b5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00240bc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00240c3:	c1 e1 10             	shl    ecx,0x10
c00240c6:	c1 e0 08             	shl    eax,0x8
c00240c9:	bf f8 0c 00 00       	mov    edi,0xcf8
c00240ce:	09 c1                	or     ecx,eax
c00240d0:	89 fa                	mov    edx,edi
c00240d2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00240d9:	c1 e0 0b             	shl    eax,0xb
c00240dc:	09 c1                	or     ecx,eax
c00240de:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00240e4:	89 c8                	mov    eax,ecx
c00240e6:	ef                   	out    dx,eax
c00240e7:	be fc 0c 00 00       	mov    esi,0xcfc
c00240ec:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00240f2:	89 f2                	mov    edx,esi
c00240f4:	ee                   	out    dx,al
c00240f5:	89 c8                	mov    eax,ecx
c00240f7:	89 fa                	mov    edx,edi
c00240f9:	ef                   	out    dx,eax
c00240fa:	89 f2                	mov    edx,esi
c00240fc:	ed                   	in     eax,dx
c00240fd:	0f b6 c0             	movzx  eax,al
c0024100:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0024106:	74 46                	je     c002414e <IDE::open(int, int, void*)+0x1e0>
c0024108:	83 ec 0c             	sub    esp,0xc
c002410b:	68 98 da 02 c0       	push   0xc002da98
c0024110:	eb 34                	jmp    c0024146 <IDE::open(int, int, void*)+0x1d8>
c0024112:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002411b:	75 17                	jne    c0024134 <IDE::open(int, int, void*)+0x1c6>
c002411d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0024122:	74 07                	je     c002412b <IDE::open(int, int, void*)+0x1bd>
c0024124:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0024129:	75 09                	jne    c0024134 <IDE::open(int, int, void*)+0x1c6>
c002412b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0024132:	eb 1a                	jmp    c002414e <IDE::open(int, int, void*)+0x1e0>
c0024134:	83 ec 0c             	sub    esp,0xc
c0024137:	68 a0 da 02 c0       	push   0xc002daa0
c002413c:	eb 08                	jmp    c0024146 <IDE::open(int, int, void*)+0x1d8>
c002413e:	83 ec 0c             	sub    esp,0xc
c0024141:	68 d1 da 02 c0       	push   0xc002dad1
c0024146:	e8 5a 68 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c002414b:	83 c4 10             	add    esp,0x10
c002414e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0024155:	79 1a                	jns    c0024171 <IDE::open(int, int, void*)+0x203>
c0024157:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002415d:	83 e0 fc             	and    eax,0xfffffffc
c0024160:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0024167:	83 c0 08             	add    eax,0x8
c002416a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0024171:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0024177:	89 c2                	mov    edx,eax
c0024179:	83 e2 0f             	and    edx,0xf
c002417c:	66 83 fa 08          	cmp    dx,0x8
c0024180:	75 0a                	jne    c002418c <IDE::open(int, int, void*)+0x21e>
c0024182:	83 e8 02             	sub    eax,0x2
c0024185:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002418c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0024192:	89 c2                	mov    edx,eax
c0024194:	83 e2 0f             	and    edx,0xf
c0024197:	66 83 fa 08          	cmp    dx,0x8
c002419b:	75 0a                	jne    c00241a7 <IDE::open(int, int, void*)+0x239>
c002419d:	83 e8 02             	sub    eax,0x2
c00241a0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00241a7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00241ae:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00241b5:	89 d0                	mov    eax,edx
c00241b7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00241ba:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00241be:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00241c2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00241c5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00241ca:	0f b6 c9             	movzx  ecx,cl
c00241cd:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00241d4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00241d7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00241db:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00241df:	8d 50 02             	lea    edx,[eax+0x2]
c00241e2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00241e7:	0f b6 d2             	movzx  edx,dl
c00241ea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00241f0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00241f3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00241f7:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00241fb:	8d 48 03             	lea    ecx,[eax+0x3]
c00241fe:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0024203:	0f b6 c9             	movzx  ecx,cl
c0024206:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002420c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002420f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0024213:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0024217:	8d 50 04             	lea    edx,[eax+0x4]
c002421a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0024220:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0024225:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002422c:	66 85 f6             	test   si,si
c002422f:	74 3e                	je     c002426f <IDE::open(int, int, void*)+0x301>
c0024231:	0f b6 d2             	movzx  edx,dl
c0024234:	83 c0 05             	add    eax,0x5
c0024237:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002423a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002423e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0024242:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0024248:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002424d:	eb 20                	jmp    c002426f <IDE::open(int, int, void*)+0x301>
c002424f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0024259:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0024263:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002426a:	e9 02 ff ff ff       	jmp    c0024171 <IDE::open(int, int, void*)+0x203>
c002426f:	52                   	push   edx
c0024270:	52                   	push   edx
c0024271:	6a 00                	push   0x0
c0024273:	53                   	push   ebx
c0024274:	e8 7d fa ff ff       	call   c0023cf6 <IDE::prepareInterrupt(unsigned char)>
c0024279:	59                   	pop    ecx
c002427a:	5e                   	pop    esi
c002427b:	6a 01                	push   0x1
c002427d:	53                   	push   ebx
c002427e:	e8 73 fa ff ff       	call   c0023cf6 <IDE::prepareInterrupt(unsigned char)>
c0024283:	83 c4 0c             	add    esp,0xc
c0024286:	6a 00                	push   0x0
c0024288:	6a 00                	push   0x0
c002428a:	53                   	push   ebx
c002428b:	e8 98 fc ff ff       	call   c0023f28 <IDE::enableIRQs(unsigned char, bool)>
c0024290:	83 c4 0c             	add    esp,0xc
c0024293:	6a 00                	push   0x0
c0024295:	6a 01                	push   0x1
c0024297:	53                   	push   ebx
c0024298:	e8 8b fc ff ff       	call   c0023f28 <IDE::enableIRQs(unsigned char, bool)>
c002429d:	83 c4 10             	add    esp,0x10
c00242a0:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00242a7:	74 40                	je     c00242e9 <IDE::open(int, int, void*)+0x37b>
c00242a9:	83 ec 0c             	sub    esp,0xc
c00242ac:	68 fb da 02 c0       	push   0xc002dafb
c00242b1:	e8 81 eb fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00242b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00242b9:	6a 01                	push   0x1
c00242bb:	68 f0 3e 02 c0       	push   0xc0023ef0
c00242c0:	6a 0e                	push   0xe
c00242c2:	53                   	push   ebx
c00242c3:	e8 20 ff fe ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00242c8:	83 c4 14             	add    esp,0x14
c00242cb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00242d1:	53                   	push   ebx
c00242d2:	6a 01                	push   0x1
c00242d4:	68 0c 3f 02 c0       	push   0xc0023f0c
c00242d9:	6a 0f                	push   0xf
c00242db:	53                   	push   ebx
c00242dc:	e8 07 ff fe ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00242e1:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00242e7:	eb 4a                	jmp    c0024333 <IDE::open(int, int, void*)+0x3c5>
c00242e9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00242f3:	50                   	push   eax
c00242f4:	6a 0f                	push   0xf
c00242f6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00242fc:	68 17 db 02 c0       	push   0xc002db17
c0024301:	e8 31 eb fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024306:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024309:	6a 00                	push   0x0
c002430b:	68 f0 3e 02 c0       	push   0xc0023ef0
c0024310:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024316:	53                   	push   ebx
c0024317:	e8 cc fe fe ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002431c:	83 c4 14             	add    esp,0x14
c002431f:	53                   	push   ebx
c0024320:	6a 00                	push   0x0
c0024322:	68 0c 3f 02 c0       	push   0xc0023f0c
c0024327:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002432d:	53                   	push   ebx
c002432e:	e8 b5 fe fe ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024333:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024335:	83 c4 20             	add    esp,0x20
c0024338:	83 ec 0c             	sub    esp,0xc
c002433b:	53                   	push   ebx
c002433c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002433f:	83 c4 0c             	add    esp,0xc
c0024342:	6a 07                	push   0x7
c0024344:	6a 00                	push   0x0
c0024346:	53                   	push   ebx
c0024347:	e8 90 fa ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c002434c:	83 c4 0c             	add    esp,0xc
c002434f:	6a 07                	push   0x7
c0024351:	6a 01                	push   0x1
c0024353:	53                   	push   ebx
c0024354:	e8 83 fa ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0024359:	83 c4 0c             	add    esp,0xc
c002435c:	6a 01                	push   0x1
c002435e:	6a 00                	push   0x0
c0024360:	53                   	push   ebx
c0024361:	e8 c2 fb ff ff       	call   c0023f28 <IDE::enableIRQs(unsigned char, bool)>
c0024366:	83 c4 0c             	add    esp,0xc
c0024369:	6a 01                	push   0x1
c002436b:	6a 01                	push   0x1
c002436d:	53                   	push   ebx
c002436e:	e8 b5 fb ff ff       	call   c0023f28 <IDE::enableIRQs(unsigned char, bool)>
c0024373:	83 c4 2c             	add    esp,0x2c
c0024376:	31 c0                	xor    eax,eax
c0024378:	5b                   	pop    ebx
c0024379:	5e                   	pop    esi
c002437a:	5f                   	pop    edi
c002437b:	5d                   	pop    ebp
c002437c:	c3                   	ret    
c002437d:	90                   	nop

c002437e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002437e:	55                   	push   ebp
c002437f:	57                   	push   edi
c0024380:	56                   	push   esi
c0024381:	53                   	push   ebx
c0024382:	83 ec 1c             	sub    esp,0x1c
c0024385:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0024389:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002438d:	8d 50 f8             	lea    edx,[eax-0x8]
c0024390:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024394:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0024398:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002439c:	80 fa 03             	cmp    dl,0x3
c002439f:	77 5d                	ja     c00243fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00243a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00243a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00243a9:	0f b6 db             	movzx  ebx,bl
c00243ac:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00243af:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00243b3:	83 ca 80             	or     edx,0xffffff80
c00243b6:	0f b6 d2             	movzx  edx,dl
c00243b9:	52                   	push   edx
c00243ba:	6a 0c                	push   0xc
c00243bc:	53                   	push   ebx
c00243bd:	56                   	push   esi
c00243be:	e8 59 f9 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243c3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00243c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00243d0:	0f b6 c0             	movzx  eax,al
c00243d3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00243d7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00243d9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00243de:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00243e2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00243e6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00243ea:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00243f2:	83 c4 2c             	add    esp,0x2c
c00243f5:	5b                   	pop    ebx
c00243f6:	5e                   	pop    esi
c00243f7:	5f                   	pop    edi
c00243f8:	5d                   	pop    ebp
c00243f9:	e9 1e f9 ff ff       	jmp    c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243fe:	3c 07                	cmp    al,0x7
c0024400:	77 10                	ja     c0024412 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0024402:	0f b6 db             	movzx  ebx,bl
c0024405:	0f b6 d0             	movzx  edx,al
c0024408:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0024410:	eb 2d                	jmp    c002443f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024412:	3c 0d                	cmp    al,0xd
c0024414:	77 13                	ja     c0024429 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0024416:	0f b6 db             	movzx  ebx,bl
c0024419:	0f b6 c0             	movzx  eax,al
c002441c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0024423:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0024427:	eb 16                	jmp    c002443f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024429:	3c 15                	cmp    al,0x15
c002442b:	77 14                	ja     c0024441 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002442d:	0f b6 db             	movzx  ebx,bl
c0024430:	0f b6 c0             	movzx  eax,al
c0024433:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002443b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002443f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0024441:	83 c4 1c             	add    esp,0x1c
c0024444:	5b                   	pop    ebx
c0024445:	5e                   	pop    esi
c0024446:	5f                   	pop    edi
c0024447:	5d                   	pop    ebp
c0024448:	c3                   	ret    
c0024449:	90                   	nop

c002444a <IDE::detect()>:
c002444a:	55                   	push   ebp
c002444b:	57                   	push   edi
c002444c:	56                   	push   esi
c002444d:	53                   	push   ebx
c002444e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0024454:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002445b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0024462:	0f 85 be 02 00 00    	jne    c0024726 <IDE::detect()+0x2dc>
c0024468:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002446f:	31 f6                	xor    esi,esi
c0024471:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024479:	31 ed                	xor    ebp,ebp
c002447b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002447f:	c1 e0 06             	shl    eax,0x6
c0024482:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002448a:	89 e8                	mov    eax,ebp
c002448c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024490:	c1 e0 04             	shl    eax,0x4
c0024493:	83 c8 a0             	or     eax,0xffffffa0
c0024496:	0f b6 c0             	movzx  eax,al
c0024499:	50                   	push   eax
c002449a:	6a 06                	push   0x6
c002449c:	56                   	push   esi
c002449d:	53                   	push   ebx
c002449e:	e8 79 f8 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244a3:	83 c4 0c             	add    esp,0xc
c00244a6:	6a 0c                	push   0xc
c00244a8:	56                   	push   esi
c00244a9:	53                   	push   ebx
c00244aa:	e8 2d f9 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00244af:	83 c4 0c             	add    esp,0xc
c00244b2:	6a 0c                	push   0xc
c00244b4:	56                   	push   esi
c00244b5:	53                   	push   ebx
c00244b6:	e8 21 f9 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00244bb:	83 c4 0c             	add    esp,0xc
c00244be:	6a 0c                	push   0xc
c00244c0:	56                   	push   esi
c00244c1:	53                   	push   ebx
c00244c2:	e8 15 f9 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00244c7:	83 c4 0c             	add    esp,0xc
c00244ca:	6a 0c                	push   0xc
c00244cc:	56                   	push   esi
c00244cd:	53                   	push   ebx
c00244ce:	e8 09 f9 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00244d3:	68 ec 00 00 00       	push   0xec
c00244d8:	6a 07                	push   0x7
c00244da:	56                   	push   esi
c00244db:	53                   	push   ebx
c00244dc:	e8 3b f8 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244e1:	83 c4 1c             	add    esp,0x1c
c00244e4:	6a 0c                	push   0xc
c00244e6:	56                   	push   esi
c00244e7:	53                   	push   ebx
c00244e8:	e8 ef f8 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00244ed:	83 c4 0c             	add    esp,0xc
c00244f0:	6a 0c                	push   0xc
c00244f2:	56                   	push   esi
c00244f3:	53                   	push   ebx
c00244f4:	e8 e3 f8 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00244f9:	83 c4 0c             	add    esp,0xc
c00244fc:	6a 0c                	push   0xc
c00244fe:	56                   	push   esi
c00244ff:	53                   	push   ebx
c0024500:	e8 d7 f8 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0024505:	83 c4 0c             	add    esp,0xc
c0024508:	6a 0c                	push   0xc
c002450a:	56                   	push   esi
c002450b:	53                   	push   ebx
c002450c:	e8 cb f8 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0024511:	83 c4 0c             	add    esp,0xc
c0024514:	6a 0c                	push   0xc
c0024516:	56                   	push   esi
c0024517:	53                   	push   ebx
c0024518:	e8 bf f8 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c002451d:	83 c4 10             	add    esp,0x10
c0024520:	84 c0                	test   al,al
c0024522:	0f 84 8b 01 00 00    	je     c00246b3 <IDE::detect()+0x269>
c0024528:	31 ff                	xor    edi,edi
c002452a:	50                   	push   eax
c002452b:	6a 0c                	push   0xc
c002452d:	56                   	push   esi
c002452e:	53                   	push   ebx
c002452f:	e8 a8 f8 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0024534:	83 c4 10             	add    esp,0x10
c0024537:	a8 01                	test   al,0x1
c0024539:	0f 85 8e 01 00 00    	jne    c00246cd <IDE::detect()+0x283>
c002453f:	84 c0                	test   al,al
c0024541:	78 04                	js     c0024547 <IDE::detect()+0xfd>
c0024543:	a8 08                	test   al,0x8
c0024545:	75 27                	jne    c002456e <IDE::detect()+0x124>
c0024547:	47                   	inc    edi
c0024548:	81 ff 17 01 00 00    	cmp    edi,0x117
c002454e:	7e da                	jle    c002452a <IDE::detect()+0xe0>
c0024550:	50                   	push   eax
c0024551:	50                   	push   eax
c0024552:	6a 00                	push   0x0
c0024554:	68 40 4b 4c 00       	push   0x4c4b40
c0024559:	e8 fd a4 ff ff       	call   c001ea5b <nanoSleep(unsigned long long)>
c002455e:	83 c4 10             	add    esp,0x10
c0024561:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0024567:	75 c1                	jne    c002452a <IDE::detect()+0xe0>
c0024569:	e9 5f 01 00 00       	jmp    c00246cd <IDE::detect()+0x283>
c002456e:	31 c9                	xor    ecx,ecx
c0024570:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0024574:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024578:	83 ec 0c             	sub    esp,0xc
c002457b:	68 80 00 00 00       	push   0x80
c0024580:	57                   	push   edi
c0024581:	6a 00                	push   0x0
c0024583:	56                   	push   esi
c0024584:	53                   	push   ebx
c0024585:	e8 f4 fd ff ff       	call   c002437e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002458a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002458f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024593:	89 d1                	mov    ecx,edx
c0024595:	c1 e0 06             	shl    eax,0x6
c0024598:	01 d8                	add    eax,ebx
c002459a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00245a1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00245a8:	89 f2                	mov    edx,esi
c00245aa:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00245b0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00245b4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00245ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00245be:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00245c5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00245cd:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00245d4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00245dc:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00245e2:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00245e9:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00245ef:	8d 54 24 58          	lea    edx,[esp+0x58]
c00245f3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00245f7:	83 c4 20             	add    esp,0x20
c00245fa:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00245fd:	83 c0 02             	add    eax,0x2
c0024600:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024606:	83 c7 02             	add    edi,0x2
c0024609:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002460c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0024612:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024616:	75 e2                	jne    c00245fa <IDE::detect()+0x1b0>
c0024618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002461c:	c1 e0 06             	shl    eax,0x6
c002461f:	01 d8                	add    eax,ebx
c0024621:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024627:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002462e:	66 c1 ea 09          	shr    dx,0x9
c0024632:	83 e2 01             	and    edx,0x1
c0024635:	84 c9                	test   cl,cl
c0024637:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002463d:	75 2f                	jne    c002466e <IDE::detect()+0x224>
c002463f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0024645:	85 c0                	test   eax,eax
c0024647:	74 66                	je     c00246af <IDE::detect()+0x265>
c0024649:	50                   	push   eax
c002464a:	55                   	push   ebp
c002464b:	56                   	push   esi
c002464c:	68 33 db 02 c0       	push   0xc002db33
c0024651:	e8 e1 e7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024656:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002465d:	e8 2a b2 fe ff       	call   c000f88c <malloc>
c0024662:	89 c7                	mov    edi,eax
c0024664:	89 04 24             	mov    DWORD PTR [esp],eax
c0024667:	e8 78 06 00 00       	call   c0024ce4 <ATA::ATA()>
c002466c:	eb 28                	jmp    c0024696 <IDE::detect()+0x24c>
c002466e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0024674:	55                   	push   ebp
c0024675:	56                   	push   esi
c0024676:	68 62 db 02 c0       	push   0xc002db62
c002467b:	e8 b7 e7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024680:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024687:	e8 00 b2 fe ff       	call   c000f88c <malloc>
c002468c:	89 c7                	mov    edi,eax
c002468e:	89 04 24             	mov    DWORD PTR [esp],eax
c0024691:	e8 8e 0c 00 00       	call   c0025324 <ATAPI::ATAPI()>
c0024696:	5a                   	pop    edx
c0024697:	59                   	pop    ecx
c0024698:	57                   	push   edi
c0024699:	53                   	push   ebx
c002469a:	e8 d1 fb fe ff       	call   c0014270 <Device::addChild(Device*)>
c002469f:	8b 07                	mov    eax,DWORD PTR [edi]
c00246a1:	53                   	push   ebx
c00246a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00246a6:	6a 00                	push   0x0
c00246a8:	57                   	push   edi
c00246a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00246ac:	83 c4 20             	add    esp,0x20
c00246af:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00246b3:	4d                   	dec    ebp
c00246b4:	74 0a                	je     c00246c0 <IDE::detect()+0x276>
c00246b6:	bd 01 00 00 00       	mov    ebp,0x1
c00246bb:	e9 bb fd ff ff       	jmp    c002447b <IDE::detect()+0x31>
c00246c0:	4e                   	dec    esi
c00246c1:	74 63                	je     c0024726 <IDE::detect()+0x2dc>
c00246c3:	be 01 00 00 00       	mov    esi,0x1
c00246c8:	e9 ac fd ff ff       	jmp    c0024479 <IDE::detect()+0x2f>
c00246cd:	50                   	push   eax
c00246ce:	6a 04                	push   0x4
c00246d0:	56                   	push   esi
c00246d1:	53                   	push   ebx
c00246d2:	e8 05 f7 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00246d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00246db:	83 c4 0c             	add    esp,0xc
c00246de:	6a 05                	push   0x5
c00246e0:	56                   	push   esi
c00246e1:	53                   	push   ebx
c00246e2:	e8 f5 f6 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00246e7:	83 c4 10             	add    esp,0x10
c00246ea:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00246ee:	80 fa 14             	cmp    dl,0x14
c00246f1:	75 04                	jne    c00246f7 <IDE::detect()+0x2ad>
c00246f3:	3c eb                	cmp    al,0xeb
c00246f5:	eb 07                	jmp    c00246fe <IDE::detect()+0x2b4>
c00246f7:	3c 96                	cmp    al,0x96
c00246f9:	75 b8                	jne    c00246b3 <IDE::detect()+0x269>
c00246fb:	80 fa 69             	cmp    dl,0x69
c00246fe:	75 b3                	jne    c00246b3 <IDE::detect()+0x269>
c0024700:	68 a1 00 00 00       	push   0xa1
c0024705:	6a 07                	push   0x7
c0024707:	56                   	push   esi
c0024708:	53                   	push   ebx
c0024709:	e8 0e f6 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002470e:	5f                   	pop    edi
c002470f:	58                   	pop    eax
c0024710:	6a 00                	push   0x0
c0024712:	68 40 42 0f 00       	push   0xf4240
c0024717:	e8 3f a3 ff ff       	call   c001ea5b <nanoSleep(unsigned long long)>
c002471c:	83 c4 10             	add    esp,0x10
c002471f:	b1 01                	mov    cl,0x1
c0024721:	e9 4a fe ff ff       	jmp    c0024570 <IDE::detect()+0x126>
c0024726:	81 c4 1c 02 00 00    	add    esp,0x21c
c002472c:	5b                   	pop    ebx
c002472d:	5e                   	pop    esi
c002472e:	5f                   	pop    edi
c002472f:	5d                   	pop    ebp
c0024730:	c3                   	ret    
c0024731:	90                   	nop

c0024732 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0024732:	55                   	push   ebp
c0024733:	57                   	push   edi
c0024734:	56                   	push   esi
c0024735:	53                   	push   ebx
c0024736:	83 ec 1c             	sub    esp,0x1c
c0024739:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002473d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024741:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024745:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024749:	88 c3                	mov    bl,al
c002474b:	84 c0                	test   al,al
c002474d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024751:	0f 84 67 01 00 00    	je     c00248be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0024757:	83 ec 0c             	sub    esp,0xc
c002475a:	68 93 db 02 c0       	push   0xc002db93
c002475f:	e8 d3 e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024764:	83 c4 10             	add    esp,0x10
c0024767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002476b:	3c 01                	cmp    al,0x1
c002476d:	75 17                	jne    c0024786 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002476f:	83 ec 0c             	sub    esp,0xc
c0024772:	b3 13                	mov    bl,0x13
c0024774:	68 9f db 02 c0       	push   0xc002db9f
c0024779:	e8 b9 e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002477e:	83 c4 10             	add    esp,0x10
c0024781:	e9 25 01 00 00       	jmp    c00248ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024786:	3c 02                	cmp    al,0x2
c0024788:	0f 85 ef 00 00 00    	jne    c002487d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002478e:	d1 e6                	shl    esi,1
c0024790:	09 ee                	or     esi,ebp
c0024792:	52                   	push   edx
c0024793:	89 f0                	mov    eax,esi
c0024795:	6a 01                	push   0x1
c0024797:	0f b6 f0             	movzx  esi,al
c002479a:	c1 e6 06             	shl    esi,0x6
c002479d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00247a5:	50                   	push   eax
c00247a6:	57                   	push   edi
c00247a7:	e8 30 f6 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00247ac:	83 c4 10             	add    esp,0x10
c00247af:	89 c6                	mov    esi,eax
c00247b1:	a8 01                	test   al,0x1
c00247b3:	74 12                	je     c00247c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00247b5:	83 ec 0c             	sub    esp,0xc
c00247b8:	b3 07                	mov    bl,0x7
c00247ba:	68 b4 db 02 c0       	push   0xc002dbb4
c00247bf:	e8 73 e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00247c4:	83 c4 10             	add    esp,0x10
c00247c7:	f7 c6 02 00 00 00    	test   esi,0x2
c00247cd:	74 12                	je     c00247e1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00247cf:	83 ec 0c             	sub    esp,0xc
c00247d2:	b3 03                	mov    bl,0x3
c00247d4:	68 d2 db 02 c0       	push   0xc002dbd2
c00247d9:	e8 59 e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00247de:	83 c4 10             	add    esp,0x10
c00247e1:	f7 c6 04 00 00 00    	test   esi,0x4
c00247e7:	74 12                	je     c00247fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00247e9:	83 ec 0c             	sub    esp,0xc
c00247ec:	b3 14                	mov    bl,0x14
c00247ee:	68 f2 db 02 c0       	push   0xc002dbf2
c00247f3:	e8 3f e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00247f8:	83 c4 10             	add    esp,0x10
c00247fb:	f7 c6 08 00 00 00    	test   esi,0x8
c0024801:	74 12                	je     c0024815 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0024803:	83 ec 0c             	sub    esp,0xc
c0024806:	b3 03                	mov    bl,0x3
c0024808:	68 d2 db 02 c0       	push   0xc002dbd2
c002480d:	e8 25 e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024812:	83 c4 10             	add    esp,0x10
c0024815:	f7 c6 10 00 00 00    	test   esi,0x10
c002481b:	74 12                	je     c002482f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c002481d:	83 ec 0c             	sub    esp,0xc
c0024820:	b3 15                	mov    bl,0x15
c0024822:	68 0a dc 02 c0       	push   0xc002dc0a
c0024827:	e8 0b e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002482c:	83 c4 10             	add    esp,0x10
c002482f:	f7 c6 20 00 00 00    	test   esi,0x20
c0024835:	74 12                	je     c0024849 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024837:	83 ec 0c             	sub    esp,0xc
c002483a:	b3 03                	mov    bl,0x3
c002483c:	68 d2 db 02 c0       	push   0xc002dbd2
c0024841:	e8 f1 e5 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024846:	83 c4 10             	add    esp,0x10
c0024849:	f7 c6 40 00 00 00    	test   esi,0x40
c002484f:	74 12                	je     c0024863 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0024851:	83 ec 0c             	sub    esp,0xc
c0024854:	b3 16                	mov    bl,0x16
c0024856:	68 24 dc 02 c0       	push   0xc002dc24
c002485b:	e8 d7 e5 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024860:	83 c4 10             	add    esp,0x10
c0024863:	89 f0                	mov    eax,esi
c0024865:	84 c0                	test   al,al
c0024867:	79 42                	jns    c00248ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024869:	83 ec 0c             	sub    esp,0xc
c002486c:	b3 0d                	mov    bl,0xd
c002486e:	68 45 dc 02 c0       	push   0xc002dc45
c0024873:	e8 bf e5 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024878:	83 c4 10             	add    esp,0x10
c002487b:	eb 2e                	jmp    c00248ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002487d:	3c 03                	cmp    al,0x3
c002487f:	75 14                	jne    c0024895 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024881:	83 ec 0c             	sub    esp,0xc
c0024884:	b3 17                	mov    bl,0x17
c0024886:	68 59 dc 02 c0       	push   0xc002dc59
c002488b:	e8 a7 e5 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024890:	83 c4 10             	add    esp,0x10
c0024893:	eb 16                	jmp    c00248ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024895:	3c 04                	cmp    al,0x4
c0024897:	75 12                	jne    c00248ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024899:	83 ec 0c             	sub    esp,0xc
c002489c:	b3 08                	mov    bl,0x8
c002489e:	68 6f dc 02 c0       	push   0xc002dc6f
c00248a3:	e8 8f e5 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00248a8:	83 c4 10             	add    esp,0x10
c00248ab:	50                   	push   eax
c00248ac:	50                   	push   eax
c00248ad:	0f b6 c3             	movzx  eax,bl
c00248b0:	50                   	push   eax
c00248b1:	68 87 dc 02 c0       	push   0xc002dc87
c00248b6:	e8 7c e5 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00248bb:	83 c4 10             	add    esp,0x10
c00248be:	83 c4 1c             	add    esp,0x1c
c00248c1:	88 d8                	mov    al,bl
c00248c3:	5b                   	pop    ebx
c00248c4:	5e                   	pop    esi
c00248c5:	5f                   	pop    edi
c00248c6:	5d                   	pop    ebp
c00248c7:	c3                   	ret    

c00248c8 <IDE::polling(unsigned char, unsigned int)>:
c00248c8:	57                   	push   edi
c00248c9:	56                   	push   esi
c00248ca:	53                   	push   ebx
c00248cb:	bb 04 00 00 00       	mov    ebx,0x4
c00248d0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00248d4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00248d9:	52                   	push   edx
c00248da:	6a 0c                	push   0xc
c00248dc:	56                   	push   esi
c00248dd:	57                   	push   edi
c00248de:	e8 f9 f4 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00248e3:	83 c4 10             	add    esp,0x10
c00248e6:	4b                   	dec    ebx
c00248e7:	75 f0                	jne    c00248d9 <IDE::polling(unsigned char, unsigned int)+0x11>
c00248e9:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248ee:	50                   	push   eax
c00248ef:	6a 0c                	push   0xc
c00248f1:	56                   	push   esi
c00248f2:	57                   	push   edi
c00248f3:	e8 e4 f4 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c00248f8:	83 c4 10             	add    esp,0x10
c00248fb:	a8 01                	test   al,0x1
c00248fd:	74 12                	je     c0024911 <IDE::polling(unsigned char, unsigned int)+0x49>
c00248ff:	83 ec 0c             	sub    esp,0xc
c0024902:	68 a1 dc 02 c0       	push   0xc002dca1
c0024907:	e8 2b e5 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002490c:	83 c4 10             	add    esp,0x10
c002490f:	eb 17                	jmp    c0024928 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024911:	a8 20                	test   al,0x20
c0024913:	75 0f                	jne    c0024924 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024915:	4b                   	dec    ebx
c0024916:	74 10                	je     c0024928 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024918:	84 c0                	test   al,al
c002491a:	78 d2                	js     c00248ee <IDE::polling(unsigned char, unsigned int)+0x26>
c002491c:	a8 08                	test   al,0x8
c002491e:	74 ce                	je     c00248ee <IDE::polling(unsigned char, unsigned int)+0x26>
c0024920:	31 c0                	xor    eax,eax
c0024922:	eb 06                	jmp    c002492a <IDE::polling(unsigned char, unsigned int)+0x62>
c0024924:	b0 01                	mov    al,0x1
c0024926:	eb 02                	jmp    c002492a <IDE::polling(unsigned char, unsigned int)+0x62>
c0024928:	b0 02                	mov    al,0x2
c002492a:	5b                   	pop    ebx
c002492b:	5e                   	pop    esi
c002492c:	5f                   	pop    edi
c002492d:	c3                   	ret    

c002492e <SATABus::close(int, int, void*)>:
c002492e:	31 c0                	xor    eax,eax
c0024930:	c3                   	ret    
c0024931:	90                   	nop

c0024932 <SATABus::detect()>:
c0024932:	c3                   	ret    
c0024933:	90                   	nop

c0024934 <SATABus::SATABus()>:
c0024934:	83 ec 0c             	sub    esp,0xc
c0024937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002493b:	83 ec 08             	sub    esp,0x8
c002493e:	68 e4 dc 02 c0       	push   0xc002dce4
c0024943:	50                   	push   eax
c0024944:	e8 d5 fc fe ff       	call   c001461e <HardDiskController::HardDiskController(char const*)>
c0024949:	83 c4 10             	add    esp,0x10
c002494c:	ba a0 dd 02 c0       	mov    edx,0xc002dda0
c0024951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024955:	89 10                	mov    DWORD PTR [eax],edx
c0024957:	83 ec 0c             	sub    esp,0xc
c002495a:	6a 50                	push   0x50
c002495c:	e8 7c b6 fe ff       	call   c000ffdd <Phys::allocateContiguousPages(int)>
c0024961:	83 c4 10             	add    esp,0x10
c0024964:	89 c2                	mov    edx,eax
c0024966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002496a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024970:	83 ec 0c             	sub    esp,0xc
c0024973:	6a 50                	push   0x50
c0024975:	e8 b7 d0 fe ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c002497a:	83 c4 10             	add    esp,0x10
c002497d:	89 c2                	mov    edx,eax
c002497f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024983:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024989:	a1 90 f5 02 c0       	mov    eax,ds:0xc002f590
c002498e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024992:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024998:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002499c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00249a2:	83 ec 0c             	sub    esp,0xc
c00249a5:	6a 03                	push   0x3
c00249a7:	6a 50                	push   0x50
c00249a9:	51                   	push   ecx
c00249aa:	52                   	push   edx
c00249ab:	50                   	push   eax
c00249ac:	e8 ad db fe ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00249b1:	83 c4 20             	add    esp,0x20
c00249b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249b8:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00249be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00249c8:	83 ec 04             	sub    esp,0x4
c00249cb:	52                   	push   edx
c00249cc:	50                   	push   eax
c00249cd:	68 08 dd 02 c0       	push   0xc002dd08
c00249d2:	e8 60 e4 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00249d7:	83 c4 10             	add    esp,0x10
c00249da:	90                   	nop
c00249db:	83 c4 0c             	add    esp,0xc
c00249de:	c3                   	ret    
c00249df:	90                   	nop

c00249e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00249e0:	83 ec 0c             	sub    esp,0xc
c00249e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00249e7:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00249ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00249ed:	09 c2                	or     edx,eax
c00249ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00249f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00249fb:	31 c0                	xor    eax,eax
c00249fd:	c1 e9 08             	shr    ecx,0x8
c0024a00:	83 e1 0f             	and    ecx,0xf
c0024a03:	39 c8                	cmp    eax,ecx
c0024a05:	74 0a                	je     c0024a11 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024a07:	f6 c2 01             	test   dl,0x1
c0024a0a:	74 18                	je     c0024a24 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024a0c:	d1 ea                	shr    edx,1
c0024a0e:	40                   	inc    eax
c0024a0f:	eb f2                	jmp    c0024a03 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024a11:	83 ec 0c             	sub    esp,0xc
c0024a14:	68 2c dd 02 c0       	push   0xc002dd2c
c0024a19:	e8 87 5f ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0024a1e:	83 c4 10             	add    esp,0x10
c0024a21:	83 c8 ff             	or     eax,0xffffffff
c0024a24:	83 c4 0c             	add    esp,0xc
c0024a27:	c3                   	ret    

c0024a28 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024a28:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024a2c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024a2f:	89 c2                	mov    edx,eax
c0024a31:	c1 ea 08             	shr    edx,0x8
c0024a34:	83 e2 0f             	and    edx,0xf
c0024a37:	fe ca                	dec    dl
c0024a39:	75 31                	jne    c0024a6c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024a3b:	83 e0 0f             	and    eax,0xf
c0024a3e:	3c 03                	cmp    al,0x3
c0024a40:	75 2a                	jne    c0024a6c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024a42:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024a45:	b8 02 00 00 00       	mov    eax,0x2
c0024a4a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024a50:	74 1c                	je     c0024a6e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024a52:	b8 04 00 00 00       	mov    eax,0x4
c0024a57:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024a5d:	74 0f                	je     c0024a6e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024a5f:	31 c0                	xor    eax,eax
c0024a61:	83 fa 03             	cmp    edx,0x3
c0024a64:	0f 94 c0             	sete   al
c0024a67:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024a6b:	c3                   	ret    
c0024a6c:	31 c0                	xor    eax,eax
c0024a6e:	c3                   	ret    
c0024a6f:	90                   	nop

c0024a70 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024a70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024a74:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024a77:	0f ba e2 0f          	bt     edx,0xf
c0024a7b:	72 f7                	jb     c0024a74 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024a7d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024a80:	83 ca 10             	or     edx,0x10
c0024a83:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024a86:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024a89:	83 ca 01             	or     edx,0x1
c0024a8c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024a8f:	c3                   	ret    

c0024a90 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024a90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024a94:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024a97:	83 e2 fe             	and    edx,0xfffffffe
c0024a9a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024a9d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024aa0:	83 e2 ef             	and    edx,0xffffffef
c0024aa3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024aa6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024aa9:	0f ba e2 0e          	bt     edx,0xe
c0024aad:	72 f7                	jb     c0024aa6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024aaf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024ab2:	0f ba e2 0f          	bt     edx,0xf
c0024ab6:	72 ee                	jb     c0024aa6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024ab8:	c3                   	ret    
c0024ab9:	90                   	nop

c0024aba <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024aba:	55                   	push   ebp
c0024abb:	57                   	push   edi
c0024abc:	56                   	push   esi
c0024abd:	53                   	push   ebx
c0024abe:	83 ec 1c             	sub    esp,0x1c
c0024ac1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ac5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024ac9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024acd:	53                   	push   ebx
c0024ace:	89 fd                	mov    ebp,edi
c0024ad0:	56                   	push   esi
c0024ad1:	c1 e5 0a             	shl    ebp,0xa
c0024ad4:	e8 b7 ff ff ff       	call   c0024a90 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024ad9:	83 ec 0c             	sub    esp,0xc
c0024adc:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024ae2:	01 e8                	add    eax,ebp
c0024ae4:	89 03                	mov    DWORD PTR [ebx],eax
c0024ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024ae8:	68 00 04 00 00       	push   0x400
c0024aed:	6a 00                	push   0x0
c0024aef:	50                   	push   eax
c0024af0:	e8 5b bc fd ff       	call   c0000750 <memset>
c0024af5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024afb:	89 fa                	mov    edx,edi
c0024afd:	01 e8                	add    eax,ebp
c0024aff:	c1 e7 0d             	shl    edi,0xd
c0024b02:	89 03                	mov    DWORD PTR [ebx],eax
c0024b04:	c1 e2 08             	shl    edx,0x8
c0024b07:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024b0e:	81 c2 00 80 00 00    	add    edx,0x8000
c0024b14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024b18:	89 d0                	mov    eax,edx
c0024b1a:	83 c4 1c             	add    esp,0x1c
c0024b1d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024b23:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024b26:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024b29:	68 00 01 00 00       	push   0x100
c0024b2e:	6a 00                	push   0x0
c0024b30:	50                   	push   eax
c0024b31:	e8 1a bc fd ff       	call   c0000750 <memset>
c0024b36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b3a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024b40:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024b46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b4a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024b4d:	83 c4 10             	add    esp,0x10
c0024b50:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024b57:	31 ff                	xor    edi,edi
c0024b59:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024b5f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024b69:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024b6f:	83 c5 20             	add    ebp,0x20
c0024b72:	01 f8                	add    eax,edi
c0024b74:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024b77:	52                   	push   edx
c0024b78:	68 00 01 00 00       	push   0x100
c0024b7d:	6a 00                	push   0x0
c0024b7f:	50                   	push   eax
c0024b80:	e8 cb bb fd ff       	call   c0000750 <memset>
c0024b85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b89:	83 c4 10             	add    esp,0x10
c0024b8c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024b92:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024b99:	01 f8                	add    eax,edi
c0024b9b:	81 c7 00 01 00 00    	add    edi,0x100
c0024ba1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024ba4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024baa:	75 b3                	jne    c0024b5f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024bac:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024bb0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024bb4:	83 c4 1c             	add    esp,0x1c
c0024bb7:	5b                   	pop    ebx
c0024bb8:	5e                   	pop    esi
c0024bb9:	5f                   	pop    edi
c0024bba:	5d                   	pop    ebp
c0024bbb:	e9 b0 fe ff ff       	jmp    c0024a70 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024bc0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024bc0:	55                   	push   ebp
c0024bc1:	57                   	push   edi
c0024bc2:	56                   	push   esi
c0024bc3:	53                   	push   ebx
c0024bc4:	31 db                	xor    ebx,ebx
c0024bc6:	83 ec 0c             	sub    esp,0xc
c0024bc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024bcd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024bd1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024bd4:	f7 c7 01 00 00 00    	test   edi,0x1
c0024bda:	0f 84 aa 00 00 00    	je     c0024c8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024be0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024be4:	89 d8                	mov    eax,ebx
c0024be6:	c1 e0 07             	shl    eax,0x7
c0024be9:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024bf0:	55                   	push   ebp
c0024bf1:	56                   	push   esi
c0024bf2:	e8 31 fe ff ff       	call   c0024a28 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024bf7:	5a                   	pop    edx
c0024bf8:	83 f8 01             	cmp    eax,0x1
c0024bfb:	59                   	pop    ecx
c0024bfc:	75 30                	jne    c0024c2e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024bfe:	50                   	push   eax
c0024bff:	50                   	push   eax
c0024c00:	53                   	push   ebx
c0024c01:	68 51 dd 02 c0       	push   0xc002dd51
c0024c06:	e8 2c e2 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024c0b:	83 c4 0c             	add    esp,0xc
c0024c0e:	53                   	push   ebx
c0024c0f:	55                   	push   ebp
c0024c10:	56                   	push   esi
c0024c11:	e8 a4 fe ff ff       	call   c0024aba <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024c16:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024c1d:	e8 6a ac fe ff       	call   c000f88c <malloc>
c0024c22:	89 c5                	mov    ebp,eax
c0024c24:	89 04 24             	mov    DWORD PTR [esp],eax
c0024c27:	e8 5c 0d 00 00       	call   c0025988 <SATA::SATA()>
c0024c2c:	eb 33                	jmp    c0024c61 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024c2e:	83 f8 04             	cmp    eax,0x4
c0024c31:	75 47                	jne    c0024c7a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024c33:	50                   	push   eax
c0024c34:	50                   	push   eax
c0024c35:	53                   	push   ebx
c0024c36:	68 68 dd 02 c0       	push   0xc002dd68
c0024c3b:	e8 f7 e1 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024c40:	83 c4 0c             	add    esp,0xc
c0024c43:	53                   	push   ebx
c0024c44:	55                   	push   ebp
c0024c45:	56                   	push   esi
c0024c46:	e8 6f fe ff ff       	call   c0024aba <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024c4b:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024c52:	e8 35 ac fe ff       	call   c000f88c <malloc>
c0024c57:	89 c5                	mov    ebp,eax
c0024c59:	89 04 24             	mov    DWORD PTR [esp],eax
c0024c5c:	e8 d3 10 00 00       	call   c0025d34 <SATAPI::SATAPI()>
c0024c61:	5a                   	pop    edx
c0024c62:	59                   	pop    ecx
c0024c63:	55                   	push   ebp
c0024c64:	56                   	push   esi
c0024c65:	e8 06 f6 fe ff       	call   c0014270 <Device::addChild(Device*)>
c0024c6a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024c6d:	56                   	push   esi
c0024c6e:	6a 00                	push   0x0
c0024c70:	53                   	push   ebx
c0024c71:	55                   	push   ebp
c0024c72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024c75:	83 c4 20             	add    esp,0x20
c0024c78:	eb 10                	jmp    c0024c8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024c7a:	50                   	push   eax
c0024c7b:	50                   	push   eax
c0024c7c:	53                   	push   ebx
c0024c7d:	68 81 dd 02 c0       	push   0xc002dd81
c0024c82:	e8 b0 e1 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024c87:	83 c4 10             	add    esp,0x10
c0024c8a:	d1 ef                	shr    edi,1
c0024c8c:	43                   	inc    ebx
c0024c8d:	83 fb 20             	cmp    ebx,0x20
c0024c90:	0f 85 3e ff ff ff    	jne    c0024bd4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024c96:	83 c4 0c             	add    esp,0xc
c0024c99:	5b                   	pop    ebx
c0024c9a:	5e                   	pop    esi
c0024c9b:	5f                   	pop    edi
c0024c9c:	5d                   	pop    ebp
c0024c9d:	c3                   	ret    

c0024c9e <SATABus::open(int, int, void*)>:
c0024c9e:	83 ec 14             	sub    esp,0x14
c0024ca1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ca5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024cab:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024cb1:	52                   	push   edx
c0024cb2:	50                   	push   eax
c0024cb3:	e8 08 ff ff ff       	call   c0024bc0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024cb8:	31 c0                	xor    eax,eax
c0024cba:	83 c4 1c             	add    esp,0x1c
c0024cbd:	c3                   	ret    

c0024cbe <ATA::close(int, int, void*)>:
c0024cbe:	83 ec 0c             	sub    esp,0xc
c0024cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cc5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024ccb:	85 c0                	test   eax,eax
c0024ccd:	74 0c                	je     c0024cdb <ATA::close(int, int, void*)+0x1d>
c0024ccf:	83 ec 0c             	sub    esp,0xc
c0024cd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0024cd4:	50                   	push   eax
c0024cd5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024cd8:	83 c4 10             	add    esp,0x10
c0024cdb:	31 c0                	xor    eax,eax
c0024cdd:	83 c4 0c             	add    esp,0xc
c0024ce0:	c3                   	ret    
c0024ce1:	90                   	nop

c0024ce2 <ATA::powerSaving(PowerSavingLevel)>:
c0024ce2:	c3                   	ret    
c0024ce3:	90                   	nop

c0024ce4 <ATA::ATA()>:
c0024ce4:	83 ec 0c             	sub    esp,0xc
c0024ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ceb:	83 ec 04             	sub    esp,0x4
c0024cee:	68 00 02 00 00       	push   0x200
c0024cf3:	68 69 de 02 c0       	push   0xc002de69
c0024cf8:	50                   	push   eax
c0024cf9:	e8 b8 f9 fe ff       	call   c00146b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024cfe:	83 c4 10             	add    esp,0x10
c0024d01:	ba ec dd 02 c0       	mov    edx,0xc002ddec
c0024d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d0a:	89 10                	mov    DWORD PTR [eax],edx
c0024d0c:	90                   	nop
c0024d0d:	83 c4 0c             	add    esp,0xc
c0024d10:	c3                   	ret    
c0024d11:	90                   	nop

c0024d12 <ATA::flush(bool)>:
c0024d12:	53                   	push   ebx
c0024d13:	83 ec 08             	sub    esp,0x8
c0024d16:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024d1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d1f:	19 c0                	sbb    eax,eax
c0024d21:	83 e0 fd             	and    eax,0xfffffffd
c0024d24:	05 ea 00 00 00       	add    eax,0xea
c0024d29:	50                   	push   eax
c0024d2a:	6a 07                	push   0x7
c0024d2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d33:	50                   	push   eax
c0024d34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d3a:	e8 dd ef ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d3f:	83 c4 0c             	add    esp,0xc
c0024d42:	6a 00                	push   0x0
c0024d44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d4b:	50                   	push   eax
c0024d4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d52:	e8 71 fb ff ff       	call   c00248c8 <IDE::polling(unsigned char, unsigned int)>
c0024d57:	83 c4 18             	add    esp,0x18
c0024d5a:	5b                   	pop    ebx
c0024d5b:	c3                   	ret    

c0024d5c <ATA::readyForCommand()>:
c0024d5c:	56                   	push   esi
c0024d5d:	53                   	push   ebx
c0024d5e:	31 db                	xor    ebx,ebx
c0024d60:	50                   	push   eax
c0024d61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024d65:	50                   	push   eax
c0024d66:	6a 0c                	push   0xc
c0024d68:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024d6f:	50                   	push   eax
c0024d70:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024d76:	e8 61 f0 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0024d7b:	83 c4 10             	add    esp,0x10
c0024d7e:	a8 88                	test   al,0x88
c0024d80:	74 23                	je     c0024da5 <ATA::readyForCommand()+0x49>
c0024d82:	43                   	inc    ebx
c0024d83:	83 fb 63             	cmp    ebx,0x63
c0024d86:	7e dd                	jle    c0024d65 <ATA::readyForCommand()+0x9>
c0024d88:	51                   	push   ecx
c0024d89:	51                   	push   ecx
c0024d8a:	6a 00                	push   0x0
c0024d8c:	68 40 42 0f 00       	push   0xf4240
c0024d91:	e8 c5 9c ff ff       	call   c001ea5b <nanoSleep(unsigned long long)>
c0024d96:	83 c4 10             	add    esp,0x10
c0024d99:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024d9f:	75 c4                	jne    c0024d65 <ATA::readyForCommand()+0x9>
c0024da1:	31 c0                	xor    eax,eax
c0024da3:	eb 02                	jmp    c0024da7 <ATA::readyForCommand()+0x4b>
c0024da5:	b0 01                	mov    al,0x1
c0024da7:	5a                   	pop    edx
c0024da8:	5b                   	pop    ebx
c0024da9:	5e                   	pop    esi
c0024daa:	c3                   	ret    
c0024dab:	90                   	nop

c0024dac <ATA::access(unsigned long long, int, void*, bool)>:
c0024dac:	55                   	push   ebp
c0024dad:	57                   	push   edi
c0024dae:	56                   	push   esi
c0024daf:	53                   	push   ebx
c0024db0:	83 ec 2c             	sub    esp,0x2c
c0024db3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024db7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024dbb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024dbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024dc3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024dc7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024dcb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024dcf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024dd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024dd9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024ddf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024de3:	c1 e0 06             	shl    eax,0x6
c0024de6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024dee:	74 5d                	je     c0024e4d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024df0:	89 fa                	mov    edx,edi
c0024df2:	89 f0                	mov    eax,esi
c0024df4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024df8:	c1 ea 1c             	shr    edx,0x1c
c0024dfb:	89 d1                	mov    ecx,edx
c0024dfd:	09 c1                	or     ecx,eax
c0024dff:	74 25                	je     c0024e26 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024e01:	31 ed                	xor    ebp,ebp
c0024e03:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024e0a:	89 fa                	mov    edx,edi
c0024e0c:	89 f0                	mov    eax,esi
c0024e0e:	0f ad d0             	shrd   eax,edx,cl
c0024e11:	d3 ea                	shr    edx,cl
c0024e13:	f6 c1 20             	test   cl,0x20
c0024e16:	74 02                	je     c0024e1a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024e18:	89 d0                	mov    eax,edx
c0024e1a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024e1e:	45                   	inc    ebp
c0024e1f:	83 fd 06             	cmp    ebp,0x6
c0024e22:	75 df                	jne    c0024e03 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024e24:	eb 76                	jmp    c0024e9c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024e26:	89 f0                	mov    eax,esi
c0024e28:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024e2d:	89 fa                	mov    edx,edi
c0024e2f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024e36:	0f ac d0 10          	shrd   eax,edx,0x10
c0024e3a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024e3f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024e43:	c1 ee 18             	shr    esi,0x18
c0024e46:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024e4b:	eb 56                	jmp    c0024ea3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024e4d:	6a 00                	push   0x0
c0024e4f:	6a 3f                	push   0x3f
c0024e51:	57                   	push   edi
c0024e52:	56                   	push   esi
c0024e53:	e8 9c 29 00 00       	call   c00277f4 <__umoddi3>
c0024e58:	83 c4 10             	add    esp,0x10
c0024e5b:	40                   	inc    eax
c0024e5c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024e60:	6a 00                	push   0x0
c0024e62:	68 f0 03 00 00       	push   0x3f0
c0024e67:	57                   	push   edi
c0024e68:	56                   	push   esi
c0024e69:	e8 86 28 00 00       	call   c00276f4 <__udivdi3>
c0024e6e:	83 c4 10             	add    esp,0x10
c0024e71:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024e76:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024e7d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024e82:	6a 00                	push   0x0
c0024e84:	6a 3f                	push   0x3f
c0024e86:	57                   	push   edi
c0024e87:	56                   	push   esi
c0024e88:	e8 67 28 00 00       	call   c00276f4 <__udivdi3>
c0024e8d:	83 c4 10             	add    esp,0x10
c0024e90:	89 c6                	mov    esi,eax
c0024e92:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024e97:	83 e6 0f             	and    esi,0xf
c0024e9a:	eb 07                	jmp    c0024ea3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024e9c:	31 f6                	xor    esi,esi
c0024e9e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024ea3:	bf 01 00 00 00       	mov    edi,0x1
c0024ea8:	50                   	push   eax
c0024ea9:	6a 00                	push   0x0
c0024eab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024eb2:	50                   	push   eax
c0024eb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024eb7:	e8 6c f0 ff ff       	call   c0023f28 <IDE::enableIRQs(unsigned char, bool)>
c0024ebc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ebf:	e8 98 fe ff ff       	call   c0024d5c <ATA::readyForCommand()>
c0024ec4:	83 c4 10             	add    esp,0x10
c0024ec7:	84 c0                	test   al,al
c0024ec9:	0f 84 5a 02 00 00    	je     c0025129 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024ecf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024ed5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024edb:	c1 e0 04             	shl    eax,0x4
c0024ede:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024ee5:	09 c6                	or     esi,eax
c0024ee7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024eec:	75 05                	jne    c0024ef3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024eee:	83 ce a0             	or     esi,0xffffffa0
c0024ef1:	eb 03                	jmp    c0024ef6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024ef3:	83 ce e0             	or     esi,0xffffffe0
c0024ef6:	89 f0                	mov    eax,esi
c0024ef8:	0f b6 f0             	movzx  esi,al
c0024efb:	56                   	push   esi
c0024efc:	6a 06                	push   0x6
c0024efe:	51                   	push   ecx
c0024eff:	52                   	push   edx
c0024f00:	e8 17 ee ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f05:	83 c4 10             	add    esp,0x10
c0024f08:	6a 00                	push   0x0
c0024f0a:	6a 01                	push   0x1
c0024f0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f13:	50                   	push   eax
c0024f14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f1a:	e8 fd ed ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f1f:	83 c4 10             	add    esp,0x10
c0024f22:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024f27:	75 6e                	jne    c0024f97 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024f29:	6a 00                	push   0x0
c0024f2b:	6a 08                	push   0x8
c0024f2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f34:	50                   	push   eax
c0024f35:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f3b:	e8 dc ed ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f40:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024f45:	50                   	push   eax
c0024f46:	6a 09                	push   0x9
c0024f48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f4f:	50                   	push   eax
c0024f50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f56:	e8 c1 ed ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f5b:	83 c4 20             	add    esp,0x20
c0024f5e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024f63:	50                   	push   eax
c0024f64:	6a 0a                	push   0xa
c0024f66:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f6d:	50                   	push   eax
c0024f6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f74:	e8 a3 ed ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f79:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024f7e:	50                   	push   eax
c0024f7f:	6a 0b                	push   0xb
c0024f81:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f88:	50                   	push   eax
c0024f89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f8f:	e8 88 ed ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f94:	83 c4 20             	add    esp,0x20
c0024f97:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024f9c:	50                   	push   eax
c0024f9d:	6a 02                	push   0x2
c0024f9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024fa6:	50                   	push   eax
c0024fa7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fad:	e8 6a ed ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fb2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024fb7:	50                   	push   eax
c0024fb8:	6a 03                	push   0x3
c0024fba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024fc1:	50                   	push   eax
c0024fc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fc8:	e8 4f ed ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fcd:	83 c4 20             	add    esp,0x20
c0024fd0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024fd5:	50                   	push   eax
c0024fd6:	6a 04                	push   0x4
c0024fd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024fdf:	50                   	push   eax
c0024fe0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fe6:	e8 31 ed ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024feb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024ff0:	50                   	push   eax
c0024ff1:	6a 05                	push   0x5
c0024ff3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ffa:	50                   	push   eax
c0024ffb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025001:	e8 16 ed ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025006:	83 c4 20             	add    esp,0x20
c0025009:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002500e:	0f 94 c0             	sete   al
c0025011:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0025016:	74 09                	je     c0025021 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0025018:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002501f:	eb 07                	jmp    c0025028 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0025021:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0025028:	0f b6 c0             	movzx  eax,al
c002502b:	50                   	push   eax
c002502c:	6a 07                	push   0x7
c002502e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025035:	50                   	push   eax
c0025036:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002503c:	e8 db ec ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025041:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0025045:	83 c4 10             	add    esp,0x10
c0025048:	85 f6                	test   esi,esi
c002504a:	0f 84 ba 00 00 00    	je     c002510a <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0025050:	50                   	push   eax
c0025051:	6a 01                	push   0x1
c0025053:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002505a:	50                   	push   eax
c002505b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025061:	e8 62 f8 ff ff       	call   c00248c8 <IDE::polling(unsigned char, unsigned int)>
c0025066:	83 c4 10             	add    esp,0x10
c0025069:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002506f:	84 c0                	test   al,al
c0025071:	74 2c                	je     c002509f <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0025073:	0f b6 f8             	movzx  edi,al
c0025076:	0f b6 d2             	movzx  edx,dl
c0025079:	57                   	push   edi
c002507a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0025081:	50                   	push   eax
c0025082:	52                   	push   edx
c0025083:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025089:	e8 a4 f6 ff ff       	call   c0024732 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002508e:	c7 04 24 c4 dd 02 c0 	mov    DWORD PTR [esp],0xc002ddc4
c0025095:	e8 9d dd fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002509a:	e9 87 00 00 00       	jmp    c0025126 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002509f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00250a4:	74 33                	je     c00250d9 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00250a6:	31 ed                	xor    ebp,ebp
c00250a8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00250ac:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00250b0:	50                   	push   eax
c00250b1:	50                   	push   eax
c00250b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00250b9:	50                   	push   eax
c00250ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00250c0:	e8 45 ec ff ff       	call   c0023d0a <IDE::getBase(unsigned char)>
c00250c5:	89 c2                	mov    edx,eax
c00250c7:	89 f8                	mov    eax,edi
c00250c9:	66 ef                	out    dx,ax
c00250cb:	45                   	inc    ebp
c00250cc:	83 c4 10             	add    esp,0x10
c00250cf:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00250d5:	75 d1                	jne    c00250a8 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00250d7:	eb 23                	jmp    c00250fc <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00250d9:	0f b6 d2             	movzx  edx,dl
c00250dc:	51                   	push   ecx
c00250dd:	51                   	push   ecx
c00250de:	52                   	push   edx
c00250df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00250e5:	e8 20 ec ff ff       	call   c0023d0a <IDE::getBase(unsigned char)>
c00250ea:	b9 00 01 00 00       	mov    ecx,0x100
c00250ef:	89 c2                	mov    edx,eax
c00250f1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00250f5:	fc                   	cld    
c00250f6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00250f9:	83 c4 10             	add    esp,0x10
c00250fc:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0025104:	4e                   	dec    esi
c0025105:	e9 3e ff ff ff       	jmp    c0025048 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002510a:	31 ff                	xor    edi,edi
c002510c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0025111:	74 16                	je     c0025129 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0025113:	50                   	push   eax
c0025114:	50                   	push   eax
c0025115:	31 c0                	xor    eax,eax
c0025117:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002511c:	0f 94 c0             	sete   al
c002511f:	50                   	push   eax
c0025120:	53                   	push   ebx
c0025121:	e8 ec fb ff ff       	call   c0024d12 <ATA::flush(bool)>
c0025126:	83 c4 10             	add    esp,0x10
c0025129:	83 c4 2c             	add    esp,0x2c
c002512c:	89 f8                	mov    eax,edi
c002512e:	5b                   	pop    ebx
c002512f:	5e                   	pop    esi
c0025130:	5f                   	pop    edi
c0025131:	5d                   	pop    ebp
c0025132:	c3                   	ret    
c0025133:	90                   	nop

c0025134 <ATA::read(unsigned long long, int, void*)>:
c0025134:	57                   	push   edi
c0025135:	b8 04 00 00 00       	mov    eax,0x4
c002513a:	56                   	push   esi
c002513b:	53                   	push   ebx
c002513c:	83 ec 10             	sub    esp,0x10
c002513f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025143:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025147:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002514a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002514e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025152:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025158:	77 3b                	ja     c0025195 <ATA::read(unsigned long long, int, void*)+0x61>
c002515a:	b8 06 00 00 00       	mov    eax,0x6
c002515f:	85 d2                	test   edx,edx
c0025161:	74 32                	je     c0025195 <ATA::read(unsigned long long, int, void*)+0x61>
c0025163:	50                   	push   eax
c0025164:	50                   	push   eax
c0025165:	6a 00                	push   0x0
c0025167:	52                   	push   edx
c0025168:	53                   	push   ebx
c0025169:	57                   	push   edi
c002516a:	56                   	push   esi
c002516b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002516f:	e8 38 fc ff ff       	call   c0024dac <ATA::access(unsigned long long, int, void*, bool)>
c0025174:	83 c4 20             	add    esp,0x20
c0025177:	85 c0                	test   eax,eax
c0025179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002517d:	75 11                	jne    c0025190 <ATA::read(unsigned long long, int, void*)+0x5c>
c002517f:	01 1d 78 37 03 c0    	add    DWORD PTR ds:0xc0033778,ebx
c0025185:	e8 b2 b7 fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c002518a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002518e:	eb 05                	jmp    c0025195 <ATA::read(unsigned long long, int, void*)+0x61>
c0025190:	b8 01 00 00 00       	mov    eax,0x1
c0025195:	83 c4 10             	add    esp,0x10
c0025198:	5b                   	pop    ebx
c0025199:	5e                   	pop    esi
c002519a:	5f                   	pop    edi
c002519b:	c3                   	ret    

c002519c <ATA::write(unsigned long long, int, void*)>:
c002519c:	57                   	push   edi
c002519d:	b8 04 00 00 00       	mov    eax,0x4
c00251a2:	56                   	push   esi
c00251a3:	53                   	push   ebx
c00251a4:	83 ec 10             	sub    esp,0x10
c00251a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00251ab:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00251af:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00251b2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00251b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00251ba:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00251c0:	77 3b                	ja     c00251fd <ATA::write(unsigned long long, int, void*)+0x61>
c00251c2:	b8 06 00 00 00       	mov    eax,0x6
c00251c7:	85 d2                	test   edx,edx
c00251c9:	74 32                	je     c00251fd <ATA::write(unsigned long long, int, void*)+0x61>
c00251cb:	50                   	push   eax
c00251cc:	50                   	push   eax
c00251cd:	6a 01                	push   0x1
c00251cf:	52                   	push   edx
c00251d0:	53                   	push   ebx
c00251d1:	57                   	push   edi
c00251d2:	56                   	push   esi
c00251d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251d7:	e8 d0 fb ff ff       	call   c0024dac <ATA::access(unsigned long long, int, void*, bool)>
c00251dc:	83 c4 20             	add    esp,0x20
c00251df:	85 c0                	test   eax,eax
c00251e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00251e5:	75 11                	jne    c00251f8 <ATA::write(unsigned long long, int, void*)+0x5c>
c00251e7:	01 1d 74 37 03 c0    	add    DWORD PTR ds:0xc0033774,ebx
c00251ed:	e8 4a b7 fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c00251f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00251f6:	eb 05                	jmp    c00251fd <ATA::write(unsigned long long, int, void*)+0x61>
c00251f8:	b8 01 00 00 00       	mov    eax,0x1
c00251fd:	83 c4 10             	add    esp,0x10
c0025200:	5b                   	pop    ebx
c0025201:	5e                   	pop    esi
c0025202:	5f                   	pop    edi
c0025203:	c3                   	ret    

c0025204 <ATA::detectCHS()>:
c0025204:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025208:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002520e:	c1 e0 06             	shl    eax,0x6
c0025211:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0025217:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0025221:	c7 44 24 04 cf dd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ddcf
c0025229:	e9 77 57 ff ff       	jmp    c001a9a5 <Krnl::panic(char const*)>

c002522e <ATA::open(int, int, void*)>:
c002522e:	53                   	push   ebx
c002522f:	83 ec 08             	sub    esp,0x8
c0025232:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025236:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002523a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002523e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025244:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002524a:	c1 e0 06             	shl    eax,0x6
c002524d:	01 d0                	add    eax,edx
c002524f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0025256:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002525c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0025263:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002526d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0025273:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002527a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0025281:	75 0c                	jne    c002528f <ATA::open(int, int, void*)+0x61>
c0025283:	83 ec 0c             	sub    esp,0xc
c0025286:	53                   	push   ebx
c0025287:	e8 78 ff ff ff       	call   c0025204 <ATA::detectCHS()>
c002528c:	83 c4 10             	add    esp,0x10
c002528f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025295:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002529b:	c1 e0 06             	shl    eax,0x6
c002529e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00252a5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00252af:	d1 e8                	shr    eax,1
c00252b1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00252b7:	6a 04                	push   0x4
c00252b9:	6a 0c                	push   0xc
c00252bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00252c2:	50                   	push   eax
c00252c3:	52                   	push   edx
c00252c4:	e8 53 ea ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252c9:	90                   	nop
c00252ca:	90                   	nop
c00252cb:	6a 00                	push   0x0
c00252cd:	6a 0c                	push   0xc
c00252cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00252d6:	50                   	push   eax
c00252d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00252dd:	e8 3a ea ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252e2:	83 c4 14             	add    esp,0x14
c00252e5:	53                   	push   ebx
c00252e6:	e8 33 f4 fe ff       	call   c001471e <PhysicalDisk::startCache()>
c00252eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00252ee:	e8 0b 17 ff ff       	call   c00169fe <createPartitionsForDisk(PhysicalDisk*)>
c00252f3:	31 c0                	xor    eax,eax
c00252f5:	83 c4 18             	add    esp,0x18
c00252f8:	5b                   	pop    ebx
c00252f9:	c3                   	ret    

c00252fa <ATAPI::write(unsigned long long, int, void*)>:
c00252fa:	b8 03 00 00 00       	mov    eax,0x3
c00252ff:	c3                   	ret    

c0025300 <ATAPI::close(int, int, void*)>:
c0025300:	83 ec 0c             	sub    esp,0xc
c0025303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025307:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002530d:	85 c0                	test   eax,eax
c002530f:	74 0c                	je     c002531d <ATAPI::close(int, int, void*)+0x1d>
c0025311:	83 ec 0c             	sub    esp,0xc
c0025314:	8b 10                	mov    edx,DWORD PTR [eax]
c0025316:	50                   	push   eax
c0025317:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002531a:	83 c4 10             	add    esp,0x10
c002531d:	31 c0                	xor    eax,eax
c002531f:	83 c4 0c             	add    esp,0xc
c0025322:	c3                   	ret    
c0025323:	90                   	nop

c0025324 <ATAPI::ATAPI()>:
c0025324:	83 ec 0c             	sub    esp,0xc
c0025327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532b:	83 ec 04             	sub    esp,0x4
c002532e:	68 00 08 00 00       	push   0x800
c0025333:	68 09 df 02 c0       	push   0xc002df09
c0025338:	50                   	push   eax
c0025339:	e8 78 f3 fe ff       	call   c00146b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002533e:	83 c4 10             	add    esp,0x10
c0025341:	ba 24 de 02 c0       	mov    edx,0xc002de24
c0025346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002534a:	89 10                	mov    DWORD PTR [eax],edx
c002534c:	90                   	nop
c002534d:	83 c4 0c             	add    esp,0xc
c0025350:	c3                   	ret    
c0025351:	90                   	nop

c0025352 <ATAPI::readyForCommand()>:
c0025352:	56                   	push   esi
c0025353:	53                   	push   ebx
c0025354:	31 db                	xor    ebx,ebx
c0025356:	50                   	push   eax
c0025357:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002535b:	50                   	push   eax
c002535c:	6a 0c                	push   0xc
c002535e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0025365:	50                   	push   eax
c0025366:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002536c:	e8 6b ea ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0025371:	83 c4 10             	add    esp,0x10
c0025374:	a8 88                	test   al,0x88
c0025376:	74 23                	je     c002539b <ATAPI::readyForCommand()+0x49>
c0025378:	43                   	inc    ebx
c0025379:	83 fb 63             	cmp    ebx,0x63
c002537c:	7e dd                	jle    c002535b <ATAPI::readyForCommand()+0x9>
c002537e:	51                   	push   ecx
c002537f:	51                   	push   ecx
c0025380:	6a 00                	push   0x0
c0025382:	68 40 42 0f 00       	push   0xf4240
c0025387:	e8 cf 96 ff ff       	call   c001ea5b <nanoSleep(unsigned long long)>
c002538c:	83 c4 10             	add    esp,0x10
c002538f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0025395:	75 c4                	jne    c002535b <ATAPI::readyForCommand()+0x9>
c0025397:	31 c0                	xor    eax,eax
c0025399:	eb 02                	jmp    c002539d <ATAPI::readyForCommand()+0x4b>
c002539b:	b0 01                	mov    al,0x1
c002539d:	5a                   	pop    edx
c002539e:	5b                   	pop    ebx
c002539f:	5e                   	pop    esi
c00253a0:	c3                   	ret    
c00253a1:	90                   	nop

c00253a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00253a2:	55                   	push   ebp
c00253a3:	57                   	push   edi
c00253a4:	56                   	push   esi
c00253a5:	53                   	push   ebx
c00253a6:	83 ec 20             	sub    esp,0x20
c00253a9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00253ad:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00253b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00253b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00253b9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00253bd:	6a 01                	push   0x1
c00253bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253c6:	50                   	push   eax
c00253c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253cd:	e8 56 eb ff ff       	call   c0023f28 <IDE::enableIRQs(unsigned char, bool)>
c00253d2:	5e                   	pop    esi
c00253d3:	58                   	pop    eax
c00253d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253db:	50                   	push   eax
c00253dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253e2:	e8 0f e9 ff ff       	call   c0023cf6 <IDE::prepareInterrupt(unsigned char)>
c00253e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00253ea:	e8 63 ff ff ff       	call   c0025352 <ATAPI::readyForCommand()>
c00253ef:	83 c4 10             	add    esp,0x10
c00253f2:	84 c0                	test   al,al
c00253f4:	75 0a                	jne    c0025400 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00253f6:	bb 01 00 00 00       	mov    ebx,0x1
c00253fb:	e9 57 02 00 00       	jmp    c0025657 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025400:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0025406:	c1 e0 04             	shl    eax,0x4
c0025409:	0f b6 c0             	movzx  eax,al
c002540c:	50                   	push   eax
c002540d:	6a 06                	push   0x6
c002540f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025416:	50                   	push   eax
c0025417:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002541d:	e8 fa e8 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025422:	6a 00                	push   0x0
c0025424:	6a 01                	push   0x1
c0025426:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002542d:	50                   	push   eax
c002542e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025434:	e8 e3 e8 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025439:	83 c4 20             	add    esp,0x20
c002543c:	0f b6 c3             	movzx  eax,bl
c002543f:	0f b6 df             	movzx  ebx,bh
c0025442:	50                   	push   eax
c0025443:	6a 04                	push   0x4
c0025445:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002544c:	50                   	push   eax
c002544d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025453:	e8 c4 e8 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025458:	53                   	push   ebx
c0025459:	6a 05                	push   0x5
c002545b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025462:	50                   	push   eax
c0025463:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025469:	e8 ae e8 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002546e:	83 c4 20             	add    esp,0x20
c0025471:	68 a0 00 00 00       	push   0xa0
c0025476:	6a 07                	push   0x7
c0025478:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002547f:	50                   	push   eax
c0025480:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025486:	e8 91 e8 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002548b:	83 c4 0c             	add    esp,0xc
c002548e:	6a 01                	push   0x1
c0025490:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025497:	50                   	push   eax
c0025498:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002549e:	e8 25 f4 ff ff       	call   c00248c8 <IDE::polling(unsigned char, unsigned int)>
c00254a3:	83 c4 10             	add    esp,0x10
c00254a6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00254ac:	84 c0                	test   al,al
c00254ae:	74 23                	je     c00254d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00254b0:	0f b6 d8             	movzx  ebx,al
c00254b3:	0f b6 d2             	movzx  edx,dl
c00254b6:	53                   	push   ebx
c00254b7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00254be:	50                   	push   eax
c00254bf:	52                   	push   edx
c00254c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00254c6:	e8 67 f2 ff ff       	call   c0024732 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00254cb:	83 c4 10             	add    esp,0x10
c00254ce:	e9 84 01 00 00       	jmp    c0025657 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00254d3:	0f b6 d2             	movzx  edx,dl
c00254d6:	53                   	push   ebx
c00254d7:	53                   	push   ebx
c00254d8:	52                   	push   edx
c00254d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00254df:	e8 26 e8 ff ff       	call   c0023d0a <IDE::getBase(unsigned char)>
c00254e4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00254e8:	b9 06 00 00 00       	mov    ecx,0x6
c00254ed:	89 c2                	mov    edx,eax
c00254ef:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00254f2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00254f6:	83 c4 10             	add    esp,0x10
c00254f9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00254ff:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025506:	85 db                	test   ebx,ebx
c0025508:	0f 84 ec 00 00 00    	je     c00255fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002550e:	51                   	push   ecx
c002550f:	51                   	push   ecx
c0025510:	52                   	push   edx
c0025511:	50                   	push   eax
c0025512:	e8 73 e9 ff ff       	call   c0023e8a <IDE::waitInterrupt(unsigned char)>
c0025517:	83 c4 10             	add    esp,0x10
c002551a:	84 c0                	test   al,al
c002551c:	0f 84 d4 fe ff ff    	je     c00253f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025522:	56                   	push   esi
c0025523:	56                   	push   esi
c0025524:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002552b:	50                   	push   eax
c002552c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025532:	e8 bf e7 ff ff       	call   c0023cf6 <IDE::prepareInterrupt(unsigned char)>
c0025537:	83 c4 0c             	add    esp,0xc
c002553a:	6a 04                	push   0x4
c002553c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025543:	50                   	push   eax
c0025544:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002554a:	e8 8d e8 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c002554f:	83 c4 0c             	add    esp,0xc
c0025552:	89 c6                	mov    esi,eax
c0025554:	6a 05                	push   0x5
c0025556:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002555d:	50                   	push   eax
c002555e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025564:	e8 73 e8 ff ff       	call   c0023ddc <IDE::read(unsigned char, unsigned char)>
c0025569:	89 f1                	mov    ecx,esi
c002556b:	0f b6 c0             	movzx  eax,al
c002556e:	0f b6 f1             	movzx  esi,cl
c0025571:	c1 e0 08             	shl    eax,0x8
c0025574:	09 c6                	or     esi,eax
c0025576:	d1 fe                	sar    esi,1
c0025578:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002557c:	83 c4 10             	add    esp,0x10
c002557f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025584:	74 41                	je     c00255c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0025586:	31 c9                	xor    ecx,ecx
c0025588:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002558e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025595:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025599:	75 0a                	jne    c00255a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002559b:	01 c9                	add    ecx,ecx
c002559d:	01 cd                	add    ebp,ecx
c002559f:	4b                   	dec    ebx
c00255a0:	e9 54 ff ff ff       	jmp    c00254f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00255a5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00255aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00255ae:	51                   	push   ecx
c00255af:	51                   	push   ecx
c00255b0:	52                   	push   edx
c00255b1:	50                   	push   eax
c00255b2:	e8 53 e7 ff ff       	call   c0023d0a <IDE::getBase(unsigned char)>
c00255b7:	89 c2                	mov    edx,eax
c00255b9:	89 f0                	mov    eax,esi
c00255bb:	66 ef                	out    dx,ax
c00255bd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00255c1:	83 c4 10             	add    esp,0x10
c00255c4:	41                   	inc    ecx
c00255c5:	eb c1                	jmp    c0025588 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00255c7:	31 f6                	xor    esi,esi
c00255c9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00255cf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00255d6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00255da:	75 06                	jne    c00255e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00255dc:	01 f6                	add    esi,esi
c00255de:	01 f5                	add    ebp,esi
c00255e0:	eb bd                	jmp    c002559f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00255e2:	51                   	push   ecx
c00255e3:	51                   	push   ecx
c00255e4:	52                   	push   edx
c00255e5:	50                   	push   eax
c00255e6:	e8 1f e7 ff ff       	call   c0023d0a <IDE::getBase(unsigned char)>
c00255eb:	89 c2                	mov    edx,eax
c00255ed:	66 ed                	in     ax,dx
c00255ef:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00255f4:	83 c4 10             	add    esp,0x10
c00255f7:	46                   	inc    esi
c00255f8:	eb cf                	jmp    c00255c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00255fa:	51                   	push   ecx
c00255fb:	51                   	push   ecx
c00255fc:	52                   	push   edx
c00255fd:	50                   	push   eax
c00255fe:	e8 87 e8 ff ff       	call   c0023e8a <IDE::waitInterrupt(unsigned char)>
c0025603:	83 c4 10             	add    esp,0x10
c0025606:	84 c0                	test   al,al
c0025608:	0f 84 e8 fd ff ff    	je     c00253f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002560e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025613:	52                   	push   edx
c0025614:	52                   	push   edx
c0025615:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002561c:	50                   	push   eax
c002561d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025623:	e8 ce e6 ff ff       	call   c0023cf6 <IDE::prepareInterrupt(unsigned char)>
c0025628:	83 c4 10             	add    esp,0x10
c002562b:	50                   	push   eax
c002562c:	50                   	push   eax
c002562d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025634:	50                   	push   eax
c0025635:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002563b:	e8 ca e6 ff ff       	call   c0023d0a <IDE::getBase(unsigned char)>
c0025640:	8d 50 07             	lea    edx,[eax+0x7]
c0025643:	ec                   	in     al,dx
c0025644:	83 c4 10             	add    esp,0x10
c0025647:	a8 88                	test   al,0x88
c0025649:	74 0a                	je     c0025655 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002564b:	4b                   	dec    ebx
c002564c:	75 dd                	jne    c002562b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002564e:	bb 02 00 00 00       	mov    ebx,0x2
c0025653:	eb 02                	jmp    c0025657 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025655:	31 db                	xor    ebx,ebx
c0025657:	83 c4 1c             	add    esp,0x1c
c002565a:	89 d8                	mov    eax,ebx
c002565c:	5b                   	pop    ebx
c002565d:	5e                   	pop    esi
c002565e:	5f                   	pop    edi
c002565f:	5d                   	pop    ebp
c0025660:	c3                   	ret    
c0025661:	90                   	nop

c0025662 <ATAPI::diskRemoved()>:
c0025662:	83 ec 18             	sub    esp,0x18
c0025665:	68 15 df 02 c0       	push   0xc002df15
c002566a:	e8 c8 d7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002566f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025673:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002567a:	83 c4 1c             	add    esp,0x1c
c002567d:	c3                   	ret    

c002567e <ATAPI::eject()>:
c002567e:	57                   	push   edi
c002567f:	b9 03 00 00 00       	mov    ecx,0x3
c0025684:	53                   	push   ebx
c0025685:	83 ec 14             	sub    esp,0x14
c0025688:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002568c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025690:	fc                   	cld    
c0025691:	31 c0                	xor    eax,eax
c0025693:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025695:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002569a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002569f:	50                   	push   eax
c00256a0:	50                   	push   eax
c00256a1:	6a 00                	push   0x0
c00256a3:	6a 00                	push   0x0
c00256a5:	6a 00                	push   0x0
c00256a7:	6a 02                	push   0x2
c00256a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00256ad:	50                   	push   eax
c00256ae:	53                   	push   ebx
c00256af:	e8 ee fc ff ff       	call   c00253a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00256b4:	83 c4 14             	add    esp,0x14
c00256b7:	53                   	push   ebx
c00256b8:	e8 a5 ff ff ff       	call   c0025662 <ATAPI::diskRemoved()>
c00256bd:	83 c4 24             	add    esp,0x24
c00256c0:	31 c0                	xor    eax,eax
c00256c2:	5b                   	pop    ebx
c00256c3:	5f                   	pop    edi
c00256c4:	c3                   	ret    
c00256c5:	90                   	nop

c00256c6 <ATAPI::diskInserted()>:
c00256c6:	53                   	push   ebx
c00256c7:	83 ec 14             	sub    esp,0x14
c00256ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00256ce:	68 2c df 02 c0       	push   0xc002df2c
c00256d3:	e8 5f d7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00256d8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00256df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00256e2:	e8 37 f0 fe ff       	call   c001471e <PhysicalDisk::startCache()>
c00256e7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00256eb:	83 c4 18             	add    esp,0x18
c00256ee:	5b                   	pop    ebx
c00256ef:	e9 0a 13 ff ff       	jmp    c00169fe <createPartitionsForDisk(PhysicalDisk*)>

c00256f4 <ATAPI::detectMedia()>:
c00256f4:	56                   	push   esi
c00256f5:	53                   	push   ebx
c00256f6:	83 ec 28             	sub    esp,0x28
c00256f9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00256fd:	6a 0c                	push   0xc
c00256ff:	6a 00                	push   0x0
c0025701:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025705:	56                   	push   esi
c0025706:	e8 45 b0 fd ff       	call   c0000750 <memset>
c002570b:	58                   	pop    eax
c002570c:	5a                   	pop    edx
c002570d:	6a 00                	push   0x0
c002570f:	6a 00                	push   0x0
c0025711:	6a 00                	push   0x0
c0025713:	6a 00                	push   0x0
c0025715:	56                   	push   esi
c0025716:	53                   	push   ebx
c0025717:	e8 86 fc ff ff       	call   c00253a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002571c:	83 c4 1c             	add    esp,0x1c
c002571f:	6a 0c                	push   0xc
c0025721:	6a 00                	push   0x0
c0025723:	56                   	push   esi
c0025724:	e8 27 b0 fd ff       	call   c0000750 <memset>
c0025729:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002572e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025733:	59                   	pop    ecx
c0025734:	58                   	pop    eax
c0025735:	6a 01                	push   0x1
c0025737:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002573b:	50                   	push   eax
c002573c:	6a 00                	push   0x0
c002573e:	6a 12                	push   0x12
c0025740:	56                   	push   esi
c0025741:	53                   	push   ebx
c0025742:	e8 5b fc ff ff       	call   c00253a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025747:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002574b:	83 c4 20             	add    esp,0x20
c002574e:	83 e0 7f             	and    eax,0x7f
c0025751:	3c 70                	cmp    al,0x70
c0025753:	74 15                	je     c002576a <ATAPI::detectMedia()+0x76>
c0025755:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002575c:	75 0c                	jne    c002576a <ATAPI::detectMedia()+0x76>
c002575e:	83 ec 0c             	sub    esp,0xc
c0025761:	53                   	push   ebx
c0025762:	e8 5f ff ff ff       	call   c00256c6 <ATAPI::diskInserted()>
c0025767:	83 c4 10             	add    esp,0x10
c002576a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002576e:	83 e0 0f             	and    eax,0xf
c0025771:	3c 02                	cmp    al,0x2
c0025773:	75 1b                	jne    c0025790 <ATAPI::detectMedia()+0x9c>
c0025775:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002577a:	75 2d                	jne    c00257a9 <ATAPI::detectMedia()+0xb5>
c002577c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025783:	74 24                	je     c00257a9 <ATAPI::detectMedia()+0xb5>
c0025785:	83 ec 0c             	sub    esp,0xc
c0025788:	53                   	push   ebx
c0025789:	e8 d4 fe ff ff       	call   c0025662 <ATAPI::diskRemoved()>
c002578e:	eb 16                	jmp    c00257a6 <ATAPI::detectMedia()+0xb2>
c0025790:	84 c0                	test   al,al
c0025792:	75 15                	jne    c00257a9 <ATAPI::detectMedia()+0xb5>
c0025794:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002579b:	75 0c                	jne    c00257a9 <ATAPI::detectMedia()+0xb5>
c002579d:	83 ec 0c             	sub    esp,0xc
c00257a0:	53                   	push   ebx
c00257a1:	e8 20 ff ff ff       	call   c00256c6 <ATAPI::diskInserted()>
c00257a6:	83 c4 10             	add    esp,0x10
c00257a9:	83 c4 24             	add    esp,0x24
c00257ac:	5b                   	pop    ebx
c00257ad:	5e                   	pop    esi
c00257ae:	c3                   	ret    
c00257af:	90                   	nop

c00257b0 <ATAPI::open(int, int, void*)>:
c00257b0:	53                   	push   ebx
c00257b1:	83 ec 08             	sub    esp,0x8
c00257b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00257b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00257bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00257c0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00257c6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00257cc:	c1 e0 06             	shl    eax,0x6
c00257cf:	01 d0                	add    eax,edx
c00257d1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00257d8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00257de:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00257e5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00257ef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00257f5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00257fc:	6a 04                	push   0x4
c00257fe:	6a 0c                	push   0xc
c0025800:	51                   	push   ecx
c0025801:	52                   	push   edx
c0025802:	e8 15 e5 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025807:	90                   	nop
c0025808:	90                   	nop
c0025809:	6a 00                	push   0x0
c002580b:	6a 0c                	push   0xc
c002580d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025814:	50                   	push   eax
c0025815:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002581b:	e8 fc e4 ff ff       	call   c0023d1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025820:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025827:	83 c4 14             	add    esp,0x14
c002582a:	53                   	push   ebx
c002582b:	e8 c4 fe ff ff       	call   c00256f4 <ATAPI::detectMedia()>
c0025830:	31 c0                	xor    eax,eax
c0025832:	83 c4 18             	add    esp,0x18
c0025835:	5b                   	pop    ebx
c0025836:	c3                   	ret    
c0025837:	90                   	nop

c0025838 <ATAPI::read(unsigned long long, int, void*)>:
c0025838:	55                   	push   ebp
c0025839:	57                   	push   edi
c002583a:	56                   	push   esi
c002583b:	53                   	push   ebx
c002583c:	83 ec 1c             	sub    esp,0x1c
c002583f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025843:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025847:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002584b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025852:	74 41                	je     c0025895 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025854:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025858:	b9 03 00 00 00       	mov    ecx,0x3
c002585d:	fc                   	cld    
c002585e:	31 c0                	xor    eax,eax
c0025860:	86 fb                	xchg   bl,bh
c0025862:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025864:	c1 c3 10             	rol    ebx,0x10
c0025867:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002586c:	89 e8                	mov    eax,ebp
c002586e:	86 fb                	xchg   bl,bh
c0025870:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025874:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025878:	50                   	push   eax
c0025879:	50                   	push   eax
c002587a:	55                   	push   ebp
c002587b:	c1 e5 0b             	shl    ebp,0xb
c002587e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025882:	6a 00                	push   0x0
c0025884:	55                   	push   ebp
c0025885:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025889:	50                   	push   eax
c002588a:	56                   	push   esi
c002588b:	e8 12 fb ff ff       	call   c00253a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025890:	83 c4 20             	add    esp,0x20
c0025893:	eb 1a                	jmp    c00258af <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025895:	83 ec 0c             	sub    esp,0xc
c0025898:	56                   	push   esi
c0025899:	e8 56 fe ff ff       	call   c00256f4 <ATAPI::detectMedia()>
c002589e:	83 c4 10             	add    esp,0x10
c00258a1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00258a8:	75 aa                	jne    c0025854 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00258aa:	b8 02 00 00 00       	mov    eax,0x2
c00258af:	83 c4 1c             	add    esp,0x1c
c00258b2:	5b                   	pop    ebx
c00258b3:	5e                   	pop    esi
c00258b4:	5f                   	pop    edi
c00258b5:	5d                   	pop    ebp
c00258b6:	c3                   	ret    
c00258b7:	90                   	nop

c00258b8 <SATA::close(int, int, void*)>:
c00258b8:	83 ec 0c             	sub    esp,0xc
c00258bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00258c5:	85 c0                	test   eax,eax
c00258c7:	74 0c                	je     c00258d5 <SATA::close(int, int, void*)+0x1d>
c00258c9:	83 ec 0c             	sub    esp,0xc
c00258cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00258ce:	50                   	push   eax
c00258cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00258d2:	83 c4 10             	add    esp,0x10
c00258d5:	31 c0                	xor    eax,eax
c00258d7:	83 c4 0c             	add    esp,0xc
c00258da:	c3                   	ret    
c00258db:	90                   	nop

c00258dc <SATA::powerSaving(PowerSavingLevel)>:
c00258dc:	c3                   	ret    
c00258dd:	90                   	nop

c00258de <SATA::open(int, int, void*)>:
c00258de:	56                   	push   esi
c00258df:	53                   	push   ebx
c00258e0:	50                   	push   eax
c00258e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00258e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00258e9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00258f3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00258f9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025903:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025907:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025911:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025917:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002591e:	e8 d5 a5 fe ff       	call   c000fef8 <Phys::allocatePage()>
c0025923:	89 c6                	mov    esi,eax
c0025925:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002592b:	81 c6 00 10 00 00    	add    esi,0x1000
c0025931:	e8 c2 a5 fe ff       	call   c000fef8 <Phys::allocatePage()>
c0025936:	39 c6                	cmp    esi,eax
c0025938:	74 10                	je     c002594a <SATA::open(int, int, void*)+0x6c>
c002593a:	83 ec 0c             	sub    esp,0xc
c002593d:	68 54 de 02 c0       	push   0xc002de54
c0025942:	e8 5e 50 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0025947:	83 c4 10             	add    esp,0x10
c002594a:	83 ec 0c             	sub    esp,0xc
c002594d:	6a 02                	push   0x2
c002594f:	e8 dd c0 fe ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0025954:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002595a:	6a 03                	push   0x3
c002595c:	50                   	push   eax
c002595d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025963:	ff 35 90 f5 02 c0    	push   DWORD PTR ds:0xc002f590
c0025969:	e8 fa c8 fe ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c002596e:	83 c4 14             	add    esp,0x14
c0025971:	53                   	push   ebx
c0025972:	e8 a7 ed fe ff       	call   c001471e <PhysicalDisk::startCache()>
c0025977:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002597a:	e8 7f 10 ff ff       	call   c00169fe <createPartitionsForDisk(PhysicalDisk*)>
c002597f:	83 c4 14             	add    esp,0x14
c0025982:	31 c0                	xor    eax,eax
c0025984:	5b                   	pop    ebx
c0025985:	5e                   	pop    esi
c0025986:	c3                   	ret    
c0025987:	90                   	nop

c0025988 <SATA::SATA()>:
c0025988:	83 ec 0c             	sub    esp,0xc
c002598b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002598f:	83 ec 04             	sub    esp,0x4
c0025992:	68 00 02 00 00       	push   0x200
c0025997:	68 68 de 02 c0       	push   0xc002de68
c002599c:	50                   	push   eax
c002599d:	e8 14 ed fe ff       	call   c00146b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00259a2:	83 c4 10             	add    esp,0x10
c00259a5:	ba d8 de 02 c0       	mov    edx,0xc002ded8
c00259aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ae:	89 10                	mov    DWORD PTR [eax],edx
c00259b0:	90                   	nop
c00259b1:	83 c4 0c             	add    esp,0xc
c00259b4:	c3                   	ret    
c00259b5:	90                   	nop

c00259b6 <SATA::access(unsigned long long, int, void*, bool)>:
c00259b6:	55                   	push   ebp
c00259b7:	57                   	push   edi
c00259b8:	56                   	push   esi
c00259b9:	53                   	push   ebx
c00259ba:	83 ec 2c             	sub    esp,0x2c
c00259bd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00259c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00259c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00259c9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00259cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00259d1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00259d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00259da:	7e 10                	jle    c00259ec <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00259dc:	83 ec 0c             	sub    esp,0xc
c00259df:	68 78 de 02 c0       	push   0xc002de78
c00259e4:	e8 bc 4f ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c00259e9:	83 c4 10             	add    esp,0x10
c00259ec:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00259f2:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00259f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a02:	89 d0                	mov    eax,edx
c0025a04:	c1 e0 07             	shl    eax,0x7
c0025a07:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a0b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025a15:	51                   	push   ecx
c0025a16:	8d 42 02             	lea    eax,[edx+0x2]
c0025a19:	51                   	push   ecx
c0025a1a:	c1 e0 07             	shl    eax,0x7
c0025a1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025a21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025a25:	50                   	push   eax
c0025a26:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025a2c:	e8 af ef ff ff       	call   c00249e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025a31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025a35:	83 c4 10             	add    esp,0x10
c0025a38:	b8 01 00 00 00       	mov    eax,0x1
c0025a3d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025a42:	0f 84 cb 01 00 00    	je     c0025c13 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025a48:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025a4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025a50:	c1 e0 09             	shl    eax,0x9
c0025a53:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025a58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025a5c:	74 0e                	je     c0025a6c <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025a5e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025a64:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025a68:	89 c1                	mov    ecx,eax
c0025a6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025a6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025a70:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025a76:	8d 42 02             	lea    eax,[edx+0x2]
c0025a79:	c1 e0 07             	shl    eax,0x7
c0025a7c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a82:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025a88:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025a8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a92:	c1 e1 05             	shl    ecx,0x5
c0025a95:	01 c8                	add    eax,ecx
c0025a97:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025a9b:	83 e1 01             	and    ecx,0x1
c0025a9e:	89 ce                	mov    esi,ecx
c0025aa0:	8a 08                	mov    cl,BYTE PTR [eax]
c0025aa2:	c1 e6 06             	shl    esi,0x6
c0025aa5:	83 e1 bf             	and    ecx,0xffffffbf
c0025aa8:	09 f1                	or     ecx,esi
c0025aaa:	88 08                	mov    BYTE PTR [eax],cl
c0025aac:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025aae:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025ab4:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025aba:	89 08                	mov    DWORD PTR [eax],ecx
c0025abc:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025ac2:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025ac8:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025ace:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025ad1:	50                   	push   eax
c0025ad2:	68 90 00 00 00       	push   0x90
c0025ad7:	6a 00                	push   0x0
c0025ad9:	56                   	push   esi
c0025ada:	e8 71 ac fd ff       	call   c0000750 <memset>
c0025adf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025ae5:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025ae9:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025aef:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025af3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025af7:	83 c4 10             	add    esp,0x10
c0025afa:	48                   	dec    eax
c0025afb:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025b00:	89 c1                	mov    ecx,eax
c0025b02:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025b08:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025b0d:	09 c8                	or     eax,ecx
c0025b0f:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025b15:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025b18:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025b1f:	66 25 00 7f          	and    ax,0x7f00
c0025b23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025b27:	66 0d 27 80          	or     ax,0x8027
c0025b2b:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025b30:	66 89 06             	mov    WORD PTR [esi],ax
c0025b33:	19 c0                	sbb    eax,eax
c0025b35:	83 e0 f0             	and    eax,0xfffffff0
c0025b38:	83 c0 35             	add    eax,0x35
c0025b3b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025b3e:	89 e8                	mov    eax,ebp
c0025b40:	c1 e8 10             	shr    eax,0x10
c0025b43:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025b46:	89 e8                	mov    eax,ebp
c0025b48:	c1 e8 18             	shr    eax,0x18
c0025b4b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025b4e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025b52:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025b55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025b59:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025b5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025b60:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025b64:	89 d6                	mov    esi,edx
c0025b66:	31 c0                	xor    eax,eax
c0025b68:	c1 e6 07             	shl    esi,0x7
c0025b6b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025b6f:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025b75:	80 e1 88             	and    cl,0x88
c0025b78:	74 0a                	je     c0025b84 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025b7a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025b7f:	74 0a                	je     c0025b8b <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025b81:	40                   	inc    eax
c0025b82:	eb eb                	jmp    c0025b6f <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025b84:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025b89:	75 0a                	jne    c0025b95 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025b8b:	83 ec 0c             	sub    esp,0xc
c0025b8e:	68 b1 de 02 c0       	push   0xc002deb1
c0025b93:	eb 56                	jmp    c0025beb <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025b95:	b8 01 00 00 00       	mov    eax,0x1
c0025b9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025b9e:	c1 e2 07             	shl    edx,0x7
c0025ba1:	d3 e0                	shl    eax,cl
c0025ba3:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025ba7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025bad:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025bb3:	85 c8                	test   eax,ecx
c0025bb5:	74 20                	je     c0025bd7 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025bb7:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025bbd:	0f ba e1 1e          	bt     ecx,0x1e
c0025bc1:	73 ea                	jae    c0025bad <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025bc3:	83 ec 0c             	sub    esp,0xc
c0025bc6:	68 bf de 02 c0       	push   0xc002debf
c0025bcb:	e8 d5 4d ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0025bd0:	83 c4 10             	add    esp,0x10
c0025bd3:	31 c0                	xor    eax,eax
c0025bd5:	eb 3c                	jmp    c0025c13 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025bd7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025bdd:	0f ba e0 1e          	bt     eax,0x1e
c0025be1:	73 17                	jae    c0025bfa <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025be3:	83 ec 0c             	sub    esp,0xc
c0025be6:	68 bf de 02 c0       	push   0xc002debf
c0025beb:	e8 b5 4d ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0025bf0:	83 c4 10             	add    esp,0x10
c0025bf3:	b8 01 00 00 00       	mov    eax,0x1
c0025bf8:	eb 19                	jmp    c0025c13 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025bfa:	31 c0                	xor    eax,eax
c0025bfc:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025c01:	75 10                	jne    c0025c13 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025c03:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025c09:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025c0d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025c11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025c13:	83 c4 2c             	add    esp,0x2c
c0025c16:	5b                   	pop    ebx
c0025c17:	5e                   	pop    esi
c0025c18:	5f                   	pop    edi
c0025c19:	5d                   	pop    ebp
c0025c1a:	c3                   	ret    
c0025c1b:	90                   	nop

c0025c1c <SATA::read(unsigned long long, int, void*)>:
c0025c1c:	57                   	push   edi
c0025c1d:	b8 04 00 00 00       	mov    eax,0x4
c0025c22:	56                   	push   esi
c0025c23:	53                   	push   ebx
c0025c24:	83 ec 10             	sub    esp,0x10
c0025c27:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025c2b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025c2f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025c32:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025c36:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025c3a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025c40:	77 3b                	ja     c0025c7d <SATA::read(unsigned long long, int, void*)+0x61>
c0025c42:	b8 06 00 00 00       	mov    eax,0x6
c0025c47:	85 d2                	test   edx,edx
c0025c49:	74 32                	je     c0025c7d <SATA::read(unsigned long long, int, void*)+0x61>
c0025c4b:	50                   	push   eax
c0025c4c:	50                   	push   eax
c0025c4d:	6a 00                	push   0x0
c0025c4f:	52                   	push   edx
c0025c50:	53                   	push   ebx
c0025c51:	57                   	push   edi
c0025c52:	56                   	push   esi
c0025c53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025c57:	e8 5a fd ff ff       	call   c00259b6 <SATA::access(unsigned long long, int, void*, bool)>
c0025c5c:	83 c4 20             	add    esp,0x20
c0025c5f:	85 c0                	test   eax,eax
c0025c61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025c65:	75 11                	jne    c0025c78 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025c67:	01 1d 78 37 03 c0    	add    DWORD PTR ds:0xc0033778,ebx
c0025c6d:	e8 ca ac fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c0025c72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c76:	eb 05                	jmp    c0025c7d <SATA::read(unsigned long long, int, void*)+0x61>
c0025c78:	b8 01 00 00 00       	mov    eax,0x1
c0025c7d:	83 c4 10             	add    esp,0x10
c0025c80:	5b                   	pop    ebx
c0025c81:	5e                   	pop    esi
c0025c82:	5f                   	pop    edi
c0025c83:	c3                   	ret    

c0025c84 <SATA::write(unsigned long long, int, void*)>:
c0025c84:	55                   	push   ebp
c0025c85:	b8 04 00 00 00       	mov    eax,0x4
c0025c8a:	57                   	push   edi
c0025c8b:	56                   	push   esi
c0025c8c:	53                   	push   ebx
c0025c8d:	83 ec 1c             	sub    esp,0x1c
c0025c90:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025c94:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025c98:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025c9b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025c9f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025ca3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025ca9:	77 56                	ja     c0025d01 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025cab:	b8 06 00 00 00       	mov    eax,0x6
c0025cb0:	85 ff                	test   edi,edi
c0025cb2:	74 4d                	je     c0025d01 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025cb4:	89 ee                	mov    esi,ebp
c0025cb6:	c1 e6 09             	shl    esi,0x9
c0025cb9:	01 fe                	add    esi,edi
c0025cbb:	89 c8                	mov    eax,ecx
c0025cbd:	89 da                	mov    edx,ebx
c0025cbf:	83 c0 01             	add    eax,0x1
c0025cc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025cc6:	83 d2 00             	adc    edx,0x0
c0025cc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025ccd:	50                   	push   eax
c0025cce:	50                   	push   eax
c0025ccf:	6a 01                	push   0x1
c0025cd1:	57                   	push   edi
c0025cd2:	81 c7 00 02 00 00    	add    edi,0x200
c0025cd8:	6a 01                	push   0x1
c0025cda:	53                   	push   ebx
c0025cdb:	51                   	push   ecx
c0025cdc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025ce0:	e8 d1 fc ff ff       	call   c00259b6 <SATA::access(unsigned long long, int, void*, bool)>
c0025ce5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025ce9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025ced:	83 c4 20             	add    esp,0x20
c0025cf0:	39 f7                	cmp    edi,esi
c0025cf2:	75 c7                	jne    c0025cbb <SATA::write(unsigned long long, int, void*)+0x37>
c0025cf4:	01 2d 74 37 03 c0    	add    DWORD PTR ds:0xc0033774,ebp
c0025cfa:	e8 3d ac fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c0025cff:	31 c0                	xor    eax,eax
c0025d01:	83 c4 1c             	add    esp,0x1c
c0025d04:	5b                   	pop    ebx
c0025d05:	5e                   	pop    esi
c0025d06:	5f                   	pop    edi
c0025d07:	5d                   	pop    ebp
c0025d08:	c3                   	ret    
c0025d09:	90                   	nop

c0025d0a <SATAPI::write(unsigned long long, int, void*)>:
c0025d0a:	b8 03 00 00 00       	mov    eax,0x3
c0025d0f:	c3                   	ret    

c0025d10 <SATAPI::close(int, int, void*)>:
c0025d10:	83 ec 0c             	sub    esp,0xc
c0025d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d17:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025d1d:	85 c0                	test   eax,eax
c0025d1f:	74 0c                	je     c0025d2d <SATAPI::close(int, int, void*)+0x1d>
c0025d21:	83 ec 0c             	sub    esp,0xc
c0025d24:	8b 10                	mov    edx,DWORD PTR [eax]
c0025d26:	50                   	push   eax
c0025d27:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025d2a:	83 c4 10             	add    esp,0x10
c0025d2d:	31 c0                	xor    eax,eax
c0025d2f:	83 c4 0c             	add    esp,0xc
c0025d32:	c3                   	ret    
c0025d33:	90                   	nop

c0025d34 <SATAPI::SATAPI()>:
c0025d34:	83 ec 0c             	sub    esp,0xc
c0025d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3b:	83 ec 04             	sub    esp,0x4
c0025d3e:	68 00 08 00 00       	push   0x800
c0025d43:	68 08 df 02 c0       	push   0xc002df08
c0025d48:	50                   	push   eax
c0025d49:	e8 68 e9 fe ff       	call   c00146b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025d4e:	83 c4 10             	add    esp,0x10
c0025d51:	ba b4 df 02 c0       	mov    edx,0xc002dfb4
c0025d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d5a:	89 10                	mov    DWORD PTR [eax],edx
c0025d5c:	90                   	nop
c0025d5d:	83 c4 0c             	add    esp,0xc
c0025d60:	c3                   	ret    
c0025d61:	90                   	nop

c0025d62 <SATAPI::diskRemoved()>:
c0025d62:	83 ec 18             	sub    esp,0x18
c0025d65:	68 14 df 02 c0       	push   0xc002df14
c0025d6a:	e8 c8 d0 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0025d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d73:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025d7a:	83 c4 1c             	add    esp,0x1c
c0025d7d:	c3                   	ret    

c0025d7e <SATAPI::diskInserted()>:
c0025d7e:	53                   	push   ebx
c0025d7f:	83 ec 14             	sub    esp,0x14
c0025d82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025d86:	68 2b df 02 c0       	push   0xc002df2b
c0025d8b:	e8 a7 d0 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0025d90:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025d97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025d9a:	e8 7f e9 fe ff       	call   c001471e <PhysicalDisk::startCache()>
c0025d9f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025da3:	83 c4 18             	add    esp,0x18
c0025da6:	5b                   	pop    ebx
c0025da7:	e9 52 0c ff ff       	jmp    c00169fe <createPartitionsForDisk(PhysicalDisk*)>

c0025dac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025dac:	55                   	push   ebp
c0025dad:	57                   	push   edi
c0025dae:	56                   	push   esi
c0025daf:	53                   	push   ebx
c0025db0:	83 ec 34             	sub    esp,0x34
c0025db3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025db7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025dbb:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025dbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025dc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025dc7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025dcd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025dd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025dd7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025ddd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025de1:	c1 e0 07             	shl    eax,0x7
c0025de4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025de8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025dec:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025df6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dfa:	8d 58 02             	lea    ebx,[eax+0x2]
c0025dfd:	c1 e3 07             	shl    ebx,0x7
c0025e00:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025e04:	53                   	push   ebx
c0025e05:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025e0b:	e8 d0 eb ff ff       	call   c00249e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025e10:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025e14:	83 c4 10             	add    esp,0x10
c0025e17:	b8 01 00 00 00       	mov    eax,0x1
c0025e1c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025e21:	0f 84 85 01 00 00    	je     c0025fac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025e27:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025e2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025e2f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025e35:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025e3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e3f:	c1 e1 05             	shl    ecx,0x5
c0025e42:	01 c8                	add    eax,ecx
c0025e44:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025e46:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025e4c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025e52:	89 08                	mov    DWORD PTR [eax],ecx
c0025e54:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025e5a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025e60:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025e66:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025e69:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025e6c:	50                   	push   eax
c0025e6d:	68 90 00 00 00       	push   0x90
c0025e72:	6a 00                	push   0x0
c0025e74:	53                   	push   ebx
c0025e75:	e8 d6 a8 fd ff       	call   c0000750 <memset>
c0025e7a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025e7e:	b9 0c 00 00 00       	mov    ecx,0xc
c0025e83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025e85:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025e8b:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025e8f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025e95:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025e99:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025e9d:	48                   	dec    eax
c0025e9e:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025ea3:	89 c1                	mov    ecx,eax
c0025ea5:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025eab:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025eb0:	09 c8                	or     eax,ecx
c0025eb2:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025eb8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025ebb:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025ec2:	66 25 00 7f          	and    ax,0x7f00
c0025ec6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025eca:	66 0d 27 80          	or     ax,0x8027
c0025ece:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025ed2:	66 89 03             	mov    WORD PTR [ebx],ax
c0025ed5:	89 d0                	mov    eax,edx
c0025ed7:	c1 ea 18             	shr    edx,0x18
c0025eda:	c1 e8 10             	shr    eax,0x10
c0025edd:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025ee0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025ee3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025ee7:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025eea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025eee:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025ef1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025ef5:	83 c4 10             	add    esp,0x10
c0025ef8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025efc:	31 c0                	xor    eax,eax
c0025efe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025f02:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025f08:	80 e2 88             	and    dl,0x88
c0025f0b:	74 0a                	je     c0025f17 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025f0d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025f12:	74 0a                	je     c0025f1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025f14:	40                   	inc    eax
c0025f15:	eb eb                	jmp    c0025f02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025f17:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025f1c:	75 0f                	jne    c0025f2d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025f1e:	83 ec 0c             	sub    esp,0xc
c0025f21:	68 b1 de 02 c0       	push   0xc002deb1
c0025f26:	e8 7a 4a ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0025f2b:	eb 3f                	jmp    c0025f6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025f2d:	ba 01 00 00 00       	mov    edx,0x1
c0025f32:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025f36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f3a:	d3 e2                	shl    edx,cl
c0025f3c:	c1 e0 07             	shl    eax,0x7
c0025f3f:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025f45:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025f49:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025f4f:	85 ca                	test   edx,ecx
c0025f51:	74 23                	je     c0025f76 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025f53:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025f59:	0f ba e1 1e          	bt     ecx,0x1e
c0025f5d:	73 ea                	jae    c0025f49 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025f5f:	83 ec 0c             	sub    esp,0xc
c0025f62:	68 43 df 02 c0       	push   0xc002df43
c0025f67:	e8 cb ce fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0025f6c:	83 c4 10             	add    esp,0x10
c0025f6f:	b8 01 00 00 00       	mov    eax,0x1
c0025f74:	eb 36                	jmp    c0025fac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025f76:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025f7c:	0f ba e0 1e          	bt     eax,0x1e
c0025f80:	73 0a                	jae    c0025f8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025f82:	83 ec 0c             	sub    esp,0xc
c0025f85:	68 56 df 02 c0       	push   0xc002df56
c0025f8a:	eb db                	jmp    c0025f67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025f8c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025f91:	74 17                	je     c0025faa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025f93:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025f98:	74 10                	je     c0025faa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025f9a:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025fa0:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025fa4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025fa8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025faa:	31 c0                	xor    eax,eax
c0025fac:	83 c4 2c             	add    esp,0x2c
c0025faf:	5b                   	pop    ebx
c0025fb0:	5e                   	pop    esi
c0025fb1:	5f                   	pop    edi
c0025fb2:	5d                   	pop    ebp
c0025fb3:	c3                   	ret    

c0025fb4 <SATAPI::eject()>:
c0025fb4:	57                   	push   edi
c0025fb5:	b9 03 00 00 00       	mov    ecx,0x3
c0025fba:	53                   	push   ebx
c0025fbb:	83 ec 14             	sub    esp,0x14
c0025fbe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025fc2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025fc6:	fc                   	cld    
c0025fc7:	31 c0                	xor    eax,eax
c0025fc9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025fcb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025fd0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025fd5:	50                   	push   eax
c0025fd6:	6a 00                	push   0x0
c0025fd8:	6a 00                	push   0x0
c0025fda:	6a 00                	push   0x0
c0025fdc:	6a 00                	push   0x0
c0025fde:	6a 02                	push   0x2
c0025fe0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025fe4:	50                   	push   eax
c0025fe5:	53                   	push   ebx
c0025fe6:	e8 c1 fd ff ff       	call   c0025dac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025feb:	83 c4 14             	add    esp,0x14
c0025fee:	53                   	push   ebx
c0025fef:	e8 6e fd ff ff       	call   c0025d62 <SATAPI::diskRemoved()>
c0025ff4:	83 c4 24             	add    esp,0x24
c0025ff7:	31 c0                	xor    eax,eax
c0025ff9:	5b                   	pop    ebx
c0025ffa:	5f                   	pop    edi
c0025ffb:	c3                   	ret    

c0025ffc <SATAPI::detectMedia()>:
c0025ffc:	56                   	push   esi
c0025ffd:	53                   	push   ebx
c0025ffe:	83 ec 28             	sub    esp,0x28
c0026001:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026005:	6a 0c                	push   0xc
c0026007:	6a 00                	push   0x0
c0026009:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002600d:	56                   	push   esi
c002600e:	e8 3d a7 fd ff       	call   c0000750 <memset>
c0026013:	83 c4 0c             	add    esp,0xc
c0026016:	6a 00                	push   0x0
c0026018:	6a 00                	push   0x0
c002601a:	6a 00                	push   0x0
c002601c:	6a 00                	push   0x0
c002601e:	6a 00                	push   0x0
c0026020:	56                   	push   esi
c0026021:	53                   	push   ebx
c0026022:	e8 85 fd ff ff       	call   c0025dac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0026027:	83 c4 1c             	add    esp,0x1c
c002602a:	6a 0c                	push   0xc
c002602c:	6a 00                	push   0x0
c002602e:	56                   	push   esi
c002602f:	e8 1c a7 fd ff       	call   c0000750 <memset>
c0026034:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0026039:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002603e:	83 c4 0c             	add    esp,0xc
c0026041:	6a 01                	push   0x1
c0026043:	8d 44 24 16          	lea    eax,[esp+0x16]
c0026047:	50                   	push   eax
c0026048:	6a 00                	push   0x0
c002604a:	6a 00                	push   0x0
c002604c:	6a 12                	push   0x12
c002604e:	56                   	push   esi
c002604f:	53                   	push   ebx
c0026050:	e8 57 fd ff ff       	call   c0025dac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0026055:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0026059:	83 c4 20             	add    esp,0x20
c002605c:	83 e0 7f             	and    eax,0x7f
c002605f:	3c 70                	cmp    al,0x70
c0026061:	74 15                	je     c0026078 <SATAPI::detectMedia()+0x7c>
c0026063:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002606a:	75 0c                	jne    c0026078 <SATAPI::detectMedia()+0x7c>
c002606c:	83 ec 0c             	sub    esp,0xc
c002606f:	53                   	push   ebx
c0026070:	e8 09 fd ff ff       	call   c0025d7e <SATAPI::diskInserted()>
c0026075:	83 c4 10             	add    esp,0x10
c0026078:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002607c:	83 e0 0f             	and    eax,0xf
c002607f:	3c 02                	cmp    al,0x2
c0026081:	75 1b                	jne    c002609e <SATAPI::detectMedia()+0xa2>
c0026083:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0026088:	75 2d                	jne    c00260b7 <SATAPI::detectMedia()+0xbb>
c002608a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0026091:	74 24                	je     c00260b7 <SATAPI::detectMedia()+0xbb>
c0026093:	83 ec 0c             	sub    esp,0xc
c0026096:	53                   	push   ebx
c0026097:	e8 c6 fc ff ff       	call   c0025d62 <SATAPI::diskRemoved()>
c002609c:	eb 16                	jmp    c00260b4 <SATAPI::detectMedia()+0xb8>
c002609e:	84 c0                	test   al,al
c00260a0:	75 15                	jne    c00260b7 <SATAPI::detectMedia()+0xbb>
c00260a2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00260a9:	75 0c                	jne    c00260b7 <SATAPI::detectMedia()+0xbb>
c00260ab:	83 ec 0c             	sub    esp,0xc
c00260ae:	53                   	push   ebx
c00260af:	e8 ca fc ff ff       	call   c0025d7e <SATAPI::diskInserted()>
c00260b4:	83 c4 10             	add    esp,0x10
c00260b7:	83 c4 24             	add    esp,0x24
c00260ba:	5b                   	pop    ebx
c00260bb:	5e                   	pop    esi
c00260bc:	c3                   	ret    
c00260bd:	90                   	nop

c00260be <SATAPI::open(int, int, void*)>:
c00260be:	56                   	push   esi
c00260bf:	53                   	push   ebx
c00260c0:	50                   	push   eax
c00260c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00260c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260c9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00260d3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00260d9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00260e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260e7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00260f1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00260f7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00260fe:	e8 f5 9d fe ff       	call   c000fef8 <Phys::allocatePage()>
c0026103:	89 c6                	mov    esi,eax
c0026105:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002610b:	81 c6 00 10 00 00    	add    esi,0x1000
c0026111:	e8 e2 9d fe ff       	call   c000fef8 <Phys::allocatePage()>
c0026116:	39 c6                	cmp    esi,eax
c0026118:	74 10                	je     c002612a <SATAPI::open(int, int, void*)+0x6c>
c002611a:	83 ec 0c             	sub    esp,0xc
c002611d:	68 6b df 02 c0       	push   0xc002df6b
c0026122:	e8 7e 48 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0026127:	83 c4 10             	add    esp,0x10
c002612a:	83 ec 0c             	sub    esp,0xc
c002612d:	6a 02                	push   0x2
c002612f:	e8 fd b8 fe ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0026134:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002613a:	6a 03                	push   0x3
c002613c:	50                   	push   eax
c002613d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0026143:	ff 35 90 f5 02 c0    	push   DWORD PTR ds:0xc002f590
c0026149:	e8 1a c1 fe ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c002614e:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0026155:	83 c4 14             	add    esp,0x14
c0026158:	53                   	push   ebx
c0026159:	e8 9e fe ff ff       	call   c0025ffc <SATAPI::detectMedia()>
c002615e:	83 c4 14             	add    esp,0x14
c0026161:	31 c0                	xor    eax,eax
c0026163:	5b                   	pop    ebx
c0026164:	5e                   	pop    esi
c0026165:	c3                   	ret    

c0026166 <SATAPI::read(unsigned long long, int, void*)>:
c0026166:	55                   	push   ebp
c0026167:	57                   	push   edi
c0026168:	56                   	push   esi
c0026169:	53                   	push   ebx
c002616a:	83 ec 1c             	sub    esp,0x1c
c002616d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026171:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026175:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0026179:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0026180:	74 19                	je     c002619b <SATAPI::read(unsigned long long, int, void*)+0x35>
c0026182:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0026187:	7e 2e                	jle    c00261b7 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0026189:	83 ec 0c             	sub    esp,0xc
c002618c:	68 81 df 02 c0       	push   0xc002df81
c0026191:	e8 0f 48 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0026196:	83 c4 10             	add    esp,0x10
c0026199:	eb 1c                	jmp    c00261b7 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002619b:	83 ec 0c             	sub    esp,0xc
c002619e:	55                   	push   ebp
c002619f:	e8 58 fe ff ff       	call   c0025ffc <SATAPI::detectMedia()>
c00261a4:	83 c4 10             	add    esp,0x10
c00261a7:	b8 02 00 00 00       	mov    eax,0x2
c00261ac:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00261b3:	75 cd                	jne    c0026182 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00261b5:	eb 49                	jmp    c0026200 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00261b7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00261bb:	b9 03 00 00 00       	mov    ecx,0x3
c00261c0:	fc                   	cld    
c00261c1:	31 c0                	xor    eax,eax
c00261c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00261c5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00261ca:	89 d8                	mov    eax,ebx
c00261cc:	86 e0                	xchg   al,ah
c00261ce:	c1 c0 10             	rol    eax,0x10
c00261d1:	86 e0                	xchg   al,ah
c00261d3:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00261d7:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00261db:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00261df:	50                   	push   eax
c00261e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00261e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00261e8:	56                   	push   esi
c00261e9:	53                   	push   ebx
c00261ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00261ee:	c1 e0 0b             	shl    eax,0xb
c00261f1:	50                   	push   eax
c00261f2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00261f6:	50                   	push   eax
c00261f7:	55                   	push   ebp
c00261f8:	e8 af fb ff ff       	call   c0025dac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00261fd:	83 c4 20             	add    esp,0x20
c0026200:	83 c4 1c             	add    esp,0x1c
c0026203:	5b                   	pop    ebx
c0026204:	5e                   	pop    esi
c0026205:	5f                   	pop    edi
c0026206:	5d                   	pop    ebp
c0026207:	c3                   	ret    

c0026208 <AVX::open(int, int, void*)>:
c0026208:	83 ec 0c             	sub    esp,0xc
c002620b:	e8 48 11 00 00       	call   c0027358 <avxInit>
c0026210:	b8 00 00 00 00       	mov    eax,0x0
c0026215:	83 c4 0c             	add    esp,0xc
c0026218:	c3                   	ret    
c0026219:	90                   	nop

c002621a <AVX::close(int, int, void*)>:
c002621a:	83 ec 0c             	sub    esp,0xc
c002621d:	e8 37 11 00 00       	call   c0027359 <avxClose>
c0026222:	b8 00 00 00 00       	mov    eax,0x0
c0026227:	83 c4 0c             	add    esp,0xc
c002622a:	c3                   	ret    
c002622b:	90                   	nop

c002622c <AVX::available()>:
c002622c:	83 ec 0c             	sub    esp,0xc
c002622f:	e8 1c 11 00 00       	call   c0027350 <avxDetect>
c0026234:	85 c0                	test   eax,eax
c0026236:	0f 95 c0             	setne  al
c0026239:	83 c4 0c             	add    esp,0xc
c002623c:	c3                   	ret    
c002623d:	90                   	nop

c002623e <AVX::save(void*)>:
c002623e:	83 ec 0c             	sub    esp,0xc
c0026241:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026245:	83 ec 0c             	sub    esp,0xc
c0026248:	50                   	push   eax
c0026249:	e8 08 11 00 00       	call   c0027356 <avxSave>
c002624e:	83 c4 10             	add    esp,0x10
c0026251:	90                   	nop
c0026252:	83 c4 0c             	add    esp,0xc
c0026255:	c3                   	ret    

c0026256 <AVX::load(void*)>:
c0026256:	83 ec 0c             	sub    esp,0xc
c0026259:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002625d:	83 ec 0c             	sub    esp,0xc
c0026260:	50                   	push   eax
c0026261:	e8 f1 10 00 00       	call   c0027357 <avxLoad>
c0026266:	83 c4 10             	add    esp,0x10
c0026269:	90                   	nop
c002626a:	83 c4 0c             	add    esp,0xc
c002626d:	c3                   	ret    

c002626e <AVX::AVX()>:
c002626e:	83 ec 0c             	sub    esp,0xc
c0026271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026275:	83 ec 08             	sub    esp,0x8
c0026278:	68 e4 df 02 c0       	push   0xc002dfe4
c002627d:	50                   	push   eax
c002627e:	e8 11 e5 fe ff       	call   c0014794 <FPU::FPU(char const*)>
c0026283:	83 c4 10             	add    esp,0x10
c0026286:	ba f4 df 02 c0       	mov    edx,0xc002dff4
c002628b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002628f:	89 10                	mov    DWORD PTR [eax],edx
c0026291:	90                   	nop
c0026292:	83 c4 0c             	add    esp,0xc
c0026295:	c3                   	ret    

c0026296 <MMX::available()>:
c0026296:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c002629b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00262a1:	83 e0 20             	and    eax,0x20
c00262a4:	84 c0                	test   al,al
c00262a6:	0f 95 c0             	setne  al
c00262a9:	c3                   	ret    

c00262aa <MMX::open(int, int, void*)>:
c00262aa:	83 ec 0c             	sub    esp,0xc
c00262ad:	e8 30 11 00 00       	call   c00273e2 <x87Init>
c00262b2:	b8 00 00 00 00       	mov    eax,0x0
c00262b7:	83 c4 0c             	add    esp,0xc
c00262ba:	c3                   	ret    
c00262bb:	90                   	nop

c00262bc <MMX::close(int, int, void*)>:
c00262bc:	83 ec 0c             	sub    esp,0xc
c00262bf:	e8 38 11 00 00       	call   c00273fc <x87Close>
c00262c4:	b8 00 00 00 00       	mov    eax,0x0
c00262c9:	83 c4 0c             	add    esp,0xc
c00262cc:	c3                   	ret    
c00262cd:	90                   	nop

c00262ce <MMX::save(void*)>:
c00262ce:	83 ec 0c             	sub    esp,0xc
c00262d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262d5:	83 ec 0c             	sub    esp,0xc
c00262d8:	50                   	push   eax
c00262d9:	e8 f3 10 00 00       	call   c00273d1 <x87Save>
c00262de:	83 c4 10             	add    esp,0x10
c00262e1:	90                   	nop
c00262e2:	83 c4 0c             	add    esp,0xc
c00262e5:	c3                   	ret    

c00262e6 <MMX::load(void*)>:
c00262e6:	83 ec 0c             	sub    esp,0xc
c00262e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262ed:	83 ec 0c             	sub    esp,0xc
c00262f0:	50                   	push   eax
c00262f1:	e8 e4 10 00 00       	call   c00273da <x87Load>
c00262f6:	83 c4 10             	add    esp,0x10
c00262f9:	90                   	nop
c00262fa:	83 c4 0c             	add    esp,0xc
c00262fd:	c3                   	ret    

c00262fe <MMX::MMX()>:
c00262fe:	83 ec 0c             	sub    esp,0xc
c0026301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026305:	83 ec 08             	sub    esp,0x8
c0026308:	68 24 e0 02 c0       	push   0xc002e024
c002630d:	50                   	push   eax
c002630e:	e8 81 e4 fe ff       	call   c0014794 <FPU::FPU(char const*)>
c0026313:	83 c4 10             	add    esp,0x10
c0026316:	ba 34 e0 02 c0       	mov    edx,0xc002e034
c002631b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002631f:	89 10                	mov    DWORD PTR [eax],edx
c0026321:	90                   	nop
c0026322:	83 c4 0c             	add    esp,0xc
c0026325:	c3                   	ret    

c0026326 <SSE::open(int, int, void*)>:
c0026326:	83 ec 0c             	sub    esp,0xc
c0026329:	e8 66 10 00 00       	call   c0027394 <sseInit>
c002632e:	b8 00 00 00 00       	mov    eax,0x0
c0026333:	83 c4 0c             	add    esp,0xc
c0026336:	c3                   	ret    
c0026337:	90                   	nop

c0026338 <SSE::close(int, int, void*)>:
c0026338:	83 ec 0c             	sub    esp,0xc
c002633b:	e8 64 10 00 00       	call   c00273a4 <sseClose>
c0026340:	b8 00 00 00 00       	mov    eax,0x0
c0026345:	83 c4 0c             	add    esp,0xc
c0026348:	c3                   	ret    
c0026349:	90                   	nop

c002634a <SSE::available()>:
c002634a:	83 ec 1c             	sub    esp,0x1c
c002634d:	e8 1e 10 00 00       	call   c0027370 <absolutelyNoChanceInHell>
c0026352:	85 c0                	test   eax,eax
c0026354:	0f 95 c0             	setne  al
c0026357:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002635b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002635f:	83 c4 1c             	add    esp,0x1c
c0026362:	c3                   	ret    
c0026363:	90                   	nop

c0026364 <SSE::save(void*)>:
c0026364:	83 ec 0c             	sub    esp,0xc
c0026367:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002636b:	83 ec 0c             	sub    esp,0xc
c002636e:	50                   	push   eax
c002636f:	e8 14 10 00 00       	call   c0027388 <sseSave>
c0026374:	83 c4 10             	add    esp,0x10
c0026377:	90                   	nop
c0026378:	83 c4 0c             	add    esp,0xc
c002637b:	c3                   	ret    

c002637c <SSE::load(void*)>:
c002637c:	83 ec 0c             	sub    esp,0xc
c002637f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026383:	83 ec 0c             	sub    esp,0xc
c0026386:	50                   	push   eax
c0026387:	e8 02 10 00 00       	call   c002738e <sseLoad>
c002638c:	83 c4 10             	add    esp,0x10
c002638f:	90                   	nop
c0026390:	83 c4 0c             	add    esp,0xc
c0026393:	c3                   	ret    

c0026394 <SSE::SSE()>:
c0026394:	83 ec 0c             	sub    esp,0xc
c0026397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002639b:	83 ec 08             	sub    esp,0x8
c002639e:	68 64 e0 02 c0       	push   0xc002e064
c00263a3:	50                   	push   eax
c00263a4:	e8 eb e3 fe ff       	call   c0014794 <FPU::FPU(char const*)>
c00263a9:	83 c4 10             	add    esp,0x10
c00263ac:	ba 74 e0 02 c0       	mov    edx,0xc002e074
c00263b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b5:	89 10                	mov    DWORD PTR [eax],edx
c00263b7:	90                   	nop
c00263b8:	83 c4 0c             	add    esp,0xc
c00263bb:	c3                   	ret    

c00263bc <x87::open(int, int, void*)>:
c00263bc:	83 ec 0c             	sub    esp,0xc
c00263bf:	e8 1e 10 00 00       	call   c00273e2 <x87Init>
c00263c4:	b8 00 00 00 00       	mov    eax,0x0
c00263c9:	83 c4 0c             	add    esp,0xc
c00263cc:	c3                   	ret    
c00263cd:	90                   	nop

c00263ce <x87::close(int, int, void*)>:
c00263ce:	83 ec 0c             	sub    esp,0xc
c00263d1:	e8 26 10 00 00       	call   c00273fc <x87Close>
c00263d6:	b8 00 00 00 00       	mov    eax,0x0
c00263db:	83 c4 0c             	add    esp,0xc
c00263de:	c3                   	ret    
c00263df:	90                   	nop

c00263e0 <x87::available()>:
c00263e0:	83 ec 0c             	sub    esp,0xc
c00263e3:	e8 ce 0f 00 00       	call   c00273b6 <x87Detect>
c00263e8:	85 c0                	test   eax,eax
c00263ea:	0f 95 c0             	setne  al
c00263ed:	83 c4 0c             	add    esp,0xc
c00263f0:	c3                   	ret    
c00263f1:	90                   	nop

c00263f2 <x87::save(void*)>:
c00263f2:	83 ec 0c             	sub    esp,0xc
c00263f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00263f9:	83 ec 0c             	sub    esp,0xc
c00263fc:	50                   	push   eax
c00263fd:	e8 cf 0f 00 00       	call   c00273d1 <x87Save>
c0026402:	83 c4 10             	add    esp,0x10
c0026405:	90                   	nop
c0026406:	83 c4 0c             	add    esp,0xc
c0026409:	c3                   	ret    

c002640a <x87::load(void*)>:
c002640a:	83 ec 0c             	sub    esp,0xc
c002640d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026411:	83 ec 0c             	sub    esp,0xc
c0026414:	50                   	push   eax
c0026415:	e8 c0 0f 00 00       	call   c00273da <x87Load>
c002641a:	83 c4 10             	add    esp,0x10
c002641d:	90                   	nop
c002641e:	83 c4 0c             	add    esp,0xc
c0026421:	c3                   	ret    

c0026422 <x87::x87()>:
c0026422:	83 ec 0c             	sub    esp,0xc
c0026425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026429:	83 ec 08             	sub    esp,0x8
c002642c:	68 a4 e0 02 c0       	push   0xc002e0a4
c0026431:	50                   	push   eax
c0026432:	e8 5d e3 fe ff       	call   c0014794 <FPU::FPU(char const*)>
c0026437:	83 c4 10             	add    esp,0x10
c002643a:	ba b4 e0 02 c0       	mov    edx,0xc002e0b4
c002643f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026443:	89 10                	mov    DWORD PTR [eax],edx
c0026445:	90                   	nop
c0026446:	83 c4 0c             	add    esp,0xc
c0026449:	c3                   	ret    

c002644a <APIC::disable()>:
c002644a:	90                   	nop
c002644b:	c3                   	ret    

c002644c <APIC::close(int, int, void*)>:
c002644c:	55                   	push   ebp
c002644d:	89 e5                	mov    ebp,esp
c002644f:	83 ec 08             	sub    esp,0x8
c0026452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026455:	8b 00                	mov    eax,DWORD PTR [eax]
c0026457:	83 c0 3c             	add    eax,0x3c
c002645a:	8b 00                	mov    eax,DWORD PTR [eax]
c002645c:	83 ec 0c             	sub    esp,0xc
c002645f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026462:	ff d0                	call   eax
c0026464:	83 c4 10             	add    esp,0x10
c0026467:	b8 00 00 00 00       	mov    eax,0x0
c002646c:	c9                   	leave  
c002646d:	c3                   	ret    

c002646e <IOAPIC::close(int, int, void*)>:
c002646e:	b8 00 00 00 00       	mov    eax,0x0
c0026473:	c3                   	ret    

c0026474 <APIC::io_wait()>:
c0026474:	eb 00                	jmp    c0026476 <APIC::io_wait()+0x2>
c0026476:	eb 00                	jmp    c0026478 <APIC::io_wait()+0x4>
c0026478:	90                   	nop
c0026479:	c3                   	ret    

c002647a <APIC::getBase()>:
c002647a:	55                   	push   ebp
c002647b:	89 e5                	mov    ebp,esp
c002647d:	83 ec 18             	sub    esp,0x18
c0026480:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0026485:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002648b:	83 e0 08             	and    eax,0x8
c002648e:	84 c0                	test   al,al
c0026490:	75 07                	jne    c0026499 <APIC::getBase()+0x1f>
c0026492:	b8 00 00 00 00       	mov    eax,0x0
c0026497:	eb 21                	jmp    c00264ba <APIC::getBase()+0x40>
c0026499:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c002649e:	83 ec 08             	sub    esp,0x8
c00264a1:	6a 1b                	push   0x1b
c00264a3:	50                   	push   eax
c00264a4:	e8 89 89 fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c00264a9:	83 c4 10             	add    esp,0x10
c00264ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00264af:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00264b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00264ba:	c9                   	leave  
c00264bb:	c3                   	ret    

c00264bc <APIC::eoi(unsigned char)>:
c00264bc:	55                   	push   ebp
c00264bd:	89 e5                	mov    ebp,esp
c00264bf:	83 ec 28             	sub    esp,0x28
c00264c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264c5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00264c8:	83 ec 0c             	sub    esp,0xc
c00264cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264ce:	e8 a7 ff ff ff       	call   c002647a <APIC::getBase()>
c00264d3:	83 c4 10             	add    esp,0x10
c00264d6:	05 b0 00 00 00       	add    eax,0xb0
c00264db:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00264de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00264e1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00264e7:	90                   	nop
c00264e8:	c9                   	leave  
c00264e9:	c3                   	ret    

c00264ea <APIC::open(int, int, void*)>:
c00264ea:	55                   	push   ebp
c00264eb:	89 e5                	mov    ebp,esp
c00264ed:	57                   	push   edi
c00264ee:	56                   	push   esi
c00264ef:	53                   	push   ebx
c00264f0:	83 ec 2c             	sub    esp,0x2c
c00264f3:	83 ec 0c             	sub    esp,0xc
c00264f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264f9:	e8 7c ff ff ff       	call   c002647a <APIC::getBase()>
c00264fe:	83 c4 10             	add    esp,0x10
c0026501:	89 c2                	mov    edx,eax
c0026503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026506:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002650c:	0f b6 f8             	movzx  edi,al
c002650f:	89 d0                	mov    eax,edx
c0026511:	ba 00 00 00 00       	mov    edx,0x0
c0026516:	89 c1                	mov    ecx,eax
c0026518:	80 e5 ff             	and    ch,0xff
c002651b:	89 cb                	mov    ebx,ecx
c002651d:	0f b6 f2             	movzx  esi,dl
c0026520:	89 d8                	mov    eax,ebx
c0026522:	89 f2                	mov    edx,esi
c0026524:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026527:	8d 5f 08             	lea    ebx,[edi+0x8]
c002652a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002652e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026532:	83 e0 00             	and    eax,0x0
c0026535:	09 d0                	or     eax,edx
c0026537:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002653b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002653e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026544:	8d 50 01             	lea    edx,[eax+0x1]
c0026547:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002654a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026550:	0f b6 d0             	movzx  edx,al
c0026553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026556:	83 c2 08             	add    edx,0x8
c0026559:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002655d:	0f b6 c9             	movzx  ecx,cl
c0026560:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026566:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002656a:	83 ec 0c             	sub    esp,0xc
c002656d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026570:	e8 05 ff ff ff       	call   c002647a <APIC::getBase()>
c0026575:	83 c4 10             	add    esp,0x10
c0026578:	05 f0 00 00 00       	add    eax,0xf0
c002657d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026580:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026583:	8b 00                	mov    eax,DWORD PTR [eax]
c0026585:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026588:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002658f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026596:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026599:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002659c:	89 10                	mov    DWORD PTR [eax],edx
c002659e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00265a5:	a1 f0 1c 03 c0       	mov    eax,ds:0xc0031cf0
c00265aa:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00265ad:	7d 7c                	jge    c002662b <APIC::open(int, int, void*)+0x141>
c00265af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00265b2:	8b 04 85 00 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce300]
c00265b9:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00265bc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00265bf:	8b 04 85 00 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce300]
c00265c6:	c1 e8 08             	shr    eax,0x8
c00265c9:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00265cd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00265d0:	8b 04 85 00 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce300]
c00265d7:	c1 e8 18             	shr    eax,0x18
c00265da:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00265dd:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00265e1:	75 40                	jne    c0026623 <APIC::open(int, int, void*)+0x139>
c00265e3:	83 ec 0c             	sub    esp,0xc
c00265e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265e9:	e8 8c fe ff ff       	call   c002647a <APIC::getBase()>
c00265ee:	83 c4 10             	add    esp,0x10
c00265f1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00265f5:	75 07                	jne    c00265fe <APIC::open(int, int, void*)+0x114>
c00265f7:	ba 60 03 00 00       	mov    edx,0x360
c00265fc:	eb 05                	jmp    c0026603 <APIC::open(int, int, void*)+0x119>
c00265fe:	ba 50 03 00 00       	mov    edx,0x350
c0026603:	01 d0                	add    eax,edx
c0026605:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026608:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002660b:	8b 00                	mov    eax,DWORD PTR [eax]
c002660d:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026610:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026617:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002661b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002661e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026621:	89 10                	mov    DWORD PTR [eax],edx
c0026623:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026626:	e9 7a ff ff ff       	jmp    c00265a5 <APIC::open(int, int, void*)+0xbb>
c002662b:	b8 00 00 00 00       	mov    eax,0x0
c0026630:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026633:	5b                   	pop    ebx
c0026634:	5e                   	pop    esi
c0026635:	5f                   	pop    edi
c0026636:	5d                   	pop    ebp
c0026637:	c3                   	ret    

c0026638 <IOAPIC::IOAPIC()>:
c0026638:	83 ec 0c             	sub    esp,0xc
c002663b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663f:	83 ec 08             	sub    esp,0x8
c0026642:	68 e4 e0 02 c0       	push   0xc002e0e4
c0026647:	50                   	push   eax
c0026648:	e8 27 de fe ff       	call   c0014474 <Device::Device(char const*)>
c002664d:	83 c4 10             	add    esp,0x10
c0026650:	ba 0c e2 02 c0       	mov    edx,0xc002e20c
c0026655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026659:	89 10                	mov    DWORD PTR [eax],edx
c002665b:	90                   	nop
c002665c:	83 c4 0c             	add    esp,0xc
c002665f:	c3                   	ret    

c0026660 <APIC::APIC()>:
c0026660:	53                   	push   ebx
c0026661:	83 ec 18             	sub    esp,0x18
c0026664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026668:	83 ec 08             	sub    esp,0x8
c002666b:	68 ec e0 02 c0       	push   0xc002e0ec
c0026670:	50                   	push   eax
c0026671:	e8 78 e5 fe ff       	call   c0014bee <InterruptController::InterruptController(char const*)>
c0026676:	83 c4 10             	add    esp,0x10
c0026679:	ba c4 e1 02 c0       	mov    edx,0xc002e1c4
c002667e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026682:	89 10                	mov    DWORD PTR [eax],edx
c0026684:	a0 c0 37 03 c0       	mov    al,ds:0xc00337c0
c0026689:	83 f0 01             	xor    eax,0x1
c002668c:	84 c0                	test   al,al
c002668e:	0f 84 a1 00 00 00    	je     c0026735 <APIC::APIC()+0xd5>
c0026694:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026699:	a0 a0 1d 03 c0       	mov    al,ds:0xc0031da0
c002669e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00266a2:	0f 83 86 00 00 00    	jae    c002672e <APIC::APIC()+0xce>
c00266a8:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00266b0:	83 ec 0c             	sub    esp,0xc
c00266b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00266b7:	e8 d0 91 fe ff       	call   c000f88c <malloc>
c00266bc:	83 c4 10             	add    esp,0x10
c00266bf:	89 c3                	mov    ebx,eax
c00266c1:	83 ec 0c             	sub    esp,0xc
c00266c4:	53                   	push   ebx
c00266c5:	e8 6e ff ff ff       	call   c0026638 <IOAPIC::IOAPIC()>
c00266ca:	83 c4 10             	add    esp,0x10
c00266cd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00266d1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00266d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00266da:	89 14 85 a0 37 03 c0 	mov    DWORD PTR [eax*4-0x3ffcc860],edx
c00266e1:	a1 80 37 03 c0       	mov    eax,ds:0xc0033780
c00266e6:	40                   	inc    eax
c00266e7:	a3 80 37 03 c0       	mov    ds:0xc0033780,eax
c00266ec:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c00266f1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00266f7:	83 ec 08             	sub    esp,0x8
c00266fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00266fe:	50                   	push   eax
c00266ff:	e8 6c db fe ff       	call   c0014270 <Device::addChild(Device*)>
c0026704:	83 c4 10             	add    esp,0x10
c0026707:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002670b:	8b 00                	mov    eax,DWORD PTR [eax]
c002670d:	83 c0 08             	add    eax,0x8
c0026710:	8b 00                	mov    eax,DWORD PTR [eax]
c0026712:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026717:	6a 00                	push   0x0
c0026719:	6a 00                	push   0x0
c002671b:	52                   	push   edx
c002671c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026720:	ff d0                	call   eax
c0026722:	83 c4 10             	add    esp,0x10
c0026725:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026729:	e9 6b ff ff ff       	jmp    c0026699 <APIC::APIC()+0x39>
c002672e:	c6 05 c0 37 03 c0 01 	mov    BYTE PTR ds:0xc00337c0,0x1
c0026735:	90                   	nop
c0026736:	83 c4 18             	add    esp,0x18
c0026739:	5b                   	pop    ebx
c002673a:	c3                   	ret    
c002673b:	90                   	nop

c002673c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002673c:	55                   	push   ebp
c002673d:	89 e5                	mov    ebp,esp
c002673f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026742:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026748:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002674b:	72 1d                	jb     c002676a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002674d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026750:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026759:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002675f:	01 d0                	add    eax,edx
c0026761:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026764:	73 04                	jae    c002676a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026766:	b0 01                	mov    al,0x1
c0026768:	eb 02                	jmp    c002676c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002676a:	b0 00                	mov    al,0x0
c002676c:	5d                   	pop    ebp
c002676d:	c3                   	ret    

c002676e <IOAPIC::read(int)>:
c002676e:	55                   	push   ebp
c002676f:	89 e5                	mov    ebp,esp
c0026771:	83 ec 10             	sub    esp,0x10
c0026774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026777:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002677d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026780:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026783:	0f b6 d0             	movzx  edx,al
c0026786:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026789:	89 10                	mov    DWORD PTR [eax],edx
c002678b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002678e:	83 c0 10             	add    eax,0x10
c0026791:	8b 00                	mov    eax,DWORD PTR [eax]
c0026793:	c9                   	leave  
c0026794:	c3                   	ret    
c0026795:	90                   	nop

c0026796 <IOAPIC::open(int, int, void*)>:
c0026796:	55                   	push   ebp
c0026797:	89 e5                	mov    ebp,esp
c0026799:	57                   	push   edi
c002679a:	56                   	push   esi
c002679b:	53                   	push   ebx
c002679c:	83 ec 0c             	sub    esp,0xc
c002679f:	83 ec 0c             	sub    esp,0xc
c00267a2:	68 17 e1 02 c0       	push   0xc002e117
c00267a7:	e8 8b c6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00267ac:	83 c4 10             	add    esp,0x10
c00267af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00267b5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00267bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00267c4:	8b 14 85 e0 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce220]
c00267cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267ce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00267d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00267dd:	8b 14 85 60 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce1a0]
c00267e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267e7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00267ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267f0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00267f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267f9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00267ff:	0f b6 f8             	movzx  edi,al
c0026802:	89 d0                	mov    eax,edx
c0026804:	ba 00 00 00 00       	mov    edx,0x0
c0026809:	89 c1                	mov    ecx,eax
c002680b:	80 e5 ff             	and    ch,0xff
c002680e:	89 cb                	mov    ebx,ecx
c0026810:	0f b6 f2             	movzx  esi,dl
c0026813:	89 d8                	mov    eax,ebx
c0026815:	89 f2                	mov    edx,esi
c0026817:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002681a:	8d 5f 08             	lea    ebx,[edi+0x8]
c002681d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026821:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026825:	83 e0 00             	and    eax,0x0
c0026828:	09 d0                	or     eax,edx
c002682a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002682e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026831:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026837:	8d 50 01             	lea    edx,[eax+0x1]
c002683a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002683d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026843:	0f b6 d0             	movzx  edx,al
c0026846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026849:	83 c2 08             	add    edx,0x8
c002684c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026850:	0f b6 c9             	movzx  ecx,cl
c0026853:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026859:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002685d:	83 ec 08             	sub    esp,0x8
c0026860:	6a 01                	push   0x1
c0026862:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026865:	e8 04 ff ff ff       	call   c002676e <IOAPIC::read(int)>
c002686a:	83 c4 10             	add    esp,0x10
c002686d:	c1 f8 10             	sar    eax,0x10
c0026870:	0f b6 c0             	movzx  eax,al
c0026873:	8d 50 01             	lea    edx,[eax+0x1]
c0026876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026879:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002687f:	b8 00 00 00 00       	mov    eax,0x0
c0026884:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026887:	5b                   	pop    ebx
c0026888:	5e                   	pop    esi
c0026889:	5f                   	pop    edi
c002688a:	5d                   	pop    ebp
c002688b:	c3                   	ret    

c002688c <IOAPIC::write(int, int)>:
c002688c:	55                   	push   ebp
c002688d:	89 e5                	mov    ebp,esp
c002688f:	83 ec 10             	sub    esp,0x10
c0026892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026895:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002689b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002689e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268a1:	0f b6 d0             	movzx  edx,al
c00268a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00268a7:	89 10                	mov    DWORD PTR [eax],edx
c00268a9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00268ac:	8d 50 10             	lea    edx,[eax+0x10]
c00268af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00268b2:	89 02                	mov    DWORD PTR [edx],eax
c00268b4:	90                   	nop
c00268b5:	c9                   	leave  
c00268b6:	c3                   	ret    
c00268b7:	90                   	nop

c00268b8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00268b8:	55                   	push   ebp
c00268b9:	89 e5                	mov    ebp,esp
c00268bb:	53                   	push   ebx
c00268bc:	83 ec 2c             	sub    esp,0x2c
c00268bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268c2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00268c5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00268c8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00268cb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00268ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00268d1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00268d4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00268d7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00268da:	88 d8                	mov    al,bl
c00268dc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00268df:	88 c8                	mov    al,cl
c00268e1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00268e4:	88 d0                	mov    al,dl
c00268e6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00268e9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00268ed:	83 c0 08             	add    eax,0x8
c00268f0:	01 c0                	add    eax,eax
c00268f2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00268f5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00268f9:	83 c0 08             	add    eax,0x8
c00268fc:	01 c0                	add    eax,eax
c00268fe:	40                   	inc    eax
c00268ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026902:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026905:	50                   	push   eax
c0026906:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026909:	e8 60 fe ff ff       	call   c002676e <IOAPIC::read(int)>
c002690e:	83 c4 08             	add    esp,0x8
c0026911:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026914:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002691b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002691e:	c1 e0 18             	shl    eax,0x18
c0026921:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026924:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026927:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002692a:	52                   	push   edx
c002692b:	50                   	push   eax
c002692c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002692f:	e8 58 ff ff ff       	call   c002688c <IOAPIC::write(int, int)>
c0026934:	83 c4 0c             	add    esp,0xc
c0026937:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002693a:	50                   	push   eax
c002693b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002693e:	e8 2b fe ff ff       	call   c002676e <IOAPIC::read(int)>
c0026943:	83 c4 08             	add    esp,0x8
c0026946:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026949:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026950:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026957:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002695e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026962:	74 09                	je     c002696d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026964:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002696b:	eb 07                	jmp    c0026974 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002696d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026974:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026978:	74 09                	je     c0026983 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002697a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026981:	eb 07                	jmp    c002698a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026983:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002698a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026991:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026995:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026998:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002699b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002699e:	52                   	push   edx
c002699f:	50                   	push   eax
c00269a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269a3:	e8 e4 fe ff ff       	call   c002688c <IOAPIC::write(int, int)>
c00269a8:	83 c4 0c             	add    esp,0xc
c00269ab:	90                   	nop
c00269ac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00269af:	c9                   	leave  
c00269b0:	c3                   	ret    
c00269b1:	90                   	nop

c00269b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00269b2:	55                   	push   ebp
c00269b3:	89 e5                	mov    ebp,esp
c00269b5:	57                   	push   edi
c00269b6:	56                   	push   esi
c00269b7:	53                   	push   ebx
c00269b8:	83 ec 2c             	sub    esp,0x2c
c00269bb:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00269be:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00269c1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00269c5:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00269c9:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00269cd:	74 5a                	je     c0026a29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00269cf:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00269d3:	7f 44                	jg     c0026a19 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00269d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269d8:	05 60 e6 02 c0       	add    eax,0xc002e660
c00269dd:	8a 00                	mov    al,BYTE PTR [eax]
c00269df:	0f b6 c0             	movzx  eax,al
c00269e2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00269e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269e8:	66 8b 84 00 80 1d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce280]
c00269f0:	0f b7 c0             	movzx  eax,ax
c00269f3:	83 e0 02             	and    eax,0x2
c00269f6:	85 c0                	test   eax,eax
c00269f8:	74 04                	je     c00269fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00269fa:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00269fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a01:	66 8b 84 00 80 1d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce280]
c0026a09:	0f b7 c0             	movzx  eax,ax
c0026a0c:	83 e0 08             	and    eax,0x8
c0026a0f:	85 c0                	test   eax,eax
c0026a11:	74 16                	je     c0026a29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026a13:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026a17:	eb 10                	jmp    c0026a29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026a19:	83 ec 0c             	sub    esp,0xc
c0026a1c:	68 28 e1 02 c0       	push   0xc002e128
c0026a21:	e8 7f 3f ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0026a26:	83 c4 10             	add    esp,0x10
c0026a29:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026a2d:	a1 80 37 03 c0       	mov    eax,ds:0xc0033780
c0026a32:	83 ec 08             	sub    esp,0x8
c0026a35:	50                   	push   eax
c0026a36:	68 60 e1 02 c0       	push   0xc002e160
c0026a3b:	e8 f7 c3 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0026a40:	83 c4 10             	add    esp,0x10
c0026a43:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026a4a:	a1 80 37 03 c0       	mov    eax,ds:0xc0033780
c0026a4f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026a52:	7d 67                	jge    c0026abb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026a54:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026a57:	8b 04 85 a0 37 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc860]
c0026a5e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026a61:	83 ec 08             	sub    esp,0x8
c0026a64:	52                   	push   edx
c0026a65:	50                   	push   eax
c0026a66:	e8 d1 fc ff ff       	call   c002673c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026a6b:	83 c4 10             	add    esp,0x10
c0026a6e:	84 c0                	test   al,al
c0026a70:	74 44                	je     c0026ab6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026a72:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026a75:	8b 1c 85 a0 37 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcc860]
c0026a7c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026a80:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026a83:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026a87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a8a:	83 c0 20             	add    eax,0x20
c0026a8d:	0f b6 f0             	movzx  esi,al
c0026a90:	b8 00 00 00 00       	mov    eax,0x0
c0026a95:	99                   	cdq    
c0026a96:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026a99:	0f b6 c9             	movzx  ecx,cl
c0026a9c:	83 ec 04             	sub    esp,0x4
c0026a9f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026aa2:	57                   	push   edi
c0026aa3:	56                   	push   esi
c0026aa4:	52                   	push   edx
c0026aa5:	50                   	push   eax
c0026aa6:	51                   	push   ecx
c0026aa7:	53                   	push   ebx
c0026aa8:	e8 0b fe ff ff       	call   c00268b8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026aad:	83 c4 20             	add    esp,0x20
c0026ab0:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0026ab4:	eb 05                	jmp    c0026abb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026ab6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026ab9:	eb 8f                	jmp    c0026a4a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026abb:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026abe:	83 f0 01             	xor    eax,0x1
c0026ac1:	84 c0                	test   al,al
c0026ac3:	74 10                	je     c0026ad5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026ac5:	83 ec 0c             	sub    esp,0xc
c0026ac8:	68 77 e1 02 c0       	push   0xc002e177
c0026acd:	e8 d3 3e ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0026ad2:	83 c4 10             	add    esp,0x10
c0026ad5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026ad9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026ae0:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026ae4:	7f 65                	jg     c0026b4b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ae9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026aec:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026af3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026af6:	01 ca                	add    edx,ecx
c0026af8:	83 c2 54             	add    edx,0x54
c0026afb:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026aff:	85 c0                	test   eax,eax
c0026b01:	75 43                	jne    c0026b46 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026b03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b06:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026b09:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026b10:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026b13:	01 ca                	add    edx,ecx
c0026b15:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026b18:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026b1b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026b25:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026b2c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026b2f:	01 ca                	add    edx,ecx
c0026b31:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026b37:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026b3a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026b3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b41:	83 e8 20             	sub    eax,0x20
c0026b44:	eb 1a                	jmp    c0026b60 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026b46:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026b49:	eb 95                	jmp    c0026ae0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026b4b:	83 ec 0c             	sub    esp,0xc
c0026b4e:	68 84 e1 02 c0       	push   0xc002e184
c0026b53:	e8 4d 3e ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0026b58:	83 c4 10             	add    esp,0x10
c0026b5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026b60:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026b63:	5b                   	pop    ebx
c0026b64:	5e                   	pop    esi
c0026b65:	5f                   	pop    edi
c0026b66:	5d                   	pop    ebp
c0026b67:	c3                   	ret    

c0026b68 <PIC::disable()>:
c0026b68:	55                   	push   ebp
c0026b69:	89 e5                	mov    ebp,esp
c0026b6b:	83 ec 10             	sub    esp,0x10
c0026b6e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026b74:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026b78:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026b7b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026b7f:	ee                   	out    dx,al
c0026b80:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026b86:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026b8a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026b8d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026b91:	ee                   	out    dx,al
c0026b92:	90                   	nop
c0026b93:	c9                   	leave  
c0026b94:	c3                   	ret    
c0026b95:	90                   	nop

c0026b96 <PIC::close(int, int, void*)>:
c0026b96:	55                   	push   ebp
c0026b97:	89 e5                	mov    ebp,esp
c0026b99:	83 ec 08             	sub    esp,0x8
c0026b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ba1:	83 c0 3c             	add    eax,0x3c
c0026ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ba6:	83 ec 0c             	sub    esp,0xc
c0026ba9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bac:	ff d0                	call   eax
c0026bae:	83 c4 10             	add    esp,0x10
c0026bb1:	b8 00 00 00 00       	mov    eax,0x0
c0026bb6:	c9                   	leave  
c0026bb7:	c3                   	ret    

c0026bb8 <PIC::PIC()>:
c0026bb8:	83 ec 0c             	sub    esp,0xc
c0026bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bbf:	83 ec 08             	sub    esp,0x8
c0026bc2:	68 30 e2 02 c0       	push   0xc002e230
c0026bc7:	50                   	push   eax
c0026bc8:	e8 21 e0 fe ff       	call   c0014bee <InterruptController::InterruptController(char const*)>
c0026bcd:	83 c4 10             	add    esp,0x10
c0026bd0:	ba 5c e2 02 c0       	mov    edx,0xc002e25c
c0026bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bd9:	89 10                	mov    DWORD PTR [eax],edx
c0026bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bdf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026be5:	0f b6 d0             	movzx  edx,al
c0026be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bec:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bf7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026bfd:	0f b6 d0             	movzx  edx,al
c0026c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c04:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026c13:	8d 50 01             	lea    edx,[eax+0x1]
c0026c16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c1a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026c20:	0f b6 d0             	movzx  edx,al
c0026c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c27:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026c2b:	83 e1 3f             	and    ecx,0x3f
c0026c2e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c36:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026c3c:	0f b6 d0             	movzx  edx,al
c0026c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c43:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026c54:	0f b6 d0             	movzx  edx,al
c0026c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c5b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c64:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026c6a:	8d 50 01             	lea    edx,[eax+0x1]
c0026c6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c71:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026c77:	0f b6 d0             	movzx  edx,al
c0026c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026c82:	83 e1 3f             	and    ecx,0x3f
c0026c85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026c89:	90                   	nop
c0026c8a:	83 c4 0c             	add    esp,0xc
c0026c8d:	c3                   	ret    

c0026c8e <PIC::ioWait()>:
c0026c8e:	eb 00                	jmp    c0026c90 <PIC::ioWait()+0x2>
c0026c90:	eb 00                	jmp    c0026c92 <PIC::ioWait()+0x4>
c0026c92:	90                   	nop
c0026c93:	c3                   	ret    

c0026c94 <PIC::getIRQReg(int)>:
c0026c94:	55                   	push   ebp
c0026c95:	89 e5                	mov    ebp,esp
c0026c97:	83 ec 10             	sub    esp,0x10
c0026c9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c9d:	0f b6 c0             	movzx  eax,al
c0026ca0:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026ca6:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026ca9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026cac:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026cb0:	ee                   	out    dx,al
c0026cb1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026cb4:	0f b6 c0             	movzx  eax,al
c0026cb7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026cbd:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026cc0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026cc3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026cc7:	ee                   	out    dx,al
c0026cc8:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026cce:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026cd2:	89 c2                	mov    edx,eax
c0026cd4:	ec                   	in     al,dx
c0026cd5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026cd8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026cdb:	0f b6 c0             	movzx  eax,al
c0026cde:	c1 e0 08             	shl    eax,0x8
c0026ce1:	89 c1                	mov    ecx,eax
c0026ce3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026ce9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026ced:	89 c2                	mov    edx,eax
c0026cef:	ec                   	in     al,dx
c0026cf0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026cf3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026cf6:	0f b6 c0             	movzx  eax,al
c0026cf9:	09 c8                	or     eax,ecx
c0026cfb:	c9                   	leave  
c0026cfc:	c3                   	ret    
c0026cfd:	90                   	nop

c0026cfe <PIC::eoi(unsigned char)>:
c0026cfe:	55                   	push   ebp
c0026cff:	89 e5                	mov    ebp,esp
c0026d01:	83 ec 14             	sub    esp,0x14
c0026d04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d07:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026d0a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026d0e:	75 1e                	jne    c0026d2e <PIC::eoi(unsigned char)+0x30>
c0026d10:	6a 0b                	push   0xb
c0026d12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d15:	e8 7a ff ff ff       	call   c0026c94 <PIC::getIRQReg(int)>
c0026d1a:	83 c4 08             	add    esp,0x8
c0026d1d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026d21:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026d25:	25 80 00 00 00       	and    eax,0x80
c0026d2a:	85 c0                	test   eax,eax
c0026d2c:	74 5f                	je     c0026d8d <PIC::eoi(unsigned char)+0x8f>
c0026d2e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026d32:	75 2d                	jne    c0026d61 <PIC::eoi(unsigned char)+0x63>
c0026d34:	6a 0b                	push   0xb
c0026d36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d39:	e8 56 ff ff ff       	call   c0026c94 <PIC::getIRQReg(int)>
c0026d3e:	83 c4 08             	add    esp,0x8
c0026d41:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026d45:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026d48:	66 85 c0             	test   ax,ax
c0026d4b:	78 14                	js     c0026d61 <PIC::eoi(unsigned char)+0x63>
c0026d4d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026d53:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026d57:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026d5a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026d5e:	ee                   	out    dx,al
c0026d5f:	eb 2d                	jmp    c0026d8e <PIC::eoi(unsigned char)+0x90>
c0026d61:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026d65:	76 12                	jbe    c0026d79 <PIC::eoi(unsigned char)+0x7b>
c0026d67:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026d6d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026d71:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026d74:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026d78:	ee                   	out    dx,al
c0026d79:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026d7f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026d83:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026d86:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026d8a:	ee                   	out    dx,al
c0026d8b:	eb 01                	jmp    c0026d8e <PIC::eoi(unsigned char)+0x90>
c0026d8d:	90                   	nop
c0026d8e:	c9                   	leave  
c0026d8f:	c3                   	ret    

c0026d90 <PIC::remap()>:
c0026d90:	55                   	push   ebp
c0026d91:	89 e5                	mov    ebp,esp
c0026d93:	83 ec 48             	sub    esp,0x48
c0026d96:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026d9d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026da4:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026daa:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026dad:	89 c2                	mov    edx,eax
c0026daf:	ec                   	in     al,dx
c0026db0:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026db3:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026db6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026db9:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026dbf:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026dc2:	89 c2                	mov    edx,eax
c0026dc4:	ec                   	in     al,dx
c0026dc5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026dc8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026dcb:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026dce:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026dd4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026dd8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026ddb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026dde:	ee                   	out    dx,al
c0026ddf:	83 ec 0c             	sub    esp,0xc
c0026de2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026de5:	e8 a4 fe ff ff       	call   c0026c8e <PIC::ioWait()>
c0026dea:	83 c4 10             	add    esp,0x10
c0026ded:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026df3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026df7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026dfa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026dfd:	ee                   	out    dx,al
c0026dfe:	83 ec 0c             	sub    esp,0xc
c0026e01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e04:	e8 85 fe ff ff       	call   c0026c8e <PIC::ioWait()>
c0026e09:	83 c4 10             	add    esp,0x10
c0026e0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026e0f:	0f b6 c0             	movzx  eax,al
c0026e12:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026e18:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026e1b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026e1e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026e21:	ee                   	out    dx,al
c0026e22:	83 ec 0c             	sub    esp,0xc
c0026e25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e28:	e8 61 fe ff ff       	call   c0026c8e <PIC::ioWait()>
c0026e2d:	83 c4 10             	add    esp,0x10
c0026e30:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e33:	0f b6 c0             	movzx  eax,al
c0026e36:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026e3c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026e3f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026e42:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026e45:	ee                   	out    dx,al
c0026e46:	83 ec 0c             	sub    esp,0xc
c0026e49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e4c:	e8 3d fe ff ff       	call   c0026c8e <PIC::ioWait()>
c0026e51:	83 c4 10             	add    esp,0x10
c0026e54:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026e5a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026e5e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026e61:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026e64:	ee                   	out    dx,al
c0026e65:	83 ec 0c             	sub    esp,0xc
c0026e68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e6b:	e8 1e fe ff ff       	call   c0026c8e <PIC::ioWait()>
c0026e70:	83 c4 10             	add    esp,0x10
c0026e73:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026e79:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026e7d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026e80:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026e83:	ee                   	out    dx,al
c0026e84:	83 ec 0c             	sub    esp,0xc
c0026e87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e8a:	e8 ff fd ff ff       	call   c0026c8e <PIC::ioWait()>
c0026e8f:	83 c4 10             	add    esp,0x10
c0026e92:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026e98:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026e9c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026e9f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026ea2:	ee                   	out    dx,al
c0026ea3:	83 ec 0c             	sub    esp,0xc
c0026ea6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ea9:	e8 e0 fd ff ff       	call   c0026c8e <PIC::ioWait()>
c0026eae:	83 c4 10             	add    esp,0x10
c0026eb1:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026eb7:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026ebb:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026ebe:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ec1:	ee                   	out    dx,al
c0026ec2:	83 ec 0c             	sub    esp,0xc
c0026ec5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ec8:	e8 c1 fd ff ff       	call   c0026c8e <PIC::ioWait()>
c0026ecd:	83 c4 10             	add    esp,0x10
c0026ed0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026ed4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026eda:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026edd:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026ee0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026ee3:	ee                   	out    dx,al
c0026ee4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026ee8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026eee:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026ef1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026ef4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026ef7:	ee                   	out    dx,al
c0026ef8:	90                   	nop
c0026ef9:	c9                   	leave  
c0026efa:	c3                   	ret    
c0026efb:	90                   	nop

c0026efc <PIC::open(int, int, void*)>:
c0026efc:	55                   	push   ebp
c0026efd:	89 e5                	mov    ebp,esp
c0026eff:	83 ec 18             	sub    esp,0x18
c0026f02:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026f08:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026f0c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026f0f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026f13:	ee                   	out    dx,al
c0026f14:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026f1a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026f1e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026f21:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026f25:	ee                   	out    dx,al
c0026f26:	83 ec 0c             	sub    esp,0xc
c0026f29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f2c:	e8 5f fe ff ff       	call   c0026d90 <PIC::remap()>
c0026f31:	83 c4 10             	add    esp,0x10
c0026f34:	b8 00 00 00 00       	mov    eax,0x0
c0026f39:	c9                   	leave  
c0026f3a:	c3                   	ret    
c0026f3b:	90                   	nop

c0026f3c <APICTimer::close(int, int, void*)>:
c0026f3c:	b8 00 00 00 00       	mov    eax,0x0
c0026f41:	c3                   	ret    

c0026f42 <apicTimerHandler(regs*, void*)>:
c0026f42:	83 ec 0c             	sub    esp,0xc
c0026f45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f49:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f4b:	99                   	cdq    
c0026f4c:	52                   	push   edx
c0026f4d:	50                   	push   eax
c0026f4e:	6a 00                	push   0x0
c0026f50:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026f55:	e8 9a 07 00 00       	call   c00276f4 <__udivdi3>
c0026f5a:	83 c4 10             	add    esp,0x10
c0026f5d:	83 ec 08             	sub    esp,0x8
c0026f60:	52                   	push   edx
c0026f61:	50                   	push   eax
c0026f62:	e8 3c fe fe ff       	call   c0016da3 <timerHandler(unsigned long long)>
c0026f67:	83 c4 10             	add    esp,0x10
c0026f6a:	90                   	nop
c0026f6b:	83 c4 0c             	add    esp,0xc
c0026f6e:	c3                   	ret    
c0026f6f:	90                   	nop

c0026f70 <APICTimer::write(int)>:
c0026f70:	53                   	push   ebx
c0026f71:	83 ec 28             	sub    esp,0x28
c0026f74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026f78:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026f7c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026f82:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0026f87:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026f8d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026f93:	83 ec 0c             	sub    esp,0xc
c0026f96:	50                   	push   eax
c0026f97:	e8 de f4 ff ff       	call   c002647a <APIC::getBase()>
c0026f9c:	83 c4 10             	add    esp,0x10
c0026f9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026fa3:	a1 90 fa 02 c0       	mov    eax,ds:0xc002fa90
c0026fa8:	8b 15 94 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa94
c0026fae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026fb2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026fb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026fba:	05 e0 03 00 00       	add    eax,0x3e0
c0026fbf:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026fc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026fc9:	05 80 03 00 00       	add    eax,0x380
c0026fce:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026fd4:	fb                   	sti    
c0026fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026fdd:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026fe2:	83 d2 00             	adc    edx,0x0
c0026fe5:	89 c1                	mov    ecx,eax
c0026fe7:	89 d3                	mov    ebx,edx
c0026fe9:	a1 90 fa 02 c0       	mov    eax,ds:0xc002fa90
c0026fee:	8b 15 94 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa94
c0026ff4:	39 c8                	cmp    eax,ecx
c0026ff6:	89 d0                	mov    eax,edx
c0026ff8:	19 d8                	sbb    eax,ebx
c0026ffa:	73 02                	jae    c0026ffe <APICTimer::write(int)+0x8e>
c0026ffc:	eb d7                	jmp    c0026fd5 <APICTimer::write(int)+0x65>
c0026ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027002:	05 20 03 00 00       	add    eax,0x320
c0027007:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002700d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027011:	05 90 03 00 00       	add    eax,0x390
c0027016:	8b 00                	mov    eax,DWORD PTR [eax]
c0027018:	f7 d0                	not    eax
c002701a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002701e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027026:	ba 00 00 00 00       	mov    edx,0x0
c002702b:	f7 f3                	div    ebx
c002702d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027031:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0027035:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002703b:	0d 00 00 02 00       	or     eax,0x20000
c0027040:	89 c2                	mov    edx,eax
c0027042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027046:	05 20 03 00 00       	add    eax,0x320
c002704b:	89 10                	mov    DWORD PTR [eax],edx
c002704d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027051:	05 e0 03 00 00       	add    eax,0x3e0
c0027056:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002705c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027060:	05 80 03 00 00       	add    eax,0x380
c0027065:	89 c2                	mov    edx,eax
c0027067:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002706b:	89 02                	mov    DWORD PTR [edx],eax
c002706d:	90                   	nop
c002706e:	83 c4 28             	add    esp,0x28
c0027071:	5b                   	pop    ebx
c0027072:	c3                   	ret    
c0027073:	90                   	nop

c0027074 <APICTimer::open(int, int, void*)>:
c0027074:	57                   	push   edi
c0027075:	56                   	push   esi
c0027076:	53                   	push   ebx
c0027077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002707b:	8b 00                	mov    eax,DWORD PTR [eax]
c002707d:	83 c0 24             	add    eax,0x24
c0027080:	8b 00                	mov    eax,DWORD PTR [eax]
c0027082:	83 ec 08             	sub    esp,0x8
c0027085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027089:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002708d:	ff d0                	call   eax
c002708f:	83 c4 10             	add    esp,0x10
c0027092:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0027097:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002709d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00270a3:	83 ec 0c             	sub    esp,0xc
c00270a6:	50                   	push   eax
c00270a7:	e8 ce f3 ff ff       	call   c002647a <APIC::getBase()>
c00270ac:	83 c4 10             	add    esp,0x10
c00270af:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00270b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270b9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00270bf:	0f b6 f8             	movzx  edi,al
c00270c2:	89 d0                	mov    eax,edx
c00270c4:	ba 00 00 00 00       	mov    edx,0x0
c00270c9:	89 c1                	mov    ecx,eax
c00270cb:	80 e5 ff             	and    ch,0xff
c00270ce:	89 cb                	mov    ebx,ecx
c00270d0:	0f b6 f2             	movzx  esi,dl
c00270d3:	89 d8                	mov    eax,ebx
c00270d5:	89 f2                	mov    edx,esi
c00270d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270db:	8d 5f 08             	lea    ebx,[edi+0x8]
c00270de:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00270e2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00270e6:	83 e0 00             	and    eax,0x0
c00270e9:	09 d0                	or     eax,edx
c00270eb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00270ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270f3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00270f9:	8d 50 01             	lea    edx,[eax+0x1]
c00270fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027100:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0027106:	0f b6 d0             	movzx  edx,al
c0027109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002710d:	83 c2 08             	add    edx,0x8
c0027110:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0027114:	0f b6 c9             	movzx  ecx,cl
c0027117:	81 c9 00 00 01 00    	or     ecx,0x10000
c002711d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0027121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027125:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027129:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027133:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027137:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002713d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027141:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0027147:	83 ec 0c             	sub    esp,0xc
c002714a:	51                   	push   ecx
c002714b:	6a 01                	push   0x1
c002714d:	68 42 6f 02 c0       	push   0xc0026f42
c0027152:	52                   	push   edx
c0027153:	50                   	push   eax
c0027154:	e8 8f d0 fe ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027159:	83 c4 20             	add    esp,0x20
c002715c:	89 c2                	mov    edx,eax
c002715e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027162:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027168:	b8 00 00 00 00       	mov    eax,0x0
c002716d:	5b                   	pop    ebx
c002716e:	5e                   	pop    esi
c002716f:	5f                   	pop    edi
c0027170:	c3                   	ret    
c0027171:	90                   	nop

c0027172 <APICTimer::APICTimer()>:
c0027172:	83 ec 0c             	sub    esp,0xc
c0027175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027179:	83 ec 08             	sub    esp,0x8
c002717c:	68 9c e2 02 c0       	push   0xc002e29c
c0027181:	50                   	push   eax
c0027182:	e8 8d fb fe ff       	call   c0016d14 <Timer::Timer(char const*)>
c0027187:	83 c4 10             	add    esp,0x10
c002718a:	ba b0 e2 02 c0       	mov    edx,0xc002e2b0
c002718f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027193:	89 10                	mov    DWORD PTR [eax],edx
c0027195:	90                   	nop
c0027196:	83 c4 0c             	add    esp,0xc
c0027199:	c3                   	ret    

c002719a <PIT::write(int)>:
c002719a:	83 ec 10             	sub    esp,0x10
c002719d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00271a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00271a5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00271ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00271af:	a3 c4 37 03 c0       	mov    ds:0xc00337c4,eax
c00271b4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00271b9:	99                   	cdq    
c00271ba:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00271be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00271c2:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00271c9:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00271ce:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00271d2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00271d7:	ee                   	out    dx,al
c00271d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00271dc:	0f b6 c0             	movzx  eax,al
c00271df:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00271e6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00271ea:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00271ee:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00271f3:	ee                   	out    dx,al
c00271f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00271f8:	c1 f8 08             	sar    eax,0x8
c00271fb:	0f b6 c0             	movzx  eax,al
c00271fe:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0027205:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027209:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002720d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027212:	ee                   	out    dx,al
c0027213:	90                   	nop
c0027214:	83 c4 10             	add    esp,0x10
c0027217:	c3                   	ret    

c0027218 <pitHandler(regs*, void*)>:
c0027218:	83 ec 0c             	sub    esp,0xc
c002721b:	a1 c4 37 03 c0       	mov    eax,ds:0xc00337c4
c0027220:	99                   	cdq    
c0027221:	52                   	push   edx
c0027222:	50                   	push   eax
c0027223:	6a 00                	push   0x0
c0027225:	68 00 ca 9a 3b       	push   0x3b9aca00
c002722a:	e8 c5 04 00 00       	call   c00276f4 <__udivdi3>
c002722f:	83 c4 10             	add    esp,0x10
c0027232:	83 ec 08             	sub    esp,0x8
c0027235:	52                   	push   edx
c0027236:	50                   	push   eax
c0027237:	e8 67 fb fe ff       	call   c0016da3 <timerHandler(unsigned long long)>
c002723c:	83 c4 10             	add    esp,0x10
c002723f:	90                   	nop
c0027240:	83 c4 0c             	add    esp,0xc
c0027243:	c3                   	ret    

c0027244 <PIT::open(int, int, void*)>:
c0027244:	83 ec 0c             	sub    esp,0xc
c0027247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002724b:	8b 00                	mov    eax,DWORD PTR [eax]
c002724d:	83 c0 24             	add    eax,0x24
c0027250:	8b 00                	mov    eax,DWORD PTR [eax]
c0027252:	83 ec 08             	sub    esp,0x8
c0027255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002725d:	ff d0                	call   eax
c002725f:	83 c4 10             	add    esp,0x10
c0027262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027266:	83 ec 0c             	sub    esp,0xc
c0027269:	6a 00                	push   0x0
c002726b:	6a 01                	push   0x1
c002726d:	68 18 72 02 c0       	push   0xc0027218
c0027272:	6a 00                	push   0x0
c0027274:	50                   	push   eax
c0027275:	e8 6e cf fe ff       	call   c00141e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002727a:	83 c4 20             	add    esp,0x20
c002727d:	89 c2                	mov    edx,eax
c002727f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027283:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027289:	b8 00 00 00 00       	mov    eax,0x0
c002728e:	83 c4 0c             	add    esp,0xc
c0027291:	c3                   	ret    

c0027292 <PIT::close(int, int, void*)>:
c0027292:	83 ec 0c             	sub    esp,0xc
c0027295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027299:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00272a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272a7:	6a 01                	push   0x1
c00272a9:	68 18 72 02 c0       	push   0xc0027218
c00272ae:	6a 00                	push   0x0
c00272b0:	50                   	push   eax
c00272b1:	e8 7c cf fe ff       	call   c0014232 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00272b6:	83 c4 10             	add    esp,0x10
c00272b9:	b8 00 00 00 00       	mov    eax,0x0
c00272be:	83 c4 0c             	add    esp,0xc
c00272c1:	c3                   	ret    

c00272c2 <PIT::PIT()>:
c00272c2:	83 ec 0c             	sub    esp,0xc
c00272c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272c9:	83 ec 08             	sub    esp,0x8
c00272cc:	68 d8 e2 02 c0       	push   0xc002e2d8
c00272d1:	50                   	push   eax
c00272d2:	e8 3d fa fe ff       	call   c0016d14 <Timer::Timer(char const*)>
c00272d7:	83 c4 10             	add    esp,0x10
c00272da:	ba 00 e3 02 c0       	mov    edx,0xc002e300
c00272df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272e3:	89 10                	mov    DWORD PTR [eax],edx
c00272e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00272ef:	0f b6 d0             	movzx  edx,al
c00272f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272f6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00272fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027301:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027307:	0f b6 d0             	movzx  edx,al
c002730a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002730e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0027313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027317:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002731d:	8d 50 01             	lea    edx,[eax+0x1]
c0027320:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027324:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002732a:	0f b6 d0             	movzx  edx,al
c002732d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027331:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0027335:	83 e1 3f             	and    ecx,0x3f
c0027338:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002733c:	90                   	nop
c002733d:	83 c4 0c             	add    esp,0xc
c0027340:	c3                   	ret    
c0027341:	66 90                	xchg   ax,ax
c0027343:	66 90                	xchg   ax,ax
c0027345:	66 90                	xchg   ax,ax
c0027347:	66 90                	xchg   ax,ax
c0027349:	66 90                	xchg   ax,ax
c002734b:	66 90                	xchg   ax,ax
c002734d:	66 90                	xchg   ax,ax
c002734f:	90                   	nop

c0027350 <avxDetect>:
c0027350:	b8 00 00 00 00       	mov    eax,0x0
c0027355:	c3                   	ret    

c0027356 <avxSave>:
c0027356:	c3                   	ret    

c0027357 <avxLoad>:
c0027357:	c3                   	ret    

c0027358 <avxInit>:
c0027358:	c3                   	ret    

c0027359 <avxClose>:
c0027359:	c3                   	ret    

c002735a <wouldSheSayYes>:
c002735a:	c3                   	ret    
c002735b:	49                   	dec    ecx
c002735c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0027360:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0027364:	75 20                	jne    c0027386 <sseDetect.noSSE+0x1>
c0027366:	4e                   	dec    esi
c0027367:	79 61                	jns    c00273ca <x87Detect+0x14>
c0027369:	68 2e 2e 2e 00       	push   0x2e2e2e
c002736e:	66 90                	xchg   ax,ax

c0027370 <absolutelyNoChanceInHell>:
c0027370:	b8 01 00 00 00       	mov    eax,0x1
c0027375:	0f a2                	cpuid  
c0027377:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002737d:	74 06                	je     c0027385 <sseDetect.noSSE>
c002737f:	b8 01 00 00 00       	mov    eax,0x1
c0027384:	c3                   	ret    

c0027385 <sseDetect.noSSE>:
c0027385:	31 c0                	xor    eax,eax
c0027387:	c3                   	ret    

c0027388 <sseSave>:
c0027388:	0f ae 44 24 04       	fxsave [esp+0x4]
c002738d:	c3                   	ret    

c002738e <sseLoad>:
c002738e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0027393:	c3                   	ret    

c0027394 <sseInit>:
c0027394:	e8 49 00 00 00       	call   c00273e2 <x87Init>
c0027399:	0f 20 e0             	mov    eax,cr4
c002739c:	66 0d 00 06          	or     ax,0x600
c00273a0:	0f 22 e0             	mov    cr4,eax
c00273a3:	c3                   	ret    

c00273a4 <sseClose>:
c00273a4:	c3                   	ret    
c00273a5:	66 90                	xchg   ax,ax
c00273a7:	66 90                	xchg   ax,ax
c00273a9:	66 90                	xchg   ax,ax
c00273ab:	66 90                	xchg   ax,ax
c00273ad:	66 90                	xchg   ax,ax
c00273af:	90                   	nop

c00273b0 <value_37F>:
c00273b0:	7f 03                	jg     c00273b5 <value_37A+0x1>

c00273b2 <value_37E>:
c00273b2:	7e 03                	jle    c00273b7 <x87Detect+0x1>

c00273b4 <value_37A>:
c00273b4:	7a 03                	jp     c00273b9 <x87Detect+0x3>

c00273b6 <x87Detect>:
c00273b6:	b8 01 00 00 00       	mov    eax,0x1
c00273bb:	0f a2                	cpuid  
c00273bd:	f7 c2 01 00 00 00    	test   edx,0x1
c00273c3:	74 06                	je     c00273cb <x87Detect.nox87>
c00273c5:	b8 01 00 00 00       	mov    eax,0x1
c00273ca:	c3                   	ret    

c00273cb <x87Detect.nox87>:
c00273cb:	b8 00 00 00 00       	mov    eax,0x0
c00273d0:	c3                   	ret    

c00273d1 <x87Save>:
c00273d1:	55                   	push   ebp
c00273d2:	89 e5                	mov    ebp,esp
c00273d4:	9b dd 75 08          	fsave  [ebp+0x8]
c00273d8:	c9                   	leave  
c00273d9:	c3                   	ret    

c00273da <x87Load>:
c00273da:	55                   	push   ebp
c00273db:	89 e5                	mov    ebp,esp
c00273dd:	dd 65 08             	frstor [ebp+0x8]
c00273e0:	c9                   	leave  
c00273e1:	c3                   	ret    

c00273e2 <x87Init>:
c00273e2:	9b db e3             	finit  
c00273e5:	0f 20 c0             	mov    eax,cr0
c00273e8:	66 25 fb ff          	and    ax,0xfffb
c00273ec:	66 0d 22 00          	or     ax,0x22
c00273f0:	0f 22 c0             	mov    cr0,eax
c00273f3:	0f 06                	clts   
c00273f5:	d9 2d b4 73 02 c0    	fldcw  WORD PTR ds:0xc00273b4
c00273fb:	c3                   	ret    

c00273fc <x87Close>:
c00273fc:	c3                   	ret    
c00273fd:	66 90                	xchg   ax,ax
c00273ff:	90                   	nop

c0027400 <__do_global_ctors_aux>:
c0027400:	a1 38 a0 02 c0       	mov    eax,ds:0xc002a038
c0027405:	83 f8 ff             	cmp    eax,0xffffffff
c0027408:	74 1a                	je     c0027424 <__do_global_ctors_aux+0x24>
c002740a:	55                   	push   ebp
c002740b:	89 e5                	mov    ebp,esp
c002740d:	53                   	push   ebx
c002740e:	52                   	push   edx
c002740f:	bb 38 a0 02 c0       	mov    ebx,0xc002a038
c0027414:	ff d0                	call   eax
c0027416:	83 eb 04             	sub    ebx,0x4
c0027419:	8b 03                	mov    eax,DWORD PTR [ebx]
c002741b:	83 f8 ff             	cmp    eax,0xffffffff
c002741e:	75 f4                	jne    c0027414 <__do_global_ctors_aux+0x14>
c0027420:	58                   	pop    eax
c0027421:	5b                   	pop    ebx
c0027422:	5d                   	pop    ebp
c0027423:	c3                   	ret    
c0027424:	c3                   	ret    
c0027425:	66 90                	xchg   ax,ax
c0027427:	90                   	nop

c0027428 <__divdi3>:
c0027428:	55                   	push   ebp
c0027429:	57                   	push   edi
c002742a:	56                   	push   esi
c002742b:	53                   	push   ebx
c002742c:	83 ec 1c             	sub    esp,0x1c
c002742f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027433:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027437:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002743a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002743e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027442:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027446:	85 db                	test   ebx,ebx
c0027448:	0f 88 8e 00 00 00    	js     c00274dc <__divdi3+0xb4>
c002744e:	89 dd                	mov    ebp,ebx
c0027450:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027458:	89 d3                	mov    ebx,edx
c002745a:	85 d2                	test   edx,edx
c002745c:	79 0d                	jns    c002746b <__divdi3+0x43>
c002745e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0027462:	f7 d8                	neg    eax
c0027464:	83 d2 00             	adc    edx,0x0
c0027467:	f7 da                	neg    edx
c0027469:	89 d3                	mov    ebx,edx
c002746b:	89 c7                	mov    edi,eax
c002746d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027470:	85 db                	test   ebx,ebx
c0027472:	75 48                	jne    c00274bc <__divdi3+0x94>
c0027474:	39 ef                	cmp    edi,ebp
c0027476:	76 24                	jbe    c002749c <__divdi3+0x74>
c0027478:	89 ea                	mov    edx,ebp
c002747a:	f7 f7                	div    edi
c002747c:	89 c1                	mov    ecx,eax
c002747e:	31 f6                	xor    esi,esi
c0027480:	89 c8                	mov    eax,ecx
c0027482:	89 f2                	mov    edx,esi
c0027484:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027488:	85 c9                	test   ecx,ecx
c002748a:	74 07                	je     c0027493 <__divdi3+0x6b>
c002748c:	f7 d8                	neg    eax
c002748e:	83 d2 00             	adc    edx,0x0
c0027491:	f7 da                	neg    edx
c0027493:	83 c4 1c             	add    esp,0x1c
c0027496:	5b                   	pop    ebx
c0027497:	5e                   	pop    esi
c0027498:	5f                   	pop    edi
c0027499:	5d                   	pop    ebp
c002749a:	c3                   	ret    
c002749b:	90                   	nop
c002749c:	85 ff                	test   edi,edi
c002749e:	75 0b                	jne    c00274ab <__divdi3+0x83>
c00274a0:	b8 01 00 00 00       	mov    eax,0x1
c00274a5:	31 d2                	xor    edx,edx
c00274a7:	f7 f3                	div    ebx
c00274a9:	89 c7                	mov    edi,eax
c00274ab:	31 d2                	xor    edx,edx
c00274ad:	89 e8                	mov    eax,ebp
c00274af:	f7 f7                	div    edi
c00274b1:	89 c6                	mov    esi,eax
c00274b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00274b6:	f7 f7                	div    edi
c00274b8:	89 c1                	mov    ecx,eax
c00274ba:	eb c4                	jmp    c0027480 <__divdi3+0x58>
c00274bc:	39 eb                	cmp    ebx,ebp
c00274be:	77 3c                	ja     c00274fc <__divdi3+0xd4>
c00274c0:	0f bd f3             	bsr    esi,ebx
c00274c3:	83 f6 1f             	xor    esi,0x1f
c00274c6:	75 40                	jne    c0027508 <__divdi3+0xe0>
c00274c8:	39 eb                	cmp    ebx,ebp
c00274ca:	72 09                	jb     c00274d5 <__divdi3+0xad>
c00274cc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00274cf:	0f 87 97 00 00 00    	ja     c002756c <__divdi3+0x144>
c00274d5:	b9 01 00 00 00       	mov    ecx,0x1
c00274da:	eb a4                	jmp    c0027480 <__divdi3+0x58>
c00274dc:	f7 d9                	neg    ecx
c00274de:	83 d3 00             	adc    ebx,0x0
c00274e1:	f7 db                	neg    ebx
c00274e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00274e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00274ea:	89 dd                	mov    ebp,ebx
c00274ec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00274f4:	e9 5f ff ff ff       	jmp    c0027458 <__divdi3+0x30>
c00274f9:	8d 76 00             	lea    esi,[esi+0x0]
c00274fc:	31 f6                	xor    esi,esi
c00274fe:	31 c9                	xor    ecx,ecx
c0027500:	e9 7b ff ff ff       	jmp    c0027480 <__divdi3+0x58>
c0027505:	8d 76 00             	lea    esi,[esi+0x0]
c0027508:	b8 20 00 00 00       	mov    eax,0x20
c002750d:	29 f0                	sub    eax,esi
c002750f:	89 f1                	mov    ecx,esi
c0027511:	d3 e3                	shl    ebx,cl
c0027513:	89 fa                	mov    edx,edi
c0027515:	88 c1                	mov    cl,al
c0027517:	d3 ea                	shr    edx,cl
c0027519:	09 da                	or     edx,ebx
c002751b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002751f:	89 f1                	mov    ecx,esi
c0027521:	d3 e7                	shl    edi,cl
c0027523:	89 eb                	mov    ebx,ebp
c0027525:	88 c1                	mov    cl,al
c0027527:	d3 eb                	shr    ebx,cl
c0027529:	89 f1                	mov    ecx,esi
c002752b:	d3 e5                	shl    ebp,cl
c002752d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027530:	88 c1                	mov    cl,al
c0027532:	d3 ea                	shr    edx,cl
c0027534:	09 d5                	or     ebp,edx
c0027536:	89 e8                	mov    eax,ebp
c0027538:	89 da                	mov    edx,ebx
c002753a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002753e:	89 d3                	mov    ebx,edx
c0027540:	89 c5                	mov    ebp,eax
c0027542:	f7 e7                	mul    edi
c0027544:	39 d3                	cmp    ebx,edx
c0027546:	72 18                	jb     c0027560 <__divdi3+0x138>
c0027548:	74 0a                	je     c0027554 <__divdi3+0x12c>
c002754a:	89 e9                	mov    ecx,ebp
c002754c:	31 f6                	xor    esi,esi
c002754e:	e9 2d ff ff ff       	jmp    c0027480 <__divdi3+0x58>
c0027553:	90                   	nop
c0027554:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027557:	89 f1                	mov    ecx,esi
c0027559:	d3 e7                	shl    edi,cl
c002755b:	39 c7                	cmp    edi,eax
c002755d:	73 eb                	jae    c002754a <__divdi3+0x122>
c002755f:	90                   	nop
c0027560:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027563:	31 f6                	xor    esi,esi
c0027565:	e9 16 ff ff ff       	jmp    c0027480 <__divdi3+0x58>
c002756a:	66 90                	xchg   ax,ax
c002756c:	31 c9                	xor    ecx,ecx
c002756e:	e9 0d ff ff ff       	jmp    c0027480 <__divdi3+0x58>
c0027573:	90                   	nop

c0027574 <__moddi3>:
c0027574:	55                   	push   ebp
c0027575:	57                   	push   edi
c0027576:	56                   	push   esi
c0027577:	53                   	push   ebx
c0027578:	83 ec 2c             	sub    esp,0x2c
c002757b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002757f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027583:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027587:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002758b:	85 db                	test   ebx,ebx
c002758d:	0f 88 85 00 00 00    	js     c0027618 <__moddi3+0xa4>
c0027593:	89 de                	mov    esi,ebx
c0027595:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002759d:	89 d7                	mov    edi,edx
c002759f:	85 d2                	test   edx,edx
c00275a1:	79 09                	jns    c00275ac <__moddi3+0x38>
c00275a3:	f7 d8                	neg    eax
c00275a5:	83 d2 00             	adc    edx,0x0
c00275a8:	f7 da                	neg    edx
c00275aa:	89 d7                	mov    edi,edx
c00275ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00275b0:	89 cd                	mov    ebp,ecx
c00275b2:	85 ff                	test   edi,edi
c00275b4:	75 52                	jne    c0027608 <__moddi3+0x94>
c00275b6:	89 c3                	mov    ebx,eax
c00275b8:	39 f0                	cmp    eax,esi
c00275ba:	76 24                	jbe    c00275e0 <__moddi3+0x6c>
c00275bc:	89 c8                	mov    eax,ecx
c00275be:	89 f2                	mov    edx,esi
c00275c0:	f7 f3                	div    ebx
c00275c2:	89 d6                	mov    esi,edx
c00275c4:	89 f0                	mov    eax,esi
c00275c6:	31 d2                	xor    edx,edx
c00275c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00275cc:	85 c9                	test   ecx,ecx
c00275ce:	74 07                	je     c00275d7 <__moddi3+0x63>
c00275d0:	f7 d8                	neg    eax
c00275d2:	83 d2 00             	adc    edx,0x0
c00275d5:	f7 da                	neg    edx
c00275d7:	83 c4 2c             	add    esp,0x2c
c00275da:	5b                   	pop    ebx
c00275db:	5e                   	pop    esi
c00275dc:	5f                   	pop    edi
c00275dd:	5d                   	pop    ebp
c00275de:	c3                   	ret    
c00275df:	90                   	nop
c00275e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00275e4:	85 db                	test   ebx,ebx
c00275e6:	75 0d                	jne    c00275f5 <__moddi3+0x81>
c00275e8:	b8 01 00 00 00       	mov    eax,0x1
c00275ed:	31 d2                	xor    edx,edx
c00275ef:	f7 f7                	div    edi
c00275f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00275f5:	89 f0                	mov    eax,esi
c00275f7:	31 d2                	xor    edx,edx
c00275f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00275fd:	f7 f7                	div    edi
c00275ff:	89 e8                	mov    eax,ebp
c0027601:	f7 f7                	div    edi
c0027603:	89 d6                	mov    esi,edx
c0027605:	eb bd                	jmp    c00275c4 <__moddi3+0x50>
c0027607:	90                   	nop
c0027608:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002760c:	39 f7                	cmp    edi,esi
c002760e:	76 20                	jbe    c0027630 <__moddi3+0xbc>
c0027610:	89 c8                	mov    eax,ecx
c0027612:	89 f2                	mov    edx,esi
c0027614:	eb b2                	jmp    c00275c8 <__moddi3+0x54>
c0027616:	66 90                	xchg   ax,ax
c0027618:	f7 d9                	neg    ecx
c002761a:	83 d3 00             	adc    ebx,0x0
c002761d:	f7 db                	neg    ebx
c002761f:	89 de                	mov    esi,ebx
c0027621:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027629:	e9 6f ff ff ff       	jmp    c002759d <__moddi3+0x29>
c002762e:	66 90                	xchg   ax,ax
c0027630:	0f bd c7             	bsr    eax,edi
c0027633:	83 f0 1f             	xor    eax,0x1f
c0027636:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002763a:	75 24                	jne    c0027660 <__moddi3+0xec>
c002763c:	39 f7                	cmp    edi,esi
c002763e:	72 06                	jb     c0027646 <__moddi3+0xd2>
c0027640:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027644:	77 0c                	ja     c0027652 <__moddi3+0xde>
c0027646:	89 e9                	mov    ecx,ebp
c0027648:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002764c:	19 fe                	sbb    esi,edi
c002764e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027656:	89 f2                	mov    edx,esi
c0027658:	e9 6b ff ff ff       	jmp    c00275c8 <__moddi3+0x54>
c002765d:	8d 76 00             	lea    esi,[esi+0x0]
c0027660:	b8 20 00 00 00       	mov    eax,0x20
c0027665:	89 c2                	mov    edx,eax
c0027667:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002766b:	29 da                	sub    edx,ebx
c002766d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027671:	88 d9                	mov    cl,bl
c0027673:	d3 e7                	shl    edi,cl
c0027675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027679:	88 d1                	mov    cl,dl
c002767b:	d3 e8                	shr    eax,cl
c002767d:	09 c7                	or     edi,eax
c002767f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027683:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027687:	89 d8                	mov    eax,ebx
c0027689:	88 d9                	mov    cl,bl
c002768b:	d3 e7                	shl    edi,cl
c002768d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027691:	89 f3                	mov    ebx,esi
c0027693:	88 d1                	mov    cl,dl
c0027695:	d3 eb                	shr    ebx,cl
c0027697:	89 c7                	mov    edi,eax
c0027699:	88 c1                	mov    cl,al
c002769b:	d3 e6                	shl    esi,cl
c002769d:	89 e8                	mov    eax,ebp
c002769f:	88 d1                	mov    cl,dl
c00276a1:	d3 e8                	shr    eax,cl
c00276a3:	09 f0                	or     eax,esi
c00276a5:	89 f9                	mov    ecx,edi
c00276a7:	d3 e5                	shl    ebp,cl
c00276a9:	89 da                	mov    edx,ebx
c00276ab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00276af:	89 d3                	mov    ebx,edx
c00276b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00276b5:	89 c6                	mov    esi,eax
c00276b7:	89 d1                	mov    ecx,edx
c00276b9:	39 d3                	cmp    ebx,edx
c00276bb:	72 27                	jb     c00276e4 <__moddi3+0x170>
c00276bd:	74 21                	je     c00276e0 <__moddi3+0x16c>
c00276bf:	29 f5                	sub    ebp,esi
c00276c1:	19 cb                	sbb    ebx,ecx
c00276c3:	89 de                	mov    esi,ebx
c00276c5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00276c9:	d3 e6                	shl    esi,cl
c00276cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00276cf:	89 f9                	mov    ecx,edi
c00276d1:	d3 ed                	shr    ebp,cl
c00276d3:	09 ee                	or     esi,ebp
c00276d5:	89 f0                	mov    eax,esi
c00276d7:	d3 eb                	shr    ebx,cl
c00276d9:	89 da                	mov    edx,ebx
c00276db:	e9 e8 fe ff ff       	jmp    c00275c8 <__moddi3+0x54>
c00276e0:	39 c5                	cmp    ebp,eax
c00276e2:	73 db                	jae    c00276bf <__moddi3+0x14b>
c00276e4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00276e8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00276ec:	89 d1                	mov    ecx,edx
c00276ee:	89 c6                	mov    esi,eax
c00276f0:	eb cd                	jmp    c00276bf <__moddi3+0x14b>
c00276f2:	66 90                	xchg   ax,ax

c00276f4 <__udivdi3>:
c00276f4:	55                   	push   ebp
c00276f5:	57                   	push   edi
c00276f6:	56                   	push   esi
c00276f7:	53                   	push   ebx
c00276f8:	83 ec 1c             	sub    esp,0x1c
c00276fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00276ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027703:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027707:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002770b:	85 d2                	test   edx,edx
c002770d:	75 41                	jne    c0027750 <__udivdi3+0x5c>
c002770f:	39 f7                	cmp    edi,esi
c0027711:	76 15                	jbe    c0027728 <__udivdi3+0x34>
c0027713:	89 e8                	mov    eax,ebp
c0027715:	89 f2                	mov    edx,esi
c0027717:	f7 f7                	div    edi
c0027719:	31 db                	xor    ebx,ebx
c002771b:	89 da                	mov    edx,ebx
c002771d:	83 c4 1c             	add    esp,0x1c
c0027720:	5b                   	pop    ebx
c0027721:	5e                   	pop    esi
c0027722:	5f                   	pop    edi
c0027723:	5d                   	pop    ebp
c0027724:	c3                   	ret    
c0027725:	8d 76 00             	lea    esi,[esi+0x0]
c0027728:	89 f9                	mov    ecx,edi
c002772a:	85 ff                	test   edi,edi
c002772c:	75 0b                	jne    c0027739 <__udivdi3+0x45>
c002772e:	b8 01 00 00 00       	mov    eax,0x1
c0027733:	31 d2                	xor    edx,edx
c0027735:	f7 f7                	div    edi
c0027737:	89 c1                	mov    ecx,eax
c0027739:	31 d2                	xor    edx,edx
c002773b:	89 f0                	mov    eax,esi
c002773d:	f7 f1                	div    ecx
c002773f:	89 c3                	mov    ebx,eax
c0027741:	89 e8                	mov    eax,ebp
c0027743:	f7 f1                	div    ecx
c0027745:	89 da                	mov    edx,ebx
c0027747:	83 c4 1c             	add    esp,0x1c
c002774a:	5b                   	pop    ebx
c002774b:	5e                   	pop    esi
c002774c:	5f                   	pop    edi
c002774d:	5d                   	pop    ebp
c002774e:	c3                   	ret    
c002774f:	90                   	nop
c0027750:	39 f2                	cmp    edx,esi
c0027752:	77 1c                	ja     c0027770 <__udivdi3+0x7c>
c0027754:	0f bd da             	bsr    ebx,edx
c0027757:	83 f3 1f             	xor    ebx,0x1f
c002775a:	75 24                	jne    c0027780 <__udivdi3+0x8c>
c002775c:	39 f2                	cmp    edx,esi
c002775e:	72 08                	jb     c0027768 <__udivdi3+0x74>
c0027760:	39 ef                	cmp    edi,ebp
c0027762:	0f 87 84 00 00 00    	ja     c00277ec <__udivdi3+0xf8>
c0027768:	b8 01 00 00 00       	mov    eax,0x1
c002776d:	eb ac                	jmp    c002771b <__udivdi3+0x27>
c002776f:	90                   	nop
c0027770:	31 db                	xor    ebx,ebx
c0027772:	31 c0                	xor    eax,eax
c0027774:	89 da                	mov    edx,ebx
c0027776:	83 c4 1c             	add    esp,0x1c
c0027779:	5b                   	pop    ebx
c002777a:	5e                   	pop    esi
c002777b:	5f                   	pop    edi
c002777c:	5d                   	pop    ebp
c002777d:	c3                   	ret    
c002777e:	66 90                	xchg   ax,ax
c0027780:	b8 20 00 00 00       	mov    eax,0x20
c0027785:	29 d8                	sub    eax,ebx
c0027787:	88 d9                	mov    cl,bl
c0027789:	d3 e2                	shl    edx,cl
c002778b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002778f:	89 fa                	mov    edx,edi
c0027791:	88 c1                	mov    cl,al
c0027793:	d3 ea                	shr    edx,cl
c0027795:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027799:	09 d1                	or     ecx,edx
c002779b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002779f:	88 d9                	mov    cl,bl
c00277a1:	d3 e7                	shl    edi,cl
c00277a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00277a7:	89 f7                	mov    edi,esi
c00277a9:	88 c1                	mov    cl,al
c00277ab:	d3 ef                	shr    edi,cl
c00277ad:	88 d9                	mov    cl,bl
c00277af:	d3 e6                	shl    esi,cl
c00277b1:	89 ea                	mov    edx,ebp
c00277b3:	88 c1                	mov    cl,al
c00277b5:	d3 ea                	shr    edx,cl
c00277b7:	09 d6                	or     esi,edx
c00277b9:	89 f0                	mov    eax,esi
c00277bb:	89 fa                	mov    edx,edi
c00277bd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00277c1:	89 d7                	mov    edi,edx
c00277c3:	89 c6                	mov    esi,eax
c00277c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00277c9:	39 d7                	cmp    edi,edx
c00277cb:	72 13                	jb     c00277e0 <__udivdi3+0xec>
c00277cd:	74 09                	je     c00277d8 <__udivdi3+0xe4>
c00277cf:	89 f0                	mov    eax,esi
c00277d1:	31 db                	xor    ebx,ebx
c00277d3:	e9 43 ff ff ff       	jmp    c002771b <__udivdi3+0x27>
c00277d8:	88 d9                	mov    cl,bl
c00277da:	d3 e5                	shl    ebp,cl
c00277dc:	39 c5                	cmp    ebp,eax
c00277de:	73 ef                	jae    c00277cf <__udivdi3+0xdb>
c00277e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00277e3:	31 db                	xor    ebx,ebx
c00277e5:	e9 31 ff ff ff       	jmp    c002771b <__udivdi3+0x27>
c00277ea:	66 90                	xchg   ax,ax
c00277ec:	31 c0                	xor    eax,eax
c00277ee:	e9 28 ff ff ff       	jmp    c002771b <__udivdi3+0x27>
c00277f3:	90                   	nop

c00277f4 <__umoddi3>:
c00277f4:	55                   	push   ebp
c00277f5:	57                   	push   edi
c00277f6:	56                   	push   esi
c00277f7:	53                   	push   ebx
c00277f8:	83 ec 1c             	sub    esp,0x1c
c00277fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00277ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027803:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027807:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002780b:	89 da                	mov    edx,ebx
c002780d:	85 c0                	test   eax,eax
c002780f:	75 37                	jne    c0027848 <__umoddi3+0x54>
c0027811:	39 df                	cmp    edi,ebx
c0027813:	76 13                	jbe    c0027828 <__umoddi3+0x34>
c0027815:	89 f0                	mov    eax,esi
c0027817:	f7 f7                	div    edi
c0027819:	89 d0                	mov    eax,edx
c002781b:	31 d2                	xor    edx,edx
c002781d:	83 c4 1c             	add    esp,0x1c
c0027820:	5b                   	pop    ebx
c0027821:	5e                   	pop    esi
c0027822:	5f                   	pop    edi
c0027823:	5d                   	pop    ebp
c0027824:	c3                   	ret    
c0027825:	8d 76 00             	lea    esi,[esi+0x0]
c0027828:	89 fd                	mov    ebp,edi
c002782a:	85 ff                	test   edi,edi
c002782c:	75 0b                	jne    c0027839 <__umoddi3+0x45>
c002782e:	b8 01 00 00 00       	mov    eax,0x1
c0027833:	31 d2                	xor    edx,edx
c0027835:	f7 f7                	div    edi
c0027837:	89 c5                	mov    ebp,eax
c0027839:	89 d8                	mov    eax,ebx
c002783b:	31 d2                	xor    edx,edx
c002783d:	f7 f5                	div    ebp
c002783f:	89 f0                	mov    eax,esi
c0027841:	f7 f5                	div    ebp
c0027843:	89 d0                	mov    eax,edx
c0027845:	eb d4                	jmp    c002781b <__umoddi3+0x27>
c0027847:	90                   	nop
c0027848:	89 f1                	mov    ecx,esi
c002784a:	39 d8                	cmp    eax,ebx
c002784c:	76 0a                	jbe    c0027858 <__umoddi3+0x64>
c002784e:	89 f0                	mov    eax,esi
c0027850:	83 c4 1c             	add    esp,0x1c
c0027853:	5b                   	pop    ebx
c0027854:	5e                   	pop    esi
c0027855:	5f                   	pop    edi
c0027856:	5d                   	pop    ebp
c0027857:	c3                   	ret    
c0027858:	0f bd e8             	bsr    ebp,eax
c002785b:	83 f5 1f             	xor    ebp,0x1f
c002785e:	75 1c                	jne    c002787c <__umoddi3+0x88>
c0027860:	39 d8                	cmp    eax,ebx
c0027862:	72 04                	jb     c0027868 <__umoddi3+0x74>
c0027864:	39 f7                	cmp    edi,esi
c0027866:	77 08                	ja     c0027870 <__umoddi3+0x7c>
c0027868:	89 da                	mov    edx,ebx
c002786a:	29 fe                	sub    esi,edi
c002786c:	19 c2                	sbb    edx,eax
c002786e:	89 f1                	mov    ecx,esi
c0027870:	89 c8                	mov    eax,ecx
c0027872:	83 c4 1c             	add    esp,0x1c
c0027875:	5b                   	pop    ebx
c0027876:	5e                   	pop    esi
c0027877:	5f                   	pop    edi
c0027878:	5d                   	pop    ebp
c0027879:	c3                   	ret    
c002787a:	66 90                	xchg   ax,ax
c002787c:	ba 20 00 00 00       	mov    edx,0x20
c0027881:	29 ea                	sub    edx,ebp
c0027883:	89 e9                	mov    ecx,ebp
c0027885:	d3 e0                	shl    eax,cl
c0027887:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002788b:	89 f8                	mov    eax,edi
c002788d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027891:	88 d1                	mov    cl,dl
c0027893:	d3 e8                	shr    eax,cl
c0027895:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027899:	09 c1                	or     ecx,eax
c002789b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002789f:	89 e9                	mov    ecx,ebp
c00278a1:	d3 e7                	shl    edi,cl
c00278a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00278a7:	89 d8                	mov    eax,ebx
c00278a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00278ad:	88 d1                	mov    cl,dl
c00278af:	d3 e8                	shr    eax,cl
c00278b1:	89 c7                	mov    edi,eax
c00278b3:	89 e9                	mov    ecx,ebp
c00278b5:	d3 e3                	shl    ebx,cl
c00278b7:	89 f0                	mov    eax,esi
c00278b9:	88 d1                	mov    cl,dl
c00278bb:	d3 e8                	shr    eax,cl
c00278bd:	09 d8                	or     eax,ebx
c00278bf:	89 e9                	mov    ecx,ebp
c00278c1:	d3 e6                	shl    esi,cl
c00278c3:	89 f3                	mov    ebx,esi
c00278c5:	89 fa                	mov    edx,edi
c00278c7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00278cb:	89 d1                	mov    ecx,edx
c00278cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00278d1:	89 c6                	mov    esi,eax
c00278d3:	89 d7                	mov    edi,edx
c00278d5:	39 d1                	cmp    ecx,edx
c00278d7:	72 27                	jb     c0027900 <__umoddi3+0x10c>
c00278d9:	74 21                	je     c00278fc <__umoddi3+0x108>
c00278db:	89 ca                	mov    edx,ecx
c00278dd:	29 f3                	sub    ebx,esi
c00278df:	19 fa                	sbb    edx,edi
c00278e1:	89 d0                	mov    eax,edx
c00278e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00278e7:	d3 e0                	shl    eax,cl
c00278e9:	89 e9                	mov    ecx,ebp
c00278eb:	d3 eb                	shr    ebx,cl
c00278ed:	09 d8                	or     eax,ebx
c00278ef:	d3 ea                	shr    edx,cl
c00278f1:	83 c4 1c             	add    esp,0x1c
c00278f4:	5b                   	pop    ebx
c00278f5:	5e                   	pop    esi
c00278f6:	5f                   	pop    edi
c00278f7:	5d                   	pop    ebp
c00278f8:	c3                   	ret    
c00278f9:	8d 76 00             	lea    esi,[esi+0x0]
c00278fc:	39 c3                	cmp    ebx,eax
c00278fe:	73 db                	jae    c00278db <__umoddi3+0xe7>
c0027900:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027904:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027908:	89 d7                	mov    edi,edx
c002790a:	89 c6                	mov    esi,eax
c002790c:	eb cd                	jmp    c00278db <__umoddi3+0xe7>

c002790e <__addsf3>:
c002790e:	55                   	push   ebp
c002790f:	89 e5                	mov    ebp,esp
c0027911:	57                   	push   edi
c0027912:	56                   	push   esi
c0027913:	53                   	push   ebx
c0027914:	83 ec 08             	sub    esp,0x8
c0027917:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002791a:	89 fa                	mov    edx,edi
c002791c:	89 f8                	mov    eax,edi
c002791e:	c1 f8 17             	sar    eax,0x17
c0027921:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027924:	c1 e2 08             	shl    edx,0x8
c0027927:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002792d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027930:	89 de                	mov    esi,ebx
c0027932:	c1 fe 17             	sar    esi,0x17
c0027935:	c1 e3 08             	shl    ebx,0x8
c0027938:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002793e:	31 f0                	xor    eax,esi
c0027940:	0f 88 3b 01 00 00    	js     c0027a81 <__addsf3+0x173>
c0027946:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027949:	29 f1                	sub    ecx,esi
c002794b:	85 c9                	test   ecx,ecx
c002794d:	7e 54                	jle    c00279a3 <__addsf3+0x95>
c002794f:	89 f0                	mov    eax,esi
c0027951:	84 c0                	test   al,al
c0027953:	75 10                	jne    c0027965 <__addsf3+0x57>
c0027955:	85 db                	test   ebx,ebx
c0027957:	0f 84 aa 02 00 00    	je     c0027c07 <__addsf3+0x2f9>
c002795d:	49                   	dec    ecx
c002795e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027961:	74 38                	je     c002799b <__addsf3+0x8d>
c0027963:	eb 13                	jmp    c0027978 <__addsf3+0x6a>
c0027965:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027968:	f7 d0                	not    eax
c002796a:	84 c0                	test   al,al
c002796c:	0f 84 95 02 00 00    	je     c0027c07 <__addsf3+0x2f9>
c0027972:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027978:	83 f9 1f             	cmp    ecx,0x1f
c002797b:	0f 8f 86 02 00 00    	jg     c0027c07 <__addsf3+0x2f9>
c0027981:	89 de                	mov    esi,ebx
c0027983:	d3 ee                	shr    esi,cl
c0027985:	b8 20 00 00 00       	mov    eax,0x20
c002798a:	29 c8                	sub    eax,ecx
c002798c:	89 c1                	mov    ecx,eax
c002798e:	d3 e3                	shl    ebx,cl
c0027990:	31 c0                	xor    eax,eax
c0027992:	85 db                	test   ebx,ebx
c0027994:	0f 95 c0             	setne  al
c0027997:	09 f0                	or     eax,esi
c0027999:	01 d0                	add    eax,edx
c002799b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002799e:	e9 b6 00 00 00       	jmp    c0027a59 <__addsf3+0x14b>
c00279a3:	74 5c                	je     c0027a01 <__addsf3+0xf3>
c00279a5:	89 f1                	mov    ecx,esi
c00279a7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00279aa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00279ad:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00279b1:	75 14                	jne    c00279c7 <__addsf3+0xb9>
c00279b3:	85 d2                	test   edx,edx
c00279b5:	0f 84 4c 02 00 00    	je     c0027c07 <__addsf3+0x2f9>
c00279bb:	49                   	dec    ecx
c00279bc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00279bf:	0f 84 94 00 00 00    	je     c0027a59 <__addsf3+0x14b>
c00279c5:	eb 12                	jmp    c00279d9 <__addsf3+0xcb>
c00279c7:	89 f0                	mov    eax,esi
c00279c9:	f7 d0                	not    eax
c00279cb:	84 c0                	test   al,al
c00279cd:	0f 84 34 02 00 00    	je     c0027c07 <__addsf3+0x2f9>
c00279d3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00279d9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00279dc:	83 f9 1f             	cmp    ecx,0x1f
c00279df:	0f 8f 22 02 00 00    	jg     c0027c07 <__addsf3+0x2f9>
c00279e5:	89 d7                	mov    edi,edx
c00279e7:	d3 ef                	shr    edi,cl
c00279e9:	b8 20 00 00 00       	mov    eax,0x20
c00279ee:	29 c8                	sub    eax,ecx
c00279f0:	89 c1                	mov    ecx,eax
c00279f2:	d3 e2                	shl    edx,cl
c00279f4:	31 c0                	xor    eax,eax
c00279f6:	85 d2                	test   edx,edx
c00279f8:	0f 95 c0             	setne  al
c00279fb:	09 f8                	or     eax,edi
c00279fd:	01 d8                	add    eax,ebx
c00279ff:	eb 58                	jmp    c0027a59 <__addsf3+0x14b>
c0027a01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027a04:	8d 70 01             	lea    esi,[eax+0x1]
c0027a07:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0027a0d:	75 32                	jne    c0027a41 <__addsf3+0x133>
c0027a0f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027a13:	75 1f                	jne    c0027a34 <__addsf3+0x126>
c0027a15:	85 d2                	test   edx,edx
c0027a17:	0f 84 e0 01 00 00    	je     c0027bfd <__addsf3+0x2ef>
c0027a1d:	85 db                	test   ebx,ebx
c0027a1f:	0f 84 e2 01 00 00    	je     c0027c07 <__addsf3+0x2f9>
c0027a25:	89 d0                	mov    eax,edx
c0027a27:	01 d8                	add    eax,ebx
c0027a29:	0f 89 a9 01 00 00    	jns    c0027bd8 <__addsf3+0x2ca>
c0027a2f:	e9 9d 01 00 00       	jmp    c0027bd1 <__addsf3+0x2c3>
c0027a34:	85 d2                	test   edx,edx
c0027a36:	0f 85 cb 01 00 00    	jne    c0027c07 <__addsf3+0x2f9>
c0027a3c:	e9 bc 01 00 00       	jmp    c0027bfd <__addsf3+0x2ef>
c0027a41:	31 c0                	xor    eax,eax
c0027a43:	89 f1                	mov    ecx,esi
c0027a45:	f7 d1                	not    ecx
c0027a47:	84 c9                	test   cl,cl
c0027a49:	0f 84 90 01 00 00    	je     c0027bdf <__addsf3+0x2d1>
c0027a4f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027a52:	d1 e8                	shr    eax,1
c0027a54:	e9 86 01 00 00       	jmp    c0027bdf <__addsf3+0x2d1>
c0027a59:	85 c0                	test   eax,eax
c0027a5b:	0f 89 7e 01 00 00    	jns    c0027bdf <__addsf3+0x2d1>
c0027a61:	46                   	inc    esi
c0027a62:	89 f2                	mov    edx,esi
c0027a64:	f7 d2                	not    edx
c0027a66:	84 d2                	test   dl,dl
c0027a68:	0f 84 6f 01 00 00    	je     c0027bdd <__addsf3+0x2cf>
c0027a6e:	89 c2                	mov    edx,eax
c0027a70:	83 e2 01             	and    edx,0x1
c0027a73:	d1 e8                	shr    eax,1
c0027a75:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027a7a:	09 d0                	or     eax,edx
c0027a7c:	e9 5e 01 00 00       	jmp    c0027bdf <__addsf3+0x2d1>
c0027a81:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027a85:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a88:	89 f0                	mov    eax,esi
c0027a8a:	0f b6 c0             	movzx  eax,al
c0027a8d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a90:	29 c1                	sub    ecx,eax
c0027a92:	85 c9                	test   ecx,ecx
c0027a94:	7e 55                	jle    c0027aeb <__addsf3+0x1dd>
c0027a96:	85 c0                	test   eax,eax
c0027a98:	75 11                	jne    c0027aab <__addsf3+0x19d>
c0027a9a:	85 db                	test   ebx,ebx
c0027a9c:	0f 84 65 01 00 00    	je     c0027c07 <__addsf3+0x2f9>
c0027aa2:	49                   	dec    ecx
c0027aa3:	75 19                	jne    c0027abe <__addsf3+0x1b0>
c0027aa5:	89 d0                	mov    eax,edx
c0027aa7:	29 d8                	sub    eax,ebx
c0027aa9:	eb 38                	jmp    c0027ae3 <__addsf3+0x1d5>
c0027aab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027aae:	f7 d0                	not    eax
c0027ab0:	84 c0                	test   al,al
c0027ab2:	0f 84 4f 01 00 00    	je     c0027c07 <__addsf3+0x2f9>
c0027ab8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027abe:	83 f9 1f             	cmp    ecx,0x1f
c0027ac1:	0f 8f 40 01 00 00    	jg     c0027c07 <__addsf3+0x2f9>
c0027ac7:	89 de                	mov    esi,ebx
c0027ac9:	d3 ee                	shr    esi,cl
c0027acb:	b8 20 00 00 00       	mov    eax,0x20
c0027ad0:	29 c8                	sub    eax,ecx
c0027ad2:	89 c1                	mov    ecx,eax
c0027ad4:	d3 e3                	shl    ebx,cl
c0027ad6:	31 c0                	xor    eax,eax
c0027ad8:	85 db                	test   ebx,ebx
c0027ada:	0f 95 c0             	setne  al
c0027add:	09 f0                	or     eax,esi
c0027adf:	29 c2                	sub    edx,eax
c0027ae1:	89 d0                	mov    eax,edx
c0027ae3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027ae6:	e9 af 00 00 00       	jmp    c0027b9a <__addsf3+0x28c>
c0027aeb:	74 5c                	je     c0027b49 <__addsf3+0x23b>
c0027aed:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027af0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027af3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027af7:	75 14                	jne    c0027b0d <__addsf3+0x1ff>
c0027af9:	85 d2                	test   edx,edx
c0027afb:	0f 84 06 01 00 00    	je     c0027c07 <__addsf3+0x2f9>
c0027b01:	48                   	dec    eax
c0027b02:	75 1b                	jne    c0027b1f <__addsf3+0x211>
c0027b04:	89 d8                	mov    eax,ebx
c0027b06:	29 d0                	sub    eax,edx
c0027b08:	e9 8d 00 00 00       	jmp    c0027b9a <__addsf3+0x28c>
c0027b0d:	89 f1                	mov    ecx,esi
c0027b0f:	f7 d1                	not    ecx
c0027b11:	84 c9                	test   cl,cl
c0027b13:	0f 84 ee 00 00 00    	je     c0027c07 <__addsf3+0x2f9>
c0027b19:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027b1f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027b22:	83 f8 1f             	cmp    eax,0x1f
c0027b25:	0f 8f dc 00 00 00    	jg     c0027c07 <__addsf3+0x2f9>
c0027b2b:	89 d7                	mov    edi,edx
c0027b2d:	88 c1                	mov    cl,al
c0027b2f:	d3 ef                	shr    edi,cl
c0027b31:	b9 20 00 00 00       	mov    ecx,0x20
c0027b36:	29 c1                	sub    ecx,eax
c0027b38:	d3 e2                	shl    edx,cl
c0027b3a:	31 c0                	xor    eax,eax
c0027b3c:	85 d2                	test   edx,edx
c0027b3e:	0f 95 c0             	setne  al
c0027b41:	09 f8                	or     eax,edi
c0027b43:	29 c3                	sub    ebx,eax
c0027b45:	89 d8                	mov    eax,ebx
c0027b47:	eb 51                	jmp    c0027b9a <__addsf3+0x28c>
c0027b49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027b4c:	40                   	inc    eax
c0027b4d:	a8 fe                	test   al,0xfe
c0027b4f:	75 3d                	jne    c0027b8e <__addsf3+0x280>
c0027b51:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027b55:	0f 85 a7 00 00 00    	jne    c0027c02 <__addsf3+0x2f4>
c0027b5b:	85 d2                	test   edx,edx
c0027b5d:	75 12                	jne    c0027b71 <__addsf3+0x263>
c0027b5f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027b62:	85 db                	test   ebx,ebx
c0027b64:	0f 85 9d 00 00 00    	jne    c0027c07 <__addsf3+0x2f9>
c0027b6a:	31 ff                	xor    edi,edi
c0027b6c:	e9 96 00 00 00       	jmp    c0027c07 <__addsf3+0x2f9>
c0027b71:	85 db                	test   ebx,ebx
c0027b73:	0f 84 8e 00 00 00    	je     c0027c07 <__addsf3+0x2f9>
c0027b79:	89 d0                	mov    eax,edx
c0027b7b:	29 d8                	sub    eax,ebx
c0027b7d:	79 06                	jns    c0027b85 <__addsf3+0x277>
c0027b7f:	89 d8                	mov    eax,ebx
c0027b81:	29 d0                	sub    eax,edx
c0027b83:	eb 5a                	jmp    c0027bdf <__addsf3+0x2d1>
c0027b85:	bf 00 00 00 00       	mov    edi,0x0
c0027b8a:	74 7b                	je     c0027c07 <__addsf3+0x2f9>
c0027b8c:	eb 4a                	jmp    c0027bd8 <__addsf3+0x2ca>
c0027b8e:	89 d0                	mov    eax,edx
c0027b90:	29 d8                	sub    eax,ebx
c0027b92:	79 12                	jns    c0027ba6 <__addsf3+0x298>
c0027b94:	89 d8                	mov    eax,ebx
c0027b96:	29 d0                	sub    eax,edx
c0027b98:	eb 09                	jmp    c0027ba3 <__addsf3+0x295>
c0027b9a:	85 c0                	test   eax,eax
c0027b9c:	79 41                	jns    c0027bdf <__addsf3+0x2d1>
c0027b9e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ba3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027ba6:	31 f6                	xor    esi,esi
c0027ba8:	85 c0                	test   eax,eax
c0027baa:	74 33                	je     c0027bdf <__addsf3+0x2d1>
c0027bac:	0f bd c8             	bsr    ecx,eax
c0027baf:	83 f1 1f             	xor    ecx,0x1f
c0027bb2:	d3 e0                	shl    eax,cl
c0027bb4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027bb8:	39 ca                	cmp    edx,ecx
c0027bba:	7f 10                	jg     c0027bcc <__addsf3+0x2be>
c0027bbc:	29 d1                	sub    ecx,edx
c0027bbe:	41                   	inc    ecx
c0027bbf:	d3 e8                	shr    eax,cl
c0027bc1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027bc4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0027bca:	eb 13                	jmp    c0027bdf <__addsf3+0x2d1>
c0027bcc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027bcf:	29 ce                	sub    esi,ecx
c0027bd1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bd6:	eb 07                	jmp    c0027bdf <__addsf3+0x2d1>
c0027bd8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027bdb:	eb 02                	jmp    c0027bdf <__addsf3+0x2d1>
c0027bdd:	31 c0                	xor    eax,eax
c0027bdf:	89 c2                	mov    edx,eax
c0027be1:	c1 ea 08             	shr    edx,0x8
c0027be4:	a8 7f                	test   al,0x7f
c0027be6:	0f 95 c1             	setne  cl
c0027be9:	09 d1                	or     ecx,edx
c0027beb:	83 e1 01             	and    ecx,0x1
c0027bee:	c1 e8 07             	shr    eax,0x7
c0027bf1:	21 c8                	and    eax,ecx
c0027bf3:	c1 e6 17             	shl    esi,0x17
c0027bf6:	09 d6                	or     esi,edx
c0027bf8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0027bfb:	eb 0a                	jmp    c0027c07 <__addsf3+0x2f9>
c0027bfd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027c00:	eb 05                	jmp    c0027c07 <__addsf3+0x2f9>
c0027c02:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027c07:	89 f8                	mov    eax,edi
c0027c09:	5a                   	pop    edx
c0027c0a:	59                   	pop    ecx
c0027c0b:	5b                   	pop    ebx
c0027c0c:	5e                   	pop    esi
c0027c0d:	5f                   	pop    edi
c0027c0e:	5d                   	pop    ebp
c0027c0f:	c3                   	ret    

c0027c10 <__subsf3>:
c0027c10:	55                   	push   ebp
c0027c11:	89 e5                	mov    ebp,esp
c0027c13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c16:	05 00 00 00 80       	add    eax,0x80000000
c0027c1b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0027c1e:	5d                   	pop    ebp
c0027c1f:	e9 ea fc ff ff       	jmp    c002790e <__addsf3>

c0027c24 <__negsf2>:
c0027c24:	55                   	push   ebp
c0027c25:	89 e5                	mov    ebp,esp
c0027c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c2a:	05 00 00 00 80       	add    eax,0x80000000
c0027c2f:	5d                   	pop    ebp
c0027c30:	c3                   	ret    

c0027c31 <__mulsf3>:
c0027c31:	55                   	push   ebp
c0027c32:	89 e5                	mov    ebp,esp
c0027c34:	57                   	push   edi
c0027c35:	56                   	push   esi
c0027c36:	53                   	push   ebx
c0027c37:	83 ec 1c             	sub    esp,0x1c
c0027c3a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0027c3d:	89 f0                	mov    eax,esi
c0027c3f:	89 f1                	mov    ecx,esi
c0027c41:	c1 f9 17             	sar    ecx,0x17
c0027c44:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027c47:	c1 e0 08             	shl    eax,0x8
c0027c4a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c4f:	89 c1                	mov    ecx,eax
c0027c51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c54:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c57:	89 c7                	mov    edi,eax
c0027c59:	c1 ff 17             	sar    edi,0x17
c0027c5c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027c60:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027c63:	89 f8                	mov    eax,edi
c0027c65:	0f b6 c0             	movzx  eax,al
c0027c68:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027c6b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027c6f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027c72:	42                   	inc    edx
c0027c73:	80 e2 fe             	and    dl,0xfe
c0027c76:	75 7b                	jne    c0027cf3 <__mulsf3+0xc2>
c0027c78:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027c7c:	74 54                	je     c0027cd2 <__mulsf3+0xa1>
c0027c7e:	85 c9                	test   ecx,ecx
c0027c80:	0f 85 64 01 00 00    	jne    c0027dea <__mulsf3+0x1b9>
c0027c86:	8d 57 01             	lea    edx,[edi+0x1]
c0027c89:	80 e2 fe             	and    dl,0xfe
c0027c8c:	75 1f                	jne    c0027cad <__mulsf3+0x7c>
c0027c8e:	85 c0                	test   eax,eax
c0027c90:	b8 00 00 00 00       	mov    eax,0x0
c0027c95:	74 29                	je     c0027cc0 <__mulsf3+0x8f>
c0027c97:	53                   	push   ebx
c0027c98:	53                   	push   ebx
c0027c99:	50                   	push   eax
c0027c9a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c9d:	e8 96 05 00 00       	call   c0028238 <__nesf2>
c0027ca2:	83 c4 10             	add    esp,0x10
c0027ca5:	85 c0                	test   eax,eax
c0027ca7:	0f 85 3a 01 00 00    	jne    c0027de7 <__mulsf3+0x1b6>
c0027cad:	85 ff                	test   edi,edi
c0027caf:	0f 89 35 01 00 00    	jns    c0027dea <__mulsf3+0x1b9>
c0027cb5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027cbb:	e9 2a 01 00 00       	jmp    c0027dea <__mulsf3+0x1b9>
c0027cc0:	51                   	push   ecx
c0027cc1:	51                   	push   ecx
c0027cc2:	50                   	push   eax
c0027cc3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cc6:	e8 6d 05 00 00       	call   c0028238 <__nesf2>
c0027ccb:	83 c4 10             	add    esp,0x10
c0027cce:	85 c0                	test   eax,eax
c0027cd0:	eb 15                	jmp    c0027ce7 <__mulsf3+0xb6>
c0027cd2:	85 c9                	test   ecx,ecx
c0027cd4:	74 0b                	je     c0027ce1 <__mulsf3+0xb0>
c0027cd6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027cd9:	01 c9                	add    ecx,ecx
c0027cdb:	78 16                	js     c0027cf3 <__mulsf3+0xc2>
c0027cdd:	89 d3                	mov    ebx,edx
c0027cdf:	eb f5                	jmp    c0027cd6 <__mulsf3+0xa5>
c0027ce1:	89 f8                	mov    eax,edi
c0027ce3:	f7 d0                	not    eax
c0027ce5:	84 c0                	test   al,al
c0027ce7:	75 c4                	jne    c0027cad <__mulsf3+0x7c>
c0027ce9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027cee:	e9 f7 00 00 00       	jmp    c0027dea <__mulsf3+0x1b9>
c0027cf3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027cf6:	c1 e6 08             	shl    esi,0x8
c0027cf9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027cff:	8d 57 01             	lea    edx,[edi+0x1]
c0027d02:	80 e2 fe             	and    dl,0xfe
c0027d05:	75 63                	jne    c0027d6a <__mulsf3+0x139>
c0027d07:	85 c0                	test   eax,eax
c0027d09:	74 2f                	je     c0027d3a <__mulsf3+0x109>
c0027d0b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027d0f:	0f 89 d2 00 00 00    	jns    c0027de7 <__mulsf3+0x1b6>
c0027d15:	52                   	push   edx
c0027d16:	52                   	push   edx
c0027d17:	6a 00                	push   0x0
c0027d19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d1c:	e8 dc 04 00 00       	call   c00281fd <__eqsf2>
c0027d21:	83 c4 10             	add    esp,0x10
c0027d24:	85 c0                	test   eax,eax
c0027d26:	0f 85 bb 00 00 00    	jne    c0027de7 <__mulsf3+0x1b6>
c0027d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027d2f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027d35:	e9 b0 00 00 00       	jmp    c0027dea <__mulsf3+0x1b9>
c0027d3a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027d3d:	50                   	push   eax
c0027d3e:	50                   	push   eax
c0027d3f:	6a 00                	push   0x0
c0027d41:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d44:	e8 b4 04 00 00       	call   c00281fd <__eqsf2>
c0027d49:	83 c4 10             	add    esp,0x10
c0027d4c:	85 c0                	test   eax,eax
c0027d4e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d51:	75 0c                	jne    c0027d5f <__mulsf3+0x12e>
c0027d53:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027d57:	0f 89 8a 00 00 00    	jns    c0027de7 <__mulsf3+0x1b6>
c0027d5d:	eb cd                	jmp    c0027d2c <__mulsf3+0xfb>
c0027d5f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d62:	01 f6                	add    esi,esi
c0027d64:	78 04                	js     c0027d6a <__mulsf3+0x139>
c0027d66:	89 c3                	mov    ebx,eax
c0027d68:	eb f5                	jmp    c0027d5f <__mulsf3+0x12e>
c0027d6a:	89 c8                	mov    eax,ecx
c0027d6c:	0d 00 00 00 80       	or     eax,0x80000000
c0027d71:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d77:	f7 e6                	mul    esi
c0027d79:	85 c0                	test   eax,eax
c0027d7b:	0f 95 c0             	setne  al
c0027d7e:	0f b6 c0             	movzx  eax,al
c0027d81:	09 c2                	or     edx,eax
c0027d83:	78 03                	js     c0027d88 <__mulsf3+0x157>
c0027d85:	01 d2                	add    edx,edx
c0027d87:	4b                   	dec    ebx
c0027d88:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027d8e:	7f 22                	jg     c0027db2 <__mulsf3+0x181>
c0027d90:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d96:	85 db                	test   ebx,ebx
c0027d98:	7f 23                	jg     c0027dbd <__mulsf3+0x18c>
c0027d9a:	83 fb e9             	cmp    ebx,0xffffffe9
c0027d9d:	7c 1a                	jl     c0027db9 <__mulsf3+0x188>
c0027d9f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027da5:	b9 01 00 00 00       	mov    ecx,0x1
c0027daa:	29 d9                	sub    ecx,ebx
c0027dac:	d3 ea                	shr    edx,cl
c0027dae:	31 db                	xor    ebx,ebx
c0027db0:	eb 0b                	jmp    c0027dbd <__mulsf3+0x18c>
c0027db2:	bb ff 00 00 00       	mov    ebx,0xff
c0027db7:	eb 02                	jmp    c0027dbb <__mulsf3+0x18a>
c0027db9:	31 db                	xor    ebx,ebx
c0027dbb:	31 d2                	xor    edx,edx
c0027dbd:	89 d0                	mov    eax,edx
c0027dbf:	c1 e8 08             	shr    eax,0x8
c0027dc2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027dc5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027dcb:	09 fb                	or     ebx,edi
c0027dcd:	c1 e3 17             	shl    ebx,0x17
c0027dd0:	09 c3                	or     ebx,eax
c0027dd2:	f6 c2 7f             	test   dl,0x7f
c0027dd5:	0f 95 c1             	setne  cl
c0027dd8:	09 c8                	or     eax,ecx
c0027dda:	83 e0 01             	and    eax,0x1
c0027ddd:	c1 ea 07             	shr    edx,0x7
c0027de0:	21 c2                	and    edx,eax
c0027de2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027de5:	eb 03                	jmp    c0027dea <__mulsf3+0x1b9>
c0027de7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027dea:	89 f0                	mov    eax,esi
c0027dec:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027def:	5b                   	pop    ebx
c0027df0:	5e                   	pop    esi
c0027df1:	5f                   	pop    edi
c0027df2:	5d                   	pop    ebp
c0027df3:	c3                   	ret    

c0027df4 <__divsf3>:
c0027df4:	55                   	push   ebp
c0027df5:	89 e5                	mov    ebp,esp
c0027df7:	57                   	push   edi
c0027df8:	56                   	push   esi
c0027df9:	53                   	push   ebx
c0027dfa:	83 ec 1c             	sub    esp,0x1c
c0027dfd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e00:	89 d8                	mov    eax,ebx
c0027e02:	89 d9                	mov    ecx,ebx
c0027e04:	c1 f9 17             	sar    ecx,0x17
c0027e07:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027e0a:	c1 e0 08             	shl    eax,0x8
c0027e0d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027e12:	89 c1                	mov    ecx,eax
c0027e14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027e17:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e1a:	89 c7                	mov    edi,eax
c0027e1c:	c1 ff 17             	sar    edi,0x17
c0027e1f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027e23:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027e26:	89 f8                	mov    eax,edi
c0027e28:	0f b6 c0             	movzx  eax,al
c0027e2b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e2e:	29 c6                	sub    esi,eax
c0027e30:	83 c6 7f             	add    esi,0x7f
c0027e33:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027e36:	42                   	inc    edx
c0027e37:	80 e2 fe             	and    dl,0xfe
c0027e3a:	0f 85 9c 00 00 00    	jne    c0027edc <__divsf3+0xe8>
c0027e40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e44:	74 33                	je     c0027e79 <__divsf3+0x85>
c0027e46:	85 c9                	test   ecx,ecx
c0027e48:	0f 85 c7 01 00 00    	jne    c0028015 <__divsf3+0x221>
c0027e4e:	8d 57 01             	lea    edx,[edi+0x1]
c0027e51:	80 e2 fe             	and    dl,0xfe
c0027e54:	75 2f                	jne    c0027e85 <__divsf3+0x91>
c0027e56:	85 c0                	test   eax,eax
c0027e58:	74 2b                	je     c0027e85 <__divsf3+0x91>
c0027e5a:	51                   	push   ecx
c0027e5b:	51                   	push   ecx
c0027e5c:	6a 00                	push   0x0
c0027e5e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e61:	e8 d2 03 00 00       	call   c0028238 <__nesf2>
c0027e66:	83 c4 10             	add    esp,0x10
c0027e69:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027e6c:	85 c0                	test   eax,eax
c0027e6e:	0f 85 a1 01 00 00    	jne    c0028015 <__divsf3+0x221>
c0027e74:	e9 92 01 00 00       	jmp    c002800b <__divsf3+0x217>
c0027e79:	85 c9                	test   ecx,ecx
c0027e7b:	75 1b                	jne    c0027e98 <__divsf3+0xa4>
c0027e7d:	8d 57 01             	lea    edx,[edi+0x1]
c0027e80:	80 e2 fe             	and    dl,0xfe
c0027e83:	74 1e                	je     c0027ea3 <__divsf3+0xaf>
c0027e85:	85 ff                	test   edi,edi
c0027e87:	0f 89 88 01 00 00    	jns    c0028015 <__divsf3+0x221>
c0027e8d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027e93:	e9 7d 01 00 00       	jmp    c0028015 <__divsf3+0x221>
c0027e98:	8d 56 ff             	lea    edx,[esi-0x1]
c0027e9b:	01 c9                	add    ecx,ecx
c0027e9d:	78 3d                	js     c0027edc <__divsf3+0xe8>
c0027e9f:	89 d6                	mov    esi,edx
c0027ea1:	eb f5                	jmp    c0027e98 <__divsf3+0xa4>
c0027ea3:	85 c0                	test   eax,eax
c0027ea5:	b8 00 00 00 00       	mov    eax,0x0
c0027eaa:	74 18                	je     c0027ec4 <__divsf3+0xd0>
c0027eac:	52                   	push   edx
c0027ead:	52                   	push   edx
c0027eae:	50                   	push   eax
c0027eaf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027eb2:	e8 81 03 00 00       	call   c0028238 <__nesf2>
c0027eb7:	83 c4 10             	add    esp,0x10
c0027eba:	85 c0                	test   eax,eax
c0027ebc:	0f 85 50 01 00 00    	jne    c0028012 <__divsf3+0x21e>
c0027ec2:	eb c1                	jmp    c0027e85 <__divsf3+0x91>
c0027ec4:	56                   	push   esi
c0027ec5:	56                   	push   esi
c0027ec6:	50                   	push   eax
c0027ec7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027eca:	e8 69 03 00 00       	call   c0028238 <__nesf2>
c0027ecf:	83 c4 10             	add    esp,0x10
c0027ed2:	85 c0                	test   eax,eax
c0027ed4:	0f 84 31 01 00 00    	je     c002800b <__divsf3+0x217>
c0027eda:	eb a9                	jmp    c0027e85 <__divsf3+0x91>
c0027edc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027edf:	c1 e3 08             	shl    ebx,0x8
c0027ee2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027ee8:	8d 57 01             	lea    edx,[edi+0x1]
c0027eeb:	80 e2 fe             	and    dl,0xfe
c0027eee:	75 71                	jne    c0027f61 <__divsf3+0x16d>
c0027ef0:	85 c0                	test   eax,eax
c0027ef2:	ba 00 00 00 00       	mov    edx,0x0
c0027ef7:	74 2f                	je     c0027f28 <__divsf3+0x134>
c0027ef9:	51                   	push   ecx
c0027efa:	51                   	push   ecx
c0027efb:	52                   	push   edx
c0027efc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027eff:	e8 f9 02 00 00       	call   c00281fd <__eqsf2>
c0027f04:	83 c4 10             	add    esp,0x10
c0027f07:	85 c0                	test   eax,eax
c0027f09:	0f 85 03 01 00 00    	jne    c0028012 <__divsf3+0x21e>
c0027f0f:	31 d2                	xor    edx,edx
c0027f11:	89 d3                	mov    ebx,edx
c0027f13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f16:	31 f8                	xor    eax,edi
c0027f18:	0f 89 f7 00 00 00    	jns    c0028015 <__divsf3+0x221>
c0027f1e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027f23:	e9 ed 00 00 00       	jmp    c0028015 <__divsf3+0x221>
c0027f28:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027f2b:	50                   	push   eax
c0027f2c:	50                   	push   eax
c0027f2d:	52                   	push   edx
c0027f2e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027f31:	e8 c7 02 00 00       	call   c00281fd <__eqsf2>
c0027f36:	83 c4 10             	add    esp,0x10
c0027f39:	85 c0                	test   eax,eax
c0027f3b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027f3e:	75 16                	jne    c0027f56 <__divsf3+0x162>
c0027f40:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f43:	31 fb                	xor    ebx,edi
c0027f45:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027f4b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027f51:	e9 bf 00 00 00       	jmp    c0028015 <__divsf3+0x221>
c0027f56:	8d 46 01             	lea    eax,[esi+0x1]
c0027f59:	01 db                	add    ebx,ebx
c0027f5b:	78 04                	js     c0027f61 <__divsf3+0x16d>
c0027f5d:	89 c6                	mov    esi,eax
c0027f5f:	eb f5                	jmp    c0027f56 <__divsf3+0x162>
c0027f61:	89 c8                	mov    eax,ecx
c0027f63:	0d 00 00 00 80       	or     eax,0x80000000
c0027f68:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027f6e:	31 d2                	xor    edx,edx
c0027f70:	39 d8                	cmp    eax,ebx
c0027f72:	72 07                	jb     c0027f7b <__divsf3+0x187>
c0027f74:	29 d8                	sub    eax,ebx
c0027f76:	ba 01 00 00 00       	mov    edx,0x1
c0027f7b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027f82:	01 d2                	add    edx,edx
c0027f84:	89 c1                	mov    ecx,eax
c0027f86:	01 c0                	add    eax,eax
c0027f88:	85 c9                	test   ecx,ecx
c0027f8a:	78 04                	js     c0027f90 <__divsf3+0x19c>
c0027f8c:	39 c3                	cmp    ebx,eax
c0027f8e:	77 05                	ja     c0027f95 <__divsf3+0x1a1>
c0027f90:	29 d8                	sub    eax,ebx
c0027f92:	83 ca 01             	or     edx,0x1
c0027f95:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027f98:	75 e8                	jne    c0027f82 <__divsf3+0x18e>
c0027f9a:	85 c0                	test   eax,eax
c0027f9c:	0f 95 c0             	setne  al
c0027f9f:	0f b6 c0             	movzx  eax,al
c0027fa2:	c1 e2 06             	shl    edx,0x6
c0027fa5:	09 c2                	or     edx,eax
c0027fa7:	78 03                	js     c0027fac <__divsf3+0x1b8>
c0027fa9:	01 d2                	add    edx,edx
c0027fab:	4e                   	dec    esi
c0027fac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027fb2:	7f 22                	jg     c0027fd6 <__divsf3+0x1e2>
c0027fb4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027fba:	85 f6                	test   esi,esi
c0027fbc:	7f 23                	jg     c0027fe1 <__divsf3+0x1ed>
c0027fbe:	83 fe e9             	cmp    esi,0xffffffe9
c0027fc1:	7c 1a                	jl     c0027fdd <__divsf3+0x1e9>
c0027fc3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027fc9:	b9 01 00 00 00       	mov    ecx,0x1
c0027fce:	29 f1                	sub    ecx,esi
c0027fd0:	d3 ea                	shr    edx,cl
c0027fd2:	31 f6                	xor    esi,esi
c0027fd4:	eb 0b                	jmp    c0027fe1 <__divsf3+0x1ed>
c0027fd6:	be ff 00 00 00       	mov    esi,0xff
c0027fdb:	eb 02                	jmp    c0027fdf <__divsf3+0x1eb>
c0027fdd:	31 f6                	xor    esi,esi
c0027fdf:	31 d2                	xor    edx,edx
c0027fe1:	89 d0                	mov    eax,edx
c0027fe3:	c1 e8 08             	shr    eax,0x8
c0027fe6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027fe9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027fef:	09 fe                	or     esi,edi
c0027ff1:	c1 e6 17             	shl    esi,0x17
c0027ff4:	09 c6                	or     esi,eax
c0027ff6:	f6 c2 7f             	test   dl,0x7f
c0027ff9:	0f 95 c1             	setne  cl
c0027ffc:	09 c8                	or     eax,ecx
c0027ffe:	83 e0 01             	and    eax,0x1
c0028001:	c1 ea 07             	shr    edx,0x7
c0028004:	21 c2                	and    edx,eax
c0028006:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0028009:	eb 0a                	jmp    c0028015 <__divsf3+0x221>
c002800b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0028010:	eb 03                	jmp    c0028015 <__divsf3+0x221>
c0028012:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0028015:	89 d8                	mov    eax,ebx
c0028017:	8d 65 f4             	lea    esp,[ebp-0xc]
c002801a:	5b                   	pop    ebx
c002801b:	5e                   	pop    esi
c002801c:	5f                   	pop    edi
c002801d:	5d                   	pop    ebp
c002801e:	c3                   	ret    

c002801f <__floatsisf>:
c002801f:	55                   	push   ebp
c0028020:	89 e5                	mov    ebp,esp
c0028022:	53                   	push   ebx
c0028023:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028026:	85 d2                	test   edx,edx
c0028028:	7e 2b                	jle    c0028055 <__floatsisf+0x36>
c002802a:	0f bd ca             	bsr    ecx,edx
c002802d:	83 f1 1f             	xor    ecx,0x1f
c0028030:	d3 e2                	shl    edx,cl
c0028032:	89 d0                	mov    eax,edx
c0028034:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028039:	89 c3                	mov    ebx,eax
c002803b:	c1 eb 08             	shr    ebx,0x8
c002803e:	80 e2 7f             	and    dl,0x7f
c0028041:	0f 95 c2             	setne  dl
c0028044:	09 da                	or     edx,ebx
c0028046:	83 e2 01             	and    edx,0x1
c0028049:	c1 e8 07             	shr    eax,0x7
c002804c:	21 c2                	and    edx,eax
c002804e:	b8 9e 00 00 00       	mov    eax,0x9e
c0028053:	eb 32                	jmp    c0028087 <__floatsisf+0x68>
c0028055:	b8 00 00 00 00       	mov    eax,0x0
c002805a:	74 34                	je     c0028090 <__floatsisf+0x71>
c002805c:	f7 da                	neg    edx
c002805e:	0f bd ca             	bsr    ecx,edx
c0028061:	83 f1 1f             	xor    ecx,0x1f
c0028064:	d3 e2                	shl    edx,cl
c0028066:	89 d0                	mov    eax,edx
c0028068:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002806d:	89 c3                	mov    ebx,eax
c002806f:	c1 eb 08             	shr    ebx,0x8
c0028072:	80 e2 7f             	and    dl,0x7f
c0028075:	0f 95 c2             	setne  dl
c0028078:	09 da                	or     edx,ebx
c002807a:	83 e2 01             	and    edx,0x1
c002807d:	c1 e8 07             	shr    eax,0x7
c0028080:	21 c2                	and    edx,eax
c0028082:	b8 9e 01 00 00       	mov    eax,0x19e
c0028087:	29 c8                	sub    eax,ecx
c0028089:	c1 e0 17             	shl    eax,0x17
c002808c:	09 d8                	or     eax,ebx
c002808e:	01 d0                	add    eax,edx
c0028090:	5b                   	pop    ebx
c0028091:	5d                   	pop    ebp
c0028092:	c3                   	ret    

c0028093 <__floatunsisf>:
c0028093:	55                   	push   ebp
c0028094:	89 e5                	mov    ebp,esp
c0028096:	53                   	push   ebx
c0028097:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002809a:	31 c0                	xor    eax,eax
c002809c:	85 d2                	test   edx,edx
c002809e:	74 32                	je     c00280d2 <__floatunsisf+0x3f>
c00280a0:	0f bd ca             	bsr    ecx,edx
c00280a3:	83 f1 1f             	xor    ecx,0x1f
c00280a6:	d3 e2                	shl    edx,cl
c00280a8:	89 d0                	mov    eax,edx
c00280aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00280af:	89 c3                	mov    ebx,eax
c00280b1:	c1 eb 08             	shr    ebx,0x8
c00280b4:	80 e2 7f             	and    dl,0x7f
c00280b7:	0f 95 c2             	setne  dl
c00280ba:	09 da                	or     edx,ebx
c00280bc:	83 e2 01             	and    edx,0x1
c00280bf:	c1 e8 07             	shr    eax,0x7
c00280c2:	21 c2                	and    edx,eax
c00280c4:	b8 9e 00 00 00       	mov    eax,0x9e
c00280c9:	29 c8                	sub    eax,ecx
c00280cb:	c1 e0 17             	shl    eax,0x17
c00280ce:	09 d8                	or     eax,ebx
c00280d0:	01 d0                	add    eax,edx
c00280d2:	5b                   	pop    ebx
c00280d3:	5d                   	pop    ebp
c00280d4:	c3                   	ret    

c00280d5 <__fixsfsi>:
c00280d5:	55                   	push   ebp
c00280d6:	89 e5                	mov    ebp,esp
c00280d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00280db:	89 d1                	mov    ecx,edx
c00280dd:	c1 e1 08             	shl    ecx,0x8
c00280e0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00280e6:	c1 fa 17             	sar    edx,0x17
c00280e9:	78 1c                	js     c0028107 <__fixsfsi+0x32>
c00280eb:	83 ea 7f             	sub    edx,0x7f
c00280ee:	31 c0                	xor    eax,eax
c00280f0:	83 fa 1e             	cmp    edx,0x1e
c00280f3:	77 40                	ja     c0028135 <__fixsfsi+0x60>
c00280f5:	89 c8                	mov    eax,ecx
c00280f7:	0d 00 00 00 80       	or     eax,0x80000000
c00280fc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028101:	29 d1                	sub    ecx,edx
c0028103:	d3 e8                	shr    eax,cl
c0028105:	eb 2e                	jmp    c0028135 <__fixsfsi+0x60>
c0028107:	31 c0                	xor    eax,eax
c0028109:	81 c2 81 00 00 00    	add    edx,0x81
c002810f:	78 24                	js     c0028135 <__fixsfsi+0x60>
c0028111:	83 fa 1e             	cmp    edx,0x1e
c0028114:	7e 09                	jle    c002811f <__fixsfsi+0x4a>
c0028116:	83 fa 1f             	cmp    edx,0x1f
c0028119:	75 18                	jne    c0028133 <__fixsfsi+0x5e>
c002811b:	85 c9                	test   ecx,ecx
c002811d:	75 14                	jne    c0028133 <__fixsfsi+0x5e>
c002811f:	89 c8                	mov    eax,ecx
c0028121:	0d 00 00 00 80       	or     eax,0x80000000
c0028126:	b9 1f 00 00 00       	mov    ecx,0x1f
c002812b:	29 d1                	sub    ecx,edx
c002812d:	d3 e8                	shr    eax,cl
c002812f:	f7 d8                	neg    eax
c0028131:	eb 02                	jmp    c0028135 <__fixsfsi+0x60>
c0028133:	31 c0                	xor    eax,eax
c0028135:	5d                   	pop    ebp
c0028136:	c3                   	ret    

c0028137 <__fixunssfsi>:
c0028137:	55                   	push   ebp
c0028138:	89 e5                	mov    ebp,esp
c002813a:	53                   	push   ebx
c002813b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002813e:	89 d3                	mov    ebx,edx
c0028140:	c1 fb 17             	sar    ebx,0x17
c0028143:	83 eb 7f             	sub    ebx,0x7f
c0028146:	31 c0                	xor    eax,eax
c0028148:	83 fb 1f             	cmp    ebx,0x1f
c002814b:	77 18                	ja     c0028165 <__fixunssfsi+0x2e>
c002814d:	89 d0                	mov    eax,edx
c002814f:	c1 e0 08             	shl    eax,0x8
c0028152:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0028157:	0d 00 00 00 80       	or     eax,0x80000000
c002815c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028161:	29 d9                	sub    ecx,ebx
c0028163:	d3 e8                	shr    eax,cl
c0028165:	5b                   	pop    ebx
c0028166:	5d                   	pop    ebp
c0028167:	c3                   	ret    

c0028168 <__cmpsf2>:
c0028168:	55                   	push   ebp
c0028169:	89 e5                	mov    ebp,esp
c002816b:	57                   	push   edi
c002816c:	56                   	push   esi
c002816d:	53                   	push   ebx
c002816e:	83 ec 24             	sub    esp,0x24
c0028171:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028174:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028177:	e8 4f 10 00 00       	call   c00291cb <__truncdfsf2>
c002817c:	5a                   	pop    edx
c002817d:	59                   	pop    ecx
c002817e:	89 c3                	mov    ebx,eax
c0028180:	c1 e8 17             	shr    eax,0x17
c0028183:	0f b6 f0             	movzx  esi,al
c0028186:	89 d8                	mov    eax,ebx
c0028188:	c1 e8 1f             	shr    eax,0x1f
c002818b:	31 c6                	xor    esi,eax
c002818d:	c1 e3 08             	shl    ebx,0x8
c0028190:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028193:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028196:	e8 30 10 00 00       	call   c00291cb <__truncdfsf2>
c002819b:	83 c4 10             	add    esp,0x10
c002819e:	89 c1                	mov    ecx,eax
c00281a0:	c1 e9 17             	shr    ecx,0x17
c00281a3:	0f b6 c9             	movzx  ecx,cl
c00281a6:	89 c7                	mov    edi,eax
c00281a8:	c1 ef 1f             	shr    edi,0x1f
c00281ab:	89 ca                	mov    edx,ecx
c00281ad:	31 fa                	xor    edx,edi
c00281af:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00281b2:	c1 e0 08             	shl    eax,0x8
c00281b5:	89 c2                	mov    edx,eax
c00281b7:	89 d8                	mov    eax,ebx
c00281b9:	09 d0                	or     eax,edx
c00281bb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00281c0:	09 f0                	or     eax,esi
c00281c2:	75 08                	jne    c00281cc <__cmpsf2+0x64>
c00281c4:	31 c0                	xor    eax,eax
c00281c6:	39 f9                	cmp    ecx,edi
c00281c8:	75 0c                	jne    c00281d6 <__cmpsf2+0x6e>
c00281ca:	eb 29                	jmp    c00281f5 <__cmpsf2+0x8d>
c00281cc:	b8 01 00 00 00       	mov    eax,0x1
c00281d1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00281d4:	7f 1f                	jg     c00281f5 <__cmpsf2+0x8d>
c00281d6:	83 c8 ff             	or     eax,0xffffffff
c00281d9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00281dc:	7c 17                	jl     c00281f5 <__cmpsf2+0x8d>
c00281de:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00281e4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00281ea:	b8 01 00 00 00       	mov    eax,0x1
c00281ef:	39 d3                	cmp    ebx,edx
c00281f1:	77 02                	ja     c00281f5 <__cmpsf2+0x8d>
c00281f3:	19 c0                	sbb    eax,eax
c00281f5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00281f8:	5b                   	pop    ebx
c00281f9:	5e                   	pop    esi
c00281fa:	5f                   	pop    edi
c00281fb:	5d                   	pop    ebp
c00281fc:	c3                   	ret    

c00281fd <__eqsf2>:
c00281fd:	55                   	push   ebp
c00281fe:	89 e5                	mov    ebp,esp
c0028200:	83 ec 24             	sub    esp,0x24
c0028203:	6a 01                	push   0x1
c0028205:	83 ec 0c             	sub    esp,0xc
c0028208:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002820b:	e8 df 10 00 00       	call   c00292ef <__extendsfdf2>
c0028210:	83 c4 10             	add    esp,0x10
c0028213:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028216:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028219:	52                   	push   edx
c002821a:	50                   	push   eax
c002821b:	50                   	push   eax
c002821c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002821f:	e8 cb 10 00 00       	call   c00292ef <__extendsfdf2>
c0028224:	59                   	pop    ecx
c0028225:	59                   	pop    ecx
c0028226:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028229:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002822c:	52                   	push   edx
c002822d:	50                   	push   eax
c002822e:	e8 35 ff ff ff       	call   c0028168 <__cmpsf2>
c0028233:	83 c4 20             	add    esp,0x20
c0028236:	c9                   	leave  
c0028237:	c3                   	ret    

c0028238 <__nesf2>:
c0028238:	eb c3                	jmp    c00281fd <__eqsf2>

c002823a <__gtsf2>:
c002823a:	55                   	push   ebp
c002823b:	89 e5                	mov    ebp,esp
c002823d:	83 ec 24             	sub    esp,0x24
c0028240:	6a ff                	push   0xffffffff
c0028242:	83 ec 0c             	sub    esp,0xc
c0028245:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028248:	e8 a2 10 00 00       	call   c00292ef <__extendsfdf2>
c002824d:	83 c4 10             	add    esp,0x10
c0028250:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028253:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028256:	52                   	push   edx
c0028257:	50                   	push   eax
c0028258:	50                   	push   eax
c0028259:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002825c:	e8 8e 10 00 00       	call   c00292ef <__extendsfdf2>
c0028261:	59                   	pop    ecx
c0028262:	59                   	pop    ecx
c0028263:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028266:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028269:	52                   	push   edx
c002826a:	50                   	push   eax
c002826b:	e8 f8 fe ff ff       	call   c0028168 <__cmpsf2>
c0028270:	83 c4 20             	add    esp,0x20
c0028273:	c9                   	leave  
c0028274:	c3                   	ret    

c0028275 <__gesf2>:
c0028275:	eb c3                	jmp    c002823a <__gtsf2>

c0028277 <__ltsf2>:
c0028277:	eb 84                	jmp    c00281fd <__eqsf2>

c0028279 <__lesf2>:
c0028279:	eb 82                	jmp    c00281fd <__eqsf2>

c002827b <__adddf3>:
c002827b:	55                   	push   ebp
c002827c:	89 e5                	mov    ebp,esp
c002827e:	57                   	push   edi
c002827f:	56                   	push   esi
c0028280:	53                   	push   ebx
c0028281:	83 ec 24             	sub    esp,0x24
c0028284:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028287:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002828a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002828d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028290:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028293:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028296:	89 c8                	mov    eax,ecx
c0028298:	89 ce                	mov    esi,ecx
c002829a:	c1 fe 14             	sar    esi,0x14
c002829d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00282a0:	89 fb                	mov    ebx,edi
c00282a2:	89 fa                	mov    edx,edi
c00282a4:	c1 e2 0b             	shl    edx,0xb
c00282a7:	c1 e0 0b             	shl    eax,0xb
c00282aa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282af:	c1 eb 15             	shr    ebx,0x15
c00282b2:	09 d8                	or     eax,ebx
c00282b4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00282b7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00282ba:	c1 fe 14             	sar    esi,0x14
c00282bd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00282c0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00282c3:	89 f3                	mov    ebx,esi
c00282c5:	c1 e3 0b             	shl    ebx,0xb
c00282c8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00282cb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00282ce:	c1 e3 0b             	shl    ebx,0xb
c00282d1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00282d7:	c1 ee 15             	shr    esi,0x15
c00282da:	09 f3                	or     ebx,esi
c00282dc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00282df:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00282e2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00282e5:	0f 88 5f 02 00 00    	js     c002854a <__adddf3+0x2cf>
c00282eb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282ee:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00282f1:	85 db                	test   ebx,ebx
c00282f3:	0f 8e c7 00 00 00    	jle    c00283c0 <__adddf3+0x145>
c00282f9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0028300:	75 1a                	jne    c002831c <__adddf3+0xa1>
c0028302:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028305:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028308:	0f 84 b2 05 00 00    	je     c00288c0 <__adddf3+0x645>
c002830e:	4b                   	dec    ebx
c002830f:	75 23                	jne    c0028334 <__adddf3+0xb9>
c0028311:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0028314:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028317:	e9 99 00 00 00       	jmp    c00283b5 <__adddf3+0x13a>
c002831c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002831f:	f7 d6                	not    esi
c0028321:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028327:	0f 84 93 05 00 00    	je     c00288c0 <__adddf3+0x645>
c002832d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0028334:	83 fb 1f             	cmp    ebx,0x1f
c0028337:	7e 42                	jle    c002837b <__adddf3+0x100>
c0028339:	83 fb 3f             	cmp    ebx,0x3f
c002833c:	0f 8f 7e 05 00 00    	jg     c00288c0 <__adddf3+0x645>
c0028342:	83 e3 1f             	and    ebx,0x1f
c0028345:	89 d9                	mov    ecx,ebx
c0028347:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002834a:	d3 ef                	shr    edi,cl
c002834c:	31 db                	xor    ebx,ebx
c002834e:	85 c9                	test   ecx,ecx
c0028350:	74 15                	je     c0028367 <__adddf3+0xec>
c0028352:	be 20 00 00 00       	mov    esi,0x20
c0028357:	29 ce                	sub    esi,ecx
c0028359:	89 f1                	mov    ecx,esi
c002835b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002835e:	d3 e6                	shl    esi,cl
c0028360:	31 db                	xor    ebx,ebx
c0028362:	85 f6                	test   esi,esi
c0028364:	0f 95 c3             	setne  bl
c0028367:	31 c9                	xor    ecx,ecx
c0028369:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002836d:	0f 95 c1             	setne  cl
c0028370:	09 cf                	or     edi,ecx
c0028372:	09 fb                	or     ebx,edi
c0028374:	01 da                	add    edx,ebx
c0028376:	83 d0 00             	adc    eax,0x0
c0028379:	eb 3a                	jmp    c00283b5 <__adddf3+0x13a>
c002837b:	bf 20 00 00 00       	mov    edi,0x20
c0028380:	29 df                	sub    edi,ebx
c0028382:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028385:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028388:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002838b:	d3 e6                	shl    esi,cl
c002838d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028390:	88 d9                	mov    cl,bl
c0028392:	d3 ef                	shr    edi,cl
c0028394:	09 fe                	or     esi,edi
c0028396:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028399:	88 d9                	mov    cl,bl
c002839b:	d3 ef                	shr    edi,cl
c002839d:	89 fb                	mov    ebx,edi
c002839f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00283a2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00283a5:	d3 e7                	shl    edi,cl
c00283a7:	85 ff                	test   edi,edi
c00283a9:	0f 95 c1             	setne  cl
c00283ac:	0f b6 c9             	movzx  ecx,cl
c00283af:	09 ce                	or     esi,ecx
c00283b1:	01 f2                	add    edx,esi
c00283b3:	11 d8                	adc    eax,ebx
c00283b5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283bb:	e9 52 01 00 00       	jmp    c0028512 <__adddf3+0x297>
c00283c0:	0f 84 d5 00 00 00    	je     c002849b <__adddf3+0x220>
c00283c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283c9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00283cc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283cf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283d2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00283d9:	75 20                	jne    c00283fb <__adddf3+0x180>
c00283db:	89 d6                	mov    esi,edx
c00283dd:	09 c6                	or     esi,eax
c00283df:	0f 84 db 04 00 00    	je     c00288c0 <__adddf3+0x645>
c00283e5:	4b                   	dec    ebx
c00283e6:	75 29                	jne    c0028411 <__adddf3+0x196>
c00283e8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00283eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00283ee:	01 d1                	add    ecx,edx
c00283f0:	11 c6                	adc    esi,eax
c00283f2:	89 f0                	mov    eax,esi
c00283f4:	89 ca                	mov    edx,ecx
c00283f6:	e9 17 01 00 00       	jmp    c0028512 <__adddf3+0x297>
c00283fb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00283fe:	f7 d6                	not    esi
c0028400:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028406:	0f 84 b4 04 00 00    	je     c00288c0 <__adddf3+0x645>
c002840c:	0d 00 00 00 80       	or     eax,0x80000000
c0028411:	83 fb 1f             	cmp    ebx,0x1f
c0028414:	7e 48                	jle    c002845e <__adddf3+0x1e3>
c0028416:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028419:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002841c:	83 fb 3f             	cmp    ebx,0x3f
c002841f:	0f 8f 9b 04 00 00    	jg     c00288c0 <__adddf3+0x645>
c0028425:	83 e3 1f             	and    ebx,0x1f
c0028428:	89 d9                	mov    ecx,ebx
c002842a:	89 c7                	mov    edi,eax
c002842c:	d3 ef                	shr    edi,cl
c002842e:	31 db                	xor    ebx,ebx
c0028430:	85 c9                	test   ecx,ecx
c0028432:	74 12                	je     c0028446 <__adddf3+0x1cb>
c0028434:	be 20 00 00 00       	mov    esi,0x20
c0028439:	29 ce                	sub    esi,ecx
c002843b:	89 f1                	mov    ecx,esi
c002843d:	d3 e0                	shl    eax,cl
c002843f:	31 db                	xor    ebx,ebx
c0028441:	85 c0                	test   eax,eax
c0028443:	0f 95 c3             	setne  bl
c0028446:	31 c0                	xor    eax,eax
c0028448:	85 d2                	test   edx,edx
c002844a:	0f 95 c0             	setne  al
c002844d:	09 c7                	or     edi,eax
c002844f:	09 fb                	or     ebx,edi
c0028451:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028454:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028457:	01 da                	add    edx,ebx
c0028459:	83 d6 00             	adc    esi,0x0
c002845c:	eb 39                	jmp    c0028497 <__adddf3+0x21c>
c002845e:	be 20 00 00 00       	mov    esi,0x20
c0028463:	29 de                	sub    esi,ebx
c0028465:	89 c7                	mov    edi,eax
c0028467:	89 f1                	mov    ecx,esi
c0028469:	d3 e7                	shl    edi,cl
c002846b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002846e:	89 d7                	mov    edi,edx
c0028470:	88 d9                	mov    cl,bl
c0028472:	d3 ef                	shr    edi,cl
c0028474:	89 f9                	mov    ecx,edi
c0028476:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028479:	09 cf                	or     edi,ecx
c002847b:	88 d9                	mov    cl,bl
c002847d:	d3 e8                	shr    eax,cl
c002847f:	89 f1                	mov    ecx,esi
c0028481:	d3 e2                	shl    edx,cl
c0028483:	85 d2                	test   edx,edx
c0028485:	0f 95 c2             	setne  dl
c0028488:	0f b6 d2             	movzx  edx,dl
c002848b:	09 d7                	or     edi,edx
c002848d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028490:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028493:	01 fa                	add    edx,edi
c0028495:	11 c6                	adc    esi,eax
c0028497:	89 f0                	mov    eax,esi
c0028499:	eb 77                	jmp    c0028512 <__adddf3+0x297>
c002849b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002849e:	46                   	inc    esi
c002849f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00284a2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00284a8:	75 41                	jne    c00284eb <__adddf3+0x270>
c00284aa:	89 d3                	mov    ebx,edx
c00284ac:	09 c3                	or     ebx,eax
c00284ae:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00284b5:	75 27                	jne    c00284de <__adddf3+0x263>
c00284b7:	85 db                	test   ebx,ebx
c00284b9:	0f 84 fb 03 00 00    	je     c00288ba <__adddf3+0x63f>
c00284bf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00284c2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00284c5:	0f 84 f5 03 00 00    	je     c00288c0 <__adddf3+0x645>
c00284cb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00284ce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00284d1:	85 c0                	test   eax,eax
c00284d3:	0f 89 91 03 00 00    	jns    c002886a <__adddf3+0x5ef>
c00284d9:	e9 85 03 00 00       	jmp    c0028863 <__adddf3+0x5e8>
c00284de:	85 db                	test   ebx,ebx
c00284e0:	0f 85 da 03 00 00    	jne    c00288c0 <__adddf3+0x645>
c00284e6:	e9 cf 03 00 00       	jmp    c00288ba <__adddf3+0x63f>
c00284eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00284ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00284f1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284f4:	f7 d1                	not    ecx
c00284f6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00284fc:	0f 84 70 03 00 00    	je     c0028872 <__adddf3+0x5f7>
c0028502:	d1 ea                	shr    edx,1
c0028504:	89 c1                	mov    ecx,eax
c0028506:	c1 e1 1f             	shl    ecx,0x1f
c0028509:	09 ca                	or     edx,ecx
c002850b:	d1 e8                	shr    eax,1
c002850d:	e9 6f 03 00 00       	jmp    c0028881 <__adddf3+0x606>
c0028512:	85 c0                	test   eax,eax
c0028514:	0f 89 67 03 00 00    	jns    c0028881 <__adddf3+0x606>
c002851a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002851d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028520:	f7 d1                	not    ecx
c0028522:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028528:	0f 84 44 03 00 00    	je     c0028872 <__adddf3+0x5f7>
c002852e:	89 d1                	mov    ecx,edx
c0028530:	d1 e9                	shr    ecx,1
c0028532:	83 e2 01             	and    edx,0x1
c0028535:	09 ca                	or     edx,ecx
c0028537:	89 c1                	mov    ecx,eax
c0028539:	c1 e1 1f             	shl    ecx,0x1f
c002853c:	09 ca                	or     edx,ecx
c002853e:	d1 e8                	shr    eax,1
c0028540:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028545:	e9 37 03 00 00       	jmp    c0028881 <__adddf3+0x606>
c002854a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002854d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028553:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028556:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028559:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002855f:	29 de                	sub    esi,ebx
c0028561:	85 f6                	test   esi,esi
c0028563:	0f 8e bd 00 00 00    	jle    c0028626 <__adddf3+0x3ab>
c0028569:	85 db                	test   ebx,ebx
c002856b:	75 17                	jne    c0028584 <__adddf3+0x309>
c002856d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028570:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028573:	0f 84 47 03 00 00    	je     c00288c0 <__adddf3+0x645>
c0028579:	4e                   	dec    esi
c002857a:	75 20                	jne    c002859c <__adddf3+0x321>
c002857c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002857f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028582:	eb 5b                	jmp    c00285df <__adddf3+0x364>
c0028584:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028587:	f7 d3                	not    ebx
c0028589:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002858f:	0f 84 2b 03 00 00    	je     c00288c0 <__adddf3+0x645>
c0028595:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002859c:	83 fe 1f             	cmp    esi,0x1f
c002859f:	7e 49                	jle    c00285ea <__adddf3+0x36f>
c00285a1:	83 fe 3f             	cmp    esi,0x3f
c00285a4:	0f 8f 16 03 00 00    	jg     c00288c0 <__adddf3+0x645>
c00285aa:	83 e6 1f             	and    esi,0x1f
c00285ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00285b0:	89 f1                	mov    ecx,esi
c00285b2:	d3 ef                	shr    edi,cl
c00285b4:	31 db                	xor    ebx,ebx
c00285b6:	85 f6                	test   esi,esi
c00285b8:	74 13                	je     c00285cd <__adddf3+0x352>
c00285ba:	b9 20 00 00 00       	mov    ecx,0x20
c00285bf:	29 f1                	sub    ecx,esi
c00285c1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00285c4:	d3 e6                	shl    esi,cl
c00285c6:	31 db                	xor    ebx,ebx
c00285c8:	85 f6                	test   esi,esi
c00285ca:	0f 95 c3             	setne  bl
c00285cd:	31 c9                	xor    ecx,ecx
c00285cf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00285d3:	0f 95 c1             	setne  cl
c00285d6:	09 cf                	or     edi,ecx
c00285d8:	09 fb                	or     ebx,edi
c00285da:	29 da                	sub    edx,ebx
c00285dc:	83 d8 00             	sbb    eax,0x0
c00285df:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285e2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285e5:	e9 aa 01 00 00       	jmp    c0028794 <__adddf3+0x519>
c00285ea:	bf 20 00 00 00       	mov    edi,0x20
c00285ef:	29 f7                	sub    edi,esi
c00285f1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285f4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00285f7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00285fa:	d3 e3                	shl    ebx,cl
c00285fc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00285ff:	89 f1                	mov    ecx,esi
c0028601:	d3 ef                	shr    edi,cl
c0028603:	09 fb                	or     ebx,edi
c0028605:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028608:	89 f1                	mov    ecx,esi
c002860a:	d3 ef                	shr    edi,cl
c002860c:	89 fe                	mov    esi,edi
c002860e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028611:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028614:	d3 e7                	shl    edi,cl
c0028616:	85 ff                	test   edi,edi
c0028618:	0f 95 c1             	setne  cl
c002861b:	0f b6 c9             	movzx  ecx,cl
c002861e:	09 cb                	or     ebx,ecx
c0028620:	29 da                	sub    edx,ebx
c0028622:	19 f0                	sbb    eax,esi
c0028624:	eb b9                	jmp    c00285df <__adddf3+0x364>
c0028626:	0f 84 cd 00 00 00    	je     c00286f9 <__adddf3+0x47e>
c002862c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002862f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028632:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028635:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028639:	75 1b                	jne    c0028656 <__adddf3+0x3db>
c002863b:	89 d6                	mov    esi,edx
c002863d:	09 c6                	or     esi,eax
c002863f:	0f 84 7b 02 00 00    	je     c00288c0 <__adddf3+0x645>
c0028645:	4b                   	dec    ebx
c0028646:	75 24                	jne    c002866c <__adddf3+0x3f1>
c0028648:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002864b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002864e:	29 d1                	sub    ecx,edx
c0028650:	19 c6                	sbb    esi,eax
c0028652:	89 ca                	mov    edx,ecx
c0028654:	eb 61                	jmp    c00286b7 <__adddf3+0x43c>
c0028656:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028659:	f7 d6                	not    esi
c002865b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028661:	0f 84 59 02 00 00    	je     c00288c0 <__adddf3+0x645>
c0028667:	0d 00 00 00 80       	or     eax,0x80000000
c002866c:	83 fb 1f             	cmp    ebx,0x1f
c002866f:	7e 4d                	jle    c00286be <__adddf3+0x443>
c0028671:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028674:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028677:	83 fb 3f             	cmp    ebx,0x3f
c002867a:	0f 8f 40 02 00 00    	jg     c00288c0 <__adddf3+0x645>
c0028680:	83 e3 1f             	and    ebx,0x1f
c0028683:	89 d9                	mov    ecx,ebx
c0028685:	89 c7                	mov    edi,eax
c0028687:	d3 ef                	shr    edi,cl
c0028689:	31 db                	xor    ebx,ebx
c002868b:	85 c9                	test   ecx,ecx
c002868d:	74 12                	je     c00286a1 <__adddf3+0x426>
c002868f:	be 20 00 00 00       	mov    esi,0x20
c0028694:	29 ce                	sub    esi,ecx
c0028696:	89 f1                	mov    ecx,esi
c0028698:	d3 e0                	shl    eax,cl
c002869a:	31 db                	xor    ebx,ebx
c002869c:	85 c0                	test   eax,eax
c002869e:	0f 95 c3             	setne  bl
c00286a1:	31 c0                	xor    eax,eax
c00286a3:	85 d2                	test   edx,edx
c00286a5:	0f 95 c0             	setne  al
c00286a8:	09 c7                	or     edi,eax
c00286aa:	09 fb                	or     ebx,edi
c00286ac:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00286af:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00286b2:	29 da                	sub    edx,ebx
c00286b4:	83 de 00             	sbb    esi,0x0
c00286b7:	89 f0                	mov    eax,esi
c00286b9:	e9 d6 00 00 00       	jmp    c0028794 <__adddf3+0x519>
c00286be:	be 20 00 00 00       	mov    esi,0x20
c00286c3:	29 de                	sub    esi,ebx
c00286c5:	89 c7                	mov    edi,eax
c00286c7:	89 f1                	mov    ecx,esi
c00286c9:	d3 e7                	shl    edi,cl
c00286cb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00286ce:	89 d7                	mov    edi,edx
c00286d0:	88 d9                	mov    cl,bl
c00286d2:	d3 ef                	shr    edi,cl
c00286d4:	89 f9                	mov    ecx,edi
c00286d6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00286d9:	09 cf                	or     edi,ecx
c00286db:	88 d9                	mov    cl,bl
c00286dd:	d3 e8                	shr    eax,cl
c00286df:	89 f1                	mov    ecx,esi
c00286e1:	d3 e2                	shl    edx,cl
c00286e3:	85 d2                	test   edx,edx
c00286e5:	0f 95 c2             	setne  dl
c00286e8:	0f b6 d2             	movzx  edx,dl
c00286eb:	09 d7                	or     edi,edx
c00286ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00286f0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00286f3:	29 fa                	sub    edx,edi
c00286f5:	19 c6                	sbb    esi,eax
c00286f7:	eb be                	jmp    c00286b7 <__adddf3+0x43c>
c00286f9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00286fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00286ff:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028705:	75 6a                	jne    c0028771 <__adddf3+0x4f6>
c0028707:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002870b:	75 58                	jne    c0028765 <__adddf3+0x4ea>
c002870d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028710:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028713:	89 d6                	mov    esi,edx
c0028715:	09 c6                	or     esi,eax
c0028717:	75 17                	jne    c0028730 <__adddf3+0x4b5>
c0028719:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002871c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002871f:	85 db                	test   ebx,ebx
c0028721:	0f 85 99 01 00 00    	jne    c00288c0 <__adddf3+0x645>
c0028727:	31 ff                	xor    edi,edi
c0028729:	31 c9                	xor    ecx,ecx
c002872b:	e9 90 01 00 00       	jmp    c00288c0 <__adddf3+0x645>
c0028730:	85 db                	test   ebx,ebx
c0028732:	0f 84 88 01 00 00    	je     c00288c0 <__adddf3+0x645>
c0028738:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002873b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002873e:	85 c0                	test   eax,eax
c0028740:	79 10                	jns    c0028752 <__adddf3+0x4d7>
c0028742:	31 c9                	xor    ecx,ecx
c0028744:	f7 da                	neg    edx
c0028746:	0f 95 c1             	setne  cl
c0028749:	01 c8                	add    eax,ecx
c002874b:	f7 d8                	neg    eax
c002874d:	e9 2f 01 00 00       	jmp    c0028881 <__adddf3+0x606>
c0028752:	31 ff                	xor    edi,edi
c0028754:	31 c9                	xor    ecx,ecx
c0028756:	89 c3                	mov    ebx,eax
c0028758:	09 d3                	or     ebx,edx
c002875a:	0f 84 60 01 00 00    	je     c00288c0 <__adddf3+0x645>
c0028760:	e9 05 01 00 00       	jmp    c002886a <__adddf3+0x5ef>
c0028765:	31 ff                	xor    edi,edi
c0028767:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002876c:	e9 4f 01 00 00       	jmp    c00288c0 <__adddf3+0x645>
c0028771:	89 c1                	mov    ecx,eax
c0028773:	89 d0                	mov    eax,edx
c0028775:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028778:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002877b:	89 ca                	mov    edx,ecx
c002877d:	85 c9                	test   ecx,ecx
c002877f:	79 2c                	jns    c00287ad <__adddf3+0x532>
c0028781:	31 c9                	xor    ecx,ecx
c0028783:	f7 d8                	neg    eax
c0028785:	0f 95 c1             	setne  cl
c0028788:	01 ca                	add    edx,ecx
c002878a:	f7 da                	neg    edx
c002878c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002878f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028792:	eb 19                	jmp    c00287ad <__adddf3+0x532>
c0028794:	85 c0                	test   eax,eax
c0028796:	0f 89 e5 00 00 00    	jns    c0028881 <__adddf3+0x606>
c002879c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00287a1:	89 c1                	mov    ecx,eax
c00287a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00287a6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00287a9:	89 d0                	mov    eax,edx
c00287ab:	89 ca                	mov    edx,ecx
c00287ad:	85 d2                	test   edx,edx
c00287af:	74 59                	je     c002880a <__adddf3+0x58f>
c00287b1:	0f bd da             	bsr    ebx,edx
c00287b4:	83 f3 1f             	xor    ebx,0x1f
c00287b7:	88 d9                	mov    cl,bl
c00287b9:	d3 e2                	shl    edx,cl
c00287bb:	bf 20 00 00 00       	mov    edi,0x20
c00287c0:	89 f9                	mov    ecx,edi
c00287c2:	29 d9                	sub    ecx,ebx
c00287c4:	89 c6                	mov    esi,eax
c00287c6:	d3 ee                	shr    esi,cl
c00287c8:	09 d6                	or     esi,edx
c00287ca:	88 d9                	mov    cl,bl
c00287cc:	d3 e0                	shl    eax,cl
c00287ce:	89 c2                	mov    edx,eax
c00287d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287d3:	25 ff 07 00 00       	and    eax,0x7ff
c00287d8:	39 d8                	cmp    eax,ebx
c00287da:	7f 22                	jg     c00287fe <__adddf3+0x583>
c00287dc:	29 c3                	sub    ebx,eax
c00287de:	43                   	inc    ebx
c00287df:	88 d9                	mov    cl,bl
c00287e1:	d3 ea                	shr    edx,cl
c00287e3:	29 df                	sub    edi,ebx
c00287e5:	89 f9                	mov    ecx,edi
c00287e7:	89 f0                	mov    eax,esi
c00287e9:	d3 e0                	shl    eax,cl
c00287eb:	09 c2                	or     edx,eax
c00287ed:	89 f0                	mov    eax,esi
c00287ef:	88 d9                	mov    cl,bl
c00287f1:	d3 e8                	shr    eax,cl
c00287f3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00287f6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00287fc:	eb 6f                	jmp    c002886d <__adddf3+0x5f2>
c00287fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028801:	29 d8                	sub    eax,ebx
c0028803:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028806:	89 f0                	mov    eax,esi
c0028808:	eb 59                	jmp    c0028863 <__adddf3+0x5e8>
c002880a:	85 c0                	test   eax,eax
c002880c:	74 6a                	je     c0028878 <__adddf3+0x5fd>
c002880e:	0f bd c8             	bsr    ecx,eax
c0028811:	83 f1 1f             	xor    ecx,0x1f
c0028814:	d3 e0                	shl    eax,cl
c0028816:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028819:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002881f:	83 c1 20             	add    ecx,0x20
c0028822:	39 cb                	cmp    ebx,ecx
c0028824:	7f 35                	jg     c002885b <__adddf3+0x5e0>
c0028826:	29 d9                	sub    ecx,ebx
c0028828:	8d 71 01             	lea    esi,[ecx+0x1]
c002882b:	83 fe 1f             	cmp    esi,0x1f
c002882e:	7e 09                	jle    c0028839 <__adddf3+0x5be>
c0028830:	83 e9 1f             	sub    ecx,0x1f
c0028833:	d3 e8                	shr    eax,cl
c0028835:	89 c3                	mov    ebx,eax
c0028837:	eb 11                	jmp    c002884a <__adddf3+0x5cf>
c0028839:	b9 20 00 00 00       	mov    ecx,0x20
c002883e:	29 f1                	sub    ecx,esi
c0028840:	89 c3                	mov    ebx,eax
c0028842:	d3 e3                	shl    ebx,cl
c0028844:	89 f1                	mov    ecx,esi
c0028846:	d3 e8                	shr    eax,cl
c0028848:	89 c2                	mov    edx,eax
c002884a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002884d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028852:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028855:	89 d0                	mov    eax,edx
c0028857:	89 da                	mov    edx,ebx
c0028859:	eb 26                	jmp    c0028881 <__adddf3+0x606>
c002885b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002885e:	29 cf                	sub    edi,ecx
c0028860:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028863:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028868:	eb 17                	jmp    c0028881 <__adddf3+0x606>
c002886a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002886d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028870:	eb 0f                	jmp    c0028881 <__adddf3+0x606>
c0028872:	31 d2                	xor    edx,edx
c0028874:	31 c0                	xor    eax,eax
c0028876:	eb 09                	jmp    c0028881 <__adddf3+0x606>
c0028878:	89 c2                	mov    edx,eax
c002887a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028881:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028884:	c1 e1 14             	shl    ecx,0x14
c0028887:	89 c3                	mov    ebx,eax
c0028889:	c1 eb 0b             	shr    ebx,0xb
c002888c:	09 d9                	or     ecx,ebx
c002888e:	89 d3                	mov    ebx,edx
c0028890:	c1 eb 0b             	shr    ebx,0xb
c0028893:	c1 e0 15             	shl    eax,0x15
c0028896:	09 d8                	or     eax,ebx
c0028898:	89 c7                	mov    edi,eax
c002889a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00288a0:	0f 95 c0             	setne  al
c00288a3:	89 c6                	mov    esi,eax
c00288a5:	09 f3                	or     ebx,esi
c00288a7:	83 e3 01             	and    ebx,0x1
c00288aa:	c1 ea 0a             	shr    edx,0xa
c00288ad:	21 da                	and    edx,ebx
c00288af:	89 f8                	mov    eax,edi
c00288b1:	01 d0                	add    eax,edx
c00288b3:	83 d1 00             	adc    ecx,0x0
c00288b6:	89 c7                	mov    edi,eax
c00288b8:	eb 06                	jmp    c00288c0 <__adddf3+0x645>
c00288ba:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00288bd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00288c0:	89 f8                	mov    eax,edi
c00288c2:	89 ca                	mov    edx,ecx
c00288c4:	83 c4 24             	add    esp,0x24
c00288c7:	5b                   	pop    ebx
c00288c8:	5e                   	pop    esi
c00288c9:	5f                   	pop    edi
c00288ca:	5d                   	pop    ebp
c00288cb:	c3                   	ret    

c00288cc <__subdf3>:
c00288cc:	55                   	push   ebp
c00288cd:	89 e5                	mov    ebp,esp
c00288cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00288d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00288d5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00288db:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00288de:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00288e1:	5d                   	pop    ebp
c00288e2:	e9 94 f9 ff ff       	jmp    c002827b <__adddf3>

c00288e7 <__negdf2>:
c00288e7:	55                   	push   ebp
c00288e8:	89 e5                	mov    ebp,esp
c00288ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00288ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00288f0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00288f6:	5d                   	pop    ebp
c00288f7:	c3                   	ret    

c00288f8 <__muldf3>:
c00288f8:	55                   	push   ebp
c00288f9:	89 e5                	mov    ebp,esp
c00288fb:	57                   	push   edi
c00288fc:	56                   	push   esi
c00288fd:	53                   	push   ebx
c00288fe:	83 ec 24             	sub    esp,0x24
c0028901:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028904:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028907:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002890a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002890d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028910:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028913:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028916:	89 c8                	mov    eax,ecx
c0028918:	c1 f8 14             	sar    eax,0x14
c002891b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002891e:	89 f8                	mov    eax,edi
c0028920:	89 fb                	mov    ebx,edi
c0028922:	c1 e3 0b             	shl    ebx,0xb
c0028925:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028928:	c1 e1 0b             	shl    ecx,0xb
c002892b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028931:	c1 e8 15             	shr    eax,0x15
c0028934:	09 c1                	or     ecx,eax
c0028936:	89 d6                	mov    esi,edx
c0028938:	89 d0                	mov    eax,edx
c002893a:	c1 f8 14             	sar    eax,0x14
c002893d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028940:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028943:	89 c3                	mov    ebx,eax
c0028945:	c1 e3 0b             	shl    ebx,0xb
c0028948:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002894b:	c1 e6 0b             	shl    esi,0xb
c002894e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028954:	c1 e8 15             	shr    eax,0x15
c0028957:	09 c6                	or     esi,eax
c0028959:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002895c:	25 ff 07 00 00       	and    eax,0x7ff
c0028961:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028964:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028967:	25 ff 07 00 00       	and    eax,0x7ff
c002896c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002896f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028972:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028975:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002897c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002897f:	40                   	inc    eax
c0028980:	a9 fe 07 00 00       	test   eax,0x7fe
c0028985:	0f 85 8d 00 00 00    	jne    c0028a18 <__muldf3+0x120>
c002898b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002898e:	09 c8                	or     eax,ecx
c0028990:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028994:	74 44                	je     c00289da <__muldf3+0xe2>
c0028996:	85 c0                	test   eax,eax
c0028998:	0f 85 31 02 00 00    	jne    c0028bcf <__muldf3+0x2d7>
c002899e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00289a1:	40                   	inc    eax
c00289a2:	a9 fe 07 00 00       	test   eax,0x7fe
c00289a7:	75 13                	jne    c00289bc <__muldf3+0xc4>
c00289a9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00289ac:	09 f1                	or     ecx,esi
c00289ae:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00289b2:	74 22                	je     c00289d6 <__muldf3+0xde>
c00289b4:	85 c9                	test   ecx,ecx
c00289b6:	0f 85 0d 02 00 00    	jne    c0028bc9 <__muldf3+0x2d1>
c00289bc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00289c0:	0f 89 09 02 00 00    	jns    c0028bcf <__muldf3+0x2d7>
c00289c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00289c9:	05 00 00 00 80       	add    eax,0x80000000
c00289ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00289d1:	e9 f9 01 00 00       	jmp    c0028bcf <__muldf3+0x2d7>
c00289d6:	85 c9                	test   ecx,ecx
c00289d8:	eb 2e                	jmp    c0028a08 <__muldf3+0x110>
c00289da:	85 c0                	test   eax,eax
c00289dc:	74 20                	je     c00289fe <__muldf3+0x106>
c00289de:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00289e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00289e4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00289e7:	c1 ef 1f             	shr    edi,0x1f
c00289ea:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00289ed:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00289f0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00289f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00289f6:	09 f9                	or     ecx,edi
c00289f8:	78 1e                	js     c0028a18 <__muldf3+0x120>
c00289fa:	89 c3                	mov    ebx,eax
c00289fc:	eb e0                	jmp    c00289de <__muldf3+0xe6>
c00289fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a01:	f7 d0                	not    eax
c0028a03:	a9 ff 07 00 00       	test   eax,0x7ff
c0028a08:	75 b2                	jne    c00289bc <__muldf3+0xc4>
c0028a0a:	31 ff                	xor    edi,edi
c0028a0c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028a13:	e9 b7 01 00 00       	jmp    c0028bcf <__muldf3+0x2d7>
c0028a18:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a1b:	40                   	inc    eax
c0028a1c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028a21:	75 57                	jne    c0028a7a <__muldf3+0x182>
c0028a23:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028a26:	09 f0                	or     eax,esi
c0028a28:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028a2c:	74 23                	je     c0028a51 <__muldf3+0x159>
c0028a2e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028a32:	0f 89 91 01 00 00    	jns    c0028bc9 <__muldf3+0x2d1>
c0028a38:	85 c0                	test   eax,eax
c0028a3a:	0f 85 89 01 00 00    	jne    c0028bc9 <__muldf3+0x2d1>
c0028a40:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028a43:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028a49:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028a4c:	e9 7e 01 00 00       	jmp    c0028bcf <__muldf3+0x2d7>
c0028a51:	85 c0                	test   eax,eax
c0028a53:	75 0c                	jne    c0028a61 <__muldf3+0x169>
c0028a55:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028a59:	0f 89 6a 01 00 00    	jns    c0028bc9 <__muldf3+0x2d1>
c0028a5f:	eb df                	jmp    c0028a40 <__muldf3+0x148>
c0028a61:	01 f6                	add    esi,esi
c0028a63:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028a66:	c1 ea 1f             	shr    edx,0x1f
c0028a69:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028a6c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0028a6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028a72:	09 d6                	or     esi,edx
c0028a74:	78 04                	js     c0028a7a <__muldf3+0x182>
c0028a76:	89 c3                	mov    ebx,eax
c0028a78:	eb e7                	jmp    c0028a61 <__muldf3+0x169>
c0028a7a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028a80:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028a86:	89 c8                	mov    eax,ecx
c0028a88:	f7 e6                	mul    esi
c0028a8a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0028a8d:	89 c7                	mov    edi,eax
c0028a8f:	89 c8                	mov    eax,ecx
c0028a91:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028a94:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028a97:	89 c1                	mov    ecx,eax
c0028a99:	89 f0                	mov    eax,esi
c0028a9b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0028a9e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028aa1:	89 c6                	mov    esi,eax
c0028aa3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028aa6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028aa9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028aac:	31 c0                	xor    eax,eax
c0028aae:	01 f1                	add    ecx,esi
c0028ab0:	0f 92 c0             	setb   al
c0028ab3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028ab6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028ab9:	83 d6 00             	adc    esi,0x0
c0028abc:	01 c7                	add    edi,eax
c0028abe:	83 d6 00             	adc    esi,0x0
c0028ac1:	01 ca                	add    edx,ecx
c0028ac3:	0f 92 c1             	setb   cl
c0028ac6:	0f b6 c9             	movzx  ecx,cl
c0028ac9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0028acc:	83 d6 00             	adc    esi,0x0
c0028acf:	01 cf                	add    edi,ecx
c0028ad1:	83 d6 00             	adc    esi,0x0
c0028ad4:	31 c9                	xor    ecx,ecx
c0028ad6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028ad9:	0f 95 c1             	setne  cl
c0028adc:	09 cf                	or     edi,ecx
c0028ade:	85 f6                	test   esi,esi
c0028ae0:	78 0c                	js     c0028aee <__muldf3+0x1f6>
c0028ae2:	01 f6                	add    esi,esi
c0028ae4:	89 f8                	mov    eax,edi
c0028ae6:	c1 e8 1f             	shr    eax,0x1f
c0028ae9:	09 c6                	or     esi,eax
c0028aeb:	01 ff                	add    edi,edi
c0028aed:	4b                   	dec    ebx
c0028aee:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028af4:	0f 8f 85 00 00 00    	jg     c0028b7f <__muldf3+0x287>
c0028afa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028b00:	85 db                	test   ebx,ebx
c0028b02:	0f 8f 84 00 00 00    	jg     c0028b8c <__muldf3+0x294>
c0028b08:	83 fb cc             	cmp    ebx,0xffffffcc
c0028b0b:	7c 79                	jl     c0028b86 <__muldf3+0x28e>
c0028b0d:	ba 01 00 00 00       	mov    edx,0x1
c0028b12:	29 da                	sub    edx,ebx
c0028b14:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028b1a:	83 fa 1f             	cmp    edx,0x1f
c0028b1d:	7e 30                	jle    c0028b4f <__muldf3+0x257>
c0028b1f:	83 fa 20             	cmp    edx,0x20
c0028b22:	75 0b                	jne    c0028b2f <__muldf3+0x237>
c0028b24:	31 c0                	xor    eax,eax
c0028b26:	85 ff                	test   edi,edi
c0028b28:	0f 95 c0             	setne  al
c0028b2b:	89 c7                	mov    edi,eax
c0028b2d:	eb 1a                	jmp    c0028b49 <__muldf3+0x251>
c0028b2f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028b32:	89 f0                	mov    eax,esi
c0028b34:	d3 e0                	shl    eax,cl
c0028b36:	09 f8                	or     eax,edi
c0028b38:	0f 95 c0             	setne  al
c0028b3b:	0f b6 c0             	movzx  eax,al
c0028b3e:	89 c7                	mov    edi,eax
c0028b40:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028b45:	29 d9                	sub    ecx,ebx
c0028b47:	d3 ee                	shr    esi,cl
c0028b49:	09 f7                	or     edi,esi
c0028b4b:	31 db                	xor    ebx,ebx
c0028b4d:	eb 3b                	jmp    c0028b8a <__muldf3+0x292>
c0028b4f:	83 c3 1f             	add    ebx,0x1f
c0028b52:	89 f0                	mov    eax,esi
c0028b54:	88 d9                	mov    cl,bl
c0028b56:	d3 e0                	shl    eax,cl
c0028b58:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028b5b:	89 f8                	mov    eax,edi
c0028b5d:	88 d1                	mov    cl,dl
c0028b5f:	d3 e8                	shr    eax,cl
c0028b61:	89 c1                	mov    ecx,eax
c0028b63:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028b66:	09 c8                	or     eax,ecx
c0028b68:	88 d9                	mov    cl,bl
c0028b6a:	d3 e7                	shl    edi,cl
c0028b6c:	31 db                	xor    ebx,ebx
c0028b6e:	85 ff                	test   edi,edi
c0028b70:	0f 95 c3             	setne  bl
c0028b73:	89 df                	mov    edi,ebx
c0028b75:	09 c7                	or     edi,eax
c0028b77:	88 d1                	mov    cl,dl
c0028b79:	d3 ee                	shr    esi,cl
c0028b7b:	31 db                	xor    ebx,ebx
c0028b7d:	eb 0d                	jmp    c0028b8c <__muldf3+0x294>
c0028b7f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028b84:	eb 02                	jmp    c0028b88 <__muldf3+0x290>
c0028b86:	31 db                	xor    ebx,ebx
c0028b88:	31 ff                	xor    edi,edi
c0028b8a:	31 f6                	xor    esi,esi
c0028b8c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028b8f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028b92:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028b97:	09 c3                	or     ebx,eax
c0028b99:	c1 e3 14             	shl    ebx,0x14
c0028b9c:	89 f0                	mov    eax,esi
c0028b9e:	c1 e8 0b             	shr    eax,0xb
c0028ba1:	09 c3                	or     ebx,eax
c0028ba3:	89 f8                	mov    eax,edi
c0028ba5:	c1 e8 0b             	shr    eax,0xb
c0028ba8:	c1 e6 15             	shl    esi,0x15
c0028bab:	09 c6                	or     esi,eax
c0028bad:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028bb3:	0f 95 c1             	setne  cl
c0028bb6:	09 c8                	or     eax,ecx
c0028bb8:	83 e0 01             	and    eax,0x1
c0028bbb:	c1 ef 0a             	shr    edi,0xa
c0028bbe:	21 c7                	and    edi,eax
c0028bc0:	01 f7                	add    edi,esi
c0028bc2:	83 d3 00             	adc    ebx,0x0
c0028bc5:	89 da                	mov    edx,ebx
c0028bc7:	eb 03                	jmp    c0028bcc <__muldf3+0x2d4>
c0028bc9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028bcc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028bcf:	89 f8                	mov    eax,edi
c0028bd1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028bd4:	83 c4 24             	add    esp,0x24
c0028bd7:	5b                   	pop    ebx
c0028bd8:	5e                   	pop    esi
c0028bd9:	5f                   	pop    edi
c0028bda:	5d                   	pop    ebp
c0028bdb:	c3                   	ret    

c0028bdc <__divdf3>:
c0028bdc:	55                   	push   ebp
c0028bdd:	89 e5                	mov    ebp,esp
c0028bdf:	57                   	push   edi
c0028be0:	56                   	push   esi
c0028be1:	53                   	push   ebx
c0028be2:	83 ec 2c             	sub    esp,0x2c
c0028be5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028be8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028beb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028bee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028bf1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028bf4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028bf7:	89 ce                	mov    esi,ecx
c0028bf9:	89 c8                	mov    eax,ecx
c0028bfb:	c1 f8 14             	sar    eax,0x14
c0028bfe:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028c01:	89 f8                	mov    eax,edi
c0028c03:	89 fb                	mov    ebx,edi
c0028c05:	c1 e3 0b             	shl    ebx,0xb
c0028c08:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0028c0b:	c1 e6 0b             	shl    esi,0xb
c0028c0e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028c14:	c1 e8 15             	shr    eax,0x15
c0028c17:	09 c6                	or     esi,eax
c0028c19:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0028c1c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028c1f:	89 c2                	mov    edx,eax
c0028c21:	c1 fa 14             	sar    edx,0x14
c0028c24:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028c27:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028c2a:	89 de                	mov    esi,ebx
c0028c2c:	c1 e6 0b             	shl    esi,0xb
c0028c2f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028c32:	c1 e0 0b             	shl    eax,0xb
c0028c35:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028c3a:	c1 eb 15             	shr    ebx,0x15
c0028c3d:	09 d8                	or     eax,ebx
c0028c3f:	89 c2                	mov    edx,eax
c0028c41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028c44:	25 ff 07 00 00       	and    eax,0x7ff
c0028c49:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0028c4c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028c4f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028c55:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028c58:	29 d8                	sub    eax,ebx
c0028c5a:	05 ff 03 00 00       	add    eax,0x3ff
c0028c5f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028c62:	46                   	inc    esi
c0028c63:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028c69:	0f 85 a5 00 00 00    	jne    c0028d14 <__divdf3+0x138>
c0028c6f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028c72:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028c75:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028c79:	74 2a                	je     c0028ca5 <__divdf3+0xc9>
c0028c7b:	85 f6                	test   esi,esi
c0028c7d:	0f 85 cc 02 00 00    	jne    c0028f4f <__divdf3+0x373>
c0028c83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028c86:	40                   	inc    eax
c0028c87:	a9 fe 07 00 00       	test   eax,0x7fe
c0028c8c:	75 26                	jne    c0028cb4 <__divdf3+0xd8>
c0028c8e:	85 db                	test   ebx,ebx
c0028c90:	74 22                	je     c0028cb4 <__divdf3+0xd8>
c0028c92:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028c95:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028c98:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028c9b:	09 d0                	or     eax,edx
c0028c9d:	0f 85 ac 02 00 00    	jne    c0028f4f <__divdf3+0x373>
c0028ca3:	eb 63                	jmp    c0028d08 <__divdf3+0x12c>
c0028ca5:	85 f6                	test   esi,esi
c0028ca7:	75 22                	jne    c0028ccb <__divdf3+0xef>
c0028ca9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028cac:	40                   	inc    eax
c0028cad:	a9 fe 07 00 00       	test   eax,0x7fe
c0028cb2:	74 36                	je     c0028cea <__divdf3+0x10e>
c0028cb4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028cb8:	0f 89 91 02 00 00    	jns    c0028f4f <__divdf3+0x373>
c0028cbe:	89 f8                	mov    eax,edi
c0028cc0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028cc6:	e9 80 02 00 00       	jmp    c0028f4b <__divdf3+0x36f>
c0028ccb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028cce:	01 f6                	add    esi,esi
c0028cd0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028cd3:	c1 ef 1f             	shr    edi,0x1f
c0028cd6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028cd9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028cdc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028cdf:	09 f7                	or     edi,esi
c0028ce1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028ce4:	78 2e                	js     c0028d14 <__divdf3+0x138>
c0028ce6:	89 c8                	mov    eax,ecx
c0028ce8:	eb e1                	jmp    c0028ccb <__divdf3+0xef>
c0028cea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028ced:	09 d0                	or     eax,edx
c0028cef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028cf3:	74 0f                	je     c0028d04 <__divdf3+0x128>
c0028cf5:	85 c0                	test   eax,eax
c0028cf7:	74 bb                	je     c0028cb4 <__divdf3+0xd8>
c0028cf9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028cfc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028cff:	e9 4b 02 00 00       	jmp    c0028f4f <__divdf3+0x373>
c0028d04:	85 c0                	test   eax,eax
c0028d06:	75 ac                	jne    c0028cb4 <__divdf3+0xd8>
c0028d08:	31 ff                	xor    edi,edi
c0028d0a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028d0f:	e9 3b 02 00 00       	jmp    c0028f4f <__divdf3+0x373>
c0028d14:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028d17:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028d1a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028d20:	75 6b                	jne    c0028d8d <__divdf3+0x1b1>
c0028d22:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028d25:	09 d6                	or     esi,edx
c0028d27:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028d2b:	74 28                	je     c0028d55 <__divdf3+0x179>
c0028d2d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028d30:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028d33:	85 f6                	test   esi,esi
c0028d35:	0f 85 14 02 00 00    	jne    c0028f4f <__divdf3+0x373>
c0028d3b:	31 ff                	xor    edi,edi
c0028d3d:	31 c9                	xor    ecx,ecx
c0028d3f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028d42:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028d45:	0f 89 04 02 00 00    	jns    c0028f4f <__divdf3+0x373>
c0028d4b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028d50:	e9 fa 01 00 00       	jmp    c0028f4f <__divdf3+0x373>
c0028d55:	85 f6                	test   esi,esi
c0028d57:	75 1b                	jne    c0028d74 <__divdf3+0x198>
c0028d59:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028d5c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028d5f:	25 00 00 00 80       	and    eax,0x80000000
c0028d64:	31 c9                	xor    ecx,ecx
c0028d66:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028d6b:	89 cf                	mov    edi,ecx
c0028d6d:	89 c1                	mov    ecx,eax
c0028d6f:	e9 db 01 00 00       	jmp    c0028f4f <__divdf3+0x373>
c0028d74:	01 d2                	add    edx,edx
c0028d76:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028d79:	c1 eb 1f             	shr    ebx,0x1f
c0028d7c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028d7f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028d82:	8d 48 01             	lea    ecx,[eax+0x1]
c0028d85:	09 da                	or     edx,ebx
c0028d87:	78 04                	js     c0028d8d <__divdf3+0x1b1>
c0028d89:	89 c8                	mov    eax,ecx
c0028d8b:	eb e7                	jmp    c0028d74 <__divdf3+0x198>
c0028d8d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028d90:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028d96:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028d9c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028d9f:	39 d6                	cmp    esi,edx
c0028da1:	77 0d                	ja     c0028db0 <__divdf3+0x1d4>
c0028da3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028da6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028da9:	72 1b                	jb     c0028dc6 <__divdf3+0x1ea>
c0028dab:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028dae:	75 16                	jne    c0028dc6 <__divdf3+0x1ea>
c0028db0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028db3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028db6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028db9:	83 de 00             	sbb    esi,0x0
c0028dbc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028dbf:	ba 01 00 00 00       	mov    edx,0x1
c0028dc4:	eb 02                	jmp    c0028dc8 <__divdf3+0x1ec>
c0028dc6:	31 d2                	xor    edx,edx
c0028dc8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028dcf:	31 ff                	xor    edi,edi
c0028dd1:	01 ff                	add    edi,edi
c0028dd3:	89 d1                	mov    ecx,edx
c0028dd5:	c1 e9 1f             	shr    ecx,0x1f
c0028dd8:	09 cf                	or     edi,ecx
c0028dda:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028ddd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028de0:	89 da                	mov    edx,ebx
c0028de2:	89 f3                	mov    ebx,esi
c0028de4:	8d 34 36             	lea    esi,[esi+esi*1]
c0028de7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028dea:	c1 e9 1f             	shr    ecx,0x1f
c0028ded:	09 ce                	or     esi,ecx
c0028def:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028df2:	01 c9                	add    ecx,ecx
c0028df4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028df7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028dfa:	85 db                	test   ebx,ebx
c0028dfc:	78 29                	js     c0028e27 <__divdf3+0x24b>
c0028dfe:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028e01:	72 07                	jb     c0028e0a <__divdf3+0x22e>
c0028e03:	75 3c                	jne    c0028e41 <__divdf3+0x265>
c0028e05:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028e08:	77 37                	ja     c0028e41 <__divdf3+0x265>
c0028e0a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028e0d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028e10:	31 d2                	xor    edx,edx
c0028e12:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028e15:	0f 97 c2             	seta   dl
c0028e18:	29 d6                	sub    esi,edx
c0028e1a:	89 d9                	mov    ecx,ebx
c0028e1c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028e1f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028e22:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028e25:	eb 17                	jmp    c0028e3e <__divdf3+0x262>
c0028e27:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028e2a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028e2d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028e30:	0f 97 c1             	seta   cl
c0028e33:	0f b6 c9             	movzx  ecx,cl
c0028e36:	29 ce                	sub    esi,ecx
c0028e38:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028e3b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028e3e:	83 ca 01             	or     edx,0x1
c0028e41:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028e44:	75 8b                	jne    c0028dd1 <__divdf3+0x1f5>
c0028e46:	c1 e7 09             	shl    edi,0x9
c0028e49:	89 d1                	mov    ecx,edx
c0028e4b:	c1 e9 17             	shr    ecx,0x17
c0028e4e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028e51:	09 f3                	or     ebx,esi
c0028e53:	0f 95 c3             	setne  bl
c0028e56:	0f b6 db             	movzx  ebx,bl
c0028e59:	c1 e2 09             	shl    edx,0x9
c0028e5c:	09 d3                	or     ebx,edx
c0028e5e:	89 ca                	mov    edx,ecx
c0028e60:	09 fa                	or     edx,edi
c0028e62:	78 0c                	js     c0028e70 <__divdf3+0x294>
c0028e64:	01 d2                	add    edx,edx
c0028e66:	89 d9                	mov    ecx,ebx
c0028e68:	c1 e9 1f             	shr    ecx,0x1f
c0028e6b:	09 ca                	or     edx,ecx
c0028e6d:	01 db                	add    ebx,ebx
c0028e6f:	48                   	dec    eax
c0028e70:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028e75:	0f 8f 83 00 00 00    	jg     c0028efe <__divdf3+0x322>
c0028e7b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e81:	85 c0                	test   eax,eax
c0028e83:	0f 8f 82 00 00 00    	jg     c0028f0b <__divdf3+0x32f>
c0028e89:	83 f8 cc             	cmp    eax,0xffffffcc
c0028e8c:	7c 77                	jl     c0028f05 <__divdf3+0x329>
c0028e8e:	be 01 00 00 00       	mov    esi,0x1
c0028e93:	29 c6                	sub    esi,eax
c0028e95:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028e9b:	83 fe 1f             	cmp    esi,0x1f
c0028e9e:	7e 2f                	jle    c0028ecf <__divdf3+0x2f3>
c0028ea0:	83 fe 20             	cmp    esi,0x20
c0028ea3:	75 0a                	jne    c0028eaf <__divdf3+0x2d3>
c0028ea5:	85 db                	test   ebx,ebx
c0028ea7:	0f 95 c3             	setne  bl
c0028eaa:	0f b6 db             	movzx  ebx,bl
c0028ead:	eb 1a                	jmp    c0028ec9 <__divdf3+0x2ed>
c0028eaf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028eb2:	89 d7                	mov    edi,edx
c0028eb4:	d3 e7                	shl    edi,cl
c0028eb6:	89 f9                	mov    ecx,edi
c0028eb8:	09 d9                	or     ecx,ebx
c0028eba:	0f 95 c3             	setne  bl
c0028ebd:	0f b6 db             	movzx  ebx,bl
c0028ec0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028ec5:	29 c1                	sub    ecx,eax
c0028ec7:	d3 ea                	shr    edx,cl
c0028ec9:	09 d3                	or     ebx,edx
c0028ecb:	31 c0                	xor    eax,eax
c0028ecd:	eb 3a                	jmp    c0028f09 <__divdf3+0x32d>
c0028ecf:	83 c0 1f             	add    eax,0x1f
c0028ed2:	89 d7                	mov    edi,edx
c0028ed4:	88 c1                	mov    cl,al
c0028ed6:	d3 e7                	shl    edi,cl
c0028ed8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028edb:	89 df                	mov    edi,ebx
c0028edd:	89 f1                	mov    ecx,esi
c0028edf:	d3 ef                	shr    edi,cl
c0028ee1:	89 f9                	mov    ecx,edi
c0028ee3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028ee6:	09 cf                	or     edi,ecx
c0028ee8:	88 c1                	mov    cl,al
c0028eea:	d3 e3                	shl    ebx,cl
c0028eec:	85 db                	test   ebx,ebx
c0028eee:	0f 95 c3             	setne  bl
c0028ef1:	0f b6 db             	movzx  ebx,bl
c0028ef4:	09 fb                	or     ebx,edi
c0028ef6:	89 f1                	mov    ecx,esi
c0028ef8:	d3 ea                	shr    edx,cl
c0028efa:	31 c0                	xor    eax,eax
c0028efc:	eb 0d                	jmp    c0028f0b <__divdf3+0x32f>
c0028efe:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028f03:	eb 02                	jmp    c0028f07 <__divdf3+0x32b>
c0028f05:	31 c0                	xor    eax,eax
c0028f07:	31 db                	xor    ebx,ebx
c0028f09:	31 d2                	xor    edx,edx
c0028f0b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028f0e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028f11:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028f17:	09 c8                	or     eax,ecx
c0028f19:	c1 e0 14             	shl    eax,0x14
c0028f1c:	89 d1                	mov    ecx,edx
c0028f1e:	c1 e9 0b             	shr    ecx,0xb
c0028f21:	09 c8                	or     eax,ecx
c0028f23:	89 c6                	mov    esi,eax
c0028f25:	89 d9                	mov    ecx,ebx
c0028f27:	c1 e9 0b             	shr    ecx,0xb
c0028f2a:	c1 e2 15             	shl    edx,0x15
c0028f2d:	09 ca                	or     edx,ecx
c0028f2f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028f35:	0f 95 c0             	setne  al
c0028f38:	09 c1                	or     ecx,eax
c0028f3a:	83 e1 01             	and    ecx,0x1
c0028f3d:	c1 eb 0a             	shr    ebx,0xa
c0028f40:	21 cb                	and    ebx,ecx
c0028f42:	01 d3                	add    ebx,edx
c0028f44:	89 d8                	mov    eax,ebx
c0028f46:	83 d6 00             	adc    esi,0x0
c0028f49:	89 f2                	mov    edx,esi
c0028f4b:	89 c7                	mov    edi,eax
c0028f4d:	89 d1                	mov    ecx,edx
c0028f4f:	89 f8                	mov    eax,edi
c0028f51:	89 ca                	mov    edx,ecx
c0028f53:	83 c4 2c             	add    esp,0x2c
c0028f56:	5b                   	pop    ebx
c0028f57:	5e                   	pop    esi
c0028f58:	5f                   	pop    edi
c0028f59:	5d                   	pop    ebp
c0028f5a:	c3                   	ret    

c0028f5b <__floatsidf>:
c0028f5b:	55                   	push   ebp
c0028f5c:	89 e5                	mov    ebp,esp
c0028f5e:	56                   	push   esi
c0028f5f:	53                   	push   ebx
c0028f60:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028f63:	85 db                	test   ebx,ebx
c0028f65:	7e 15                	jle    c0028f7c <__floatsidf+0x21>
c0028f67:	0f bd cb             	bsr    ecx,ebx
c0028f6a:	83 f1 1f             	xor    ecx,0x1f
c0028f6d:	d3 e3                	shl    ebx,cl
c0028f6f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028f75:	b8 1e 04 00 00       	mov    eax,0x41e
c0028f7a:	eb 21                	jmp    c0028f9d <__floatsidf+0x42>
c0028f7c:	b8 00 00 00 00       	mov    eax,0x0
c0028f81:	ba 00 00 00 00       	mov    edx,0x0
c0028f86:	74 2a                	je     c0028fb2 <__floatsidf+0x57>
c0028f88:	f7 db                	neg    ebx
c0028f8a:	0f bd cb             	bsr    ecx,ebx
c0028f8d:	83 f1 1f             	xor    ecx,0x1f
c0028f90:	d3 e3                	shl    ebx,cl
c0028f92:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028f98:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028f9d:	29 c8                	sub    eax,ecx
c0028f9f:	c1 e0 14             	shl    eax,0x14
c0028fa2:	89 c1                	mov    ecx,eax
c0028fa4:	89 de                	mov    esi,ebx
c0028fa6:	c1 ee 0b             	shr    esi,0xb
c0028fa9:	09 f1                	or     ecx,esi
c0028fab:	89 ca                	mov    edx,ecx
c0028fad:	c1 e3 15             	shl    ebx,0x15
c0028fb0:	89 d8                	mov    eax,ebx
c0028fb2:	5b                   	pop    ebx
c0028fb3:	5e                   	pop    esi
c0028fb4:	5d                   	pop    ebp
c0028fb5:	c3                   	ret    

c0028fb6 <__floatunsidf>:
c0028fb6:	55                   	push   ebp
c0028fb7:	89 e5                	mov    ebp,esp
c0028fb9:	56                   	push   esi
c0028fba:	53                   	push   ebx
c0028fbb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028fbe:	85 db                	test   ebx,ebx
c0028fc0:	74 2a                	je     c0028fec <__floatunsidf+0x36>
c0028fc2:	0f bd cb             	bsr    ecx,ebx
c0028fc5:	83 f1 1f             	xor    ecx,0x1f
c0028fc8:	d3 e3                	shl    ebx,cl
c0028fca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028fd0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028fd5:	29 c8                	sub    eax,ecx
c0028fd7:	c1 e0 14             	shl    eax,0x14
c0028fda:	89 c1                	mov    ecx,eax
c0028fdc:	89 de                	mov    esi,ebx
c0028fde:	c1 ee 0b             	shr    esi,0xb
c0028fe1:	09 f1                	or     ecx,esi
c0028fe3:	89 ca                	mov    edx,ecx
c0028fe5:	c1 e3 15             	shl    ebx,0x15
c0028fe8:	89 d8                	mov    eax,ebx
c0028fea:	eb 04                	jmp    c0028ff0 <__floatunsidf+0x3a>
c0028fec:	31 c0                	xor    eax,eax
c0028fee:	31 d2                	xor    edx,edx
c0028ff0:	5b                   	pop    ebx
c0028ff1:	5e                   	pop    esi
c0028ff2:	5d                   	pop    ebp
c0028ff3:	c3                   	ret    

c0028ff4 <__fixdfsi>:
c0028ff4:	55                   	push   ebp
c0028ff5:	89 e5                	mov    ebp,esp
c0028ff7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028ffa:	89 d1                	mov    ecx,edx
c0028ffc:	c1 e1 0b             	shl    ecx,0xb
c0028fff:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0029005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0029008:	c1 e8 15             	shr    eax,0x15
c002900b:	09 c1                	or     ecx,eax
c002900d:	c1 fa 14             	sar    edx,0x14
c0029010:	78 1f                	js     c0029031 <__fixdfsi+0x3d>
c0029012:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0029018:	31 c0                	xor    eax,eax
c002901a:	83 fa 1e             	cmp    edx,0x1e
c002901d:	77 40                	ja     c002905f <__fixdfsi+0x6b>
c002901f:	89 c8                	mov    eax,ecx
c0029021:	0d 00 00 00 80       	or     eax,0x80000000
c0029026:	b9 1f 00 00 00       	mov    ecx,0x1f
c002902b:	29 d1                	sub    ecx,edx
c002902d:	d3 e8                	shr    eax,cl
c002902f:	eb 2e                	jmp    c002905f <__fixdfsi+0x6b>
c0029031:	31 c0                	xor    eax,eax
c0029033:	81 c2 01 04 00 00    	add    edx,0x401
c0029039:	78 24                	js     c002905f <__fixdfsi+0x6b>
c002903b:	83 fa 1e             	cmp    edx,0x1e
c002903e:	7e 09                	jle    c0029049 <__fixdfsi+0x55>
c0029040:	83 fa 1f             	cmp    edx,0x1f
c0029043:	75 18                	jne    c002905d <__fixdfsi+0x69>
c0029045:	85 c9                	test   ecx,ecx
c0029047:	75 14                	jne    c002905d <__fixdfsi+0x69>
c0029049:	89 c8                	mov    eax,ecx
c002904b:	0d 00 00 00 80       	or     eax,0x80000000
c0029050:	b9 1f 00 00 00       	mov    ecx,0x1f
c0029055:	29 d1                	sub    ecx,edx
c0029057:	d3 e8                	shr    eax,cl
c0029059:	f7 d8                	neg    eax
c002905b:	eb 02                	jmp    c002905f <__fixdfsi+0x6b>
c002905d:	31 c0                	xor    eax,eax
c002905f:	5d                   	pop    ebp
c0029060:	c3                   	ret    

c0029061 <__fixunsdfsi>:
c0029061:	55                   	push   ebp
c0029062:	89 e5                	mov    ebp,esp
c0029064:	53                   	push   ebx
c0029065:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0029068:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002906b:	89 d3                	mov    ebx,edx
c002906d:	c1 fb 14             	sar    ebx,0x14
c0029070:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0029076:	31 c0                	xor    eax,eax
c0029078:	83 fb 1f             	cmp    ebx,0x1f
c002907b:	77 1d                	ja     c002909a <__fixunsdfsi+0x39>
c002907d:	89 d0                	mov    eax,edx
c002907f:	c1 e0 0b             	shl    eax,0xb
c0029082:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0029087:	c1 e9 15             	shr    ecx,0x15
c002908a:	09 c8                	or     eax,ecx
c002908c:	0d 00 00 00 80       	or     eax,0x80000000
c0029091:	b9 1f 00 00 00       	mov    ecx,0x1f
c0029096:	29 d9                	sub    ecx,ebx
c0029098:	d3 e8                	shr    eax,cl
c002909a:	5b                   	pop    ebx
c002909b:	5d                   	pop    ebp
c002909c:	c3                   	ret    

c002909d <__cmpdf2>:
c002909d:	55                   	push   ebp
c002909e:	89 e5                	mov    ebp,esp
c00290a0:	57                   	push   edi
c00290a1:	56                   	push   esi
c00290a2:	53                   	push   ebx
c00290a3:	83 ec 0c             	sub    esp,0xc
c00290a6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00290a9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00290ac:	89 ca                	mov    edx,ecx
c00290ae:	c1 ea 14             	shr    edx,0x14
c00290b1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00290b7:	89 cb                	mov    ebx,ecx
c00290b9:	c1 fb 1f             	sar    ebx,0x1f
c00290bc:	31 da                	xor    edx,ebx
c00290be:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00290c1:	89 df                	mov    edi,ebx
c00290c3:	c1 e7 0b             	shl    edi,0xb
c00290c6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00290c9:	c1 e1 0b             	shl    ecx,0xb
c00290cc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00290d2:	c1 eb 15             	shr    ebx,0x15
c00290d5:	09 d9                	or     ecx,ebx
c00290d7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00290da:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00290dd:	89 ce                	mov    esi,ecx
c00290df:	c1 ee 14             	shr    esi,0x14
c00290e2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00290e8:	89 cb                	mov    ebx,ecx
c00290ea:	c1 fb 1f             	sar    ebx,0x1f
c00290ed:	31 de                	xor    esi,ebx
c00290ef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00290f2:	89 df                	mov    edi,ebx
c00290f4:	c1 e7 0b             	shl    edi,0xb
c00290f7:	c1 e1 0b             	shl    ecx,0xb
c00290fa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0029100:	c1 eb 15             	shr    ebx,0x15
c0029103:	09 d9                	or     ecx,ebx
c0029105:	89 d3                	mov    ebx,edx
c0029107:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002910d:	43                   	inc    ebx
c002910e:	83 fb 01             	cmp    ebx,0x1
c0029111:	77 08                	ja     c002911b <__cmpdf2+0x7e>
c0029113:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0029116:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0029119:	75 68                	jne    c0029183 <__cmpdf2+0xe6>
c002911b:	89 f3                	mov    ebx,esi
c002911d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0029123:	43                   	inc    ebx
c0029124:	83 fb 01             	cmp    ebx,0x1
c0029127:	77 06                	ja     c002912f <__cmpdf2+0x92>
c0029129:	89 fb                	mov    ebx,edi
c002912b:	09 cb                	or     ebx,ecx
c002912d:	75 54                	jne    c0029183 <__cmpdf2+0xe6>
c002912f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0029132:	09 f8                	or     eax,edi
c0029134:	09 c8                	or     eax,ecx
c0029136:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0029139:	75 12                	jne    c002914d <__cmpdf2+0xb0>
c002913b:	8d 42 01             	lea    eax,[edx+0x1]
c002913e:	83 f8 01             	cmp    eax,0x1
c0029141:	77 0a                	ja     c002914d <__cmpdf2+0xb0>
c0029143:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029146:	31 c0                	xor    eax,eax
c0029148:	83 fb 01             	cmp    ebx,0x1
c002914b:	76 36                	jbe    c0029183 <__cmpdf2+0xe6>
c002914d:	b8 01 00 00 00       	mov    eax,0x1
c0029152:	39 f2                	cmp    edx,esi
c0029154:	7f 2d                	jg     c0029183 <__cmpdf2+0xe6>
c0029156:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002915b:	7c 26                	jl     c0029183 <__cmpdf2+0xe6>
c002915d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0029160:	77 07                	ja     c0029169 <__cmpdf2+0xcc>
c0029162:	72 16                	jb     c002917a <__cmpdf2+0xdd>
c0029164:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0029167:	76 0a                	jbe    c0029173 <__cmpdf2+0xd6>
c0029169:	89 d0                	mov    eax,edx
c002916b:	c1 f8 1f             	sar    eax,0x1f
c002916e:	83 c8 01             	or     eax,0x1
c0029171:	eb 10                	jmp    c0029183 <__cmpdf2+0xe6>
c0029173:	b8 00 00 00 00       	mov    eax,0x0
c0029178:	73 09                	jae    c0029183 <__cmpdf2+0xe6>
c002917a:	89 d0                	mov    eax,edx
c002917c:	c1 f8 1f             	sar    eax,0x1f
c002917f:	83 e0 02             	and    eax,0x2
c0029182:	48                   	dec    eax
c0029183:	83 c4 0c             	add    esp,0xc
c0029186:	5b                   	pop    ebx
c0029187:	5e                   	pop    esi
c0029188:	5f                   	pop    edi
c0029189:	5d                   	pop    ebp
c002918a:	c3                   	ret    

c002918b <__eqdf2>:
c002918b:	55                   	push   ebp
c002918c:	89 e5                	mov    ebp,esp
c002918e:	50                   	push   eax
c002918f:	6a 01                	push   0x1
c0029191:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0029194:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0029197:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002919a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002919d:	e8 fb fe ff ff       	call   c002909d <__cmpdf2>
c00291a2:	83 c4 18             	add    esp,0x18
c00291a5:	c9                   	leave  
c00291a6:	c3                   	ret    

c00291a7 <__nedf2>:
c00291a7:	eb e2                	jmp    c002918b <__eqdf2>

c00291a9 <__gtdf2>:
c00291a9:	55                   	push   ebp
c00291aa:	89 e5                	mov    ebp,esp
c00291ac:	50                   	push   eax
c00291ad:	6a ff                	push   0xffffffff
c00291af:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00291b2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00291b5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00291b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00291bb:	e8 dd fe ff ff       	call   c002909d <__cmpdf2>
c00291c0:	83 c4 18             	add    esp,0x18
c00291c3:	c9                   	leave  
c00291c4:	c3                   	ret    

c00291c5 <__gedf2>:
c00291c5:	eb e2                	jmp    c00291a9 <__gtdf2>

c00291c7 <__ltdf2>:
c00291c7:	eb c2                	jmp    c002918b <__eqdf2>

c00291c9 <__ledf2>:
c00291c9:	eb c0                	jmp    c002918b <__eqdf2>

c00291cb <__truncdfsf2>:
c00291cb:	55                   	push   ebp
c00291cc:	89 e5                	mov    ebp,esp
c00291ce:	57                   	push   edi
c00291cf:	56                   	push   esi
c00291d0:	53                   	push   ebx
c00291d1:	83 ec 0c             	sub    esp,0xc
c00291d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00291d7:	89 d1                	mov    ecx,edx
c00291d9:	c1 f9 14             	sar    ecx,0x14
c00291dc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00291df:	89 df                	mov    edi,ebx
c00291e1:	c1 e7 0b             	shl    edi,0xb
c00291e4:	89 d0                	mov    eax,edx
c00291e6:	c1 e0 0b             	shl    eax,0xb
c00291e9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00291ee:	c1 eb 15             	shr    ebx,0x15
c00291f1:	09 d8                	or     eax,ebx
c00291f3:	89 cb                	mov    ebx,ecx
c00291f5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00291fb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0029201:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0029207:	0f 86 9e 00 00 00    	jbe    c00292ab <__truncdfsf2+0xe0>
c002920d:	85 db                	test   ebx,ebx
c002920f:	75 0a                	jne    c002921b <__truncdfsf2+0x50>
c0029211:	c1 fa 17             	sar    edx,0x17
c0029214:	30 d2                	xor    dl,dl
c0029216:	e9 84 00 00 00       	jmp    c002929f <__truncdfsf2+0xd4>
c002921b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0029221:	83 fe 83             	cmp    esi,0xffffff83
c0029224:	7d 4b                	jge    c0029271 <__truncdfsf2+0xa6>
c0029226:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002922b:	29 f1                	sub    ecx,esi
c002922d:	83 f9 1f             	cmp    ecx,0x1f
c0029230:	7f 6b                	jg     c002929d <__truncdfsf2+0xd2>
c0029232:	0d 00 00 00 80       	or     eax,0x80000000
c0029237:	89 c3                	mov    ebx,eax
c0029239:	d3 eb                	shr    ebx,cl
c002923b:	be 01 00 00 00       	mov    esi,0x1
c0029240:	d3 e6                	shl    esi,cl
c0029242:	4e                   	dec    esi
c0029243:	21 f0                	and    eax,esi
c0029245:	09 f8                	or     eax,edi
c0029247:	0f 95 c0             	setne  al
c002924a:	0f b6 c0             	movzx  eax,al
c002924d:	09 c3                	or     ebx,eax
c002924f:	89 d9                	mov    ecx,ebx
c0029251:	c1 e9 08             	shr    ecx,0x8
c0029254:	f6 c3 7f             	test   bl,0x7f
c0029257:	0f 95 c0             	setne  al
c002925a:	09 c8                	or     eax,ecx
c002925c:	83 e0 01             	and    eax,0x1
c002925f:	c1 eb 07             	shr    ebx,0x7
c0029262:	21 c3                	and    ebx,eax
c0029264:	81 e2 00 00 00 80    	and    edx,0x80000000
c002926a:	09 d1                	or     ecx,edx
c002926c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002926f:	eb 76                	jmp    c00292e7 <__truncdfsf2+0x11c>
c0029271:	83 c6 80             	add    esi,0xffffff80
c0029274:	7e 1d                	jle    c0029293 <__truncdfsf2+0xc8>
c0029276:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002927c:	75 0b                	jne    c0029289 <__truncdfsf2+0xbe>
c002927e:	09 f8                	or     eax,edi
c0029280:	74 09                	je     c002928b <__truncdfsf2+0xc0>
c0029282:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0029287:	eb 02                	jmp    c002928b <__truncdfsf2+0xc0>
c0029289:	31 c0                	xor    eax,eax
c002928b:	c1 fa 17             	sar    edx,0x17
c002928e:	80 ca ff             	or     dl,0xff
c0029291:	eb 0e                	jmp    c00292a1 <__truncdfsf2+0xd6>
c0029293:	c1 fa 1f             	sar    edx,0x1f
c0029296:	c1 e2 08             	shl    edx,0x8
c0029299:	09 ca                	or     edx,ecx
c002929b:	eb 04                	jmp    c00292a1 <__truncdfsf2+0xd6>
c002929d:	31 d2                	xor    edx,edx
c002929f:	31 c0                	xor    eax,eax
c00292a1:	c1 e2 17             	shl    edx,0x17
c00292a4:	c1 e8 08             	shr    eax,0x8
c00292a7:	09 d0                	or     eax,edx
c00292a9:	eb 3c                	jmp    c00292e7 <__truncdfsf2+0x11c>
c00292ab:	81 e9 80 03 00 00    	sub    ecx,0x380
c00292b1:	89 ca                	mov    edx,ecx
c00292b3:	c1 fa 0b             	sar    edx,0xb
c00292b6:	c1 e2 08             	shl    edx,0x8
c00292b9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00292bc:	31 db                	xor    ebx,ebx
c00292be:	85 ff                	test   edi,edi
c00292c0:	0f 95 c3             	setne  bl
c00292c3:	09 d8                	or     eax,ebx
c00292c5:	89 c3                	mov    ebx,eax
c00292c7:	c1 eb 08             	shr    ebx,0x8
c00292ca:	a8 7f                	test   al,0x7f
c00292cc:	0f 95 c2             	setne  dl
c00292cf:	89 d6                	mov    esi,edx
c00292d1:	09 de                	or     esi,ebx
c00292d3:	83 e6 01             	and    esi,0x1
c00292d6:	c1 e8 07             	shr    eax,0x7
c00292d9:	21 f0                	and    eax,esi
c00292db:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00292de:	09 ca                	or     edx,ecx
c00292e0:	c1 e2 17             	shl    edx,0x17
c00292e3:	09 da                	or     edx,ebx
c00292e5:	01 d0                	add    eax,edx
c00292e7:	83 c4 0c             	add    esp,0xc
c00292ea:	5b                   	pop    ebx
c00292eb:	5e                   	pop    esi
c00292ec:	5f                   	pop    edi
c00292ed:	5d                   	pop    ebp
c00292ee:	c3                   	ret    

c00292ef <__extendsfdf2>:
c00292ef:	55                   	push   ebp
c00292f0:	89 e5                	mov    ebp,esp
c00292f2:	57                   	push   edi
c00292f3:	56                   	push   esi
c00292f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00292f7:	89 d1                	mov    ecx,edx
c00292f9:	c1 f9 17             	sar    ecx,0x17
c00292fc:	c1 e2 08             	shl    edx,0x8
c00292ff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0029305:	89 c8                	mov    eax,ecx
c0029307:	80 e4 f8             	and    ah,0xf8
c002930a:	8d 71 01             	lea    esi,[ecx+0x1]
c002930d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0029313:	75 27                	jne    c002933c <__extendsfdf2+0x4d>
c0029315:	81 e1 ff 00 00 00    	and    ecx,0xff
c002931b:	75 18                	jne    c0029335 <__extendsfdf2+0x46>
c002931d:	85 d2                	test   edx,edx
c002931f:	74 20                	je     c0029341 <__extendsfdf2+0x52>
c0029321:	41                   	inc    ecx
c0029322:	01 d2                	add    edx,edx
c0029324:	79 fb                	jns    c0029321 <__extendsfdf2+0x32>
c0029326:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002932c:	29 c8                	sub    eax,ecx
c002932e:	05 81 03 00 00       	add    eax,0x381
c0029333:	eb 0c                	jmp    c0029341 <__extendsfdf2+0x52>
c0029335:	05 00 07 00 00       	add    eax,0x700
c002933a:	eb 05                	jmp    c0029341 <__extendsfdf2+0x52>
c002933c:	05 80 03 00 00       	add    eax,0x380
c0029341:	c1 e0 14             	shl    eax,0x14
c0029344:	89 c1                	mov    ecx,eax
c0029346:	89 d0                	mov    eax,edx
c0029348:	c1 e8 0b             	shr    eax,0xb
c002934b:	09 c1                	or     ecx,eax
c002934d:	c1 e2 15             	shl    edx,0x15
c0029350:	89 d0                	mov    eax,edx
c0029352:	89 ca                	mov    edx,ecx
c0029354:	5e                   	pop    esi
c0029355:	5f                   	pop    edi
c0029356:	5d                   	pop    ebp
c0029357:	c3                   	ret    
c0029358:	66 90                	xchg   ax,ax
c002935a:	66 90                	xchg   ax,ax
c002935c:	66 90                	xchg   ax,ax
c002935e:	66 90                	xchg   ax,ax

c0029360 <fabs>:
c0029360:	83 ec 0c             	sub    esp,0xc
c0029363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029367:	89 04 24             	mov    DWORD PTR [esp],eax
c002936a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002936e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0029373:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0029377:	dd 04 24             	fld    QWORD PTR [esp]
c002937a:	83 c4 0c             	add    esp,0xc
c002937d:	c3                   	ret    
c002937e:	66 90                	xchg   ax,ax

c0029380 <lrint>:
c0029380:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0029384:	83 ec 04             	sub    esp,0x4
c0029387:	db 1c 24             	fistp  DWORD PTR [esp]
c002938a:	58                   	pop    eax
c002938b:	c3                   	ret    

c002938c <lrintf>:
c002938c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0029390:	83 ec 04             	sub    esp,0x4
c0029393:	db 1c 24             	fistp  DWORD PTR [esp]
c0029396:	58                   	pop    eax
c0029397:	c3                   	ret    

Disassembly of section .init:

c0029398 <_init>:
c0029398:	55                   	push   ebp
c0029399:	89 e5                	mov    ebp,esp
c002939b:	e8 78 6d fd ff       	call   c0000118 <frame_dummy>
c00293a0:	e8 5b e0 ff ff       	call   c0027400 <__do_global_ctors_aux>
c00293a5:	5d                   	pop    ebp
c00293a6:	c3                   	ret    

Disassembly of section .fini:

c00293a7 <_fini>:
c00293a7:	55                   	push   ebp
c00293a8:	89 e5                	mov    ebp,esp
c00293aa:	e8 f9 6c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00293af:	5d                   	pop    ebp
c00293b0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00293b2 <Computer::~Computer()>:
c00293b2:	83 ec 0c             	sub    esp,0xc
c00293b5:	ba e8 af 02 c0       	mov    edx,0xc002afe8
c00293ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293be:	89 10                	mov    DWORD PTR [eax],edx
c00293c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c4:	83 ec 0c             	sub    esp,0xc
c00293c7:	50                   	push   eax
c00293c8:	e8 71 ad fe ff       	call   c001413e <Device::~Device()>
c00293cd:	83 c4 10             	add    esp,0x10
c00293d0:	90                   	nop
c00293d1:	83 c4 0c             	add    esp,0xc
c00293d4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00293d6 <Computer::~Computer()>:
c00293d6:	83 ec 0c             	sub    esp,0xc
c00293d9:	83 ec 0c             	sub    esp,0xc
c00293dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293e0:	e8 cd ff ff ff       	call   c00293b2 <Computer::~Computer()>
c00293e5:	83 c4 10             	add    esp,0x10
c00293e8:	83 ec 08             	sub    esp,0x8
c00293eb:	68 ec 01 00 00       	push   0x1ec
c00293f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293f4:	e8 5e 99 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c00293f9:	83 c4 10             	add    esp,0x10
c00293fc:	83 c4 0c             	add    esp,0xc
c00293ff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029400 <idleCommon()>:
c0029400:	83 ec 0c             	sub    esp,0xc
c0029403:	fa                   	cli    
c0029404:	ff 05 48 29 03 c0    	inc    DWORD PTR ds:0xc0032948
c002940a:	e8 49 53 ff ff       	call   c001e758 <schedule()>
c002940f:	a1 48 29 03 c0       	mov    eax,ds:0xc0032948
c0029414:	48                   	dec    eax
c0029415:	a3 48 29 03 c0       	mov    ds:0xc0032948,eax
c002941a:	75 01                	jne    c002941d <idleCommon()+0x1d>
c002941c:	fb                   	sti    
c002941d:	83 c4 0c             	add    esp,0xc
c0029420:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029422 <LinkedList<UnixFile>::~LinkedList()>:
c0029422:	90                   	nop
c0029423:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029424 <LinkedList<UnixFile>::LinkedList()>:
c0029424:	83 ec 0c             	sub    esp,0xc
c0029427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029435:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002943c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029440:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029455:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002945c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029460:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029467:	83 ec 0c             	sub    esp,0xc
c002946a:	68 a6 b2 02 c0       	push   0xc002b2a6
c002946f:	e8 c3 99 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0029474:	83 c4 10             	add    esp,0x10
c0029477:	90                   	nop
c0029478:	83 c4 0c             	add    esp,0xc
c002947b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002947c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002947c:	83 ec 0c             	sub    esp,0xc
c002947f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029484:	75 10                	jne    c0029496 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029486:	83 ec 0c             	sub    esp,0xc
c0029489:	68 c0 b2 02 c0       	push   0xc002b2c0
c002948e:	e8 12 15 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0029493:	83 c4 10             	add    esp,0x10
c0029496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949a:	8b 00                	mov    eax,DWORD PTR [eax]
c002949c:	85 c0                	test   eax,eax
c002949e:	74 34                	je     c00294d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00294a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294a7:	85 c0                	test   eax,eax
c00294a9:	74 29                	je     c00294d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00294ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00294c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00294d2:	eb 65                	jmp    c0029539 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00294d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00294da:	85 c0                	test   eax,eax
c00294dc:	75 4b                	jne    c0029529 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00294de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294e5:	85 c0                	test   eax,eax
c00294e7:	75 40                	jne    c0029529 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00294e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294f1:	89 10                	mov    DWORD PTR [eax],edx
c00294f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00294fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029505:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002950c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029510:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029513:	85 c0                	test   eax,eax
c0029515:	74 22                	je     c0029539 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029517:	83 ec 0c             	sub    esp,0xc
c002951a:	68 e2 b2 02 c0       	push   0xc002b2e2
c002951f:	e8 81 14 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0029524:	83 c4 10             	add    esp,0x10
c0029527:	eb 10                	jmp    c0029539 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029529:	83 ec 0c             	sub    esp,0xc
c002952c:	68 ec b2 02 c0       	push   0xc002b2ec
c0029531:	e8 6f 14 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0029536:	83 c4 10             	add    esp,0x10
c0029539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002953d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029540:	8d 50 01             	lea    edx,[eax+0x1]
c0029543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029547:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002954a:	90                   	nop
c002954b:	83 c4 0c             	add    esp,0xc
c002954e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029550 <LinkedList<UnixFile>::getFirstElement()>:
c0029550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029554:	8b 00                	mov    eax,DWORD PTR [eax]
c0029556:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029558 <LinkedList<UnixFile>::removeFirst()>:
c0029558:	83 ec 0c             	sub    esp,0xc
c002955b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029561:	85 c0                	test   eax,eax
c0029563:	75 12                	jne    c0029577 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029565:	83 ec 0c             	sub    esp,0xc
c0029568:	68 f8 b2 02 c0       	push   0xc002b2f8
c002956d:	e8 33 14 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0029572:	83 c4 10             	add    esp,0x10
c0029575:	eb 7e                	jmp    c00295f5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002957b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002957e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029581:	85 c0                	test   eax,eax
c0029583:	74 10                	je     c0029595 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029585:	83 ec 0c             	sub    esp,0xc
c0029588:	68 43 b3 02 c0       	push   0xc002b343
c002958d:	e8 13 14 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0029592:	83 c4 10             	add    esp,0x10
c0029595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029599:	8b 00                	mov    eax,DWORD PTR [eax]
c002959b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002959e:	85 c0                	test   eax,eax
c00295a0:	75 33                	jne    c00295d5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00295a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295be:	83 f8 01             	cmp    eax,0x1
c00295c1:	74 21                	je     c00295e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00295c3:	83 ec 0c             	sub    esp,0xc
c00295c6:	68 1c b3 02 c0       	push   0xc002b31c
c00295cb:	e8 d5 13 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c00295d0:	83 c4 10             	add    esp,0x10
c00295d3:	eb 0f                	jmp    c00295e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00295d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00295db:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00295de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e2:	89 10                	mov    DWORD PTR [eax],edx
c00295e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00295ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00295f5:	83 c4 0c             	add    esp,0xc
c00295f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00295fa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00295fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00295fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029601:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029602 <DriverlessDevice::~DriverlessDevice()>:
c0029602:	ba fc ba 02 c0       	mov    edx,0xc002bafc
c0029607:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002960b:	89 10                	mov    DWORD PTR [eax],edx
c002960d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029611:	50                   	push   eax
c0029612:	e8 27 ab fe ff       	call   c001413e <Device::~Device()>
c0029617:	83 c4 04             	add    esp,0x4
c002961a:	90                   	nop
c002961b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002961c <DriverlessDevice::~DriverlessDevice()>:
c002961c:	83 ec 0c             	sub    esp,0xc
c002961f:	83 ec 0c             	sub    esp,0xc
c0029622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029626:	e8 d7 ff ff ff       	call   c0029602 <DriverlessDevice::~DriverlessDevice()>
c002962b:	83 c4 10             	add    esp,0x10
c002962e:	83 ec 08             	sub    esp,0x8
c0029631:	68 58 01 00 00       	push   0x158
c0029636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002963a:	e8 18 97 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c002963f:	83 c4 10             	add    esp,0x10
c0029642:	83 c4 0c             	add    esp,0xc
c0029645:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029646 <LinkedList<Device>::addElement(Device*)>:
c0029646:	83 ec 0c             	sub    esp,0xc
c0029649:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002964e:	75 10                	jne    c0029660 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029650:	83 ec 0c             	sub    esp,0xc
c0029653:	68 c0 b2 02 c0       	push   0xc002b2c0
c0029658:	e8 48 13 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c002965d:	83 c4 10             	add    esp,0x10
c0029660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029664:	8b 00                	mov    eax,DWORD PTR [eax]
c0029666:	85 c0                	test   eax,eax
c0029668:	74 3a                	je     c00296a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002966a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002966e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029671:	85 c0                	test   eax,eax
c0029673:	74 2f                	je     c00296a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029679:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002967c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029680:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002968e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029695:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029698:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00296a2:	eb 68                	jmp    c002970c <LinkedList<Device>::addElement(Device*)+0xc6>
c00296a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00296aa:	85 c0                	test   eax,eax
c00296ac:	75 4e                	jne    c00296fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00296ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296b5:	85 c0                	test   eax,eax
c00296b7:	75 43                	jne    c00296fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00296b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00296c1:	89 10                	mov    DWORD PTR [eax],edx
c00296c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00296cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00296ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296d5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00296df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00296e6:	85 c0                	test   eax,eax
c00296e8:	74 22                	je     c002970c <LinkedList<Device>::addElement(Device*)+0xc6>
c00296ea:	83 ec 0c             	sub    esp,0xc
c00296ed:	68 e2 b2 02 c0       	push   0xc002b2e2
c00296f2:	e8 ae 12 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c00296f7:	83 c4 10             	add    esp,0x10
c00296fa:	eb 10                	jmp    c002970c <LinkedList<Device>::addElement(Device*)+0xc6>
c00296fc:	83 ec 0c             	sub    esp,0xc
c00296ff:	68 ec b2 02 c0       	push   0xc002b2ec
c0029704:	e8 9c 12 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0029709:	83 c4 10             	add    esp,0x10
c002970c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029713:	8d 50 01             	lea    edx,[eax+0x1]
c0029716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002971a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002971d:	90                   	nop
c002971e:	83 c4 0c             	add    esp,0xc
c0029721:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029722 <LinkedList<Device>::LinkedList()>:
c0029722:	83 ec 0c             	sub    esp,0xc
c0029725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029729:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002972f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029733:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002973a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002973e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029749:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002974f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029753:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002975a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002975e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029765:	83 ec 0c             	sub    esp,0xc
c0029768:	68 a6 b2 02 c0       	push   0xc002b2a6
c002976d:	e8 c5 96 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0029772:	83 c4 10             	add    esp,0x10
c0029775:	90                   	nop
c0029776:	83 c4 0c             	add    esp,0xc
c0029779:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002977a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002977a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002977e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029780:	85 c0                	test   eax,eax
c0029782:	75 0e                	jne    c0029792 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029788:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002978b:	85 c0                	test   eax,eax
c002978d:	75 03                	jne    c0029792 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002978f:	b0 01                	mov    al,0x1
c0029791:	c3                   	ret    
c0029792:	b0 00                	mov    al,0x0
c0029794:	90                   	nop
c0029795:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029796 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002979a:	8b 00                	mov    eax,DWORD PTR [eax]
c002979c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002979e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002979e:	83 ec 0c             	sub    esp,0xc
c00297a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00297a7:	85 c0                	test   eax,eax
c00297a9:	75 15                	jne    c00297c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00297ab:	83 ec 0c             	sub    esp,0xc
c00297ae:	68 f8 b2 02 c0       	push   0xc002b2f8
c00297b3:	e8 ed 11 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c00297b8:	83 c4 10             	add    esp,0x10
c00297bb:	e9 88 00 00 00       	jmp    c0029848 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00297c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00297ca:	85 c0                	test   eax,eax
c00297cc:	0f 95 c0             	setne  al
c00297cf:	84 c0                	test   al,al
c00297d1:	74 10                	je     c00297e3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00297d3:	83 ec 0c             	sub    esp,0xc
c00297d6:	68 43 b3 02 c0       	push   0xc002b343
c00297db:	e8 c5 11 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c00297e0:	83 c4 10             	add    esp,0x10
c00297e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00297e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00297ec:	85 c0                	test   eax,eax
c00297ee:	0f 94 c0             	sete   al
c00297f1:	84 c0                	test   al,al
c00297f3:	74 33                	je     c0029828 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00297f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00297ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029803:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002980a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002980e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029811:	83 f8 01             	cmp    eax,0x1
c0029814:	74 21                	je     c0029837 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029816:	83 ec 0c             	sub    esp,0xc
c0029819:	68 1c b3 02 c0       	push   0xc002b31c
c002981e:	e8 82 11 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0029823:	83 c4 10             	add    esp,0x10
c0029826:	eb 0f                	jmp    c0029837 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982c:	8b 00                	mov    eax,DWORD PTR [eax]
c002982e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029835:	89 10                	mov    DWORD PTR [eax],edx
c0029837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002983b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002983e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029845:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029848:	83 c4 0c             	add    esp,0xc
c002984b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002984c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002984c:	83 ec 0c             	sub    esp,0xc
c002984f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029854:	75 10                	jne    c0029866 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029856:	83 ec 0c             	sub    esp,0xc
c0029859:	68 c0 b2 02 c0       	push   0xc002b2c0
c002985e:	e8 42 11 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0029863:	83 c4 10             	add    esp,0x10
c0029866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002986a:	8b 00                	mov    eax,DWORD PTR [eax]
c002986c:	85 c0                	test   eax,eax
c002986e:	74 34                	je     c00298a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029874:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029877:	85 c0                	test   eax,eax
c0029879:	74 29                	je     c00298a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002987b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029882:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029886:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029891:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029898:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002989b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00298a2:	eb 65                	jmp    c0029909 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00298a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00298aa:	85 c0                	test   eax,eax
c00298ac:	75 4b                	jne    c00298f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00298ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298b5:	85 c0                	test   eax,eax
c00298b7:	75 40                	jne    c00298f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00298b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00298c1:	89 10                	mov    DWORD PTR [eax],edx
c00298c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00298cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00298ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298d5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00298dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00298e3:	85 c0                	test   eax,eax
c00298e5:	74 22                	je     c0029909 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00298e7:	83 ec 0c             	sub    esp,0xc
c00298ea:	68 e2 b2 02 c0       	push   0xc002b2e2
c00298ef:	e8 b1 10 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c00298f4:	83 c4 10             	add    esp,0x10
c00298f7:	eb 10                	jmp    c0029909 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00298f9:	83 ec 0c             	sub    esp,0xc
c00298fc:	68 ec b2 02 c0       	push   0xc002b2ec
c0029901:	e8 9f 10 ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0029906:	83 c4 10             	add    esp,0x10
c0029909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002990d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029910:	8d 50 01             	lea    edx,[eax+0x1]
c0029913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029917:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002991a:	90                   	nop
c002991b:	83 c4 0c             	add    esp,0xc
c002991e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029920 <ACPI::~ACPI()>:
c0029920:	83 ec 0c             	sub    esp,0xc
c0029923:	ba 28 c5 02 c0       	mov    edx,0xc002c528
c0029928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002992c:	89 10                	mov    DWORD PTR [eax],edx
c002992e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029932:	83 ec 0c             	sub    esp,0xc
c0029935:	50                   	push   eax
c0029936:	e8 03 a8 fe ff       	call   c001413e <Device::~Device()>
c002993b:	83 c4 10             	add    esp,0x10
c002993e:	90                   	nop
c002993f:	83 c4 0c             	add    esp,0xc
c0029942:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029944 <ACPI::~ACPI()>:
c0029944:	83 ec 0c             	sub    esp,0xc
c0029947:	83 ec 0c             	sub    esp,0xc
c002994a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002994e:	e8 cd ff ff ff       	call   c0029920 <ACPI::~ACPI()>
c0029953:	83 c4 10             	add    esp,0x10
c0029956:	83 ec 08             	sub    esp,0x8
c0029959:	68 68 12 00 00       	push   0x1268
c002995e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029962:	e8 f0 93 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029967:	83 c4 10             	add    esp,0x10
c002996a:	83 c4 0c             	add    esp,0xc
c002996d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002996e <LinkedList<Device>::~LinkedList()>:
c002996e:	90                   	nop
c002996f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029970 <LinkedList<Device>::isEmpty()>:
c0029970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029974:	8b 00                	mov    eax,DWORD PTR [eax]
c0029976:	85 c0                	test   eax,eax
c0029978:	75 0e                	jne    c0029988 <LinkedList<Device>::isEmpty()+0x18>
c002997a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002997e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029981:	85 c0                	test   eax,eax
c0029983:	75 03                	jne    c0029988 <LinkedList<Device>::isEmpty()+0x18>
c0029985:	b0 01                	mov    al,0x1
c0029987:	c3                   	ret    
c0029988:	b0 00                	mov    al,0x0
c002998a:	90                   	nop
c002998b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002998c <LinkedList<Device>::getFirstElement()>:
c002998c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029990:	8b 00                	mov    eax,DWORD PTR [eax]
c0029992:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029994 <LinkedList<Device>::removeFirst()>:
c0029994:	83 ec 0c             	sub    esp,0xc
c0029997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002999b:	8b 00                	mov    eax,DWORD PTR [eax]
c002999d:	85 c0                	test   eax,eax
c002999f:	75 15                	jne    c00299b6 <LinkedList<Device>::removeFirst()+0x22>
c00299a1:	83 ec 0c             	sub    esp,0xc
c00299a4:	68 f8 b2 02 c0       	push   0xc002b2f8
c00299a9:	e8 f7 0f ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c00299ae:	83 c4 10             	add    esp,0x10
c00299b1:	e9 87 00 00 00       	jmp    c0029a3d <LinkedList<Device>::removeFirst()+0xa9>
c00299b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00299bd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00299c3:	85 c0                	test   eax,eax
c00299c5:	74 10                	je     c00299d7 <LinkedList<Device>::removeFirst()+0x43>
c00299c7:	83 ec 0c             	sub    esp,0xc
c00299ca:	68 43 b3 02 c0       	push   0xc002b343
c00299cf:	e8 d1 0f ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c00299d4:	83 c4 10             	add    esp,0x10
c00299d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299db:	8b 00                	mov    eax,DWORD PTR [eax]
c00299dd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00299e3:	85 c0                	test   eax,eax
c00299e5:	75 33                	jne    c0029a1a <LinkedList<Device>::removeFirst()+0x86>
c00299e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00299f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00299fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029a03:	83 f8 01             	cmp    eax,0x1
c0029a06:	74 24                	je     c0029a2c <LinkedList<Device>::removeFirst()+0x98>
c0029a08:	83 ec 0c             	sub    esp,0xc
c0029a0b:	68 1c b3 02 c0       	push   0xc002b31c
c0029a10:	e8 90 0f ff ff       	call   c001a9a5 <Krnl::panic(char const*)>
c0029a15:	83 c4 10             	add    esp,0x10
c0029a18:	eb 12                	jmp    c0029a2c <LinkedList<Device>::removeFirst()+0x98>
c0029a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029a20:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a2a:	89 10                	mov    DWORD PTR [eax],edx
c0029a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a30:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029a33:	8d 50 ff             	lea    edx,[eax-0x1]
c0029a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a3a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029a3d:	83 c4 0c             	add    esp,0xc
c0029a40:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029a42 <CPU::~CPU()>:
c0029a42:	83 ec 0c             	sub    esp,0xc
c0029a45:	ba 18 c9 02 c0       	mov    edx,0xc002c918
c0029a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4e:	89 10                	mov    DWORD PTR [eax],edx
c0029a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a54:	83 ec 0c             	sub    esp,0xc
c0029a57:	50                   	push   eax
c0029a58:	e8 e1 a6 fe ff       	call   c001413e <Device::~Device()>
c0029a5d:	83 c4 10             	add    esp,0x10
c0029a60:	90                   	nop
c0029a61:	83 c4 0c             	add    esp,0xc
c0029a64:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029a66 <CPU::~CPU()>:
c0029a66:	83 ec 0c             	sub    esp,0xc
c0029a69:	83 ec 0c             	sub    esp,0xc
c0029a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a70:	e8 cd ff ff ff       	call   c0029a42 <CPU::~CPU()>
c0029a75:	83 c4 10             	add    esp,0x10
c0029a78:	83 ec 08             	sub    esp,0x8
c0029a7b:	68 98 11 00 00       	push   0x1198
c0029a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a84:	e8 ce 92 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029a89:	83 c4 10             	add    esp,0x10
c0029a8c:	83 c4 0c             	add    esp,0xc
c0029a8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029a90 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029a90:	90                   	nop
c0029a91:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029a92 <ThreadControlBlock::ThreadControlBlock()>:
c0029a92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a96:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029a9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029aa1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029aac:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029ab3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ab7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ac2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029ac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029acd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ad5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029ad9:	90                   	nop
c0029ada:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029adc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029adc:	83 ec 0c             	sub    esp,0xc
c0029adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ae3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b18:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029b1f:	83 ec 0c             	sub    esp,0xc
c0029b22:	68 a6 b2 02 c0       	push   0xc002b2a6
c0029b27:	e8 0b 93 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0029b2c:	83 c4 10             	add    esp,0x10
c0029b2f:	90                   	nop
c0029b30:	83 c4 0c             	add    esp,0xc
c0029b33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029b34 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029b34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029b38:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029b3b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0029b3c <Vm::_FPUState::_FPUState()>:
c0029b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029b40:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029b47:	90                   	nop
c0029b48:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029b4a <PCI::~PCI()>:
c0029b4a:	83 ec 0c             	sub    esp,0xc
c0029b4d:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0029b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b56:	89 10                	mov    DWORD PTR [eax],edx
c0029b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b5c:	83 ec 0c             	sub    esp,0xc
c0029b5f:	50                   	push   eax
c0029b60:	e8 a9 9f fe ff       	call   c0013b0e <Bus::~Bus()>
c0029b65:	83 c4 10             	add    esp,0x10
c0029b68:	90                   	nop
c0029b69:	83 c4 0c             	add    esp,0xc
c0029b6c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0029b6e <PCI::~PCI()>:
c0029b6e:	83 ec 0c             	sub    esp,0xc
c0029b71:	83 ec 0c             	sub    esp,0xc
c0029b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b78:	e8 cd ff ff ff       	call   c0029b4a <PCI::~PCI()>
c0029b7d:	83 c4 10             	add    esp,0x10
c0029b80:	83 ec 08             	sub    esp,0x8
c0029b83:	68 58 01 00 00       	push   0x158
c0029b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b8c:	e8 c6 91 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029b91:	83 c4 10             	add    esp,0x10
c0029b94:	83 c4 0c             	add    esp,0xc
c0029b97:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029b98 <IDE::~IDE()>:
c0029b98:	83 ec 0c             	sub    esp,0xc
c0029b9b:	ba c0 dc 02 c0       	mov    edx,0xc002dcc0
c0029ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ba4:	89 10                	mov    DWORD PTR [eax],edx
c0029ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029baa:	83 ec 0c             	sub    esp,0xc
c0029bad:	50                   	push   eax
c0029bae:	e8 a1 aa fe ff       	call   c0014654 <HardDiskController::~HardDiskController()>
c0029bb3:	83 c4 10             	add    esp,0x10
c0029bb6:	90                   	nop
c0029bb7:	83 c4 0c             	add    esp,0xc
c0029bba:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0029bbc <IDE::~IDE()>:
c0029bbc:	83 ec 0c             	sub    esp,0xc
c0029bbf:	83 ec 0c             	sub    esp,0xc
c0029bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bc6:	e8 cd ff ff ff       	call   c0029b98 <IDE::~IDE()>
c0029bcb:	83 c4 10             	add    esp,0x10
c0029bce:	83 ec 08             	sub    esp,0x8
c0029bd1:	68 70 02 00 00       	push   0x270
c0029bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bda:	e8 78 91 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029bdf:	83 c4 10             	add    esp,0x10
c0029be2:	83 c4 0c             	add    esp,0xc
c0029be5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029be6 <SATABus::~SATABus()>:
c0029be6:	83 ec 0c             	sub    esp,0xc
c0029be9:	ba a0 dd 02 c0       	mov    edx,0xc002dda0
c0029bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bf2:	89 10                	mov    DWORD PTR [eax],edx
c0029bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bf8:	83 ec 0c             	sub    esp,0xc
c0029bfb:	50                   	push   eax
c0029bfc:	e8 53 aa fe ff       	call   c0014654 <HardDiskController::~HardDiskController()>
c0029c01:	83 c4 10             	add    esp,0x10
c0029c04:	90                   	nop
c0029c05:	83 c4 0c             	add    esp,0xc
c0029c08:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029c0a <SATABus::~SATABus()>:
c0029c0a:	83 ec 0c             	sub    esp,0xc
c0029c0d:	83 ec 0c             	sub    esp,0xc
c0029c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c14:	e8 cd ff ff ff       	call   c0029be6 <SATABus::~SATABus()>
c0029c19:	83 c4 10             	add    esp,0x10
c0029c1c:	83 ec 08             	sub    esp,0x8
c0029c1f:	68 64 01 00 00       	push   0x164
c0029c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c28:	e8 2a 91 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029c2d:	83 c4 10             	add    esp,0x10
c0029c30:	83 c4 0c             	add    esp,0xc
c0029c33:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029c34 <ATA::~ATA()>:
c0029c34:	83 ec 0c             	sub    esp,0xc
c0029c37:	ba ec dd 02 c0       	mov    edx,0xc002ddec
c0029c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c40:	89 10                	mov    DWORD PTR [eax],edx
c0029c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c46:	83 ec 0c             	sub    esp,0xc
c0029c49:	50                   	push   eax
c0029c4a:	e8 f7 aa fe ff       	call   c0014746 <PhysicalDisk::~PhysicalDisk()>
c0029c4f:	83 c4 10             	add    esp,0x10
c0029c52:	90                   	nop
c0029c53:	83 c4 0c             	add    esp,0xc
c0029c56:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029c58 <ATA::~ATA()>:
c0029c58:	83 ec 0c             	sub    esp,0xc
c0029c5b:	83 ec 0c             	sub    esp,0xc
c0029c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c62:	e8 cd ff ff ff       	call   c0029c34 <ATA::~ATA()>
c0029c67:	83 c4 10             	add    esp,0x10
c0029c6a:	83 ec 08             	sub    esp,0x8
c0029c6d:	68 7c 01 00 00       	push   0x17c
c0029c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c76:	e8 dc 90 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029c7b:	83 c4 10             	add    esp,0x10
c0029c7e:	83 c4 0c             	add    esp,0xc
c0029c81:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029c82 <ATAPI::~ATAPI()>:
c0029c82:	83 ec 0c             	sub    esp,0xc
c0029c85:	ba 24 de 02 c0       	mov    edx,0xc002de24
c0029c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c8e:	89 10                	mov    DWORD PTR [eax],edx
c0029c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c94:	83 ec 0c             	sub    esp,0xc
c0029c97:	50                   	push   eax
c0029c98:	e8 a9 aa fe ff       	call   c0014746 <PhysicalDisk::~PhysicalDisk()>
c0029c9d:	83 c4 10             	add    esp,0x10
c0029ca0:	90                   	nop
c0029ca1:	83 c4 0c             	add    esp,0xc
c0029ca4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029ca6 <ATAPI::~ATAPI()>:
c0029ca6:	83 ec 0c             	sub    esp,0xc
c0029ca9:	83 ec 0c             	sub    esp,0xc
c0029cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cb0:	e8 cd ff ff ff       	call   c0029c82 <ATAPI::~ATAPI()>
c0029cb5:	83 c4 10             	add    esp,0x10
c0029cb8:	83 ec 08             	sub    esp,0x8
c0029cbb:	68 80 01 00 00       	push   0x180
c0029cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cc4:	e8 8e 90 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029cc9:	83 c4 10             	add    esp,0x10
c0029ccc:	83 c4 0c             	add    esp,0xc
c0029ccf:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029cd0 <SATA::~SATA()>:
c0029cd0:	83 ec 0c             	sub    esp,0xc
c0029cd3:	ba d8 de 02 c0       	mov    edx,0xc002ded8
c0029cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cdc:	89 10                	mov    DWORD PTR [eax],edx
c0029cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ce2:	83 ec 0c             	sub    esp,0xc
c0029ce5:	50                   	push   eax
c0029ce6:	e8 5b aa fe ff       	call   c0014746 <PhysicalDisk::~PhysicalDisk()>
c0029ceb:	83 c4 10             	add    esp,0x10
c0029cee:	90                   	nop
c0029cef:	83 c4 0c             	add    esp,0xc
c0029cf2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029cf4 <SATA::~SATA()>:
c0029cf4:	83 ec 0c             	sub    esp,0xc
c0029cf7:	83 ec 0c             	sub    esp,0xc
c0029cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cfe:	e8 cd ff ff ff       	call   c0029cd0 <SATA::~SATA()>
c0029d03:	83 c4 10             	add    esp,0x10
c0029d06:	83 ec 08             	sub    esp,0x8
c0029d09:	68 7c 01 00 00       	push   0x17c
c0029d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d12:	e8 40 90 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029d17:	83 c4 10             	add    esp,0x10
c0029d1a:	83 c4 0c             	add    esp,0xc
c0029d1d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029d1e <SATAPI::~SATAPI()>:
c0029d1e:	83 ec 0c             	sub    esp,0xc
c0029d21:	ba b4 df 02 c0       	mov    edx,0xc002dfb4
c0029d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d2a:	89 10                	mov    DWORD PTR [eax],edx
c0029d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d30:	83 ec 0c             	sub    esp,0xc
c0029d33:	50                   	push   eax
c0029d34:	e8 0d aa fe ff       	call   c0014746 <PhysicalDisk::~PhysicalDisk()>
c0029d39:	83 c4 10             	add    esp,0x10
c0029d3c:	90                   	nop
c0029d3d:	83 c4 0c             	add    esp,0xc
c0029d40:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029d42 <SATAPI::~SATAPI()>:
c0029d42:	83 ec 0c             	sub    esp,0xc
c0029d45:	83 ec 0c             	sub    esp,0xc
c0029d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d4c:	e8 cd ff ff ff       	call   c0029d1e <SATAPI::~SATAPI()>
c0029d51:	83 c4 10             	add    esp,0x10
c0029d54:	83 ec 08             	sub    esp,0x8
c0029d57:	68 80 01 00 00       	push   0x180
c0029d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d60:	e8 f2 8f fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029d65:	83 c4 10             	add    esp,0x10
c0029d68:	83 c4 0c             	add    esp,0xc
c0029d6b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029d6c <AVX::~AVX()>:
c0029d6c:	83 ec 0c             	sub    esp,0xc
c0029d6f:	ba f4 df 02 c0       	mov    edx,0xc002dff4
c0029d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d78:	89 10                	mov    DWORD PTR [eax],edx
c0029d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d7e:	83 ec 0c             	sub    esp,0xc
c0029d81:	50                   	push   eax
c0029d82:	e8 43 aa fe ff       	call   c00147ca <FPU::~FPU()>
c0029d87:	83 c4 10             	add    esp,0x10
c0029d8a:	90                   	nop
c0029d8b:	83 c4 0c             	add    esp,0xc
c0029d8e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029d90 <AVX::~AVX()>:
c0029d90:	83 ec 0c             	sub    esp,0xc
c0029d93:	83 ec 0c             	sub    esp,0xc
c0029d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d9a:	e8 cd ff ff ff       	call   c0029d6c <AVX::~AVX()>
c0029d9f:	83 c4 10             	add    esp,0x10
c0029da2:	83 ec 08             	sub    esp,0x8
c0029da5:	68 58 01 00 00       	push   0x158
c0029daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dae:	e8 a4 8f fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029db3:	83 c4 10             	add    esp,0x10
c0029db6:	83 c4 0c             	add    esp,0xc
c0029db9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029dba <MMX::~MMX()>:
c0029dba:	83 ec 0c             	sub    esp,0xc
c0029dbd:	ba 34 e0 02 c0       	mov    edx,0xc002e034
c0029dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dc6:	89 10                	mov    DWORD PTR [eax],edx
c0029dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dcc:	83 ec 0c             	sub    esp,0xc
c0029dcf:	50                   	push   eax
c0029dd0:	e8 f5 a9 fe ff       	call   c00147ca <FPU::~FPU()>
c0029dd5:	83 c4 10             	add    esp,0x10
c0029dd8:	90                   	nop
c0029dd9:	83 c4 0c             	add    esp,0xc
c0029ddc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029dde <MMX::~MMX()>:
c0029dde:	83 ec 0c             	sub    esp,0xc
c0029de1:	83 ec 0c             	sub    esp,0xc
c0029de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029de8:	e8 cd ff ff ff       	call   c0029dba <MMX::~MMX()>
c0029ded:	83 c4 10             	add    esp,0x10
c0029df0:	83 ec 08             	sub    esp,0x8
c0029df3:	68 58 01 00 00       	push   0x158
c0029df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dfc:	e8 56 8f fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029e01:	83 c4 10             	add    esp,0x10
c0029e04:	83 c4 0c             	add    esp,0xc
c0029e07:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029e08 <SSE::~SSE()>:
c0029e08:	83 ec 0c             	sub    esp,0xc
c0029e0b:	ba 74 e0 02 c0       	mov    edx,0xc002e074
c0029e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e14:	89 10                	mov    DWORD PTR [eax],edx
c0029e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e1a:	83 ec 0c             	sub    esp,0xc
c0029e1d:	50                   	push   eax
c0029e1e:	e8 a7 a9 fe ff       	call   c00147ca <FPU::~FPU()>
c0029e23:	83 c4 10             	add    esp,0x10
c0029e26:	90                   	nop
c0029e27:	83 c4 0c             	add    esp,0xc
c0029e2a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029e2c <SSE::~SSE()>:
c0029e2c:	83 ec 0c             	sub    esp,0xc
c0029e2f:	83 ec 0c             	sub    esp,0xc
c0029e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e36:	e8 cd ff ff ff       	call   c0029e08 <SSE::~SSE()>
c0029e3b:	83 c4 10             	add    esp,0x10
c0029e3e:	83 ec 08             	sub    esp,0x8
c0029e41:	68 58 01 00 00       	push   0x158
c0029e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e4a:	e8 08 8f fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029e4f:	83 c4 10             	add    esp,0x10
c0029e52:	83 c4 0c             	add    esp,0xc
c0029e55:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029e56 <x87::~x87()>:
c0029e56:	83 ec 0c             	sub    esp,0xc
c0029e59:	ba b4 e0 02 c0       	mov    edx,0xc002e0b4
c0029e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e62:	89 10                	mov    DWORD PTR [eax],edx
c0029e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e68:	83 ec 0c             	sub    esp,0xc
c0029e6b:	50                   	push   eax
c0029e6c:	e8 59 a9 fe ff       	call   c00147ca <FPU::~FPU()>
c0029e71:	83 c4 10             	add    esp,0x10
c0029e74:	90                   	nop
c0029e75:	83 c4 0c             	add    esp,0xc
c0029e78:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029e7a <x87::~x87()>:
c0029e7a:	83 ec 0c             	sub    esp,0xc
c0029e7d:	83 ec 0c             	sub    esp,0xc
c0029e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e84:	e8 cd ff ff ff       	call   c0029e56 <x87::~x87()>
c0029e89:	83 c4 10             	add    esp,0x10
c0029e8c:	83 ec 08             	sub    esp,0x8
c0029e8f:	68 58 01 00 00       	push   0x158
c0029e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e98:	e8 ba 8e fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029e9d:	83 c4 10             	add    esp,0x10
c0029ea0:	83 c4 0c             	add    esp,0xc
c0029ea3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029ea4 <IOAPIC::~IOAPIC()>:
c0029ea4:	83 ec 0c             	sub    esp,0xc
c0029ea7:	ba 0c e2 02 c0       	mov    edx,0xc002e20c
c0029eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029eb0:	89 10                	mov    DWORD PTR [eax],edx
c0029eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029eb6:	83 ec 0c             	sub    esp,0xc
c0029eb9:	50                   	push   eax
c0029eba:	e8 7f a2 fe ff       	call   c001413e <Device::~Device()>
c0029ebf:	83 c4 10             	add    esp,0x10
c0029ec2:	90                   	nop
c0029ec3:	83 c4 0c             	add    esp,0xc
c0029ec6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029ec8 <IOAPIC::~IOAPIC()>:
c0029ec8:	83 ec 0c             	sub    esp,0xc
c0029ecb:	83 ec 0c             	sub    esp,0xc
c0029ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ed2:	e8 cd ff ff ff       	call   c0029ea4 <IOAPIC::~IOAPIC()>
c0029ed7:	83 c4 10             	add    esp,0x10
c0029eda:	83 ec 08             	sub    esp,0x8
c0029edd:	68 68 01 00 00       	push   0x168
c0029ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ee6:	e8 6c 8e fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029eeb:	83 c4 10             	add    esp,0x10
c0029eee:	83 c4 0c             	add    esp,0xc
c0029ef1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029ef2 <APIC::~APIC()>:
c0029ef2:	83 ec 0c             	sub    esp,0xc
c0029ef5:	ba c4 e1 02 c0       	mov    edx,0xc002e1c4
c0029efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029efe:	89 10                	mov    DWORD PTR [eax],edx
c0029f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f04:	83 ec 0c             	sub    esp,0xc
c0029f07:	50                   	push   eax
c0029f08:	e8 87 ad fe ff       	call   c0014c94 <InterruptController::~InterruptController()>
c0029f0d:	83 c4 10             	add    esp,0x10
c0029f10:	90                   	nop
c0029f11:	83 c4 0c             	add    esp,0xc
c0029f14:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029f16 <APIC::~APIC()>:
c0029f16:	83 ec 0c             	sub    esp,0xc
c0029f19:	83 ec 0c             	sub    esp,0xc
c0029f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f20:	e8 cd ff ff ff       	call   c0029ef2 <APIC::~APIC()>
c0029f25:	83 c4 10             	add    esp,0x10
c0029f28:	83 ec 08             	sub    esp,0x8
c0029f2b:	68 58 21 00 00       	push   0x2158
c0029f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f34:	e8 1e 8e fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029f39:	83 c4 10             	add    esp,0x10
c0029f3c:	83 c4 0c             	add    esp,0xc
c0029f3f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029f40 <PIC::~PIC()>:
c0029f40:	83 ec 0c             	sub    esp,0xc
c0029f43:	ba 5c e2 02 c0       	mov    edx,0xc002e25c
c0029f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f4c:	89 10                	mov    DWORD PTR [eax],edx
c0029f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f52:	83 ec 0c             	sub    esp,0xc
c0029f55:	50                   	push   eax
c0029f56:	e8 39 ad fe ff       	call   c0014c94 <InterruptController::~InterruptController()>
c0029f5b:	83 c4 10             	add    esp,0x10
c0029f5e:	90                   	nop
c0029f5f:	83 c4 0c             	add    esp,0xc
c0029f62:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029f64 <PIC::~PIC()>:
c0029f64:	83 ec 0c             	sub    esp,0xc
c0029f67:	83 ec 0c             	sub    esp,0xc
c0029f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f6e:	e8 cd ff ff ff       	call   c0029f40 <PIC::~PIC()>
c0029f73:	83 c4 10             	add    esp,0x10
c0029f76:	83 ec 08             	sub    esp,0x8
c0029f79:	68 58 21 00 00       	push   0x2158
c0029f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f82:	e8 d0 8d fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029f87:	83 c4 10             	add    esp,0x10
c0029f8a:	83 c4 0c             	add    esp,0xc
c0029f8d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029f8e <APICTimer::~APICTimer()>:
c0029f8e:	83 ec 0c             	sub    esp,0xc
c0029f91:	ba b0 e2 02 c0       	mov    edx,0xc002e2b0
c0029f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f9a:	89 10                	mov    DWORD PTR [eax],edx
c0029f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fa0:	83 ec 0c             	sub    esp,0xc
c0029fa3:	50                   	push   eax
c0029fa4:	e8 a1 cd fe ff       	call   c0016d4a <Timer::~Timer()>
c0029fa9:	83 c4 10             	add    esp,0x10
c0029fac:	90                   	nop
c0029fad:	83 c4 0c             	add    esp,0xc
c0029fb0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029fb2 <APICTimer::~APICTimer()>:
c0029fb2:	83 ec 0c             	sub    esp,0xc
c0029fb5:	83 ec 0c             	sub    esp,0xc
c0029fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029fbc:	e8 cd ff ff ff       	call   c0029f8e <APICTimer::~APICTimer()>
c0029fc1:	83 c4 10             	add    esp,0x10
c0029fc4:	83 ec 08             	sub    esp,0x8
c0029fc7:	68 60 01 00 00       	push   0x160
c0029fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029fd0:	e8 82 8d fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029fd5:	83 c4 10             	add    esp,0x10
c0029fd8:	83 c4 0c             	add    esp,0xc
c0029fdb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029fdc <PIT::~PIT()>:
c0029fdc:	83 ec 0c             	sub    esp,0xc
c0029fdf:	ba 00 e3 02 c0       	mov    edx,0xc002e300
c0029fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fe8:	89 10                	mov    DWORD PTR [eax],edx
c0029fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fee:	83 ec 0c             	sub    esp,0xc
c0029ff1:	50                   	push   eax
c0029ff2:	e8 53 cd fe ff       	call   c0016d4a <Timer::~Timer()>
c0029ff7:	83 c4 10             	add    esp,0x10
c0029ffa:	90                   	nop
c0029ffb:	83 c4 0c             	add    esp,0xc
c0029ffe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002a000 <PIT::~PIT()>:
c002a000:	83 ec 0c             	sub    esp,0xc
c002a003:	83 ec 0c             	sub    esp,0xc
c002a006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a00a:	e8 cd ff ff ff       	call   c0029fdc <PIT::~PIT()>
c002a00f:	83 c4 10             	add    esp,0x10
c002a012:	83 ec 08             	sub    esp,0x8
c002a015:	68 5c 01 00 00       	push   0x15c
c002a01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a01e:	e8 34 8d fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c002a023:	83 c4 10             	add    esp,0x10
c002a026:	83 c4 0c             	add    esp,0xc
c002a029:	c3                   	ret    
